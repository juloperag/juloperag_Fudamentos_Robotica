
Control_Robot_v2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b5dc  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a70  0800b780  0800b780  0001b780  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c1f0  0800c1f0  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  0800c1f0  0800c1f0  0001c1f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c1f8  0800c1f8  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c1f8  0800c1f8  0001c1f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c1fc  0800c1fc  0001c1fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  0800c200  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000ad8  200001e4  0800c3e4  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000cbc  0800c3e4  00020cbc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00004e90  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001174  00000000  00000000  000250a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000470  00000000  00000000  00026218  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000003c8  00000000  00000000  00026688  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00010f87  00000000  00000000  00026a50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000068db  00000000  00000000  000379d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000586f8  00000000  00000000  0003e2b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000969aa  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002b08  00000000  00000000  000969fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001e4 	.word	0x200001e4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800b764 	.word	0x0800b764

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e8 	.word	0x200001e8
 80001dc:	0800b764 	.word	0x0800b764

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2uiz>:
 8000bd8:	004a      	lsls	r2, r1, #1
 8000bda:	d211      	bcs.n	8000c00 <__aeabi_d2uiz+0x28>
 8000bdc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000be0:	d211      	bcs.n	8000c06 <__aeabi_d2uiz+0x2e>
 8000be2:	d50d      	bpl.n	8000c00 <__aeabi_d2uiz+0x28>
 8000be4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bec:	d40e      	bmi.n	8000c0c <__aeabi_d2uiz+0x34>
 8000bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_d2uiz+0x3a>
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_d2f>:
 8000c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c20:	bf24      	itt	cs
 8000c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c2a:	d90d      	bls.n	8000c48 <__aeabi_d2f+0x30>
 8000c2c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c38:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c40:	bf08      	it	eq
 8000c42:	f020 0001 	biceq.w	r0, r0, #1
 8000c46:	4770      	bx	lr
 8000c48:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c4c:	d121      	bne.n	8000c92 <__aeabi_d2f+0x7a>
 8000c4e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c52:	bfbc      	itt	lt
 8000c54:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c58:	4770      	bxlt	lr
 8000c5a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c62:	f1c2 0218 	rsb	r2, r2, #24
 8000c66:	f1c2 0c20 	rsb	ip, r2, #32
 8000c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c72:	bf18      	it	ne
 8000c74:	f040 0001 	orrne.w	r0, r0, #1
 8000c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c84:	ea40 000c 	orr.w	r0, r0, ip
 8000c88:	fa23 f302 	lsr.w	r3, r3, r2
 8000c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c90:	e7cc      	b.n	8000c2c <__aeabi_d2f+0x14>
 8000c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c96:	d107      	bne.n	8000ca8 <__aeabi_d2f+0x90>
 8000c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c9c:	bf1e      	ittt	ne
 8000c9e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ca2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ca6:	4770      	bxne	lr
 8000ca8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cb0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_ldivmod>:
 8000cb8:	b97b      	cbnz	r3, 8000cda <__aeabi_ldivmod+0x22>
 8000cba:	b972      	cbnz	r2, 8000cda <__aeabi_ldivmod+0x22>
 8000cbc:	2900      	cmp	r1, #0
 8000cbe:	bfbe      	ittt	lt
 8000cc0:	2000      	movlt	r0, #0
 8000cc2:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000cc6:	e006      	blt.n	8000cd6 <__aeabi_ldivmod+0x1e>
 8000cc8:	bf08      	it	eq
 8000cca:	2800      	cmpeq	r0, #0
 8000ccc:	bf1c      	itt	ne
 8000cce:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000cd2:	f04f 30ff 	movne.w	r0, #4294967295
 8000cd6:	f000 b9dd 	b.w	8001094 <__aeabi_idiv0>
 8000cda:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cde:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce2:	2900      	cmp	r1, #0
 8000ce4:	db09      	blt.n	8000cfa <__aeabi_ldivmod+0x42>
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	db1a      	blt.n	8000d20 <__aeabi_ldivmod+0x68>
 8000cea:	f000 f86b 	bl	8000dc4 <__udivmoddi4>
 8000cee:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf6:	b004      	add	sp, #16
 8000cf8:	4770      	bx	lr
 8000cfa:	4240      	negs	r0, r0
 8000cfc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	db1b      	blt.n	8000d3c <__aeabi_ldivmod+0x84>
 8000d04:	f000 f85e 	bl	8000dc4 <__udivmoddi4>
 8000d08:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d0c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d10:	b004      	add	sp, #16
 8000d12:	4240      	negs	r0, r0
 8000d14:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d18:	4252      	negs	r2, r2
 8000d1a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d1e:	4770      	bx	lr
 8000d20:	4252      	negs	r2, r2
 8000d22:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d26:	f000 f84d 	bl	8000dc4 <__udivmoddi4>
 8000d2a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d2e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d32:	b004      	add	sp, #16
 8000d34:	4240      	negs	r0, r0
 8000d36:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d3a:	4770      	bx	lr
 8000d3c:	4252      	negs	r2, r2
 8000d3e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d42:	f000 f83f 	bl	8000dc4 <__udivmoddi4>
 8000d46:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d4a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d4e:	b004      	add	sp, #16
 8000d50:	4252      	negs	r2, r2
 8000d52:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d56:	4770      	bx	lr

08000d58 <__aeabi_d2lz>:
 8000d58:	b538      	push	{r3, r4, r5, lr}
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	4604      	mov	r4, r0
 8000d60:	460d      	mov	r5, r1
 8000d62:	f7ff fed3 	bl	8000b0c <__aeabi_dcmplt>
 8000d66:	b928      	cbnz	r0, 8000d74 <__aeabi_d2lz+0x1c>
 8000d68:	4620      	mov	r0, r4
 8000d6a:	4629      	mov	r1, r5
 8000d6c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d70:	f000 b80a 	b.w	8000d88 <__aeabi_d2ulz>
 8000d74:	4620      	mov	r0, r4
 8000d76:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d7a:	f000 f805 	bl	8000d88 <__aeabi_d2ulz>
 8000d7e:	4240      	negs	r0, r0
 8000d80:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d84:	bd38      	pop	{r3, r4, r5, pc}
 8000d86:	bf00      	nop

08000d88 <__aeabi_d2ulz>:
 8000d88:	b5d0      	push	{r4, r6, r7, lr}
 8000d8a:	4b0c      	ldr	r3, [pc, #48]	; (8000dbc <__aeabi_d2ulz+0x34>)
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	4606      	mov	r6, r0
 8000d90:	460f      	mov	r7, r1
 8000d92:	f7ff fc49 	bl	8000628 <__aeabi_dmul>
 8000d96:	f7ff ff1f 	bl	8000bd8 <__aeabi_d2uiz>
 8000d9a:	4604      	mov	r4, r0
 8000d9c:	f7ff fbca 	bl	8000534 <__aeabi_ui2d>
 8000da0:	4b07      	ldr	r3, [pc, #28]	; (8000dc0 <__aeabi_d2ulz+0x38>)
 8000da2:	2200      	movs	r2, #0
 8000da4:	f7ff fc40 	bl	8000628 <__aeabi_dmul>
 8000da8:	4602      	mov	r2, r0
 8000daa:	460b      	mov	r3, r1
 8000dac:	4630      	mov	r0, r6
 8000dae:	4639      	mov	r1, r7
 8000db0:	f7ff fa82 	bl	80002b8 <__aeabi_dsub>
 8000db4:	f7ff ff10 	bl	8000bd8 <__aeabi_d2uiz>
 8000db8:	4621      	mov	r1, r4
 8000dba:	bdd0      	pop	{r4, r6, r7, pc}
 8000dbc:	3df00000 	.word	0x3df00000
 8000dc0:	41f00000 	.word	0x41f00000

08000dc4 <__udivmoddi4>:
 8000dc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000dc8:	9d08      	ldr	r5, [sp, #32]
 8000dca:	4604      	mov	r4, r0
 8000dcc:	468e      	mov	lr, r1
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d14d      	bne.n	8000e6e <__udivmoddi4+0xaa>
 8000dd2:	428a      	cmp	r2, r1
 8000dd4:	4694      	mov	ip, r2
 8000dd6:	d969      	bls.n	8000eac <__udivmoddi4+0xe8>
 8000dd8:	fab2 f282 	clz	r2, r2
 8000ddc:	b152      	cbz	r2, 8000df4 <__udivmoddi4+0x30>
 8000dde:	fa01 f302 	lsl.w	r3, r1, r2
 8000de2:	f1c2 0120 	rsb	r1, r2, #32
 8000de6:	fa20 f101 	lsr.w	r1, r0, r1
 8000dea:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dee:	ea41 0e03 	orr.w	lr, r1, r3
 8000df2:	4094      	lsls	r4, r2
 8000df4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000df8:	0c21      	lsrs	r1, r4, #16
 8000dfa:	fbbe f6f8 	udiv	r6, lr, r8
 8000dfe:	fa1f f78c 	uxth.w	r7, ip
 8000e02:	fb08 e316 	mls	r3, r8, r6, lr
 8000e06:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000e0a:	fb06 f107 	mul.w	r1, r6, r7
 8000e0e:	4299      	cmp	r1, r3
 8000e10:	d90a      	bls.n	8000e28 <__udivmoddi4+0x64>
 8000e12:	eb1c 0303 	adds.w	r3, ip, r3
 8000e16:	f106 30ff 	add.w	r0, r6, #4294967295
 8000e1a:	f080 811f 	bcs.w	800105c <__udivmoddi4+0x298>
 8000e1e:	4299      	cmp	r1, r3
 8000e20:	f240 811c 	bls.w	800105c <__udivmoddi4+0x298>
 8000e24:	3e02      	subs	r6, #2
 8000e26:	4463      	add	r3, ip
 8000e28:	1a5b      	subs	r3, r3, r1
 8000e2a:	b2a4      	uxth	r4, r4
 8000e2c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e30:	fb08 3310 	mls	r3, r8, r0, r3
 8000e34:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e38:	fb00 f707 	mul.w	r7, r0, r7
 8000e3c:	42a7      	cmp	r7, r4
 8000e3e:	d90a      	bls.n	8000e56 <__udivmoddi4+0x92>
 8000e40:	eb1c 0404 	adds.w	r4, ip, r4
 8000e44:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e48:	f080 810a 	bcs.w	8001060 <__udivmoddi4+0x29c>
 8000e4c:	42a7      	cmp	r7, r4
 8000e4e:	f240 8107 	bls.w	8001060 <__udivmoddi4+0x29c>
 8000e52:	4464      	add	r4, ip
 8000e54:	3802      	subs	r0, #2
 8000e56:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e5a:	1be4      	subs	r4, r4, r7
 8000e5c:	2600      	movs	r6, #0
 8000e5e:	b11d      	cbz	r5, 8000e68 <__udivmoddi4+0xa4>
 8000e60:	40d4      	lsrs	r4, r2
 8000e62:	2300      	movs	r3, #0
 8000e64:	e9c5 4300 	strd	r4, r3, [r5]
 8000e68:	4631      	mov	r1, r6
 8000e6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e6e:	428b      	cmp	r3, r1
 8000e70:	d909      	bls.n	8000e86 <__udivmoddi4+0xc2>
 8000e72:	2d00      	cmp	r5, #0
 8000e74:	f000 80ef 	beq.w	8001056 <__udivmoddi4+0x292>
 8000e78:	2600      	movs	r6, #0
 8000e7a:	e9c5 0100 	strd	r0, r1, [r5]
 8000e7e:	4630      	mov	r0, r6
 8000e80:	4631      	mov	r1, r6
 8000e82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e86:	fab3 f683 	clz	r6, r3
 8000e8a:	2e00      	cmp	r6, #0
 8000e8c:	d14a      	bne.n	8000f24 <__udivmoddi4+0x160>
 8000e8e:	428b      	cmp	r3, r1
 8000e90:	d302      	bcc.n	8000e98 <__udivmoddi4+0xd4>
 8000e92:	4282      	cmp	r2, r0
 8000e94:	f200 80f9 	bhi.w	800108a <__udivmoddi4+0x2c6>
 8000e98:	1a84      	subs	r4, r0, r2
 8000e9a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e9e:	2001      	movs	r0, #1
 8000ea0:	469e      	mov	lr, r3
 8000ea2:	2d00      	cmp	r5, #0
 8000ea4:	d0e0      	beq.n	8000e68 <__udivmoddi4+0xa4>
 8000ea6:	e9c5 4e00 	strd	r4, lr, [r5]
 8000eaa:	e7dd      	b.n	8000e68 <__udivmoddi4+0xa4>
 8000eac:	b902      	cbnz	r2, 8000eb0 <__udivmoddi4+0xec>
 8000eae:	deff      	udf	#255	; 0xff
 8000eb0:	fab2 f282 	clz	r2, r2
 8000eb4:	2a00      	cmp	r2, #0
 8000eb6:	f040 8092 	bne.w	8000fde <__udivmoddi4+0x21a>
 8000eba:	eba1 010c 	sub.w	r1, r1, ip
 8000ebe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ec2:	fa1f fe8c 	uxth.w	lr, ip
 8000ec6:	2601      	movs	r6, #1
 8000ec8:	0c20      	lsrs	r0, r4, #16
 8000eca:	fbb1 f3f7 	udiv	r3, r1, r7
 8000ece:	fb07 1113 	mls	r1, r7, r3, r1
 8000ed2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ed6:	fb0e f003 	mul.w	r0, lr, r3
 8000eda:	4288      	cmp	r0, r1
 8000edc:	d908      	bls.n	8000ef0 <__udivmoddi4+0x12c>
 8000ede:	eb1c 0101 	adds.w	r1, ip, r1
 8000ee2:	f103 38ff 	add.w	r8, r3, #4294967295
 8000ee6:	d202      	bcs.n	8000eee <__udivmoddi4+0x12a>
 8000ee8:	4288      	cmp	r0, r1
 8000eea:	f200 80cb 	bhi.w	8001084 <__udivmoddi4+0x2c0>
 8000eee:	4643      	mov	r3, r8
 8000ef0:	1a09      	subs	r1, r1, r0
 8000ef2:	b2a4      	uxth	r4, r4
 8000ef4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ef8:	fb07 1110 	mls	r1, r7, r0, r1
 8000efc:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000f00:	fb0e fe00 	mul.w	lr, lr, r0
 8000f04:	45a6      	cmp	lr, r4
 8000f06:	d908      	bls.n	8000f1a <__udivmoddi4+0x156>
 8000f08:	eb1c 0404 	adds.w	r4, ip, r4
 8000f0c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f10:	d202      	bcs.n	8000f18 <__udivmoddi4+0x154>
 8000f12:	45a6      	cmp	lr, r4
 8000f14:	f200 80bb 	bhi.w	800108e <__udivmoddi4+0x2ca>
 8000f18:	4608      	mov	r0, r1
 8000f1a:	eba4 040e 	sub.w	r4, r4, lr
 8000f1e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000f22:	e79c      	b.n	8000e5e <__udivmoddi4+0x9a>
 8000f24:	f1c6 0720 	rsb	r7, r6, #32
 8000f28:	40b3      	lsls	r3, r6
 8000f2a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000f2e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000f32:	fa20 f407 	lsr.w	r4, r0, r7
 8000f36:	fa01 f306 	lsl.w	r3, r1, r6
 8000f3a:	431c      	orrs	r4, r3
 8000f3c:	40f9      	lsrs	r1, r7
 8000f3e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000f42:	fa00 f306 	lsl.w	r3, r0, r6
 8000f46:	fbb1 f8f9 	udiv	r8, r1, r9
 8000f4a:	0c20      	lsrs	r0, r4, #16
 8000f4c:	fa1f fe8c 	uxth.w	lr, ip
 8000f50:	fb09 1118 	mls	r1, r9, r8, r1
 8000f54:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000f58:	fb08 f00e 	mul.w	r0, r8, lr
 8000f5c:	4288      	cmp	r0, r1
 8000f5e:	fa02 f206 	lsl.w	r2, r2, r6
 8000f62:	d90b      	bls.n	8000f7c <__udivmoddi4+0x1b8>
 8000f64:	eb1c 0101 	adds.w	r1, ip, r1
 8000f68:	f108 3aff 	add.w	sl, r8, #4294967295
 8000f6c:	f080 8088 	bcs.w	8001080 <__udivmoddi4+0x2bc>
 8000f70:	4288      	cmp	r0, r1
 8000f72:	f240 8085 	bls.w	8001080 <__udivmoddi4+0x2bc>
 8000f76:	f1a8 0802 	sub.w	r8, r8, #2
 8000f7a:	4461      	add	r1, ip
 8000f7c:	1a09      	subs	r1, r1, r0
 8000f7e:	b2a4      	uxth	r4, r4
 8000f80:	fbb1 f0f9 	udiv	r0, r1, r9
 8000f84:	fb09 1110 	mls	r1, r9, r0, r1
 8000f88:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000f8c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f90:	458e      	cmp	lr, r1
 8000f92:	d908      	bls.n	8000fa6 <__udivmoddi4+0x1e2>
 8000f94:	eb1c 0101 	adds.w	r1, ip, r1
 8000f98:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f9c:	d26c      	bcs.n	8001078 <__udivmoddi4+0x2b4>
 8000f9e:	458e      	cmp	lr, r1
 8000fa0:	d96a      	bls.n	8001078 <__udivmoddi4+0x2b4>
 8000fa2:	3802      	subs	r0, #2
 8000fa4:	4461      	add	r1, ip
 8000fa6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000faa:	fba0 9402 	umull	r9, r4, r0, r2
 8000fae:	eba1 010e 	sub.w	r1, r1, lr
 8000fb2:	42a1      	cmp	r1, r4
 8000fb4:	46c8      	mov	r8, r9
 8000fb6:	46a6      	mov	lr, r4
 8000fb8:	d356      	bcc.n	8001068 <__udivmoddi4+0x2a4>
 8000fba:	d053      	beq.n	8001064 <__udivmoddi4+0x2a0>
 8000fbc:	b15d      	cbz	r5, 8000fd6 <__udivmoddi4+0x212>
 8000fbe:	ebb3 0208 	subs.w	r2, r3, r8
 8000fc2:	eb61 010e 	sbc.w	r1, r1, lr
 8000fc6:	fa01 f707 	lsl.w	r7, r1, r7
 8000fca:	fa22 f306 	lsr.w	r3, r2, r6
 8000fce:	40f1      	lsrs	r1, r6
 8000fd0:	431f      	orrs	r7, r3
 8000fd2:	e9c5 7100 	strd	r7, r1, [r5]
 8000fd6:	2600      	movs	r6, #0
 8000fd8:	4631      	mov	r1, r6
 8000fda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fde:	f1c2 0320 	rsb	r3, r2, #32
 8000fe2:	40d8      	lsrs	r0, r3
 8000fe4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000fe8:	fa21 f303 	lsr.w	r3, r1, r3
 8000fec:	4091      	lsls	r1, r2
 8000fee:	4301      	orrs	r1, r0
 8000ff0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ff4:	fa1f fe8c 	uxth.w	lr, ip
 8000ff8:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ffc:	fb07 3610 	mls	r6, r7, r0, r3
 8001000:	0c0b      	lsrs	r3, r1, #16
 8001002:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8001006:	fb00 f60e 	mul.w	r6, r0, lr
 800100a:	429e      	cmp	r6, r3
 800100c:	fa04 f402 	lsl.w	r4, r4, r2
 8001010:	d908      	bls.n	8001024 <__udivmoddi4+0x260>
 8001012:	eb1c 0303 	adds.w	r3, ip, r3
 8001016:	f100 38ff 	add.w	r8, r0, #4294967295
 800101a:	d22f      	bcs.n	800107c <__udivmoddi4+0x2b8>
 800101c:	429e      	cmp	r6, r3
 800101e:	d92d      	bls.n	800107c <__udivmoddi4+0x2b8>
 8001020:	3802      	subs	r0, #2
 8001022:	4463      	add	r3, ip
 8001024:	1b9b      	subs	r3, r3, r6
 8001026:	b289      	uxth	r1, r1
 8001028:	fbb3 f6f7 	udiv	r6, r3, r7
 800102c:	fb07 3316 	mls	r3, r7, r6, r3
 8001030:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8001034:	fb06 f30e 	mul.w	r3, r6, lr
 8001038:	428b      	cmp	r3, r1
 800103a:	d908      	bls.n	800104e <__udivmoddi4+0x28a>
 800103c:	eb1c 0101 	adds.w	r1, ip, r1
 8001040:	f106 38ff 	add.w	r8, r6, #4294967295
 8001044:	d216      	bcs.n	8001074 <__udivmoddi4+0x2b0>
 8001046:	428b      	cmp	r3, r1
 8001048:	d914      	bls.n	8001074 <__udivmoddi4+0x2b0>
 800104a:	3e02      	subs	r6, #2
 800104c:	4461      	add	r1, ip
 800104e:	1ac9      	subs	r1, r1, r3
 8001050:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8001054:	e738      	b.n	8000ec8 <__udivmoddi4+0x104>
 8001056:	462e      	mov	r6, r5
 8001058:	4628      	mov	r0, r5
 800105a:	e705      	b.n	8000e68 <__udivmoddi4+0xa4>
 800105c:	4606      	mov	r6, r0
 800105e:	e6e3      	b.n	8000e28 <__udivmoddi4+0x64>
 8001060:	4618      	mov	r0, r3
 8001062:	e6f8      	b.n	8000e56 <__udivmoddi4+0x92>
 8001064:	454b      	cmp	r3, r9
 8001066:	d2a9      	bcs.n	8000fbc <__udivmoddi4+0x1f8>
 8001068:	ebb9 0802 	subs.w	r8, r9, r2
 800106c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8001070:	3801      	subs	r0, #1
 8001072:	e7a3      	b.n	8000fbc <__udivmoddi4+0x1f8>
 8001074:	4646      	mov	r6, r8
 8001076:	e7ea      	b.n	800104e <__udivmoddi4+0x28a>
 8001078:	4620      	mov	r0, r4
 800107a:	e794      	b.n	8000fa6 <__udivmoddi4+0x1e2>
 800107c:	4640      	mov	r0, r8
 800107e:	e7d1      	b.n	8001024 <__udivmoddi4+0x260>
 8001080:	46d0      	mov	r8, sl
 8001082:	e77b      	b.n	8000f7c <__udivmoddi4+0x1b8>
 8001084:	3b02      	subs	r3, #2
 8001086:	4461      	add	r1, ip
 8001088:	e732      	b.n	8000ef0 <__udivmoddi4+0x12c>
 800108a:	4630      	mov	r0, r6
 800108c:	e709      	b.n	8000ea2 <__udivmoddi4+0xde>
 800108e:	4464      	add	r4, ip
 8001090:	3802      	subs	r0, #2
 8001092:	e742      	b.n	8000f1a <__udivmoddi4+0x156>

08001094 <__aeabi_idiv0>:
 8001094:	4770      	bx	lr
 8001096:	bf00      	nop

08001098 <updateDuttyMotor>:
#include <MotorDriver.h>


//Funcion para actualizar el dutty del pwm
void updateDuttyMotor(Motor_Handler_t *ptrMotorHandler,  float newValue)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b082      	sub	sp, #8
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
 80010a0:	ed87 0a00 	vstr	s0, [r7]
		//Guardar valor del dutty
		ptrMotorHandler->configMotor.dutty = newValue;
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	683a      	ldr	r2, [r7, #0]
 80010a8:	639a      	str	r2, [r3, #56]	; 0x38
		//Actualizamos el valor del dutty
		updateDuttyCyclePercentageFloat(ptrMotorHandler->phandlerPWM, ptrMotorHandler->configMotor.dutty);
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 80010b4:	eeb0 0a67 	vmov.f32	s0, s15
 80010b8:	4610      	mov	r0, r2
 80010ba:	f003 faad 	bl	8004618 <updateDuttyCyclePercentageFloat>
}
 80010be:	bf00      	nop
 80010c0:	3708      	adds	r7, #8
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bd80      	pop	{r7, pc}

080010c6 <updateDirMotor>:
		updateFrequencyTimer(ptrBTimerHandler, *(ptrMotorHandler->configMotor.frecuency));
		updateDuttyCyclePercentageFloat(ptrMotorHandler->phandlerPWM, ptrMotorHandler->configMotor.dutty);
}

void updateDirMotor(Motor_Handler_t *ptrMotorHandler)
{
 80010c6:	b580      	push	{r7, lr}
 80010c8:	b082      	sub	sp, #8
 80010ca:	af00      	add	r7, sp, #0
 80010cc:	6078      	str	r0, [r7, #4]
		//Cambiar el valor de la direccion
		ptrMotorHandler->configMotor.dir = (~ptrMotorHandler->configMotor.dir)&(0x01);
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80010d4:	f003 0301 	and.w	r3, r3, #1
 80010d8:	2b00      	cmp	r3, #0
 80010da:	bf0c      	ite	eq
 80010dc:	2301      	moveq	r3, #1
 80010de:	2300      	movne	r3, #0
 80010e0:	b2db      	uxtb	r3, r3
 80010e2:	461a      	mov	r2, r3
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
		//Cambiamos la direccion del motor
		GPIO_writePin(ptrMotorHandler->phandlerGPIOIN, ptrMotorHandler->configMotor.dir&SET);
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80010f4:	f003 0301 	and.w	r3, r3, #1
 80010f8:	b2db      	uxtb	r3, r3
 80010fa:	4619      	mov	r1, r3
 80010fc:	4610      	mov	r0, r2
 80010fe:	f002 fe63 	bl	8003dc8 <GPIO_writePin>
		statusPolarityPWM(ptrMotorHandler->phandlerPWM, ptrMotorHandler->configMotor.dir&SET);
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800110c:	f003 0301 	and.w	r3, r3, #1
 8001110:	b2db      	uxtb	r3, r3
 8001112:	4619      	mov	r1, r3
 8001114:	4610      	mov	r0, r2
 8001116:	f003 f9b9 	bl	800448c <statusPolarityPWM>
}
 800111a:	bf00      	nop
 800111c:	3708      	adds	r7, #8
 800111e:	46bd      	mov	sp, r7
 8001120:	bd80      	pop	{r7, pc}
	...

08001124 <main>:
uint8_t commandComplete = 1;           //Bandera que indica si el comando esta completo
uint8_t counterRecepcion = 0;          //Variable para la posicion del arrelgo
char bufferRecepcion[64] = {0};        //Arreglo que almacena el comando ingresado

int main(void)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b082      	sub	sp, #8
 8001128:	af00      	add	r7, sp, #0
	//-----------------------Configuracion inicial del sistema---------------------------------
	//Incrementamos la velocidad de reloj del sistema
	uint8_t clock = CLOCK_SPEED_100MHZ;    //Velocidad de reloj entre 25 o 100 MHz
 800112a:	2364      	movs	r3, #100	; 0x64
 800112c:	71fb      	strb	r3, [r7, #7]
	configPLL(clock);
 800112e:	79fb      	ldrb	r3, [r7, #7]
 8001130:	4618      	mov	r0, r3
 8001132:	f002 fe8b 	bl	8003e4c <configPLL>
	//Realizamos la configuracuion inicial
	int_Hardware();
 8001136:	f000 f84d 	bl	80011d4 <int_Hardware>
	//Activamos el SysTick
	//config_SysTick_us();
	//Activamos el punto flotante por medio del registro especifico
	SCB->CPACR |= 0xF <<20;
 800113a:	4b19      	ldr	r3, [pc, #100]	; (80011a0 <main+0x7c>)
 800113c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001140:	4a17      	ldr	r2, [pc, #92]	; (80011a0 <main+0x7c>)
 8001142:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001146:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
	//Definimos la configuracion inicail del MCO1
	int_MCO2();
 800114a:	f000 f9d1 	bl	80014f0 <int_MCO2>

	//-----------------------Configuracion inicial de los Motores---------------------------------
	//Cargar configuracion de los motores
	GPIO_writePin (&handler_GPIO_MotorR_IN, SET);
 800114e:	2101      	movs	r1, #1
 8001150:	4814      	ldr	r0, [pc, #80]	; (80011a4 <main+0x80>)
 8001152:	f002 fe39 	bl	8003dc8 <GPIO_writePin>
	GPIO_writePin (&handler_GPIO_MotorL_IN, SET);
 8001156:	2101      	movs	r1, #1
 8001158:	4813      	ldr	r0, [pc, #76]	; (80011a8 <main+0x84>)
 800115a:	f002 fe35 	bl	8003dc8 <GPIO_writePin>
	GPIO_writePin (&handler_GPIO_MotorR_EN, SET);
 800115e:	2101      	movs	r1, #1
 8001160:	4812      	ldr	r0, [pc, #72]	; (80011ac <main+0x88>)
 8001162:	f002 fe31 	bl	8003dc8 <GPIO_writePin>
	GPIO_writePin (&handler_GPIO_MotorL_EN, SET);
 8001166:	2101      	movs	r1, #1
 8001168:	4811      	ldr	r0, [pc, #68]	; (80011b0 <main+0x8c>)
 800116a:	f002 fe2d 	bl	8003dc8 <GPIO_writePin>
	int_Config_Motor();
 800116e:	f000 f9c9 	bl	8001504 <int_Config_Motor>
	//Definimos el motor derecho para ser ejecutado
	handler_Motor_Execute = &handler_Motor_R;
 8001172:	4b10      	ldr	r3, [pc, #64]	; (80011b4 <main+0x90>)
 8001174:	4a10      	ldr	r2, [pc, #64]	; (80011b8 <main+0x94>)
 8001176:	601a      	str	r2, [r3, #0]
	//Calculo inicial de parametro
	cm_L = ((PI*DL)/(100*Ce));  //[mm/cuentas]
 8001178:	4b10      	ldr	r3, [pc, #64]	; (80011bc <main+0x98>)
 800117a:	4a11      	ldr	r2, [pc, #68]	; (80011c0 <main+0x9c>)
 800117c:	601a      	str	r2, [r3, #0]
	cm_R =	((PI*DR)/(100*Ce));  //[mm/cuentas]
 800117e:	4b11      	ldr	r3, [pc, #68]	; (80011c4 <main+0xa0>)
 8001180:	4a11      	ldr	r2, [pc, #68]	; (80011c8 <main+0xa4>)
 8001182:	601a      	str	r2, [r3, #0]

	while(1)
	{
		///Verificamos para ejecuta el comando ingresando
		if(commandComplete==1)
 8001184:	4b11      	ldr	r3, [pc, #68]	; (80011cc <main+0xa8>)
 8001186:	781b      	ldrb	r3, [r3, #0]
 8001188:	2b01      	cmp	r3, #1
 800118a:	d106      	bne.n	800119a <main+0x76>
		{
			runCommand(bufferRecepcion);
 800118c:	4810      	ldr	r0, [pc, #64]	; (80011d0 <main+0xac>)
 800118e:	f000 fd5f 	bl	8001c50 <runCommand>
			//Reniciamos la variable
			commandComplete=0;
 8001192:	4b0e      	ldr	r3, [pc, #56]	; (80011cc <main+0xa8>)
 8001194:	2200      	movs	r2, #0
 8001196:	701a      	strb	r2, [r3, #0]
 8001198:	e7f4      	b.n	8001184 <main+0x60>
		}
		else
		{
			__NOP();
 800119a:	bf00      	nop
		if(commandComplete==1)
 800119c:	e7f2      	b.n	8001184 <main+0x60>
 800119e:	bf00      	nop
 80011a0:	e000ed00 	.word	0xe000ed00
 80011a4:	200002c0 	.word	0x200002c0
 80011a8:	2000033c 	.word	0x2000033c
 80011ac:	200002cc 	.word	0x200002cc
 80011b0:	20000348 	.word	0x20000348
 80011b4:	200003f4 	.word	0x200003f4
 80011b8:	200002e4 	.word	0x200002e4
 80011bc:	200003d4 	.word	0x200003d4
 80011c0:	3fad3f95 	.word	0x3fad3f95
 80011c4:	200003d8 	.word	0x200003d8
 80011c8:	3fac691d 	.word	0x3fac691d
 80011cc:	2000000c 	.word	0x2000000c
 80011d0:	2000040c 	.word	0x2000040c

080011d4 <int_Hardware>:



//------------------------------Inicio Configuracion del microcontrolador------------------------------------------
void int_Hardware(void)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b082      	sub	sp, #8
 80011d8:	af02      	add	r7, sp, #8
	//-------------------------PIN_MCO2--------------------------------
	//---------------PIN: PC9----------------
	//------------AF0: MCO_2----------------
	//Definimos el periferico GPIOx a usar.
	handler_GPIO_MCO2.pGPIOx = GPIOC;
 80011da:	4bab      	ldr	r3, [pc, #684]	; (8001488 <int_Hardware+0x2b4>)
 80011dc:	4aab      	ldr	r2, [pc, #684]	; (800148c <int_Hardware+0x2b8>)
 80011de:	609a      	str	r2, [r3, #8]
	//Definimos el pin a utilizar
	handler_GPIO_MCO2.GPIO_PinConfig.GPIO_PinNumber = PIN_9; 						//PIN_x, 0-15
 80011e0:	4ba9      	ldr	r3, [pc, #676]	; (8001488 <int_Hardware+0x2b4>)
 80011e2:	2209      	movs	r2, #9
 80011e4:	701a      	strb	r2, [r3, #0]
	//Definimos la configuracion de los registro para el pin seleccionado
	// Orden de elementos: (Struct, Mode, Otyper, Ospeedr, Pupdr, AF)
	GPIO_PIN_Config(&handler_GPIO_MCO2, GPIO_MODE_ALTFN, GPIO_OTYPER_PUSHPULL, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDR_NOTHING, AF0);
 80011e6:	2300      	movs	r3, #0
 80011e8:	9301      	str	r3, [sp, #4]
 80011ea:	2300      	movs	r3, #0
 80011ec:	9300      	str	r3, [sp, #0]
 80011ee:	2301      	movs	r3, #1
 80011f0:	2200      	movs	r2, #0
 80011f2:	2102      	movs	r1, #2
 80011f4:	48a4      	ldr	r0, [pc, #656]	; (8001488 <int_Hardware+0x2b4>)
 80011f6:	f002 fc9b 	bl	8003b30 <GPIO_PIN_Config>
	/*Opciones: GPIO_Tipo_x, donde x--->||IN, OUT, ALTFN, ANALOG ||| PUSHPULL, OPENDRAIN |||
	 * ||| LOW, MEDIUM, FAST, HIGH ||| NOTHING, PULLUP, PULLDOWN, RESERVED |||  AFx, 0-15 |||*/
	//Cargamos la configuracion del PIN especifico
	GPIO_Config(&handler_GPIO_MCO2);
 80011fa:	48a3      	ldr	r0, [pc, #652]	; (8001488 <int_Hardware+0x2b4>)
 80011fc:	f002 fcba 	bl	8003b74 <GPIO_Config>
	//-------------------Inicio de Configuracion GPIOx-----------------------

	//---------------------------BlinkyLed--------------------------------
	//---------------PIN: PA5----------------
	//Definimos el periferico GPIOx a usar.
	handler_BlinkyPin.pGPIOx = GPIOA;
 8001200:	4ba3      	ldr	r3, [pc, #652]	; (8001490 <int_Hardware+0x2bc>)
 8001202:	4aa4      	ldr	r2, [pc, #656]	; (8001494 <int_Hardware+0x2c0>)
 8001204:	609a      	str	r2, [r3, #8]
	//Definimos el pin a utilizar
	handler_BlinkyPin.GPIO_PinConfig.GPIO_PinNumber = PIN_5; 						//PIN_x, 0-15
 8001206:	4ba2      	ldr	r3, [pc, #648]	; (8001490 <int_Hardware+0x2bc>)
 8001208:	2205      	movs	r2, #5
 800120a:	701a      	strb	r2, [r3, #0]
	//Definimos la configuracion de los registro para el pin seleccionado
	// Orden de elementos: (Struct, Mode, Otyper, Ospeedr, Pupdr, AF)
	GPIO_PIN_Config(&handler_BlinkyPin, GPIO_MODE_OUT, GPIO_OTYPER_PUSHPULL, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDR_NOTHING, AF0);
 800120c:	2300      	movs	r3, #0
 800120e:	9301      	str	r3, [sp, #4]
 8001210:	2300      	movs	r3, #0
 8001212:	9300      	str	r3, [sp, #0]
 8001214:	2301      	movs	r3, #1
 8001216:	2200      	movs	r2, #0
 8001218:	2101      	movs	r1, #1
 800121a:	489d      	ldr	r0, [pc, #628]	; (8001490 <int_Hardware+0x2bc>)
 800121c:	f002 fc88 	bl	8003b30 <GPIO_PIN_Config>
	/*Opciones: GPIO_Tipo_x, donde x--->||IN, OUT, ALTFN, ANALOG ||| PUSHPULL, OPENDRAIN |||
	 * ||| LOW, MEDIUM, FAST, HIGH ||| NOTHING, PULLUP, PULLDOWN, RESERVED |||  AFx, 0-15 |||*/
	//Cargamos la configuracion del PIN especifico
	GPIO_Config(&handler_BlinkyPin);
 8001220:	489b      	ldr	r0, [pc, #620]	; (8001490 <int_Hardware+0x2bc>)
 8001222:	f002 fca7 	bl	8003b74 <GPIO_Config>

	//---------------------------USART--------------------------------
	//---------------PIN: PA9----------------
	//------------AF7: USART1_TX----------------
	//Definimos el periferico GPIOx a usar.
	handler_GPIO_USB_TX.pGPIOx = GPIOA;
 8001226:	4b9c      	ldr	r3, [pc, #624]	; (8001498 <int_Hardware+0x2c4>)
 8001228:	4a9a      	ldr	r2, [pc, #616]	; (8001494 <int_Hardware+0x2c0>)
 800122a:	609a      	str	r2, [r3, #8]
	//Definimos el pin a utilizar
	handler_GPIO_USB_TX.GPIO_PinConfig.GPIO_PinNumber = PIN_9; 						//PIN_x, 0-15
 800122c:	4b9a      	ldr	r3, [pc, #616]	; (8001498 <int_Hardware+0x2c4>)
 800122e:	2209      	movs	r2, #9
 8001230:	701a      	strb	r2, [r3, #0]
	//Definimos la configuracion de los registro para el pin seleccionado
	// Orden de elementos: (Struct, Mode, Otyper, Ospeedr, Pupdr, AF)
	GPIO_PIN_Config(&handler_GPIO_USB_TX, GPIO_MODE_ALTFN, GPIO_OTYPER_PUSHPULL, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDR_NOTHING, AF7);
 8001232:	2307      	movs	r3, #7
 8001234:	9301      	str	r3, [sp, #4]
 8001236:	2300      	movs	r3, #0
 8001238:	9300      	str	r3, [sp, #0]
 800123a:	2301      	movs	r3, #1
 800123c:	2200      	movs	r2, #0
 800123e:	2102      	movs	r1, #2
 8001240:	4895      	ldr	r0, [pc, #596]	; (8001498 <int_Hardware+0x2c4>)
 8001242:	f002 fc75 	bl	8003b30 <GPIO_PIN_Config>
	/*Opciones: GPIO_Tipo_x, donde x--->||IN, OUT, ALTFN, ANALOG ||| PUSHPULL, OPENDRAIN |||
	 * ||| LOW, MEDIUM, FAST, HIGH ||| NOTHING, PULLUP, PULLDOWN, RESERVED |||  AFx, 0-15 |||*/
	//Cargamos la configuracion del PIN especifico
	GPIO_Config(&handler_GPIO_USB_TX);
 8001246:	4894      	ldr	r0, [pc, #592]	; (8001498 <int_Hardware+0x2c4>)
 8001248:	f002 fc94 	bl	8003b74 <GPIO_Config>

	//---------------PIN: PA10----------------
	//------------AF7: USART1_RX----------------
	//Definimos el periferico GPIOx a usar.
	handler_GPIO_USB_RX.pGPIOx = GPIOA;
 800124c:	4b93      	ldr	r3, [pc, #588]	; (800149c <int_Hardware+0x2c8>)
 800124e:	4a91      	ldr	r2, [pc, #580]	; (8001494 <int_Hardware+0x2c0>)
 8001250:	609a      	str	r2, [r3, #8]
	//Definimos el pin a utiliza
	handler_GPIO_USB_RX.GPIO_PinConfig.GPIO_PinNumber = PIN_10; 						//PIN_x, 0-15
 8001252:	4b92      	ldr	r3, [pc, #584]	; (800149c <int_Hardware+0x2c8>)
 8001254:	220a      	movs	r2, #10
 8001256:	701a      	strb	r2, [r3, #0]
	//Definimos la configuracion de los registro para el pin seleccionado
	// Orden de elementos: (Struct, Mode, Otyper, Ospeedr, Pupdr, AF)
	GPIO_PIN_Config(&handler_GPIO_USB_RX, GPIO_MODE_ALTFN, GPIO_OTYPER_PUSHPULL, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDR_NOTHING, AF7);
 8001258:	2307      	movs	r3, #7
 800125a:	9301      	str	r3, [sp, #4]
 800125c:	2300      	movs	r3, #0
 800125e:	9300      	str	r3, [sp, #0]
 8001260:	2301      	movs	r3, #1
 8001262:	2200      	movs	r2, #0
 8001264:	2102      	movs	r1, #2
 8001266:	488d      	ldr	r0, [pc, #564]	; (800149c <int_Hardware+0x2c8>)
 8001268:	f002 fc62 	bl	8003b30 <GPIO_PIN_Config>
	/*Opciones: GPIO_Tipo_x, donde x--->||IN, OUT, ALTFN, ANALOG ||| PUSHPULL, OPENDRAIN |||
	 * ||| LOW, MEDIUM, FAST, HIGH ||| NOTHING, PULLUP, PULLDOWN, RESERVED |||  AFx, 0-15 |||*/
	//Cargamos la configuracion del PIN especifico
	GPIO_Config(&handler_GPIO_USB_RX);
 800126c:	488b      	ldr	r0, [pc, #556]	; (800149c <int_Hardware+0x2c8>)
 800126e:	f002 fc81 	bl	8003b74 <GPIO_Config>
	//---------------------------Motor Derecho--------------------------------
	//----------------------PWM--------------------
	//---------------PIN: PA0----------------
	//------------AF2: TIM5_CH1----------------
	//Definimos el periferico GPIOx a usar.
	handler_GPIO_MotorR.pGPIOx = GPIOA;
 8001272:	4b8b      	ldr	r3, [pc, #556]	; (80014a0 <int_Hardware+0x2cc>)
 8001274:	4a87      	ldr	r2, [pc, #540]	; (8001494 <int_Hardware+0x2c0>)
 8001276:	609a      	str	r2, [r3, #8]
	//Definimos el pin a utilizar
	handler_GPIO_MotorR.GPIO_PinConfig.GPIO_PinNumber = PIN_0; 						//PIN_x, 0-15
 8001278:	4b89      	ldr	r3, [pc, #548]	; (80014a0 <int_Hardware+0x2cc>)
 800127a:	2200      	movs	r2, #0
 800127c:	701a      	strb	r2, [r3, #0]
	//Definimos la configuracion de los registro para el pin seleccionado
	// Orden de elementos: (Struct, Mode, Otyper, Ospeedr, Pupdr, AF)
	GPIO_PIN_Config(&handler_GPIO_MotorR, GPIO_MODE_ALTFN, GPIO_OTYPER_PUSHPULL, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDR_NOTHING, AF2);
 800127e:	2302      	movs	r3, #2
 8001280:	9301      	str	r3, [sp, #4]
 8001282:	2300      	movs	r3, #0
 8001284:	9300      	str	r3, [sp, #0]
 8001286:	2301      	movs	r3, #1
 8001288:	2200      	movs	r2, #0
 800128a:	2102      	movs	r1, #2
 800128c:	4884      	ldr	r0, [pc, #528]	; (80014a0 <int_Hardware+0x2cc>)
 800128e:	f002 fc4f 	bl	8003b30 <GPIO_PIN_Config>
	/*Opciones: GPIO_Tipo_x, donde x--->||IN, OUT, ALTFN, ANALOG ||| PUSHPULL, OPENDRAIN |||
	 * ||| LOW, MEDIUM, FAST, HIGH ||| NOTHING, PULLUP, PULLDOWN, RESERVED |||  AFx, 0-15 |||*/
	//Cargamos la configuracion del PIN especifico
	GPIO_Config(&handler_GPIO_MotorR);
 8001292:	4883      	ldr	r0, [pc, #524]	; (80014a0 <int_Hardware+0x2cc>)
 8001294:	f002 fc6e 	bl	8003b74 <GPIO_Config>
	//---------------Direccion--------------------
	//---------------PIN: PC12----------------
	//Definimos el periferico GPIOx a usar.
	handler_GPIO_MotorR_IN.pGPIOx = GPIOC;
 8001298:	4b82      	ldr	r3, [pc, #520]	; (80014a4 <int_Hardware+0x2d0>)
 800129a:	4a7c      	ldr	r2, [pc, #496]	; (800148c <int_Hardware+0x2b8>)
 800129c:	609a      	str	r2, [r3, #8]
	//Definimos el pin a utilizar
	handler_GPIO_MotorR_IN.GPIO_PinConfig.GPIO_PinNumber = PIN_12; 						//PIN_x, 0-15
 800129e:	4b81      	ldr	r3, [pc, #516]	; (80014a4 <int_Hardware+0x2d0>)
 80012a0:	220c      	movs	r2, #12
 80012a2:	701a      	strb	r2, [r3, #0]
	//Definimos la configuracion de los registro para el pin seleccionado
	// Orden de elementos: (Struct, Mode, Otyper, Ospeedr, Pupdr, AF)
	GPIO_PIN_Config(&handler_GPIO_MotorR_IN, GPIO_MODE_OUT, GPIO_OTYPER_PUSHPULL, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDR_NOTHING, AF0);
 80012a4:	2300      	movs	r3, #0
 80012a6:	9301      	str	r3, [sp, #4]
 80012a8:	2300      	movs	r3, #0
 80012aa:	9300      	str	r3, [sp, #0]
 80012ac:	2301      	movs	r3, #1
 80012ae:	2200      	movs	r2, #0
 80012b0:	2101      	movs	r1, #1
 80012b2:	487c      	ldr	r0, [pc, #496]	; (80014a4 <int_Hardware+0x2d0>)
 80012b4:	f002 fc3c 	bl	8003b30 <GPIO_PIN_Config>
	/*Opciones: GPIO_Tipo_x, donde x--->||IN, OUT, ALTFN, ANALOG ||| PUSHPULL, OPENDRAIN |||
	 * ||| LOW, MEDIUM, FAST, HIGH ||| NOTHING, PULLUP, PULLDOWN, RESERVED |||  AFx, 0-15 |||*/
	//Cargamos la configuracion del PIN especifico
	GPIO_Config(&handler_GPIO_MotorR_IN);
 80012b8:	487a      	ldr	r0, [pc, #488]	; (80014a4 <int_Hardware+0x2d0>)
 80012ba:	f002 fc5b 	bl	8003b74 <GPIO_Config>
	//------------Enable------------------------
	//---------------PIN: PC10----------------
	//Definimos el periferico GPIOx a usar.
	handler_GPIO_MotorR_EN.pGPIOx = GPIOC;
 80012be:	4b7a      	ldr	r3, [pc, #488]	; (80014a8 <int_Hardware+0x2d4>)
 80012c0:	4a72      	ldr	r2, [pc, #456]	; (800148c <int_Hardware+0x2b8>)
 80012c2:	609a      	str	r2, [r3, #8]
	//Definimos el pin a utilizar
	handler_GPIO_MotorR_EN.GPIO_PinConfig.GPIO_PinNumber = PIN_10; 						//PIN_x, 0-15
 80012c4:	4b78      	ldr	r3, [pc, #480]	; (80014a8 <int_Hardware+0x2d4>)
 80012c6:	220a      	movs	r2, #10
 80012c8:	701a      	strb	r2, [r3, #0]
	//Definimos la configuracion de los registro para el pin seleccionado
	// Orden de elementos: (Struct, Mode, Otyper, Ospeedr, Pupdr, AF)
	GPIO_PIN_Config(&handler_GPIO_MotorR_EN, GPIO_MODE_OUT, GPIO_OTYPER_PUSHPULL, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDR_NOTHING, AF0);
 80012ca:	2300      	movs	r3, #0
 80012cc:	9301      	str	r3, [sp, #4]
 80012ce:	2300      	movs	r3, #0
 80012d0:	9300      	str	r3, [sp, #0]
 80012d2:	2301      	movs	r3, #1
 80012d4:	2200      	movs	r2, #0
 80012d6:	2101      	movs	r1, #1
 80012d8:	4873      	ldr	r0, [pc, #460]	; (80014a8 <int_Hardware+0x2d4>)
 80012da:	f002 fc29 	bl	8003b30 <GPIO_PIN_Config>
	/*Opciones: GPIO_Tipo_x, donde x--->||IN, OUT, ALTFN, ANALOG ||| PUSHPULL, OPENDRAIN |||
	 * ||| LOW, MEDIUM, FAST, HIGH ||| NOTHING, PULLUP, PULLDOWN, RESERVED |||  AFx, 0-15 |||*/
	//Cargamos la configuracion del PIN especifico
	GPIO_Config(&handler_GPIO_MotorR_EN);
 80012de:	4872      	ldr	r0, [pc, #456]	; (80014a8 <int_Hardware+0x2d4>)
 80012e0:	f002 fc48 	bl	8003b74 <GPIO_Config>
	//---------------------------Motor Izquierdo--------------------------------
	//----------------------PWM--------------------
	//---------------PIN: PA1----------------
	//------------AF2: TIM5_CH2----------------
	//Definimos el periferico GPIOx a usar.
	handler_GPIO_MotorL.pGPIOx = GPIOA;
 80012e4:	4b71      	ldr	r3, [pc, #452]	; (80014ac <int_Hardware+0x2d8>)
 80012e6:	4a6b      	ldr	r2, [pc, #428]	; (8001494 <int_Hardware+0x2c0>)
 80012e8:	609a      	str	r2, [r3, #8]
	//Definimos el pin a utilizar
	handler_GPIO_MotorL.GPIO_PinConfig.GPIO_PinNumber = PIN_1; 						//PIN_x, 0-15
 80012ea:	4b70      	ldr	r3, [pc, #448]	; (80014ac <int_Hardware+0x2d8>)
 80012ec:	2201      	movs	r2, #1
 80012ee:	701a      	strb	r2, [r3, #0]
	//Definimos la configuracion de los registro para el pin seleccionado
	// Orden de elementos: (Struct, Mode, Otyper, Ospeedr, Pupdr, AF)
	GPIO_PIN_Config(&handler_GPIO_MotorL, GPIO_MODE_ALTFN, GPIO_OTYPER_PUSHPULL, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDR_NOTHING, AF2);
 80012f0:	2302      	movs	r3, #2
 80012f2:	9301      	str	r3, [sp, #4]
 80012f4:	2300      	movs	r3, #0
 80012f6:	9300      	str	r3, [sp, #0]
 80012f8:	2301      	movs	r3, #1
 80012fa:	2200      	movs	r2, #0
 80012fc:	2102      	movs	r1, #2
 80012fe:	486b      	ldr	r0, [pc, #428]	; (80014ac <int_Hardware+0x2d8>)
 8001300:	f002 fc16 	bl	8003b30 <GPIO_PIN_Config>
	/*Opciones: GPIO_Tipo_x, donde x--->||IN, OUT, ALTFN, ANALOG ||| PUSHPULL, OPENDRAIN |||
	 * ||| LOW, MEDIUM, FAST, HIGH ||| NOTHING, PULLUP, PULLDOWN, RESERVED |||  AFx, 0-15 |||*/
	//Cargamos la configuracion del PIN especifico
	GPIO_Config(&handler_GPIO_MotorL);
 8001304:	4869      	ldr	r0, [pc, #420]	; (80014ac <int_Hardware+0x2d8>)
 8001306:	f002 fc35 	bl	8003b74 <GPIO_Config>
	//---------------Direccion--------------------
	//---------------PIN: PD2----------------
	//Definimos el periferico GPIOx a usar.
	handler_GPIO_MotorL_IN.pGPIOx = GPIOD;
 800130a:	4b69      	ldr	r3, [pc, #420]	; (80014b0 <int_Hardware+0x2dc>)
 800130c:	4a69      	ldr	r2, [pc, #420]	; (80014b4 <int_Hardware+0x2e0>)
 800130e:	609a      	str	r2, [r3, #8]
	//Definimos el pin a utilizar
	handler_GPIO_MotorL_IN.GPIO_PinConfig.GPIO_PinNumber = PIN_2; 						//PIN_x, 0-15
 8001310:	4b67      	ldr	r3, [pc, #412]	; (80014b0 <int_Hardware+0x2dc>)
 8001312:	2202      	movs	r2, #2
 8001314:	701a      	strb	r2, [r3, #0]
	//Definimos la configuracion de los registro para el pin seleccionado
	// Orden de elementos: (Struct, Mode, Otyper, Ospeedr, Pupdr, AF)
	GPIO_PIN_Config(&handler_GPIO_MotorL_IN, GPIO_MODE_OUT, GPIO_OTYPER_PUSHPULL, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDR_NOTHING, AF0);
 8001316:	2300      	movs	r3, #0
 8001318:	9301      	str	r3, [sp, #4]
 800131a:	2300      	movs	r3, #0
 800131c:	9300      	str	r3, [sp, #0]
 800131e:	2301      	movs	r3, #1
 8001320:	2200      	movs	r2, #0
 8001322:	2101      	movs	r1, #1
 8001324:	4862      	ldr	r0, [pc, #392]	; (80014b0 <int_Hardware+0x2dc>)
 8001326:	f002 fc03 	bl	8003b30 <GPIO_PIN_Config>
	/*Opciones: GPIO_Tipo_x, donde x--->||IN, OUT, ALTFN, ANALOG ||| PUSHPULL, OPENDRAIN |||
	 * ||| LOW, MEDIUM, FAST, HIGH ||| NOTHING, PULLUP, PULLDOWN, RESERVED |||  AFx, 0-15 |||*/
	//Cargamos la configuracion del PIN especifico
	GPIO_Config(&handler_GPIO_MotorL_IN);
 800132a:	4861      	ldr	r0, [pc, #388]	; (80014b0 <int_Hardware+0x2dc>)
 800132c:	f002 fc22 	bl	8003b74 <GPIO_Config>
	//------------Enable------------------------
	//---------------PIN: PC11----------------
	//Definimos el periferico GPIOx a usar.
	handler_GPIO_MotorL_EN.pGPIOx = GPIOC;
 8001330:	4b61      	ldr	r3, [pc, #388]	; (80014b8 <int_Hardware+0x2e4>)
 8001332:	4a56      	ldr	r2, [pc, #344]	; (800148c <int_Hardware+0x2b8>)
 8001334:	609a      	str	r2, [r3, #8]
	//Definimos el pin a utilizar
	handler_GPIO_MotorL_EN.GPIO_PinConfig.GPIO_PinNumber = PIN_11; 						//PIN_x, 0-15
 8001336:	4b60      	ldr	r3, [pc, #384]	; (80014b8 <int_Hardware+0x2e4>)
 8001338:	220b      	movs	r2, #11
 800133a:	701a      	strb	r2, [r3, #0]
	//Definimos la configuracion de los registro para el pin seleccionado
	// Orden de elementos: (Struct, Mode, Otyper, Ospeedr, Pupdr, AF)
	GPIO_PIN_Config(&handler_GPIO_MotorL_EN, GPIO_MODE_OUT, GPIO_OTYPER_PUSHPULL, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDR_NOTHING, AF0);
 800133c:	2300      	movs	r3, #0
 800133e:	9301      	str	r3, [sp, #4]
 8001340:	2300      	movs	r3, #0
 8001342:	9300      	str	r3, [sp, #0]
 8001344:	2301      	movs	r3, #1
 8001346:	2200      	movs	r2, #0
 8001348:	2101      	movs	r1, #1
 800134a:	485b      	ldr	r0, [pc, #364]	; (80014b8 <int_Hardware+0x2e4>)
 800134c:	f002 fbf0 	bl	8003b30 <GPIO_PIN_Config>
	/*Opciones: GPIO_Tipo_x, donde x--->||IN, OUT, ALTFN, ANALOG ||| PUSHPULL, OPENDRAIN |||
	 * ||| LOW, MEDIUM, FAST, HIGH ||| NOTHING, PULLUP, PULLDOWN, RESERVED |||  AFx, 0-15 |||*/
	//Cargamos la configuracion del PIN especifico
	GPIO_Config(&handler_GPIO_MotorL_EN);
 8001350:	4859      	ldr	r0, [pc, #356]	; (80014b8 <int_Hardware+0x2e4>)
 8001352:	f002 fc0f 	bl	8003b74 <GPIO_Config>

	//-------------------Inicio de Configuracion USARTx-----------------------

	//---------------USART1----------------
	//Definimos el periferico USARTx a utilizar
	handler_USART_USB.ptrUSARTx = USART1;
 8001356:	4b59      	ldr	r3, [pc, #356]	; (80014bc <int_Hardware+0x2e8>)
 8001358:	4a59      	ldr	r2, [pc, #356]	; (80014c0 <int_Hardware+0x2ec>)
 800135a:	609a      	str	r2, [r3, #8]
	//Definimos la configuracion del USART seleccionado
	handler_USART_USB.USART_Config.USART_mode = USART_MODE_RXTX;           //USART_MODE_x  x-> TX, RX, RXTX, DISABLE
 800135c:	4b57      	ldr	r3, [pc, #348]	; (80014bc <int_Hardware+0x2e8>)
 800135e:	2202      	movs	r2, #2
 8001360:	701a      	strb	r2, [r3, #0]
	handler_USART_USB.USART_Config.USART_baudrate = USART_BAUDRATE_19200;  //USART_BAUDRATE_x  x->9600, 19200, 115200
 8001362:	4b56      	ldr	r3, [pc, #344]	; (80014bc <int_Hardware+0x2e8>)
 8001364:	2201      	movs	r2, #1
 8001366:	705a      	strb	r2, [r3, #1]
	handler_USART_USB.USART_Config.USART_parity= USART_PARITY_NONE;       //USART_PARITY_x   x->NONE, ODD, EVEN
 8001368:	4b54      	ldr	r3, [pc, #336]	; (80014bc <int_Hardware+0x2e8>)
 800136a:	2200      	movs	r2, #0
 800136c:	709a      	strb	r2, [r3, #2]
	handler_USART_USB.USART_Config.USART_stopbits=USART_STOPBIT_1;         //USART_STOPBIT_x  x->1, 0_5, 2, 1_5
 800136e:	4b53      	ldr	r3, [pc, #332]	; (80014bc <int_Hardware+0x2e8>)
 8001370:	2200      	movs	r2, #0
 8001372:	70da      	strb	r2, [r3, #3]
	handler_USART_USB.USART_Config.USART_enableIntRX = USART_RX_INTERRUP_ENABLE;   //USART_RX_INTERRUP_x  x-> DISABLE, ENABLE
 8001374:	4b51      	ldr	r3, [pc, #324]	; (80014bc <int_Hardware+0x2e8>)
 8001376:	2201      	movs	r2, #1
 8001378:	711a      	strb	r2, [r3, #4]
	handler_USART_USB.USART_Config.USART_enableIntTX = USART_TX_INTERRUP_ENABLE;   //USART_TX_INTERRUP_x  x-> DISABLE, ENABLE
 800137a:	4b50      	ldr	r3, [pc, #320]	; (80014bc <int_Hardware+0x2e8>)
 800137c:	2201      	movs	r2, #1
 800137e:	715a      	strb	r2, [r3, #5]
	//Cargamos la configuracion del USART especifico
	USART_Config(&handler_USART_USB);
 8001380:	484e      	ldr	r0, [pc, #312]	; (80014bc <int_Hardware+0x2e8>)
 8001382:	f003 f98d 	bl	80046a0 <USART_Config>

	//-------------------Inicio de Configuracion TIMx-----------------------

	//---------------TIM2----------------
	//Definimos el TIMx a usar
	handler_BlinkyTimer.ptrTIMx = TIM2;
 8001386:	4b4f      	ldr	r3, [pc, #316]	; (80014c4 <int_Hardware+0x2f0>)
 8001388:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800138c:	60da      	str	r2, [r3, #12]
	//Definimos la configuracion del TIMER seleccionado
	handler_BlinkyTimer.TIMx_Config.TIMx_periodcnt = BTIMER_PCNT_1ms; //BTIMER_PCNT_xus x->10,100/ BTIMER_PCNT_1ms
 800138e:	4b4d      	ldr	r3, [pc, #308]	; (80014c4 <int_Hardware+0x2f0>)
 8001390:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001394:	805a      	strh	r2, [r3, #2]
	handler_BlinkyTimer.TIMx_Config.TIMx_mode = BTIMER_MODE_UP; // BTIMER_MODE_x x->UP, DOWN
 8001396:	4b4b      	ldr	r3, [pc, #300]	; (80014c4 <int_Hardware+0x2f0>)
 8001398:	2200      	movs	r2, #0
 800139a:	701a      	strb	r2, [r3, #0]
	handler_BlinkyTimer.TIMx_Config.TIMX_period = 250;//Al definir 10us,100us el valor un multiplo de ellos, si es 1ms el valor es en ms
 800139c:	4b49      	ldr	r3, [pc, #292]	; (80014c4 <int_Hardware+0x2f0>)
 800139e:	22fa      	movs	r2, #250	; 0xfa
 80013a0:	605a      	str	r2, [r3, #4]
	handler_BlinkyTimer.TIMx_Config.TIMx_interruptEnable = INTERRUPTION_ENABLE; //INTERRUPTION_x  x->DISABLE, ENABLE
 80013a2:	4b48      	ldr	r3, [pc, #288]	; (80014c4 <int_Hardware+0x2f0>)
 80013a4:	2201      	movs	r2, #1
 80013a6:	721a      	strb	r2, [r3, #8]
	//Cargamos la configuracion del TIMER especifico
	BasicTimer_Config(&handler_BlinkyTimer);
 80013a8:	4846      	ldr	r0, [pc, #280]	; (80014c4 <int_Hardware+0x2f0>)
 80013aa:	f001 f99d 	bl	80026e8 <BasicTimer_Config>

	//---------------TIM3----------------
	//Definimos el TIMx a usar
	handler_TIMER_Count.ptrTIMx = TIM3;
 80013ae:	4b46      	ldr	r3, [pc, #280]	; (80014c8 <int_Hardware+0x2f4>)
 80013b0:	4a46      	ldr	r2, [pc, #280]	; (80014cc <int_Hardware+0x2f8>)
 80013b2:	60da      	str	r2, [r3, #12]
	//Definimos la configuracion del TIMER seleccionado
	handler_TIMER_Count.TIMx_Config.TIMx_periodcnt = BTIMER_PCNT_1ms; //BTIMER_PCNT_xus x->10,100/ BTIMER_PCNT_1ms
 80013b4:	4b44      	ldr	r3, [pc, #272]	; (80014c8 <int_Hardware+0x2f4>)
 80013b6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80013ba:	805a      	strh	r2, [r3, #2]
	handler_TIMER_Count.TIMx_Config.TIMx_mode = BTIMER_MODE_UP; // BTIMER_MODE_x x->UP, DOWN
 80013bc:	4b42      	ldr	r3, [pc, #264]	; (80014c8 <int_Hardware+0x2f4>)
 80013be:	2200      	movs	r2, #0
 80013c0:	701a      	strb	r2, [r3, #0]
	handler_TIMER_Count.TIMx_Config.TIMX_period = 2000;//Al definir 10us,100us el valor un multiplo de ellos, si es 1ms el valor es en ms
 80013c2:	4b41      	ldr	r3, [pc, #260]	; (80014c8 <int_Hardware+0x2f4>)
 80013c4:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80013c8:	605a      	str	r2, [r3, #4]
	handler_TIMER_Count.TIMx_Config.TIMx_interruptEnable = INTERRUPTION_DISABLE; //INTERRUPTION_x  x->DISABLE, ENABLE
 80013ca:	4b3f      	ldr	r3, [pc, #252]	; (80014c8 <int_Hardware+0x2f4>)
 80013cc:	2200      	movs	r2, #0
 80013ce:	721a      	strb	r2, [r3, #8]
	//Cargamos la configuracion del TIMER especifico
	BasicTimer_Config(&handler_TIMER_Count);
 80013d0:	483d      	ldr	r0, [pc, #244]	; (80014c8 <int_Hardware+0x2f4>)
 80013d2:	f001 f989 	bl	80026e8 <BasicTimer_Config>

	//---------------TIM5----------------
	//Definimos el TIMx a usar
	handler_TIMER_Motor.ptrTIMx = TIM5;
 80013d6:	4b3e      	ldr	r3, [pc, #248]	; (80014d0 <int_Hardware+0x2fc>)
 80013d8:	4a3e      	ldr	r2, [pc, #248]	; (80014d4 <int_Hardware+0x300>)
 80013da:	60da      	str	r2, [r3, #12]
	//Definimos la configuracion del TIMER seleccionado
	handler_TIMER_Motor.TIMx_Config.TIMx_periodcnt = BTIMER_PCNT_10us; //BTIMER_PCNT_xus x->10,100/ BTIMER_PCNT_1ms
 80013dc:	4b3c      	ldr	r3, [pc, #240]	; (80014d0 <int_Hardware+0x2fc>)
 80013de:	220a      	movs	r2, #10
 80013e0:	805a      	strh	r2, [r3, #2]
	handler_TIMER_Motor.TIMx_Config.TIMx_mode = BTIMER_MODE_UP; // BTIMER_MODE_x x->UP, DOWN
 80013e2:	4b3b      	ldr	r3, [pc, #236]	; (80014d0 <int_Hardware+0x2fc>)
 80013e4:	2200      	movs	r2, #0
 80013e6:	701a      	strb	r2, [r3, #0]
	handler_TIMER_Motor.TIMx_Config.TIMX_period = 100;//Al definir 10us,100us el valor un multiplo de ellos, si es 1ms el valor es en ms
 80013e8:	4b39      	ldr	r3, [pc, #228]	; (80014d0 <int_Hardware+0x2fc>)
 80013ea:	2264      	movs	r2, #100	; 0x64
 80013ec:	605a      	str	r2, [r3, #4]
	handler_TIMER_Motor.TIMx_Config.TIMx_interruptEnable = INTERRUPTION_DISABLE; //INTERRUPTION_x  x->DISABLE, ENABLE
 80013ee:	4b38      	ldr	r3, [pc, #224]	; (80014d0 <int_Hardware+0x2fc>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	721a      	strb	r2, [r3, #8]
	//Cargamos la configuracion del TIMER especifico
	BasicTimer_Config(&handler_TIMER_Motor);
 80013f4:	4836      	ldr	r0, [pc, #216]	; (80014d0 <int_Hardware+0x2fc>)
 80013f6:	f001 f977 	bl	80026e8 <BasicTimer_Config>

	//-------------------Inicio de Configuracion EXTIx -----------------------

	//---------------PIN: PC1----------------
	//Definimos el periferico GPIOx a usar.
	handler_GPIO_FotoR.pGPIOx = GPIOC;
 80013fa:	4b37      	ldr	r3, [pc, #220]	; (80014d8 <int_Hardware+0x304>)
 80013fc:	4a23      	ldr	r2, [pc, #140]	; (800148c <int_Hardware+0x2b8>)
 80013fe:	609a      	str	r2, [r3, #8]
	//Definimos el pin a utilizar
	handler_GPIO_FotoR.GPIO_PinConfig.GPIO_PinNumber = PIN_1;
 8001400:	4b35      	ldr	r3, [pc, #212]	; (80014d8 <int_Hardware+0x304>)
 8001402:	2201      	movs	r2, #1
 8001404:	701a      	strb	r2, [r3, #0]
	//Definimos la posicion del elemento pGIOHandler.
	 handler_EXTI_FotoR.pGPIOHandler = &handler_GPIO_FotoR;
 8001406:	4b35      	ldr	r3, [pc, #212]	; (80014dc <int_Hardware+0x308>)
 8001408:	4a33      	ldr	r2, [pc, #204]	; (80014d8 <int_Hardware+0x304>)
 800140a:	601a      	str	r2, [r3, #0]
	//Definimos el tipo de flanco
	 handler_EXTI_FotoR.edgeType = EXTERNAL_INTERRUPP_RISING_FALLING_EDGE;
 800140c:	4b33      	ldr	r3, [pc, #204]	; (80014dc <int_Hardware+0x308>)
 800140e:	2202      	movs	r2, #2
 8001410:	711a      	strb	r2, [r3, #4]
	//Cargamos la configuracion del EXTIx
	extInt_Config(& handler_EXTI_FotoR);
 8001412:	4832      	ldr	r0, [pc, #200]	; (80014dc <int_Hardware+0x308>)
 8001414:	f001 faec 	bl	80029f0 <extInt_Config>

	//---------------PIN: PC3----------------
	//Definimos el periferico GPIOx a usar.
	handler_GPIO_FotoL.pGPIOx = GPIOC;
 8001418:	4b31      	ldr	r3, [pc, #196]	; (80014e0 <int_Hardware+0x30c>)
 800141a:	4a1c      	ldr	r2, [pc, #112]	; (800148c <int_Hardware+0x2b8>)
 800141c:	609a      	str	r2, [r3, #8]
	//Definimos el pin a utilizar
	handler_GPIO_FotoL.GPIO_PinConfig.GPIO_PinNumber = PIN_3;
 800141e:	4b30      	ldr	r3, [pc, #192]	; (80014e0 <int_Hardware+0x30c>)
 8001420:	2203      	movs	r2, #3
 8001422:	701a      	strb	r2, [r3, #0]
	//Definimos la posicion del elemento pGIOHandler.
	 handler_EXTI_FotoL.pGPIOHandler = &handler_GPIO_FotoL;
 8001424:	4b2f      	ldr	r3, [pc, #188]	; (80014e4 <int_Hardware+0x310>)
 8001426:	4a2e      	ldr	r2, [pc, #184]	; (80014e0 <int_Hardware+0x30c>)
 8001428:	601a      	str	r2, [r3, #0]
	//Definimos el tipo de flanco
	 handler_EXTI_FotoL.edgeType = EXTERNAL_INTERRUPP_RISING_FALLING_EDGE;
 800142a:	4b2e      	ldr	r3, [pc, #184]	; (80014e4 <int_Hardware+0x310>)
 800142c:	2202      	movs	r2, #2
 800142e:	711a      	strb	r2, [r3, #4]
	//Cargamos la configuracion del EXTIx
	extInt_Config(& handler_EXTI_FotoL);
 8001430:	482c      	ldr	r0, [pc, #176]	; (80014e4 <int_Hardware+0x310>)
 8001432:	f001 fadd 	bl	80029f0 <extInt_Config>

	//-------------------Inicio de Configuracion PWM_Channelx----------------------

	//---------------TIM5_Channel_1----------------
	//Definimos el TIMx a usar
	handler_PWM_MotorR.ptrTIMx = TIM5;
 8001436:	4b2c      	ldr	r3, [pc, #176]	; (80014e8 <int_Hardware+0x314>)
 8001438:	4a26      	ldr	r2, [pc, #152]	; (80014d4 <int_Hardware+0x300>)
 800143a:	609a      	str	r2, [r3, #8]
	//Definimos la configuracion para el PWM
	handler_PWM_MotorR.config.channel = PWM_CHANNEL_1;     //PWM_CHANNEL_x x->1,2,3,4
 800143c:	4b2a      	ldr	r3, [pc, #168]	; (80014e8 <int_Hardware+0x314>)
 800143e:	2200      	movs	r2, #0
 8001440:	701a      	strb	r2, [r3, #0]
	handler_PWM_MotorR.config.duttyCicle = 10;             //Valor del Dutty como multiplo del periodo del CNT
 8001442:	4b29      	ldr	r3, [pc, #164]	; (80014e8 <int_Hardware+0x314>)
 8001444:	220a      	movs	r2, #10
 8001446:	805a      	strh	r2, [r3, #2]
	handler_PWM_MotorR.config.polarity = POLARITY_LOW;    //POLARITY_x x-> HIGH, LOW
 8001448:	4b27      	ldr	r3, [pc, #156]	; (80014e8 <int_Hardware+0x314>)
 800144a:	2201      	movs	r2, #1
 800144c:	711a      	strb	r2, [r3, #4]
	//Cargamos la configuracion
	pwm_Config(&handler_PWM_MotorR);
 800144e:	4826      	ldr	r0, [pc, #152]	; (80014e8 <int_Hardware+0x314>)
 8001450:	f002 fe2a 	bl	80040a8 <pwm_Config>
	//Activamos el PWM
	statusInOutPWM(&handler_PWM_MotorR, CHANNEL_ENABLE);
 8001454:	2101      	movs	r1, #1
 8001456:	4824      	ldr	r0, [pc, #144]	; (80014e8 <int_Hardware+0x314>)
 8001458:	f002 ff86 	bl	8004368 <statusInOutPWM>

	//---------------TIM5_Channel_2----------------
	//Definimos el TIMx a usar
	handler_PWM_MotorL.ptrTIMx = TIM5;
 800145c:	4b23      	ldr	r3, [pc, #140]	; (80014ec <int_Hardware+0x318>)
 800145e:	4a1d      	ldr	r2, [pc, #116]	; (80014d4 <int_Hardware+0x300>)
 8001460:	609a      	str	r2, [r3, #8]
	//Definimos la configuracion para el PWM
	handler_PWM_MotorL.config.channel = PWM_CHANNEL_2;     //PWM_CHANNEL_x x->1,2,3,4
 8001462:	4b22      	ldr	r3, [pc, #136]	; (80014ec <int_Hardware+0x318>)
 8001464:	2201      	movs	r2, #1
 8001466:	701a      	strb	r2, [r3, #0]
	handler_PWM_MotorL.config.duttyCicle = 10;             //Valor del Dutty como multiplo del periodo del CNT
 8001468:	4b20      	ldr	r3, [pc, #128]	; (80014ec <int_Hardware+0x318>)
 800146a:	220a      	movs	r2, #10
 800146c:	805a      	strh	r2, [r3, #2]
	handler_PWM_MotorL.config.polarity = POLARITY_LOW;    //POLARITY_x x-> HIGH, LOW
 800146e:	4b1f      	ldr	r3, [pc, #124]	; (80014ec <int_Hardware+0x318>)
 8001470:	2201      	movs	r2, #1
 8001472:	711a      	strb	r2, [r3, #4]
	//Cargamos la configuracion
	pwm_Config(&handler_PWM_MotorL);
 8001474:	481d      	ldr	r0, [pc, #116]	; (80014ec <int_Hardware+0x318>)
 8001476:	f002 fe17 	bl	80040a8 <pwm_Config>
	//Activamos el PWM
	statusInOutPWM(&handler_PWM_MotorL, CHANNEL_ENABLE);
 800147a:	2101      	movs	r1, #1
 800147c:	481b      	ldr	r0, [pc, #108]	; (80014ec <int_Hardware+0x318>)
 800147e:	f002 ff73 	bl	8004368 <statusInOutPWM>

	//---------------------Fin de Configuracion PWM_Channelx-----------------------


}
 8001482:	bf00      	nop
 8001484:	46bd      	mov	sp, r7
 8001486:	bd80      	pop	{r7, pc}
 8001488:	2000021c 	.word	0x2000021c
 800148c:	40020800 	.word	0x40020800
 8001490:	20000200 	.word	0x20000200
 8001494:	40020000 	.word	0x40020000
 8001498:	20000250 	.word	0x20000250
 800149c:	2000025c 	.word	0x2000025c
 80014a0:	200002b4 	.word	0x200002b4
 80014a4:	200002c0 	.word	0x200002c0
 80014a8:	200002cc 	.word	0x200002cc
 80014ac:	20000330 	.word	0x20000330
 80014b0:	2000033c 	.word	0x2000033c
 80014b4:	40020c00 	.word	0x40020c00
 80014b8:	20000348 	.word	0x20000348
 80014bc:	20000268 	.word	0x20000268
 80014c0:	40011000 	.word	0x40011000
 80014c4:	2000020c 	.word	0x2000020c
 80014c8:	200003bc 	.word	0x200003bc
 80014cc:	40000400 	.word	0x40000400
 80014d0:	200003ac 	.word	0x200003ac
 80014d4:	40000c00 	.word	0x40000c00
 80014d8:	20000228 	.word	0x20000228
 80014dc:	20000234 	.word	0x20000234
 80014e0:	2000023c 	.word	0x2000023c
 80014e4:	20000248 	.word	0x20000248
 80014e8:	200002d8 	.word	0x200002d8
 80014ec:	20000354 	.word	0x20000354

080014f0 <int_MCO2>:

//-----------------------------Inicio configuracion MCO1------------------------------------------

//Funcion para la configuracion inicial del MCO1
void int_MCO2(void)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	af00      	add	r7, sp, #0
	//Configuracion inicial del MCO2
	configMCO2(0);
 80014f4:	2000      	movs	r0, #0
 80014f6:	f002 fd5b 	bl	8003fb0 <configMCO2>
	configMCO2PRE(4);
 80014fa:	2004      	movs	r0, #4
 80014fc:	f002 fd74 	bl	8003fe8 <configMCO2PRE>
}
 8001500:	bf00      	nop
 8001502:	bd80      	pop	{r7, pc}

08001504 <int_Config_Motor>:
//------------------------------Fin configuracion MCO1------------------------------------------


//------------------------------Inicio configuracion de lso motores------------------------------------------
void int_Config_Motor(void)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b082      	sub	sp, #8
 8001508:	af00      	add	r7, sp, #0
	//---------------Motor Derecho----------------
	//Parametro de la señal del dutty
	handler_Motor_R.configMotor.dutty =  20;
 800150a:	4b38      	ldr	r3, [pc, #224]	; (80015ec <int_Config_Motor+0xe8>)
 800150c:	4a38      	ldr	r2, [pc, #224]	; (80015f0 <int_Config_Motor+0xec>)
 800150e:	639a      	str	r2, [r3, #56]	; 0x38
	handler_Motor_R.configMotor.frecuency = &value_period;
 8001510:	4b36      	ldr	r3, [pc, #216]	; (80015ec <int_Config_Motor+0xe8>)
 8001512:	4a38      	ldr	r2, [pc, #224]	; (80015f4 <int_Config_Motor+0xf0>)
 8001514:	635a      	str	r2, [r3, #52]	; 0x34
	handler_Motor_R.configMotor.dir = SET;
 8001516:	4b35      	ldr	r3, [pc, #212]	; (80015ec <int_Config_Motor+0xe8>)
 8001518:	2201      	movs	r2, #1
 800151a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	//handler de los perifericos
	handler_Motor_R.phandlerGPIOEN = &handler_GPIO_MotorR_EN;
 800151e:	4b33      	ldr	r3, [pc, #204]	; (80015ec <int_Config_Motor+0xe8>)
 8001520:	4a35      	ldr	r2, [pc, #212]	; (80015f8 <int_Config_Motor+0xf4>)
 8001522:	645a      	str	r2, [r3, #68]	; 0x44
	handler_Motor_R.phandlerGPIOIN = &handler_GPIO_MotorR_IN;
 8001524:	4b31      	ldr	r3, [pc, #196]	; (80015ec <int_Config_Motor+0xe8>)
 8001526:	4a35      	ldr	r2, [pc, #212]	; (80015fc <int_Config_Motor+0xf8>)
 8001528:	641a      	str	r2, [r3, #64]	; 0x40
	handler_Motor_R.phandlerPWM = &handler_PWM_MotorR;
 800152a:	4b30      	ldr	r3, [pc, #192]	; (80015ec <int_Config_Motor+0xe8>)
 800152c:	4a34      	ldr	r2, [pc, #208]	; (8001600 <int_Config_Motor+0xfc>)
 800152e:	649a      	str	r2, [r3, #72]	; 0x48
	//definicion de parametros
	handler_Motor_R.parametersMotor.e = handler_Motor_R.parametersMotor.e_1 = handler_Motor_R.parametersMotor.e_2 = 0;
 8001530:	4b2e      	ldr	r3, [pc, #184]	; (80015ec <int_Config_Motor+0xe8>)
 8001532:	f04f 0200 	mov.w	r2, #0
 8001536:	611a      	str	r2, [r3, #16]
 8001538:	4b2c      	ldr	r3, [pc, #176]	; (80015ec <int_Config_Motor+0xe8>)
 800153a:	691b      	ldr	r3, [r3, #16]
 800153c:	4a2b      	ldr	r2, [pc, #172]	; (80015ec <int_Config_Motor+0xe8>)
 800153e:	60d3      	str	r3, [r2, #12]
 8001540:	4b2a      	ldr	r3, [pc, #168]	; (80015ec <int_Config_Motor+0xe8>)
 8001542:	68db      	ldr	r3, [r3, #12]
 8001544:	4a29      	ldr	r2, [pc, #164]	; (80015ec <int_Config_Motor+0xe8>)
 8001546:	6093      	str	r3, [r2, #8]
	handler_Motor_R.parametersMotor.u = handler_Motor_R.parametersMotor.u_1 = 0;
 8001548:	4b28      	ldr	r3, [pc, #160]	; (80015ec <int_Config_Motor+0xe8>)
 800154a:	f04f 0200 	mov.w	r2, #0
 800154e:	605a      	str	r2, [r3, #4]
 8001550:	4b26      	ldr	r3, [pc, #152]	; (80015ec <int_Config_Motor+0xe8>)
 8001552:	685b      	ldr	r3, [r3, #4]
 8001554:	4a25      	ldr	r2, [pc, #148]	; (80015ec <int_Config_Motor+0xe8>)
 8001556:	6013      	str	r3, [r2, #0]
	//Calculo de Constantes PID
	float theta=2+Ts/2;
 8001558:	4b2a      	ldr	r3, [pc, #168]	; (8001604 <int_Config_Motor+0x100>)
 800155a:	ed93 7a00 	vldr	s14, [r3]
 800155e:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001562:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001566:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800156a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800156e:	edc7 7a01 	vstr	s15, [r7, #4]
	constains_calculator(&handler_Motor_R, 2.2,120, theta);   //k,tau,theta
 8001572:	ed97 1a01 	vldr	s2, [r7, #4]
 8001576:	eddf 0a24 	vldr	s1, [pc, #144]	; 8001608 <int_Config_Motor+0x104>
 800157a:	ed9f 0a24 	vldr	s0, [pc, #144]	; 800160c <int_Config_Motor+0x108>
 800157e:	481b      	ldr	r0, [pc, #108]	; (80015ec <int_Config_Motor+0xe8>)
 8001580:	f000 feb4 	bl	80022ec <constains_calculator>

	//---------------Motor Izquierdo----------------
	//Parametro de la señal del dutty
	handler_Motor_L.configMotor.dutty =  20;
 8001584:	4b22      	ldr	r3, [pc, #136]	; (8001610 <int_Config_Motor+0x10c>)
 8001586:	4a1a      	ldr	r2, [pc, #104]	; (80015f0 <int_Config_Motor+0xec>)
 8001588:	639a      	str	r2, [r3, #56]	; 0x38
	handler_Motor_L.configMotor.frecuency = &value_period;
 800158a:	4b21      	ldr	r3, [pc, #132]	; (8001610 <int_Config_Motor+0x10c>)
 800158c:	4a19      	ldr	r2, [pc, #100]	; (80015f4 <int_Config_Motor+0xf0>)
 800158e:	635a      	str	r2, [r3, #52]	; 0x34
	handler_Motor_L.configMotor.dir = SET;
 8001590:	4b1f      	ldr	r3, [pc, #124]	; (8001610 <int_Config_Motor+0x10c>)
 8001592:	2201      	movs	r2, #1
 8001594:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	//handler de los perifericos
	handler_Motor_L.phandlerGPIOEN = &handler_GPIO_MotorL_EN;
 8001598:	4b1d      	ldr	r3, [pc, #116]	; (8001610 <int_Config_Motor+0x10c>)
 800159a:	4a1e      	ldr	r2, [pc, #120]	; (8001614 <int_Config_Motor+0x110>)
 800159c:	645a      	str	r2, [r3, #68]	; 0x44
	handler_Motor_L.phandlerGPIOIN = &handler_GPIO_MotorL_IN;
 800159e:	4b1c      	ldr	r3, [pc, #112]	; (8001610 <int_Config_Motor+0x10c>)
 80015a0:	4a1d      	ldr	r2, [pc, #116]	; (8001618 <int_Config_Motor+0x114>)
 80015a2:	641a      	str	r2, [r3, #64]	; 0x40
	handler_Motor_L.phandlerPWM = &handler_PWM_MotorL;
 80015a4:	4b1a      	ldr	r3, [pc, #104]	; (8001610 <int_Config_Motor+0x10c>)
 80015a6:	4a1d      	ldr	r2, [pc, #116]	; (800161c <int_Config_Motor+0x118>)
 80015a8:	649a      	str	r2, [r3, #72]	; 0x48
	//definicion de parametros
	handler_Motor_L.parametersMotor.e = handler_Motor_L.parametersMotor.e_1 = handler_Motor_L.parametersMotor.e_2 = 0;
 80015aa:	4b19      	ldr	r3, [pc, #100]	; (8001610 <int_Config_Motor+0x10c>)
 80015ac:	f04f 0200 	mov.w	r2, #0
 80015b0:	611a      	str	r2, [r3, #16]
 80015b2:	4b17      	ldr	r3, [pc, #92]	; (8001610 <int_Config_Motor+0x10c>)
 80015b4:	691b      	ldr	r3, [r3, #16]
 80015b6:	4a16      	ldr	r2, [pc, #88]	; (8001610 <int_Config_Motor+0x10c>)
 80015b8:	60d3      	str	r3, [r2, #12]
 80015ba:	4b15      	ldr	r3, [pc, #84]	; (8001610 <int_Config_Motor+0x10c>)
 80015bc:	68db      	ldr	r3, [r3, #12]
 80015be:	4a14      	ldr	r2, [pc, #80]	; (8001610 <int_Config_Motor+0x10c>)
 80015c0:	6093      	str	r3, [r2, #8]
	handler_Motor_L.parametersMotor.u = handler_Motor_L.parametersMotor.u_1 = 0;
 80015c2:	4b13      	ldr	r3, [pc, #76]	; (8001610 <int_Config_Motor+0x10c>)
 80015c4:	f04f 0200 	mov.w	r2, #0
 80015c8:	605a      	str	r2, [r3, #4]
 80015ca:	4b11      	ldr	r3, [pc, #68]	; (8001610 <int_Config_Motor+0x10c>)
 80015cc:	685b      	ldr	r3, [r3, #4]
 80015ce:	4a10      	ldr	r2, [pc, #64]	; (8001610 <int_Config_Motor+0x10c>)
 80015d0:	6013      	str	r3, [r2, #0]
	//Calculo de Constantes PID
	constains_calculator(&handler_Motor_L, 2.2, 120, theta);   //k,tau,theta
 80015d2:	ed97 1a01 	vldr	s2, [r7, #4]
 80015d6:	eddf 0a0c 	vldr	s1, [pc, #48]	; 8001608 <int_Config_Motor+0x104>
 80015da:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 800160c <int_Config_Motor+0x108>
 80015de:	480c      	ldr	r0, [pc, #48]	; (8001610 <int_Config_Motor+0x10c>)
 80015e0:	f000 fe84 	bl	80022ec <constains_calculator>

};
 80015e4:	bf00      	nop
 80015e6:	3708      	adds	r7, #8
 80015e8:	46bd      	mov	sp, r7
 80015ea:	bd80      	pop	{r7, pc}
 80015ec:	200002e4 	.word	0x200002e4
 80015f0:	41a00000 	.word	0x41a00000
 80015f4:	20000002 	.word	0x20000002
 80015f8:	200002cc 	.word	0x200002cc
 80015fc:	200002c0 	.word	0x200002c0
 8001600:	200002d8 	.word	0x200002d8
 8001604:	20000004 	.word	0x20000004
 8001608:	42f00000 	.word	0x42f00000
 800160c:	400ccccd 	.word	0x400ccccd
 8001610:	20000360 	.word	0x20000360
 8001614:	20000348 	.word	0x20000348
 8001618:	2000033c 	.word	0x2000033c
 800161c:	20000354 	.word	0x20000354

08001620 <BasicTimer2_Callback>:
//----------------------------Inicio de la definicion de las funciones ISR---------------------------------------

//-------------------------BlinkyLed--------------------------------
//Definimos la funcion que se desea ejecutar cuando se genera la interrupcion por el TIM2
void BasicTimer2_Callback(void)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	af00      	add	r7, sp, #0
	GPIOxTooglePin(&handler_BlinkyPin);
 8001624:	4802      	ldr	r0, [pc, #8]	; (8001630 <BasicTimer2_Callback+0x10>)
 8001626:	f002 fbfa 	bl	8003e1e <GPIOxTooglePin>
}
 800162a:	bf00      	nop
 800162c:	bd80      	pop	{r7, pc}
 800162e:	bf00      	nop
 8001630:	20000200 	.word	0x20000200
 8001634:	00000000 	.word	0x00000000

08001638 <BasicTimer3_Callback>:

//-------------------------study--------------------------------
//Definimos la funcion que se desea ejecutar cuando se genera la interrupcion por el TIM2
void BasicTimer3_Callback(void)
{
 8001638:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800163c:	ed2d 8b02 	vpush	{d8}
 8001640:	b085      	sub	sp, #20
 8001642:	af04      	add	r7, sp, #16
	if(flag_motor==1)
 8001644:	4bbe      	ldr	r3, [pc, #760]	; (8001940 <BasicTimer3_Callback+0x308>)
 8001646:	781b      	ldrb	r3, [r3, #0]
 8001648:	2b01      	cmp	r3, #1
 800164a:	f040 814f 	bne.w	80018ec <BasicTimer3_Callback+0x2b4>
	{
		//Calculamos la velocidad
		//velocity_L = (cm_L*1000)/handler_Motor_L.parametersMotor.timeCount;   //[m/s]
		//velocity_R = (cm_R*1000)/handler_Motor_R.parametersMotor.timeCount;   //[m/s]
		handler_Motor_L.parametersMotor.distance = (cm_L*handler_Motor_L.parametersMotor.count);                   //[mm]
 800164e:	4bbd      	ldr	r3, [pc, #756]	; (8001944 <BasicTimer3_Callback+0x30c>)
 8001650:	8c1b      	ldrh	r3, [r3, #32]
 8001652:	ee07 3a90 	vmov	s15, r3
 8001656:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800165a:	4bbb      	ldr	r3, [pc, #748]	; (8001948 <BasicTimer3_Callback+0x310>)
 800165c:	edd3 7a00 	vldr	s15, [r3]
 8001660:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001664:	4bb7      	ldr	r3, [pc, #732]	; (8001944 <BasicTimer3_Callback+0x30c>)
 8001666:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
		handler_Motor_R.parametersMotor.distance = (cm_R*handler_Motor_R.parametersMotor.count);				   //[mm]
 800166a:	4bb8      	ldr	r3, [pc, #736]	; (800194c <BasicTimer3_Callback+0x314>)
 800166c:	8c1b      	ldrh	r3, [r3, #32]
 800166e:	ee07 3a90 	vmov	s15, r3
 8001672:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001676:	4bb6      	ldr	r3, [pc, #728]	; (8001950 <BasicTimer3_Callback+0x318>)
 8001678:	edd3 7a00 	vldr	s15, [r3]
 800167c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001680:	4bb2      	ldr	r3, [pc, #712]	; (800194c <BasicTimer3_Callback+0x314>)
 8001682:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
		velocity_L = (handler_Motor_L.parametersMotor.distance)/periodo_TIMER_Count;   //[m/s]
 8001686:	4baf      	ldr	r3, [pc, #700]	; (8001944 <BasicTimer3_Callback+0x30c>)
 8001688:	edd3 6a0c 	vldr	s13, [r3, #48]	; 0x30
 800168c:	4bb1      	ldr	r3, [pc, #708]	; (8001954 <BasicTimer3_Callback+0x31c>)
 800168e:	881b      	ldrh	r3, [r3, #0]
 8001690:	ee07 3a90 	vmov	s15, r3
 8001694:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001698:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800169c:	4bae      	ldr	r3, [pc, #696]	; (8001958 <BasicTimer3_Callback+0x320>)
 800169e:	edc3 7a00 	vstr	s15, [r3]
		velocity_R = (handler_Motor_R.parametersMotor.distance)/periodo_TIMER_Count;   //[m/s]
 80016a2:	4baa      	ldr	r3, [pc, #680]	; (800194c <BasicTimer3_Callback+0x314>)
 80016a4:	edd3 6a0c 	vldr	s13, [r3, #48]	; 0x30
 80016a8:	4baa      	ldr	r3, [pc, #680]	; (8001954 <BasicTimer3_Callback+0x31c>)
 80016aa:	881b      	ldrh	r3, [r3, #0]
 80016ac:	ee07 3a90 	vmov	s15, r3
 80016b0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80016b4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80016b8:	4ba8      	ldr	r3, [pc, #672]	; (800195c <BasicTimer3_Callback+0x324>)
 80016ba:	edc3 7a00 	vstr	s15, [r3]
		//Convertirmos los valores de velocidad a porcentaje
		//Falla porVel_L = 546.4481*velocity_L-36.5573;
		//Regular porVel_R = 563*velocity_R + -26;
		//Estable porVel_R = 591.9159*velocity_R-36.5313;
		//porVel_L = 17.8 + -185*(velocity_L) + 3973*pow(velocity_L,2) + -6556*pow(velocity_L,3);
		porVel_L = 600*velocity_L - 36.53;
 80016be:	4ba6      	ldr	r3, [pc, #664]	; (8001958 <BasicTimer3_Callback+0x320>)
 80016c0:	edd3 7a00 	vldr	s15, [r3]
 80016c4:	ed9f 7aa6 	vldr	s14, [pc, #664]	; 8001960 <BasicTimer3_Callback+0x328>
 80016c8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80016cc:	ee17 0a90 	vmov	r0, s15
 80016d0:	f7fe ff52 	bl	8000578 <__aeabi_f2d>
 80016d4:	a398      	add	r3, pc, #608	; (adr r3, 8001938 <BasicTimer3_Callback+0x300>)
 80016d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016da:	f7fe fded 	bl	80002b8 <__aeabi_dsub>
 80016de:	4602      	mov	r2, r0
 80016e0:	460b      	mov	r3, r1
 80016e2:	4610      	mov	r0, r2
 80016e4:	4619      	mov	r1, r3
 80016e6:	f7ff fa97 	bl	8000c18 <__aeabi_d2f>
 80016ea:	4603      	mov	r3, r0
 80016ec:	4a9d      	ldr	r2, [pc, #628]	; (8001964 <BasicTimer3_Callback+0x32c>)
 80016ee:	6013      	str	r3, [r2, #0]
		porVel_R = 600*velocity_R - 36.53;
 80016f0:	4b9a      	ldr	r3, [pc, #616]	; (800195c <BasicTimer3_Callback+0x324>)
 80016f2:	edd3 7a00 	vldr	s15, [r3]
 80016f6:	ed9f 7a9a 	vldr	s14, [pc, #616]	; 8001960 <BasicTimer3_Callback+0x328>
 80016fa:	ee67 7a87 	vmul.f32	s15, s15, s14
 80016fe:	ee17 0a90 	vmov	r0, s15
 8001702:	f7fe ff39 	bl	8000578 <__aeabi_f2d>
 8001706:	a38c      	add	r3, pc, #560	; (adr r3, 8001938 <BasicTimer3_Callback+0x300>)
 8001708:	e9d3 2300 	ldrd	r2, r3, [r3]
 800170c:	f7fe fdd4 	bl	80002b8 <__aeabi_dsub>
 8001710:	4602      	mov	r2, r0
 8001712:	460b      	mov	r3, r1
 8001714:	4610      	mov	r0, r2
 8001716:	4619      	mov	r1, r3
 8001718:	f7ff fa7e 	bl	8000c18 <__aeabi_d2f>
 800171c:	4603      	mov	r3, r0
 800171e:	4a92      	ldr	r2, [pc, #584]	; (8001968 <BasicTimer3_Callback+0x330>)
 8001720:	6013      	str	r3, [r2, #0]
		//Calculo odometria
		distance_c = (handler_Motor_R.parametersMotor.distance+handler_Motor_L.parametersMotor.distance)/2;  	   //[mm]
 8001722:	4b8a      	ldr	r3, [pc, #552]	; (800194c <BasicTimer3_Callback+0x314>)
 8001724:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 8001728:	4b86      	ldr	r3, [pc, #536]	; (8001944 <BasicTimer3_Callback+0x30c>)
 800172a:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 800172e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001732:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001736:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800173a:	4b8c      	ldr	r3, [pc, #560]	; (800196c <BasicTimer3_Callback+0x334>)
 800173c:	edc3 7a00 	vstr	s15, [r3]
		x_position = x_position + (distance_c*(cos(phi)));        //[m]
 8001740:	4b8b      	ldr	r3, [pc, #556]	; (8001970 <BasicTimer3_Callback+0x338>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	4618      	mov	r0, r3
 8001746:	f7fe ff17 	bl	8000578 <__aeabi_f2d>
 800174a:	4604      	mov	r4, r0
 800174c:	460d      	mov	r5, r1
 800174e:	4b87      	ldr	r3, [pc, #540]	; (800196c <BasicTimer3_Callback+0x334>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	4618      	mov	r0, r3
 8001754:	f7fe ff10 	bl	8000578 <__aeabi_f2d>
 8001758:	4680      	mov	r8, r0
 800175a:	4689      	mov	r9, r1
 800175c:	4b85      	ldr	r3, [pc, #532]	; (8001974 <BasicTimer3_Callback+0x33c>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	4618      	mov	r0, r3
 8001762:	f7fe ff09 	bl	8000578 <__aeabi_f2d>
 8001766:	4602      	mov	r2, r0
 8001768:	460b      	mov	r3, r1
 800176a:	ec43 2b10 	vmov	d0, r2, r3
 800176e:	f008 fce7 	bl	800a140 <cos>
 8001772:	ec53 2b10 	vmov	r2, r3, d0
 8001776:	4640      	mov	r0, r8
 8001778:	4649      	mov	r1, r9
 800177a:	f7fe ff55 	bl	8000628 <__aeabi_dmul>
 800177e:	4602      	mov	r2, r0
 8001780:	460b      	mov	r3, r1
 8001782:	4620      	mov	r0, r4
 8001784:	4629      	mov	r1, r5
 8001786:	f7fe fd99 	bl	80002bc <__adddf3>
 800178a:	4602      	mov	r2, r0
 800178c:	460b      	mov	r3, r1
 800178e:	4610      	mov	r0, r2
 8001790:	4619      	mov	r1, r3
 8001792:	f7ff fa41 	bl	8000c18 <__aeabi_d2f>
 8001796:	4603      	mov	r3, r0
 8001798:	4a75      	ldr	r2, [pc, #468]	; (8001970 <BasicTimer3_Callback+0x338>)
 800179a:	6013      	str	r3, [r2, #0]
		y_position = y_position + (distance_c*(sin(phi)));        //[m]
 800179c:	4b76      	ldr	r3, [pc, #472]	; (8001978 <BasicTimer3_Callback+0x340>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	4618      	mov	r0, r3
 80017a2:	f7fe fee9 	bl	8000578 <__aeabi_f2d>
 80017a6:	4604      	mov	r4, r0
 80017a8:	460d      	mov	r5, r1
 80017aa:	4b70      	ldr	r3, [pc, #448]	; (800196c <BasicTimer3_Callback+0x334>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	4618      	mov	r0, r3
 80017b0:	f7fe fee2 	bl	8000578 <__aeabi_f2d>
 80017b4:	4680      	mov	r8, r0
 80017b6:	4689      	mov	r9, r1
 80017b8:	4b6e      	ldr	r3, [pc, #440]	; (8001974 <BasicTimer3_Callback+0x33c>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	4618      	mov	r0, r3
 80017be:	f7fe fedb 	bl	8000578 <__aeabi_f2d>
 80017c2:	4602      	mov	r2, r0
 80017c4:	460b      	mov	r3, r1
 80017c6:	ec43 2b10 	vmov	d0, r2, r3
 80017ca:	f008 fd0d 	bl	800a1e8 <sin>
 80017ce:	ec53 2b10 	vmov	r2, r3, d0
 80017d2:	4640      	mov	r0, r8
 80017d4:	4649      	mov	r1, r9
 80017d6:	f7fe ff27 	bl	8000628 <__aeabi_dmul>
 80017da:	4602      	mov	r2, r0
 80017dc:	460b      	mov	r3, r1
 80017de:	4620      	mov	r0, r4
 80017e0:	4629      	mov	r1, r5
 80017e2:	f7fe fd6b 	bl	80002bc <__adddf3>
 80017e6:	4602      	mov	r2, r0
 80017e8:	460b      	mov	r3, r1
 80017ea:	4610      	mov	r0, r2
 80017ec:	4619      	mov	r1, r3
 80017ee:	f7ff fa13 	bl	8000c18 <__aeabi_d2f>
 80017f2:	4603      	mov	r3, r0
 80017f4:	4a60      	ldr	r2, [pc, #384]	; (8001978 <BasicTimer3_Callback+0x340>)
 80017f6:	6013      	str	r3, [r2, #0]
		phi = phi + ((handler_Motor_R.parametersMotor.distance-handler_Motor_L.parametersMotor.distance)*100)/b;   //[rad]
 80017f8:	4b54      	ldr	r3, [pc, #336]	; (800194c <BasicTimer3_Callback+0x314>)
 80017fa:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 80017fe:	4b51      	ldr	r3, [pc, #324]	; (8001944 <BasicTimer3_Callback+0x30c>)
 8001800:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8001804:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001808:	ed9f 7a5c 	vldr	s14, [pc, #368]	; 800197c <BasicTimer3_Callback+0x344>
 800180c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001810:	eddf 6a5b 	vldr	s13, [pc, #364]	; 8001980 <BasicTimer3_Callback+0x348>
 8001814:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001818:	4b56      	ldr	r3, [pc, #344]	; (8001974 <BasicTimer3_Callback+0x33c>)
 800181a:	edd3 7a00 	vldr	s15, [r3]
 800181e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001822:	4b54      	ldr	r3, [pc, #336]	; (8001974 <BasicTimer3_Callback+0x33c>)
 8001824:	edc3 7a00 	vstr	s15, [r3]
		phi = atan2(sin(phi),cos(phi));
 8001828:	4b52      	ldr	r3, [pc, #328]	; (8001974 <BasicTimer3_Callback+0x33c>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	4618      	mov	r0, r3
 800182e:	f7fe fea3 	bl	8000578 <__aeabi_f2d>
 8001832:	4602      	mov	r2, r0
 8001834:	460b      	mov	r3, r1
 8001836:	ec43 2b10 	vmov	d0, r2, r3
 800183a:	f008 fcd5 	bl	800a1e8 <sin>
 800183e:	eeb0 8a40 	vmov.f32	s16, s0
 8001842:	eef0 8a60 	vmov.f32	s17, s1
 8001846:	4b4b      	ldr	r3, [pc, #300]	; (8001974 <BasicTimer3_Callback+0x33c>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	4618      	mov	r0, r3
 800184c:	f7fe fe94 	bl	8000578 <__aeabi_f2d>
 8001850:	4602      	mov	r2, r0
 8001852:	460b      	mov	r3, r1
 8001854:	ec43 2b10 	vmov	d0, r2, r3
 8001858:	f008 fc72 	bl	800a140 <cos>
 800185c:	eeb0 7a40 	vmov.f32	s14, s0
 8001860:	eef0 7a60 	vmov.f32	s15, s1
 8001864:	eeb0 1a47 	vmov.f32	s2, s14
 8001868:	eef0 1a67 	vmov.f32	s3, s15
 800186c:	eeb0 0a48 	vmov.f32	s0, s16
 8001870:	eef0 0a68 	vmov.f32	s1, s17
 8001874:	f008 fd10 	bl	800a298 <atan2>
 8001878:	ec53 2b10 	vmov	r2, r3, d0
 800187c:	4610      	mov	r0, r2
 800187e:	4619      	mov	r1, r3
 8001880:	f7ff f9ca 	bl	8000c18 <__aeabi_d2f>
 8001884:	4603      	mov	r3, r0
 8001886:	4a3b      	ldr	r2, [pc, #236]	; (8001974 <BasicTimer3_Callback+0x33c>)
 8001888:	6013      	str	r3, [r2, #0]
		//Convertimos el valor y imprimemos
		sprintf(bufferMsg,"%#.4f\t%#.4f\n", x_position , y_position);
 800188a:	4b39      	ldr	r3, [pc, #228]	; (8001970 <BasicTimer3_Callback+0x338>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	4618      	mov	r0, r3
 8001890:	f7fe fe72 	bl	8000578 <__aeabi_f2d>
 8001894:	4604      	mov	r4, r0
 8001896:	460d      	mov	r5, r1
 8001898:	4b37      	ldr	r3, [pc, #220]	; (8001978 <BasicTimer3_Callback+0x340>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	4618      	mov	r0, r3
 800189e:	f7fe fe6b 	bl	8000578 <__aeabi_f2d>
 80018a2:	4602      	mov	r2, r0
 80018a4:	460b      	mov	r3, r1
 80018a6:	e9cd 2300 	strd	r2, r3, [sp]
 80018aa:	4622      	mov	r2, r4
 80018ac:	462b      	mov	r3, r5
 80018ae:	4935      	ldr	r1, [pc, #212]	; (8001984 <BasicTimer3_Callback+0x34c>)
 80018b0:	4835      	ldr	r0, [pc, #212]	; (8001988 <BasicTimer3_Callback+0x350>)
 80018b2:	f004 fa1b 	bl	8005cec <siprintf>
		writeMsgForTXE(&handler_USART_USB, bufferMsg);
 80018b6:	4934      	ldr	r1, [pc, #208]	; (8001988 <BasicTimer3_Callback+0x350>)
 80018b8:	4834      	ldr	r0, [pc, #208]	; (800198c <BasicTimer3_Callback+0x354>)
 80018ba:	f003 f95d 	bl	8004b78 <writeMsgForTXE>
		//Reiniciamos el numero de conteos
		handler_Motor_R.parametersMotor.count = 0;
 80018be:	4b23      	ldr	r3, [pc, #140]	; (800194c <BasicTimer3_Callback+0x314>)
 80018c0:	2200      	movs	r2, #0
 80018c2:	841a      	strh	r2, [r3, #32]
		handler_Motor_L.parametersMotor.count = 0;
 80018c4:	4b1f      	ldr	r3, [pc, #124]	; (8001944 <BasicTimer3_Callback+0x30c>)
 80018c6:	2200      	movs	r2, #0
 80018c8:	841a      	strh	r2, [r3, #32]
		//Aplicamos el PID
		PID(&handler_Motor_L, porVel_L);
 80018ca:	4b26      	ldr	r3, [pc, #152]	; (8001964 <BasicTimer3_Callback+0x32c>)
 80018cc:	edd3 7a00 	vldr	s15, [r3]
 80018d0:	eeb0 0a67 	vmov.f32	s0, s15
 80018d4:	481b      	ldr	r0, [pc, #108]	; (8001944 <BasicTimer3_Callback+0x30c>)
 80018d6:	f000 fbb1 	bl	800203c <PID>
		PID(&handler_Motor_R, porVel_R);
 80018da:	4b23      	ldr	r3, [pc, #140]	; (8001968 <BasicTimer3_Callback+0x330>)
 80018dc:	edd3 7a00 	vldr	s15, [r3]
 80018e0:	eeb0 0a67 	vmov.f32	s0, s15
 80018e4:	4819      	ldr	r0, [pc, #100]	; (800194c <BasicTimer3_Callback+0x314>)
 80018e6:	f000 fba9 	bl	800203c <PID>
		//Reiniciamos el numero de conteos
		handler_Motor_R.parametersMotor.count = 0;
		handler_Motor_L.parametersMotor.count = 0;
	}

}
 80018ea:	e0b1      	b.n	8001a50 <BasicTimer3_Callback+0x418>
	else if(flag_motor==3)
 80018ec:	4b14      	ldr	r3, [pc, #80]	; (8001940 <BasicTimer3_Callback+0x308>)
 80018ee:	781b      	ldrb	r3, [r3, #0]
 80018f0:	2b03      	cmp	r3, #3
 80018f2:	d151      	bne.n	8001998 <BasicTimer3_Callback+0x360>
		count_time = count_time + periodo_TIMER_Count;       //Tiempo en ms
 80018f4:	4b26      	ldr	r3, [pc, #152]	; (8001990 <BasicTimer3_Callback+0x358>)
 80018f6:	881a      	ldrh	r2, [r3, #0]
 80018f8:	4b16      	ldr	r3, [pc, #88]	; (8001954 <BasicTimer3_Callback+0x31c>)
 80018fa:	881b      	ldrh	r3, [r3, #0]
 80018fc:	4413      	add	r3, r2
 80018fe:	b29a      	uxth	r2, r3
 8001900:	4b23      	ldr	r3, [pc, #140]	; (8001990 <BasicTimer3_Callback+0x358>)
 8001902:	801a      	strh	r2, [r3, #0]
		sprintf(bufferMsg,"%u\t%u\t%u\n", count_time,(handler_Motor_R.parametersMotor.count), (handler_Motor_L.parametersMotor.count));
 8001904:	4b22      	ldr	r3, [pc, #136]	; (8001990 <BasicTimer3_Callback+0x358>)
 8001906:	881b      	ldrh	r3, [r3, #0]
 8001908:	461a      	mov	r2, r3
 800190a:	4b10      	ldr	r3, [pc, #64]	; (800194c <BasicTimer3_Callback+0x314>)
 800190c:	8c1b      	ldrh	r3, [r3, #32]
 800190e:	4619      	mov	r1, r3
 8001910:	4b0c      	ldr	r3, [pc, #48]	; (8001944 <BasicTimer3_Callback+0x30c>)
 8001912:	8c1b      	ldrh	r3, [r3, #32]
 8001914:	9300      	str	r3, [sp, #0]
 8001916:	460b      	mov	r3, r1
 8001918:	491e      	ldr	r1, [pc, #120]	; (8001994 <BasicTimer3_Callback+0x35c>)
 800191a:	481b      	ldr	r0, [pc, #108]	; (8001988 <BasicTimer3_Callback+0x350>)
 800191c:	f004 f9e6 	bl	8005cec <siprintf>
		writeMsgForTXE(&handler_USART_USB, bufferMsg);
 8001920:	4919      	ldr	r1, [pc, #100]	; (8001988 <BasicTimer3_Callback+0x350>)
 8001922:	481a      	ldr	r0, [pc, #104]	; (800198c <BasicTimer3_Callback+0x354>)
 8001924:	f003 f928 	bl	8004b78 <writeMsgForTXE>
		handler_Motor_R.parametersMotor.count = 0;
 8001928:	4b08      	ldr	r3, [pc, #32]	; (800194c <BasicTimer3_Callback+0x314>)
 800192a:	2200      	movs	r2, #0
 800192c:	841a      	strh	r2, [r3, #32]
		handler_Motor_L.parametersMotor.count = 0;
 800192e:	4b05      	ldr	r3, [pc, #20]	; (8001944 <BasicTimer3_Callback+0x30c>)
 8001930:	2200      	movs	r2, #0
 8001932:	841a      	strh	r2, [r3, #32]
}
 8001934:	e08c      	b.n	8001a50 <BasicTimer3_Callback+0x418>
 8001936:	bf00      	nop
 8001938:	0a3d70a4 	.word	0x0a3d70a4
 800193c:	404243d7 	.word	0x404243d7
 8001940:	200003f8 	.word	0x200003f8
 8001944:	20000360 	.word	0x20000360
 8001948:	200003d4 	.word	0x200003d4
 800194c:	200002e4 	.word	0x200002e4
 8001950:	200003d8 	.word	0x200003d8
 8001954:	20000008 	.word	0x20000008
 8001958:	200003e4 	.word	0x200003e4
 800195c:	200003e8 	.word	0x200003e8
 8001960:	44160000 	.word	0x44160000
 8001964:	20000400 	.word	0x20000400
 8001968:	20000404 	.word	0x20000404
 800196c:	200003e0 	.word	0x200003e0
 8001970:	200003ec 	.word	0x200003ec
 8001974:	200003dc 	.word	0x200003dc
 8001978:	200003f0 	.word	0x200003f0
 800197c:	42c80000 	.word	0x42c80000
 8001980:	4622f800 	.word	0x4622f800
 8001984:	0800b780 	.word	0x0800b780
 8001988:	20000274 	.word	0x20000274
 800198c:	20000268 	.word	0x20000268
 8001990:	200003fa 	.word	0x200003fa
 8001994:	0800b790 	.word	0x0800b790
	else if(flag_motor==4)
 8001998:	4b31      	ldr	r3, [pc, #196]	; (8001a60 <BasicTimer3_Callback+0x428>)
 800199a:	781b      	ldrb	r3, [r3, #0]
 800199c:	2b04      	cmp	r3, #4
 800199e:	d157      	bne.n	8001a50 <BasicTimer3_Callback+0x418>
		velocity_L = (cm_L*handler_Motor_L.parametersMotor.count)/periodo_TIMER_Count;   //[m/s]
 80019a0:	4b30      	ldr	r3, [pc, #192]	; (8001a64 <BasicTimer3_Callback+0x42c>)
 80019a2:	8c1b      	ldrh	r3, [r3, #32]
 80019a4:	ee07 3a90 	vmov	s15, r3
 80019a8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80019ac:	4b2e      	ldr	r3, [pc, #184]	; (8001a68 <BasicTimer3_Callback+0x430>)
 80019ae:	edd3 7a00 	vldr	s15, [r3]
 80019b2:	ee67 6a27 	vmul.f32	s13, s14, s15
 80019b6:	4b2d      	ldr	r3, [pc, #180]	; (8001a6c <BasicTimer3_Callback+0x434>)
 80019b8:	881b      	ldrh	r3, [r3, #0]
 80019ba:	ee07 3a90 	vmov	s15, r3
 80019be:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80019c2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80019c6:	4b2a      	ldr	r3, [pc, #168]	; (8001a70 <BasicTimer3_Callback+0x438>)
 80019c8:	edc3 7a00 	vstr	s15, [r3]
		velocity_R = (cm_R*handler_Motor_R.parametersMotor.count)/periodo_TIMER_Count;   //[m/s]
 80019cc:	4b29      	ldr	r3, [pc, #164]	; (8001a74 <BasicTimer3_Callback+0x43c>)
 80019ce:	8c1b      	ldrh	r3, [r3, #32]
 80019d0:	ee07 3a90 	vmov	s15, r3
 80019d4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80019d8:	4b27      	ldr	r3, [pc, #156]	; (8001a78 <BasicTimer3_Callback+0x440>)
 80019da:	edd3 7a00 	vldr	s15, [r3]
 80019de:	ee67 6a27 	vmul.f32	s13, s14, s15
 80019e2:	4b22      	ldr	r3, [pc, #136]	; (8001a6c <BasicTimer3_Callback+0x434>)
 80019e4:	881b      	ldrh	r3, [r3, #0]
 80019e6:	ee07 3a90 	vmov	s15, r3
 80019ea:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80019ee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80019f2:	4b22      	ldr	r3, [pc, #136]	; (8001a7c <BasicTimer3_Callback+0x444>)
 80019f4:	edc3 7a00 	vstr	s15, [r3]
		count_time = count_time + periodo_TIMER_Count;       //Tiempo en ms
 80019f8:	4b21      	ldr	r3, [pc, #132]	; (8001a80 <BasicTimer3_Callback+0x448>)
 80019fa:	881a      	ldrh	r2, [r3, #0]
 80019fc:	4b1b      	ldr	r3, [pc, #108]	; (8001a6c <BasicTimer3_Callback+0x434>)
 80019fe:	881b      	ldrh	r3, [r3, #0]
 8001a00:	4413      	add	r3, r2
 8001a02:	b29a      	uxth	r2, r3
 8001a04:	4b1e      	ldr	r3, [pc, #120]	; (8001a80 <BasicTimer3_Callback+0x448>)
 8001a06:	801a      	strh	r2, [r3, #0]
		sprintf(bufferMsg,"%u\t%#.4f\t%#.4f\n", count_time, velocity_L , velocity_R);
 8001a08:	4b1d      	ldr	r3, [pc, #116]	; (8001a80 <BasicTimer3_Callback+0x448>)
 8001a0a:	881b      	ldrh	r3, [r3, #0]
 8001a0c:	461e      	mov	r6, r3
 8001a0e:	4b18      	ldr	r3, [pc, #96]	; (8001a70 <BasicTimer3_Callback+0x438>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	4618      	mov	r0, r3
 8001a14:	f7fe fdb0 	bl	8000578 <__aeabi_f2d>
 8001a18:	4604      	mov	r4, r0
 8001a1a:	460d      	mov	r5, r1
 8001a1c:	4b17      	ldr	r3, [pc, #92]	; (8001a7c <BasicTimer3_Callback+0x444>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	4618      	mov	r0, r3
 8001a22:	f7fe fda9 	bl	8000578 <__aeabi_f2d>
 8001a26:	4602      	mov	r2, r0
 8001a28:	460b      	mov	r3, r1
 8001a2a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001a2e:	e9cd 4500 	strd	r4, r5, [sp]
 8001a32:	4632      	mov	r2, r6
 8001a34:	4913      	ldr	r1, [pc, #76]	; (8001a84 <BasicTimer3_Callback+0x44c>)
 8001a36:	4814      	ldr	r0, [pc, #80]	; (8001a88 <BasicTimer3_Callback+0x450>)
 8001a38:	f004 f958 	bl	8005cec <siprintf>
		writeMsgForTXE(&handler_USART_USB, bufferMsg);
 8001a3c:	4912      	ldr	r1, [pc, #72]	; (8001a88 <BasicTimer3_Callback+0x450>)
 8001a3e:	4813      	ldr	r0, [pc, #76]	; (8001a8c <BasicTimer3_Callback+0x454>)
 8001a40:	f003 f89a 	bl	8004b78 <writeMsgForTXE>
		handler_Motor_R.parametersMotor.count = 0;
 8001a44:	4b0b      	ldr	r3, [pc, #44]	; (8001a74 <BasicTimer3_Callback+0x43c>)
 8001a46:	2200      	movs	r2, #0
 8001a48:	841a      	strh	r2, [r3, #32]
		handler_Motor_L.parametersMotor.count = 0;
 8001a4a:	4b06      	ldr	r3, [pc, #24]	; (8001a64 <BasicTimer3_Callback+0x42c>)
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	841a      	strh	r2, [r3, #32]
}
 8001a50:	bf00      	nop
 8001a52:	3704      	adds	r7, #4
 8001a54:	46bd      	mov	sp, r7
 8001a56:	ecbd 8b02 	vpop	{d8}
 8001a5a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001a5e:	bf00      	nop
 8001a60:	200003f8 	.word	0x200003f8
 8001a64:	20000360 	.word	0x20000360
 8001a68:	200003d4 	.word	0x200003d4
 8001a6c:	20000008 	.word	0x20000008
 8001a70:	200003e4 	.word	0x200003e4
 8001a74:	200002e4 	.word	0x200002e4
 8001a78:	200003d8 	.word	0x200003d8
 8001a7c:	200003e8 	.word	0x200003e8
 8001a80:	200003fa 	.word	0x200003fa
 8001a84:	0800b79c 	.word	0x0800b79c
 8001a88:	20000274 	.word	0x20000274
 8001a8c:	20000268 	.word	0x20000268

08001a90 <BasicUSART1_Callback>:

//-------------------------USARTRX--------------------------------
//Definimos la funcion que se desea ejecutar cuando se genera la interrupcion por el USART2
void BasicUSART1_Callback(void)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	af00      	add	r7, sp, #0
	//Guardamos el caracter recibido
	charRead = getRxData();
 8001a94:	f003 f8ae 	bl	8004bf4 <getRxData>
 8001a98:	4603      	mov	r3, r0
 8001a9a:	461a      	mov	r2, r3
 8001a9c:	4b02      	ldr	r3, [pc, #8]	; (8001aa8 <BasicUSART1_Callback+0x18>)
 8001a9e:	701a      	strb	r2, [r3, #0]
	//Funcion que almacena los caracteres del comando recibido
	recepcionCommand();
 8001aa0:	f000 f8a8 	bl	8001bf4 <recepcionCommand>
}
 8001aa4:	bf00      	nop
 8001aa6:	bd80      	pop	{r7, pc}
 8001aa8:	20000000 	.word	0x20000000

08001aac <callback_extInt1>:


//-------------------------Fotocompuerta--------------------------------
//Definimos la funcion que se desea ejecutar cuando se genera la interrupcion por el EXTI13 y EXTI13
void callback_extInt1(void)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	af00      	add	r7, sp, #0
	handler_Motor_R.parametersMotor.count++;
 8001ab0:	4b20      	ldr	r3, [pc, #128]	; (8001b34 <callback_extInt1+0x88>)
 8001ab2:	8c1b      	ldrh	r3, [r3, #32]
 8001ab4:	3301      	adds	r3, #1
 8001ab6:	b29a      	uxth	r2, r3
 8001ab8:	4b1e      	ldr	r3, [pc, #120]	; (8001b34 <callback_extInt1+0x88>)
 8001aba:	841a      	strh	r2, [r3, #32]
	handler_Motor_R.parametersMotor.countCotinuous++;
 8001abc:	4b1d      	ldr	r3, [pc, #116]	; (8001b34 <callback_extInt1+0x88>)
 8001abe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ac0:	3301      	adds	r3, #1
 8001ac2:	4a1c      	ldr	r2, [pc, #112]	; (8001b34 <callback_extInt1+0x88>)
 8001ac4:	6253      	str	r3, [r2, #36]	; 0x24
	//calculo del tiempo entre interrupcion
//	uint64_t timeNow = getTicksUs();
//	handler_Motor_R.parametersMotor.timeCount = timeNow-timeBackR;
//	timeBackR = timeNow;
	//Verificamos que la bandera este arriba
	if(flag_motor==2 && flag_turn==1 && (limit_count_turn)<(handler_Motor_R.parametersMotor.count))
 8001ac6:	4b1c      	ldr	r3, [pc, #112]	; (8001b38 <callback_extInt1+0x8c>)
 8001ac8:	781b      	ldrb	r3, [r3, #0]
 8001aca:	2b02      	cmp	r3, #2
 8001acc:	d112      	bne.n	8001af4 <callback_extInt1+0x48>
 8001ace:	4b1b      	ldr	r3, [pc, #108]	; (8001b3c <callback_extInt1+0x90>)
 8001ad0:	781b      	ldrb	r3, [r3, #0]
 8001ad2:	2b01      	cmp	r3, #1
 8001ad4:	d10e      	bne.n	8001af4 <callback_extInt1+0x48>
 8001ad6:	4b17      	ldr	r3, [pc, #92]	; (8001b34 <callback_extInt1+0x88>)
 8001ad8:	8c1a      	ldrh	r2, [r3, #32]
 8001ada:	4b19      	ldr	r3, [pc, #100]	; (8001b40 <callback_extInt1+0x94>)
 8001adc:	881b      	ldrh	r3, [r3, #0]
 8001ade:	429a      	cmp	r2, r3
 8001ae0:	d908      	bls.n	8001af4 <callback_extInt1+0x48>
	{
		//Desactivamos los motores
		status_motor(RESET);
 8001ae2:	2000      	movs	r0, #0
 8001ae4:	f000 fb34 	bl	8002150 <status_motor>
		//Actualizamos la direccion del motor
		updateDirMotor(handler_Motor_Execute);
 8001ae8:	4b16      	ldr	r3, [pc, #88]	; (8001b44 <callback_extInt1+0x98>)
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	4618      	mov	r0, r3
 8001aee:	f7ff faea 	bl	80010c6 <updateDirMotor>
	{
		//Desactivamos los motores
		status_motor(RESET);
	}

}
 8001af2:	e01d      	b.n	8001b30 <callback_extInt1+0x84>
	else if(flag_motor==1 && distance<(cm_R*handler_Motor_R.parametersMotor.countCotinuous))
 8001af4:	4b10      	ldr	r3, [pc, #64]	; (8001b38 <callback_extInt1+0x8c>)
 8001af6:	781b      	ldrb	r3, [r3, #0]
 8001af8:	2b01      	cmp	r3, #1
 8001afa:	d119      	bne.n	8001b30 <callback_extInt1+0x84>
 8001afc:	4b12      	ldr	r3, [pc, #72]	; (8001b48 <callback_extInt1+0x9c>)
 8001afe:	881b      	ldrh	r3, [r3, #0]
 8001b00:	ee07 3a90 	vmov	s15, r3
 8001b04:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001b08:	4b0a      	ldr	r3, [pc, #40]	; (8001b34 <callback_extInt1+0x88>)
 8001b0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b0c:	ee07 3a90 	vmov	s15, r3
 8001b10:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001b14:	4b0d      	ldr	r3, [pc, #52]	; (8001b4c <callback_extInt1+0xa0>)
 8001b16:	edd3 7a00 	vldr	s15, [r3]
 8001b1a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001b1e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001b22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b26:	d400      	bmi.n	8001b2a <callback_extInt1+0x7e>
}
 8001b28:	e002      	b.n	8001b30 <callback_extInt1+0x84>
		status_motor(RESET);
 8001b2a:	2000      	movs	r0, #0
 8001b2c:	f000 fb10 	bl	8002150 <status_motor>
}
 8001b30:	bf00      	nop
 8001b32:	bd80      	pop	{r7, pc}
 8001b34:	200002e4 	.word	0x200002e4
 8001b38:	200003f8 	.word	0x200003f8
 8001b3c:	200003f9 	.word	0x200003f9
 8001b40:	200003fc 	.word	0x200003fc
 8001b44:	200003f4 	.word	0x200003f4
 8001b48:	200003cc 	.word	0x200003cc
 8001b4c:	200003d8 	.word	0x200003d8

08001b50 <callback_extInt3>:
void callback_extInt3(void)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	af00      	add	r7, sp, #0
	handler_Motor_L.parametersMotor.count++;
 8001b54:	4b20      	ldr	r3, [pc, #128]	; (8001bd8 <callback_extInt3+0x88>)
 8001b56:	8c1b      	ldrh	r3, [r3, #32]
 8001b58:	3301      	adds	r3, #1
 8001b5a:	b29a      	uxth	r2, r3
 8001b5c:	4b1e      	ldr	r3, [pc, #120]	; (8001bd8 <callback_extInt3+0x88>)
 8001b5e:	841a      	strh	r2, [r3, #32]
	handler_Motor_L.parametersMotor.countCotinuous++;
 8001b60:	4b1d      	ldr	r3, [pc, #116]	; (8001bd8 <callback_extInt3+0x88>)
 8001b62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b64:	3301      	adds	r3, #1
 8001b66:	4a1c      	ldr	r2, [pc, #112]	; (8001bd8 <callback_extInt3+0x88>)
 8001b68:	6253      	str	r3, [r2, #36]	; 0x24
	//calculo del tiempo entre interrupcion
//	uint64_t timeNow = getTicksUs();
//	handler_Motor_L.parametersMotor.timeCount = timeNow-timeBackL;
//	timeBackL = timeNow;
	//Verificamos que la bandera este arriba
	if(flag_motor==2 && flag_turn==2 && (limit_count_turn)<(handler_Motor_L.parametersMotor.count))
 8001b6a:	4b1c      	ldr	r3, [pc, #112]	; (8001bdc <callback_extInt3+0x8c>)
 8001b6c:	781b      	ldrb	r3, [r3, #0]
 8001b6e:	2b02      	cmp	r3, #2
 8001b70:	d112      	bne.n	8001b98 <callback_extInt3+0x48>
 8001b72:	4b1b      	ldr	r3, [pc, #108]	; (8001be0 <callback_extInt3+0x90>)
 8001b74:	781b      	ldrb	r3, [r3, #0]
 8001b76:	2b02      	cmp	r3, #2
 8001b78:	d10e      	bne.n	8001b98 <callback_extInt3+0x48>
 8001b7a:	4b17      	ldr	r3, [pc, #92]	; (8001bd8 <callback_extInt3+0x88>)
 8001b7c:	8c1a      	ldrh	r2, [r3, #32]
 8001b7e:	4b19      	ldr	r3, [pc, #100]	; (8001be4 <callback_extInt3+0x94>)
 8001b80:	881b      	ldrh	r3, [r3, #0]
 8001b82:	429a      	cmp	r2, r3
 8001b84:	d908      	bls.n	8001b98 <callback_extInt3+0x48>
	{
		//Desactivamos los motores
		status_motor(RESET);
 8001b86:	2000      	movs	r0, #0
 8001b88:	f000 fae2 	bl	8002150 <status_motor>
		//Actualizamos la direccion del motor
		updateDirMotor(handler_Motor_Execute);
 8001b8c:	4b16      	ldr	r3, [pc, #88]	; (8001be8 <callback_extInt3+0x98>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	4618      	mov	r0, r3
 8001b92:	f7ff fa98 	bl	80010c6 <updateDirMotor>
	else if(flag_motor==1 && distance<(cm_L*handler_Motor_L.parametersMotor.countCotinuous))
	{
		//Desactivamos los motores
		status_motor(RESET);
	}
}
 8001b96:	e01d      	b.n	8001bd4 <callback_extInt3+0x84>
	else if(flag_motor==1 && distance<(cm_L*handler_Motor_L.parametersMotor.countCotinuous))
 8001b98:	4b10      	ldr	r3, [pc, #64]	; (8001bdc <callback_extInt3+0x8c>)
 8001b9a:	781b      	ldrb	r3, [r3, #0]
 8001b9c:	2b01      	cmp	r3, #1
 8001b9e:	d119      	bne.n	8001bd4 <callback_extInt3+0x84>
 8001ba0:	4b12      	ldr	r3, [pc, #72]	; (8001bec <callback_extInt3+0x9c>)
 8001ba2:	881b      	ldrh	r3, [r3, #0]
 8001ba4:	ee07 3a90 	vmov	s15, r3
 8001ba8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001bac:	4b0a      	ldr	r3, [pc, #40]	; (8001bd8 <callback_extInt3+0x88>)
 8001bae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bb0:	ee07 3a90 	vmov	s15, r3
 8001bb4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001bb8:	4b0d      	ldr	r3, [pc, #52]	; (8001bf0 <callback_extInt3+0xa0>)
 8001bba:	edd3 7a00 	vldr	s15, [r3]
 8001bbe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001bc2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001bc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bca:	d400      	bmi.n	8001bce <callback_extInt3+0x7e>
}
 8001bcc:	e002      	b.n	8001bd4 <callback_extInt3+0x84>
		status_motor(RESET);
 8001bce:	2000      	movs	r0, #0
 8001bd0:	f000 fabe 	bl	8002150 <status_motor>
}
 8001bd4:	bf00      	nop
 8001bd6:	bd80      	pop	{r7, pc}
 8001bd8:	20000360 	.word	0x20000360
 8001bdc:	200003f8 	.word	0x200003f8
 8001be0:	200003f9 	.word	0x200003f9
 8001be4:	200003fc 	.word	0x200003fc
 8001be8:	200003f4 	.word	0x200003f4
 8001bec:	200003cc 	.word	0x200003cc
 8001bf0:	200003d4 	.word	0x200003d4

08001bf4 <recepcionCommand>:

//----------------------------Inicio de la definicion de las funciones de los comandos----------------------------------------

//Funcion que recibe los caracteres del comando recibido
void recepcionCommand(void)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	af00      	add	r7, sp, #0
	if(charRead == '@')
 8001bf8:	4b11      	ldr	r3, [pc, #68]	; (8001c40 <recepcionCommand+0x4c>)
 8001bfa:	781b      	ldrb	r3, [r3, #0]
 8001bfc:	2b40      	cmp	r3, #64	; 0x40
 8001bfe:	d10c      	bne.n	8001c1a <recepcionCommand+0x26>
	{
		//Almacenamos el elemento nulo
		bufferRecepcion[counterRecepcion] = '\0';
 8001c00:	4b10      	ldr	r3, [pc, #64]	; (8001c44 <recepcionCommand+0x50>)
 8001c02:	781b      	ldrb	r3, [r3, #0]
 8001c04:	461a      	mov	r2, r3
 8001c06:	4b10      	ldr	r3, [pc, #64]	; (8001c48 <recepcionCommand+0x54>)
 8001c08:	2100      	movs	r1, #0
 8001c0a:	5499      	strb	r1, [r3, r2]
		//Establecemos la bandera como alta
		commandComplete = 1;
 8001c0c:	4b0f      	ldr	r3, [pc, #60]	; (8001c4c <recepcionCommand+0x58>)
 8001c0e:	2201      	movs	r2, #1
 8001c10:	701a      	strb	r2, [r3, #0]
		//Reiniciamos la variable
		counterRecepcion = 0;
 8001c12:	4b0c      	ldr	r3, [pc, #48]	; (8001c44 <recepcionCommand+0x50>)
 8001c14:	2200      	movs	r2, #0
 8001c16:	701a      	strb	r2, [r3, #0]
		//Aumentamos en uno la posicion del arreglo
		counterRecepcion++;
		//Reiniciamos la variable
	}

}
 8001c18:	e00c      	b.n	8001c34 <recepcionCommand+0x40>
		bufferRecepcion[counterRecepcion] = charRead;
 8001c1a:	4b0a      	ldr	r3, [pc, #40]	; (8001c44 <recepcionCommand+0x50>)
 8001c1c:	781b      	ldrb	r3, [r3, #0]
 8001c1e:	461a      	mov	r2, r3
 8001c20:	4b07      	ldr	r3, [pc, #28]	; (8001c40 <recepcionCommand+0x4c>)
 8001c22:	7819      	ldrb	r1, [r3, #0]
 8001c24:	4b08      	ldr	r3, [pc, #32]	; (8001c48 <recepcionCommand+0x54>)
 8001c26:	5499      	strb	r1, [r3, r2]
		counterRecepcion++;
 8001c28:	4b06      	ldr	r3, [pc, #24]	; (8001c44 <recepcionCommand+0x50>)
 8001c2a:	781b      	ldrb	r3, [r3, #0]
 8001c2c:	3301      	adds	r3, #1
 8001c2e:	b2da      	uxtb	r2, r3
 8001c30:	4b04      	ldr	r3, [pc, #16]	; (8001c44 <recepcionCommand+0x50>)
 8001c32:	701a      	strb	r2, [r3, #0]
}
 8001c34:	bf00      	nop
 8001c36:	46bd      	mov	sp, r7
 8001c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3c:	4770      	bx	lr
 8001c3e:	bf00      	nop
 8001c40:	20000000 	.word	0x20000000
 8001c44:	20000408 	.word	0x20000408
 8001c48:	2000040c 	.word	0x2000040c
 8001c4c:	2000000c 	.word	0x2000000c

08001c50 <runCommand>:

//Funcion que ejecuta el comando ingresando
void runCommand(char *prtcommand)
{
 8001c50:	b590      	push	{r4, r7, lr}
 8001c52:	b09b      	sub	sp, #108	; 0x6c
 8001c54:	af04      	add	r7, sp, #16
 8001c56:	6078      	str	r0, [r7, #4]
	//Variables para almacenar los elmentos que entrega el comando luego de ser divididos por la funcion sscanf
	char cmd[64]= {0};
 8001c58:	2300      	movs	r3, #0
 8001c5a:	61bb      	str	r3, [r7, #24]
 8001c5c:	f107 031c 	add.w	r3, r7, #28
 8001c60:	223c      	movs	r2, #60	; 0x3c
 8001c62:	2100      	movs	r1, #0
 8001c64:	4618      	mov	r0, r3
 8001c66:	f003 f9b9 	bl	8004fdc <memset>
	int firtsParameter = 0;
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	617b      	str	r3, [r7, #20]
	int secondParameter = 0;
 8001c6e:	2300      	movs	r3, #0
 8001c70:	613b      	str	r3, [r7, #16]
	int thirdParameter = 0;
 8001c72:	2300      	movs	r3, #0
 8001c74:	60fb      	str	r3, [r7, #12]
	int forthParameter = 0;
 8001c76:	2300      	movs	r3, #0
 8001c78:	60bb      	str	r3, [r7, #8]
	//char bufferMsg[64]= {0};

	//Funcion que lee la cadena de caracteres y la divide en los elementos definidos
	sscanf(prtcommand, "%s %u %u %u %u", cmd, &firtsParameter, &secondParameter, &thirdParameter, &forthParameter);
 8001c7a:	f107 0114 	add.w	r1, r7, #20
 8001c7e:	f107 0218 	add.w	r2, r7, #24
 8001c82:	f107 0308 	add.w	r3, r7, #8
 8001c86:	9302      	str	r3, [sp, #8]
 8001c88:	f107 030c 	add.w	r3, r7, #12
 8001c8c:	9301      	str	r3, [sp, #4]
 8001c8e:	f107 0310 	add.w	r3, r7, #16
 8001c92:	9300      	str	r3, [sp, #0]
 8001c94:	460b      	mov	r3, r1
 8001c96:	499a      	ldr	r1, [pc, #616]	; (8001f00 <runCommand+0x2b0>)
 8001c98:	6878      	ldr	r0, [r7, #4]
 8001c9a:	f004 f847 	bl	8005d2c <siscanf>

	//Imprime lista que muestra los comandos que tiene el dispositivo
	if(strcmp(cmd, "help")==0)
 8001c9e:	f107 0318 	add.w	r3, r7, #24
 8001ca2:	4998      	ldr	r1, [pc, #608]	; (8001f04 <runCommand+0x2b4>)
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	f7fe fa9b 	bl	80001e0 <strcmp>
 8001caa:	4603      	mov	r3, r0
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d128      	bne.n	8001d02 <runCommand+0xb2>
	{
		writeMsgForTXE(&handler_USART_USB, "Help Menu: \n");
 8001cb0:	4995      	ldr	r1, [pc, #596]	; (8001f08 <runCommand+0x2b8>)
 8001cb2:	4896      	ldr	r0, [pc, #600]	; (8001f0c <runCommand+0x2bc>)
 8001cb4:	f002 ff60 	bl	8004b78 <writeMsgForTXE>
		writeMsgForTXE(&handler_USART_USB, "1) help  ---Imprime lista de comandos. \n");
 8001cb8:	4995      	ldr	r1, [pc, #596]	; (8001f10 <runCommand+0x2c0>)
 8001cba:	4894      	ldr	r0, [pc, #592]	; (8001f0c <runCommand+0x2bc>)
 8001cbc:	f002 ff5c 	bl	8004b78 <writeMsgForTXE>
		writeMsgForTXE(&handler_USART_USB, "2) frequency # --- Cambiar el valor de la frecuenencia de las pruebas, [HZ] \n");
 8001cc0:	4994      	ldr	r1, [pc, #592]	; (8001f14 <runCommand+0x2c4>)
 8001cc2:	4892      	ldr	r0, [pc, #584]	; (8001f0c <runCommand+0x2bc>)
 8001cc4:	f002 ff58 	bl	8004b78 <writeMsgForTXE>
		writeMsgForTXE(&handler_USART_USB, "3) line # # ---Inicia Linea recta, #: dist [mm], #: dutty de estabilidad \n");
 8001cc8:	4993      	ldr	r1, [pc, #588]	; (8001f18 <runCommand+0x2c8>)
 8001cca:	4890      	ldr	r0, [pc, #576]	; (8001f0c <runCommand+0x2bc>)
 8001ccc:	f002 ff54 	bl	8004b78 <writeMsgForTXE>
		writeMsgForTXE(&handler_USART_USB, "4) turn # # # # ---Iniciamos el giro del robot #: ang #:dir #:dutty_R \n");
 8001cd0:	4992      	ldr	r1, [pc, #584]	; (8001f1c <runCommand+0x2cc>)
 8001cd2:	488e      	ldr	r0, [pc, #568]	; (8001f0c <runCommand+0x2bc>)
 8001cd4:	f002 ff50 	bl	8004b78 <writeMsgForTXE>
		writeMsgForTXE(&handler_USART_USB, "5) start # # # # ---Inicia movimiento, #: perTC [ms], #: dutty_L, #dutty_R, #: freqTP [Hz] \n");
 8001cd8:	4991      	ldr	r1, [pc, #580]	; (8001f20 <runCommand+0x2d0>)
 8001cda:	488c      	ldr	r0, [pc, #560]	; (8001f0c <runCommand+0x2bc>)
 8001cdc:	f002 ff4c 	bl	8004b78 <writeMsgForTXE>
		writeMsgForTXE(&handler_USART_USB, "6) reaction # # # ---Inicia Curva de reaccion,#: perTC [ms], #: dutty_L y dutty_R, #: freqTP [Hz] \n");
 8001ce0:	4990      	ldr	r1, [pc, #576]	; (8001f24 <runCommand+0x2d4>)
 8001ce2:	488a      	ldr	r0, [pc, #552]	; (8001f0c <runCommand+0x2bc>)
 8001ce4:	f002 ff48 	bl	8004b78 <writeMsgForTXE>
		writeMsgForTXE(&handler_USART_USB, "7) stop ---Para el estudio en medio de la ejecucion \n");
 8001ce8:	498f      	ldr	r1, [pc, #572]	; (8001f28 <runCommand+0x2d8>)
 8001cea:	4888      	ldr	r0, [pc, #544]	; (8001f0c <runCommand+0x2bc>)
 8001cec:	f002 ff44 	bl	8004b78 <writeMsgForTXE>
		writeMsgForTXE(&handler_USART_USB, "0) const # # # ---Constantes del PID #: L,k,tau \n");
 8001cf0:	498e      	ldr	r1, [pc, #568]	; (8001f2c <runCommand+0x2dc>)
 8001cf2:	4886      	ldr	r0, [pc, #536]	; (8001f0c <runCommand+0x2bc>)
 8001cf4:	f002 ff40 	bl	8004b78 <writeMsgForTXE>
		writeMsgForTXE(&handler_USART_USB, "0) equation # #  ---Constantes de la ecuacion lineal #: m,b  591.91-->59191 \n");
 8001cf8:	498d      	ldr	r1, [pc, #564]	; (8001f30 <runCommand+0x2e0>)
 8001cfa:	4884      	ldr	r0, [pc, #528]	; (8001f0c <runCommand+0x2bc>)
 8001cfc:	f002 ff3c 	bl	8004b78 <writeMsgForTXE>
		//Se imprime que el comando no fue valido
		writeMsgForTXE(&handler_USART_USB, "Comando no correcto \n");
	}


}
 8001d00:	e187      	b.n	8002012 <runCommand+0x3c2>
	else if (strcmp(cmd, "frequency") == 0)
 8001d02:	f107 0318 	add.w	r3, r7, #24
 8001d06:	498b      	ldr	r1, [pc, #556]	; (8001f34 <runCommand+0x2e4>)
 8001d08:	4618      	mov	r0, r3
 8001d0a:	f7fe fa69 	bl	80001e0 <strcmp>
 8001d0e:	4603      	mov	r3, r0
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d107      	bne.n	8001d24 <runCommand+0xd4>
		frequency_PWM_Motor = 100000/firtsParameter;
 8001d14:	697b      	ldr	r3, [r7, #20]
 8001d16:	4a88      	ldr	r2, [pc, #544]	; (8001f38 <runCommand+0x2e8>)
 8001d18:	fb92 f3f3 	sdiv	r3, r2, r3
 8001d1c:	b29a      	uxth	r2, r3
 8001d1e:	4b87      	ldr	r3, [pc, #540]	; (8001f3c <runCommand+0x2ec>)
 8001d20:	801a      	strh	r2, [r3, #0]
}
 8001d22:	e176      	b.n	8002012 <runCommand+0x3c2>
	else if (strcmp(cmd, "line") == 0)
 8001d24:	f107 0318 	add.w	r3, r7, #24
 8001d28:	4985      	ldr	r1, [pc, #532]	; (8001f40 <runCommand+0x2f0>)
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	f7fe fa58 	bl	80001e0 <strcmp>
 8001d30:	4603      	mov	r3, r0
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d141      	bne.n	8001dba <runCommand+0x16a>
		periodo_TIMER_Count = Ts;
 8001d36:	4b83      	ldr	r3, [pc, #524]	; (8001f44 <runCommand+0x2f4>)
 8001d38:	edd3 7a00 	vldr	s15, [r3]
 8001d3c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001d40:	ee17 3a90 	vmov	r3, s15
 8001d44:	b29a      	uxth	r2, r3
 8001d46:	4b80      	ldr	r3, [pc, #512]	; (8001f48 <runCommand+0x2f8>)
 8001d48:	801a      	strh	r2, [r3, #0]
		distance = firtsParameter;
 8001d4a:	697b      	ldr	r3, [r7, #20]
 8001d4c:	b29a      	uxth	r2, r3
 8001d4e:	4b7f      	ldr	r3, [pc, #508]	; (8001f4c <runCommand+0x2fc>)
 8001d50:	801a      	strh	r2, [r3, #0]
		setpoint = secondParameter;
 8001d52:	693b      	ldr	r3, [r7, #16]
 8001d54:	ee07 3a90 	vmov	s15, r3
 8001d58:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d5c:	4b7c      	ldr	r3, [pc, #496]	; (8001f50 <runCommand+0x300>)
 8001d5e:	edc3 7a00 	vstr	s15, [r3]
		handler_Motor_L.parametersMotor.e = handler_Motor_L.parametersMotor.e_1 = handler_Motor_L.parametersMotor.e_2 = 0;
 8001d62:	4b7c      	ldr	r3, [pc, #496]	; (8001f54 <runCommand+0x304>)
 8001d64:	f04f 0200 	mov.w	r2, #0
 8001d68:	611a      	str	r2, [r3, #16]
 8001d6a:	4b7a      	ldr	r3, [pc, #488]	; (8001f54 <runCommand+0x304>)
 8001d6c:	691b      	ldr	r3, [r3, #16]
 8001d6e:	4a79      	ldr	r2, [pc, #484]	; (8001f54 <runCommand+0x304>)
 8001d70:	60d3      	str	r3, [r2, #12]
 8001d72:	4b78      	ldr	r3, [pc, #480]	; (8001f54 <runCommand+0x304>)
 8001d74:	68db      	ldr	r3, [r3, #12]
 8001d76:	4a77      	ldr	r2, [pc, #476]	; (8001f54 <runCommand+0x304>)
 8001d78:	6093      	str	r3, [r2, #8]
		handler_Motor_R.parametersMotor.e = handler_Motor_R.parametersMotor.e_1 = handler_Motor_R.parametersMotor.e_2 = 0;
 8001d7a:	4b77      	ldr	r3, [pc, #476]	; (8001f58 <runCommand+0x308>)
 8001d7c:	f04f 0200 	mov.w	r2, #0
 8001d80:	611a      	str	r2, [r3, #16]
 8001d82:	4b75      	ldr	r3, [pc, #468]	; (8001f58 <runCommand+0x308>)
 8001d84:	691b      	ldr	r3, [r3, #16]
 8001d86:	4a74      	ldr	r2, [pc, #464]	; (8001f58 <runCommand+0x308>)
 8001d88:	60d3      	str	r3, [r2, #12]
 8001d8a:	4b73      	ldr	r3, [pc, #460]	; (8001f58 <runCommand+0x308>)
 8001d8c:	68db      	ldr	r3, [r3, #12]
 8001d8e:	4a72      	ldr	r2, [pc, #456]	; (8001f58 <runCommand+0x308>)
 8001d90:	6093      	str	r3, [r2, #8]
		config_motor(1, periodo_TIMER_Count,  setpoint, setpoint, frequency_PWM_Motor);//Tipo de Estudio, periodo [ms], por dutty L, por dutty R, fre pwm [hz]
 8001d92:	4b6d      	ldr	r3, [pc, #436]	; (8001f48 <runCommand+0x2f8>)
 8001d94:	881b      	ldrh	r3, [r3, #0]
 8001d96:	4619      	mov	r1, r3
 8001d98:	4b6d      	ldr	r3, [pc, #436]	; (8001f50 <runCommand+0x300>)
 8001d9a:	edd3 7a00 	vldr	s15, [r3]
 8001d9e:	4b6c      	ldr	r3, [pc, #432]	; (8001f50 <runCommand+0x300>)
 8001da0:	ed93 7a00 	vldr	s14, [r3]
 8001da4:	4b65      	ldr	r3, [pc, #404]	; (8001f3c <runCommand+0x2ec>)
 8001da6:	881b      	ldrh	r3, [r3, #0]
 8001da8:	461a      	mov	r2, r3
 8001daa:	eef0 0a47 	vmov.f32	s1, s14
 8001dae:	eeb0 0a67 	vmov.f32	s0, s15
 8001db2:	2001      	movs	r0, #1
 8001db4:	f000 fa48 	bl	8002248 <config_motor>
}
 8001db8:	e12b      	b.n	8002012 <runCommand+0x3c2>
	else if (strcmp(cmd, "turn") == 0)
 8001dba:	f107 0318 	add.w	r3, r7, #24
 8001dbe:	4967      	ldr	r1, [pc, #412]	; (8001f5c <runCommand+0x30c>)
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	f7fe fa0d 	bl	80001e0 <strcmp>
 8001dc6:	4603      	mov	r3, r0
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d160      	bne.n	8001e8e <runCommand+0x23e>
		flag_turn = secondParameter;
 8001dcc:	693b      	ldr	r3, [r7, #16]
 8001dce:	b2da      	uxtb	r2, r3
 8001dd0:	4b63      	ldr	r3, [pc, #396]	; (8001f60 <runCommand+0x310>)
 8001dd2:	701a      	strb	r2, [r3, #0]
		if(flag_turn==1)
 8001dd4:	4b62      	ldr	r3, [pc, #392]	; (8001f60 <runCommand+0x310>)
 8001dd6:	781b      	ldrb	r3, [r3, #0]
 8001dd8:	2b01      	cmp	r3, #1
 8001dda:	d113      	bne.n	8001e04 <runCommand+0x1b4>
			limit_count_turn = (b/DR)*((Ce*firtsParameter)/(2*180));
 8001ddc:	697b      	ldr	r3, [r7, #20]
 8001dde:	4a61      	ldr	r2, [pc, #388]	; (8001f64 <runCommand+0x314>)
 8001de0:	fb82 1203 	smull	r1, r2, r2, r3
 8001de4:	17db      	asrs	r3, r3, #31
 8001de6:	1ad3      	subs	r3, r2, r3
 8001de8:	b29b      	uxth	r3, r3
 8001dea:	005b      	lsls	r3, r3, #1
 8001dec:	b29a      	uxth	r2, r3
 8001dee:	4b5e      	ldr	r3, [pc, #376]	; (8001f68 <runCommand+0x318>)
 8001df0:	801a      	strh	r2, [r3, #0]
			handler_Motor_Execute = &handler_Motor_R;
 8001df2:	4b5e      	ldr	r3, [pc, #376]	; (8001f6c <runCommand+0x31c>)
 8001df4:	4a58      	ldr	r2, [pc, #352]	; (8001f58 <runCommand+0x308>)
 8001df6:	601a      	str	r2, [r3, #0]
			updateDirMotor(handler_Motor_Execute);
 8001df8:	4b5c      	ldr	r3, [pc, #368]	; (8001f6c <runCommand+0x31c>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	f7ff f962 	bl	80010c6 <updateDirMotor>
 8001e02:	e012      	b.n	8001e2a <runCommand+0x1da>
			limit_count_turn = (b/DL)*((Ce*firtsParameter)/(2*180));
 8001e04:	697b      	ldr	r3, [r7, #20]
 8001e06:	4a57      	ldr	r2, [pc, #348]	; (8001f64 <runCommand+0x314>)
 8001e08:	fb82 1203 	smull	r1, r2, r2, r3
 8001e0c:	17db      	asrs	r3, r3, #31
 8001e0e:	1ad3      	subs	r3, r2, r3
 8001e10:	b29b      	uxth	r3, r3
 8001e12:	005b      	lsls	r3, r3, #1
 8001e14:	b29a      	uxth	r2, r3
 8001e16:	4b54      	ldr	r3, [pc, #336]	; (8001f68 <runCommand+0x318>)
 8001e18:	801a      	strh	r2, [r3, #0]
			handler_Motor_Execute = &handler_Motor_L;
 8001e1a:	4b54      	ldr	r3, [pc, #336]	; (8001f6c <runCommand+0x31c>)
 8001e1c:	4a4d      	ldr	r2, [pc, #308]	; (8001f54 <runCommand+0x304>)
 8001e1e:	601a      	str	r2, [r3, #0]
			updateDirMotor(handler_Motor_Execute);
 8001e20:	4b52      	ldr	r3, [pc, #328]	; (8001f6c <runCommand+0x31c>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	4618      	mov	r0, r3
 8001e26:	f7ff f94e 	bl	80010c6 <updateDirMotor>
		config_motor(2, periodo_TIMER_Count, 0.9234*((float) thirdParameter)-3, thirdParameter, frequency_PWM_Motor);//Tipo de Estudio, periodo [ms], por dutty L, por dutty R, fre pwm [hz]
 8001e2a:	4b47      	ldr	r3, [pc, #284]	; (8001f48 <runCommand+0x2f8>)
 8001e2c:	881b      	ldrh	r3, [r3, #0]
 8001e2e:	461c      	mov	r4, r3
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	ee07 3a90 	vmov	s15, r3
 8001e36:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e3a:	ee17 0a90 	vmov	r0, s15
 8001e3e:	f7fe fb9b 	bl	8000578 <__aeabi_f2d>
 8001e42:	a32d      	add	r3, pc, #180	; (adr r3, 8001ef8 <runCommand+0x2a8>)
 8001e44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e48:	f7fe fbee 	bl	8000628 <__aeabi_dmul>
 8001e4c:	4602      	mov	r2, r0
 8001e4e:	460b      	mov	r3, r1
 8001e50:	4610      	mov	r0, r2
 8001e52:	4619      	mov	r1, r3
 8001e54:	f04f 0200 	mov.w	r2, #0
 8001e58:	4b45      	ldr	r3, [pc, #276]	; (8001f70 <runCommand+0x320>)
 8001e5a:	f7fe fa2d 	bl	80002b8 <__aeabi_dsub>
 8001e5e:	4602      	mov	r2, r0
 8001e60:	460b      	mov	r3, r1
 8001e62:	4610      	mov	r0, r2
 8001e64:	4619      	mov	r1, r3
 8001e66:	f7fe fed7 	bl	8000c18 <__aeabi_d2f>
 8001e6a:	4601      	mov	r1, r0
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	ee07 3a90 	vmov	s15, r3
 8001e72:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e76:	4b31      	ldr	r3, [pc, #196]	; (8001f3c <runCommand+0x2ec>)
 8001e78:	881b      	ldrh	r3, [r3, #0]
 8001e7a:	461a      	mov	r2, r3
 8001e7c:	eef0 0a67 	vmov.f32	s1, s15
 8001e80:	ee00 1a10 	vmov	s0, r1
 8001e84:	4621      	mov	r1, r4
 8001e86:	2002      	movs	r0, #2
 8001e88:	f000 f9de 	bl	8002248 <config_motor>
}
 8001e8c:	e0c1      	b.n	8002012 <runCommand+0x3c2>
	else if (strcmp(cmd, "start") == 0)
 8001e8e:	f107 0318 	add.w	r3, r7, #24
 8001e92:	4938      	ldr	r1, [pc, #224]	; (8001f74 <runCommand+0x324>)
 8001e94:	4618      	mov	r0, r3
 8001e96:	f7fe f9a3 	bl	80001e0 <strcmp>
 8001e9a:	4603      	mov	r3, r0
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d16f      	bne.n	8001f80 <runCommand+0x330>
		periodo_TIMER_Count = firtsParameter;
 8001ea0:	697b      	ldr	r3, [r7, #20]
 8001ea2:	b29a      	uxth	r2, r3
 8001ea4:	4b28      	ldr	r3, [pc, #160]	; (8001f48 <runCommand+0x2f8>)
 8001ea6:	801a      	strh	r2, [r3, #0]
		config_motor(3, periodo_TIMER_Count,  (secondParameter/100), (thirdParameter/100), forthParameter);//Tipo de Estudio, periodo [ms], por dutty L, por dutty R, fre pwm [hz]
 8001ea8:	4b27      	ldr	r3, [pc, #156]	; (8001f48 <runCommand+0x2f8>)
 8001eaa:	881b      	ldrh	r3, [r3, #0]
 8001eac:	4619      	mov	r1, r3
 8001eae:	693b      	ldr	r3, [r7, #16]
 8001eb0:	4a31      	ldr	r2, [pc, #196]	; (8001f78 <runCommand+0x328>)
 8001eb2:	fb82 0203 	smull	r0, r2, r2, r3
 8001eb6:	1152      	asrs	r2, r2, #5
 8001eb8:	17db      	asrs	r3, r3, #31
 8001eba:	1ad3      	subs	r3, r2, r3
 8001ebc:	ee07 3a90 	vmov	s15, r3
 8001ec0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	4a2c      	ldr	r2, [pc, #176]	; (8001f78 <runCommand+0x328>)
 8001ec8:	fb82 0203 	smull	r0, r2, r2, r3
 8001ecc:	1152      	asrs	r2, r2, #5
 8001ece:	17db      	asrs	r3, r3, #31
 8001ed0:	1ad3      	subs	r3, r2, r3
 8001ed2:	ee07 3a10 	vmov	s14, r3
 8001ed6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001eda:	68bb      	ldr	r3, [r7, #8]
 8001edc:	461a      	mov	r2, r3
 8001ede:	eef0 0a47 	vmov.f32	s1, s14
 8001ee2:	eeb0 0a67 	vmov.f32	s0, s15
 8001ee6:	2003      	movs	r0, #3
 8001ee8:	f000 f9ae 	bl	8002248 <config_motor>
		writeMsgForTXE(&handler_USART_USB, "Inicio conteo... \n");
 8001eec:	4923      	ldr	r1, [pc, #140]	; (8001f7c <runCommand+0x32c>)
 8001eee:	4807      	ldr	r0, [pc, #28]	; (8001f0c <runCommand+0x2bc>)
 8001ef0:	f002 fe42 	bl	8004b78 <writeMsgForTXE>
}
 8001ef4:	e08d      	b.n	8002012 <runCommand+0x3c2>
 8001ef6:	bf00      	nop
 8001ef8:	28240b78 	.word	0x28240b78
 8001efc:	3fed8c7e 	.word	0x3fed8c7e
 8001f00:	0800b7ac 	.word	0x0800b7ac
 8001f04:	0800b7bc 	.word	0x0800b7bc
 8001f08:	0800b7c4 	.word	0x0800b7c4
 8001f0c:	20000268 	.word	0x20000268
 8001f10:	0800b7d4 	.word	0x0800b7d4
 8001f14:	0800b800 	.word	0x0800b800
 8001f18:	0800b850 	.word	0x0800b850
 8001f1c:	0800b89c 	.word	0x0800b89c
 8001f20:	0800b8e4 	.word	0x0800b8e4
 8001f24:	0800b944 	.word	0x0800b944
 8001f28:	0800b9a8 	.word	0x0800b9a8
 8001f2c:	0800b9e0 	.word	0x0800b9e0
 8001f30:	0800ba14 	.word	0x0800ba14
 8001f34:	0800ba64 	.word	0x0800ba64
 8001f38:	000186a0 	.word	0x000186a0
 8001f3c:	2000000a 	.word	0x2000000a
 8001f40:	0800ba70 	.word	0x0800ba70
 8001f44:	20000004 	.word	0x20000004
 8001f48:	20000008 	.word	0x20000008
 8001f4c:	200003cc 	.word	0x200003cc
 8001f50:	200003d0 	.word	0x200003d0
 8001f54:	20000360 	.word	0x20000360
 8001f58:	200002e4 	.word	0x200002e4
 8001f5c:	0800ba78 	.word	0x0800ba78
 8001f60:	200003f9 	.word	0x200003f9
 8001f64:	55555556 	.word	0x55555556
 8001f68:	200003fc 	.word	0x200003fc
 8001f6c:	200003f4 	.word	0x200003f4
 8001f70:	40080000 	.word	0x40080000
 8001f74:	0800ba80 	.word	0x0800ba80
 8001f78:	51eb851f 	.word	0x51eb851f
 8001f7c:	0800ba88 	.word	0x0800ba88
	else if (strcmp(cmd, "reaction") == 0)
 8001f80:	f107 0318 	add.w	r3, r7, #24
 8001f84:	4925      	ldr	r1, [pc, #148]	; (800201c <runCommand+0x3cc>)
 8001f86:	4618      	mov	r0, r3
 8001f88:	f7fe f92a 	bl	80001e0 <strcmp>
 8001f8c:	4603      	mov	r3, r0
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d12a      	bne.n	8001fe8 <runCommand+0x398>
		periodo_TIMER_Count = firtsParameter;
 8001f92:	697b      	ldr	r3, [r7, #20]
 8001f94:	b29a      	uxth	r2, r3
 8001f96:	4b22      	ldr	r3, [pc, #136]	; (8002020 <runCommand+0x3d0>)
 8001f98:	801a      	strh	r2, [r3, #0]
		config_motor(4, periodo_TIMER_Count, (secondParameter/100), (secondParameter/100), thirdParameter);//Tipo de Estudio, periodo [ms], por dutty L, por dutty R, fre pwm [hz]
 8001f9a:	4b21      	ldr	r3, [pc, #132]	; (8002020 <runCommand+0x3d0>)
 8001f9c:	881b      	ldrh	r3, [r3, #0]
 8001f9e:	4619      	mov	r1, r3
 8001fa0:	693b      	ldr	r3, [r7, #16]
 8001fa2:	4a20      	ldr	r2, [pc, #128]	; (8002024 <runCommand+0x3d4>)
 8001fa4:	fb82 0203 	smull	r0, r2, r2, r3
 8001fa8:	1152      	asrs	r2, r2, #5
 8001faa:	17db      	asrs	r3, r3, #31
 8001fac:	1ad3      	subs	r3, r2, r3
 8001fae:	ee07 3a90 	vmov	s15, r3
 8001fb2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001fb6:	693b      	ldr	r3, [r7, #16]
 8001fb8:	4a1a      	ldr	r2, [pc, #104]	; (8002024 <runCommand+0x3d4>)
 8001fba:	fb82 0203 	smull	r0, r2, r2, r3
 8001fbe:	1152      	asrs	r2, r2, #5
 8001fc0:	17db      	asrs	r3, r3, #31
 8001fc2:	1ad3      	subs	r3, r2, r3
 8001fc4:	ee07 3a10 	vmov	s14, r3
 8001fc8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	461a      	mov	r2, r3
 8001fd0:	eef0 0a47 	vmov.f32	s1, s14
 8001fd4:	eeb0 0a67 	vmov.f32	s0, s15
 8001fd8:	2004      	movs	r0, #4
 8001fda:	f000 f935 	bl	8002248 <config_motor>
		writeMsgForTXE(&handler_USART_USB, "Inicio conteo... \n");
 8001fde:	4912      	ldr	r1, [pc, #72]	; (8002028 <runCommand+0x3d8>)
 8001fe0:	4812      	ldr	r0, [pc, #72]	; (800202c <runCommand+0x3dc>)
 8001fe2:	f002 fdc9 	bl	8004b78 <writeMsgForTXE>
}
 8001fe6:	e014      	b.n	8002012 <runCommand+0x3c2>
	else if (strcmp(cmd, "stop") == 0)
 8001fe8:	f107 0318 	add.w	r3, r7, #24
 8001fec:	4910      	ldr	r1, [pc, #64]	; (8002030 <runCommand+0x3e0>)
 8001fee:	4618      	mov	r0, r3
 8001ff0:	f7fe f8f6 	bl	80001e0 <strcmp>
 8001ff4:	4603      	mov	r3, r0
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d107      	bne.n	800200a <runCommand+0x3ba>
		status_motor(RESET);
 8001ffa:	2000      	movs	r0, #0
 8001ffc:	f000 f8a8 	bl	8002150 <status_motor>
		writeMsgForTXE(&handler_USART_USB, "Estudio finalizado \n");
 8002000:	490c      	ldr	r1, [pc, #48]	; (8002034 <runCommand+0x3e4>)
 8002002:	480a      	ldr	r0, [pc, #40]	; (800202c <runCommand+0x3dc>)
 8002004:	f002 fdb8 	bl	8004b78 <writeMsgForTXE>
}
 8002008:	e003      	b.n	8002012 <runCommand+0x3c2>
		writeMsgForTXE(&handler_USART_USB, "Comando no correcto \n");
 800200a:	490b      	ldr	r1, [pc, #44]	; (8002038 <runCommand+0x3e8>)
 800200c:	4807      	ldr	r0, [pc, #28]	; (800202c <runCommand+0x3dc>)
 800200e:	f002 fdb3 	bl	8004b78 <writeMsgForTXE>
}
 8002012:	bf00      	nop
 8002014:	375c      	adds	r7, #92	; 0x5c
 8002016:	46bd      	mov	sp, r7
 8002018:	bd90      	pop	{r4, r7, pc}
 800201a:	bf00      	nop
 800201c:	0800ba9c 	.word	0x0800ba9c
 8002020:	20000008 	.word	0x20000008
 8002024:	51eb851f 	.word	0x51eb851f
 8002028:	0800ba88 	.word	0x0800ba88
 800202c:	20000268 	.word	0x20000268
 8002030:	0800baa8 	.word	0x0800baa8
 8002034:	0800bab0 	.word	0x0800bab0
 8002038:	0800bac8 	.word	0x0800bac8

0800203c <PID>:
//----------------------------Inicio de la definicion de las funciones-----------------------------------------


//--------------------PID----------------------
void PID(Motor_Handler_t *ptrMotorHandler, float measure)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	b086      	sub	sp, #24
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
 8002044:	ed87 0a00 	vstr	s0, [r7]
	//Calculo del error
	ptrMotorHandler->parametersMotor.e = setpoint-measure;
 8002048:	4b3e      	ldr	r3, [pc, #248]	; (8002144 <PID+0x108>)
 800204a:	ed93 7a00 	vldr	s14, [r3]
 800204e:	edd7 7a00 	vldr	s15, [r7]
 8002052:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	edc3 7a02 	vstr	s15, [r3, #8]
    // Controle PID
	float p0 =  ptrMotorHandler->parametersMotor.q0*ptrMotorHandler->parametersMotor.e;
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	ed93 7a05 	vldr	s14, [r3, #20]
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	edd3 7a02 	vldr	s15, [r3, #8]
 8002068:	ee67 7a27 	vmul.f32	s15, s14, s15
 800206c:	edc7 7a05 	vstr	s15, [r7, #20]
	float p1 =  ptrMotorHandler->parametersMotor.q1*ptrMotorHandler->parametersMotor.e_1;
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	ed93 7a06 	vldr	s14, [r3, #24]
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	edd3 7a03 	vldr	s15, [r3, #12]
 800207c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002080:	edc7 7a04 	vstr	s15, [r7, #16]
	float p2 =  ptrMotorHandler->parametersMotor.q2*ptrMotorHandler->parametersMotor.e_2;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	ed93 7a07 	vldr	s14, [r3, #28]
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	edd3 7a04 	vldr	s15, [r3, #16]
 8002090:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002094:	edc7 7a03 	vstr	s15, [r7, #12]
	ptrMotorHandler->parametersMotor.u = ptrMotorHandler->parametersMotor.u_1 + p0 + p1 + p2;        //Ley del controlador PID discreto
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	ed93 7a01 	vldr	s14, [r3, #4]
 800209e:	edd7 7a05 	vldr	s15, [r7, #20]
 80020a2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80020a6:	edd7 7a04 	vldr	s15, [r7, #16]
 80020aa:	ee37 7a27 	vadd.f32	s14, s14, s15
 80020ae:	edd7 7a03 	vldr	s15, [r7, #12]
 80020b2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	edc3 7a00 	vstr	s15, [r3]
    //Saturo la accion de control 'uT' en un tope maximo y minimo
    if (ptrMotorHandler->parametersMotor.u >= 100.0)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	edd3 7a00 	vldr	s15, [r3]
 80020c2:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8002148 <PID+0x10c>
 80020c6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80020ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020ce:	db03      	blt.n	80020d8 <PID+0x9c>
    {
    	ptrMotorHandler->parametersMotor.u = 100.0;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	4a1e      	ldr	r2, [pc, #120]	; (800214c <PID+0x110>)
 80020d4:	601a      	str	r2, [r3, #0]
 80020d6:	e00d      	b.n	80020f4 <PID+0xb8>
    }
    else if(ptrMotorHandler->parametersMotor.u <= 0.0)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	edd3 7a00 	vldr	s15, [r3]
 80020de:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80020e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020e6:	d804      	bhi.n	80020f2 <PID+0xb6>
    {
    	ptrMotorHandler->parametersMotor.u = 0.0;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	f04f 0200 	mov.w	r2, #0
 80020ee:	601a      	str	r2, [r3, #0]
 80020f0:	e000      	b.n	80020f4 <PID+0xb8>
    }
    else
    {
    	__NOP();
 80020f2:	bf00      	nop
    }
     //Retorno a los valores reales
    ptrMotorHandler->parametersMotor.e_2 = ptrMotorHandler->parametersMotor.e_1;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	68da      	ldr	r2, [r3, #12]
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	611a      	str	r2, [r3, #16]
    ptrMotorHandler->parametersMotor.e_1 = ptrMotorHandler->parametersMotor.e;
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	689a      	ldr	r2, [r3, #8]
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	60da      	str	r2, [r3, #12]
    ptrMotorHandler->parametersMotor.u_1 = ptrMotorHandler->parametersMotor.u;
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681a      	ldr	r2, [r3, #0]
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	605a      	str	r2, [r3, #4]
    //Actualizamoe el valor del dutty
    if(ptrMotorHandler->parametersMotor.u>(setpoint-5))
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	ed93 7a00 	vldr	s14, [r3]
 8002112:	4b0c      	ldr	r3, [pc, #48]	; (8002144 <PID+0x108>)
 8002114:	edd3 7a00 	vldr	s15, [r3]
 8002118:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
 800211c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002120:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002124:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002128:	dc00      	bgt.n	800212c <PID+0xf0>
    {
    	updateDuttyMotor(ptrMotorHandler, ptrMotorHandler->parametersMotor.u);
    }
}
 800212a:	e007      	b.n	800213c <PID+0x100>
    	updateDuttyMotor(ptrMotorHandler, ptrMotorHandler->parametersMotor.u);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	edd3 7a00 	vldr	s15, [r3]
 8002132:	eeb0 0a67 	vmov.f32	s0, s15
 8002136:	6878      	ldr	r0, [r7, #4]
 8002138:	f7fe ffae 	bl	8001098 <updateDuttyMotor>
}
 800213c:	bf00      	nop
 800213e:	3718      	adds	r7, #24
 8002140:	46bd      	mov	sp, r7
 8002142:	bd80      	pop	{r7, pc}
 8002144:	200003d0 	.word	0x200003d0
 8002148:	42c80000 	.word	0x42c80000
 800214c:	42c80000 	.word	0x42c80000

08002150 <status_motor>:

void status_motor(uint8_t status)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b082      	sub	sp, #8
 8002154:	af00      	add	r7, sp, #0
 8002156:	4603      	mov	r3, r0
 8002158:	71fb      	strb	r3, [r7, #7]
	if(status == 1)
 800215a:	79fb      	ldrb	r3, [r7, #7]
 800215c:	2b01      	cmp	r3, #1
 800215e:	d138      	bne.n	80021d2 <status_motor+0x82>
	{
		//Activamos el motor
		statusInOutPWM(handler_Motor_L.phandlerPWM, CHANNEL_ENABLE);
 8002160:	4b35      	ldr	r3, [pc, #212]	; (8002238 <status_motor+0xe8>)
 8002162:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002164:	2101      	movs	r1, #1
 8002166:	4618      	mov	r0, r3
 8002168:	f002 f8fe 	bl	8004368 <statusInOutPWM>
		statusInOutPWM(handler_Motor_R.phandlerPWM, CHANNEL_ENABLE);
 800216c:	4b33      	ldr	r3, [pc, #204]	; (800223c <status_motor+0xec>)
 800216e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002170:	2101      	movs	r1, #1
 8002172:	4618      	mov	r0, r3
 8002174:	f002 f8f8 	bl	8004368 <statusInOutPWM>
		GPIO_writePin(handler_Motor_L.phandlerGPIOIN, (handler_Motor_L.configMotor.dir)&SET);
 8002178:	4b2f      	ldr	r3, [pc, #188]	; (8002238 <status_motor+0xe8>)
 800217a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800217c:	4b2e      	ldr	r3, [pc, #184]	; (8002238 <status_motor+0xe8>)
 800217e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002182:	f003 0301 	and.w	r3, r3, #1
 8002186:	b2db      	uxtb	r3, r3
 8002188:	4619      	mov	r1, r3
 800218a:	4610      	mov	r0, r2
 800218c:	f001 fe1c 	bl	8003dc8 <GPIO_writePin>
		GPIO_writePin(handler_Motor_R.phandlerGPIOIN, (handler_Motor_R.configMotor.dir)&SET);
 8002190:	4b2a      	ldr	r3, [pc, #168]	; (800223c <status_motor+0xec>)
 8002192:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002194:	4b29      	ldr	r3, [pc, #164]	; (800223c <status_motor+0xec>)
 8002196:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800219a:	f003 0301 	and.w	r3, r3, #1
 800219e:	b2db      	uxtb	r3, r3
 80021a0:	4619      	mov	r1, r3
 80021a2:	4610      	mov	r0, r2
 80021a4:	f001 fe10 	bl	8003dc8 <GPIO_writePin>
		GPIO_writePin(handler_Motor_L.phandlerGPIOEN, RESET);
 80021a8:	4b23      	ldr	r3, [pc, #140]	; (8002238 <status_motor+0xe8>)
 80021aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021ac:	2100      	movs	r1, #0
 80021ae:	4618      	mov	r0, r3
 80021b0:	f001 fe0a 	bl	8003dc8 <GPIO_writePin>
		GPIO_writePin(handler_Motor_R.phandlerGPIOEN, RESET);
 80021b4:	4b21      	ldr	r3, [pc, #132]	; (800223c <status_motor+0xec>)
 80021b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021b8:	2100      	movs	r1, #0
 80021ba:	4618      	mov	r0, r3
 80021bc:	f001 fe04 	bl	8003dc8 <GPIO_writePin>
		//Activamos la interrupcion
		if(flag_motor!=2)
 80021c0:	4b1f      	ldr	r3, [pc, #124]	; (8002240 <status_motor+0xf0>)
 80021c2:	781b      	ldrb	r3, [r3, #0]
 80021c4:	2b02      	cmp	r3, #2
 80021c6:	d033      	beq.n	8002230 <status_motor+0xe0>
		{
			statusiInterruptionTimer(&handler_TIMER_Count, INTERRUPTION_ENABLE);
 80021c8:	2101      	movs	r1, #1
 80021ca:	481e      	ldr	r0, [pc, #120]	; (8002244 <status_motor+0xf4>)
 80021cc:	f000 fbba 	bl	8002944 <statusiInterruptionTimer>
		GPIO_writePin(handler_Motor_L.phandlerGPIOEN, SET);
		GPIO_writePin(handler_Motor_R.phandlerGPIOEN, SET);
		//Reiniciamos Bandera
		flag_motor = 0;
	}
}
 80021d0:	e02e      	b.n	8002230 <status_motor+0xe0>
		if(flag_motor!=2)
 80021d2:	4b1b      	ldr	r3, [pc, #108]	; (8002240 <status_motor+0xf0>)
 80021d4:	781b      	ldrb	r3, [r3, #0]
 80021d6:	2b02      	cmp	r3, #2
 80021d8:	d003      	beq.n	80021e2 <status_motor+0x92>
			statusiInterruptionTimer(&handler_TIMER_Count, INTERRUPTION_DISABLE);
 80021da:	2100      	movs	r1, #0
 80021dc:	4819      	ldr	r0, [pc, #100]	; (8002244 <status_motor+0xf4>)
 80021de:	f000 fbb1 	bl	8002944 <statusiInterruptionTimer>
		statusInOutPWM(handler_Motor_L.phandlerPWM, CHANNEL_DISABLE);
 80021e2:	4b15      	ldr	r3, [pc, #84]	; (8002238 <status_motor+0xe8>)
 80021e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80021e6:	2100      	movs	r1, #0
 80021e8:	4618      	mov	r0, r3
 80021ea:	f002 f8bd 	bl	8004368 <statusInOutPWM>
		statusInOutPWM(handler_Motor_R.phandlerPWM, CHANNEL_DISABLE);
 80021ee:	4b13      	ldr	r3, [pc, #76]	; (800223c <status_motor+0xec>)
 80021f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80021f2:	2100      	movs	r1, #0
 80021f4:	4618      	mov	r0, r3
 80021f6:	f002 f8b7 	bl	8004368 <statusInOutPWM>
		GPIO_writePin(handler_Motor_L.phandlerGPIOIN, (handler_Motor_L.configMotor.dir)&RESET);
 80021fa:	4b0f      	ldr	r3, [pc, #60]	; (8002238 <status_motor+0xe8>)
 80021fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021fe:	2100      	movs	r1, #0
 8002200:	4618      	mov	r0, r3
 8002202:	f001 fde1 	bl	8003dc8 <GPIO_writePin>
		GPIO_writePin(handler_Motor_R.phandlerGPIOIN, (handler_Motor_R.configMotor.dir)&RESET);
 8002206:	4b0d      	ldr	r3, [pc, #52]	; (800223c <status_motor+0xec>)
 8002208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800220a:	2100      	movs	r1, #0
 800220c:	4618      	mov	r0, r3
 800220e:	f001 fddb 	bl	8003dc8 <GPIO_writePin>
		GPIO_writePin(handler_Motor_L.phandlerGPIOEN, SET);
 8002212:	4b09      	ldr	r3, [pc, #36]	; (8002238 <status_motor+0xe8>)
 8002214:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002216:	2101      	movs	r1, #1
 8002218:	4618      	mov	r0, r3
 800221a:	f001 fdd5 	bl	8003dc8 <GPIO_writePin>
		GPIO_writePin(handler_Motor_R.phandlerGPIOEN, SET);
 800221e:	4b07      	ldr	r3, [pc, #28]	; (800223c <status_motor+0xec>)
 8002220:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002222:	2101      	movs	r1, #1
 8002224:	4618      	mov	r0, r3
 8002226:	f001 fdcf 	bl	8003dc8 <GPIO_writePin>
		flag_motor = 0;
 800222a:	4b05      	ldr	r3, [pc, #20]	; (8002240 <status_motor+0xf0>)
 800222c:	2200      	movs	r2, #0
 800222e:	701a      	strb	r2, [r3, #0]
}
 8002230:	bf00      	nop
 8002232:	3708      	adds	r7, #8
 8002234:	46bd      	mov	sp, r7
 8002236:	bd80      	pop	{r7, pc}
 8002238:	20000360 	.word	0x20000360
 800223c:	200002e4 	.word	0x200002e4
 8002240:	200003f8 	.word	0x200003f8
 8002244:	200003bc 	.word	0x200003bc

08002248 <config_motor>:

//Funcion para al configuracion de los motores
void config_motor(uint8_t status, int firth, float second, float third, int forth)  //Tipo de Estudio, periodo [ms], por dutty L, por dutty R, fre pwm [hz]
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b086      	sub	sp, #24
 800224c:	af00      	add	r7, sp, #0
 800224e:	4603      	mov	r3, r0
 8002250:	6139      	str	r1, [r7, #16]
 8002252:	ed87 0a03 	vstr	s0, [r7, #12]
 8002256:	edc7 0a02 	vstr	s1, [r7, #8]
 800225a:	607a      	str	r2, [r7, #4]
 800225c:	75fb      	strb	r3, [r7, #23]
	//Actualizacion de la frecuencia del timer
	updateFrequencyTimer(&handler_TIMER_Count, firth);
 800225e:	693b      	ldr	r3, [r7, #16]
 8002260:	b29b      	uxth	r3, r3
 8002262:	4619      	mov	r1, r3
 8002264:	4819      	ldr	r0, [pc, #100]	; (80022cc <config_motor+0x84>)
 8002266:	f000 fb8d 	bl	8002984 <updateFrequencyTimer>
	//Establecer valores
	handler_Motor_R.parametersMotor.count = 0;
 800226a:	4b19      	ldr	r3, [pc, #100]	; (80022d0 <config_motor+0x88>)
 800226c:	2200      	movs	r2, #0
 800226e:	841a      	strh	r2, [r3, #32]
	handler_Motor_L.parametersMotor.count = 0;
 8002270:	4b18      	ldr	r3, [pc, #96]	; (80022d4 <config_motor+0x8c>)
 8002272:	2200      	movs	r2, #0
 8002274:	841a      	strh	r2, [r3, #32]
	handler_Motor_R.parametersMotor.countCotinuous = 0;
 8002276:	4b16      	ldr	r3, [pc, #88]	; (80022d0 <config_motor+0x88>)
 8002278:	2200      	movs	r2, #0
 800227a:	625a      	str	r2, [r3, #36]	; 0x24
	handler_Motor_L.parametersMotor.countCotinuous = 0;
 800227c:	4b15      	ldr	r3, [pc, #84]	; (80022d4 <config_motor+0x8c>)
 800227e:	2200      	movs	r2, #0
 8002280:	625a      	str	r2, [r3, #36]	; 0x24
	//Establecemos valroes iniciales
	//timeBackR = timeBackL = getTicksUs();
	count_time = 0;
 8002282:	4b15      	ldr	r3, [pc, #84]	; (80022d8 <config_motor+0x90>)
 8002284:	2200      	movs	r2, #0
 8002286:	801a      	strh	r2, [r3, #0]
	//Actualizamos el valor del dutty y frecuencia
	value_period = 100000/forth;
 8002288:	4a14      	ldr	r2, [pc, #80]	; (80022dc <config_motor+0x94>)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	fb92 f3f3 	sdiv	r3, r2, r3
 8002290:	b29a      	uxth	r2, r3
 8002292:	4b13      	ldr	r3, [pc, #76]	; (80022e0 <config_motor+0x98>)
 8002294:	801a      	strh	r2, [r3, #0]
	updateFrequencyTimer(&handler_TIMER_Motor, value_period);
 8002296:	4b12      	ldr	r3, [pc, #72]	; (80022e0 <config_motor+0x98>)
 8002298:	881b      	ldrh	r3, [r3, #0]
 800229a:	4619      	mov	r1, r3
 800229c:	4811      	ldr	r0, [pc, #68]	; (80022e4 <config_motor+0x9c>)
 800229e:	f000 fb71 	bl	8002984 <updateFrequencyTimer>
	updateDuttyMotor(&handler_Motor_R, third);
 80022a2:	ed97 0a02 	vldr	s0, [r7, #8]
 80022a6:	480a      	ldr	r0, [pc, #40]	; (80022d0 <config_motor+0x88>)
 80022a8:	f7fe fef6 	bl	8001098 <updateDuttyMotor>
	updateDuttyMotor(&handler_Motor_L, second);
 80022ac:	ed97 0a03 	vldr	s0, [r7, #12]
 80022b0:	4808      	ldr	r0, [pc, #32]	; (80022d4 <config_motor+0x8c>)
 80022b2:	f7fe fef1 	bl	8001098 <updateDuttyMotor>
	//Cambio valor bandera
	flag_motor=status;
 80022b6:	4a0c      	ldr	r2, [pc, #48]	; (80022e8 <config_motor+0xa0>)
 80022b8:	7dfb      	ldrb	r3, [r7, #23]
 80022ba:	7013      	strb	r3, [r2, #0]
	//Iniciamos el study
	status_motor(SET);
 80022bc:	2001      	movs	r0, #1
 80022be:	f7ff ff47 	bl	8002150 <status_motor>
}
 80022c2:	bf00      	nop
 80022c4:	3718      	adds	r7, #24
 80022c6:	46bd      	mov	sp, r7
 80022c8:	bd80      	pop	{r7, pc}
 80022ca:	bf00      	nop
 80022cc:	200003bc 	.word	0x200003bc
 80022d0:	200002e4 	.word	0x200002e4
 80022d4:	20000360 	.word	0x20000360
 80022d8:	200003fa 	.word	0x200003fa
 80022dc:	000186a0 	.word	0x000186a0
 80022e0:	20000002 	.word	0x20000002
 80022e4:	200003ac 	.word	0x200003ac
 80022e8:	200003f8 	.word	0x200003f8

080022ec <constains_calculator>:


void constains_calculator(Motor_Handler_t *ptrMotorhandler,float k, float tau, float theta)   //k,tau,theta
{
 80022ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80022f0:	b088      	sub	sp, #32
 80022f2:	af00      	add	r7, sp, #0
 80022f4:	60f8      	str	r0, [r7, #12]
 80022f6:	ed87 0a02 	vstr	s0, [r7, #8]
 80022fa:	edc7 0a01 	vstr	s1, [r7, #4]
 80022fe:	ed87 1a00 	vstr	s2, [r7]
	   //Calculo de constantes de porcentaje, integracion y derivacion por metodo de Ziegler y Nichols
	   float kp=(1.2*tau)/(k*theta);
 8002302:	6878      	ldr	r0, [r7, #4]
 8002304:	f7fe f938 	bl	8000578 <__aeabi_f2d>
 8002308:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
 800230c:	4b6d      	ldr	r3, [pc, #436]	; (80024c4 <constains_calculator+0x1d8>)
 800230e:	f7fe f98b 	bl	8000628 <__aeabi_dmul>
 8002312:	4602      	mov	r2, r0
 8002314:	460b      	mov	r3, r1
 8002316:	4614      	mov	r4, r2
 8002318:	461d      	mov	r5, r3
 800231a:	ed97 7a02 	vldr	s14, [r7, #8]
 800231e:	edd7 7a00 	vldr	s15, [r7]
 8002322:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002326:	ee17 0a90 	vmov	r0, s15
 800232a:	f7fe f925 	bl	8000578 <__aeabi_f2d>
 800232e:	4602      	mov	r2, r0
 8002330:	460b      	mov	r3, r1
 8002332:	4620      	mov	r0, r4
 8002334:	4629      	mov	r1, r5
 8002336:	f7fe faa1 	bl	800087c <__aeabi_ddiv>
 800233a:	4602      	mov	r2, r0
 800233c:	460b      	mov	r3, r1
 800233e:	4610      	mov	r0, r2
 8002340:	4619      	mov	r1, r3
 8002342:	f7fe fc69 	bl	8000c18 <__aeabi_d2f>
 8002346:	4603      	mov	r3, r0
 8002348:	61fb      	str	r3, [r7, #28]
	   float ti=2.0*theta;
 800234a:	edd7 7a00 	vldr	s15, [r7]
 800234e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002352:	edc7 7a06 	vstr	s15, [r7, #24]
	   float td=0.5*theta;
 8002356:	edd7 7a00 	vldr	s15, [r7]
 800235a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800235e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002362:	edc7 7a05 	vstr	s15, [r7, #20]
	  //Calculo do controle PID digital
	   ptrMotorhandler->parametersMotor.q0 = kp*(1+Ts/(2.0*ti)+td/Ts);
 8002366:	69f8      	ldr	r0, [r7, #28]
 8002368:	f7fe f906 	bl	8000578 <__aeabi_f2d>
 800236c:	4604      	mov	r4, r0
 800236e:	460d      	mov	r5, r1
 8002370:	4b55      	ldr	r3, [pc, #340]	; (80024c8 <constains_calculator+0x1dc>)
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	4618      	mov	r0, r3
 8002376:	f7fe f8ff 	bl	8000578 <__aeabi_f2d>
 800237a:	4680      	mov	r8, r0
 800237c:	4689      	mov	r9, r1
 800237e:	69b8      	ldr	r0, [r7, #24]
 8002380:	f7fe f8fa 	bl	8000578 <__aeabi_f2d>
 8002384:	4602      	mov	r2, r0
 8002386:	460b      	mov	r3, r1
 8002388:	f7fd ff98 	bl	80002bc <__adddf3>
 800238c:	4602      	mov	r2, r0
 800238e:	460b      	mov	r3, r1
 8002390:	4640      	mov	r0, r8
 8002392:	4649      	mov	r1, r9
 8002394:	f7fe fa72 	bl	800087c <__aeabi_ddiv>
 8002398:	4602      	mov	r2, r0
 800239a:	460b      	mov	r3, r1
 800239c:	4610      	mov	r0, r2
 800239e:	4619      	mov	r1, r3
 80023a0:	f04f 0200 	mov.w	r2, #0
 80023a4:	4b49      	ldr	r3, [pc, #292]	; (80024cc <constains_calculator+0x1e0>)
 80023a6:	f7fd ff89 	bl	80002bc <__adddf3>
 80023aa:	4602      	mov	r2, r0
 80023ac:	460b      	mov	r3, r1
 80023ae:	4690      	mov	r8, r2
 80023b0:	4699      	mov	r9, r3
 80023b2:	4b45      	ldr	r3, [pc, #276]	; (80024c8 <constains_calculator+0x1dc>)
 80023b4:	edd3 7a00 	vldr	s15, [r3]
 80023b8:	ed97 7a05 	vldr	s14, [r7, #20]
 80023bc:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80023c0:	ee16 0a90 	vmov	r0, s13
 80023c4:	f7fe f8d8 	bl	8000578 <__aeabi_f2d>
 80023c8:	4602      	mov	r2, r0
 80023ca:	460b      	mov	r3, r1
 80023cc:	4640      	mov	r0, r8
 80023ce:	4649      	mov	r1, r9
 80023d0:	f7fd ff74 	bl	80002bc <__adddf3>
 80023d4:	4602      	mov	r2, r0
 80023d6:	460b      	mov	r3, r1
 80023d8:	4620      	mov	r0, r4
 80023da:	4629      	mov	r1, r5
 80023dc:	f7fe f924 	bl	8000628 <__aeabi_dmul>
 80023e0:	4602      	mov	r2, r0
 80023e2:	460b      	mov	r3, r1
 80023e4:	4610      	mov	r0, r2
 80023e6:	4619      	mov	r1, r3
 80023e8:	f7fe fc16 	bl	8000c18 <__aeabi_d2f>
 80023ec:	4602      	mov	r2, r0
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	615a      	str	r2, [r3, #20]
	   ptrMotorhandler->parametersMotor.q1 = -kp*(1-Ts/(2.0*ti)+(2.0*td)/Ts);
 80023f2:	edd7 7a07 	vldr	s15, [r7, #28]
 80023f6:	eef1 7a67 	vneg.f32	s15, s15
 80023fa:	ee17 3a90 	vmov	r3, s15
 80023fe:	4618      	mov	r0, r3
 8002400:	f7fe f8ba 	bl	8000578 <__aeabi_f2d>
 8002404:	4604      	mov	r4, r0
 8002406:	460d      	mov	r5, r1
 8002408:	4b2f      	ldr	r3, [pc, #188]	; (80024c8 <constains_calculator+0x1dc>)
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	4618      	mov	r0, r3
 800240e:	f7fe f8b3 	bl	8000578 <__aeabi_f2d>
 8002412:	4680      	mov	r8, r0
 8002414:	4689      	mov	r9, r1
 8002416:	69b8      	ldr	r0, [r7, #24]
 8002418:	f7fe f8ae 	bl	8000578 <__aeabi_f2d>
 800241c:	4602      	mov	r2, r0
 800241e:	460b      	mov	r3, r1
 8002420:	f7fd ff4c 	bl	80002bc <__adddf3>
 8002424:	4602      	mov	r2, r0
 8002426:	460b      	mov	r3, r1
 8002428:	4640      	mov	r0, r8
 800242a:	4649      	mov	r1, r9
 800242c:	f7fe fa26 	bl	800087c <__aeabi_ddiv>
 8002430:	4602      	mov	r2, r0
 8002432:	460b      	mov	r3, r1
 8002434:	f04f 0000 	mov.w	r0, #0
 8002438:	4924      	ldr	r1, [pc, #144]	; (80024cc <constains_calculator+0x1e0>)
 800243a:	f7fd ff3d 	bl	80002b8 <__aeabi_dsub>
 800243e:	4602      	mov	r2, r0
 8002440:	460b      	mov	r3, r1
 8002442:	4690      	mov	r8, r2
 8002444:	4699      	mov	r9, r3
 8002446:	6978      	ldr	r0, [r7, #20]
 8002448:	f7fe f896 	bl	8000578 <__aeabi_f2d>
 800244c:	4602      	mov	r2, r0
 800244e:	460b      	mov	r3, r1
 8002450:	f7fd ff34 	bl	80002bc <__adddf3>
 8002454:	4602      	mov	r2, r0
 8002456:	460b      	mov	r3, r1
 8002458:	4692      	mov	sl, r2
 800245a:	469b      	mov	fp, r3
 800245c:	4b1a      	ldr	r3, [pc, #104]	; (80024c8 <constains_calculator+0x1dc>)
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	4618      	mov	r0, r3
 8002462:	f7fe f889 	bl	8000578 <__aeabi_f2d>
 8002466:	4602      	mov	r2, r0
 8002468:	460b      	mov	r3, r1
 800246a:	4650      	mov	r0, sl
 800246c:	4659      	mov	r1, fp
 800246e:	f7fe fa05 	bl	800087c <__aeabi_ddiv>
 8002472:	4602      	mov	r2, r0
 8002474:	460b      	mov	r3, r1
 8002476:	4640      	mov	r0, r8
 8002478:	4649      	mov	r1, r9
 800247a:	f7fd ff1f 	bl	80002bc <__adddf3>
 800247e:	4602      	mov	r2, r0
 8002480:	460b      	mov	r3, r1
 8002482:	4620      	mov	r0, r4
 8002484:	4629      	mov	r1, r5
 8002486:	f7fe f8cf 	bl	8000628 <__aeabi_dmul>
 800248a:	4602      	mov	r2, r0
 800248c:	460b      	mov	r3, r1
 800248e:	4610      	mov	r0, r2
 8002490:	4619      	mov	r1, r3
 8002492:	f7fe fbc1 	bl	8000c18 <__aeabi_d2f>
 8002496:	4602      	mov	r2, r0
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	619a      	str	r2, [r3, #24]
	   ptrMotorhandler->parametersMotor.q2 = (kp*td)/Ts;
 800249c:	ed97 7a07 	vldr	s14, [r7, #28]
 80024a0:	edd7 7a05 	vldr	s15, [r7, #20]
 80024a4:	ee67 6a27 	vmul.f32	s13, s14, s15
 80024a8:	4b07      	ldr	r3, [pc, #28]	; (80024c8 <constains_calculator+0x1dc>)
 80024aa:	ed93 7a00 	vldr	s14, [r3]
 80024ae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	edc3 7a07 	vstr	s15, [r3, #28]
}
 80024b8:	bf00      	nop
 80024ba:	3720      	adds	r7, #32
 80024bc:	46bd      	mov	sp, r7
 80024be:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80024c2:	bf00      	nop
 80024c4:	3ff33333 	.word	0x3ff33333
 80024c8:	20000004 	.word	0x20000004
 80024cc:	3ff00000 	.word	0x3ff00000

080024d0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80024d0:	480d      	ldr	r0, [pc, #52]	; (8002508 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80024d2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80024d4:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80024d8:	480c      	ldr	r0, [pc, #48]	; (800250c <LoopForever+0x6>)
  ldr r1, =_edata
 80024da:	490d      	ldr	r1, [pc, #52]	; (8002510 <LoopForever+0xa>)
  ldr r2, =_sidata
 80024dc:	4a0d      	ldr	r2, [pc, #52]	; (8002514 <LoopForever+0xe>)
  movs r3, #0
 80024de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80024e0:	e002      	b.n	80024e8 <LoopCopyDataInit>

080024e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80024e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80024e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80024e6:	3304      	adds	r3, #4

080024e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80024e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80024ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80024ec:	d3f9      	bcc.n	80024e2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80024ee:	4a0a      	ldr	r2, [pc, #40]	; (8002518 <LoopForever+0x12>)
  ldr r4, =_ebss
 80024f0:	4c0a      	ldr	r4, [pc, #40]	; (800251c <LoopForever+0x16>)
  movs r3, #0
 80024f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80024f4:	e001      	b.n	80024fa <LoopFillZerobss>

080024f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80024f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80024f8:	3204      	adds	r2, #4

080024fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80024fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80024fc:	d3fb      	bcc.n	80024f6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80024fe:	f002 fd49 	bl	8004f94 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002502:	f7fe fe0f 	bl	8001124 <main>

08002506 <LoopForever>:

LoopForever:
    b LoopForever
 8002506:	e7fe      	b.n	8002506 <LoopForever>
  ldr   r0, =_estack
 8002508:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800250c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002510:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8002514:	0800c200 	.word	0x0800c200
  ldr r2, =_sbss
 8002518:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 800251c:	20000cbc 	.word	0x20000cbc

08002520 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002520:	e7fe      	b.n	8002520 <ADC_IRQHandler>

08002522 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002522:	b480      	push	{r7}
 8002524:	af00      	add	r7, sp, #0
	return 1;
 8002526:	2301      	movs	r3, #1
}
 8002528:	4618      	mov	r0, r3
 800252a:	46bd      	mov	sp, r7
 800252c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002530:	4770      	bx	lr

08002532 <_kill>:

int _kill(int pid, int sig)
{
 8002532:	b580      	push	{r7, lr}
 8002534:	b082      	sub	sp, #8
 8002536:	af00      	add	r7, sp, #0
 8002538:	6078      	str	r0, [r7, #4]
 800253a:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800253c:	f002 fd24 	bl	8004f88 <__errno>
 8002540:	4603      	mov	r3, r0
 8002542:	2216      	movs	r2, #22
 8002544:	601a      	str	r2, [r3, #0]
	return -1;
 8002546:	f04f 33ff 	mov.w	r3, #4294967295
}
 800254a:	4618      	mov	r0, r3
 800254c:	3708      	adds	r7, #8
 800254e:	46bd      	mov	sp, r7
 8002550:	bd80      	pop	{r7, pc}

08002552 <_exit>:

void _exit (int status)
{
 8002552:	b580      	push	{r7, lr}
 8002554:	b082      	sub	sp, #8
 8002556:	af00      	add	r7, sp, #0
 8002558:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800255a:	f04f 31ff 	mov.w	r1, #4294967295
 800255e:	6878      	ldr	r0, [r7, #4]
 8002560:	f7ff ffe7 	bl	8002532 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002564:	e7fe      	b.n	8002564 <_exit+0x12>

08002566 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002566:	b580      	push	{r7, lr}
 8002568:	b086      	sub	sp, #24
 800256a:	af00      	add	r7, sp, #0
 800256c:	60f8      	str	r0, [r7, #12]
 800256e:	60b9      	str	r1, [r7, #8]
 8002570:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002572:	2300      	movs	r3, #0
 8002574:	617b      	str	r3, [r7, #20]
 8002576:	e00a      	b.n	800258e <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002578:	f3af 8000 	nop.w
 800257c:	4601      	mov	r1, r0
 800257e:	68bb      	ldr	r3, [r7, #8]
 8002580:	1c5a      	adds	r2, r3, #1
 8002582:	60ba      	str	r2, [r7, #8]
 8002584:	b2ca      	uxtb	r2, r1
 8002586:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002588:	697b      	ldr	r3, [r7, #20]
 800258a:	3301      	adds	r3, #1
 800258c:	617b      	str	r3, [r7, #20]
 800258e:	697a      	ldr	r2, [r7, #20]
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	429a      	cmp	r2, r3
 8002594:	dbf0      	blt.n	8002578 <_read+0x12>
	}

return len;
 8002596:	687b      	ldr	r3, [r7, #4]
}
 8002598:	4618      	mov	r0, r3
 800259a:	3718      	adds	r7, #24
 800259c:	46bd      	mov	sp, r7
 800259e:	bd80      	pop	{r7, pc}

080025a0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	b086      	sub	sp, #24
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	60f8      	str	r0, [r7, #12]
 80025a8:	60b9      	str	r1, [r7, #8]
 80025aa:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025ac:	2300      	movs	r3, #0
 80025ae:	617b      	str	r3, [r7, #20]
 80025b0:	e009      	b.n	80025c6 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80025b2:	68bb      	ldr	r3, [r7, #8]
 80025b4:	1c5a      	adds	r2, r3, #1
 80025b6:	60ba      	str	r2, [r7, #8]
 80025b8:	781b      	ldrb	r3, [r3, #0]
 80025ba:	4618      	mov	r0, r3
 80025bc:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025c0:	697b      	ldr	r3, [r7, #20]
 80025c2:	3301      	adds	r3, #1
 80025c4:	617b      	str	r3, [r7, #20]
 80025c6:	697a      	ldr	r2, [r7, #20]
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	429a      	cmp	r2, r3
 80025cc:	dbf1      	blt.n	80025b2 <_write+0x12>
	}
	return len;
 80025ce:	687b      	ldr	r3, [r7, #4]
}
 80025d0:	4618      	mov	r0, r3
 80025d2:	3718      	adds	r7, #24
 80025d4:	46bd      	mov	sp, r7
 80025d6:	bd80      	pop	{r7, pc}

080025d8 <_close>:

int _close(int file)
{
 80025d8:	b480      	push	{r7}
 80025da:	b083      	sub	sp, #12
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
	return -1;
 80025e0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80025e4:	4618      	mov	r0, r3
 80025e6:	370c      	adds	r7, #12
 80025e8:	46bd      	mov	sp, r7
 80025ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ee:	4770      	bx	lr

080025f0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80025f0:	b480      	push	{r7}
 80025f2:	b083      	sub	sp, #12
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
 80025f8:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80025fa:	683b      	ldr	r3, [r7, #0]
 80025fc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002600:	605a      	str	r2, [r3, #4]
	return 0;
 8002602:	2300      	movs	r3, #0
}
 8002604:	4618      	mov	r0, r3
 8002606:	370c      	adds	r7, #12
 8002608:	46bd      	mov	sp, r7
 800260a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260e:	4770      	bx	lr

08002610 <_isatty>:

int _isatty(int file)
{
 8002610:	b480      	push	{r7}
 8002612:	b083      	sub	sp, #12
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
	return 1;
 8002618:	2301      	movs	r3, #1
}
 800261a:	4618      	mov	r0, r3
 800261c:	370c      	adds	r7, #12
 800261e:	46bd      	mov	sp, r7
 8002620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002624:	4770      	bx	lr

08002626 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002626:	b480      	push	{r7}
 8002628:	b085      	sub	sp, #20
 800262a:	af00      	add	r7, sp, #0
 800262c:	60f8      	str	r0, [r7, #12]
 800262e:	60b9      	str	r1, [r7, #8]
 8002630:	607a      	str	r2, [r7, #4]
	return 0;
 8002632:	2300      	movs	r3, #0
}
 8002634:	4618      	mov	r0, r3
 8002636:	3714      	adds	r7, #20
 8002638:	46bd      	mov	sp, r7
 800263a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263e:	4770      	bx	lr

08002640 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	b086      	sub	sp, #24
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002648:	4a14      	ldr	r2, [pc, #80]	; (800269c <_sbrk+0x5c>)
 800264a:	4b15      	ldr	r3, [pc, #84]	; (80026a0 <_sbrk+0x60>)
 800264c:	1ad3      	subs	r3, r2, r3
 800264e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002650:	697b      	ldr	r3, [r7, #20]
 8002652:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002654:	4b13      	ldr	r3, [pc, #76]	; (80026a4 <_sbrk+0x64>)
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	2b00      	cmp	r3, #0
 800265a:	d102      	bne.n	8002662 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800265c:	4b11      	ldr	r3, [pc, #68]	; (80026a4 <_sbrk+0x64>)
 800265e:	4a12      	ldr	r2, [pc, #72]	; (80026a8 <_sbrk+0x68>)
 8002660:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002662:	4b10      	ldr	r3, [pc, #64]	; (80026a4 <_sbrk+0x64>)
 8002664:	681a      	ldr	r2, [r3, #0]
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	4413      	add	r3, r2
 800266a:	693a      	ldr	r2, [r7, #16]
 800266c:	429a      	cmp	r2, r3
 800266e:	d207      	bcs.n	8002680 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002670:	f002 fc8a 	bl	8004f88 <__errno>
 8002674:	4603      	mov	r3, r0
 8002676:	220c      	movs	r2, #12
 8002678:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800267a:	f04f 33ff 	mov.w	r3, #4294967295
 800267e:	e009      	b.n	8002694 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002680:	4b08      	ldr	r3, [pc, #32]	; (80026a4 <_sbrk+0x64>)
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002686:	4b07      	ldr	r3, [pc, #28]	; (80026a4 <_sbrk+0x64>)
 8002688:	681a      	ldr	r2, [r3, #0]
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	4413      	add	r3, r2
 800268e:	4a05      	ldr	r2, [pc, #20]	; (80026a4 <_sbrk+0x64>)
 8002690:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002692:	68fb      	ldr	r3, [r7, #12]
}
 8002694:	4618      	mov	r0, r3
 8002696:	3718      	adds	r7, #24
 8002698:	46bd      	mov	sp, r7
 800269a:	bd80      	pop	{r7, pc}
 800269c:	20020000 	.word	0x20020000
 80026a0:	00000400 	.word	0x00000400
 80026a4:	2000044c 	.word	0x2000044c
 80026a8:	20000cc0 	.word	0x20000cc0

080026ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026ac:	b480      	push	{r7}
 80026ae:	b083      	sub	sp, #12
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	4603      	mov	r3, r0
 80026b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	db0b      	blt.n	80026d6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80026be:	79fb      	ldrb	r3, [r7, #7]
 80026c0:	f003 021f 	and.w	r2, r3, #31
 80026c4:	4907      	ldr	r1, [pc, #28]	; (80026e4 <__NVIC_EnableIRQ+0x38>)
 80026c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026ca:	095b      	lsrs	r3, r3, #5
 80026cc:	2001      	movs	r0, #1
 80026ce:	fa00 f202 	lsl.w	r2, r0, r2
 80026d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80026d6:	bf00      	nop
 80026d8:	370c      	adds	r7, #12
 80026da:	46bd      	mov	sp, r7
 80026dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e0:	4770      	bx	lr
 80026e2:	bf00      	nop
 80026e4:	e000e100 	.word	0xe000e100

080026e8 <BasicTimer_Config>:
TIM_TypeDef *ptrTimer4Used;
TIM_TypeDef *ptrTimer5Used;

//Funcion para cargar la configuracion del Timer
void BasicTimer_Config(BasicTimer_Handler_t *ptrBTimerHandler)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b084      	sub	sp, #16
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]

	//---------------------------------1) Activamos el periferico------------------------------------------
	//Registro: APB1ENR

	//Verificamos para TIM2
	if(ptrBTimerHandler->ptrTIMx==TIM2)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	68db      	ldr	r3, [r3, #12]
 80026f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80026f8:	d10a      	bne.n	8002710 <BasicTimer_Config+0x28>
	{
		/*Activamos el periferico escribiendo un 1 deacuerdo a la posicion
		 * del periferico en el registro*/
		RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 80026fa:	4b62      	ldr	r3, [pc, #392]	; (8002884 <BasicTimer_Config+0x19c>)
 80026fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026fe:	4a61      	ldr	r2, [pc, #388]	; (8002884 <BasicTimer_Config+0x19c>)
 8002700:	f043 0301 	orr.w	r3, r3, #1
 8002704:	6413      	str	r3, [r2, #64]	; 0x40

		//Guardamos una referencia al periferico que estamos utilizando
		ptrTimer2Used = ptrBTimerHandler->ptrTIMx;
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	68db      	ldr	r3, [r3, #12]
 800270a:	4a5f      	ldr	r2, [pc, #380]	; (8002888 <BasicTimer_Config+0x1a0>)
 800270c:	6013      	str	r3, [r2, #0]
 800270e:	e02e      	b.n	800276e <BasicTimer_Config+0x86>

	}
	//Verificamos para TIM3
	else if(ptrBTimerHandler->ptrTIMx==TIM3)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	68db      	ldr	r3, [r3, #12]
 8002714:	4a5d      	ldr	r2, [pc, #372]	; (800288c <BasicTimer_Config+0x1a4>)
 8002716:	4293      	cmp	r3, r2
 8002718:	d10a      	bne.n	8002730 <BasicTimer_Config+0x48>
	{
		/*Activamos el periferico escribiendo un 1 deacuerdo a la posicion
		 * del periferico en el registro*/
		RCC->APB1ENR |= RCC_APB1ENR_TIM3EN;
 800271a:	4b5a      	ldr	r3, [pc, #360]	; (8002884 <BasicTimer_Config+0x19c>)
 800271c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800271e:	4a59      	ldr	r2, [pc, #356]	; (8002884 <BasicTimer_Config+0x19c>)
 8002720:	f043 0302 	orr.w	r3, r3, #2
 8002724:	6413      	str	r3, [r2, #64]	; 0x40

		//Guardamos una referencia al periferico que estamos utilizando
		ptrTimer3Used = ptrBTimerHandler->ptrTIMx;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	68db      	ldr	r3, [r3, #12]
 800272a:	4a59      	ldr	r2, [pc, #356]	; (8002890 <BasicTimer_Config+0x1a8>)
 800272c:	6013      	str	r3, [r2, #0]
 800272e:	e01e      	b.n	800276e <BasicTimer_Config+0x86>
	}
	//Verificamos para TIM4
	else if(ptrBTimerHandler->ptrTIMx==TIM4)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	68db      	ldr	r3, [r3, #12]
 8002734:	4a57      	ldr	r2, [pc, #348]	; (8002894 <BasicTimer_Config+0x1ac>)
 8002736:	4293      	cmp	r3, r2
 8002738:	d10a      	bne.n	8002750 <BasicTimer_Config+0x68>
	{
		/*Activamos el periferico escribiendo un 1 deacuerdo a la posicion
		 * del periferico en el registro*/
		RCC->APB1ENR |= RCC_APB1ENR_TIM4EN;
 800273a:	4b52      	ldr	r3, [pc, #328]	; (8002884 <BasicTimer_Config+0x19c>)
 800273c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800273e:	4a51      	ldr	r2, [pc, #324]	; (8002884 <BasicTimer_Config+0x19c>)
 8002740:	f043 0304 	orr.w	r3, r3, #4
 8002744:	6413      	str	r3, [r2, #64]	; 0x40

		//Guardamos una referencia al periferico que estamos utilizando
		ptrTimer4Used = ptrBTimerHandler->ptrTIMx;
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	68db      	ldr	r3, [r3, #12]
 800274a:	4a53      	ldr	r2, [pc, #332]	; (8002898 <BasicTimer_Config+0x1b0>)
 800274c:	6013      	str	r3, [r2, #0]
 800274e:	e00e      	b.n	800276e <BasicTimer_Config+0x86>
	}
	//Verificamos para TIM5
	else if(ptrBTimerHandler->ptrTIMx==TIM5)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	68db      	ldr	r3, [r3, #12]
 8002754:	4a51      	ldr	r2, [pc, #324]	; (800289c <BasicTimer_Config+0x1b4>)
 8002756:	4293      	cmp	r3, r2
 8002758:	d109      	bne.n	800276e <BasicTimer_Config+0x86>
	{
		/*Activamos el periferico escribiendo un 1 deacuerdo a la posicion
		 * del periferico en el registro*/
		RCC->APB1ENR |= RCC_APB1ENR_TIM5EN;
 800275a:	4b4a      	ldr	r3, [pc, #296]	; (8002884 <BasicTimer_Config+0x19c>)
 800275c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800275e:	4a49      	ldr	r2, [pc, #292]	; (8002884 <BasicTimer_Config+0x19c>)
 8002760:	f043 0308 	orr.w	r3, r3, #8
 8002764:	6413      	str	r3, [r2, #64]	; 0x40

		//Guardamos una referencia al periferico que estamos utilizando
		ptrTimer5Used = ptrBTimerHandler->ptrTIMx;
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	68db      	ldr	r3, [r3, #12]
 800276a:	4a4d      	ldr	r2, [pc, #308]	; (80028a0 <BasicTimer_Config+0x1b8>)
 800276c:	6013      	str	r3, [r2, #0]
	}
	//------------------------------2) Configurando el pre-escaler-----------------------------------------
	//Registro:TIMx_PSC		//Es un valor de 32 bit

	uint8_t clockSystem = getConfigPLL();          //Guardamos la velocidad de reloj entregada al bus APB1
 800276e:	f001 fbeb 	bl	8003f48 <getConfigPLL>
 8002772:	4603      	mov	r3, r0
 8002774:	73bb      	strb	r3, [r7, #14]
	uint8_t clock = getClockAPB1();          //Guardamos la velocidad de reloj entregada al bus APB1
 8002776:	f001 fc03 	bl	8003f80 <getClockAPB1>
 800277a:	4603      	mov	r3, r0
 800277c:	73fb      	strb	r3, [r7, #15]

	//Verificamos si el multiplicador del Timer esta activado por el preescaler
	if(clockSystem>=50)
 800277e:	7bbb      	ldrb	r3, [r7, #14]
 8002780:	2b31      	cmp	r3, #49	; 0x31
 8002782:	d903      	bls.n	800278c <BasicTimer_Config+0xa4>
	{
		clock = clock*2;
 8002784:	7bfb      	ldrb	r3, [r7, #15]
 8002786:	005b      	lsls	r3, r3, #1
 8002788:	73fb      	strb	r3, [r7, #15]
 800278a:	e000      	b.n	800278e <BasicTimer_Config+0xa6>
	}
	else
	{
		__NOP();
 800278c:	bf00      	nop
	}

	/*La frecuencia de reloj contador CK_CNT es igual a fck_psc/(psc[15:0]+1)
	 * por tanto define la velocidad a la que incrementa el counter*/
	ptrBTimerHandler->ptrTIMx->PSC = (clock)*(ptrBTimerHandler->TIMx_Config.TIMx_periodcnt)-1; //(min:0, max:65536)
 800278e:	7bfb      	ldrb	r3, [r7, #15]
 8002790:	687a      	ldr	r2, [r7, #4]
 8002792:	8852      	ldrh	r2, [r2, #2]
 8002794:	fb02 f303 	mul.w	r3, r2, r3
 8002798:	1e5a      	subs	r2, r3, #1
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	68db      	ldr	r3, [r3, #12]
 800279e:	629a      	str	r2, [r3, #40]	; 0x28
	//Registro:TIMx_CR1		Es un registro de configuracion del TIMx
	//Registro:TIMx_ARR		Es un valor de 32 bit
	//Registro:TIMx_CNT/	Es un valor de 32 bit

	//verificamos si el timer se configuro como up o dowm
	if(ptrBTimerHandler->TIMx_Config.TIMx_mode==BTIMER_MODE_UP)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	781b      	ldrb	r3, [r3, #0]
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d112      	bne.n	80027ce <BasicTimer_Config+0xe6>
	{
		//-------a)Definimos la direccion para el conteo-------------
		ptrBTimerHandler->ptrTIMx->CR1 &= ~(0b1<<4);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	68db      	ldr	r3, [r3, #12]
 80027ac:	681a      	ldr	r2, [r3, #0]
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	68db      	ldr	r3, [r3, #12]
 80027b2:	f022 0210 	bic.w	r2, r2, #16
 80027b6:	601a      	str	r2, [r3, #0]
		//-------b)Configuracion del Auto-Reload---------------------
		ptrBTimerHandler->ptrTIMx->ARR = ptrBTimerHandler->TIMx_Config.TIMX_period+1;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	685a      	ldr	r2, [r3, #4]
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	68db      	ldr	r3, [r3, #12]
 80027c0:	3201      	adds	r2, #1
 80027c2:	62da      	str	r2, [r3, #44]	; 0x2c
		//-------c)Reinicio del registro counter----------------------
		ptrBTimerHandler->ptrTIMx->CNT = 0;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	68db      	ldr	r3, [r3, #12]
 80027c8:	2200      	movs	r2, #0
 80027ca:	625a      	str	r2, [r3, #36]	; 0x24
 80027cc:	e018      	b.n	8002800 <BasicTimer_Config+0x118>
	}
	else
	{
		//-------a)Definimos la direccion para el conteo-------------
		ptrBTimerHandler->ptrTIMx->CR1 &= ~(0b1<<4); //limpiamos
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	68db      	ldr	r3, [r3, #12]
 80027d2:	681a      	ldr	r2, [r3, #0]
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	68db      	ldr	r3, [r3, #12]
 80027d8:	f022 0210 	bic.w	r2, r2, #16
 80027dc:	601a      	str	r2, [r3, #0]
		ptrBTimerHandler->ptrTIMx->CR1 |= (0b1<<4);
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	68db      	ldr	r3, [r3, #12]
 80027e2:	681a      	ldr	r2, [r3, #0]
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	68db      	ldr	r3, [r3, #12]
 80027e8:	f042 0210 	orr.w	r2, r2, #16
 80027ec:	601a      	str	r2, [r3, #0]
		//-------b)Configuracion del Auto-Reload---------------------
		ptrBTimerHandler->ptrTIMx->ARR = 0;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	68db      	ldr	r3, [r3, #12]
 80027f2:	2200      	movs	r2, #0
 80027f4:	62da      	str	r2, [r3, #44]	; 0x2c
		//-------c)Reinicio del registro counter----------------------
		ptrBTimerHandler->ptrTIMx->CNT = ptrBTimerHandler->TIMx_Config.TIMX_period;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	68db      	ldr	r3, [r3, #12]
 80027fa:	687a      	ldr	r2, [r7, #4]
 80027fc:	6852      	ldr	r2, [r2, #4]
 80027fe:	625a      	str	r2, [r3, #36]	; 0x24
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002800:	b672      	cpsid	i
}
 8002802:	bf00      	nop

	//Desactivamos las interrupciones Globales
	__disable_irq();

	//Matriculamos la interrupcion en el NVCI
	if(ptrBTimerHandler->ptrTIMx==TIM2)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	68db      	ldr	r3, [r3, #12]
 8002808:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800280c:	d103      	bne.n	8002816 <BasicTimer_Config+0x12e>
	{
		//Activamos el NVIC para la interrupcion del TIM2
		NVIC_EnableIRQ(TIM2_IRQn);
 800280e:	201c      	movs	r0, #28
 8002810:	f7ff ff4c 	bl	80026ac <__NVIC_EnableIRQ>
 8002814:	e019      	b.n	800284a <BasicTimer_Config+0x162>
	}
	else if(ptrBTimerHandler->ptrTIMx==TIM3)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	68db      	ldr	r3, [r3, #12]
 800281a:	4a1c      	ldr	r2, [pc, #112]	; (800288c <BasicTimer_Config+0x1a4>)
 800281c:	4293      	cmp	r3, r2
 800281e:	d103      	bne.n	8002828 <BasicTimer_Config+0x140>
	{
		//Activamos el NVIC para la interrupcion del TIM3
		NVIC_EnableIRQ(TIM3_IRQn);
 8002820:	201d      	movs	r0, #29
 8002822:	f7ff ff43 	bl	80026ac <__NVIC_EnableIRQ>
 8002826:	e010      	b.n	800284a <BasicTimer_Config+0x162>
	}
	else if(ptrBTimerHandler->ptrTIMx==TIM4)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	68db      	ldr	r3, [r3, #12]
 800282c:	4a19      	ldr	r2, [pc, #100]	; (8002894 <BasicTimer_Config+0x1ac>)
 800282e:	4293      	cmp	r3, r2
 8002830:	d103      	bne.n	800283a <BasicTimer_Config+0x152>
	{
		//Activamos el NVIC para la interrupcion del TIM4
		NVIC_EnableIRQ(TIM4_IRQn);
 8002832:	201e      	movs	r0, #30
 8002834:	f7ff ff3a 	bl	80026ac <__NVIC_EnableIRQ>
 8002838:	e007      	b.n	800284a <BasicTimer_Config+0x162>
	}
	else if(ptrBTimerHandler->ptrTIMx==TIM5)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	68db      	ldr	r3, [r3, #12]
 800283e:	4a17      	ldr	r2, [pc, #92]	; (800289c <BasicTimer_Config+0x1b4>)
 8002840:	4293      	cmp	r3, r2
 8002842:	d102      	bne.n	800284a <BasicTimer_Config+0x162>
	{
		//Activamos el NVIC para la interrupcion del TIM5
		NVIC_EnableIRQ(TIM5_IRQn);
 8002844:	2032      	movs	r0, #50	; 0x32
 8002846:	f7ff ff31 	bl	80026ac <__NVIC_EnableIRQ>
  __ASM volatile ("cpsie i" : : : "memory");
 800284a:	b662      	cpsie	i
}
 800284c:	bf00      	nop
	//Activo las interrupciones Globales
	__enable_irq();

	//----------------------5)Definimos el estado de la interrupcion---------------------------------

	statusiInterruptionTimer(ptrBTimerHandler, (ptrBTimerHandler->TIMx_Config.TIMx_interruptEnable));
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	7a1b      	ldrb	r3, [r3, #8]
 8002852:	4619      	mov	r1, r3
 8002854:	6878      	ldr	r0, [r7, #4]
 8002856:	f000 f875 	bl	8002944 <statusiInterruptionTimer>

	//----------------------6) Activamos el Timer---------------------------------
	//Registro:TIMx_CR1

	ptrBTimerHandler->ptrTIMx->CR1 &= ~TIM_CR1_CEN;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	68db      	ldr	r3, [r3, #12]
 800285e:	681a      	ldr	r2, [r3, #0]
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	68db      	ldr	r3, [r3, #12]
 8002864:	f022 0201 	bic.w	r2, r2, #1
 8002868:	601a      	str	r2, [r3, #0]
	ptrBTimerHandler->ptrTIMx->CR1 |= TIM_CR1_CEN;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	68db      	ldr	r3, [r3, #12]
 800286e:	681a      	ldr	r2, [r3, #0]
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	68db      	ldr	r3, [r3, #12]
 8002874:	f042 0201 	orr.w	r2, r2, #1
 8002878:	601a      	str	r2, [r3, #0]
}
 800287a:	bf00      	nop
 800287c:	3710      	adds	r7, #16
 800287e:	46bd      	mov	sp, r7
 8002880:	bd80      	pop	{r7, pc}
 8002882:	bf00      	nop
 8002884:	40023800 	.word	0x40023800
 8002888:	20000450 	.word	0x20000450
 800288c:	40000400 	.word	0x40000400
 8002890:	20000454 	.word	0x20000454
 8002894:	40000800 	.word	0x40000800
 8002898:	20000458 	.word	0x20000458
 800289c:	40000c00 	.word	0x40000c00
 80028a0:	2000045c 	.word	0x2000045c

080028a4 <BasicTimer4_Callback>:
{
	__NOP();
}

__attribute__((weak)) void BasicTimer4_Callback(void)
{
 80028a4:	b480      	push	{r7}
 80028a6:	af00      	add	r7, sp, #0
	__NOP();
 80028a8:	bf00      	nop
}
 80028aa:	bf00      	nop
 80028ac:	46bd      	mov	sp, r7
 80028ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b2:	4770      	bx	lr

080028b4 <BasicTimer5_Callback>:

__attribute__((weak)) void BasicTimer5_Callback(void)
{
 80028b4:	b480      	push	{r7}
 80028b6:	af00      	add	r7, sp, #0
	__NOP();
 80028b8:	bf00      	nop
}
 80028ba:	bf00      	nop
 80028bc:	46bd      	mov	sp, r7
 80028be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c2:	4770      	bx	lr

080028c4 <TIM2_IRQHandler>:

/* Cuando se produce una interrupcion en el NVIC debido a uno de los TIMER apuntara a una de
 * estas funciones en el vector de interrupciones respectivamente
 */
void TIM2_IRQHandler(void)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	af00      	add	r7, sp, #0
	//Registro:TIMx_SR    Es un registro de almacenamiento del TIMx
	//limpiamos la bandera que indica que la interrupcion se a generado
	ptrTimer2Used->SR &= ~TIM_SR_UIF;
 80028c8:	4b05      	ldr	r3, [pc, #20]	; (80028e0 <TIM2_IRQHandler+0x1c>)
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	691a      	ldr	r2, [r3, #16]
 80028ce:	4b04      	ldr	r3, [pc, #16]	; (80028e0 <TIM2_IRQHandler+0x1c>)
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f022 0201 	bic.w	r2, r2, #1
 80028d6:	611a      	str	r2, [r3, #16]

	//Ejecute la funcion correspondiente a la interupccion
	BasicTimer2_Callback();
 80028d8:	f7fe fea2 	bl	8001620 <BasicTimer2_Callback>

}
 80028dc:	bf00      	nop
 80028de:	bd80      	pop	{r7, pc}
 80028e0:	20000450 	.word	0x20000450

080028e4 <TIM3_IRQHandler>:

void TIM3_IRQHandler(void)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	af00      	add	r7, sp, #0
	//Registro:TIMx_SR    Es un registro de almacenamiento del TIMx
	//limpiamos la bandera que indica que la interrupcion se a generado
	ptrTimer3Used->SR &= ~TIM_SR_UIF;
 80028e8:	4b05      	ldr	r3, [pc, #20]	; (8002900 <TIM3_IRQHandler+0x1c>)
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	691a      	ldr	r2, [r3, #16]
 80028ee:	4b04      	ldr	r3, [pc, #16]	; (8002900 <TIM3_IRQHandler+0x1c>)
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f022 0201 	bic.w	r2, r2, #1
 80028f6:	611a      	str	r2, [r3, #16]

	//Ejecute la funcion correspondiente a la interupccion
	BasicTimer3_Callback();
 80028f8:	f7fe fe9e 	bl	8001638 <BasicTimer3_Callback>

}
 80028fc:	bf00      	nop
 80028fe:	bd80      	pop	{r7, pc}
 8002900:	20000454 	.word	0x20000454

08002904 <TIM4_IRQHandler>:

void TIM4_IRQHandler(void)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	af00      	add	r7, sp, #0
	//Registro:TIMx_SR    Es un registro de almacenamiento del TIMx
	//limpiamos la bandera que indica que la interrupcion se a generado
	ptrTimer4Used->SR &= ~TIM_SR_UIF;
 8002908:	4b05      	ldr	r3, [pc, #20]	; (8002920 <TIM4_IRQHandler+0x1c>)
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	691a      	ldr	r2, [r3, #16]
 800290e:	4b04      	ldr	r3, [pc, #16]	; (8002920 <TIM4_IRQHandler+0x1c>)
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f022 0201 	bic.w	r2, r2, #1
 8002916:	611a      	str	r2, [r3, #16]

	//Ejecute la funcion correspondiente a la interupccion
	BasicTimer4_Callback();
 8002918:	f7ff ffc4 	bl	80028a4 <BasicTimer4_Callback>

}
 800291c:	bf00      	nop
 800291e:	bd80      	pop	{r7, pc}
 8002920:	20000458 	.word	0x20000458

08002924 <TIM5_IRQHandler>:

void TIM5_IRQHandler(void)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	af00      	add	r7, sp, #0
	//Registro:TIMx_SR    Es un registro de almacenamiento del TIMx
	//limpiamos la bandera que indica que la interrupcion se a generado
	ptrTimer5Used->SR &= ~TIM_SR_UIF;
 8002928:	4b05      	ldr	r3, [pc, #20]	; (8002940 <TIM5_IRQHandler+0x1c>)
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	691a      	ldr	r2, [r3, #16]
 800292e:	4b04      	ldr	r3, [pc, #16]	; (8002940 <TIM5_IRQHandler+0x1c>)
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f022 0201 	bic.w	r2, r2, #1
 8002936:	611a      	str	r2, [r3, #16]

	//Ejecute la funcion correspondiente a la interupccion
	BasicTimer5_Callback();
 8002938:	f7ff ffbc 	bl	80028b4 <BasicTimer5_Callback>

}
 800293c:	bf00      	nop
 800293e:	bd80      	pop	{r7, pc}
 8002940:	2000045c 	.word	0x2000045c

08002944 <statusiInterruptionTimer>:


//Definir la interrupcion por el timer
void statusiInterruptionTimer(BasicTimer_Handler_t *ptrBTimerHandler, uint8_t status)
{
 8002944:	b480      	push	{r7}
 8002946:	b083      	sub	sp, #12
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
 800294c:	460b      	mov	r3, r1
 800294e:	70fb      	strb	r3, [r7, #3]
	//Verificar el estado que se desea con definir
	if(status == INTERRUPTION_ENABLE)
 8002950:	78fb      	ldrb	r3, [r7, #3]
 8002952:	2b01      	cmp	r3, #1
 8002954:	d108      	bne.n	8002968 <statusiInterruptionTimer+0x24>
	{
		//Activamos las interrupciones
		ptrBTimerHandler->ptrTIMx->DIER |=TIM_DIER_UIE;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	68db      	ldr	r3, [r3, #12]
 800295a:	68da      	ldr	r2, [r3, #12]
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	68db      	ldr	r3, [r3, #12]
 8002960:	f042 0201 	orr.w	r2, r2, #1
 8002964:	60da      	str	r2, [r3, #12]
	else
	{
		//Desactivamos las interrupciones
		ptrBTimerHandler->ptrTIMx->DIER &= ~TIM_DIER_UIE;
	}
}
 8002966:	e007      	b.n	8002978 <statusiInterruptionTimer+0x34>
		ptrBTimerHandler->ptrTIMx->DIER &= ~TIM_DIER_UIE;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	68db      	ldr	r3, [r3, #12]
 800296c:	68da      	ldr	r2, [r3, #12]
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	68db      	ldr	r3, [r3, #12]
 8002972:	f022 0201 	bic.w	r2, r2, #1
 8002976:	60da      	str	r2, [r3, #12]
}
 8002978:	bf00      	nop
 800297a:	370c      	adds	r7, #12
 800297c:	46bd      	mov	sp, r7
 800297e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002982:	4770      	bx	lr

08002984 <updateFrequencyTimer>:


//Actualizamos la frecuencia del TIMER
void updateFrequencyTimer(BasicTimer_Handler_t *ptrBTimerHandler, uint16_t newPer)
{
 8002984:	b480      	push	{r7}
 8002986:	b083      	sub	sp, #12
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
 800298c:	460b      	mov	r3, r1
 800298e:	807b      	strh	r3, [r7, #2]
	//Establecemos el nuevo valor del periodo en la configuracion del PWM
	ptrBTimerHandler->TIMx_Config.TIMX_period = newPer;
 8002990:	887a      	ldrh	r2, [r7, #2]
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	605a      	str	r2, [r3, #4]
	//Reiniamos el contador
	ptrBTimerHandler->ptrTIMx->CNT = 0;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	68db      	ldr	r3, [r3, #12]
 800299a:	2200      	movs	r2, #0
 800299c:	625a      	str	r2, [r3, #36]	; 0x24
	/*Cargamos el valor del ARR el cual es e limite de incrementos del TIMER
	 */
	ptrBTimerHandler->ptrTIMx->ARR = ptrBTimerHandler->TIMx_Config.TIMX_period;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	68db      	ldr	r3, [r3, #12]
 80029a2:	687a      	ldr	r2, [r7, #4]
 80029a4:	6852      	ldr	r2, [r2, #4]
 80029a6:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80029a8:	bf00      	nop
 80029aa:	370c      	adds	r7, #12
 80029ac:	46bd      	mov	sp, r7
 80029ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b2:	4770      	bx	lr

080029b4 <__NVIC_EnableIRQ>:
{
 80029b4:	b480      	push	{r7}
 80029b6:	b083      	sub	sp, #12
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	4603      	mov	r3, r0
 80029bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	db0b      	blt.n	80029de <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80029c6:	79fb      	ldrb	r3, [r7, #7]
 80029c8:	f003 021f 	and.w	r2, r3, #31
 80029cc:	4907      	ldr	r1, [pc, #28]	; (80029ec <__NVIC_EnableIRQ+0x38>)
 80029ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029d2:	095b      	lsrs	r3, r3, #5
 80029d4:	2001      	movs	r0, #1
 80029d6:	fa00 f202 	lsl.w	r2, r0, r2
 80029da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80029de:	bf00      	nop
 80029e0:	370c      	adds	r7, #12
 80029e2:	46bd      	mov	sp, r7
 80029e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e8:	4770      	bx	lr
 80029ea:	bf00      	nop
 80029ec:	e000e100 	.word	0xe000e100

080029f0 <extInt_Config>:
#include <ExtiDriver.h>
#include <GPIOxDriver.h>

//Configuracion EXTI
void extInt_Config(EXTI_Config_t *extiConfig) // *extiConfig = &handlerEXTI
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b084      	sub	sp, #16
 80029f4:	af02      	add	r7, sp, #8
 80029f6:	6078      	str	r0, [r7, #4]
	//----------------------1) Configuramos el PINx como entrada ------------------------
	//Definimos la configuracion EXTI para el pin selecionado
	GPIO_PIN_Config(extiConfig->pGPIOHandler, GPIO_MODE_IN, GPIO_OTYPER_PUSHPULL, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDR_NOTHING, AF0);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	6818      	ldr	r0, [r3, #0]
 80029fc:	2300      	movs	r3, #0
 80029fe:	9301      	str	r3, [sp, #4]
 8002a00:	2300      	movs	r3, #0
 8002a02:	9300      	str	r3, [sp, #0]
 8002a04:	2301      	movs	r3, #1
 8002a06:	2200      	movs	r2, #0
 8002a08:	2100      	movs	r1, #0
 8002a0a:	f001 f891 	bl	8003b30 <GPIO_PIN_Config>

	//Cargamos la configuracion del PIN especifico
	GPIO_Config(extiConfig->pGPIOHandler);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	4618      	mov	r0, r3
 8002a14:	f001 f8ae 	bl	8003b74 <GPIO_Config>
	//-----------2) Configuracion de las lineas de conexion del EXTI-----------------------
	//Registro: APB1ENR  En el pefirefico RCC
	//Registro: EXTICR 	 En el periferico SYSCFG

	//-------a) Activamos la señal de reloj al SYSCFG-------------
	RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 8002a18:	4b97      	ldr	r3, [pc, #604]	; (8002c78 <extInt_Config+0x288>)
 8002a1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a1c:	4a96      	ldr	r2, [pc, #600]	; (8002c78 <extInt_Config+0x288>)
 8002a1e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002a22:	6453      	str	r3, [r2, #68]	; 0x44

	//-------b)Asignamos el canal del EXTI que corresponde al pin a usa-------------
	//Deacuerdo al PIN_X y GPIO_X, seleccionamos la conexion del EXTIx
	switch(extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	781b      	ldrb	r3, [r3, #0]
 8002a2a:	2b0f      	cmp	r3, #15
 8002a2c:	f200 85cf 	bhi.w	80035ce <extInt_Config+0xbde>
 8002a30:	a201      	add	r2, pc, #4	; (adr r2, 8002a38 <extInt_Config+0x48>)
 8002a32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a36:	bf00      	nop
 8002a38:	08002a79 	.word	0x08002a79
 8002a3c:	08002b2f 	.word	0x08002b2f
 8002a40:	08002be5 	.word	0x08002be5
 8002a44:	08002cbb 	.word	0x08002cbb
 8002a48:	08002d71 	.word	0x08002d71
 8002a4c:	08002e1f 	.word	0x08002e1f
 8002a50:	08002ee5 	.word	0x08002ee5
 8002a54:	08002f8d 	.word	0x08002f8d
 8002a58:	08003035 	.word	0x08003035
 8002a5c:	080030dd 	.word	0x080030dd
 8002a60:	080031a3 	.word	0x080031a3
 8002a64:	0800324b 	.word	0x0800324b
 8002a68:	080032f3 	.word	0x080032f3
 8002a6c:	080033b9 	.word	0x080033b9
 8002a70:	08003461 	.word	0x08003461
 8002a74:	08003509 	.word	0x08003509
	//----------------Configuracion EXTI0-----------------
	case 0:
	{
		/*Limpiamos la posicion correspondiente a la configuracion del PIN_0
		en el EXTICR*/
		SYSCFG->EXTICR[0] &= ~(0xF<<SYSCFG_EXTICR1_EXTI0_Pos);
 8002a78:	4b80      	ldr	r3, [pc, #512]	; (8002c7c <extInt_Config+0x28c>)
 8002a7a:	689b      	ldr	r3, [r3, #8]
 8002a7c:	4a7f      	ldr	r2, [pc, #508]	; (8002c7c <extInt_Config+0x28c>)
 8002a7e:	f023 030f 	bic.w	r3, r3, #15
 8002a82:	6093      	str	r3, [r2, #8]

		//Seleccionamos el valor a cargar deacuerdo al puerto establecido
		if(extiConfig->pGPIOHandler->pGPIOx == GPIOA)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	689b      	ldr	r3, [r3, #8]
 8002a8a:	4a7d      	ldr	r2, [pc, #500]	; (8002c80 <extInt_Config+0x290>)
 8002a8c:	4293      	cmp	r3, r2
 8002a8e:	d105      	bne.n	8002a9c <extInt_Config+0xac>
		{
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI0_PA);
 8002a90:	4b7a      	ldr	r3, [pc, #488]	; (8002c7c <extInt_Config+0x28c>)
 8002a92:	4a7a      	ldr	r2, [pc, #488]	; (8002c7c <extInt_Config+0x28c>)
 8002a94:	689b      	ldr	r3, [r3, #8]
 8002a96:	6093      	str	r3, [r2, #8]
		}
		else
		{
			__NOP();
		}
		break;
 8002a98:	f000 bd9b 	b.w	80035d2 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOB)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	689b      	ldr	r3, [r3, #8]
 8002aa2:	4a78      	ldr	r2, [pc, #480]	; (8002c84 <extInt_Config+0x294>)
 8002aa4:	4293      	cmp	r3, r2
 8002aa6:	d107      	bne.n	8002ab8 <extInt_Config+0xc8>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI0_PB);
 8002aa8:	4b74      	ldr	r3, [pc, #464]	; (8002c7c <extInt_Config+0x28c>)
 8002aaa:	689b      	ldr	r3, [r3, #8]
 8002aac:	4a73      	ldr	r2, [pc, #460]	; (8002c7c <extInt_Config+0x28c>)
 8002aae:	f043 0301 	orr.w	r3, r3, #1
 8002ab2:	6093      	str	r3, [r2, #8]
		break;
 8002ab4:	f000 bd8d 	b.w	80035d2 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOC)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	689b      	ldr	r3, [r3, #8]
 8002abe:	4a72      	ldr	r2, [pc, #456]	; (8002c88 <extInt_Config+0x298>)
 8002ac0:	4293      	cmp	r3, r2
 8002ac2:	d107      	bne.n	8002ad4 <extInt_Config+0xe4>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI0_PC);
 8002ac4:	4b6d      	ldr	r3, [pc, #436]	; (8002c7c <extInt_Config+0x28c>)
 8002ac6:	689b      	ldr	r3, [r3, #8]
 8002ac8:	4a6c      	ldr	r2, [pc, #432]	; (8002c7c <extInt_Config+0x28c>)
 8002aca:	f043 0302 	orr.w	r3, r3, #2
 8002ace:	6093      	str	r3, [r2, #8]
		break;
 8002ad0:	f000 bd7f 	b.w	80035d2 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOD)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	689b      	ldr	r3, [r3, #8]
 8002ada:	4a6c      	ldr	r2, [pc, #432]	; (8002c8c <extInt_Config+0x29c>)
 8002adc:	4293      	cmp	r3, r2
 8002ade:	d107      	bne.n	8002af0 <extInt_Config+0x100>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI0_PD);
 8002ae0:	4b66      	ldr	r3, [pc, #408]	; (8002c7c <extInt_Config+0x28c>)
 8002ae2:	689b      	ldr	r3, [r3, #8]
 8002ae4:	4a65      	ldr	r2, [pc, #404]	; (8002c7c <extInt_Config+0x28c>)
 8002ae6:	f043 0303 	orr.w	r3, r3, #3
 8002aea:	6093      	str	r3, [r2, #8]
		break;
 8002aec:	f000 bd71 	b.w	80035d2 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOE)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	689b      	ldr	r3, [r3, #8]
 8002af6:	4a66      	ldr	r2, [pc, #408]	; (8002c90 <extInt_Config+0x2a0>)
 8002af8:	4293      	cmp	r3, r2
 8002afa:	d107      	bne.n	8002b0c <extInt_Config+0x11c>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI0_PE);
 8002afc:	4b5f      	ldr	r3, [pc, #380]	; (8002c7c <extInt_Config+0x28c>)
 8002afe:	689b      	ldr	r3, [r3, #8]
 8002b00:	4a5e      	ldr	r2, [pc, #376]	; (8002c7c <extInt_Config+0x28c>)
 8002b02:	f043 0304 	orr.w	r3, r3, #4
 8002b06:	6093      	str	r3, [r2, #8]
		break;
 8002b08:	f000 bd63 	b.w	80035d2 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOH)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	689b      	ldr	r3, [r3, #8]
 8002b12:	4a60      	ldr	r2, [pc, #384]	; (8002c94 <extInt_Config+0x2a4>)
 8002b14:	4293      	cmp	r3, r2
 8002b16:	d107      	bne.n	8002b28 <extInt_Config+0x138>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI0_PH);
 8002b18:	4b58      	ldr	r3, [pc, #352]	; (8002c7c <extInt_Config+0x28c>)
 8002b1a:	689b      	ldr	r3, [r3, #8]
 8002b1c:	4a57      	ldr	r2, [pc, #348]	; (8002c7c <extInt_Config+0x28c>)
 8002b1e:	f043 0307 	orr.w	r3, r3, #7
 8002b22:	6093      	str	r3, [r2, #8]
		break;
 8002b24:	f000 bd55 	b.w	80035d2 <extInt_Config+0xbe2>
			__NOP();
 8002b28:	bf00      	nop
		break;
 8002b2a:	f000 bd52 	b.w	80035d2 <extInt_Config+0xbe2>
	//----------------Configuracion EXTI1-----------------
	case 1:
	{
		/*Limpiamos la posicion correspondiente a la configuracion del PIN_1
		en el EXTICR*/
		SYSCFG->EXTICR[0] &= ~(0xF<<SYSCFG_EXTICR1_EXTI1_Pos);
 8002b2e:	4b53      	ldr	r3, [pc, #332]	; (8002c7c <extInt_Config+0x28c>)
 8002b30:	689b      	ldr	r3, [r3, #8]
 8002b32:	4a52      	ldr	r2, [pc, #328]	; (8002c7c <extInt_Config+0x28c>)
 8002b34:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002b38:	6093      	str	r3, [r2, #8]

		//Seleccionamos el valor a cargar deacuerdo al puerto establecido
		if(extiConfig->pGPIOHandler->pGPIOx == GPIOA)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	689b      	ldr	r3, [r3, #8]
 8002b40:	4a4f      	ldr	r2, [pc, #316]	; (8002c80 <extInt_Config+0x290>)
 8002b42:	4293      	cmp	r3, r2
 8002b44:	d105      	bne.n	8002b52 <extInt_Config+0x162>
		{
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI1_PA);
 8002b46:	4b4d      	ldr	r3, [pc, #308]	; (8002c7c <extInt_Config+0x28c>)
 8002b48:	4a4c      	ldr	r2, [pc, #304]	; (8002c7c <extInt_Config+0x28c>)
 8002b4a:	689b      	ldr	r3, [r3, #8]
 8002b4c:	6093      	str	r3, [r2, #8]
		}
		else
		{
			__NOP();
		}
		break;
 8002b4e:	f000 bd40 	b.w	80035d2 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOB)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	689b      	ldr	r3, [r3, #8]
 8002b58:	4a4a      	ldr	r2, [pc, #296]	; (8002c84 <extInt_Config+0x294>)
 8002b5a:	4293      	cmp	r3, r2
 8002b5c:	d107      	bne.n	8002b6e <extInt_Config+0x17e>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI1_PB);
 8002b5e:	4b47      	ldr	r3, [pc, #284]	; (8002c7c <extInt_Config+0x28c>)
 8002b60:	689b      	ldr	r3, [r3, #8]
 8002b62:	4a46      	ldr	r2, [pc, #280]	; (8002c7c <extInt_Config+0x28c>)
 8002b64:	f043 0310 	orr.w	r3, r3, #16
 8002b68:	6093      	str	r3, [r2, #8]
		break;
 8002b6a:	f000 bd32 	b.w	80035d2 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOC)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	689b      	ldr	r3, [r3, #8]
 8002b74:	4a44      	ldr	r2, [pc, #272]	; (8002c88 <extInt_Config+0x298>)
 8002b76:	4293      	cmp	r3, r2
 8002b78:	d107      	bne.n	8002b8a <extInt_Config+0x19a>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI1_PC);
 8002b7a:	4b40      	ldr	r3, [pc, #256]	; (8002c7c <extInt_Config+0x28c>)
 8002b7c:	689b      	ldr	r3, [r3, #8]
 8002b7e:	4a3f      	ldr	r2, [pc, #252]	; (8002c7c <extInt_Config+0x28c>)
 8002b80:	f043 0320 	orr.w	r3, r3, #32
 8002b84:	6093      	str	r3, [r2, #8]
		break;
 8002b86:	f000 bd24 	b.w	80035d2 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOD)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	689b      	ldr	r3, [r3, #8]
 8002b90:	4a3e      	ldr	r2, [pc, #248]	; (8002c8c <extInt_Config+0x29c>)
 8002b92:	4293      	cmp	r3, r2
 8002b94:	d107      	bne.n	8002ba6 <extInt_Config+0x1b6>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI1_PD);
 8002b96:	4b39      	ldr	r3, [pc, #228]	; (8002c7c <extInt_Config+0x28c>)
 8002b98:	689b      	ldr	r3, [r3, #8]
 8002b9a:	4a38      	ldr	r2, [pc, #224]	; (8002c7c <extInt_Config+0x28c>)
 8002b9c:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8002ba0:	6093      	str	r3, [r2, #8]
		break;
 8002ba2:	f000 bd16 	b.w	80035d2 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOE)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	689b      	ldr	r3, [r3, #8]
 8002bac:	4a38      	ldr	r2, [pc, #224]	; (8002c90 <extInt_Config+0x2a0>)
 8002bae:	4293      	cmp	r3, r2
 8002bb0:	d107      	bne.n	8002bc2 <extInt_Config+0x1d2>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI1_PE);
 8002bb2:	4b32      	ldr	r3, [pc, #200]	; (8002c7c <extInt_Config+0x28c>)
 8002bb4:	689b      	ldr	r3, [r3, #8]
 8002bb6:	4a31      	ldr	r2, [pc, #196]	; (8002c7c <extInt_Config+0x28c>)
 8002bb8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002bbc:	6093      	str	r3, [r2, #8]
		break;
 8002bbe:	f000 bd08 	b.w	80035d2 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOH)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	689b      	ldr	r3, [r3, #8]
 8002bc8:	4a32      	ldr	r2, [pc, #200]	; (8002c94 <extInt_Config+0x2a4>)
 8002bca:	4293      	cmp	r3, r2
 8002bcc:	d107      	bne.n	8002bde <extInt_Config+0x1ee>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI1_PH);
 8002bce:	4b2b      	ldr	r3, [pc, #172]	; (8002c7c <extInt_Config+0x28c>)
 8002bd0:	689b      	ldr	r3, [r3, #8]
 8002bd2:	4a2a      	ldr	r2, [pc, #168]	; (8002c7c <extInt_Config+0x28c>)
 8002bd4:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8002bd8:	6093      	str	r3, [r2, #8]
		break;
 8002bda:	f000 bcfa 	b.w	80035d2 <extInt_Config+0xbe2>
			__NOP();
 8002bde:	bf00      	nop
		break;
 8002be0:	f000 bcf7 	b.w	80035d2 <extInt_Config+0xbe2>
	//----------------Configuracion EXTI2-----------------
	case 2:
	{
		/*Limpiamos la posicion correspondiente a la configuracion del PIN_2
		en el EXTICR*/
		SYSCFG->EXTICR[0] &= ~(0xF<<SYSCFG_EXTICR1_EXTI2_Pos);
 8002be4:	4b25      	ldr	r3, [pc, #148]	; (8002c7c <extInt_Config+0x28c>)
 8002be6:	689b      	ldr	r3, [r3, #8]
 8002be8:	4a24      	ldr	r2, [pc, #144]	; (8002c7c <extInt_Config+0x28c>)
 8002bea:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002bee:	6093      	str	r3, [r2, #8]

		//Seleccionamos el valor a cargar deacuerdo al puerto establecido
		if(extiConfig->pGPIOHandler->pGPIOx == GPIOA)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	689b      	ldr	r3, [r3, #8]
 8002bf6:	4a22      	ldr	r2, [pc, #136]	; (8002c80 <extInt_Config+0x290>)
 8002bf8:	4293      	cmp	r3, r2
 8002bfa:	d105      	bne.n	8002c08 <extInt_Config+0x218>
		{
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI2_PA);
 8002bfc:	4b1f      	ldr	r3, [pc, #124]	; (8002c7c <extInt_Config+0x28c>)
 8002bfe:	4a1f      	ldr	r2, [pc, #124]	; (8002c7c <extInt_Config+0x28c>)
 8002c00:	689b      	ldr	r3, [r3, #8]
 8002c02:	6093      	str	r3, [r2, #8]
		}
		else
		{
			__NOP();
		}
		break;
 8002c04:	f000 bce5 	b.w	80035d2 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOB)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	689b      	ldr	r3, [r3, #8]
 8002c0e:	4a1d      	ldr	r2, [pc, #116]	; (8002c84 <extInt_Config+0x294>)
 8002c10:	4293      	cmp	r3, r2
 8002c12:	d107      	bne.n	8002c24 <extInt_Config+0x234>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI2_PB);
 8002c14:	4b19      	ldr	r3, [pc, #100]	; (8002c7c <extInt_Config+0x28c>)
 8002c16:	689b      	ldr	r3, [r3, #8]
 8002c18:	4a18      	ldr	r2, [pc, #96]	; (8002c7c <extInt_Config+0x28c>)
 8002c1a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c1e:	6093      	str	r3, [r2, #8]
		break;
 8002c20:	f000 bcd7 	b.w	80035d2 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOC)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	689b      	ldr	r3, [r3, #8]
 8002c2a:	4a17      	ldr	r2, [pc, #92]	; (8002c88 <extInt_Config+0x298>)
 8002c2c:	4293      	cmp	r3, r2
 8002c2e:	d107      	bne.n	8002c40 <extInt_Config+0x250>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI2_PC);
 8002c30:	4b12      	ldr	r3, [pc, #72]	; (8002c7c <extInt_Config+0x28c>)
 8002c32:	689b      	ldr	r3, [r3, #8]
 8002c34:	4a11      	ldr	r2, [pc, #68]	; (8002c7c <extInt_Config+0x28c>)
 8002c36:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002c3a:	6093      	str	r3, [r2, #8]
		break;
 8002c3c:	f000 bcc9 	b.w	80035d2 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOD)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	689b      	ldr	r3, [r3, #8]
 8002c46:	4a11      	ldr	r2, [pc, #68]	; (8002c8c <extInt_Config+0x29c>)
 8002c48:	4293      	cmp	r3, r2
 8002c4a:	d107      	bne.n	8002c5c <extInt_Config+0x26c>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI2_PD);
 8002c4c:	4b0b      	ldr	r3, [pc, #44]	; (8002c7c <extInt_Config+0x28c>)
 8002c4e:	689b      	ldr	r3, [r3, #8]
 8002c50:	4a0a      	ldr	r2, [pc, #40]	; (8002c7c <extInt_Config+0x28c>)
 8002c52:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8002c56:	6093      	str	r3, [r2, #8]
		break;
 8002c58:	f000 bcbb 	b.w	80035d2 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOE)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	689b      	ldr	r3, [r3, #8]
 8002c62:	4a0b      	ldr	r2, [pc, #44]	; (8002c90 <extInt_Config+0x2a0>)
 8002c64:	4293      	cmp	r3, r2
 8002c66:	d117      	bne.n	8002c98 <extInt_Config+0x2a8>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI2_PE);
 8002c68:	4b04      	ldr	r3, [pc, #16]	; (8002c7c <extInt_Config+0x28c>)
 8002c6a:	689b      	ldr	r3, [r3, #8]
 8002c6c:	4a03      	ldr	r2, [pc, #12]	; (8002c7c <extInt_Config+0x28c>)
 8002c6e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002c72:	6093      	str	r3, [r2, #8]
		break;
 8002c74:	f000 bcad 	b.w	80035d2 <extInt_Config+0xbe2>
 8002c78:	40023800 	.word	0x40023800
 8002c7c:	40013800 	.word	0x40013800
 8002c80:	40020000 	.word	0x40020000
 8002c84:	40020400 	.word	0x40020400
 8002c88:	40020800 	.word	0x40020800
 8002c8c:	40020c00 	.word	0x40020c00
 8002c90:	40021000 	.word	0x40021000
 8002c94:	40021c00 	.word	0x40021c00
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOH)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	689b      	ldr	r3, [r3, #8]
 8002c9e:	4a8a      	ldr	r2, [pc, #552]	; (8002ec8 <extInt_Config+0x4d8>)
 8002ca0:	4293      	cmp	r3, r2
 8002ca2:	d107      	bne.n	8002cb4 <extInt_Config+0x2c4>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI2_PH);
 8002ca4:	4b89      	ldr	r3, [pc, #548]	; (8002ecc <extInt_Config+0x4dc>)
 8002ca6:	689b      	ldr	r3, [r3, #8]
 8002ca8:	4a88      	ldr	r2, [pc, #544]	; (8002ecc <extInt_Config+0x4dc>)
 8002caa:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002cae:	6093      	str	r3, [r2, #8]
		break;
 8002cb0:	f000 bc8f 	b.w	80035d2 <extInt_Config+0xbe2>
			__NOP();
 8002cb4:	bf00      	nop
		break;
 8002cb6:	f000 bc8c 	b.w	80035d2 <extInt_Config+0xbe2>
	//----------------Configuracion EXTI3-----------------
	case 3:
	{
		/*Limpiamos la posicion correspondiente a la configuracion del PIN_3
		en el EXTICR*/
		SYSCFG->EXTICR[0] &= ~(0xF<<SYSCFG_EXTICR1_EXTI3_Pos);
 8002cba:	4b84      	ldr	r3, [pc, #528]	; (8002ecc <extInt_Config+0x4dc>)
 8002cbc:	689b      	ldr	r3, [r3, #8]
 8002cbe:	4a83      	ldr	r2, [pc, #524]	; (8002ecc <extInt_Config+0x4dc>)
 8002cc0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002cc4:	6093      	str	r3, [r2, #8]

		//Seleccionamos el valor a cargar deacuerdo al puerto establecido
		if(extiConfig->pGPIOHandler->pGPIOx == GPIOA)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	689b      	ldr	r3, [r3, #8]
 8002ccc:	4a80      	ldr	r2, [pc, #512]	; (8002ed0 <extInt_Config+0x4e0>)
 8002cce:	4293      	cmp	r3, r2
 8002cd0:	d105      	bne.n	8002cde <extInt_Config+0x2ee>
		{
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI3_PA);
 8002cd2:	4b7e      	ldr	r3, [pc, #504]	; (8002ecc <extInt_Config+0x4dc>)
 8002cd4:	4a7d      	ldr	r2, [pc, #500]	; (8002ecc <extInt_Config+0x4dc>)
 8002cd6:	689b      	ldr	r3, [r3, #8]
 8002cd8:	6093      	str	r3, [r2, #8]
		}
		else
		{
			__NOP();
		}
		break;
 8002cda:	f000 bc7a 	b.w	80035d2 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOB)
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	689b      	ldr	r3, [r3, #8]
 8002ce4:	4a7b      	ldr	r2, [pc, #492]	; (8002ed4 <extInt_Config+0x4e4>)
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	d107      	bne.n	8002cfa <extInt_Config+0x30a>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI3_PB);
 8002cea:	4b78      	ldr	r3, [pc, #480]	; (8002ecc <extInt_Config+0x4dc>)
 8002cec:	689b      	ldr	r3, [r3, #8]
 8002cee:	4a77      	ldr	r2, [pc, #476]	; (8002ecc <extInt_Config+0x4dc>)
 8002cf0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002cf4:	6093      	str	r3, [r2, #8]
		break;
 8002cf6:	f000 bc6c 	b.w	80035d2 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOC)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	689b      	ldr	r3, [r3, #8]
 8002d00:	4a75      	ldr	r2, [pc, #468]	; (8002ed8 <extInt_Config+0x4e8>)
 8002d02:	4293      	cmp	r3, r2
 8002d04:	d107      	bne.n	8002d16 <extInt_Config+0x326>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI3_PC);
 8002d06:	4b71      	ldr	r3, [pc, #452]	; (8002ecc <extInt_Config+0x4dc>)
 8002d08:	689b      	ldr	r3, [r3, #8]
 8002d0a:	4a70      	ldr	r2, [pc, #448]	; (8002ecc <extInt_Config+0x4dc>)
 8002d0c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002d10:	6093      	str	r3, [r2, #8]
		break;
 8002d12:	f000 bc5e 	b.w	80035d2 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOD)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	689b      	ldr	r3, [r3, #8]
 8002d1c:	4a6f      	ldr	r2, [pc, #444]	; (8002edc <extInt_Config+0x4ec>)
 8002d1e:	4293      	cmp	r3, r2
 8002d20:	d107      	bne.n	8002d32 <extInt_Config+0x342>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI3_PD);
 8002d22:	4b6a      	ldr	r3, [pc, #424]	; (8002ecc <extInt_Config+0x4dc>)
 8002d24:	689b      	ldr	r3, [r3, #8]
 8002d26:	4a69      	ldr	r2, [pc, #420]	; (8002ecc <extInt_Config+0x4dc>)
 8002d28:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 8002d2c:	6093      	str	r3, [r2, #8]
		break;
 8002d2e:	f000 bc50 	b.w	80035d2 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOE)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	689b      	ldr	r3, [r3, #8]
 8002d38:	4a69      	ldr	r2, [pc, #420]	; (8002ee0 <extInt_Config+0x4f0>)
 8002d3a:	4293      	cmp	r3, r2
 8002d3c:	d107      	bne.n	8002d4e <extInt_Config+0x35e>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI3_PE);
 8002d3e:	4b63      	ldr	r3, [pc, #396]	; (8002ecc <extInt_Config+0x4dc>)
 8002d40:	689b      	ldr	r3, [r3, #8]
 8002d42:	4a62      	ldr	r2, [pc, #392]	; (8002ecc <extInt_Config+0x4dc>)
 8002d44:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002d48:	6093      	str	r3, [r2, #8]
		break;
 8002d4a:	f000 bc42 	b.w	80035d2 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOH)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	689b      	ldr	r3, [r3, #8]
 8002d54:	4a5c      	ldr	r2, [pc, #368]	; (8002ec8 <extInt_Config+0x4d8>)
 8002d56:	4293      	cmp	r3, r2
 8002d58:	d107      	bne.n	8002d6a <extInt_Config+0x37a>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI3_PH);
 8002d5a:	4b5c      	ldr	r3, [pc, #368]	; (8002ecc <extInt_Config+0x4dc>)
 8002d5c:	689b      	ldr	r3, [r3, #8]
 8002d5e:	4a5b      	ldr	r2, [pc, #364]	; (8002ecc <extInt_Config+0x4dc>)
 8002d60:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 8002d64:	6093      	str	r3, [r2, #8]
		break;
 8002d66:	f000 bc34 	b.w	80035d2 <extInt_Config+0xbe2>
			__NOP();
 8002d6a:	bf00      	nop
		break;
 8002d6c:	f000 bc31 	b.w	80035d2 <extInt_Config+0xbe2>
	//----------------Configuracion EXTI4-----------------
	case 4:
	{
		/*Limpiamos la posicion correspondiente a la configuracion del PIN_4
		en el EXTICR*/
		SYSCFG->EXTICR[1] &= ~(0xF<<SYSCFG_EXTICR2_EXTI4_Pos);
 8002d70:	4b56      	ldr	r3, [pc, #344]	; (8002ecc <extInt_Config+0x4dc>)
 8002d72:	68db      	ldr	r3, [r3, #12]
 8002d74:	4a55      	ldr	r2, [pc, #340]	; (8002ecc <extInt_Config+0x4dc>)
 8002d76:	f023 030f 	bic.w	r3, r3, #15
 8002d7a:	60d3      	str	r3, [r2, #12]

		//Seleccionamos el valor a cargar deacuerdo al puerto establecido
		if(extiConfig->pGPIOHandler->pGPIOx == GPIOA)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	689b      	ldr	r3, [r3, #8]
 8002d82:	4a53      	ldr	r2, [pc, #332]	; (8002ed0 <extInt_Config+0x4e0>)
 8002d84:	4293      	cmp	r3, r2
 8002d86:	d105      	bne.n	8002d94 <extInt_Config+0x3a4>
		{
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI4_PA);
 8002d88:	4b50      	ldr	r3, [pc, #320]	; (8002ecc <extInt_Config+0x4dc>)
 8002d8a:	4a50      	ldr	r2, [pc, #320]	; (8002ecc <extInt_Config+0x4dc>)
 8002d8c:	68db      	ldr	r3, [r3, #12]
 8002d8e:	60d3      	str	r3, [r2, #12]
		}
		else
		{
			__NOP();
		}
		break;
 8002d90:	f000 bc1f 	b.w	80035d2 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOB)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	689b      	ldr	r3, [r3, #8]
 8002d9a:	4a4e      	ldr	r2, [pc, #312]	; (8002ed4 <extInt_Config+0x4e4>)
 8002d9c:	4293      	cmp	r3, r2
 8002d9e:	d107      	bne.n	8002db0 <extInt_Config+0x3c0>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI4_PB);
 8002da0:	4b4a      	ldr	r3, [pc, #296]	; (8002ecc <extInt_Config+0x4dc>)
 8002da2:	68db      	ldr	r3, [r3, #12]
 8002da4:	4a49      	ldr	r2, [pc, #292]	; (8002ecc <extInt_Config+0x4dc>)
 8002da6:	f043 0301 	orr.w	r3, r3, #1
 8002daa:	60d3      	str	r3, [r2, #12]
		break;
 8002dac:	f000 bc11 	b.w	80035d2 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOC)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	689b      	ldr	r3, [r3, #8]
 8002db6:	4a48      	ldr	r2, [pc, #288]	; (8002ed8 <extInt_Config+0x4e8>)
 8002db8:	4293      	cmp	r3, r2
 8002dba:	d107      	bne.n	8002dcc <extInt_Config+0x3dc>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI4_PC);
 8002dbc:	4b43      	ldr	r3, [pc, #268]	; (8002ecc <extInt_Config+0x4dc>)
 8002dbe:	68db      	ldr	r3, [r3, #12]
 8002dc0:	4a42      	ldr	r2, [pc, #264]	; (8002ecc <extInt_Config+0x4dc>)
 8002dc2:	f043 0302 	orr.w	r3, r3, #2
 8002dc6:	60d3      	str	r3, [r2, #12]
		break;
 8002dc8:	f000 bc03 	b.w	80035d2 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOD)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	689b      	ldr	r3, [r3, #8]
 8002dd2:	4a42      	ldr	r2, [pc, #264]	; (8002edc <extInt_Config+0x4ec>)
 8002dd4:	4293      	cmp	r3, r2
 8002dd6:	d106      	bne.n	8002de6 <extInt_Config+0x3f6>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI4_PD);
 8002dd8:	4b3c      	ldr	r3, [pc, #240]	; (8002ecc <extInt_Config+0x4dc>)
 8002dda:	68db      	ldr	r3, [r3, #12]
 8002ddc:	4a3b      	ldr	r2, [pc, #236]	; (8002ecc <extInt_Config+0x4dc>)
 8002dde:	f043 0303 	orr.w	r3, r3, #3
 8002de2:	60d3      	str	r3, [r2, #12]
		break;
 8002de4:	e3f5      	b.n	80035d2 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOE)
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	689b      	ldr	r3, [r3, #8]
 8002dec:	4a3c      	ldr	r2, [pc, #240]	; (8002ee0 <extInt_Config+0x4f0>)
 8002dee:	4293      	cmp	r3, r2
 8002df0:	d106      	bne.n	8002e00 <extInt_Config+0x410>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI4_PE);
 8002df2:	4b36      	ldr	r3, [pc, #216]	; (8002ecc <extInt_Config+0x4dc>)
 8002df4:	68db      	ldr	r3, [r3, #12]
 8002df6:	4a35      	ldr	r2, [pc, #212]	; (8002ecc <extInt_Config+0x4dc>)
 8002df8:	f043 0304 	orr.w	r3, r3, #4
 8002dfc:	60d3      	str	r3, [r2, #12]
		break;
 8002dfe:	e3e8      	b.n	80035d2 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOH)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	689b      	ldr	r3, [r3, #8]
 8002e06:	4a30      	ldr	r2, [pc, #192]	; (8002ec8 <extInt_Config+0x4d8>)
 8002e08:	4293      	cmp	r3, r2
 8002e0a:	d106      	bne.n	8002e1a <extInt_Config+0x42a>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI4_PH);
 8002e0c:	4b2f      	ldr	r3, [pc, #188]	; (8002ecc <extInt_Config+0x4dc>)
 8002e0e:	68db      	ldr	r3, [r3, #12]
 8002e10:	4a2e      	ldr	r2, [pc, #184]	; (8002ecc <extInt_Config+0x4dc>)
 8002e12:	f043 0307 	orr.w	r3, r3, #7
 8002e16:	60d3      	str	r3, [r2, #12]
		break;
 8002e18:	e3db      	b.n	80035d2 <extInt_Config+0xbe2>
			__NOP();
 8002e1a:	bf00      	nop
		break;
 8002e1c:	e3d9      	b.n	80035d2 <extInt_Config+0xbe2>
	//----------------Configuracion EXTI5-----------------
	case 5:
	{
		/*Limpiamos la posicion correspondiente a la configuracion del PIN_5
		en el EXTICR*/
		SYSCFG->EXTICR[1] &= ~(0xF<<SYSCFG_EXTICR2_EXTI5_Pos);
 8002e1e:	4b2b      	ldr	r3, [pc, #172]	; (8002ecc <extInt_Config+0x4dc>)
 8002e20:	68db      	ldr	r3, [r3, #12]
 8002e22:	4a2a      	ldr	r2, [pc, #168]	; (8002ecc <extInt_Config+0x4dc>)
 8002e24:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002e28:	60d3      	str	r3, [r2, #12]

		//Seleccionamos el valor a cargar deacuerdo al puerto establecido
		if(extiConfig->pGPIOHandler->pGPIOx == GPIOA)
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	689b      	ldr	r3, [r3, #8]
 8002e30:	4a27      	ldr	r2, [pc, #156]	; (8002ed0 <extInt_Config+0x4e0>)
 8002e32:	4293      	cmp	r3, r2
 8002e34:	d104      	bne.n	8002e40 <extInt_Config+0x450>
		{
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI5_PA);
 8002e36:	4b25      	ldr	r3, [pc, #148]	; (8002ecc <extInt_Config+0x4dc>)
 8002e38:	4a24      	ldr	r2, [pc, #144]	; (8002ecc <extInt_Config+0x4dc>)
 8002e3a:	68db      	ldr	r3, [r3, #12]
 8002e3c:	60d3      	str	r3, [r2, #12]
		}
		else
		{
			__NOP();
		}
		break;
 8002e3e:	e3c8      	b.n	80035d2 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOB)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	689b      	ldr	r3, [r3, #8]
 8002e46:	4a23      	ldr	r2, [pc, #140]	; (8002ed4 <extInt_Config+0x4e4>)
 8002e48:	4293      	cmp	r3, r2
 8002e4a:	d106      	bne.n	8002e5a <extInt_Config+0x46a>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI5_PB);
 8002e4c:	4b1f      	ldr	r3, [pc, #124]	; (8002ecc <extInt_Config+0x4dc>)
 8002e4e:	68db      	ldr	r3, [r3, #12]
 8002e50:	4a1e      	ldr	r2, [pc, #120]	; (8002ecc <extInt_Config+0x4dc>)
 8002e52:	f043 0310 	orr.w	r3, r3, #16
 8002e56:	60d3      	str	r3, [r2, #12]
		break;
 8002e58:	e3bb      	b.n	80035d2 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOC)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	689b      	ldr	r3, [r3, #8]
 8002e60:	4a1d      	ldr	r2, [pc, #116]	; (8002ed8 <extInt_Config+0x4e8>)
 8002e62:	4293      	cmp	r3, r2
 8002e64:	d106      	bne.n	8002e74 <extInt_Config+0x484>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI5_PC);
 8002e66:	4b19      	ldr	r3, [pc, #100]	; (8002ecc <extInt_Config+0x4dc>)
 8002e68:	68db      	ldr	r3, [r3, #12]
 8002e6a:	4a18      	ldr	r2, [pc, #96]	; (8002ecc <extInt_Config+0x4dc>)
 8002e6c:	f043 0320 	orr.w	r3, r3, #32
 8002e70:	60d3      	str	r3, [r2, #12]
		break;
 8002e72:	e3ae      	b.n	80035d2 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOD)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	689b      	ldr	r3, [r3, #8]
 8002e7a:	4a18      	ldr	r2, [pc, #96]	; (8002edc <extInt_Config+0x4ec>)
 8002e7c:	4293      	cmp	r3, r2
 8002e7e:	d106      	bne.n	8002e8e <extInt_Config+0x49e>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI5_PD);
 8002e80:	4b12      	ldr	r3, [pc, #72]	; (8002ecc <extInt_Config+0x4dc>)
 8002e82:	68db      	ldr	r3, [r3, #12]
 8002e84:	4a11      	ldr	r2, [pc, #68]	; (8002ecc <extInt_Config+0x4dc>)
 8002e86:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8002e8a:	60d3      	str	r3, [r2, #12]
		break;
 8002e8c:	e3a1      	b.n	80035d2 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOE)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	689b      	ldr	r3, [r3, #8]
 8002e94:	4a12      	ldr	r2, [pc, #72]	; (8002ee0 <extInt_Config+0x4f0>)
 8002e96:	4293      	cmp	r3, r2
 8002e98:	d106      	bne.n	8002ea8 <extInt_Config+0x4b8>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI5_PE);
 8002e9a:	4b0c      	ldr	r3, [pc, #48]	; (8002ecc <extInt_Config+0x4dc>)
 8002e9c:	68db      	ldr	r3, [r3, #12]
 8002e9e:	4a0b      	ldr	r2, [pc, #44]	; (8002ecc <extInt_Config+0x4dc>)
 8002ea0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002ea4:	60d3      	str	r3, [r2, #12]
		break;
 8002ea6:	e394      	b.n	80035d2 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOH)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	689b      	ldr	r3, [r3, #8]
 8002eae:	4a06      	ldr	r2, [pc, #24]	; (8002ec8 <extInt_Config+0x4d8>)
 8002eb0:	4293      	cmp	r3, r2
 8002eb2:	d106      	bne.n	8002ec2 <extInt_Config+0x4d2>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI5_PH);
 8002eb4:	4b05      	ldr	r3, [pc, #20]	; (8002ecc <extInt_Config+0x4dc>)
 8002eb6:	68db      	ldr	r3, [r3, #12]
 8002eb8:	4a04      	ldr	r2, [pc, #16]	; (8002ecc <extInt_Config+0x4dc>)
 8002eba:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8002ebe:	60d3      	str	r3, [r2, #12]
		break;
 8002ec0:	e387      	b.n	80035d2 <extInt_Config+0xbe2>
			__NOP();
 8002ec2:	bf00      	nop
		break;
 8002ec4:	e385      	b.n	80035d2 <extInt_Config+0xbe2>
 8002ec6:	bf00      	nop
 8002ec8:	40021c00 	.word	0x40021c00
 8002ecc:	40013800 	.word	0x40013800
 8002ed0:	40020000 	.word	0x40020000
 8002ed4:	40020400 	.word	0x40020400
 8002ed8:	40020800 	.word	0x40020800
 8002edc:	40020c00 	.word	0x40020c00
 8002ee0:	40021000 	.word	0x40021000
	//----------------Configuracion EXTI6-----------------
	case 6:
	{
		/*Limpiamos la posicion correspondiente a la configuracion del PIN_6
		en el EXTICR*/
		SYSCFG->EXTICR[1] &= ~(0xF<<SYSCFG_EXTICR2_EXTI6_Pos);
 8002ee4:	4b86      	ldr	r3, [pc, #536]	; (8003100 <extInt_Config+0x710>)
 8002ee6:	68db      	ldr	r3, [r3, #12]
 8002ee8:	4a85      	ldr	r2, [pc, #532]	; (8003100 <extInt_Config+0x710>)
 8002eea:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002eee:	60d3      	str	r3, [r2, #12]

		//Seleccionamos el valor a cargar deacuerdo al puerto establecido
		if(extiConfig->pGPIOHandler->pGPIOx == GPIOA)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	689b      	ldr	r3, [r3, #8]
 8002ef6:	4a83      	ldr	r2, [pc, #524]	; (8003104 <extInt_Config+0x714>)
 8002ef8:	4293      	cmp	r3, r2
 8002efa:	d104      	bne.n	8002f06 <extInt_Config+0x516>
		{
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI6_PA);
 8002efc:	4b80      	ldr	r3, [pc, #512]	; (8003100 <extInt_Config+0x710>)
 8002efe:	4a80      	ldr	r2, [pc, #512]	; (8003100 <extInt_Config+0x710>)
 8002f00:	68db      	ldr	r3, [r3, #12]
 8002f02:	60d3      	str	r3, [r2, #12]
		}
		else
		{
			__NOP();
		}
		break;
 8002f04:	e365      	b.n	80035d2 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOB)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	689b      	ldr	r3, [r3, #8]
 8002f0c:	4a7e      	ldr	r2, [pc, #504]	; (8003108 <extInt_Config+0x718>)
 8002f0e:	4293      	cmp	r3, r2
 8002f10:	d106      	bne.n	8002f20 <extInt_Config+0x530>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI6_PB);
 8002f12:	4b7b      	ldr	r3, [pc, #492]	; (8003100 <extInt_Config+0x710>)
 8002f14:	68db      	ldr	r3, [r3, #12]
 8002f16:	4a7a      	ldr	r2, [pc, #488]	; (8003100 <extInt_Config+0x710>)
 8002f18:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f1c:	60d3      	str	r3, [r2, #12]
		break;
 8002f1e:	e358      	b.n	80035d2 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOC)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	689b      	ldr	r3, [r3, #8]
 8002f26:	4a79      	ldr	r2, [pc, #484]	; (800310c <extInt_Config+0x71c>)
 8002f28:	4293      	cmp	r3, r2
 8002f2a:	d106      	bne.n	8002f3a <extInt_Config+0x54a>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI6_PC);
 8002f2c:	4b74      	ldr	r3, [pc, #464]	; (8003100 <extInt_Config+0x710>)
 8002f2e:	68db      	ldr	r3, [r3, #12]
 8002f30:	4a73      	ldr	r2, [pc, #460]	; (8003100 <extInt_Config+0x710>)
 8002f32:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002f36:	60d3      	str	r3, [r2, #12]
		break;
 8002f38:	e34b      	b.n	80035d2 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOD)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	689b      	ldr	r3, [r3, #8]
 8002f40:	4a73      	ldr	r2, [pc, #460]	; (8003110 <extInt_Config+0x720>)
 8002f42:	4293      	cmp	r3, r2
 8002f44:	d106      	bne.n	8002f54 <extInt_Config+0x564>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI6_PD);
 8002f46:	4b6e      	ldr	r3, [pc, #440]	; (8003100 <extInt_Config+0x710>)
 8002f48:	68db      	ldr	r3, [r3, #12]
 8002f4a:	4a6d      	ldr	r2, [pc, #436]	; (8003100 <extInt_Config+0x710>)
 8002f4c:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8002f50:	60d3      	str	r3, [r2, #12]
		break;
 8002f52:	e33e      	b.n	80035d2 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOE)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	689b      	ldr	r3, [r3, #8]
 8002f5a:	4a6e      	ldr	r2, [pc, #440]	; (8003114 <extInt_Config+0x724>)
 8002f5c:	4293      	cmp	r3, r2
 8002f5e:	d106      	bne.n	8002f6e <extInt_Config+0x57e>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI6_PE);
 8002f60:	4b67      	ldr	r3, [pc, #412]	; (8003100 <extInt_Config+0x710>)
 8002f62:	68db      	ldr	r3, [r3, #12]
 8002f64:	4a66      	ldr	r2, [pc, #408]	; (8003100 <extInt_Config+0x710>)
 8002f66:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002f6a:	60d3      	str	r3, [r2, #12]
		break;
 8002f6c:	e331      	b.n	80035d2 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOH)
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	689b      	ldr	r3, [r3, #8]
 8002f74:	4a68      	ldr	r2, [pc, #416]	; (8003118 <extInt_Config+0x728>)
 8002f76:	4293      	cmp	r3, r2
 8002f78:	d106      	bne.n	8002f88 <extInt_Config+0x598>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI6_PH);
 8002f7a:	4b61      	ldr	r3, [pc, #388]	; (8003100 <extInt_Config+0x710>)
 8002f7c:	68db      	ldr	r3, [r3, #12]
 8002f7e:	4a60      	ldr	r2, [pc, #384]	; (8003100 <extInt_Config+0x710>)
 8002f80:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002f84:	60d3      	str	r3, [r2, #12]
		break;
 8002f86:	e324      	b.n	80035d2 <extInt_Config+0xbe2>
			__NOP();
 8002f88:	bf00      	nop
		break;
 8002f8a:	e322      	b.n	80035d2 <extInt_Config+0xbe2>
	//----------------Configuracion EXTI7-----------------
	case 7:
	{
		/*Limpiamos la posicion correspondiente a la configuracion del PIN_7
		en el EXTICR*/
		SYSCFG->EXTICR[1] &= ~(0xF<<SYSCFG_EXTICR2_EXTI7_Pos);
 8002f8c:	4b5c      	ldr	r3, [pc, #368]	; (8003100 <extInt_Config+0x710>)
 8002f8e:	68db      	ldr	r3, [r3, #12]
 8002f90:	4a5b      	ldr	r2, [pc, #364]	; (8003100 <extInt_Config+0x710>)
 8002f92:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002f96:	60d3      	str	r3, [r2, #12]

		//Seleccionamos el valor a cargar deacuerdo al puerto establecido
		if(extiConfig->pGPIOHandler->pGPIOx == GPIOA)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	689b      	ldr	r3, [r3, #8]
 8002f9e:	4a59      	ldr	r2, [pc, #356]	; (8003104 <extInt_Config+0x714>)
 8002fa0:	4293      	cmp	r3, r2
 8002fa2:	d104      	bne.n	8002fae <extInt_Config+0x5be>
		{
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI7_PA);
 8002fa4:	4b56      	ldr	r3, [pc, #344]	; (8003100 <extInt_Config+0x710>)
 8002fa6:	4a56      	ldr	r2, [pc, #344]	; (8003100 <extInt_Config+0x710>)
 8002fa8:	68db      	ldr	r3, [r3, #12]
 8002faa:	60d3      	str	r3, [r2, #12]
		}
		else
		{
			__NOP();
		}
		break;
 8002fac:	e311      	b.n	80035d2 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOB)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	689b      	ldr	r3, [r3, #8]
 8002fb4:	4a54      	ldr	r2, [pc, #336]	; (8003108 <extInt_Config+0x718>)
 8002fb6:	4293      	cmp	r3, r2
 8002fb8:	d106      	bne.n	8002fc8 <extInt_Config+0x5d8>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI7_PB);
 8002fba:	4b51      	ldr	r3, [pc, #324]	; (8003100 <extInt_Config+0x710>)
 8002fbc:	68db      	ldr	r3, [r3, #12]
 8002fbe:	4a50      	ldr	r2, [pc, #320]	; (8003100 <extInt_Config+0x710>)
 8002fc0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002fc4:	60d3      	str	r3, [r2, #12]
		break;
 8002fc6:	e304      	b.n	80035d2 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOC)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	689b      	ldr	r3, [r3, #8]
 8002fce:	4a4f      	ldr	r2, [pc, #316]	; (800310c <extInt_Config+0x71c>)
 8002fd0:	4293      	cmp	r3, r2
 8002fd2:	d106      	bne.n	8002fe2 <extInt_Config+0x5f2>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI7_PC);
 8002fd4:	4b4a      	ldr	r3, [pc, #296]	; (8003100 <extInt_Config+0x710>)
 8002fd6:	68db      	ldr	r3, [r3, #12]
 8002fd8:	4a49      	ldr	r2, [pc, #292]	; (8003100 <extInt_Config+0x710>)
 8002fda:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002fde:	60d3      	str	r3, [r2, #12]
		break;
 8002fe0:	e2f7      	b.n	80035d2 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOD)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	689b      	ldr	r3, [r3, #8]
 8002fe8:	4a49      	ldr	r2, [pc, #292]	; (8003110 <extInt_Config+0x720>)
 8002fea:	4293      	cmp	r3, r2
 8002fec:	d106      	bne.n	8002ffc <extInt_Config+0x60c>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI7_PD);
 8002fee:	4b44      	ldr	r3, [pc, #272]	; (8003100 <extInt_Config+0x710>)
 8002ff0:	68db      	ldr	r3, [r3, #12]
 8002ff2:	4a43      	ldr	r2, [pc, #268]	; (8003100 <extInt_Config+0x710>)
 8002ff4:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 8002ff8:	60d3      	str	r3, [r2, #12]
		break;
 8002ffa:	e2ea      	b.n	80035d2 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOE)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	689b      	ldr	r3, [r3, #8]
 8003002:	4a44      	ldr	r2, [pc, #272]	; (8003114 <extInt_Config+0x724>)
 8003004:	4293      	cmp	r3, r2
 8003006:	d106      	bne.n	8003016 <extInt_Config+0x626>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI7_PE);
 8003008:	4b3d      	ldr	r3, [pc, #244]	; (8003100 <extInt_Config+0x710>)
 800300a:	68db      	ldr	r3, [r3, #12]
 800300c:	4a3c      	ldr	r2, [pc, #240]	; (8003100 <extInt_Config+0x710>)
 800300e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003012:	60d3      	str	r3, [r2, #12]
		break;
 8003014:	e2dd      	b.n	80035d2 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOH)
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	689b      	ldr	r3, [r3, #8]
 800301c:	4a3e      	ldr	r2, [pc, #248]	; (8003118 <extInt_Config+0x728>)
 800301e:	4293      	cmp	r3, r2
 8003020:	d106      	bne.n	8003030 <extInt_Config+0x640>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI7_PH);
 8003022:	4b37      	ldr	r3, [pc, #220]	; (8003100 <extInt_Config+0x710>)
 8003024:	68db      	ldr	r3, [r3, #12]
 8003026:	4a36      	ldr	r2, [pc, #216]	; (8003100 <extInt_Config+0x710>)
 8003028:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 800302c:	60d3      	str	r3, [r2, #12]
		break;
 800302e:	e2d0      	b.n	80035d2 <extInt_Config+0xbe2>
			__NOP();
 8003030:	bf00      	nop
		break;
 8003032:	e2ce      	b.n	80035d2 <extInt_Config+0xbe2>
	//----------------Configuracion EXTI8-----------------
	case 8:
	{
		/*Limpiamos la posicion correspondiente a la configuracion del PIN_8
		en el EXTICR*/
		SYSCFG->EXTICR[2] &= ~(0xF<<SYSCFG_EXTICR3_EXTI8_Pos);
 8003034:	4b32      	ldr	r3, [pc, #200]	; (8003100 <extInt_Config+0x710>)
 8003036:	691b      	ldr	r3, [r3, #16]
 8003038:	4a31      	ldr	r2, [pc, #196]	; (8003100 <extInt_Config+0x710>)
 800303a:	f023 030f 	bic.w	r3, r3, #15
 800303e:	6113      	str	r3, [r2, #16]

		//Seleccionamos el valor a cargar deacuerdo al puerto establecido
		if(extiConfig->pGPIOHandler->pGPIOx == GPIOA)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	689b      	ldr	r3, [r3, #8]
 8003046:	4a2f      	ldr	r2, [pc, #188]	; (8003104 <extInt_Config+0x714>)
 8003048:	4293      	cmp	r3, r2
 800304a:	d104      	bne.n	8003056 <extInt_Config+0x666>
		{
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI8_PA);
 800304c:	4b2c      	ldr	r3, [pc, #176]	; (8003100 <extInt_Config+0x710>)
 800304e:	4a2c      	ldr	r2, [pc, #176]	; (8003100 <extInt_Config+0x710>)
 8003050:	691b      	ldr	r3, [r3, #16]
 8003052:	6113      	str	r3, [r2, #16]
		}
		else
		{
			__NOP();
		}
		break;
 8003054:	e2bd      	b.n	80035d2 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOB)
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	689b      	ldr	r3, [r3, #8]
 800305c:	4a2a      	ldr	r2, [pc, #168]	; (8003108 <extInt_Config+0x718>)
 800305e:	4293      	cmp	r3, r2
 8003060:	d106      	bne.n	8003070 <extInt_Config+0x680>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI8_PB);
 8003062:	4b27      	ldr	r3, [pc, #156]	; (8003100 <extInt_Config+0x710>)
 8003064:	691b      	ldr	r3, [r3, #16]
 8003066:	4a26      	ldr	r2, [pc, #152]	; (8003100 <extInt_Config+0x710>)
 8003068:	f043 0301 	orr.w	r3, r3, #1
 800306c:	6113      	str	r3, [r2, #16]
		break;
 800306e:	e2b0      	b.n	80035d2 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOC)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	689b      	ldr	r3, [r3, #8]
 8003076:	4a25      	ldr	r2, [pc, #148]	; (800310c <extInt_Config+0x71c>)
 8003078:	4293      	cmp	r3, r2
 800307a:	d106      	bne.n	800308a <extInt_Config+0x69a>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI8_PC);
 800307c:	4b20      	ldr	r3, [pc, #128]	; (8003100 <extInt_Config+0x710>)
 800307e:	691b      	ldr	r3, [r3, #16]
 8003080:	4a1f      	ldr	r2, [pc, #124]	; (8003100 <extInt_Config+0x710>)
 8003082:	f043 0302 	orr.w	r3, r3, #2
 8003086:	6113      	str	r3, [r2, #16]
		break;
 8003088:	e2a3      	b.n	80035d2 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOD)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	689b      	ldr	r3, [r3, #8]
 8003090:	4a1f      	ldr	r2, [pc, #124]	; (8003110 <extInt_Config+0x720>)
 8003092:	4293      	cmp	r3, r2
 8003094:	d106      	bne.n	80030a4 <extInt_Config+0x6b4>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI8_PD);
 8003096:	4b1a      	ldr	r3, [pc, #104]	; (8003100 <extInt_Config+0x710>)
 8003098:	691b      	ldr	r3, [r3, #16]
 800309a:	4a19      	ldr	r2, [pc, #100]	; (8003100 <extInt_Config+0x710>)
 800309c:	f043 0303 	orr.w	r3, r3, #3
 80030a0:	6113      	str	r3, [r2, #16]
		break;
 80030a2:	e296      	b.n	80035d2 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOE)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	689b      	ldr	r3, [r3, #8]
 80030aa:	4a1a      	ldr	r2, [pc, #104]	; (8003114 <extInt_Config+0x724>)
 80030ac:	4293      	cmp	r3, r2
 80030ae:	d106      	bne.n	80030be <extInt_Config+0x6ce>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI8_PE);
 80030b0:	4b13      	ldr	r3, [pc, #76]	; (8003100 <extInt_Config+0x710>)
 80030b2:	691b      	ldr	r3, [r3, #16]
 80030b4:	4a12      	ldr	r2, [pc, #72]	; (8003100 <extInt_Config+0x710>)
 80030b6:	f043 0304 	orr.w	r3, r3, #4
 80030ba:	6113      	str	r3, [r2, #16]
		break;
 80030bc:	e289      	b.n	80035d2 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOH)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	689b      	ldr	r3, [r3, #8]
 80030c4:	4a14      	ldr	r2, [pc, #80]	; (8003118 <extInt_Config+0x728>)
 80030c6:	4293      	cmp	r3, r2
 80030c8:	d106      	bne.n	80030d8 <extInt_Config+0x6e8>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI8_PH);
 80030ca:	4b0d      	ldr	r3, [pc, #52]	; (8003100 <extInt_Config+0x710>)
 80030cc:	691b      	ldr	r3, [r3, #16]
 80030ce:	4a0c      	ldr	r2, [pc, #48]	; (8003100 <extInt_Config+0x710>)
 80030d0:	f043 0307 	orr.w	r3, r3, #7
 80030d4:	6113      	str	r3, [r2, #16]
		break;
 80030d6:	e27c      	b.n	80035d2 <extInt_Config+0xbe2>
			__NOP();
 80030d8:	bf00      	nop
		break;
 80030da:	e27a      	b.n	80035d2 <extInt_Config+0xbe2>
	//----------------Configuracion EXTI9------------------
	case 9:
	{
		/*Limpiamos la posicion correspondiente a la configuracion del PIN_9
		en el EXTICR*/
		SYSCFG->EXTICR[2] &= ~(0xF<<SYSCFG_EXTICR3_EXTI9_Pos);
 80030dc:	4b08      	ldr	r3, [pc, #32]	; (8003100 <extInt_Config+0x710>)
 80030de:	691b      	ldr	r3, [r3, #16]
 80030e0:	4a07      	ldr	r2, [pc, #28]	; (8003100 <extInt_Config+0x710>)
 80030e2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80030e6:	6113      	str	r3, [r2, #16]

		//Seleccionamos el valor a cargar deacuerdo al puerto establecido
		if(extiConfig->pGPIOHandler->pGPIOx == GPIOA)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	689b      	ldr	r3, [r3, #8]
 80030ee:	4a05      	ldr	r2, [pc, #20]	; (8003104 <extInt_Config+0x714>)
 80030f0:	4293      	cmp	r3, r2
 80030f2:	d113      	bne.n	800311c <extInt_Config+0x72c>
		{
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI9_PA);
 80030f4:	4b02      	ldr	r3, [pc, #8]	; (8003100 <extInt_Config+0x710>)
 80030f6:	4a02      	ldr	r2, [pc, #8]	; (8003100 <extInt_Config+0x710>)
 80030f8:	691b      	ldr	r3, [r3, #16]
 80030fa:	6113      	str	r3, [r2, #16]
		}
		else
		{
			__NOP();
		}
		break;
 80030fc:	e269      	b.n	80035d2 <extInt_Config+0xbe2>
 80030fe:	bf00      	nop
 8003100:	40013800 	.word	0x40013800
 8003104:	40020000 	.word	0x40020000
 8003108:	40020400 	.word	0x40020400
 800310c:	40020800 	.word	0x40020800
 8003110:	40020c00 	.word	0x40020c00
 8003114:	40021000 	.word	0x40021000
 8003118:	40021c00 	.word	0x40021c00
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOB)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	689b      	ldr	r3, [r3, #8]
 8003122:	4a83      	ldr	r2, [pc, #524]	; (8003330 <extInt_Config+0x940>)
 8003124:	4293      	cmp	r3, r2
 8003126:	d106      	bne.n	8003136 <extInt_Config+0x746>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI9_PB);
 8003128:	4b82      	ldr	r3, [pc, #520]	; (8003334 <extInt_Config+0x944>)
 800312a:	691b      	ldr	r3, [r3, #16]
 800312c:	4a81      	ldr	r2, [pc, #516]	; (8003334 <extInt_Config+0x944>)
 800312e:	f043 0310 	orr.w	r3, r3, #16
 8003132:	6113      	str	r3, [r2, #16]
		break;
 8003134:	e24d      	b.n	80035d2 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOC)
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	689b      	ldr	r3, [r3, #8]
 800313c:	4a7e      	ldr	r2, [pc, #504]	; (8003338 <extInt_Config+0x948>)
 800313e:	4293      	cmp	r3, r2
 8003140:	d106      	bne.n	8003150 <extInt_Config+0x760>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI9_PC);
 8003142:	4b7c      	ldr	r3, [pc, #496]	; (8003334 <extInt_Config+0x944>)
 8003144:	691b      	ldr	r3, [r3, #16]
 8003146:	4a7b      	ldr	r2, [pc, #492]	; (8003334 <extInt_Config+0x944>)
 8003148:	f043 0320 	orr.w	r3, r3, #32
 800314c:	6113      	str	r3, [r2, #16]
		break;
 800314e:	e240      	b.n	80035d2 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOD)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	689b      	ldr	r3, [r3, #8]
 8003156:	4a79      	ldr	r2, [pc, #484]	; (800333c <extInt_Config+0x94c>)
 8003158:	4293      	cmp	r3, r2
 800315a:	d106      	bne.n	800316a <extInt_Config+0x77a>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI9_PD);
 800315c:	4b75      	ldr	r3, [pc, #468]	; (8003334 <extInt_Config+0x944>)
 800315e:	691b      	ldr	r3, [r3, #16]
 8003160:	4a74      	ldr	r2, [pc, #464]	; (8003334 <extInt_Config+0x944>)
 8003162:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8003166:	6113      	str	r3, [r2, #16]
		break;
 8003168:	e233      	b.n	80035d2 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOE)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	689b      	ldr	r3, [r3, #8]
 8003170:	4a73      	ldr	r2, [pc, #460]	; (8003340 <extInt_Config+0x950>)
 8003172:	4293      	cmp	r3, r2
 8003174:	d106      	bne.n	8003184 <extInt_Config+0x794>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI9_PE);
 8003176:	4b6f      	ldr	r3, [pc, #444]	; (8003334 <extInt_Config+0x944>)
 8003178:	691b      	ldr	r3, [r3, #16]
 800317a:	4a6e      	ldr	r2, [pc, #440]	; (8003334 <extInt_Config+0x944>)
 800317c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003180:	6113      	str	r3, [r2, #16]
		break;
 8003182:	e226      	b.n	80035d2 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOH)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	689b      	ldr	r3, [r3, #8]
 800318a:	4a6e      	ldr	r2, [pc, #440]	; (8003344 <extInt_Config+0x954>)
 800318c:	4293      	cmp	r3, r2
 800318e:	d106      	bne.n	800319e <extInt_Config+0x7ae>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI9_PH);
 8003190:	4b68      	ldr	r3, [pc, #416]	; (8003334 <extInt_Config+0x944>)
 8003192:	691b      	ldr	r3, [r3, #16]
 8003194:	4a67      	ldr	r2, [pc, #412]	; (8003334 <extInt_Config+0x944>)
 8003196:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 800319a:	6113      	str	r3, [r2, #16]
		break;
 800319c:	e219      	b.n	80035d2 <extInt_Config+0xbe2>
			__NOP();
 800319e:	bf00      	nop
		break;
 80031a0:	e217      	b.n	80035d2 <extInt_Config+0xbe2>
	//----------------Configuracion EXTI10-----------------
	case 10:
	{
		/*Limpiamos la posicion correspondiente a la configuracion del PIN_10
		en el EXTICR*/
		SYSCFG->EXTICR[2] &= ~(0xF<<SYSCFG_EXTICR3_EXTI10_Pos);
 80031a2:	4b64      	ldr	r3, [pc, #400]	; (8003334 <extInt_Config+0x944>)
 80031a4:	691b      	ldr	r3, [r3, #16]
 80031a6:	4a63      	ldr	r2, [pc, #396]	; (8003334 <extInt_Config+0x944>)
 80031a8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80031ac:	6113      	str	r3, [r2, #16]

		//Seleccionamos el valor a cargar deacuerdo al puerto establecido
		if(extiConfig->pGPIOHandler->pGPIOx == GPIOA)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	689b      	ldr	r3, [r3, #8]
 80031b4:	4a64      	ldr	r2, [pc, #400]	; (8003348 <extInt_Config+0x958>)
 80031b6:	4293      	cmp	r3, r2
 80031b8:	d104      	bne.n	80031c4 <extInt_Config+0x7d4>
		{
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI10_PA);
 80031ba:	4b5e      	ldr	r3, [pc, #376]	; (8003334 <extInt_Config+0x944>)
 80031bc:	4a5d      	ldr	r2, [pc, #372]	; (8003334 <extInt_Config+0x944>)
 80031be:	691b      	ldr	r3, [r3, #16]
 80031c0:	6113      	str	r3, [r2, #16]
		}
		else
		{
			__NOP();
		}
		break;
 80031c2:	e206      	b.n	80035d2 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOB)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	689b      	ldr	r3, [r3, #8]
 80031ca:	4a59      	ldr	r2, [pc, #356]	; (8003330 <extInt_Config+0x940>)
 80031cc:	4293      	cmp	r3, r2
 80031ce:	d106      	bne.n	80031de <extInt_Config+0x7ee>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI10_PB);
 80031d0:	4b58      	ldr	r3, [pc, #352]	; (8003334 <extInt_Config+0x944>)
 80031d2:	691b      	ldr	r3, [r3, #16]
 80031d4:	4a57      	ldr	r2, [pc, #348]	; (8003334 <extInt_Config+0x944>)
 80031d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031da:	6113      	str	r3, [r2, #16]
		break;
 80031dc:	e1f9      	b.n	80035d2 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOC)
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	689b      	ldr	r3, [r3, #8]
 80031e4:	4a54      	ldr	r2, [pc, #336]	; (8003338 <extInt_Config+0x948>)
 80031e6:	4293      	cmp	r3, r2
 80031e8:	d106      	bne.n	80031f8 <extInt_Config+0x808>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI10_PC);
 80031ea:	4b52      	ldr	r3, [pc, #328]	; (8003334 <extInt_Config+0x944>)
 80031ec:	691b      	ldr	r3, [r3, #16]
 80031ee:	4a51      	ldr	r2, [pc, #324]	; (8003334 <extInt_Config+0x944>)
 80031f0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80031f4:	6113      	str	r3, [r2, #16]
		break;
 80031f6:	e1ec      	b.n	80035d2 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOD)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	689b      	ldr	r3, [r3, #8]
 80031fe:	4a4f      	ldr	r2, [pc, #316]	; (800333c <extInt_Config+0x94c>)
 8003200:	4293      	cmp	r3, r2
 8003202:	d106      	bne.n	8003212 <extInt_Config+0x822>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI10_PD);
 8003204:	4b4b      	ldr	r3, [pc, #300]	; (8003334 <extInt_Config+0x944>)
 8003206:	691b      	ldr	r3, [r3, #16]
 8003208:	4a4a      	ldr	r2, [pc, #296]	; (8003334 <extInt_Config+0x944>)
 800320a:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800320e:	6113      	str	r3, [r2, #16]
		break;
 8003210:	e1df      	b.n	80035d2 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOE)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	689b      	ldr	r3, [r3, #8]
 8003218:	4a49      	ldr	r2, [pc, #292]	; (8003340 <extInt_Config+0x950>)
 800321a:	4293      	cmp	r3, r2
 800321c:	d106      	bne.n	800322c <extInt_Config+0x83c>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI10_PE);
 800321e:	4b45      	ldr	r3, [pc, #276]	; (8003334 <extInt_Config+0x944>)
 8003220:	691b      	ldr	r3, [r3, #16]
 8003222:	4a44      	ldr	r2, [pc, #272]	; (8003334 <extInt_Config+0x944>)
 8003224:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003228:	6113      	str	r3, [r2, #16]
		break;
 800322a:	e1d2      	b.n	80035d2 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOH)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	689b      	ldr	r3, [r3, #8]
 8003232:	4a44      	ldr	r2, [pc, #272]	; (8003344 <extInt_Config+0x954>)
 8003234:	4293      	cmp	r3, r2
 8003236:	d106      	bne.n	8003246 <extInt_Config+0x856>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI10_PH);
 8003238:	4b3e      	ldr	r3, [pc, #248]	; (8003334 <extInt_Config+0x944>)
 800323a:	691b      	ldr	r3, [r3, #16]
 800323c:	4a3d      	ldr	r2, [pc, #244]	; (8003334 <extInt_Config+0x944>)
 800323e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003242:	6113      	str	r3, [r2, #16]
		break;
 8003244:	e1c5      	b.n	80035d2 <extInt_Config+0xbe2>
			__NOP();
 8003246:	bf00      	nop
		break;
 8003248:	e1c3      	b.n	80035d2 <extInt_Config+0xbe2>
	//----------------Configuracion EXTI11-----------------
	case 11:
	{
		/*Limpiamos la posicion correspondiente a la configuracion del PIN_11
		en el EXTICR*/
		SYSCFG->EXTICR[2] &= ~(0xF<<SYSCFG_EXTICR3_EXTI11_Pos);
 800324a:	4b3a      	ldr	r3, [pc, #232]	; (8003334 <extInt_Config+0x944>)
 800324c:	691b      	ldr	r3, [r3, #16]
 800324e:	4a39      	ldr	r2, [pc, #228]	; (8003334 <extInt_Config+0x944>)
 8003250:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003254:	6113      	str	r3, [r2, #16]

		//Seleccionamos el valor a cargar deacuerdo al puerto establecido
		if(extiConfig->pGPIOHandler->pGPIOx == GPIOA)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	689b      	ldr	r3, [r3, #8]
 800325c:	4a3a      	ldr	r2, [pc, #232]	; (8003348 <extInt_Config+0x958>)
 800325e:	4293      	cmp	r3, r2
 8003260:	d104      	bne.n	800326c <extInt_Config+0x87c>
		{
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI11_PA);
 8003262:	4b34      	ldr	r3, [pc, #208]	; (8003334 <extInt_Config+0x944>)
 8003264:	4a33      	ldr	r2, [pc, #204]	; (8003334 <extInt_Config+0x944>)
 8003266:	691b      	ldr	r3, [r3, #16]
 8003268:	6113      	str	r3, [r2, #16]
		}
		else
		{
			__NOP();
		}
		break;
 800326a:	e1b2      	b.n	80035d2 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOB)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	689b      	ldr	r3, [r3, #8]
 8003272:	4a2f      	ldr	r2, [pc, #188]	; (8003330 <extInt_Config+0x940>)
 8003274:	4293      	cmp	r3, r2
 8003276:	d106      	bne.n	8003286 <extInt_Config+0x896>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI11_PB);
 8003278:	4b2e      	ldr	r3, [pc, #184]	; (8003334 <extInt_Config+0x944>)
 800327a:	691b      	ldr	r3, [r3, #16]
 800327c:	4a2d      	ldr	r2, [pc, #180]	; (8003334 <extInt_Config+0x944>)
 800327e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003282:	6113      	str	r3, [r2, #16]
		break;
 8003284:	e1a5      	b.n	80035d2 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOC)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	689b      	ldr	r3, [r3, #8]
 800328c:	4a2a      	ldr	r2, [pc, #168]	; (8003338 <extInt_Config+0x948>)
 800328e:	4293      	cmp	r3, r2
 8003290:	d106      	bne.n	80032a0 <extInt_Config+0x8b0>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI11_PC);
 8003292:	4b28      	ldr	r3, [pc, #160]	; (8003334 <extInt_Config+0x944>)
 8003294:	691b      	ldr	r3, [r3, #16]
 8003296:	4a27      	ldr	r2, [pc, #156]	; (8003334 <extInt_Config+0x944>)
 8003298:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800329c:	6113      	str	r3, [r2, #16]
		break;
 800329e:	e198      	b.n	80035d2 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOD)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	689b      	ldr	r3, [r3, #8]
 80032a6:	4a25      	ldr	r2, [pc, #148]	; (800333c <extInt_Config+0x94c>)
 80032a8:	4293      	cmp	r3, r2
 80032aa:	d106      	bne.n	80032ba <extInt_Config+0x8ca>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI11_PD);
 80032ac:	4b21      	ldr	r3, [pc, #132]	; (8003334 <extInt_Config+0x944>)
 80032ae:	691b      	ldr	r3, [r3, #16]
 80032b0:	4a20      	ldr	r2, [pc, #128]	; (8003334 <extInt_Config+0x944>)
 80032b2:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 80032b6:	6113      	str	r3, [r2, #16]
		break;
 80032b8:	e18b      	b.n	80035d2 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOE)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	689b      	ldr	r3, [r3, #8]
 80032c0:	4a1f      	ldr	r2, [pc, #124]	; (8003340 <extInt_Config+0x950>)
 80032c2:	4293      	cmp	r3, r2
 80032c4:	d106      	bne.n	80032d4 <extInt_Config+0x8e4>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI11_PE);
 80032c6:	4b1b      	ldr	r3, [pc, #108]	; (8003334 <extInt_Config+0x944>)
 80032c8:	691b      	ldr	r3, [r3, #16]
 80032ca:	4a1a      	ldr	r2, [pc, #104]	; (8003334 <extInt_Config+0x944>)
 80032cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80032d0:	6113      	str	r3, [r2, #16]
		break;
 80032d2:	e17e      	b.n	80035d2 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOH)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	689b      	ldr	r3, [r3, #8]
 80032da:	4a1a      	ldr	r2, [pc, #104]	; (8003344 <extInt_Config+0x954>)
 80032dc:	4293      	cmp	r3, r2
 80032de:	d106      	bne.n	80032ee <extInt_Config+0x8fe>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI11_PH);
 80032e0:	4b14      	ldr	r3, [pc, #80]	; (8003334 <extInt_Config+0x944>)
 80032e2:	691b      	ldr	r3, [r3, #16]
 80032e4:	4a13      	ldr	r2, [pc, #76]	; (8003334 <extInt_Config+0x944>)
 80032e6:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 80032ea:	6113      	str	r3, [r2, #16]
		break;
 80032ec:	e171      	b.n	80035d2 <extInt_Config+0xbe2>
			__NOP();
 80032ee:	bf00      	nop
		break;
 80032f0:	e16f      	b.n	80035d2 <extInt_Config+0xbe2>
	//----------------Configuracion EXTI12-----------------
	case 12:
	{
		/*Limpiamos la posicion correspondiente a la configuracion del PIN_12
		en el EXTICR*/
		SYSCFG->EXTICR[3] &= ~(0xF<<SYSCFG_EXTICR4_EXTI12_Pos);
 80032f2:	4b10      	ldr	r3, [pc, #64]	; (8003334 <extInt_Config+0x944>)
 80032f4:	695b      	ldr	r3, [r3, #20]
 80032f6:	4a0f      	ldr	r2, [pc, #60]	; (8003334 <extInt_Config+0x944>)
 80032f8:	f023 030f 	bic.w	r3, r3, #15
 80032fc:	6153      	str	r3, [r2, #20]

		//Seleccionamos el valor a cargar deacuerdo al puerto establecido
		if(extiConfig->pGPIOHandler->pGPIOx == GPIOA)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	689b      	ldr	r3, [r3, #8]
 8003304:	4a10      	ldr	r2, [pc, #64]	; (8003348 <extInt_Config+0x958>)
 8003306:	4293      	cmp	r3, r2
 8003308:	d104      	bne.n	8003314 <extInt_Config+0x924>
		{
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI12_PA);
 800330a:	4b0a      	ldr	r3, [pc, #40]	; (8003334 <extInt_Config+0x944>)
 800330c:	4a09      	ldr	r2, [pc, #36]	; (8003334 <extInt_Config+0x944>)
 800330e:	695b      	ldr	r3, [r3, #20]
 8003310:	6153      	str	r3, [r2, #20]
		}
		else
		{
			__NOP();
		}
		break;
 8003312:	e15e      	b.n	80035d2 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOB)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	689b      	ldr	r3, [r3, #8]
 800331a:	4a05      	ldr	r2, [pc, #20]	; (8003330 <extInt_Config+0x940>)
 800331c:	4293      	cmp	r3, r2
 800331e:	d115      	bne.n	800334c <extInt_Config+0x95c>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI12_PB);
 8003320:	4b04      	ldr	r3, [pc, #16]	; (8003334 <extInt_Config+0x944>)
 8003322:	695b      	ldr	r3, [r3, #20]
 8003324:	4a03      	ldr	r2, [pc, #12]	; (8003334 <extInt_Config+0x944>)
 8003326:	f043 0301 	orr.w	r3, r3, #1
 800332a:	6153      	str	r3, [r2, #20]
		break;
 800332c:	e151      	b.n	80035d2 <extInt_Config+0xbe2>
 800332e:	bf00      	nop
 8003330:	40020400 	.word	0x40020400
 8003334:	40013800 	.word	0x40013800
 8003338:	40020800 	.word	0x40020800
 800333c:	40020c00 	.word	0x40020c00
 8003340:	40021000 	.word	0x40021000
 8003344:	40021c00 	.word	0x40021c00
 8003348:	40020000 	.word	0x40020000
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOC)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	689b      	ldr	r3, [r3, #8]
 8003352:	4a83      	ldr	r2, [pc, #524]	; (8003560 <extInt_Config+0xb70>)
 8003354:	4293      	cmp	r3, r2
 8003356:	d106      	bne.n	8003366 <extInt_Config+0x976>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI12_PC);
 8003358:	4b82      	ldr	r3, [pc, #520]	; (8003564 <extInt_Config+0xb74>)
 800335a:	695b      	ldr	r3, [r3, #20]
 800335c:	4a81      	ldr	r2, [pc, #516]	; (8003564 <extInt_Config+0xb74>)
 800335e:	f043 0302 	orr.w	r3, r3, #2
 8003362:	6153      	str	r3, [r2, #20]
		break;
 8003364:	e135      	b.n	80035d2 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOD)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	689b      	ldr	r3, [r3, #8]
 800336c:	4a7e      	ldr	r2, [pc, #504]	; (8003568 <extInt_Config+0xb78>)
 800336e:	4293      	cmp	r3, r2
 8003370:	d106      	bne.n	8003380 <extInt_Config+0x990>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI12_PD);
 8003372:	4b7c      	ldr	r3, [pc, #496]	; (8003564 <extInt_Config+0xb74>)
 8003374:	695b      	ldr	r3, [r3, #20]
 8003376:	4a7b      	ldr	r2, [pc, #492]	; (8003564 <extInt_Config+0xb74>)
 8003378:	f043 0303 	orr.w	r3, r3, #3
 800337c:	6153      	str	r3, [r2, #20]
		break;
 800337e:	e128      	b.n	80035d2 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOE)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	689b      	ldr	r3, [r3, #8]
 8003386:	4a79      	ldr	r2, [pc, #484]	; (800356c <extInt_Config+0xb7c>)
 8003388:	4293      	cmp	r3, r2
 800338a:	d106      	bne.n	800339a <extInt_Config+0x9aa>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI12_PE);
 800338c:	4b75      	ldr	r3, [pc, #468]	; (8003564 <extInt_Config+0xb74>)
 800338e:	695b      	ldr	r3, [r3, #20]
 8003390:	4a74      	ldr	r2, [pc, #464]	; (8003564 <extInt_Config+0xb74>)
 8003392:	f043 0304 	orr.w	r3, r3, #4
 8003396:	6153      	str	r3, [r2, #20]
		break;
 8003398:	e11b      	b.n	80035d2 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOH)
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	689b      	ldr	r3, [r3, #8]
 80033a0:	4a73      	ldr	r2, [pc, #460]	; (8003570 <extInt_Config+0xb80>)
 80033a2:	4293      	cmp	r3, r2
 80033a4:	d106      	bne.n	80033b4 <extInt_Config+0x9c4>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI12_PH);
 80033a6:	4b6f      	ldr	r3, [pc, #444]	; (8003564 <extInt_Config+0xb74>)
 80033a8:	695b      	ldr	r3, [r3, #20]
 80033aa:	4a6e      	ldr	r2, [pc, #440]	; (8003564 <extInt_Config+0xb74>)
 80033ac:	f043 0307 	orr.w	r3, r3, #7
 80033b0:	6153      	str	r3, [r2, #20]
		break;
 80033b2:	e10e      	b.n	80035d2 <extInt_Config+0xbe2>
			__NOP();
 80033b4:	bf00      	nop
		break;
 80033b6:	e10c      	b.n	80035d2 <extInt_Config+0xbe2>
	//----------------Configuracion EXTI13-----------------
	case 13:
	{
		/*Limpiamos la posicion correspondiente a la configuracion del PIN_13
		en el EXTICR*/
		SYSCFG->EXTICR[3] &= ~(0xF<<SYSCFG_EXTICR4_EXTI13_Pos);
 80033b8:	4b6a      	ldr	r3, [pc, #424]	; (8003564 <extInt_Config+0xb74>)
 80033ba:	695b      	ldr	r3, [r3, #20]
 80033bc:	4a69      	ldr	r2, [pc, #420]	; (8003564 <extInt_Config+0xb74>)
 80033be:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80033c2:	6153      	str	r3, [r2, #20]

		//Seleccionamos el valor a cargar deacuerdo al puerto establecido
		if(extiConfig->pGPIOHandler->pGPIOx == GPIOA)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	689b      	ldr	r3, [r3, #8]
 80033ca:	4a6a      	ldr	r2, [pc, #424]	; (8003574 <extInt_Config+0xb84>)
 80033cc:	4293      	cmp	r3, r2
 80033ce:	d104      	bne.n	80033da <extInt_Config+0x9ea>
		{
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI13_PA);
 80033d0:	4b64      	ldr	r3, [pc, #400]	; (8003564 <extInt_Config+0xb74>)
 80033d2:	4a64      	ldr	r2, [pc, #400]	; (8003564 <extInt_Config+0xb74>)
 80033d4:	695b      	ldr	r3, [r3, #20]
 80033d6:	6153      	str	r3, [r2, #20]
		}
		else
		{
			__NOP();
		}
		break;
 80033d8:	e0fb      	b.n	80035d2 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOB)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	689b      	ldr	r3, [r3, #8]
 80033e0:	4a65      	ldr	r2, [pc, #404]	; (8003578 <extInt_Config+0xb88>)
 80033e2:	4293      	cmp	r3, r2
 80033e4:	d106      	bne.n	80033f4 <extInt_Config+0xa04>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI13_PB);
 80033e6:	4b5f      	ldr	r3, [pc, #380]	; (8003564 <extInt_Config+0xb74>)
 80033e8:	695b      	ldr	r3, [r3, #20]
 80033ea:	4a5e      	ldr	r2, [pc, #376]	; (8003564 <extInt_Config+0xb74>)
 80033ec:	f043 0310 	orr.w	r3, r3, #16
 80033f0:	6153      	str	r3, [r2, #20]
		break;
 80033f2:	e0ee      	b.n	80035d2 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOC)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	689b      	ldr	r3, [r3, #8]
 80033fa:	4a59      	ldr	r2, [pc, #356]	; (8003560 <extInt_Config+0xb70>)
 80033fc:	4293      	cmp	r3, r2
 80033fe:	d106      	bne.n	800340e <extInt_Config+0xa1e>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI13_PC);
 8003400:	4b58      	ldr	r3, [pc, #352]	; (8003564 <extInt_Config+0xb74>)
 8003402:	695b      	ldr	r3, [r3, #20]
 8003404:	4a57      	ldr	r2, [pc, #348]	; (8003564 <extInt_Config+0xb74>)
 8003406:	f043 0320 	orr.w	r3, r3, #32
 800340a:	6153      	str	r3, [r2, #20]
		break;
 800340c:	e0e1      	b.n	80035d2 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOD)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	689b      	ldr	r3, [r3, #8]
 8003414:	4a54      	ldr	r2, [pc, #336]	; (8003568 <extInt_Config+0xb78>)
 8003416:	4293      	cmp	r3, r2
 8003418:	d106      	bne.n	8003428 <extInt_Config+0xa38>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI13_PD);
 800341a:	4b52      	ldr	r3, [pc, #328]	; (8003564 <extInt_Config+0xb74>)
 800341c:	695b      	ldr	r3, [r3, #20]
 800341e:	4a51      	ldr	r2, [pc, #324]	; (8003564 <extInt_Config+0xb74>)
 8003420:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8003424:	6153      	str	r3, [r2, #20]
		break;
 8003426:	e0d4      	b.n	80035d2 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOE)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	689b      	ldr	r3, [r3, #8]
 800342e:	4a4f      	ldr	r2, [pc, #316]	; (800356c <extInt_Config+0xb7c>)
 8003430:	4293      	cmp	r3, r2
 8003432:	d106      	bne.n	8003442 <extInt_Config+0xa52>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI13_PE);
 8003434:	4b4b      	ldr	r3, [pc, #300]	; (8003564 <extInt_Config+0xb74>)
 8003436:	695b      	ldr	r3, [r3, #20]
 8003438:	4a4a      	ldr	r2, [pc, #296]	; (8003564 <extInt_Config+0xb74>)
 800343a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800343e:	6153      	str	r3, [r2, #20]
		break;
 8003440:	e0c7      	b.n	80035d2 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOH)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	689b      	ldr	r3, [r3, #8]
 8003448:	4a49      	ldr	r2, [pc, #292]	; (8003570 <extInt_Config+0xb80>)
 800344a:	4293      	cmp	r3, r2
 800344c:	d106      	bne.n	800345c <extInt_Config+0xa6c>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI13_PH);
 800344e:	4b45      	ldr	r3, [pc, #276]	; (8003564 <extInt_Config+0xb74>)
 8003450:	695b      	ldr	r3, [r3, #20]
 8003452:	4a44      	ldr	r2, [pc, #272]	; (8003564 <extInt_Config+0xb74>)
 8003454:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8003458:	6153      	str	r3, [r2, #20]
		break;
 800345a:	e0ba      	b.n	80035d2 <extInt_Config+0xbe2>
			__NOP();
 800345c:	bf00      	nop
		break;
 800345e:	e0b8      	b.n	80035d2 <extInt_Config+0xbe2>
	//----------------Configuracion EXTI14-----------------
	case 14:
	{
		/*Limpiamos la posicion correspondiente a la configuracion del PIN_14
		en el EXTICR*/
		SYSCFG->EXTICR[3] &= ~(0xF<<SYSCFG_EXTICR4_EXTI14_Pos);
 8003460:	4b40      	ldr	r3, [pc, #256]	; (8003564 <extInt_Config+0xb74>)
 8003462:	695b      	ldr	r3, [r3, #20]
 8003464:	4a3f      	ldr	r2, [pc, #252]	; (8003564 <extInt_Config+0xb74>)
 8003466:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800346a:	6153      	str	r3, [r2, #20]

		//Seleccionamos el valor a cargar deacuerdo al puerto establecido
		if(extiConfig->pGPIOHandler->pGPIOx == GPIOA)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	689b      	ldr	r3, [r3, #8]
 8003472:	4a40      	ldr	r2, [pc, #256]	; (8003574 <extInt_Config+0xb84>)
 8003474:	4293      	cmp	r3, r2
 8003476:	d104      	bne.n	8003482 <extInt_Config+0xa92>
		{
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI14_PA);
 8003478:	4b3a      	ldr	r3, [pc, #232]	; (8003564 <extInt_Config+0xb74>)
 800347a:	4a3a      	ldr	r2, [pc, #232]	; (8003564 <extInt_Config+0xb74>)
 800347c:	695b      	ldr	r3, [r3, #20]
 800347e:	6153      	str	r3, [r2, #20]
		}
		else
		{
			__NOP();
		}
		break;
 8003480:	e0a7      	b.n	80035d2 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOB)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	689b      	ldr	r3, [r3, #8]
 8003488:	4a3b      	ldr	r2, [pc, #236]	; (8003578 <extInt_Config+0xb88>)
 800348a:	4293      	cmp	r3, r2
 800348c:	d106      	bne.n	800349c <extInt_Config+0xaac>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI14_PB);
 800348e:	4b35      	ldr	r3, [pc, #212]	; (8003564 <extInt_Config+0xb74>)
 8003490:	695b      	ldr	r3, [r3, #20]
 8003492:	4a34      	ldr	r2, [pc, #208]	; (8003564 <extInt_Config+0xb74>)
 8003494:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003498:	6153      	str	r3, [r2, #20]
		break;
 800349a:	e09a      	b.n	80035d2 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOC)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	689b      	ldr	r3, [r3, #8]
 80034a2:	4a2f      	ldr	r2, [pc, #188]	; (8003560 <extInt_Config+0xb70>)
 80034a4:	4293      	cmp	r3, r2
 80034a6:	d106      	bne.n	80034b6 <extInt_Config+0xac6>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI14_PC);
 80034a8:	4b2e      	ldr	r3, [pc, #184]	; (8003564 <extInt_Config+0xb74>)
 80034aa:	695b      	ldr	r3, [r3, #20]
 80034ac:	4a2d      	ldr	r2, [pc, #180]	; (8003564 <extInt_Config+0xb74>)
 80034ae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80034b2:	6153      	str	r3, [r2, #20]
		break;
 80034b4:	e08d      	b.n	80035d2 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOD)
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	689b      	ldr	r3, [r3, #8]
 80034bc:	4a2a      	ldr	r2, [pc, #168]	; (8003568 <extInt_Config+0xb78>)
 80034be:	4293      	cmp	r3, r2
 80034c0:	d106      	bne.n	80034d0 <extInt_Config+0xae0>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI14_PD);
 80034c2:	4b28      	ldr	r3, [pc, #160]	; (8003564 <extInt_Config+0xb74>)
 80034c4:	695b      	ldr	r3, [r3, #20]
 80034c6:	4a27      	ldr	r2, [pc, #156]	; (8003564 <extInt_Config+0xb74>)
 80034c8:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80034cc:	6153      	str	r3, [r2, #20]
		break;
 80034ce:	e080      	b.n	80035d2 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOE)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	689b      	ldr	r3, [r3, #8]
 80034d6:	4a25      	ldr	r2, [pc, #148]	; (800356c <extInt_Config+0xb7c>)
 80034d8:	4293      	cmp	r3, r2
 80034da:	d106      	bne.n	80034ea <extInt_Config+0xafa>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI14_PE);
 80034dc:	4b21      	ldr	r3, [pc, #132]	; (8003564 <extInt_Config+0xb74>)
 80034de:	695b      	ldr	r3, [r3, #20]
 80034e0:	4a20      	ldr	r2, [pc, #128]	; (8003564 <extInt_Config+0xb74>)
 80034e2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80034e6:	6153      	str	r3, [r2, #20]
		break;
 80034e8:	e073      	b.n	80035d2 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOH)
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	689b      	ldr	r3, [r3, #8]
 80034f0:	4a1f      	ldr	r2, [pc, #124]	; (8003570 <extInt_Config+0xb80>)
 80034f2:	4293      	cmp	r3, r2
 80034f4:	d106      	bne.n	8003504 <extInt_Config+0xb14>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI14_PH);
 80034f6:	4b1b      	ldr	r3, [pc, #108]	; (8003564 <extInt_Config+0xb74>)
 80034f8:	695b      	ldr	r3, [r3, #20]
 80034fa:	4a1a      	ldr	r2, [pc, #104]	; (8003564 <extInt_Config+0xb74>)
 80034fc:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003500:	6153      	str	r3, [r2, #20]
		break;
 8003502:	e066      	b.n	80035d2 <extInt_Config+0xbe2>
			__NOP();
 8003504:	bf00      	nop
		break;
 8003506:	e064      	b.n	80035d2 <extInt_Config+0xbe2>
	//----------------Configuracion EXTI15-----------------
	case 15:
	{
		/*Limpiamos la posicion correspondiente a la configuracion del PIN_15
		en el EXTICR*/
		SYSCFG->EXTICR[3] &= ~(0xF<<SYSCFG_EXTICR4_EXTI15_Pos);
 8003508:	4b16      	ldr	r3, [pc, #88]	; (8003564 <extInt_Config+0xb74>)
 800350a:	695b      	ldr	r3, [r3, #20]
 800350c:	4a15      	ldr	r2, [pc, #84]	; (8003564 <extInt_Config+0xb74>)
 800350e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003512:	6153      	str	r3, [r2, #20]

		//Seleccionamos el valor a cargar deacuerdo al puerto establecido
		if(extiConfig->pGPIOHandler->pGPIOx == GPIOA)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	689b      	ldr	r3, [r3, #8]
 800351a:	4a16      	ldr	r2, [pc, #88]	; (8003574 <extInt_Config+0xb84>)
 800351c:	4293      	cmp	r3, r2
 800351e:	d104      	bne.n	800352a <extInt_Config+0xb3a>
		{
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI15_PA);
 8003520:	4b10      	ldr	r3, [pc, #64]	; (8003564 <extInt_Config+0xb74>)
 8003522:	4a10      	ldr	r2, [pc, #64]	; (8003564 <extInt_Config+0xb74>)
 8003524:	695b      	ldr	r3, [r3, #20]
 8003526:	6153      	str	r3, [r2, #20]
		}
		else
		{
			__NOP();
		}
		break;
 8003528:	e053      	b.n	80035d2 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOB)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	689b      	ldr	r3, [r3, #8]
 8003530:	4a11      	ldr	r2, [pc, #68]	; (8003578 <extInt_Config+0xb88>)
 8003532:	4293      	cmp	r3, r2
 8003534:	d106      	bne.n	8003544 <extInt_Config+0xb54>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI15_PB);
 8003536:	4b0b      	ldr	r3, [pc, #44]	; (8003564 <extInt_Config+0xb74>)
 8003538:	695b      	ldr	r3, [r3, #20]
 800353a:	4a0a      	ldr	r2, [pc, #40]	; (8003564 <extInt_Config+0xb74>)
 800353c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003540:	6153      	str	r3, [r2, #20]
		break;
 8003542:	e046      	b.n	80035d2 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOC)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	689b      	ldr	r3, [r3, #8]
 800354a:	4a05      	ldr	r2, [pc, #20]	; (8003560 <extInt_Config+0xb70>)
 800354c:	4293      	cmp	r3, r2
 800354e:	d115      	bne.n	800357c <extInt_Config+0xb8c>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI15_PC);
 8003550:	4b04      	ldr	r3, [pc, #16]	; (8003564 <extInt_Config+0xb74>)
 8003552:	695b      	ldr	r3, [r3, #20]
 8003554:	4a03      	ldr	r2, [pc, #12]	; (8003564 <extInt_Config+0xb74>)
 8003556:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800355a:	6153      	str	r3, [r2, #20]
		break;
 800355c:	e039      	b.n	80035d2 <extInt_Config+0xbe2>
 800355e:	bf00      	nop
 8003560:	40020800 	.word	0x40020800
 8003564:	40013800 	.word	0x40013800
 8003568:	40020c00 	.word	0x40020c00
 800356c:	40021000 	.word	0x40021000
 8003570:	40021c00 	.word	0x40021c00
 8003574:	40020000 	.word	0x40020000
 8003578:	40020400 	.word	0x40020400
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOD)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	689b      	ldr	r3, [r3, #8]
 8003582:	4a9d      	ldr	r2, [pc, #628]	; (80037f8 <extInt_Config+0xe08>)
 8003584:	4293      	cmp	r3, r2
 8003586:	d106      	bne.n	8003596 <extInt_Config+0xba6>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI15_PD);
 8003588:	4b9c      	ldr	r3, [pc, #624]	; (80037fc <extInt_Config+0xe0c>)
 800358a:	695b      	ldr	r3, [r3, #20]
 800358c:	4a9b      	ldr	r2, [pc, #620]	; (80037fc <extInt_Config+0xe0c>)
 800358e:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 8003592:	6153      	str	r3, [r2, #20]
		break;
 8003594:	e01d      	b.n	80035d2 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOE)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	689b      	ldr	r3, [r3, #8]
 800359c:	4a98      	ldr	r2, [pc, #608]	; (8003800 <extInt_Config+0xe10>)
 800359e:	4293      	cmp	r3, r2
 80035a0:	d106      	bne.n	80035b0 <extInt_Config+0xbc0>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI15_PE);
 80035a2:	4b96      	ldr	r3, [pc, #600]	; (80037fc <extInt_Config+0xe0c>)
 80035a4:	695b      	ldr	r3, [r3, #20]
 80035a6:	4a95      	ldr	r2, [pc, #596]	; (80037fc <extInt_Config+0xe0c>)
 80035a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80035ac:	6153      	str	r3, [r2, #20]
		break;
 80035ae:	e010      	b.n	80035d2 <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOH)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	689b      	ldr	r3, [r3, #8]
 80035b6:	4a93      	ldr	r2, [pc, #588]	; (8003804 <extInt_Config+0xe14>)
 80035b8:	4293      	cmp	r3, r2
 80035ba:	d106      	bne.n	80035ca <extInt_Config+0xbda>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI15_PH);
 80035bc:	4b8f      	ldr	r3, [pc, #572]	; (80037fc <extInt_Config+0xe0c>)
 80035be:	695b      	ldr	r3, [r3, #20]
 80035c0:	4a8e      	ldr	r2, [pc, #568]	; (80037fc <extInt_Config+0xe0c>)
 80035c2:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 80035c6:	6153      	str	r3, [r2, #20]
		break;
 80035c8:	e003      	b.n	80035d2 <extInt_Config+0xbe2>
			__NOP();
 80035ca:	bf00      	nop
		break;
 80035cc:	e001      	b.n	80035d2 <extInt_Config+0xbe2>
	}

	default: {
		__NOP();
 80035ce:	bf00      	nop
		break;
 80035d0:	bf00      	nop
	//Registro: EXTI_RTSR		 Registros donde los primeros 16 bit corresponden a los
	//Registro: EXTI_FTSR        16 EXTIx
	//Registro: EXTI_IMR

	//-------a)Selecionamos el tipo de flanco---------
	if(extiConfig->edgeType == EXTERNAL_INTERRUPP_RISING_EDGE)
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	791b      	ldrb	r3, [r3, #4]
 80035d6:	2b01      	cmp	r3, #1
 80035d8:	d126      	bne.n	8003628 <extInt_Config+0xc38>
	{
		EXTI->FTSR &= ~(0b1<<extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 80035da:	4b8b      	ldr	r3, [pc, #556]	; (8003808 <extInt_Config+0xe18>)
 80035dc:	68db      	ldr	r3, [r3, #12]
 80035de:	687a      	ldr	r2, [r7, #4]
 80035e0:	6812      	ldr	r2, [r2, #0]
 80035e2:	7812      	ldrb	r2, [r2, #0]
 80035e4:	4611      	mov	r1, r2
 80035e6:	2201      	movs	r2, #1
 80035e8:	408a      	lsls	r2, r1
 80035ea:	43d2      	mvns	r2, r2
 80035ec:	4611      	mov	r1, r2
 80035ee:	4a86      	ldr	r2, [pc, #536]	; (8003808 <extInt_Config+0xe18>)
 80035f0:	400b      	ands	r3, r1
 80035f2:	60d3      	str	r3, [r2, #12]
		EXTI->RTSR &= ~(0b1<<extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 80035f4:	4b84      	ldr	r3, [pc, #528]	; (8003808 <extInt_Config+0xe18>)
 80035f6:	689b      	ldr	r3, [r3, #8]
 80035f8:	687a      	ldr	r2, [r7, #4]
 80035fa:	6812      	ldr	r2, [r2, #0]
 80035fc:	7812      	ldrb	r2, [r2, #0]
 80035fe:	4611      	mov	r1, r2
 8003600:	2201      	movs	r2, #1
 8003602:	408a      	lsls	r2, r1
 8003604:	43d2      	mvns	r2, r2
 8003606:	4611      	mov	r1, r2
 8003608:	4a7f      	ldr	r2, [pc, #508]	; (8003808 <extInt_Config+0xe18>)
 800360a:	400b      	ands	r3, r1
 800360c:	6093      	str	r3, [r2, #8]
		EXTI->RTSR |= (0b1<<extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 800360e:	4b7e      	ldr	r3, [pc, #504]	; (8003808 <extInt_Config+0xe18>)
 8003610:	689b      	ldr	r3, [r3, #8]
 8003612:	687a      	ldr	r2, [r7, #4]
 8003614:	6812      	ldr	r2, [r2, #0]
 8003616:	7812      	ldrb	r2, [r2, #0]
 8003618:	4611      	mov	r1, r2
 800361a:	2201      	movs	r2, #1
 800361c:	408a      	lsls	r2, r1
 800361e:	4611      	mov	r1, r2
 8003620:	4a79      	ldr	r2, [pc, #484]	; (8003808 <extInt_Config+0xe18>)
 8003622:	430b      	orrs	r3, r1
 8003624:	6093      	str	r3, [r2, #8]
 8003626:	e05c      	b.n	80036e2 <extInt_Config+0xcf2>
	}
	else if (extiConfig->edgeType == EXTERNAL_INTERRUPP_FALLING_EDGE)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	791b      	ldrb	r3, [r3, #4]
 800362c:	2b00      	cmp	r3, #0
 800362e:	d126      	bne.n	800367e <extInt_Config+0xc8e>
	{
		EXTI->FTSR &= ~(0b1<<extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8003630:	4b75      	ldr	r3, [pc, #468]	; (8003808 <extInt_Config+0xe18>)
 8003632:	68db      	ldr	r3, [r3, #12]
 8003634:	687a      	ldr	r2, [r7, #4]
 8003636:	6812      	ldr	r2, [r2, #0]
 8003638:	7812      	ldrb	r2, [r2, #0]
 800363a:	4611      	mov	r1, r2
 800363c:	2201      	movs	r2, #1
 800363e:	408a      	lsls	r2, r1
 8003640:	43d2      	mvns	r2, r2
 8003642:	4611      	mov	r1, r2
 8003644:	4a70      	ldr	r2, [pc, #448]	; (8003808 <extInt_Config+0xe18>)
 8003646:	400b      	ands	r3, r1
 8003648:	60d3      	str	r3, [r2, #12]
		EXTI->RTSR &= ~(0b1<<extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 800364a:	4b6f      	ldr	r3, [pc, #444]	; (8003808 <extInt_Config+0xe18>)
 800364c:	689b      	ldr	r3, [r3, #8]
 800364e:	687a      	ldr	r2, [r7, #4]
 8003650:	6812      	ldr	r2, [r2, #0]
 8003652:	7812      	ldrb	r2, [r2, #0]
 8003654:	4611      	mov	r1, r2
 8003656:	2201      	movs	r2, #1
 8003658:	408a      	lsls	r2, r1
 800365a:	43d2      	mvns	r2, r2
 800365c:	4611      	mov	r1, r2
 800365e:	4a6a      	ldr	r2, [pc, #424]	; (8003808 <extInt_Config+0xe18>)
 8003660:	400b      	ands	r3, r1
 8003662:	6093      	str	r3, [r2, #8]
		EXTI->FTSR |= (0b1<<extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8003664:	4b68      	ldr	r3, [pc, #416]	; (8003808 <extInt_Config+0xe18>)
 8003666:	68db      	ldr	r3, [r3, #12]
 8003668:	687a      	ldr	r2, [r7, #4]
 800366a:	6812      	ldr	r2, [r2, #0]
 800366c:	7812      	ldrb	r2, [r2, #0]
 800366e:	4611      	mov	r1, r2
 8003670:	2201      	movs	r2, #1
 8003672:	408a      	lsls	r2, r1
 8003674:	4611      	mov	r1, r2
 8003676:	4a64      	ldr	r2, [pc, #400]	; (8003808 <extInt_Config+0xe18>)
 8003678:	430b      	orrs	r3, r1
 800367a:	60d3      	str	r3, [r2, #12]
 800367c:	e031      	b.n	80036e2 <extInt_Config+0xcf2>

	}
	else
	{
		EXTI->FTSR &= ~(0b1<<extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 800367e:	4b62      	ldr	r3, [pc, #392]	; (8003808 <extInt_Config+0xe18>)
 8003680:	68db      	ldr	r3, [r3, #12]
 8003682:	687a      	ldr	r2, [r7, #4]
 8003684:	6812      	ldr	r2, [r2, #0]
 8003686:	7812      	ldrb	r2, [r2, #0]
 8003688:	4611      	mov	r1, r2
 800368a:	2201      	movs	r2, #1
 800368c:	408a      	lsls	r2, r1
 800368e:	43d2      	mvns	r2, r2
 8003690:	4611      	mov	r1, r2
 8003692:	4a5d      	ldr	r2, [pc, #372]	; (8003808 <extInt_Config+0xe18>)
 8003694:	400b      	ands	r3, r1
 8003696:	60d3      	str	r3, [r2, #12]
		EXTI->RTSR &= ~(0b1<<extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8003698:	4b5b      	ldr	r3, [pc, #364]	; (8003808 <extInt_Config+0xe18>)
 800369a:	689b      	ldr	r3, [r3, #8]
 800369c:	687a      	ldr	r2, [r7, #4]
 800369e:	6812      	ldr	r2, [r2, #0]
 80036a0:	7812      	ldrb	r2, [r2, #0]
 80036a2:	4611      	mov	r1, r2
 80036a4:	2201      	movs	r2, #1
 80036a6:	408a      	lsls	r2, r1
 80036a8:	43d2      	mvns	r2, r2
 80036aa:	4611      	mov	r1, r2
 80036ac:	4a56      	ldr	r2, [pc, #344]	; (8003808 <extInt_Config+0xe18>)
 80036ae:	400b      	ands	r3, r1
 80036b0:	6093      	str	r3, [r2, #8]
		EXTI->FTSR |= (0b1<<extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 80036b2:	4b55      	ldr	r3, [pc, #340]	; (8003808 <extInt_Config+0xe18>)
 80036b4:	68db      	ldr	r3, [r3, #12]
 80036b6:	687a      	ldr	r2, [r7, #4]
 80036b8:	6812      	ldr	r2, [r2, #0]
 80036ba:	7812      	ldrb	r2, [r2, #0]
 80036bc:	4611      	mov	r1, r2
 80036be:	2201      	movs	r2, #1
 80036c0:	408a      	lsls	r2, r1
 80036c2:	4611      	mov	r1, r2
 80036c4:	4a50      	ldr	r2, [pc, #320]	; (8003808 <extInt_Config+0xe18>)
 80036c6:	430b      	orrs	r3, r1
 80036c8:	60d3      	str	r3, [r2, #12]
		EXTI->RTSR |= (0b1<<extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 80036ca:	4b4f      	ldr	r3, [pc, #316]	; (8003808 <extInt_Config+0xe18>)
 80036cc:	689b      	ldr	r3, [r3, #8]
 80036ce:	687a      	ldr	r2, [r7, #4]
 80036d0:	6812      	ldr	r2, [r2, #0]
 80036d2:	7812      	ldrb	r2, [r2, #0]
 80036d4:	4611      	mov	r1, r2
 80036d6:	2201      	movs	r2, #1
 80036d8:	408a      	lsls	r2, r1
 80036da:	4611      	mov	r1, r2
 80036dc:	4a4a      	ldr	r2, [pc, #296]	; (8003808 <extInt_Config+0xe18>)
 80036de:	430b      	orrs	r3, r1
 80036e0:	6093      	str	r3, [r2, #8]
	}
	//-------b)Activamos la interrupcion del EXTIx---------
	EXTI->IMR &= ~(0b1<<extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 80036e2:	4b49      	ldr	r3, [pc, #292]	; (8003808 <extInt_Config+0xe18>)
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	687a      	ldr	r2, [r7, #4]
 80036e8:	6812      	ldr	r2, [r2, #0]
 80036ea:	7812      	ldrb	r2, [r2, #0]
 80036ec:	4611      	mov	r1, r2
 80036ee:	2201      	movs	r2, #1
 80036f0:	408a      	lsls	r2, r1
 80036f2:	43d2      	mvns	r2, r2
 80036f4:	4611      	mov	r1, r2
 80036f6:	4a44      	ldr	r2, [pc, #272]	; (8003808 <extInt_Config+0xe18>)
 80036f8:	400b      	ands	r3, r1
 80036fa:	6013      	str	r3, [r2, #0]
	EXTI->IMR |= (0b1<<extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 80036fc:	4b42      	ldr	r3, [pc, #264]	; (8003808 <extInt_Config+0xe18>)
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	687a      	ldr	r2, [r7, #4]
 8003702:	6812      	ldr	r2, [r2, #0]
 8003704:	7812      	ldrb	r2, [r2, #0]
 8003706:	4611      	mov	r1, r2
 8003708:	2201      	movs	r2, #1
 800370a:	408a      	lsls	r2, r1
 800370c:	4611      	mov	r1, r2
 800370e:	4a3e      	ldr	r2, [pc, #248]	; (8003808 <extInt_Config+0xe18>)
 8003710:	430b      	orrs	r3, r1
 8003712:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003714:	b672      	cpsid	i
}
 8003716:	bf00      	nop
	//------------4)Activamos el canal del sistema NVIC para indicar la interrupcion--------------------------

	//4.a Desabilitamos las interrupciones globales
	__disable_irq();
	//4.b Activamos el canal del NVIC para la interrupcion del EXTIx seleccionado
	switch(extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	781b      	ldrb	r3, [r3, #0]
 800371e:	2b0f      	cmp	r3, #15
 8003720:	d862      	bhi.n	80037e8 <extInt_Config+0xdf8>
 8003722:	a201      	add	r2, pc, #4	; (adr r2, 8003728 <extInt_Config+0xd38>)
 8003724:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003728:	08003769 	.word	0x08003769
 800372c:	08003771 	.word	0x08003771
 8003730:	08003779 	.word	0x08003779
 8003734:	08003781 	.word	0x08003781
 8003738:	08003789 	.word	0x08003789
 800373c:	08003791 	.word	0x08003791
 8003740:	08003799 	.word	0x08003799
 8003744:	080037a1 	.word	0x080037a1
 8003748:	080037a9 	.word	0x080037a9
 800374c:	080037b1 	.word	0x080037b1
 8003750:	080037b9 	.word	0x080037b9
 8003754:	080037c1 	.word	0x080037c1
 8003758:	080037c9 	.word	0x080037c9
 800375c:	080037d1 	.word	0x080037d1
 8003760:	080037d9 	.word	0x080037d9
 8003764:	080037e1 	.word	0x080037e1
	{

	case 0:
	{
		NVIC_EnableIRQ(EXTI0_IRQn);
 8003768:	2006      	movs	r0, #6
 800376a:	f7ff f923 	bl	80029b4 <__NVIC_EnableIRQ>
		break;
 800376e:	e03c      	b.n	80037ea <extInt_Config+0xdfa>
	}

	case 1:
	{
		NVIC_EnableIRQ(EXTI1_IRQn);
 8003770:	2007      	movs	r0, #7
 8003772:	f7ff f91f 	bl	80029b4 <__NVIC_EnableIRQ>
		break;
 8003776:	e038      	b.n	80037ea <extInt_Config+0xdfa>
	}

	case 2:
	{
		NVIC_EnableIRQ(EXTI2_IRQn);
 8003778:	2008      	movs	r0, #8
 800377a:	f7ff f91b 	bl	80029b4 <__NVIC_EnableIRQ>
		break;
 800377e:	e034      	b.n	80037ea <extInt_Config+0xdfa>
	}

	case 3:
	{
		NVIC_EnableIRQ(EXTI3_IRQn);
 8003780:	2009      	movs	r0, #9
 8003782:	f7ff f917 	bl	80029b4 <__NVIC_EnableIRQ>
		break;
 8003786:	e030      	b.n	80037ea <extInt_Config+0xdfa>
	}

	case 4:
	{
		NVIC_EnableIRQ(EXTI4_IRQn);
 8003788:	200a      	movs	r0, #10
 800378a:	f7ff f913 	bl	80029b4 <__NVIC_EnableIRQ>
		break;
 800378e:	e02c      	b.n	80037ea <extInt_Config+0xdfa>
	}

	case 5:
	{
		NVIC_EnableIRQ(EXTI9_5_IRQn);
 8003790:	2017      	movs	r0, #23
 8003792:	f7ff f90f 	bl	80029b4 <__NVIC_EnableIRQ>
		break;
 8003796:	e028      	b.n	80037ea <extInt_Config+0xdfa>
	}

	case 6:
	{
		NVIC_EnableIRQ(EXTI9_5_IRQn);
 8003798:	2017      	movs	r0, #23
 800379a:	f7ff f90b 	bl	80029b4 <__NVIC_EnableIRQ>
		break;
 800379e:	e024      	b.n	80037ea <extInt_Config+0xdfa>
	}

	case 7:
	{
		NVIC_EnableIRQ(EXTI9_5_IRQn);
 80037a0:	2017      	movs	r0, #23
 80037a2:	f7ff f907 	bl	80029b4 <__NVIC_EnableIRQ>
		break;
 80037a6:	e020      	b.n	80037ea <extInt_Config+0xdfa>
	}

	case 8:
	{
		NVIC_EnableIRQ(EXTI9_5_IRQn);
 80037a8:	2017      	movs	r0, #23
 80037aa:	f7ff f903 	bl	80029b4 <__NVIC_EnableIRQ>
		break;
 80037ae:	e01c      	b.n	80037ea <extInt_Config+0xdfa>
	}

	case 9:
	{
		NVIC_EnableIRQ(EXTI9_5_IRQn);
 80037b0:	2017      	movs	r0, #23
 80037b2:	f7ff f8ff 	bl	80029b4 <__NVIC_EnableIRQ>
		break;
 80037b6:	e018      	b.n	80037ea <extInt_Config+0xdfa>
	}

	case 10:
	{
		NVIC_EnableIRQ(EXTI15_10_IRQn);
 80037b8:	2028      	movs	r0, #40	; 0x28
 80037ba:	f7ff f8fb 	bl	80029b4 <__NVIC_EnableIRQ>
		break;
 80037be:	e014      	b.n	80037ea <extInt_Config+0xdfa>
	}

	case 11:
	{
		NVIC_EnableIRQ(EXTI15_10_IRQn);
 80037c0:	2028      	movs	r0, #40	; 0x28
 80037c2:	f7ff f8f7 	bl	80029b4 <__NVIC_EnableIRQ>
		break;
 80037c6:	e010      	b.n	80037ea <extInt_Config+0xdfa>
	}

	case 12:
	{
		NVIC_EnableIRQ(EXTI15_10_IRQn);
 80037c8:	2028      	movs	r0, #40	; 0x28
 80037ca:	f7ff f8f3 	bl	80029b4 <__NVIC_EnableIRQ>
		break;
 80037ce:	e00c      	b.n	80037ea <extInt_Config+0xdfa>
	}

	case 13:
	{
		NVIC_EnableIRQ(EXTI15_10_IRQn);
 80037d0:	2028      	movs	r0, #40	; 0x28
 80037d2:	f7ff f8ef 	bl	80029b4 <__NVIC_EnableIRQ>
		break;
 80037d6:	e008      	b.n	80037ea <extInt_Config+0xdfa>
	}

	case 14:
	{
		NVIC_EnableIRQ(EXTI15_10_IRQn);
 80037d8:	2028      	movs	r0, #40	; 0x28
 80037da:	f7ff f8eb 	bl	80029b4 <__NVIC_EnableIRQ>
		break;
 80037de:	e004      	b.n	80037ea <extInt_Config+0xdfa>
	}

	case 15:
	{
		NVIC_EnableIRQ(EXTI15_10_IRQn);
 80037e0:	2028      	movs	r0, #40	; 0x28
 80037e2:	f7ff f8e7 	bl	80029b4 <__NVIC_EnableIRQ>
		break;
 80037e6:	e000      	b.n	80037ea <extInt_Config+0xdfa>
	}

	default: {
		break;
 80037e8:	bf00      	nop
  __ASM volatile ("cpsie i" : : : "memory");
 80037ea:	b662      	cpsie	i
}
 80037ec:	bf00      	nop
	}
	}
	//4.c Activamos las interrupciones globales
	__enable_irq();
}
 80037ee:	bf00      	nop
 80037f0:	3708      	adds	r7, #8
 80037f2:	46bd      	mov	sp, r7
 80037f4:	bd80      	pop	{r7, pc}
 80037f6:	bf00      	nop
 80037f8:	40020c00 	.word	0x40020c00
 80037fc:	40013800 	.word	0x40013800
 8003800:	40021000 	.word	0x40021000
 8003804:	40021c00 	.word	0x40021c00
 8003808:	40013c00 	.word	0x40013c00

0800380c <callback_extInt0>:



//Definimos las funciones para cuando se genera una interrupcion del EXTIx, 0-15
__attribute__ ((weak)) void callback_extInt0(void){
 800380c:	b480      	push	{r7}
 800380e:	af00      	add	r7, sp, #0
	__NOP();
 8003810:	bf00      	nop
}
 8003812:	bf00      	nop
 8003814:	46bd      	mov	sp, r7
 8003816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381a:	4770      	bx	lr

0800381c <callback_extInt2>:

__attribute__ ((weak)) void callback_extInt1(void){
	__NOP();
}

__attribute__ ((weak)) void callback_extInt2(void){
 800381c:	b480      	push	{r7}
 800381e:	af00      	add	r7, sp, #0
	__NOP();
 8003820:	bf00      	nop
}
 8003822:	bf00      	nop
 8003824:	46bd      	mov	sp, r7
 8003826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382a:	4770      	bx	lr

0800382c <callback_extInt4>:

__attribute__ ((weak)) void callback_extInt3(void){
	__NOP();
}

__attribute__ ((weak)) void callback_extInt4(void){
 800382c:	b480      	push	{r7}
 800382e:	af00      	add	r7, sp, #0
	__NOP();
 8003830:	bf00      	nop
}
 8003832:	bf00      	nop
 8003834:	46bd      	mov	sp, r7
 8003836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383a:	4770      	bx	lr

0800383c <callback_extInt5>:

__attribute__ ((weak)) void callback_extInt5(void){
 800383c:	b480      	push	{r7}
 800383e:	af00      	add	r7, sp, #0
	__NOP();
 8003840:	bf00      	nop
}
 8003842:	bf00      	nop
 8003844:	46bd      	mov	sp, r7
 8003846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384a:	4770      	bx	lr

0800384c <callback_extInt6>:

__attribute__ ((weak)) void callback_extInt6(void){
 800384c:	b480      	push	{r7}
 800384e:	af00      	add	r7, sp, #0
	__NOP();
 8003850:	bf00      	nop
}
 8003852:	bf00      	nop
 8003854:	46bd      	mov	sp, r7
 8003856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385a:	4770      	bx	lr

0800385c <callback_extInt7>:

__attribute__ ((weak)) void callback_extInt7(void){
 800385c:	b480      	push	{r7}
 800385e:	af00      	add	r7, sp, #0
	__NOP();
 8003860:	bf00      	nop
}
 8003862:	bf00      	nop
 8003864:	46bd      	mov	sp, r7
 8003866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386a:	4770      	bx	lr

0800386c <callback_extInt8>:

__attribute__ ((weak)) void callback_extInt8(void){
 800386c:	b480      	push	{r7}
 800386e:	af00      	add	r7, sp, #0
	__NOP();
 8003870:	bf00      	nop
}
 8003872:	bf00      	nop
 8003874:	46bd      	mov	sp, r7
 8003876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387a:	4770      	bx	lr

0800387c <callback_extInt9>:

__attribute__ ((weak)) void callback_extInt9(void){
 800387c:	b480      	push	{r7}
 800387e:	af00      	add	r7, sp, #0
	__NOP();
 8003880:	bf00      	nop
}
 8003882:	bf00      	nop
 8003884:	46bd      	mov	sp, r7
 8003886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388a:	4770      	bx	lr

0800388c <callback_extInt10>:

__attribute__ ((weak)) void callback_extInt10(void){
 800388c:	b480      	push	{r7}
 800388e:	af00      	add	r7, sp, #0
	__NOP();
 8003890:	bf00      	nop
}
 8003892:	bf00      	nop
 8003894:	46bd      	mov	sp, r7
 8003896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389a:	4770      	bx	lr

0800389c <callback_extInt11>:

__attribute__ ((weak)) void callback_extInt11(void){
 800389c:	b480      	push	{r7}
 800389e:	af00      	add	r7, sp, #0
	__NOP();
 80038a0:	bf00      	nop
}
 80038a2:	bf00      	nop
 80038a4:	46bd      	mov	sp, r7
 80038a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038aa:	4770      	bx	lr

080038ac <callback_extInt12>:

__attribute__ ((weak)) void callback_extInt12(void){
 80038ac:	b480      	push	{r7}
 80038ae:	af00      	add	r7, sp, #0
	__NOP();
 80038b0:	bf00      	nop
}
 80038b2:	bf00      	nop
 80038b4:	46bd      	mov	sp, r7
 80038b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ba:	4770      	bx	lr

080038bc <callback_extInt13>:

__attribute__ ((weak)) void callback_extInt13(void){
 80038bc:	b480      	push	{r7}
 80038be:	af00      	add	r7, sp, #0
	__NOP();
 80038c0:	bf00      	nop
}
 80038c2:	bf00      	nop
 80038c4:	46bd      	mov	sp, r7
 80038c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ca:	4770      	bx	lr

080038cc <callback_extInt14>:

__attribute__ ((weak)) void callback_extInt14(void){
 80038cc:	b480      	push	{r7}
 80038ce:	af00      	add	r7, sp, #0
	__NOP();
 80038d0:	bf00      	nop
}
 80038d2:	bf00      	nop
 80038d4:	46bd      	mov	sp, r7
 80038d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038da:	4770      	bx	lr

080038dc <callback_extInt15>:

__attribute__ ((weak)) void callback_extInt15(void){
 80038dc:	b480      	push	{r7}
 80038de:	af00      	add	r7, sp, #0
	__NOP();
 80038e0:	bf00      	nop
}
 80038e2:	bf00      	nop
 80038e4:	46bd      	mov	sp, r7
 80038e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ea:	4770      	bx	lr

080038ec <EXTI0_IRQHandler>:
 */
//Registro: PR    Registro donde los primeros 16 bit corresponden a los 16 EXTIx

//--------------a) EXTI0, EXTI1, EXTI2, EXTI3, EXTI4 --------------
void EXTI0_IRQHandler(void)
{
 80038ec:	b580      	push	{r7, lr}
 80038ee:	af00      	add	r7, sp, #0
	//Evaluamos si la interrupcion que se lanza corresponde al EXTI0
	if (EXTI->PR & EXTI_PR_PR0)
 80038f0:	4b08      	ldr	r3, [pc, #32]	; (8003914 <EXTI0_IRQHandler+0x28>)
 80038f2:	695b      	ldr	r3, [r3, #20]
 80038f4:	f003 0301 	and.w	r3, r3, #1
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d008      	beq.n	800390e <EXTI0_IRQHandler+0x22>
	{
		EXTI->PR |= (EXTI_PR_PR0); //Limpiamos la bandera
 80038fc:	4b05      	ldr	r3, [pc, #20]	; (8003914 <EXTI0_IRQHandler+0x28>)
 80038fe:	695b      	ldr	r3, [r3, #20]
 8003900:	4a04      	ldr	r2, [pc, #16]	; (8003914 <EXTI0_IRQHandler+0x28>)
 8003902:	f043 0301 	orr.w	r3, r3, #1
 8003906:	6153      	str	r3, [r2, #20]
		callback_extInt0();			//Ejecutamos la ISR
 8003908:	f7ff ff80 	bl	800380c <callback_extInt0>
	}
	else
	{
		__NOP();
	}
}
 800390c:	e000      	b.n	8003910 <EXTI0_IRQHandler+0x24>
		__NOP();
 800390e:	bf00      	nop
}
 8003910:	bf00      	nop
 8003912:	bd80      	pop	{r7, pc}
 8003914:	40013c00 	.word	0x40013c00

08003918 <EXTI1_IRQHandler>:

void EXTI1_IRQHandler(void)
{
 8003918:	b580      	push	{r7, lr}
 800391a:	af00      	add	r7, sp, #0
	//Evaluamos si la interrupcion que se lanza corresponde al EXTI1
	if (EXTI->PR & EXTI_PR_PR1)
 800391c:	4b08      	ldr	r3, [pc, #32]	; (8003940 <EXTI1_IRQHandler+0x28>)
 800391e:	695b      	ldr	r3, [r3, #20]
 8003920:	f003 0302 	and.w	r3, r3, #2
 8003924:	2b00      	cmp	r3, #0
 8003926:	d008      	beq.n	800393a <EXTI1_IRQHandler+0x22>
	{
		EXTI->PR |= (EXTI_PR_PR1); //Limpiamos la bandera
 8003928:	4b05      	ldr	r3, [pc, #20]	; (8003940 <EXTI1_IRQHandler+0x28>)
 800392a:	695b      	ldr	r3, [r3, #20]
 800392c:	4a04      	ldr	r2, [pc, #16]	; (8003940 <EXTI1_IRQHandler+0x28>)
 800392e:	f043 0302 	orr.w	r3, r3, #2
 8003932:	6153      	str	r3, [r2, #20]
		callback_extInt1();			//Ejecutamos la ISR
 8003934:	f7fe f8ba 	bl	8001aac <callback_extInt1>
	}
	else
	{
		__NOP();
	}
}
 8003938:	e000      	b.n	800393c <EXTI1_IRQHandler+0x24>
		__NOP();
 800393a:	bf00      	nop
}
 800393c:	bf00      	nop
 800393e:	bd80      	pop	{r7, pc}
 8003940:	40013c00 	.word	0x40013c00

08003944 <EXTI2_IRQHandler>:

void EXTI2_IRQHandler(void)
{
 8003944:	b580      	push	{r7, lr}
 8003946:	af00      	add	r7, sp, #0
	//Evaluamos si la interrupcion que se lanza corresponde al EXTI2
	if (EXTI->PR & EXTI_PR_PR2)
 8003948:	4b08      	ldr	r3, [pc, #32]	; (800396c <EXTI2_IRQHandler+0x28>)
 800394a:	695b      	ldr	r3, [r3, #20]
 800394c:	f003 0304 	and.w	r3, r3, #4
 8003950:	2b00      	cmp	r3, #0
 8003952:	d008      	beq.n	8003966 <EXTI2_IRQHandler+0x22>
	{
		EXTI->PR |= (EXTI_PR_PR2); //Limpiamos la bandera
 8003954:	4b05      	ldr	r3, [pc, #20]	; (800396c <EXTI2_IRQHandler+0x28>)
 8003956:	695b      	ldr	r3, [r3, #20]
 8003958:	4a04      	ldr	r2, [pc, #16]	; (800396c <EXTI2_IRQHandler+0x28>)
 800395a:	f043 0304 	orr.w	r3, r3, #4
 800395e:	6153      	str	r3, [r2, #20]
		callback_extInt2();			//Ejecutamos la ISR
 8003960:	f7ff ff5c 	bl	800381c <callback_extInt2>
	}
	else
	{
		__NOP();
	}
}
 8003964:	e000      	b.n	8003968 <EXTI2_IRQHandler+0x24>
		__NOP();
 8003966:	bf00      	nop
}
 8003968:	bf00      	nop
 800396a:	bd80      	pop	{r7, pc}
 800396c:	40013c00 	.word	0x40013c00

08003970 <EXTI3_IRQHandler>:

void EXTI3_IRQHandler(void)
{
 8003970:	b580      	push	{r7, lr}
 8003972:	af00      	add	r7, sp, #0
	//Evaluamos si la interrupcion que se lanza corresponde al EXTI3
	if (EXTI->PR & EXTI_PR_PR3)
 8003974:	4b08      	ldr	r3, [pc, #32]	; (8003998 <EXTI3_IRQHandler+0x28>)
 8003976:	695b      	ldr	r3, [r3, #20]
 8003978:	f003 0308 	and.w	r3, r3, #8
 800397c:	2b00      	cmp	r3, #0
 800397e:	d008      	beq.n	8003992 <EXTI3_IRQHandler+0x22>
	{
		EXTI->PR |= (EXTI_PR_PR3); //Limpiamos la bandera
 8003980:	4b05      	ldr	r3, [pc, #20]	; (8003998 <EXTI3_IRQHandler+0x28>)
 8003982:	695b      	ldr	r3, [r3, #20]
 8003984:	4a04      	ldr	r2, [pc, #16]	; (8003998 <EXTI3_IRQHandler+0x28>)
 8003986:	f043 0308 	orr.w	r3, r3, #8
 800398a:	6153      	str	r3, [r2, #20]
		callback_extInt3();			//Ejecutamos la ISR
 800398c:	f7fe f8e0 	bl	8001b50 <callback_extInt3>
	}
	else
	{
		__NOP();
	}
}
 8003990:	e000      	b.n	8003994 <EXTI3_IRQHandler+0x24>
		__NOP();
 8003992:	bf00      	nop
}
 8003994:	bf00      	nop
 8003996:	bd80      	pop	{r7, pc}
 8003998:	40013c00 	.word	0x40013c00

0800399c <EXTI4_IRQHandler>:

void EXTI4_IRQHandler(void)
{
 800399c:	b580      	push	{r7, lr}
 800399e:	af00      	add	r7, sp, #0
	//Evaluamos si la interrupcion que se lanza corresponde al EXTI4
	if (EXTI->PR & EXTI_PR_PR4)
 80039a0:	4b08      	ldr	r3, [pc, #32]	; (80039c4 <EXTI4_IRQHandler+0x28>)
 80039a2:	695b      	ldr	r3, [r3, #20]
 80039a4:	f003 0310 	and.w	r3, r3, #16
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d008      	beq.n	80039be <EXTI4_IRQHandler+0x22>
	{
		EXTI->PR |= (EXTI_PR_PR4); //Limpiamos la bandera
 80039ac:	4b05      	ldr	r3, [pc, #20]	; (80039c4 <EXTI4_IRQHandler+0x28>)
 80039ae:	695b      	ldr	r3, [r3, #20]
 80039b0:	4a04      	ldr	r2, [pc, #16]	; (80039c4 <EXTI4_IRQHandler+0x28>)
 80039b2:	f043 0310 	orr.w	r3, r3, #16
 80039b6:	6153      	str	r3, [r2, #20]
		callback_extInt4();			//Ejecutamos la ISR
 80039b8:	f7ff ff38 	bl	800382c <callback_extInt4>
	}
	else
	{
		__NOP();
	}
}
 80039bc:	e000      	b.n	80039c0 <EXTI4_IRQHandler+0x24>
		__NOP();
 80039be:	bf00      	nop
}
 80039c0:	bf00      	nop
 80039c2:	bd80      	pop	{r7, pc}
 80039c4:	40013c00 	.word	0x40013c00

080039c8 <EXTI9_5_IRQHandler>:

//--------------b) EXTI9-5--------------
void EXTI9_5_IRQHandler(void)
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	af00      	add	r7, sp, #0
	//Evaluamos si la interrupcion que se lanza corresponde al EXTI5
	if (EXTI->PR & EXTI_PR_PR5)
 80039cc:	4b26      	ldr	r3, [pc, #152]	; (8003a68 <EXTI9_5_IRQHandler+0xa0>)
 80039ce:	695b      	ldr	r3, [r3, #20]
 80039d0:	f003 0320 	and.w	r3, r3, #32
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d008      	beq.n	80039ea <EXTI9_5_IRQHandler+0x22>
	{
		EXTI->PR |= (EXTI_PR_PR5); //Limpiamos la bandera
 80039d8:	4b23      	ldr	r3, [pc, #140]	; (8003a68 <EXTI9_5_IRQHandler+0xa0>)
 80039da:	695b      	ldr	r3, [r3, #20]
 80039dc:	4a22      	ldr	r2, [pc, #136]	; (8003a68 <EXTI9_5_IRQHandler+0xa0>)
 80039de:	f043 0320 	orr.w	r3, r3, #32
 80039e2:	6153      	str	r3, [r2, #20]
		callback_extInt5();			//Ejecutamos la ISR
 80039e4:	f7ff ff2a 	bl	800383c <callback_extInt5>
	}
	else
	{
		__NOP();
	}
}
 80039e8:	e03c      	b.n	8003a64 <EXTI9_5_IRQHandler+0x9c>
	else if(EXTI->PR & EXTI_PR_PR6)
 80039ea:	4b1f      	ldr	r3, [pc, #124]	; (8003a68 <EXTI9_5_IRQHandler+0xa0>)
 80039ec:	695b      	ldr	r3, [r3, #20]
 80039ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d008      	beq.n	8003a08 <EXTI9_5_IRQHandler+0x40>
		EXTI->PR |= (EXTI_PR_PR6); //Limpiamos la bandera
 80039f6:	4b1c      	ldr	r3, [pc, #112]	; (8003a68 <EXTI9_5_IRQHandler+0xa0>)
 80039f8:	695b      	ldr	r3, [r3, #20]
 80039fa:	4a1b      	ldr	r2, [pc, #108]	; (8003a68 <EXTI9_5_IRQHandler+0xa0>)
 80039fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003a00:	6153      	str	r3, [r2, #20]
		callback_extInt6();			//Ejecutamos la ISR
 8003a02:	f7ff ff23 	bl	800384c <callback_extInt6>
}
 8003a06:	e02d      	b.n	8003a64 <EXTI9_5_IRQHandler+0x9c>
	else if(EXTI->PR & EXTI_PR_PR7)
 8003a08:	4b17      	ldr	r3, [pc, #92]	; (8003a68 <EXTI9_5_IRQHandler+0xa0>)
 8003a0a:	695b      	ldr	r3, [r3, #20]
 8003a0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d008      	beq.n	8003a26 <EXTI9_5_IRQHandler+0x5e>
		EXTI->PR |= (EXTI_PR_PR7); //Limpiamos la bandera
 8003a14:	4b14      	ldr	r3, [pc, #80]	; (8003a68 <EXTI9_5_IRQHandler+0xa0>)
 8003a16:	695b      	ldr	r3, [r3, #20]
 8003a18:	4a13      	ldr	r2, [pc, #76]	; (8003a68 <EXTI9_5_IRQHandler+0xa0>)
 8003a1a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a1e:	6153      	str	r3, [r2, #20]
		callback_extInt7();			//Ejecutamos la ISR
 8003a20:	f7ff ff1c 	bl	800385c <callback_extInt7>
}
 8003a24:	e01e      	b.n	8003a64 <EXTI9_5_IRQHandler+0x9c>
	else if(EXTI->PR & EXTI_PR_PR8)
 8003a26:	4b10      	ldr	r3, [pc, #64]	; (8003a68 <EXTI9_5_IRQHandler+0xa0>)
 8003a28:	695b      	ldr	r3, [r3, #20]
 8003a2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d008      	beq.n	8003a44 <EXTI9_5_IRQHandler+0x7c>
		EXTI->PR |= (EXTI_PR_PR8); //Limpiamos la bandera
 8003a32:	4b0d      	ldr	r3, [pc, #52]	; (8003a68 <EXTI9_5_IRQHandler+0xa0>)
 8003a34:	695b      	ldr	r3, [r3, #20]
 8003a36:	4a0c      	ldr	r2, [pc, #48]	; (8003a68 <EXTI9_5_IRQHandler+0xa0>)
 8003a38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a3c:	6153      	str	r3, [r2, #20]
		callback_extInt8();			//Ejecutamos la ISR
 8003a3e:	f7ff ff15 	bl	800386c <callback_extInt8>
}
 8003a42:	e00f      	b.n	8003a64 <EXTI9_5_IRQHandler+0x9c>
	else if(EXTI->PR & EXTI_PR_PR9)
 8003a44:	4b08      	ldr	r3, [pc, #32]	; (8003a68 <EXTI9_5_IRQHandler+0xa0>)
 8003a46:	695b      	ldr	r3, [r3, #20]
 8003a48:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d008      	beq.n	8003a62 <EXTI9_5_IRQHandler+0x9a>
		EXTI->PR |= (EXTI_PR_PR9); //Limpiamos la bandera
 8003a50:	4b05      	ldr	r3, [pc, #20]	; (8003a68 <EXTI9_5_IRQHandler+0xa0>)
 8003a52:	695b      	ldr	r3, [r3, #20]
 8003a54:	4a04      	ldr	r2, [pc, #16]	; (8003a68 <EXTI9_5_IRQHandler+0xa0>)
 8003a56:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003a5a:	6153      	str	r3, [r2, #20]
		callback_extInt9();			//Ejecutamos la ISR
 8003a5c:	f7ff ff0e 	bl	800387c <callback_extInt9>
}
 8003a60:	e000      	b.n	8003a64 <EXTI9_5_IRQHandler+0x9c>
		__NOP();
 8003a62:	bf00      	nop
}
 8003a64:	bf00      	nop
 8003a66:	bd80      	pop	{r7, pc}
 8003a68:	40013c00 	.word	0x40013c00

08003a6c <EXTI15_10_IRQHandler>:

//--------------b) EXTI15-10--------------
void EXTI15_10_IRQHandler(void)
{
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	af00      	add	r7, sp, #0
	//Evaluamos si la interrupcion que se lanza corresponde al EXTI10
	if (EXTI->PR & EXTI_PR_PR10)
 8003a70:	4b2e      	ldr	r3, [pc, #184]	; (8003b2c <EXTI15_10_IRQHandler+0xc0>)
 8003a72:	695b      	ldr	r3, [r3, #20]
 8003a74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d008      	beq.n	8003a8e <EXTI15_10_IRQHandler+0x22>
	{
		EXTI->PR |= (EXTI_PR_PR10); //Limpiamos la bandera
 8003a7c:	4b2b      	ldr	r3, [pc, #172]	; (8003b2c <EXTI15_10_IRQHandler+0xc0>)
 8003a7e:	695b      	ldr	r3, [r3, #20]
 8003a80:	4a2a      	ldr	r2, [pc, #168]	; (8003b2c <EXTI15_10_IRQHandler+0xc0>)
 8003a82:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003a86:	6153      	str	r3, [r2, #20]
		callback_extInt10();			//Ejecutamos la ISR
 8003a88:	f7ff ff00 	bl	800388c <callback_extInt10>
	}
	else
	{
		__NOP();
	}
}
 8003a8c:	e04b      	b.n	8003b26 <EXTI15_10_IRQHandler+0xba>
	else if(EXTI->PR & EXTI_PR_PR11)
 8003a8e:	4b27      	ldr	r3, [pc, #156]	; (8003b2c <EXTI15_10_IRQHandler+0xc0>)
 8003a90:	695b      	ldr	r3, [r3, #20]
 8003a92:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d008      	beq.n	8003aac <EXTI15_10_IRQHandler+0x40>
		EXTI->PR |= (EXTI_PR_PR11); //Limpiamos la bandera
 8003a9a:	4b24      	ldr	r3, [pc, #144]	; (8003b2c <EXTI15_10_IRQHandler+0xc0>)
 8003a9c:	695b      	ldr	r3, [r3, #20]
 8003a9e:	4a23      	ldr	r2, [pc, #140]	; (8003b2c <EXTI15_10_IRQHandler+0xc0>)
 8003aa0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003aa4:	6153      	str	r3, [r2, #20]
		callback_extInt11();			//Ejecutamos la ISR
 8003aa6:	f7ff fef9 	bl	800389c <callback_extInt11>
}
 8003aaa:	e03c      	b.n	8003b26 <EXTI15_10_IRQHandler+0xba>
	else if(EXTI->PR & EXTI_PR_PR12)
 8003aac:	4b1f      	ldr	r3, [pc, #124]	; (8003b2c <EXTI15_10_IRQHandler+0xc0>)
 8003aae:	695b      	ldr	r3, [r3, #20]
 8003ab0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d008      	beq.n	8003aca <EXTI15_10_IRQHandler+0x5e>
		EXTI->PR |= (EXTI_PR_PR12); //Limpiamos la bandera
 8003ab8:	4b1c      	ldr	r3, [pc, #112]	; (8003b2c <EXTI15_10_IRQHandler+0xc0>)
 8003aba:	695b      	ldr	r3, [r3, #20]
 8003abc:	4a1b      	ldr	r2, [pc, #108]	; (8003b2c <EXTI15_10_IRQHandler+0xc0>)
 8003abe:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003ac2:	6153      	str	r3, [r2, #20]
		callback_extInt12();			//Ejecutamos la ISR
 8003ac4:	f7ff fef2 	bl	80038ac <callback_extInt12>
}
 8003ac8:	e02d      	b.n	8003b26 <EXTI15_10_IRQHandler+0xba>
	else if(EXTI->PR & EXTI_PR_PR13)
 8003aca:	4b18      	ldr	r3, [pc, #96]	; (8003b2c <EXTI15_10_IRQHandler+0xc0>)
 8003acc:	695b      	ldr	r3, [r3, #20]
 8003ace:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d008      	beq.n	8003ae8 <EXTI15_10_IRQHandler+0x7c>
		EXTI->PR |= (EXTI_PR_PR13); //Limpiamos la bandera
 8003ad6:	4b15      	ldr	r3, [pc, #84]	; (8003b2c <EXTI15_10_IRQHandler+0xc0>)
 8003ad8:	695b      	ldr	r3, [r3, #20]
 8003ada:	4a14      	ldr	r2, [pc, #80]	; (8003b2c <EXTI15_10_IRQHandler+0xc0>)
 8003adc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003ae0:	6153      	str	r3, [r2, #20]
		callback_extInt13();			//Ejecutamos la ISR
 8003ae2:	f7ff feeb 	bl	80038bc <callback_extInt13>
}
 8003ae6:	e01e      	b.n	8003b26 <EXTI15_10_IRQHandler+0xba>
	else if(EXTI->PR & EXTI_PR_PR14)
 8003ae8:	4b10      	ldr	r3, [pc, #64]	; (8003b2c <EXTI15_10_IRQHandler+0xc0>)
 8003aea:	695b      	ldr	r3, [r3, #20]
 8003aec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d008      	beq.n	8003b06 <EXTI15_10_IRQHandler+0x9a>
		EXTI->PR |= (EXTI_PR_PR14); //Limpiamos la bandera
 8003af4:	4b0d      	ldr	r3, [pc, #52]	; (8003b2c <EXTI15_10_IRQHandler+0xc0>)
 8003af6:	695b      	ldr	r3, [r3, #20]
 8003af8:	4a0c      	ldr	r2, [pc, #48]	; (8003b2c <EXTI15_10_IRQHandler+0xc0>)
 8003afa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003afe:	6153      	str	r3, [r2, #20]
		callback_extInt14();			//Ejecutamos la ISR
 8003b00:	f7ff fee4 	bl	80038cc <callback_extInt14>
}
 8003b04:	e00f      	b.n	8003b26 <EXTI15_10_IRQHandler+0xba>
	else if(EXTI->PR & EXTI_PR_PR15)
 8003b06:	4b09      	ldr	r3, [pc, #36]	; (8003b2c <EXTI15_10_IRQHandler+0xc0>)
 8003b08:	695b      	ldr	r3, [r3, #20]
 8003b0a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d008      	beq.n	8003b24 <EXTI15_10_IRQHandler+0xb8>
		EXTI->PR |= (EXTI_PR_PR15); //Limpiamos la bandera
 8003b12:	4b06      	ldr	r3, [pc, #24]	; (8003b2c <EXTI15_10_IRQHandler+0xc0>)
 8003b14:	695b      	ldr	r3, [r3, #20]
 8003b16:	4a05      	ldr	r2, [pc, #20]	; (8003b2c <EXTI15_10_IRQHandler+0xc0>)
 8003b18:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003b1c:	6153      	str	r3, [r2, #20]
		callback_extInt15();			//Ejecutamos la ISR
 8003b1e:	f7ff fedd 	bl	80038dc <callback_extInt15>
}
 8003b22:	e000      	b.n	8003b26 <EXTI15_10_IRQHandler+0xba>
		__NOP();
 8003b24:	bf00      	nop
}
 8003b26:	bf00      	nop
 8003b28:	bd80      	pop	{r7, pc}
 8003b2a:	bf00      	nop
 8003b2c:	40013c00 	.word	0x40013c00

08003b30 <GPIO_PIN_Config>:

#include <GPIOxDriver.h>

//Configuracion de los registros para un pin
void GPIO_PIN_Config(GPIO_Handler_t *configuracion, uint8_t mode, uint8_t otyper, uint8_t ospeedr,uint8_t pupdr,uint8_t af)
{
 8003b30:	b480      	push	{r7}
 8003b32:	b083      	sub	sp, #12
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	6078      	str	r0, [r7, #4]
 8003b38:	4608      	mov	r0, r1
 8003b3a:	4611      	mov	r1, r2
 8003b3c:	461a      	mov	r2, r3
 8003b3e:	4603      	mov	r3, r0
 8003b40:	70fb      	strb	r3, [r7, #3]
 8003b42:	460b      	mov	r3, r1
 8003b44:	70bb      	strb	r3, [r7, #2]
 8003b46:	4613      	mov	r3, r2
 8003b48:	707b      	strb	r3, [r7, #1]
	configuracion->GPIO_PinConfig.GPIO_PinModer       = mode; 		// = GPIO_MODE_x->IN-0, OUT-2, ALTFN-3, ANALOG-4
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	78fa      	ldrb	r2, [r7, #3]
 8003b4e:	705a      	strb	r2, [r3, #1]
	configuracion->GPIO_PinConfig.GPIO_PinOTPype	  = otyper;		// = GPIO_OTYPER_x-> PUSHPULL-0, OPENDRAIN-1
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	78ba      	ldrb	r2, [r7, #2]
 8003b54:	709a      	strb	r2, [r3, #2]
	configuracion->GPIO_PinConfig.GPIO_PinSpeed	      = ospeedr;	// = GPIO_OSPEEDR_x-> LOW-0, MEDIUM-1, FAST-2, HIGH-3
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	787a      	ldrb	r2, [r7, #1]
 8003b5a:	70da      	strb	r2, [r3, #3]
	configuracion->GPIO_PinConfig.GPIO_PinPUPdControl = pupdr; 		// = GPIO_PUPDR_x -> NOTHING-0, PULLUP-1, PULLDOWN-2, RESERVED-3
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	7c3a      	ldrb	r2, [r7, #16]
 8003b60:	711a      	strb	r2, [r3, #4]
	configuracion->GPIO_PinConfig.GPIO_PinAltFunMode  = af;			// = AFx, 0-15
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	7d3a      	ldrb	r2, [r7, #20]
 8003b66:	715a      	strb	r2, [r3, #5]
}
 8003b68:	bf00      	nop
 8003b6a:	370c      	adds	r7, #12
 8003b6c:	46bd      	mov	sp, r7
 8003b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b72:	4770      	bx	lr

08003b74 <GPIO_Config>:

//Activacion de la señal de reloj de un elemento en especifico

void GPIO_Config (GPIO_Handler_t *pGPIOHandler)
{
 8003b74:	b480      	push	{r7}
 8003b76:	b085      	sub	sp, #20
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]
	//variables para hacer todo paso a paso
	uint32_t auxConfig = 0;
 8003b7c:	2300      	movs	r3, #0
 8003b7e:	60fb      	str	r3, [r7, #12]
	uint32_t auxPosition = 0;
 8003b80:	2300      	movs	r3, #0
 8003b82:	60bb      	str	r3, [r7, #8]

	//----------------------1) Activamos el periferico-----------------------------

	//Verificamos para GIOPA
	if (pGPIOHandler->pGPIOx == GPIOA)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	689b      	ldr	r3, [r3, #8]
 8003b88:	4a88      	ldr	r2, [pc, #544]	; (8003dac <GPIO_Config+0x238>)
 8003b8a:	4293      	cmp	r3, r2
 8003b8c:	d106      	bne.n	8003b9c <GPIO_Config+0x28>
	{
		//Escribimos 1 (SET) en la posicion correspondiente al GPIOA
		RCC->AHB1ENR |= (RCC_AHB1ENR_GPIOAEN);  //(SET << RCC_AHB1ENR_GPIOA_EN);
 8003b8e:	4b88      	ldr	r3, [pc, #544]	; (8003db0 <GPIO_Config+0x23c>)
 8003b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b92:	4a87      	ldr	r2, [pc, #540]	; (8003db0 <GPIO_Config+0x23c>)
 8003b94:	f043 0301 	orr.w	r3, r3, #1
 8003b98:	6313      	str	r3, [r2, #48]	; 0x30
 8003b9a:	e03a      	b.n	8003c12 <GPIO_Config+0x9e>
		/*Modificamos el registro AHB1ENR(32 bit)presente en periferico RCC, vease el 6.3.9 RCC_AHB1ENR---AHB1
		peripheral clock enable register*/
	}

	//Verificamos para GIOPB
	else if (pGPIOHandler->pGPIOx == GPIOB)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	689b      	ldr	r3, [r3, #8]
 8003ba0:	4a84      	ldr	r2, [pc, #528]	; (8003db4 <GPIO_Config+0x240>)
 8003ba2:	4293      	cmp	r3, r2
 8003ba4:	d106      	bne.n	8003bb4 <GPIO_Config+0x40>
	{
		//Escribimos 1 (SET) en la posicion correspondiente al GPIOB
		RCC->AHB1ENR |= (RCC_AHB1ENR_GPIOBEN);  //(SET << RCC_AHB1ENR_GPIOB_EN);
 8003ba6:	4b82      	ldr	r3, [pc, #520]	; (8003db0 <GPIO_Config+0x23c>)
 8003ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003baa:	4a81      	ldr	r2, [pc, #516]	; (8003db0 <GPIO_Config+0x23c>)
 8003bac:	f043 0302 	orr.w	r3, r3, #2
 8003bb0:	6313      	str	r3, [r2, #48]	; 0x30
 8003bb2:	e02e      	b.n	8003c12 <GPIO_Config+0x9e>
		/*Modificamos el registro AHB1ENR(32 bit)presente en periferico RCC, vease el 6.3.9 RCC_AHB1ENR---AHB1
		peripheral clock enable register*/
	}

	//Verificamos para GIOPC
	else if (pGPIOHandler->pGPIOx == GPIOC)
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	689b      	ldr	r3, [r3, #8]
 8003bb8:	4a7f      	ldr	r2, [pc, #508]	; (8003db8 <GPIO_Config+0x244>)
 8003bba:	4293      	cmp	r3, r2
 8003bbc:	d106      	bne.n	8003bcc <GPIO_Config+0x58>
	{
		//Escribimos 1 (SET) en la posicion correspondiente al GPIOC
		RCC->AHB1ENR |= (RCC_AHB1ENR_GPIOCEN);  //(SET << RCC_AHB1ENR_GPIOC_EN);
 8003bbe:	4b7c      	ldr	r3, [pc, #496]	; (8003db0 <GPIO_Config+0x23c>)
 8003bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bc2:	4a7b      	ldr	r2, [pc, #492]	; (8003db0 <GPIO_Config+0x23c>)
 8003bc4:	f043 0304 	orr.w	r3, r3, #4
 8003bc8:	6313      	str	r3, [r2, #48]	; 0x30
 8003bca:	e022      	b.n	8003c12 <GPIO_Config+0x9e>
		/*Modificamos el registro AHB1ENR(32 bit)presente en periferico RCC, vease el 6.3.9 RCC_AHB1ENR---AHB1
		peripheral clock enable register*/
	}

	//Verificamos para GIOPD
	else if (pGPIOHandler->pGPIOx == GPIOD)
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	689b      	ldr	r3, [r3, #8]
 8003bd0:	4a7a      	ldr	r2, [pc, #488]	; (8003dbc <GPIO_Config+0x248>)
 8003bd2:	4293      	cmp	r3, r2
 8003bd4:	d106      	bne.n	8003be4 <GPIO_Config+0x70>
	{
		//Escribimos 1 (SET) en la posicion correspondiente al GPIOD
		RCC->AHB1ENR |= (RCC_AHB1ENR_GPIODEN);  //(SET << RCC_AHB1ENR_GPIOD_EN);
 8003bd6:	4b76      	ldr	r3, [pc, #472]	; (8003db0 <GPIO_Config+0x23c>)
 8003bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bda:	4a75      	ldr	r2, [pc, #468]	; (8003db0 <GPIO_Config+0x23c>)
 8003bdc:	f043 0308 	orr.w	r3, r3, #8
 8003be0:	6313      	str	r3, [r2, #48]	; 0x30
 8003be2:	e016      	b.n	8003c12 <GPIO_Config+0x9e>
		/*Modificamos el registro AHB1ENR(32 bit)presente en periferico RCC, vease el 6.3.9 RCC_AHB1ENR---AHB1
		peripheral clock enable register*/
	}

	//Verificamos para GIOPE
	else if (pGPIOHandler->pGPIOx == GPIOE)
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	689b      	ldr	r3, [r3, #8]
 8003be8:	4a75      	ldr	r2, [pc, #468]	; (8003dc0 <GPIO_Config+0x24c>)
 8003bea:	4293      	cmp	r3, r2
 8003bec:	d106      	bne.n	8003bfc <GPIO_Config+0x88>
	{
		//Escribimos 1 (SET) en la posicion correspondiente al GPIOE
		RCC->AHB1ENR |= (RCC_AHB1ENR_GPIOEEN);  //(SET << RCC_AHB1ENR_GPIOE_EN);
 8003bee:	4b70      	ldr	r3, [pc, #448]	; (8003db0 <GPIO_Config+0x23c>)
 8003bf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bf2:	4a6f      	ldr	r2, [pc, #444]	; (8003db0 <GPIO_Config+0x23c>)
 8003bf4:	f043 0310 	orr.w	r3, r3, #16
 8003bf8:	6313      	str	r3, [r2, #48]	; 0x30
 8003bfa:	e00a      	b.n	8003c12 <GPIO_Config+0x9e>
		/*Modificamos el registro AHB1ENR(32 bit)presente en periferico RCC, vease el 6.3.9 RCC_AHB1ENR---AHB1
		peripheral clock enable register*/
	}

	//Verificamos para GIOPH
	else if (pGPIOHandler->pGPIOx == GPIOH)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	689b      	ldr	r3, [r3, #8]
 8003c00:	4a70      	ldr	r2, [pc, #448]	; (8003dc4 <GPIO_Config+0x250>)
 8003c02:	4293      	cmp	r3, r2
 8003c04:	d105      	bne.n	8003c12 <GPIO_Config+0x9e>
	{
		//Escribimos 1 (SET) en la posicion correspondiente al GPIOH
		RCC->AHB1ENR |= (RCC_AHB1ENR_GPIOHEN);  //(SET << RCC_AHB1ENR_GPIOH_EN);
 8003c06:	4b6a      	ldr	r3, [pc, #424]	; (8003db0 <GPIO_Config+0x23c>)
 8003c08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c0a:	4a69      	ldr	r2, [pc, #420]	; (8003db0 <GPIO_Config+0x23c>)
 8003c0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c10:	6313      	str	r3, [r2, #48]	; 0x30

	//----------------2) Configurando el registro GPIOx_MODER----------------------
	//SE ENTIENDE

	//Leemos el PinNumber para mover una cantidad de veces  el pinModer
	auxConfig = (pGPIOHandler->GPIO_PinConfig.GPIO_PinModer << 2*pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	785b      	ldrb	r3, [r3, #1]
 8003c16:	461a      	mov	r2, r3
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	781b      	ldrb	r3, [r3, #0]
 8003c1c:	005b      	lsls	r3, r3, #1
 8003c1e:	fa02 f303 	lsl.w	r3, r2, r3
 8003c22:	60fb      	str	r3, [r7, #12]

	//Cargamos auxConfig en el registro MODER
	pGPIOHandler->pGPIOx->MODER &= ~(0b11 << 2*pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	689b      	ldr	r3, [r3, #8]
 8003c28:	681a      	ldr	r2, [r3, #0]
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	781b      	ldrb	r3, [r3, #0]
 8003c2e:	005b      	lsls	r3, r3, #1
 8003c30:	2103      	movs	r1, #3
 8003c32:	fa01 f303 	lsl.w	r3, r1, r3
 8003c36:	43db      	mvns	r3, r3
 8003c38:	4619      	mov	r1, r3
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	689b      	ldr	r3, [r3, #8]
 8003c3e:	400a      	ands	r2, r1
 8003c40:	601a      	str	r2, [r3, #0]
	pGPIOHandler->pGPIOx->MODER |= auxConfig;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	689b      	ldr	r3, [r3, #8]
 8003c46:	6819      	ldr	r1, [r3, #0]
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	689b      	ldr	r3, [r3, #8]
 8003c4c:	68fa      	ldr	r2, [r7, #12]
 8003c4e:	430a      	orrs	r2, r1
 8003c50:	601a      	str	r2, [r3, #0]

	//----------------3) Configurando el registro GPIOx_OTYPER----------------------
	//SE ENTIENDE

	//Leemos el PinNumber para mover una cantidad de veces el pinOTPype
	auxConfig = (pGPIOHandler->GPIO_PinConfig.GPIO_PinOTPype << pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	789b      	ldrb	r3, [r3, #2]
 8003c56:	461a      	mov	r2, r3
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	781b      	ldrb	r3, [r3, #0]
 8003c5c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c60:	60fb      	str	r3, [r7, #12]

	//Cargamos  auxConfig en el registro OTYPER
	pGPIOHandler->pGPIOx->OTYPER &= ~(SET << pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	689b      	ldr	r3, [r3, #8]
 8003c66:	685a      	ldr	r2, [r3, #4]
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	781b      	ldrb	r3, [r3, #0]
 8003c6c:	4619      	mov	r1, r3
 8003c6e:	2301      	movs	r3, #1
 8003c70:	408b      	lsls	r3, r1
 8003c72:	43db      	mvns	r3, r3
 8003c74:	4619      	mov	r1, r3
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	689b      	ldr	r3, [r3, #8]
 8003c7a:	400a      	ands	r2, r1
 8003c7c:	605a      	str	r2, [r3, #4]
	pGPIOHandler->pGPIOx->OTYPER |= auxConfig;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	689b      	ldr	r3, [r3, #8]
 8003c82:	6859      	ldr	r1, [r3, #4]
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	689b      	ldr	r3, [r3, #8]
 8003c88:	68fa      	ldr	r2, [r7, #12]
 8003c8a:	430a      	orrs	r2, r1
 8003c8c:	605a      	str	r2, [r3, #4]

	//----------------4) Configurando el registro GPIOx_OSPEEDR----------------------
	//SE ENTIENDE

	//Leemos el PinNumber para mover una cantidad de veces el pinSpeed
	auxConfig = (pGPIOHandler->GPIO_PinConfig.GPIO_PinSpeed << 2*pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	78db      	ldrb	r3, [r3, #3]
 8003c92:	461a      	mov	r2, r3
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	781b      	ldrb	r3, [r3, #0]
 8003c98:	005b      	lsls	r3, r3, #1
 8003c9a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c9e:	60fb      	str	r3, [r7, #12]

	//Cargamos  auxConfig en el registro OSPEEDR
	pGPIOHandler->pGPIOx->OSPEEDR &= ~(0b11 << 2*pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	689b      	ldr	r3, [r3, #8]
 8003ca4:	689a      	ldr	r2, [r3, #8]
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	781b      	ldrb	r3, [r3, #0]
 8003caa:	005b      	lsls	r3, r3, #1
 8003cac:	2103      	movs	r1, #3
 8003cae:	fa01 f303 	lsl.w	r3, r1, r3
 8003cb2:	43db      	mvns	r3, r3
 8003cb4:	4619      	mov	r1, r3
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	689b      	ldr	r3, [r3, #8]
 8003cba:	400a      	ands	r2, r1
 8003cbc:	609a      	str	r2, [r3, #8]
	pGPIOHandler->pGPIOx->OSPEEDR |= auxConfig;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	689b      	ldr	r3, [r3, #8]
 8003cc2:	6899      	ldr	r1, [r3, #8]
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	689b      	ldr	r3, [r3, #8]
 8003cc8:	68fa      	ldr	r2, [r7, #12]
 8003cca:	430a      	orrs	r2, r1
 8003ccc:	609a      	str	r2, [r3, #8]

	//----------------5) Configurando el registro GPIOx_PUPDR----------------------
	//SE ENTIENDE

	//Leemos el PinNumber para mover una cantidad de veces el pinSpeed
	auxConfig = (pGPIOHandler->GPIO_PinConfig.GPIO_PinPUPdControl << 2*pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	791b      	ldrb	r3, [r3, #4]
 8003cd2:	461a      	mov	r2, r3
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	781b      	ldrb	r3, [r3, #0]
 8003cd8:	005b      	lsls	r3, r3, #1
 8003cda:	fa02 f303 	lsl.w	r3, r2, r3
 8003cde:	60fb      	str	r3, [r7, #12]

	//Cargamos  auxConfig en el registro PUPDR
	pGPIOHandler->pGPIOx->PUPDR &= ~(0b11 << 2*pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	689b      	ldr	r3, [r3, #8]
 8003ce4:	68da      	ldr	r2, [r3, #12]
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	781b      	ldrb	r3, [r3, #0]
 8003cea:	005b      	lsls	r3, r3, #1
 8003cec:	2103      	movs	r1, #3
 8003cee:	fa01 f303 	lsl.w	r3, r1, r3
 8003cf2:	43db      	mvns	r3, r3
 8003cf4:	4619      	mov	r1, r3
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	689b      	ldr	r3, [r3, #8]
 8003cfa:	400a      	ands	r2, r1
 8003cfc:	60da      	str	r2, [r3, #12]
	pGPIOHandler->pGPIOx->PUPDR|= auxConfig;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	689b      	ldr	r3, [r3, #8]
 8003d02:	68d9      	ldr	r1, [r3, #12]
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	689b      	ldr	r3, [r3, #8]
 8003d08:	68fa      	ldr	r2, [r7, #12]
 8003d0a:	430a      	orrs	r2, r1
 8003d0c:	60da      	str	r2, [r3, #12]

	//---------------- MODER: Configurando funciones alternativas----------------------

	//si el Modo de configuracion escogido es GPIO_MODE_ALTFN, entonces activamos el AF
	if(pGPIOHandler->GPIO_PinConfig.GPIO_PinModer == GPIO_MODE_ALTFN)
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	785b      	ldrb	r3, [r3, #1]
 8003d12:	2b02      	cmp	r3, #2
 8003d14:	d143      	bne.n	8003d9e <GPIO_Config+0x22a>
	{
		//Para los pines 0 a 8 escogemos el AFRL
		if (pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber < 8)
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	781b      	ldrb	r3, [r3, #0]
 8003d1a:	2b07      	cmp	r3, #7
 8003d1c:	d81f      	bhi.n	8003d5e <GPIO_Config+0x1ea>
		{
			auxPosition = 4*pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	781b      	ldrb	r3, [r3, #0]
 8003d22:	009b      	lsls	r3, r3, #2
 8003d24:	60bb      	str	r3, [r7, #8]

			//Cargamos auxPosition en el registro AFRL
			pGPIOHandler->pGPIOx->AFR[0] &= ~(0b1111 << auxPosition);
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	689b      	ldr	r3, [r3, #8]
 8003d2a:	6a1a      	ldr	r2, [r3, #32]
 8003d2c:	210f      	movs	r1, #15
 8003d2e:	68bb      	ldr	r3, [r7, #8]
 8003d30:	fa01 f303 	lsl.w	r3, r1, r3
 8003d34:	43db      	mvns	r3, r3
 8003d36:	4619      	mov	r1, r3
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	689b      	ldr	r3, [r3, #8]
 8003d3c:	400a      	ands	r2, r1
 8003d3e:	621a      	str	r2, [r3, #32]
			pGPIOHandler->pGPIOx->AFR[0] |= (pGPIOHandler->GPIO_PinConfig.GPIO_PinAltFunMode << auxPosition);
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	689b      	ldr	r3, [r3, #8]
 8003d44:	6a1a      	ldr	r2, [r3, #32]
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	795b      	ldrb	r3, [r3, #5]
 8003d4a:	4619      	mov	r1, r3
 8003d4c:	68bb      	ldr	r3, [r7, #8]
 8003d4e:	fa01 f303 	lsl.w	r3, r1, r3
 8003d52:	4619      	mov	r1, r3
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	689b      	ldr	r3, [r3, #8]
 8003d58:	430a      	orrs	r2, r1
 8003d5a:	621a      	str	r2, [r3, #32]
			//Cargamos auxPosition en el registro AFRL
			pGPIOHandler->pGPIOx->AFR[1] &= ~(0b1111 << auxPosition);
			pGPIOHandler->pGPIOx->AFR[1] |= (pGPIOHandler->GPIO_PinConfig.GPIO_PinAltFunMode << auxPosition);
		}
	}
}
 8003d5c:	e01f      	b.n	8003d9e <GPIO_Config+0x22a>
			auxPosition = 4*(pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber-8);
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	781b      	ldrb	r3, [r3, #0]
 8003d62:	3b08      	subs	r3, #8
 8003d64:	009b      	lsls	r3, r3, #2
 8003d66:	60bb      	str	r3, [r7, #8]
			pGPIOHandler->pGPIOx->AFR[1] &= ~(0b1111 << auxPosition);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	689b      	ldr	r3, [r3, #8]
 8003d6c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003d6e:	210f      	movs	r1, #15
 8003d70:	68bb      	ldr	r3, [r7, #8]
 8003d72:	fa01 f303 	lsl.w	r3, r1, r3
 8003d76:	43db      	mvns	r3, r3
 8003d78:	4619      	mov	r1, r3
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	689b      	ldr	r3, [r3, #8]
 8003d7e:	400a      	ands	r2, r1
 8003d80:	625a      	str	r2, [r3, #36]	; 0x24
			pGPIOHandler->pGPIOx->AFR[1] |= (pGPIOHandler->GPIO_PinConfig.GPIO_PinAltFunMode << auxPosition);
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	689b      	ldr	r3, [r3, #8]
 8003d86:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	795b      	ldrb	r3, [r3, #5]
 8003d8c:	4619      	mov	r1, r3
 8003d8e:	68bb      	ldr	r3, [r7, #8]
 8003d90:	fa01 f303 	lsl.w	r3, r1, r3
 8003d94:	4619      	mov	r1, r3
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	689b      	ldr	r3, [r3, #8]
 8003d9a:	430a      	orrs	r2, r1
 8003d9c:	625a      	str	r2, [r3, #36]	; 0x24
}
 8003d9e:	bf00      	nop
 8003da0:	3714      	adds	r7, #20
 8003da2:	46bd      	mov	sp, r7
 8003da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da8:	4770      	bx	lr
 8003daa:	bf00      	nop
 8003dac:	40020000 	.word	0x40020000
 8003db0:	40023800 	.word	0x40023800
 8003db4:	40020400 	.word	0x40020400
 8003db8:	40020800 	.word	0x40020800
 8003dbc:	40020c00 	.word	0x40020c00
 8003dc0:	40021000 	.word	0x40021000
 8003dc4:	40021c00 	.word	0x40021c00

08003dc8 <GPIO_writePin>:

//---------------- MODER: Configurando Output: Registro BSRR----------------------

void GPIO_writePin (GPIO_Handler_t *pPinHandler, uint8_t newState)
{
 8003dc8:	b480      	push	{r7}
 8003dca:	b083      	sub	sp, #12
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	6078      	str	r0, [r7, #4]
 8003dd0:	460b      	mov	r3, r1
 8003dd2:	70fb      	strb	r3, [r7, #3]
	//Limpiamos la posicion que deseamos
	//pPinHandler->pGPIOx->ODR &= ~(SET << pPinHandler->GPIO_PinConfig.GPIO_PinNumber);
	if (newState == SET)
 8003dd4:	78fb      	ldrb	r3, [r7, #3]
 8003dd6:	2b01      	cmp	r3, #1
 8003dd8:	d10d      	bne.n	8003df6 <GPIO_writePin+0x2e>
	{
		//Trabajamos con la parte baja del registro
		pPinHandler->pGPIOx->BSRR |= (SET<<pPinHandler->GPIO_PinConfig.GPIO_PinNumber);
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	689b      	ldr	r3, [r3, #8]
 8003dde:	699a      	ldr	r2, [r3, #24]
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	781b      	ldrb	r3, [r3, #0]
 8003de4:	4619      	mov	r1, r3
 8003de6:	2301      	movs	r3, #1
 8003de8:	408b      	lsls	r3, r1
 8003dea:	4619      	mov	r1, r3
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	689b      	ldr	r3, [r3, #8]
 8003df0:	430a      	orrs	r2, r1
 8003df2:	619a      	str	r2, [r3, #24]
	else
	{
		//Trabajamos con la parte alta del registro
		pPinHandler->pGPIOx->BSRR |= (SET<<(pPinHandler->GPIO_PinConfig.GPIO_PinNumber+16));
	}
}
 8003df4:	e00d      	b.n	8003e12 <GPIO_writePin+0x4a>
		pPinHandler->pGPIOx->BSRR |= (SET<<(pPinHandler->GPIO_PinConfig.GPIO_PinNumber+16));
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	689b      	ldr	r3, [r3, #8]
 8003dfa:	699a      	ldr	r2, [r3, #24]
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	781b      	ldrb	r3, [r3, #0]
 8003e00:	3310      	adds	r3, #16
 8003e02:	2101      	movs	r1, #1
 8003e04:	fa01 f303 	lsl.w	r3, r1, r3
 8003e08:	4619      	mov	r1, r3
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	689b      	ldr	r3, [r3, #8]
 8003e0e:	430a      	orrs	r2, r1
 8003e10:	619a      	str	r2, [r3, #24]
}
 8003e12:	bf00      	nop
 8003e14:	370c      	adds	r7, #12
 8003e16:	46bd      	mov	sp, r7
 8003e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e1c:	4770      	bx	lr

08003e1e <GPIOxTooglePin>:
}


//---------------- Toogle ---------------------
void GPIOxTooglePin(GPIO_Handler_t *pPinHandler)
{
 8003e1e:	b480      	push	{r7}
 8003e20:	b083      	sub	sp, #12
 8003e22:	af00      	add	r7, sp, #0
 8003e24:	6078      	str	r0, [r7, #4]
	pPinHandler->pGPIOx->ODR  ^= (SET << pPinHandler->GPIO_PinConfig.GPIO_PinNumber);
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	689b      	ldr	r3, [r3, #8]
 8003e2a:	695a      	ldr	r2, [r3, #20]
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	781b      	ldrb	r3, [r3, #0]
 8003e30:	4619      	mov	r1, r3
 8003e32:	2301      	movs	r3, #1
 8003e34:	408b      	lsls	r3, r1
 8003e36:	4619      	mov	r1, r3
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	689b      	ldr	r3, [r3, #8]
 8003e3c:	404a      	eors	r2, r1
 8003e3e:	615a      	str	r2, [r3, #20]
}
 8003e40:	bf00      	nop
 8003e42:	370c      	adds	r7, #12
 8003e44:	46bd      	mov	sp, r7
 8003e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4a:	4770      	bx	lr

08003e4c <configPLL>:
#include <PLLDriver.h>

uint8_t auxValue = 0;

void configPLL(uint8_t clockSpeed)
{
 8003e4c:	b480      	push	{r7}
 8003e4e:	b083      	sub	sp, #12
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	4603      	mov	r3, r0
 8003e54:	71fb      	strb	r3, [r7, #7]
	//Guardamos en una variable auxiliar la velocidad del reloj
	auxValue = clockSpeed;
 8003e56:	4a39      	ldr	r2, [pc, #228]	; (8003f3c <configPLL+0xf0>)
 8003e58:	79fb      	ldrb	r3, [r7, #7]
 8003e5a:	7013      	strb	r3, [r2, #0]
	//Registro: CFGR

	/*El limite de la fuente de reloj para el bus APB1 es 50 Mhz, por tanto si la velocidad de reloj
	 * especificada es mayor a dicho se activa un preescaler de 4 para dicho bus
	*/
	if(clockSpeed<50)
 8003e5c:	79fb      	ldrb	r3, [r7, #7]
 8003e5e:	2b31      	cmp	r3, #49	; 0x31
 8003e60:	d804      	bhi.n	8003e6c <configPLL+0x20>
	{
		RCC->CFGR |= RCC_CFGR_PPRE1_DIV1;
 8003e62:	4b37      	ldr	r3, [pc, #220]	; (8003f40 <configPLL+0xf4>)
 8003e64:	4a36      	ldr	r2, [pc, #216]	; (8003f40 <configPLL+0xf4>)
 8003e66:	689b      	ldr	r3, [r3, #8]
 8003e68:	6093      	str	r3, [r2, #8]
 8003e6a:	e005      	b.n	8003e78 <configPLL+0x2c>
	}
	else
	{
		RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 8003e6c:	4b34      	ldr	r3, [pc, #208]	; (8003f40 <configPLL+0xf4>)
 8003e6e:	689b      	ldr	r3, [r3, #8]
 8003e70:	4a33      	ldr	r2, [pc, #204]	; (8003f40 <configPLL+0xf4>)
 8003e72:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 8003e76:	6093      	str	r3, [r2, #8]

	//adjustHSI();

	//-------------2) Seleccion del HSI como la fuente de reloj para el PLL---------------
	//Registro: PLLCFGR
	RCC->PLLCFGR &= ~(0b1<<RCC_PLLCFGR_PLLSRC_Pos);
 8003e78:	4b31      	ldr	r3, [pc, #196]	; (8003f40 <configPLL+0xf4>)
 8003e7a:	685b      	ldr	r3, [r3, #4]
 8003e7c:	4a30      	ldr	r2, [pc, #192]	; (8003f40 <configPLL+0xf4>)
 8003e7e:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8003e82:	6053      	str	r3, [r2, #4]

	//----a) Modificacion del factor divisor M---------
	     //Señal de entrada al VCO entre 1 MHz y 2 MHz
	//De acuerdo al Manual de usuario se especifica un valor de 8 para que la señal de entrada al VCO sea de 2 Mhz; pero funciona bien con 1Mhz
	//Para el caso de 100Mhz, eston valores cambian para tener la presicion que se requiere
	RCC->PLLCFGR |= (18<<RCC_PLLCFGR_PLLM_Pos);  //16
 8003e84:	4b2e      	ldr	r3, [pc, #184]	; (8003f40 <configPLL+0xf4>)
 8003e86:	685b      	ldr	r3, [r3, #4]
 8003e88:	4a2d      	ldr	r2, [pc, #180]	; (8003f40 <configPLL+0xf4>)
 8003e8a:	f043 0312 	orr.w	r3, r3, #18
 8003e8e:	6053      	str	r3, [r2, #4]
         //Señal de salida al VCO entre 100 MHz y 438 MHz
		 //El valor de N sera entre de 50 y 100   ------> M=8
		 //El valor de N sera entre de 100 y 400  ------> M=16
	//De acuerdo al Manual de usuario y los calculos realizados el valor de N sera entre 100 y 400, para un valor de P de 4.
	//Para el caso de 100Mhz, eston valores cambian para tener la presicion que se requiere
	RCC->PLLCFGR |= ((clockSpeed*4-14)<<RCC_PLLCFGR_PLLN_Pos); //-14
 8003e90:	4b2b      	ldr	r3, [pc, #172]	; (8003f40 <configPLL+0xf4>)
 8003e92:	685b      	ldr	r3, [r3, #4]
 8003e94:	79fa      	ldrb	r2, [r7, #7]
 8003e96:	0092      	lsls	r2, r2, #2
 8003e98:	3a0e      	subs	r2, #14
 8003e9a:	0192      	lsls	r2, r2, #6
 8003e9c:	4611      	mov	r1, r2
 8003e9e:	4a28      	ldr	r2, [pc, #160]	; (8003f40 <configPLL+0xf4>)
 8003ea0:	430b      	orrs	r3, r1
 8003ea2:	6053      	str	r3, [r2, #4]

	//----c) Modificacion del factor divisor P-----
	     //Señal de salida del PLL entre 25 MHz y 100 MHz
	RCC->PLLCFGR |= (0b01<<RCC_PLLCFGR_PLLP_Pos);   //El valor establecido es 4
 8003ea4:	4b26      	ldr	r3, [pc, #152]	; (8003f40 <configPLL+0xf4>)
 8003ea6:	685b      	ldr	r3, [r3, #4]
 8003ea8:	4a25      	ldr	r2, [pc, #148]	; (8003f40 <configPLL+0xf4>)
 8003eaa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003eae:	6053      	str	r3, [r2, #4]

	//---------------------------3) Activacion PLL----------------------------------
	//Registro: CR

	RCC->CR |= RCC_CR_PLLON;  //Escribimos un valor alto en el bit PLLON para su habilitacion
 8003eb0:	4b23      	ldr	r3, [pc, #140]	; (8003f40 <configPLL+0xf4>)
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	4a22      	ldr	r2, [pc, #136]	; (8003f40 <configPLL+0xf4>)
 8003eb6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003eba:	6013      	str	r3, [r2, #0]

	//Espera de la activacion del PLL
	while(!(RCC->CR & RCC_CR_PLLRDY))
 8003ebc:	e000      	b.n	8003ec0 <configPLL+0x74>
	{
		__NOP();
 8003ebe:	bf00      	nop
	while(!(RCC->CR & RCC_CR_PLLRDY))
 8003ec0:	4b1f      	ldr	r3, [pc, #124]	; (8003f40 <configPLL+0xf4>)
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d0f8      	beq.n	8003ebe <configPLL+0x72>

	//---------------------------4) Valor de Latencia----------------------------------
	//Registro: ACR

	//Se define el valor de la latencia de acuerdo a la velocidad de reloj establecida
	if (90<clockSpeed && clockSpeed<=100)
 8003ecc:	79fb      	ldrb	r3, [r7, #7]
 8003ece:	2b5a      	cmp	r3, #90	; 0x5a
 8003ed0:	d909      	bls.n	8003ee6 <configPLL+0x9a>
 8003ed2:	79fb      	ldrb	r3, [r7, #7]
 8003ed4:	2b64      	cmp	r3, #100	; 0x64
 8003ed6:	d806      	bhi.n	8003ee6 <configPLL+0x9a>
	{
		FLASH->ACR |= FLASH_ACR_LATENCY_3WS;
 8003ed8:	4b1a      	ldr	r3, [pc, #104]	; (8003f44 <configPLL+0xf8>)
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	4a19      	ldr	r2, [pc, #100]	; (8003f44 <configPLL+0xf8>)
 8003ede:	f043 0303 	orr.w	r3, r3, #3
 8003ee2:	6013      	str	r3, [r2, #0]
 8003ee4:	e01d      	b.n	8003f22 <configPLL+0xd6>
	}
	else if (64<clockSpeed && clockSpeed<=90)
 8003ee6:	79fb      	ldrb	r3, [r7, #7]
 8003ee8:	2b40      	cmp	r3, #64	; 0x40
 8003eea:	d909      	bls.n	8003f00 <configPLL+0xb4>
 8003eec:	79fb      	ldrb	r3, [r7, #7]
 8003eee:	2b5a      	cmp	r3, #90	; 0x5a
 8003ef0:	d806      	bhi.n	8003f00 <configPLL+0xb4>
	{
		FLASH->ACR |= FLASH_ACR_LATENCY_2WS;
 8003ef2:	4b14      	ldr	r3, [pc, #80]	; (8003f44 <configPLL+0xf8>)
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	4a13      	ldr	r2, [pc, #76]	; (8003f44 <configPLL+0xf8>)
 8003ef8:	f043 0302 	orr.w	r3, r3, #2
 8003efc:	6013      	str	r3, [r2, #0]
 8003efe:	e010      	b.n	8003f22 <configPLL+0xd6>
	}
	else if (30<clockSpeed && clockSpeed<=64)
 8003f00:	79fb      	ldrb	r3, [r7, #7]
 8003f02:	2b1e      	cmp	r3, #30
 8003f04:	d909      	bls.n	8003f1a <configPLL+0xce>
 8003f06:	79fb      	ldrb	r3, [r7, #7]
 8003f08:	2b40      	cmp	r3, #64	; 0x40
 8003f0a:	d806      	bhi.n	8003f1a <configPLL+0xce>
	{
		FLASH->ACR |= FLASH_ACR_LATENCY_1WS;
 8003f0c:	4b0d      	ldr	r3, [pc, #52]	; (8003f44 <configPLL+0xf8>)
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	4a0c      	ldr	r2, [pc, #48]	; (8003f44 <configPLL+0xf8>)
 8003f12:	f043 0301 	orr.w	r3, r3, #1
 8003f16:	6013      	str	r3, [r2, #0]
 8003f18:	e003      	b.n	8003f22 <configPLL+0xd6>
	}
	else
	{
		FLASH->ACR |= FLASH_ACR_LATENCY_0WS;
 8003f1a:	4b0a      	ldr	r3, [pc, #40]	; (8003f44 <configPLL+0xf8>)
 8003f1c:	4a09      	ldr	r2, [pc, #36]	; (8003f44 <configPLL+0xf8>)
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	6013      	str	r3, [r2, #0]
	}

	//------------------5) Seleccion del PLL como la fuente de reloj del sistema----------------------------
	//Registro: CFGR

	RCC->CFGR |= (0b10<<RCC_CFGR_SW_Pos);
 8003f22:	4b07      	ldr	r3, [pc, #28]	; (8003f40 <configPLL+0xf4>)
 8003f24:	689b      	ldr	r3, [r3, #8]
 8003f26:	4a06      	ldr	r2, [pc, #24]	; (8003f40 <configPLL+0xf4>)
 8003f28:	f043 0302 	orr.w	r3, r3, #2
 8003f2c:	6093      	str	r3, [r2, #8]

}
 8003f2e:	bf00      	nop
 8003f30:	370c      	adds	r7, #12
 8003f32:	46bd      	mov	sp, r7
 8003f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f38:	4770      	bx	lr
 8003f3a:	bf00      	nop
 8003f3c:	20000460 	.word	0x20000460
 8003f40:	40023800 	.word	0x40023800
 8003f44:	40023c00 	.word	0x40023c00

08003f48 <getConfigPLL>:
	RCC->CR |= hsiTrimValue<<RCC_CR_HSITRIM_Pos;            //Cargamos la calibracion
}

//Funcion que retorna la velocidad de reloj entregado por el PLL o por el HSI en MHz
uint8_t getConfigPLL(void)
{
 8003f48:	b480      	push	{r7}
 8003f4a:	b083      	sub	sp, #12
 8003f4c:	af00      	add	r7, sp, #0
	uint8_t clockSpeed = 0;
 8003f4e:	2300      	movs	r3, #0
 8003f50:	71fb      	strb	r3, [r7, #7]
	//Verifica si el PLL esta activo
	if((RCC->CFGR & 0b11) == 0b10)
 8003f52:	4b09      	ldr	r3, [pc, #36]	; (8003f78 <getConfigPLL+0x30>)
 8003f54:	689b      	ldr	r3, [r3, #8]
 8003f56:	f003 0303 	and.w	r3, r3, #3
 8003f5a:	2b02      	cmp	r3, #2
 8003f5c:	d103      	bne.n	8003f66 <getConfigPLL+0x1e>
	{
		clockSpeed = auxValue;
 8003f5e:	4b07      	ldr	r3, [pc, #28]	; (8003f7c <getConfigPLL+0x34>)
 8003f60:	781b      	ldrb	r3, [r3, #0]
 8003f62:	71fb      	strb	r3, [r7, #7]
 8003f64:	e001      	b.n	8003f6a <getConfigPLL+0x22>
	}
	else
	{
		clockSpeed = CLOCK_SPEED_16MHZ;
 8003f66:	2310      	movs	r3, #16
 8003f68:	71fb      	strb	r3, [r7, #7]
	}
	return clockSpeed;
 8003f6a:	79fb      	ldrb	r3, [r7, #7]
}
 8003f6c:	4618      	mov	r0, r3
 8003f6e:	370c      	adds	r7, #12
 8003f70:	46bd      	mov	sp, r7
 8003f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f76:	4770      	bx	lr
 8003f78:	40023800 	.word	0x40023800
 8003f7c:	20000460 	.word	0x20000460

08003f80 <getClockAPB1>:

//Funcion que retorna la velocidad de reloj entregada al bus APB1
uint8_t getClockAPB1(void)
{
 8003f80:	b580      	push	{r7, lr}
 8003f82:	b082      	sub	sp, #8
 8003f84:	af00      	add	r7, sp, #0
	uint8_t clock = getConfigPLL();  	     //Obtenemos la velocidad de reloj del sistema
 8003f86:	f7ff ffdf 	bl	8003f48 <getConfigPLL>
 8003f8a:	4603      	mov	r3, r0
 8003f8c:	71bb      	strb	r3, [r7, #6]
	uint8_t clockAPB1 = 0;                   //Variable que guarda la velocidad de reloj entrante al bus APB1
 8003f8e:	2300      	movs	r3, #0
 8003f90:	71fb      	strb	r3, [r7, #7]

	//verificamos si el preescaler de 4 estara activado deacuerdo a la frecuencia max del bus
	if(clock<50)
 8003f92:	79bb      	ldrb	r3, [r7, #6]
 8003f94:	2b31      	cmp	r3, #49	; 0x31
 8003f96:	d802      	bhi.n	8003f9e <getClockAPB1+0x1e>
	{
		clockAPB1 = clock;
 8003f98:	79bb      	ldrb	r3, [r7, #6]
 8003f9a:	71fb      	strb	r3, [r7, #7]
 8003f9c:	e002      	b.n	8003fa4 <getClockAPB1+0x24>
	}
	else
	{
		clockAPB1 = clock/4;
 8003f9e:	79bb      	ldrb	r3, [r7, #6]
 8003fa0:	089b      	lsrs	r3, r3, #2
 8003fa2:	71fb      	strb	r3, [r7, #7]
	}
	return clockAPB1;
 8003fa4:	79fb      	ldrb	r3, [r7, #7]
}
 8003fa6:	4618      	mov	r0, r3
 8003fa8:	3708      	adds	r7, #8
 8003faa:	46bd      	mov	sp, r7
 8003fac:	bd80      	pop	{r7, pc}
	...

08003fb0 <configMCO2>:

//Funcion que selecciona la señal de reloj saliente del pin MCO1
void configMCO2(uint8_t value)
{
 8003fb0:	b480      	push	{r7}
 8003fb2:	b083      	sub	sp, #12
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	4603      	mov	r3, r0
 8003fb8:	71fb      	strb	r3, [r7, #7]
	RCC->CFGR &= ~(0b11<<RCC_CFGR_MCO2_Pos);
 8003fba:	4b0a      	ldr	r3, [pc, #40]	; (8003fe4 <configMCO2+0x34>)
 8003fbc:	689b      	ldr	r3, [r3, #8]
 8003fbe:	4a09      	ldr	r2, [pc, #36]	; (8003fe4 <configMCO2+0x34>)
 8003fc0:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8003fc4:	6093      	str	r3, [r2, #8]
	RCC->CFGR |= (value<<RCC_CFGR_MCO2_Pos);
 8003fc6:	4b07      	ldr	r3, [pc, #28]	; (8003fe4 <configMCO2+0x34>)
 8003fc8:	689b      	ldr	r3, [r3, #8]
 8003fca:	79fa      	ldrb	r2, [r7, #7]
 8003fcc:	0792      	lsls	r2, r2, #30
 8003fce:	4611      	mov	r1, r2
 8003fd0:	4a04      	ldr	r2, [pc, #16]	; (8003fe4 <configMCO2+0x34>)
 8003fd2:	430b      	orrs	r3, r1
 8003fd4:	6093      	str	r3, [r2, #8]
}
 8003fd6:	bf00      	nop
 8003fd8:	370c      	adds	r7, #12
 8003fda:	46bd      	mov	sp, r7
 8003fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe0:	4770      	bx	lr
 8003fe2:	bf00      	nop
 8003fe4:	40023800 	.word	0x40023800

08003fe8 <configMCO2PRE>:

//Funcion que selecciona la señal de reloj saliente del pin MCO1
void configMCO2PRE(uint8_t value)
{
 8003fe8:	b480      	push	{r7}
 8003fea:	b083      	sub	sp, #12
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	4603      	mov	r3, r0
 8003ff0:	71fb      	strb	r3, [r7, #7]
	//Selecionamos el prescaler de acuerdo al valor definido
	switch (value){
 8003ff2:	79fb      	ldrb	r3, [r7, #7]
 8003ff4:	3b01      	subs	r3, #1
 8003ff6:	2b04      	cmp	r3, #4
 8003ff8:	d84b      	bhi.n	8004092 <configMCO2PRE+0xaa>
 8003ffa:	a201      	add	r2, pc, #4	; (adr r2, 8004000 <configMCO2PRE+0x18>)
 8003ffc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004000:	08004015 	.word	0x08004015
 8004004:	0800402b 	.word	0x0800402b
 8004008:	08004045 	.word	0x08004045
 800400c:	0800405f 	.word	0x0800405f
 8004010:	08004079 	.word	0x08004079
		case 1:
		{
			RCC->CFGR &= ~(0b111<<RCC_CFGR_MCO2PRE_Pos);
 8004014:	4b23      	ldr	r3, [pc, #140]	; (80040a4 <configMCO2PRE+0xbc>)
 8004016:	689b      	ldr	r3, [r3, #8]
 8004018:	4a22      	ldr	r2, [pc, #136]	; (80040a4 <configMCO2PRE+0xbc>)
 800401a:	f023 5360 	bic.w	r3, r3, #939524096	; 0x38000000
 800401e:	6093      	str	r3, [r2, #8]
			RCC->CFGR |= (0b000<<RCC_CFGR_MCO2PRE_Pos);
 8004020:	4b20      	ldr	r3, [pc, #128]	; (80040a4 <configMCO2PRE+0xbc>)
 8004022:	4a20      	ldr	r2, [pc, #128]	; (80040a4 <configMCO2PRE+0xbc>)
 8004024:	689b      	ldr	r3, [r3, #8]
 8004026:	6093      	str	r3, [r2, #8]
			break;
 8004028:	e035      	b.n	8004096 <configMCO2PRE+0xae>
		}
		case 2:
		{
			RCC->CFGR &= ~(0b111<<RCC_CFGR_MCO2PRE_Pos);
 800402a:	4b1e      	ldr	r3, [pc, #120]	; (80040a4 <configMCO2PRE+0xbc>)
 800402c:	689b      	ldr	r3, [r3, #8]
 800402e:	4a1d      	ldr	r2, [pc, #116]	; (80040a4 <configMCO2PRE+0xbc>)
 8004030:	f023 5360 	bic.w	r3, r3, #939524096	; 0x38000000
 8004034:	6093      	str	r3, [r2, #8]
			RCC->CFGR |= (0b100<<RCC_CFGR_MCO2PRE_Pos);
 8004036:	4b1b      	ldr	r3, [pc, #108]	; (80040a4 <configMCO2PRE+0xbc>)
 8004038:	689b      	ldr	r3, [r3, #8]
 800403a:	4a1a      	ldr	r2, [pc, #104]	; (80040a4 <configMCO2PRE+0xbc>)
 800403c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004040:	6093      	str	r3, [r2, #8]
			break;
 8004042:	e028      	b.n	8004096 <configMCO2PRE+0xae>
		}
		case 3:
		{
			RCC->CFGR &= ~(0b111<<RCC_CFGR_MCO2PRE_Pos);
 8004044:	4b17      	ldr	r3, [pc, #92]	; (80040a4 <configMCO2PRE+0xbc>)
 8004046:	689b      	ldr	r3, [r3, #8]
 8004048:	4a16      	ldr	r2, [pc, #88]	; (80040a4 <configMCO2PRE+0xbc>)
 800404a:	f023 5360 	bic.w	r3, r3, #939524096	; 0x38000000
 800404e:	6093      	str	r3, [r2, #8]
			RCC->CFGR |= (0b101<<RCC_CFGR_MCO2PRE_Pos);
 8004050:	4b14      	ldr	r3, [pc, #80]	; (80040a4 <configMCO2PRE+0xbc>)
 8004052:	689b      	ldr	r3, [r3, #8]
 8004054:	4a13      	ldr	r2, [pc, #76]	; (80040a4 <configMCO2PRE+0xbc>)
 8004056:	f043 5320 	orr.w	r3, r3, #671088640	; 0x28000000
 800405a:	6093      	str	r3, [r2, #8]
			break;
 800405c:	e01b      	b.n	8004096 <configMCO2PRE+0xae>
		}
		case 4:
		{
			RCC->CFGR &= ~(0b111<<RCC_CFGR_MCO2PRE_Pos);
 800405e:	4b11      	ldr	r3, [pc, #68]	; (80040a4 <configMCO2PRE+0xbc>)
 8004060:	689b      	ldr	r3, [r3, #8]
 8004062:	4a10      	ldr	r2, [pc, #64]	; (80040a4 <configMCO2PRE+0xbc>)
 8004064:	f023 5360 	bic.w	r3, r3, #939524096	; 0x38000000
 8004068:	6093      	str	r3, [r2, #8]
			RCC->CFGR |= (0b110<<RCC_CFGR_MCO2PRE_Pos);
 800406a:	4b0e      	ldr	r3, [pc, #56]	; (80040a4 <configMCO2PRE+0xbc>)
 800406c:	689b      	ldr	r3, [r3, #8]
 800406e:	4a0d      	ldr	r2, [pc, #52]	; (80040a4 <configMCO2PRE+0xbc>)
 8004070:	f043 5340 	orr.w	r3, r3, #805306368	; 0x30000000
 8004074:	6093      	str	r3, [r2, #8]
			break;
 8004076:	e00e      	b.n	8004096 <configMCO2PRE+0xae>
		}
		case 5:
		{
			RCC->CFGR &= ~(0b111<<RCC_CFGR_MCO2PRE_Pos);
 8004078:	4b0a      	ldr	r3, [pc, #40]	; (80040a4 <configMCO2PRE+0xbc>)
 800407a:	689b      	ldr	r3, [r3, #8]
 800407c:	4a09      	ldr	r2, [pc, #36]	; (80040a4 <configMCO2PRE+0xbc>)
 800407e:	f023 5360 	bic.w	r3, r3, #939524096	; 0x38000000
 8004082:	6093      	str	r3, [r2, #8]
			RCC->CFGR |= (0b111<<RCC_CFGR_MCO2PRE_Pos);
 8004084:	4b07      	ldr	r3, [pc, #28]	; (80040a4 <configMCO2PRE+0xbc>)
 8004086:	689b      	ldr	r3, [r3, #8]
 8004088:	4a06      	ldr	r2, [pc, #24]	; (80040a4 <configMCO2PRE+0xbc>)
 800408a:	f043 5360 	orr.w	r3, r3, #939524096	; 0x38000000
 800408e:	6093      	str	r3, [r2, #8]
			break;
 8004090:	e001      	b.n	8004096 <configMCO2PRE+0xae>
		}
		default:
		{
			__NOP();
 8004092:	bf00      	nop
			break;
 8004094:	bf00      	nop
		}
	}

}
 8004096:	bf00      	nop
 8004098:	370c      	adds	r7, #12
 800409a:	46bd      	mov	sp, r7
 800409c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a0:	4770      	bx	lr
 80040a2:	bf00      	nop
 80040a4:	40023800 	.word	0x40023800

080040a8 <pwm_Config>:

#include <PwmDriver.h>
#include <PLLDriver.h>

void pwm_Config(PWM_Handler_t *prtPwmHandler)
{
 80040a8:	b580      	push	{r7, lr}
 80040aa:	b082      	sub	sp, #8
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	6078      	str	r0, [r7, #4]
	//---------------------------1) Activamos la señal de reloj al periferico----------------------------------
	//Registro: APB1ENR

	//Verificamos para TIM2
	if(prtPwmHandler->ptrTIMx==TIM2)
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	689b      	ldr	r3, [r3, #8]
 80040b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80040b8:	d106      	bne.n	80040c8 <pwm_Config+0x20>
	{
		/*Activamos el periferico escribiendo un 1 deacuerdo a la posicion
		* del periferico en el registro*/
		RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 80040ba:	4b81      	ldr	r3, [pc, #516]	; (80042c0 <pwm_Config+0x218>)
 80040bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040be:	4a80      	ldr	r2, [pc, #512]	; (80042c0 <pwm_Config+0x218>)
 80040c0:	f043 0301 	orr.w	r3, r3, #1
 80040c4:	6413      	str	r3, [r2, #64]	; 0x40
 80040c6:	e024      	b.n	8004112 <pwm_Config+0x6a>

	}
	//Verificamos para TIM3
	else if(prtPwmHandler->ptrTIMx==TIM3)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	689b      	ldr	r3, [r3, #8]
 80040cc:	4a7d      	ldr	r2, [pc, #500]	; (80042c4 <pwm_Config+0x21c>)
 80040ce:	4293      	cmp	r3, r2
 80040d0:	d106      	bne.n	80040e0 <pwm_Config+0x38>
	{
		/*Activamos el periferico escribiendo un 1 deacuerdo a la posicion
		 * del periferico en el registro*/
		RCC->APB1ENR |= RCC_APB1ENR_TIM3EN;
 80040d2:	4b7b      	ldr	r3, [pc, #492]	; (80042c0 <pwm_Config+0x218>)
 80040d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040d6:	4a7a      	ldr	r2, [pc, #488]	; (80042c0 <pwm_Config+0x218>)
 80040d8:	f043 0302 	orr.w	r3, r3, #2
 80040dc:	6413      	str	r3, [r2, #64]	; 0x40
 80040de:	e018      	b.n	8004112 <pwm_Config+0x6a>

	}
	//Verificamos para TIM4
	else if(prtPwmHandler->ptrTIMx==TIM4)
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	689b      	ldr	r3, [r3, #8]
 80040e4:	4a78      	ldr	r2, [pc, #480]	; (80042c8 <pwm_Config+0x220>)
 80040e6:	4293      	cmp	r3, r2
 80040e8:	d106      	bne.n	80040f8 <pwm_Config+0x50>
	{
		/*Activamos el periferico escribiendo un 1 deacuerdo a la posicion
		 * del periferico en el registro*/
		RCC->APB1ENR |= RCC_APB1ENR_TIM4EN;
 80040ea:	4b75      	ldr	r3, [pc, #468]	; (80042c0 <pwm_Config+0x218>)
 80040ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040ee:	4a74      	ldr	r2, [pc, #464]	; (80042c0 <pwm_Config+0x218>)
 80040f0:	f043 0304 	orr.w	r3, r3, #4
 80040f4:	6413      	str	r3, [r2, #64]	; 0x40
 80040f6:	e00c      	b.n	8004112 <pwm_Config+0x6a>

	}
	//Verificamos para TIM5
	else if(prtPwmHandler->ptrTIMx==TIM5)
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	689b      	ldr	r3, [r3, #8]
 80040fc:	4a73      	ldr	r2, [pc, #460]	; (80042cc <pwm_Config+0x224>)
 80040fe:	4293      	cmp	r3, r2
 8004100:	d106      	bne.n	8004110 <pwm_Config+0x68>
	{
		/*Activamos el periferico escribiendo un 1 deacuerdo a la posicion
		 * del periferico en el registro*/
		RCC->APB1ENR |= RCC_APB1ENR_TIM5EN;
 8004102:	4b6f      	ldr	r3, [pc, #444]	; (80042c0 <pwm_Config+0x218>)
 8004104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004106:	4a6e      	ldr	r2, [pc, #440]	; (80042c0 <pwm_Config+0x218>)
 8004108:	f043 0308 	orr.w	r3, r3, #8
 800410c:	6413      	str	r3, [r2, #64]	; 0x40
 800410e:	e000      	b.n	8004112 <pwm_Config+0x6a>

	}
	else
	{
		__NOP();
 8004110:	bf00      	nop
	}

	//---------------------------2) Cargamos el valor del dutty------------------------------------
	//Registro: CCRx

	setDuttyCycle(prtPwmHandler);
 8004112:	6878      	ldr	r0, [r7, #4]
 8004114:	f000 fa4c 	bl	80045b0 <setDuttyCycle>

	//---------------------------3) Configuracion del CCMRx------------------------------------------
	//Registro: CCMRx

	switch(prtPwmHandler->config.channel)
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	781b      	ldrb	r3, [r3, #0]
 800411c:	2b03      	cmp	r3, #3
 800411e:	f200 8118 	bhi.w	8004352 <pwm_Config+0x2aa>
 8004122:	a201      	add	r2, pc, #4	; (adr r2, 8004128 <pwm_Config+0x80>)
 8004124:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004128:	08004139 	.word	0x08004139
 800412c:	080041bb 	.word	0x080041bb
 8004130:	0800423d 	.word	0x0800423d
 8004134:	080042d1 	.word	0x080042d1
	{
	//Configuracion del CCMR1_Channel 1
	case PWM_CHANNEL_1:
	{
		//Selecionamos el canal como salida
		prtPwmHandler->ptrTIMx->CCMR1 &= ~TIM_CCMR1_CC1S;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	689b      	ldr	r3, [r3, #8]
 800413c:	699a      	ldr	r2, [r3, #24]
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	689b      	ldr	r3, [r3, #8]
 8004142:	f022 0203 	bic.w	r2, r2, #3
 8004146:	619a      	str	r2, [r3, #24]
		//configuramos el canal como PWM
		prtPwmHandler->ptrTIMx->CCMR1 &= ~(0b111<<TIM_CCMR1_OC1M_Pos);
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	689b      	ldr	r3, [r3, #8]
 800414c:	699a      	ldr	r2, [r3, #24]
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	689b      	ldr	r3, [r3, #8]
 8004152:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8004156:	619a      	str	r2, [r3, #24]
		prtPwmHandler->ptrTIMx->CCMR1 |= (0b110<<TIM_CCMR1_OC1M_Pos);
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	689b      	ldr	r3, [r3, #8]
 800415c:	699a      	ldr	r2, [r3, #24]
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	689b      	ldr	r3, [r3, #8]
 8004162:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8004166:	619a      	str	r2, [r3, #24]
		//Activamos la funcionalidad de pre-load
		prtPwmHandler->ptrTIMx->CCMR1 &= ~TIM_CCMR1_OC1PE;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	689b      	ldr	r3, [r3, #8]
 800416c:	699a      	ldr	r2, [r3, #24]
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	689b      	ldr	r3, [r3, #8]
 8004172:	f022 0208 	bic.w	r2, r2, #8
 8004176:	619a      	str	r2, [r3, #24]
		prtPwmHandler->ptrTIMx->CCMR1 |= TIM_CCMR1_OC1PE;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	689b      	ldr	r3, [r3, #8]
 800417c:	699a      	ldr	r2, [r3, #24]
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	689b      	ldr	r3, [r3, #8]
 8004182:	f042 0208 	orr.w	r2, r2, #8
 8004186:	619a      	str	r2, [r3, #24]
		//Configuracion adicional
		prtPwmHandler->ptrTIMx->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	689b      	ldr	r3, [r3, #8]
 800418c:	699a      	ldr	r2, [r3, #24]
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	689b      	ldr	r3, [r3, #8]
 8004192:	f022 0204 	bic.w	r2, r2, #4
 8004196:	619a      	str	r2, [r3, #24]
		prtPwmHandler->ptrTIMx->CCMR1 |= TIM_CCMR1_OC1FE;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	689b      	ldr	r3, [r3, #8]
 800419c:	699a      	ldr	r2, [r3, #24]
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	689b      	ldr	r3, [r3, #8]
 80041a2:	f042 0204 	orr.w	r2, r2, #4
 80041a6:	619a      	str	r2, [r3, #24]
		prtPwmHandler->ptrTIMx->CCMR1 &= ~TIM_CCMR1_OC1CE;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	689b      	ldr	r3, [r3, #8]
 80041ac:	699a      	ldr	r2, [r3, #24]
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	689b      	ldr	r3, [r3, #8]
 80041b2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80041b6:	619a      	str	r2, [r3, #24]

		break;
 80041b8:	e0cc      	b.n	8004354 <pwm_Config+0x2ac>
	}
	//Configuracion del CCMR1_Channel 2
	case PWM_CHANNEL_2:
	{
		//Selecionamos el canal como salida
		prtPwmHandler->ptrTIMx->CCMR1 &= ~TIM_CCMR1_CC1S;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	689b      	ldr	r3, [r3, #8]
 80041be:	699a      	ldr	r2, [r3, #24]
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	689b      	ldr	r3, [r3, #8]
 80041c4:	f022 0203 	bic.w	r2, r2, #3
 80041c8:	619a      	str	r2, [r3, #24]
		//configuramos el canal como PWM
		prtPwmHandler->ptrTIMx->CCMR1 &= ~(0b111<<TIM_CCMR1_OC2M_Pos);
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	689b      	ldr	r3, [r3, #8]
 80041ce:	699a      	ldr	r2, [r3, #24]
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	689b      	ldr	r3, [r3, #8]
 80041d4:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 80041d8:	619a      	str	r2, [r3, #24]
		prtPwmHandler->ptrTIMx->CCMR1 |= (0b110<<TIM_CCMR1_OC2M_Pos);
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	689b      	ldr	r3, [r3, #8]
 80041de:	699a      	ldr	r2, [r3, #24]
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	689b      	ldr	r3, [r3, #8]
 80041e4:	f442 42c0 	orr.w	r2, r2, #24576	; 0x6000
 80041e8:	619a      	str	r2, [r3, #24]
		//Activamos la funcionalidad de pre-load
		prtPwmHandler->ptrTIMx->CCMR1 &= ~TIM_CCMR1_OC2PE;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	689b      	ldr	r3, [r3, #8]
 80041ee:	699a      	ldr	r2, [r3, #24]
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	689b      	ldr	r3, [r3, #8]
 80041f4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80041f8:	619a      	str	r2, [r3, #24]
		prtPwmHandler->ptrTIMx->CCMR1 |= TIM_CCMR1_OC2PE;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	689b      	ldr	r3, [r3, #8]
 80041fe:	699a      	ldr	r2, [r3, #24]
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	689b      	ldr	r3, [r3, #8]
 8004204:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004208:	619a      	str	r2, [r3, #24]
		//Configuracion adicional
		prtPwmHandler->ptrTIMx->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	689b      	ldr	r3, [r3, #8]
 800420e:	699a      	ldr	r2, [r3, #24]
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	689b      	ldr	r3, [r3, #8]
 8004214:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004218:	619a      	str	r2, [r3, #24]
		prtPwmHandler->ptrTIMx->CCMR1 |= TIM_CCMR1_OC2FE;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	689b      	ldr	r3, [r3, #8]
 800421e:	699a      	ldr	r2, [r3, #24]
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	689b      	ldr	r3, [r3, #8]
 8004224:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004228:	619a      	str	r2, [r3, #24]
		prtPwmHandler->ptrTIMx->CCMR1 &= ~TIM_CCMR1_OC2CE;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	689b      	ldr	r3, [r3, #8]
 800422e:	699a      	ldr	r2, [r3, #24]
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	689b      	ldr	r3, [r3, #8]
 8004234:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004238:	619a      	str	r2, [r3, #24]

		break;
 800423a:	e08b      	b.n	8004354 <pwm_Config+0x2ac>
	}
	//Configuracion del CCMR2_Channel 3
	case PWM_CHANNEL_3:
	{
		//Selecionamos el canal como salida
		prtPwmHandler->ptrTIMx->CCMR2 &= ~TIM_CCMR2_CC3S;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	689b      	ldr	r3, [r3, #8]
 8004240:	69da      	ldr	r2, [r3, #28]
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	689b      	ldr	r3, [r3, #8]
 8004246:	f022 0203 	bic.w	r2, r2, #3
 800424a:	61da      	str	r2, [r3, #28]
		//configuramos el canal como PWM
		prtPwmHandler->ptrTIMx->CCMR2 &= ~(0b111<<TIM_CCMR2_OC3M_Pos);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	689b      	ldr	r3, [r3, #8]
 8004250:	69da      	ldr	r2, [r3, #28]
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	689b      	ldr	r3, [r3, #8]
 8004256:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800425a:	61da      	str	r2, [r3, #28]
		prtPwmHandler->ptrTIMx->CCMR2 |= (0b110<<TIM_CCMR2_OC3M_Pos);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	689b      	ldr	r3, [r3, #8]
 8004260:	69da      	ldr	r2, [r3, #28]
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	689b      	ldr	r3, [r3, #8]
 8004266:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 800426a:	61da      	str	r2, [r3, #28]
		//Activamos la funcionalidad de pre-load
		prtPwmHandler->ptrTIMx->CCMR2 &= ~TIM_CCMR2_OC3PE;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	689b      	ldr	r3, [r3, #8]
 8004270:	69da      	ldr	r2, [r3, #28]
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	689b      	ldr	r3, [r3, #8]
 8004276:	f022 0208 	bic.w	r2, r2, #8
 800427a:	61da      	str	r2, [r3, #28]
		prtPwmHandler->ptrTIMx->CCMR2 |= TIM_CCMR2_OC3PE;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	689b      	ldr	r3, [r3, #8]
 8004280:	69da      	ldr	r2, [r3, #28]
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	689b      	ldr	r3, [r3, #8]
 8004286:	f042 0208 	orr.w	r2, r2, #8
 800428a:	61da      	str	r2, [r3, #28]
		//Configuracion adicional
		prtPwmHandler->ptrTIMx->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	689b      	ldr	r3, [r3, #8]
 8004290:	69da      	ldr	r2, [r3, #28]
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	689b      	ldr	r3, [r3, #8]
 8004296:	f022 0204 	bic.w	r2, r2, #4
 800429a:	61da      	str	r2, [r3, #28]
		prtPwmHandler->ptrTIMx->CCMR2 |= TIM_CCMR2_OC3FE;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	689b      	ldr	r3, [r3, #8]
 80042a0:	69da      	ldr	r2, [r3, #28]
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	689b      	ldr	r3, [r3, #8]
 80042a6:	f042 0204 	orr.w	r2, r2, #4
 80042aa:	61da      	str	r2, [r3, #28]
		prtPwmHandler->ptrTIMx->CCMR2 &= ~TIM_CCMR2_OC3CE;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	689b      	ldr	r3, [r3, #8]
 80042b0:	69da      	ldr	r2, [r3, #28]
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	689b      	ldr	r3, [r3, #8]
 80042b6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80042ba:	61da      	str	r2, [r3, #28]

		break;
 80042bc:	e04a      	b.n	8004354 <pwm_Config+0x2ac>
 80042be:	bf00      	nop
 80042c0:	40023800 	.word	0x40023800
 80042c4:	40000400 	.word	0x40000400
 80042c8:	40000800 	.word	0x40000800
 80042cc:	40000c00 	.word	0x40000c00
	}
	//Configuracion del CCMR2_Channel 4
	case PWM_CHANNEL_4:
	{
		//Selecionamos el canal como salida
		prtPwmHandler->ptrTIMx->CCMR2 &= ~TIM_CCMR2_CC4S;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	689b      	ldr	r3, [r3, #8]
 80042d4:	69da      	ldr	r2, [r3, #28]
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	689b      	ldr	r3, [r3, #8]
 80042da:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80042de:	61da      	str	r2, [r3, #28]
		//configuramos el canal como PWM
		prtPwmHandler->ptrTIMx->CCMR2 &= ~(0b111<<TIM_CCMR2_OC4M_Pos);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	689b      	ldr	r3, [r3, #8]
 80042e4:	69da      	ldr	r2, [r3, #28]
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	689b      	ldr	r3, [r3, #8]
 80042ea:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 80042ee:	61da      	str	r2, [r3, #28]
		prtPwmHandler->ptrTIMx->CCMR2 |= (0b110<<TIM_CCMR2_OC4M_Pos);
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	689b      	ldr	r3, [r3, #8]
 80042f4:	69da      	ldr	r2, [r3, #28]
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	689b      	ldr	r3, [r3, #8]
 80042fa:	f442 42c0 	orr.w	r2, r2, #24576	; 0x6000
 80042fe:	61da      	str	r2, [r3, #28]
		//Activamos la funcionalidad de pre-load
		prtPwmHandler->ptrTIMx->CCMR2 &= ~TIM_CCMR2_OC4PE;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	689b      	ldr	r3, [r3, #8]
 8004304:	69da      	ldr	r2, [r3, #28]
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	689b      	ldr	r3, [r3, #8]
 800430a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800430e:	61da      	str	r2, [r3, #28]
		prtPwmHandler->ptrTIMx->CCMR2 |= TIM_CCMR2_OC4PE;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	689b      	ldr	r3, [r3, #8]
 8004314:	69da      	ldr	r2, [r3, #28]
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	689b      	ldr	r3, [r3, #8]
 800431a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800431e:	61da      	str	r2, [r3, #28]
		//Configuracion adicional
		prtPwmHandler->ptrTIMx->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	689b      	ldr	r3, [r3, #8]
 8004324:	69da      	ldr	r2, [r3, #28]
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	689b      	ldr	r3, [r3, #8]
 800432a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800432e:	61da      	str	r2, [r3, #28]
		prtPwmHandler->ptrTIMx->CCMR2 |= TIM_CCMR2_OC4FE;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	689b      	ldr	r3, [r3, #8]
 8004334:	69da      	ldr	r2, [r3, #28]
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	689b      	ldr	r3, [r3, #8]
 800433a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800433e:	61da      	str	r2, [r3, #28]
		prtPwmHandler->ptrTIMx->CCMR2 &= ~TIM_CCMR2_OC4CE;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	689b      	ldr	r3, [r3, #8]
 8004344:	69da      	ldr	r2, [r3, #28]
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	689b      	ldr	r3, [r3, #8]
 800434a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800434e:	61da      	str	r2, [r3, #28]

		break;
 8004350:	e000      	b.n	8004354 <pwm_Config+0x2ac>
	}
	default:
	{
		break;
 8004352:	bf00      	nop
	}

	//---------------------------4) Definicion de la polaridad------------------------------------------
	//Registro: CCER

	statusPolarityPWM(prtPwmHandler, prtPwmHandler->config.polarity);
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	791b      	ldrb	r3, [r3, #4]
 8004358:	4619      	mov	r1, r3
 800435a:	6878      	ldr	r0, [r7, #4]
 800435c:	f000 f896 	bl	800448c <statusPolarityPWM>

}
 8004360:	bf00      	nop
 8004362:	3708      	adds	r7, #8
 8004364:	46bd      	mov	sp, r7
 8004366:	bd80      	pop	{r7, pc}

08004368 <statusInOutPWM>:

//Activamos o desactivamos la señal PWM
void statusInOutPWM(PWM_Handler_t *prtPwmHandler, uint8_t status)
{
 8004368:	b480      	push	{r7}
 800436a:	b083      	sub	sp, #12
 800436c:	af00      	add	r7, sp, #0
 800436e:	6078      	str	r0, [r7, #4]
 8004370:	460b      	mov	r3, r1
 8004372:	70fb      	strb	r3, [r7, #3]
	switch(prtPwmHandler->config.channel)
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	781b      	ldrb	r3, [r3, #0]
 8004378:	2b03      	cmp	r3, #3
 800437a:	d87f      	bhi.n	800447c <statusInOutPWM+0x114>
 800437c:	a201      	add	r2, pc, #4	; (adr r2, 8004384 <statusInOutPWM+0x1c>)
 800437e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004382:	bf00      	nop
 8004384:	08004395 	.word	0x08004395
 8004388:	080043cf 	.word	0x080043cf
 800438c:	08004409 	.word	0x08004409
 8004390:	08004443 	.word	0x08004443
	{
	//Activamos el Canal 1
	case PWM_CHANNEL_1:
	{
		if (status==CHANNEL_ENABLE)
 8004394:	78fb      	ldrb	r3, [r7, #3]
 8004396:	2b01      	cmp	r3, #1
 8004398:	d110      	bne.n	80043bc <statusInOutPWM+0x54>
		{
			//Activamos el canal 1
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC1E;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	689b      	ldr	r3, [r3, #8]
 800439e:	6a1a      	ldr	r2, [r3, #32]
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	689b      	ldr	r3, [r3, #8]
 80043a4:	f022 0201 	bic.w	r2, r2, #1
 80043a8:	621a      	str	r2, [r3, #32]
			prtPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC1E;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	689b      	ldr	r3, [r3, #8]
 80043ae:	6a1a      	ldr	r2, [r3, #32]
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	689b      	ldr	r3, [r3, #8]
 80043b4:	f042 0201 	orr.w	r2, r2, #1
 80043b8:	621a      	str	r2, [r3, #32]
		else
		{
			//Desactivamos el canal 1
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC1E;
		}
		break;
 80043ba:	e060      	b.n	800447e <statusInOutPWM+0x116>
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC1E;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	689b      	ldr	r3, [r3, #8]
 80043c0:	6a1a      	ldr	r2, [r3, #32]
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	689b      	ldr	r3, [r3, #8]
 80043c6:	f022 0201 	bic.w	r2, r2, #1
 80043ca:	621a      	str	r2, [r3, #32]
		break;
 80043cc:	e057      	b.n	800447e <statusInOutPWM+0x116>
	}
	//Activamos el Canal 2
	case PWM_CHANNEL_2:
	{
		if (status==CHANNEL_ENABLE)
 80043ce:	78fb      	ldrb	r3, [r7, #3]
 80043d0:	2b01      	cmp	r3, #1
 80043d2:	d110      	bne.n	80043f6 <statusInOutPWM+0x8e>
		{
			//Activamos el canal 2
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC2E;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	689b      	ldr	r3, [r3, #8]
 80043d8:	6a1a      	ldr	r2, [r3, #32]
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	689b      	ldr	r3, [r3, #8]
 80043de:	f022 0210 	bic.w	r2, r2, #16
 80043e2:	621a      	str	r2, [r3, #32]
			prtPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC2E;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	689b      	ldr	r3, [r3, #8]
 80043e8:	6a1a      	ldr	r2, [r3, #32]
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	689b      	ldr	r3, [r3, #8]
 80043ee:	f042 0210 	orr.w	r2, r2, #16
 80043f2:	621a      	str	r2, [r3, #32]
		else
		{
			//Desactivamos el canal 2
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC2E;
		}
		break;
 80043f4:	e043      	b.n	800447e <statusInOutPWM+0x116>
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC2E;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	689b      	ldr	r3, [r3, #8]
 80043fa:	6a1a      	ldr	r2, [r3, #32]
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	689b      	ldr	r3, [r3, #8]
 8004400:	f022 0210 	bic.w	r2, r2, #16
 8004404:	621a      	str	r2, [r3, #32]
		break;
 8004406:	e03a      	b.n	800447e <statusInOutPWM+0x116>
	}
	//Activamos el Canal 3
	case PWM_CHANNEL_3:
	{
		if (status==CHANNEL_ENABLE)
 8004408:	78fb      	ldrb	r3, [r7, #3]
 800440a:	2b01      	cmp	r3, #1
 800440c:	d110      	bne.n	8004430 <statusInOutPWM+0xc8>
		{
			//Activamos el canal 3
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC3E;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	689b      	ldr	r3, [r3, #8]
 8004412:	6a1a      	ldr	r2, [r3, #32]
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	689b      	ldr	r3, [r3, #8]
 8004418:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800441c:	621a      	str	r2, [r3, #32]
			prtPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC3E;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	689b      	ldr	r3, [r3, #8]
 8004422:	6a1a      	ldr	r2, [r3, #32]
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	689b      	ldr	r3, [r3, #8]
 8004428:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800442c:	621a      	str	r2, [r3, #32]
		else
		{
			//Desactivamos el canal 3
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC3E;
		}
		break;
 800442e:	e026      	b.n	800447e <statusInOutPWM+0x116>
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC3E;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	689b      	ldr	r3, [r3, #8]
 8004434:	6a1a      	ldr	r2, [r3, #32]
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	689b      	ldr	r3, [r3, #8]
 800443a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800443e:	621a      	str	r2, [r3, #32]
		break;
 8004440:	e01d      	b.n	800447e <statusInOutPWM+0x116>
	}
	//Activamos el Canal 4
	case PWM_CHANNEL_4:
	{
		if (status==CHANNEL_ENABLE)
 8004442:	78fb      	ldrb	r3, [r7, #3]
 8004444:	2b01      	cmp	r3, #1
 8004446:	d110      	bne.n	800446a <statusInOutPWM+0x102>
		{
			//Activamos el canal 4
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC4E;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	689b      	ldr	r3, [r3, #8]
 800444c:	6a1a      	ldr	r2, [r3, #32]
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	689b      	ldr	r3, [r3, #8]
 8004452:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004456:	621a      	str	r2, [r3, #32]
			prtPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC4E;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	689b      	ldr	r3, [r3, #8]
 800445c:	6a1a      	ldr	r2, [r3, #32]
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	689b      	ldr	r3, [r3, #8]
 8004462:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004466:	621a      	str	r2, [r3, #32]
		else
		{
			//Desactivamos el canal 4
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC4E;
		}
		break;
 8004468:	e009      	b.n	800447e <statusInOutPWM+0x116>
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC4E;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	689b      	ldr	r3, [r3, #8]
 800446e:	6a1a      	ldr	r2, [r3, #32]
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	689b      	ldr	r3, [r3, #8]
 8004474:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004478:	621a      	str	r2, [r3, #32]
		break;
 800447a:	e000      	b.n	800447e <statusInOutPWM+0x116>
	}
	default:
	{
		break;
 800447c:	bf00      	nop
	}
	}
}
 800447e:	bf00      	nop
 8004480:	370c      	adds	r7, #12
 8004482:	46bd      	mov	sp, r7
 8004484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004488:	4770      	bx	lr
 800448a:	bf00      	nop

0800448c <statusPolarityPWM>:


void statusPolarityPWM(PWM_Handler_t *prtPwmHandler, uint8_t status)
{
 800448c:	b480      	push	{r7}
 800448e:	b083      	sub	sp, #12
 8004490:	af00      	add	r7, sp, #0
 8004492:	6078      	str	r0, [r7, #4]
 8004494:	460b      	mov	r3, r1
 8004496:	70fb      	strb	r3, [r7, #3]
	switch(prtPwmHandler->config.channel)
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	781b      	ldrb	r3, [r3, #0]
 800449c:	2b03      	cmp	r3, #3
 800449e:	d87f      	bhi.n	80045a0 <statusPolarityPWM+0x114>
 80044a0:	a201      	add	r2, pc, #4	; (adr r2, 80044a8 <statusPolarityPWM+0x1c>)
 80044a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044a6:	bf00      	nop
 80044a8:	080044b9 	.word	0x080044b9
 80044ac:	080044f3 	.word	0x080044f3
 80044b0:	0800452d 	.word	0x0800452d
 80044b4:	08004567 	.word	0x08004567
	{
	//Definimos la polaridad del Canal 1
	case PWM_CHANNEL_1:
	{
		if (status==POLARITY_LOW)
 80044b8:	78fb      	ldrb	r3, [r7, #3]
 80044ba:	2b01      	cmp	r3, #1
 80044bc:	d110      	bne.n	80044e0 <statusPolarityPWM+0x54>
		{
			//Polaridad low del canal 1
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC1P;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	689b      	ldr	r3, [r3, #8]
 80044c2:	6a1a      	ldr	r2, [r3, #32]
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	689b      	ldr	r3, [r3, #8]
 80044c8:	f022 0202 	bic.w	r2, r2, #2
 80044cc:	621a      	str	r2, [r3, #32]
			prtPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC1P;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	689b      	ldr	r3, [r3, #8]
 80044d2:	6a1a      	ldr	r2, [r3, #32]
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	689b      	ldr	r3, [r3, #8]
 80044d8:	f042 0202 	orr.w	r2, r2, #2
 80044dc:	621a      	str	r2, [r3, #32]
		else
		{
			//Polaridad high del canal 1
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC1P;
		}
		break;
 80044de:	e060      	b.n	80045a2 <statusPolarityPWM+0x116>
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC1P;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	689b      	ldr	r3, [r3, #8]
 80044e4:	6a1a      	ldr	r2, [r3, #32]
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	689b      	ldr	r3, [r3, #8]
 80044ea:	f022 0202 	bic.w	r2, r2, #2
 80044ee:	621a      	str	r2, [r3, #32]
		break;
 80044f0:	e057      	b.n	80045a2 <statusPolarityPWM+0x116>
	}
	//Definimos la polaridad del Canal 2
	case PWM_CHANNEL_2:
	{
		if (status==POLARITY_LOW)
 80044f2:	78fb      	ldrb	r3, [r7, #3]
 80044f4:	2b01      	cmp	r3, #1
 80044f6:	d110      	bne.n	800451a <statusPolarityPWM+0x8e>
		{
			//Polaridad low del canal 2
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC2P;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	689b      	ldr	r3, [r3, #8]
 80044fc:	6a1a      	ldr	r2, [r3, #32]
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	689b      	ldr	r3, [r3, #8]
 8004502:	f022 0220 	bic.w	r2, r2, #32
 8004506:	621a      	str	r2, [r3, #32]
			prtPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC2P;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	689b      	ldr	r3, [r3, #8]
 800450c:	6a1a      	ldr	r2, [r3, #32]
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	689b      	ldr	r3, [r3, #8]
 8004512:	f042 0220 	orr.w	r2, r2, #32
 8004516:	621a      	str	r2, [r3, #32]
		else
		{
			//Polaridad high del canal 2
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC2P;
		}
		break;
 8004518:	e043      	b.n	80045a2 <statusPolarityPWM+0x116>
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC2P;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	689b      	ldr	r3, [r3, #8]
 800451e:	6a1a      	ldr	r2, [r3, #32]
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	689b      	ldr	r3, [r3, #8]
 8004524:	f022 0220 	bic.w	r2, r2, #32
 8004528:	621a      	str	r2, [r3, #32]
		break;
 800452a:	e03a      	b.n	80045a2 <statusPolarityPWM+0x116>
	}
	//Definimos la polaridad del Canal 3
	case PWM_CHANNEL_3:
	{
		if (status==POLARITY_LOW)
 800452c:	78fb      	ldrb	r3, [r7, #3]
 800452e:	2b01      	cmp	r3, #1
 8004530:	d110      	bne.n	8004554 <statusPolarityPWM+0xc8>
		{
			//Polaridad low del canal 3
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC3P;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	689b      	ldr	r3, [r3, #8]
 8004536:	6a1a      	ldr	r2, [r3, #32]
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	689b      	ldr	r3, [r3, #8]
 800453c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004540:	621a      	str	r2, [r3, #32]
			prtPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC3P;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	689b      	ldr	r3, [r3, #8]
 8004546:	6a1a      	ldr	r2, [r3, #32]
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	689b      	ldr	r3, [r3, #8]
 800454c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004550:	621a      	str	r2, [r3, #32]
		else
		{
			//Polaridad high del canal 3
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC3P;
		}
		break;
 8004552:	e026      	b.n	80045a2 <statusPolarityPWM+0x116>
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC3P;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	689b      	ldr	r3, [r3, #8]
 8004558:	6a1a      	ldr	r2, [r3, #32]
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	689b      	ldr	r3, [r3, #8]
 800455e:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004562:	621a      	str	r2, [r3, #32]
		break;
 8004564:	e01d      	b.n	80045a2 <statusPolarityPWM+0x116>
	}
	//Definimos la polaridad del Canal 4
	case PWM_CHANNEL_4:
	{
		if (status==POLARITY_LOW)
 8004566:	78fb      	ldrb	r3, [r7, #3]
 8004568:	2b01      	cmp	r3, #1
 800456a:	d110      	bne.n	800458e <statusPolarityPWM+0x102>
		{
			//Polaridad low del canal 4
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC4P;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	689b      	ldr	r3, [r3, #8]
 8004570:	6a1a      	ldr	r2, [r3, #32]
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	689b      	ldr	r3, [r3, #8]
 8004576:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800457a:	621a      	str	r2, [r3, #32]
			prtPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC4P;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	689b      	ldr	r3, [r3, #8]
 8004580:	6a1a      	ldr	r2, [r3, #32]
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	689b      	ldr	r3, [r3, #8]
 8004586:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800458a:	621a      	str	r2, [r3, #32]
		else
		{
			//Polaridad high del canal 4
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC4P;
		}
		break;
 800458c:	e009      	b.n	80045a2 <statusPolarityPWM+0x116>
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC4P;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	689b      	ldr	r3, [r3, #8]
 8004592:	6a1a      	ldr	r2, [r3, #32]
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	689b      	ldr	r3, [r3, #8]
 8004598:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800459c:	621a      	str	r2, [r3, #32]
		break;
 800459e:	e000      	b.n	80045a2 <statusPolarityPWM+0x116>
	}
	default:
	{
		break;
 80045a0:	bf00      	nop
	}
	}

}
 80045a2:	bf00      	nop
 80045a4:	370c      	adds	r7, #12
 80045a6:	46bd      	mov	sp, r7
 80045a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ac:	4770      	bx	lr
 80045ae:	bf00      	nop

080045b0 <setDuttyCycle>:

//Configuracion del DuttyCicle
void setDuttyCycle(PWM_Handler_t *prtPwmHandler)
{
 80045b0:	b480      	push	{r7}
 80045b2:	b083      	sub	sp, #12
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	6078      	str	r0, [r7, #4]
	//Selecionamos el canal para configurar el dutty
	switch(prtPwmHandler->config.channel)
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	781b      	ldrb	r3, [r3, #0]
 80045bc:	2b03      	cmp	r3, #3
 80045be:	d823      	bhi.n	8004608 <setDuttyCycle+0x58>
 80045c0:	a201      	add	r2, pc, #4	; (adr r2, 80045c8 <setDuttyCycle+0x18>)
 80045c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045c6:	bf00      	nop
 80045c8:	080045d9 	.word	0x080045d9
 80045cc:	080045e5 	.word	0x080045e5
 80045d0:	080045f1 	.word	0x080045f1
 80045d4:	080045fd 	.word	0x080045fd
	{

	case PWM_CHANNEL_1:
	{
		prtPwmHandler->ptrTIMx->CCR1 = prtPwmHandler->config.duttyCicle;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	885a      	ldrh	r2, [r3, #2]
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	689b      	ldr	r3, [r3, #8]
 80045e0:	635a      	str	r2, [r3, #52]	; 0x34
		break;
 80045e2:	e012      	b.n	800460a <setDuttyCycle+0x5a>
	}
	case PWM_CHANNEL_2:
	{
		prtPwmHandler->ptrTIMx->CCR2 = prtPwmHandler->config.duttyCicle;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	885a      	ldrh	r2, [r3, #2]
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	689b      	ldr	r3, [r3, #8]
 80045ec:	639a      	str	r2, [r3, #56]	; 0x38
		break;
 80045ee:	e00c      	b.n	800460a <setDuttyCycle+0x5a>
	}
	case PWM_CHANNEL_3:
	{
		prtPwmHandler->ptrTIMx->CCR3 = prtPwmHandler->config.duttyCicle;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	885a      	ldrh	r2, [r3, #2]
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	689b      	ldr	r3, [r3, #8]
 80045f8:	63da      	str	r2, [r3, #60]	; 0x3c
		break;
 80045fa:	e006      	b.n	800460a <setDuttyCycle+0x5a>
	}
	case PWM_CHANNEL_4:
	{
		prtPwmHandler->ptrTIMx->CCR4 = prtPwmHandler->config.duttyCicle;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	885a      	ldrh	r2, [r3, #2]
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	689b      	ldr	r3, [r3, #8]
 8004604:	641a      	str	r2, [r3, #64]	; 0x40
		break;
 8004606:	e000      	b.n	800460a <setDuttyCycle+0x5a>
	}
	default:
	{
		break;
 8004608:	bf00      	nop
	}
	}

}
 800460a:	bf00      	nop
 800460c:	370c      	adds	r7, #12
 800460e:	46bd      	mov	sp, r7
 8004610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004614:	4770      	bx	lr
 8004616:	bf00      	nop

08004618 <updateDuttyCyclePercentageFloat>:
	setDuttyCycle(prtPwmHandler);
}

//Actualizacion del Dutty con porcentaje decimal
void updateDuttyCyclePercentageFloat(PWM_Handler_t *prtPwmHandler, float newDuttyPercentage)
{
 8004618:	b580      	push	{r7, lr}
 800461a:	b082      	sub	sp, #8
 800461c:	af00      	add	r7, sp, #0
 800461e:	6078      	str	r0, [r7, #4]
 8004620:	ed87 0a00 	vstr	s0, [r7]
	//Establecemos el nuevo valor del duttycicle en la configuracion del PWM
	prtPwmHandler->config.duttyCicle = (uint16_t) ((prtPwmHandler->ptrTIMx->ARR)/100)*(newDuttyPercentage);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	689b      	ldr	r3, [r3, #8]
 8004628:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800462a:	4a0d      	ldr	r2, [pc, #52]	; (8004660 <updateDuttyCyclePercentageFloat+0x48>)
 800462c:	fba2 2303 	umull	r2, r3, r2, r3
 8004630:	095b      	lsrs	r3, r3, #5
 8004632:	b29b      	uxth	r3, r3
 8004634:	ee07 3a90 	vmov	s15, r3
 8004638:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800463c:	edd7 7a00 	vldr	s15, [r7]
 8004640:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004644:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004648:	ee17 3a90 	vmov	r3, s15
 800464c:	b29a      	uxth	r2, r3
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	805a      	strh	r2, [r3, #2]
	//Cargamos la nueva configuracion
	setDuttyCycle(prtPwmHandler);
 8004652:	6878      	ldr	r0, [r7, #4]
 8004654:	f7ff ffac 	bl	80045b0 <setDuttyCycle>
}
 8004658:	bf00      	nop
 800465a:	3708      	adds	r7, #8
 800465c:	46bd      	mov	sp, r7
 800465e:	bd80      	pop	{r7, pc}
 8004660:	51eb851f 	.word	0x51eb851f

08004664 <__NVIC_EnableIRQ>:
{
 8004664:	b480      	push	{r7}
 8004666:	b083      	sub	sp, #12
 8004668:	af00      	add	r7, sp, #0
 800466a:	4603      	mov	r3, r0
 800466c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800466e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004672:	2b00      	cmp	r3, #0
 8004674:	db0b      	blt.n	800468e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004676:	79fb      	ldrb	r3, [r7, #7]
 8004678:	f003 021f 	and.w	r2, r3, #31
 800467c:	4907      	ldr	r1, [pc, #28]	; (800469c <__NVIC_EnableIRQ+0x38>)
 800467e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004682:	095b      	lsrs	r3, r3, #5
 8004684:	2001      	movs	r0, #1
 8004686:	fa00 f202 	lsl.w	r2, r0, r2
 800468a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800468e:	bf00      	nop
 8004690:	370c      	adds	r7, #12
 8004692:	46bd      	mov	sp, r7
 8004694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004698:	4770      	bx	lr
 800469a:	bf00      	nop
 800469c:	e000e100 	.word	0xe000e100

080046a0 <USART_Config>:
uint8_t posChar = 0;                                 //Variable para recorrer el String
uint8_t typeWriteTXE = 0;                            //Variable que selecciona el tipo entre string y caracter

//Funcion para cargar la configuracion del periferico USART
void USART_Config(USART_Handler_t *ptrUsartHandler)
{
 80046a0:	b580      	push	{r7, lr}
 80046a2:	b084      	sub	sp, #16
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	6078      	str	r0, [r7, #4]
	//---------------------------------1) Activamos el periferico------------------------------------------
	//Registro: APB1ENR
	//Registro: APB2ENR

	if(ptrUsartHandler->ptrUSARTx == USART1)
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	689b      	ldr	r3, [r3, #8]
 80046ac:	4a8f      	ldr	r2, [pc, #572]	; (80048ec <USART_Config+0x24c>)
 80046ae:	4293      	cmp	r3, r2
 80046b0:	d107      	bne.n	80046c2 <USART_Config+0x22>
	{
		/*Activamos el periferico escribiendo un 1 deacuerdo a la posicion
		 * del periferico en el registro*/
		RCC->APB2ENR = RCC_APB2ENR_USART1EN;
 80046b2:	4b8f      	ldr	r3, [pc, #572]	; (80048f0 <USART_Config+0x250>)
 80046b4:	2210      	movs	r2, #16
 80046b6:	645a      	str	r2, [r3, #68]	; 0x44
		//Guardamos una referencia al periferico que estamos utilizando
		ptrUSART1Used = ptrUsartHandler->ptrUSARTx;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	689b      	ldr	r3, [r3, #8]
 80046bc:	4a8d      	ldr	r2, [pc, #564]	; (80048f4 <USART_Config+0x254>)
 80046be:	6013      	str	r3, [r2, #0]
 80046c0:	e019      	b.n	80046f6 <USART_Config+0x56>
	}

	else if(ptrUsartHandler->ptrUSARTx == USART2)
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	689b      	ldr	r3, [r3, #8]
 80046c6:	4a8c      	ldr	r2, [pc, #560]	; (80048f8 <USART_Config+0x258>)
 80046c8:	4293      	cmp	r3, r2
 80046ca:	d108      	bne.n	80046de <USART_Config+0x3e>
	{
		/*Activamos el periferico escribiendo un 1 deacuerdo a la posicion
		 * del periferico en el registro*/
		RCC->APB1ENR = RCC_APB1ENR_USART2EN;
 80046cc:	4b88      	ldr	r3, [pc, #544]	; (80048f0 <USART_Config+0x250>)
 80046ce:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80046d2:	641a      	str	r2, [r3, #64]	; 0x40
		//Guardamos una referencia al periferico que estamos utilizando
		ptrUSART2Used = ptrUsartHandler->ptrUSARTx;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	689b      	ldr	r3, [r3, #8]
 80046d8:	4a88      	ldr	r2, [pc, #544]	; (80048fc <USART_Config+0x25c>)
 80046da:	6013      	str	r3, [r2, #0]
 80046dc:	e00b      	b.n	80046f6 <USART_Config+0x56>
	}

	else if(ptrUsartHandler->ptrUSARTx == USART6)
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	689b      	ldr	r3, [r3, #8]
 80046e2:	4a87      	ldr	r2, [pc, #540]	; (8004900 <USART_Config+0x260>)
 80046e4:	4293      	cmp	r3, r2
 80046e6:	d106      	bne.n	80046f6 <USART_Config+0x56>
	{
		/*Activamos el periferico escribiendo un 1 deacuerdo a la posicion
		 * del periferico en el registro*/
		RCC->APB2ENR = RCC_APB2ENR_USART6EN;
 80046e8:	4b81      	ldr	r3, [pc, #516]	; (80048f0 <USART_Config+0x250>)
 80046ea:	2220      	movs	r2, #32
 80046ec:	645a      	str	r2, [r3, #68]	; 0x44
		//Guardamos una referencia al periferico que estamos utilizando
		ptrUSART6Used = ptrUsartHandler->ptrUSARTx;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	689b      	ldr	r3, [r3, #8]
 80046f2:	4a84      	ldr	r2, [pc, #528]	; (8004904 <USART_Config+0x264>)
 80046f4:	6013      	str	r3, [r2, #0]

	//-------------------------------2) Limpieza de registros ------------------------------------------
	//Registro: CR1
	//Registro: CR2

	ptrUsartHandler->ptrUSARTx->CR1 = 0;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	689b      	ldr	r3, [r3, #8]
 80046fa:	2200      	movs	r2, #0
 80046fc:	60da      	str	r2, [r3, #12]
	ptrUsartHandler->ptrUSARTx->CR2 = 0;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	689b      	ldr	r3, [r3, #8]
 8004702:	2200      	movs	r2, #0
 8004704:	611a      	str	r2, [r3, #16]

	//-------------------------3) Configuracion del parity y tamaño de dato ------------------------------
	//Registro: CR1

	//Verificamos si la paridad esta activada
	if(ptrUsartHandler->USART_Config.USART_parity != USART_PARITY_NONE)
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	789b      	ldrb	r3, [r3, #2]
 800470a:	2b00      	cmp	r3, #0
 800470c:	d03d      	beq.n	800478a <USART_Config+0xea>
	{
		//Activamos Parity control Enable PCE
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_PCE;
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	689b      	ldr	r3, [r3, #8]
 8004712:	68da      	ldr	r2, [r3, #12]
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	689b      	ldr	r3, [r3, #8]
 8004718:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800471c:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_PCE;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	689b      	ldr	r3, [r3, #8]
 8004722:	68da      	ldr	r2, [r3, #12]
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	689b      	ldr	r3, [r3, #8]
 8004728:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800472c:	60da      	str	r2, [r3, #12]

		//Definimos un tamaño de datos de 9 bits M = 1
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_M;
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	689b      	ldr	r3, [r3, #8]
 8004732:	68da      	ldr	r2, [r3, #12]
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	689b      	ldr	r3, [r3, #8]
 8004738:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800473c:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_M;
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	689b      	ldr	r3, [r3, #8]
 8004742:	68da      	ldr	r2, [r3, #12]
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	689b      	ldr	r3, [r3, #8]
 8004748:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800474c:	60da      	str	r2, [r3, #12]

		//Verificamos si se selecciona ODD o EVEN
		if(ptrUsartHandler->USART_Config.USART_parity == USART_PARITY_ODD)
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	789b      	ldrb	r3, [r3, #2]
 8004752:	2b01      	cmp	r3, #1
 8004754:	d110      	bne.n	8004778 <USART_Config+0xd8>
		{
			ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_PS;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	689b      	ldr	r3, [r3, #8]
 800475a:	68da      	ldr	r2, [r3, #12]
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	689b      	ldr	r3, [r3, #8]
 8004760:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004764:	60da      	str	r2, [r3, #12]
			ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_PS;
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	689b      	ldr	r3, [r3, #8]
 800476a:	68da      	ldr	r2, [r3, #12]
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	689b      	ldr	r3, [r3, #8]
 8004770:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004774:	60da      	str	r2, [r3, #12]
 8004776:	e018      	b.n	80047aa <USART_Config+0x10a>
		}
		else
		{
			ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_PS;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	689b      	ldr	r3, [r3, #8]
 800477c:	68da      	ldr	r2, [r3, #12]
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	689b      	ldr	r3, [r3, #8]
 8004782:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004786:	60da      	str	r2, [r3, #12]
 8004788:	e00f      	b.n	80047aa <USART_Config+0x10a>

	}
	else
	{
		//Desactivamos la Parity control Enable PCE
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_PCE;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	689b      	ldr	r3, [r3, #8]
 800478e:	68da      	ldr	r2, [r3, #12]
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	689b      	ldr	r3, [r3, #8]
 8004794:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004798:	60da      	str	r2, [r3, #12]
		//Definimos un tamaño de datos de 8 bits M = 0
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_M;
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	689b      	ldr	r3, [r3, #8]
 800479e:	68da      	ldr	r2, [r3, #12]
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	689b      	ldr	r3, [r3, #8]
 80047a4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80047a8:	60da      	str	r2, [r3, #12]

	//--------------------------------4) Configuracion del Stop bits--------------------------------------
	//Registro: CR2

	//Se verifica que stop bits se selecciono
	switch(ptrUsartHandler->USART_Config.USART_stopbits)
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	78db      	ldrb	r3, [r3, #3]
 80047ae:	2b03      	cmp	r3, #3
 80047b0:	d84c      	bhi.n	800484c <USART_Config+0x1ac>
 80047b2:	a201      	add	r2, pc, #4	; (adr r2, 80047b8 <USART_Config+0x118>)
 80047b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047b8:	080047c9 	.word	0x080047c9
 80047bc:	080047e7 	.word	0x080047e7
 80047c0:	08004809 	.word	0x08004809
 80047c4:	0800482b 	.word	0x0800482b
	{
	//Para el 1 Stop bit se escribe 00
	case USART_STOPBIT_1:
	{
		ptrUsartHandler->ptrUSARTx->CR2 &= ~(0b11<<USART_CR2_STOP_Pos);
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	689b      	ldr	r3, [r3, #8]
 80047cc:	691a      	ldr	r2, [r3, #16]
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	689b      	ldr	r3, [r3, #8]
 80047d2:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 80047d6:	611a      	str	r2, [r3, #16]
		ptrUsartHandler->ptrUSARTx->CR2 |= (0b00<<USART_CR2_STOP_Pos);
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	689a      	ldr	r2, [r3, #8]
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	689b      	ldr	r3, [r3, #8]
 80047e0:	6912      	ldr	r2, [r2, #16]
 80047e2:	611a      	str	r2, [r3, #16]
		break;
 80047e4:	e041      	b.n	800486a <USART_Config+0x1ca>
	}
	//Para el 0.5 Stop bit se escribe 01
	case USART_STOPBIT_0_5:
	{
		ptrUsartHandler->ptrUSARTx->CR2 &= ~(0b11<<USART_CR2_STOP_Pos);
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	689b      	ldr	r3, [r3, #8]
 80047ea:	691a      	ldr	r2, [r3, #16]
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	689b      	ldr	r3, [r3, #8]
 80047f0:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 80047f4:	611a      	str	r2, [r3, #16]
		ptrUsartHandler->ptrUSARTx->CR2 |= (0b01<<USART_CR2_STOP_Pos);
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	689b      	ldr	r3, [r3, #8]
 80047fa:	691a      	ldr	r2, [r3, #16]
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	689b      	ldr	r3, [r3, #8]
 8004800:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004804:	611a      	str	r2, [r3, #16]
		break;
 8004806:	e030      	b.n	800486a <USART_Config+0x1ca>
	}
	//Para el 2 Stop bit se escribe 10
	case USART_STOPBIT_2:
	{
		ptrUsartHandler->ptrUSARTx->CR2 &= ~(0b11<<USART_CR2_STOP_Pos);
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	689b      	ldr	r3, [r3, #8]
 800480c:	691a      	ldr	r2, [r3, #16]
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	689b      	ldr	r3, [r3, #8]
 8004812:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8004816:	611a      	str	r2, [r3, #16]
		ptrUsartHandler->ptrUSARTx->CR2 |= (0b10<<USART_CR2_STOP_Pos);
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	689b      	ldr	r3, [r3, #8]
 800481c:	691a      	ldr	r2, [r3, #16]
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	689b      	ldr	r3, [r3, #8]
 8004822:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004826:	611a      	str	r2, [r3, #16]
		break;
 8004828:	e01f      	b.n	800486a <USART_Config+0x1ca>
	}
	//Para el 1.5 Stop bit se escribe 11
	case USART_STOPBIT_1_5:
	{
		ptrUsartHandler->ptrUSARTx->CR2 &= ~(0b11<<USART_CR2_STOP_Pos);
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	689b      	ldr	r3, [r3, #8]
 800482e:	691a      	ldr	r2, [r3, #16]
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	689b      	ldr	r3, [r3, #8]
 8004834:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8004838:	611a      	str	r2, [r3, #16]
		ptrUsartHandler->ptrUSARTx->CR2 |= (0b11<<USART_CR2_STOP_Pos);
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	689b      	ldr	r3, [r3, #8]
 800483e:	691a      	ldr	r2, [r3, #16]
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	689b      	ldr	r3, [r3, #8]
 8004844:	f442 5240 	orr.w	r2, r2, #12288	; 0x3000
 8004848:	611a      	str	r2, [r3, #16]
		break;
 800484a:	e00e      	b.n	800486a <USART_Config+0x1ca>
	}
	//En caso por defecto selsccionamos un bit de paraba
	default:
	{
		ptrUsartHandler->ptrUSARTx->CR2 &= ~(0b11<<USART_CR2_STOP_Pos);
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	689b      	ldr	r3, [r3, #8]
 8004850:	691a      	ldr	r2, [r3, #16]
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	689b      	ldr	r3, [r3, #8]
 8004856:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 800485a:	611a      	str	r2, [r3, #16]
		ptrUsartHandler->ptrUSARTx->CR2 |= (0b00<<USART_CR2_STOP_Pos);
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	689a      	ldr	r2, [r3, #8]
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	689b      	ldr	r3, [r3, #8]
 8004864:	6912      	ldr	r2, [r2, #16]
 8004866:	611a      	str	r2, [r3, #16]
		break;
 8004868:	bf00      	nop
	}

	//-------------------5) Configuracion del Baudrate(Velocidad de Trans o Rec)-------------------------
	//Registro: BRR       //Numero de 32 bits

	uint8_t clock = 0;
 800486a:	2300      	movs	r3, #0
 800486c:	73fb      	strb	r3, [r7, #15]

	if(ptrUsartHandler->ptrUSARTx == USART2)
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	689b      	ldr	r3, [r3, #8]
 8004872:	4a21      	ldr	r2, [pc, #132]	; (80048f8 <USART_Config+0x258>)
 8004874:	4293      	cmp	r3, r2
 8004876:	d104      	bne.n	8004882 <USART_Config+0x1e2>
	{
		clock = getClockAPB1();          //Guardamos la velocidad de reloj entregada al bus APB1
 8004878:	f7ff fb82 	bl	8003f80 <getClockAPB1>
 800487c:	4603      	mov	r3, r0
 800487e:	73fb      	strb	r3, [r7, #15]
 8004880:	e003      	b.n	800488a <USART_Config+0x1ea>
	}
	else
	{
		clock = getConfigPLL();	         //Guardamos la velocidad de reloj del sistema
 8004882:	f7ff fb61 	bl	8003f48 <getConfigPLL>
 8004886:	4603      	mov	r3, r0
 8004888:	73fb      	strb	r3, [r7, #15]
	}

	//Verificamos el Baud Rate selecionado
	if(ptrUsartHandler->USART_Config.USART_baudrate == USART_BAUDRATE_9600)
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	785b      	ldrb	r3, [r3, #1]
 800488e:	2b00      	cmp	r3, #0
 8004890:	d10b      	bne.n	80048aa <USART_Config+0x20a>
	{
		//Se carga el valor de la velocidad en el registro
		ptrUsartHandler->ptrUSARTx->BRR = getValueBaudRate(clock, 9600);
 8004892:	7bfb      	ldrb	r3, [r7, #15]
 8004894:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 8004898:	4618      	mov	r0, r3
 800489a:	f000 f91f 	bl	8004adc <getValueBaudRate>
 800489e:	4603      	mov	r3, r0
 80048a0:	461a      	mov	r2, r3
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	689b      	ldr	r3, [r3, #8]
 80048a6:	609a      	str	r2, [r3, #8]
 80048a8:	e02f      	b.n	800490a <USART_Config+0x26a>
	}
	else if(ptrUsartHandler->USART_Config.USART_baudrate == USART_BAUDRATE_19200)
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	785b      	ldrb	r3, [r3, #1]
 80048ae:	2b01      	cmp	r3, #1
 80048b0:	d10b      	bne.n	80048ca <USART_Config+0x22a>
	{
		//Se carga el valor de la velocidad en el registro
		ptrUsartHandler->ptrUSARTx->BRR = getValueBaudRate(clock, 19200);
 80048b2:	7bfb      	ldrb	r3, [r7, #15]
 80048b4:	f44f 4196 	mov.w	r1, #19200	; 0x4b00
 80048b8:	4618      	mov	r0, r3
 80048ba:	f000 f90f 	bl	8004adc <getValueBaudRate>
 80048be:	4603      	mov	r3, r0
 80048c0:	461a      	mov	r2, r3
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	689b      	ldr	r3, [r3, #8]
 80048c6:	609a      	str	r2, [r3, #8]
 80048c8:	e01f      	b.n	800490a <USART_Config+0x26a>
	}
	else if(ptrUsartHandler->USART_Config.USART_baudrate == USART_BAUDRATE_115200)
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	785b      	ldrb	r3, [r3, #1]
 80048ce:	2b02      	cmp	r3, #2
 80048d0:	d11a      	bne.n	8004908 <USART_Config+0x268>
		{
		//Se carga el valor de la velocidad en el registro
		ptrUsartHandler->ptrUSARTx->BRR = getValueBaudRate(clock, 115200);
 80048d2:	7bfb      	ldrb	r3, [r7, #15]
 80048d4:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 80048d8:	4618      	mov	r0, r3
 80048da:	f000 f8ff 	bl	8004adc <getValueBaudRate>
 80048de:	4603      	mov	r3, r0
 80048e0:	461a      	mov	r2, r3
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	689b      	ldr	r3, [r3, #8]
 80048e6:	609a      	str	r2, [r3, #8]
 80048e8:	e00f      	b.n	800490a <USART_Config+0x26a>
 80048ea:	bf00      	nop
 80048ec:	40011000 	.word	0x40011000
 80048f0:	40023800 	.word	0x40023800
 80048f4:	20000464 	.word	0x20000464
 80048f8:	40004400 	.word	0x40004400
 80048fc:	20000468 	.word	0x20000468
 8004900:	40011400 	.word	0x40011400
 8004904:	2000046c 	.word	0x2000046c
	}
	else
	{
		__NOP();
 8004908:	bf00      	nop
	//-------------------6) Configuramos el MODO-------------------------
	//Registro: CR1

	//MODOS: TX only, RX only, RXTX, disable

	switch(ptrUsartHandler->USART_Config.USART_mode)
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	781b      	ldrb	r3, [r3, #0]
 800490e:	2b03      	cmp	r3, #3
 8004910:	d866      	bhi.n	80049e0 <USART_Config+0x340>
 8004912:	a201      	add	r2, pc, #4	; (adr r2, 8004918 <USART_Config+0x278>)
 8004914:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004918:	08004929 	.word	0x08004929
 800491c:	0800494b 	.word	0x0800494b
 8004920:	0800496d 	.word	0x0800496d
 8004924:	080049af 	.word	0x080049af
	{
	//Activamos la parte del sistema encargada de enviar
	case USART_MODE_TX :
	{
		//Activamos el Baud rate clock para la transmision
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_TE;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	689b      	ldr	r3, [r3, #8]
 800492c:	68da      	ldr	r2, [r3, #12]
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	689b      	ldr	r3, [r3, #8]
 8004932:	f022 0208 	bic.w	r2, r2, #8
 8004936:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_TE;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	689b      	ldr	r3, [r3, #8]
 800493c:	68da      	ldr	r2, [r3, #12]
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	689b      	ldr	r3, [r3, #8]
 8004942:	f042 0208 	orr.w	r2, r2, #8
 8004946:	60da      	str	r2, [r3, #12]

		break;
 8004948:	e063      	b.n	8004a12 <USART_Config+0x372>
	}
	//Activamos la parte del sistema encargada de recibir
	case USART_MODE_RX:
	{
		//Activamos el Baud rate clock para la recepcion
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_RE;
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	689b      	ldr	r3, [r3, #8]
 800494e:	68da      	ldr	r2, [r3, #12]
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	689b      	ldr	r3, [r3, #8]
 8004954:	f022 0204 	bic.w	r2, r2, #4
 8004958:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_RE;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	689b      	ldr	r3, [r3, #8]
 800495e:	68da      	ldr	r2, [r3, #12]
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	689b      	ldr	r3, [r3, #8]
 8004964:	f042 0204 	orr.w	r2, r2, #4
 8004968:	60da      	str	r2, [r3, #12]

		break;
 800496a:	e052      	b.n	8004a12 <USART_Config+0x372>
	}
	//Activamos ambas  parte del sistema encargadas de enviar y recibir
	case USART_MODE_RXTX:
	{
		//Activamos el Baud rate clock para la transmision
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_TE;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	689b      	ldr	r3, [r3, #8]
 8004970:	68da      	ldr	r2, [r3, #12]
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	689b      	ldr	r3, [r3, #8]
 8004976:	f022 0208 	bic.w	r2, r2, #8
 800497a:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_TE;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	689b      	ldr	r3, [r3, #8]
 8004980:	68da      	ldr	r2, [r3, #12]
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	689b      	ldr	r3, [r3, #8]
 8004986:	f042 0208 	orr.w	r2, r2, #8
 800498a:	60da      	str	r2, [r3, #12]
		//Activamos el Baud rate clock para la recepcion
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_RE;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	689b      	ldr	r3, [r3, #8]
 8004990:	68da      	ldr	r2, [r3, #12]
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	689b      	ldr	r3, [r3, #8]
 8004996:	f022 0204 	bic.w	r2, r2, #4
 800499a:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_RE;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	689b      	ldr	r3, [r3, #8]
 80049a0:	68da      	ldr	r2, [r3, #12]
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	689b      	ldr	r3, [r3, #8]
 80049a6:	f042 0204 	orr.w	r2, r2, #4
 80049aa:	60da      	str	r2, [r3, #12]


		break;
 80049ac:	e031      	b.n	8004a12 <USART_Config+0x372>
	}
	//Desativamos ambos canales
	case USART_MODE_DISABLE:
	{
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_UE;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	689b      	ldr	r3, [r3, #8]
 80049b2:	68da      	ldr	r2, [r3, #12]
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	689b      	ldr	r3, [r3, #8]
 80049b8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80049bc:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_TE;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	689b      	ldr	r3, [r3, #8]
 80049c2:	68da      	ldr	r2, [r3, #12]
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	689b      	ldr	r3, [r3, #8]
 80049c8:	f022 0208 	bic.w	r2, r2, #8
 80049cc:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_RE;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	689b      	ldr	r3, [r3, #8]
 80049d2:	68da      	ldr	r2, [r3, #12]
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	689b      	ldr	r3, [r3, #8]
 80049d8:	f022 0204 	bic.w	r2, r2, #4
 80049dc:	60da      	str	r2, [r3, #12]
		break;
 80049de:	e018      	b.n	8004a12 <USART_Config+0x372>
	}
	default:
	{
		//Actuando por defecto, desactivamos ambos canales
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_UE;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	689b      	ldr	r3, [r3, #8]
 80049e4:	68da      	ldr	r2, [r3, #12]
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	689b      	ldr	r3, [r3, #8]
 80049ea:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80049ee:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_TE;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	689b      	ldr	r3, [r3, #8]
 80049f4:	68da      	ldr	r2, [r3, #12]
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	689b      	ldr	r3, [r3, #8]
 80049fa:	f022 0208 	bic.w	r2, r2, #8
 80049fe:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_RE;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	689b      	ldr	r3, [r3, #8]
 8004a04:	68da      	ldr	r2, [r3, #12]
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	689b      	ldr	r3, [r3, #8]
 8004a0a:	f022 0204 	bic.w	r2, r2, #4
 8004a0e:	60da      	str	r2, [r3, #12]
		break;
 8004a10:	bf00      	nop
  __ASM volatile ("cpsid i" : : : "memory");
 8004a12:	b672      	cpsid	i
}
 8004a14:	bf00      	nop

	//Desactivamos las interupciones globales
	__disable_irq();

	//Se selecciono la interrupcion para RX
	if(ptrUsartHandler->USART_Config.USART_enableIntRX ==  USART_RX_INTERRUP_ENABLE)
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	791b      	ldrb	r3, [r3, #4]
 8004a1a:	2b01      	cmp	r3, #1
 8004a1c:	d110      	bne.n	8004a40 <USART_Config+0x3a0>
	{
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_RXNEIE;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	689b      	ldr	r3, [r3, #8]
 8004a22:	68da      	ldr	r2, [r3, #12]
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	689b      	ldr	r3, [r3, #8]
 8004a28:	f022 0220 	bic.w	r2, r2, #32
 8004a2c:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_RXNEIE;
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	689b      	ldr	r3, [r3, #8]
 8004a32:	68da      	ldr	r2, [r3, #12]
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	689b      	ldr	r3, [r3, #8]
 8004a38:	f042 0220 	orr.w	r2, r2, #32
 8004a3c:	60da      	str	r2, [r3, #12]
 8004a3e:	e007      	b.n	8004a50 <USART_Config+0x3b0>
	}
	else
	{
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_RXNEIE;
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	689b      	ldr	r3, [r3, #8]
 8004a44:	68da      	ldr	r2, [r3, #12]
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	689b      	ldr	r3, [r3, #8]
 8004a4a:	f022 0220 	bic.w	r2, r2, #32
 8004a4e:	60da      	str	r2, [r3, #12]
	}

	//Verificamos si se selecciono alguna interrupcion
	if(ptrUsartHandler->USART_Config.USART_enableIntRX ==  USART_RX_INTERRUP_ENABLE || ptrUsartHandler->USART_Config.USART_enableIntTX ==  USART_TX_INTERRUP_ENABLE)
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	791b      	ldrb	r3, [r3, #4]
 8004a54:	2b01      	cmp	r3, #1
 8004a56:	d003      	beq.n	8004a60 <USART_Config+0x3c0>
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	795b      	ldrb	r3, [r3, #5]
 8004a5c:	2b01      	cmp	r3, #1
 8004a5e:	d11a      	bne.n	8004a96 <USART_Config+0x3f6>
	{
		//Matriculamos la interrupcion en el NVIC
		if(ptrUsartHandler->ptrUSARTx == USART1)
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	689b      	ldr	r3, [r3, #8]
 8004a64:	4a1a      	ldr	r2, [pc, #104]	; (8004ad0 <USART_Config+0x430>)
 8004a66:	4293      	cmp	r3, r2
 8004a68:	d103      	bne.n	8004a72 <USART_Config+0x3d2>
		{
			NVIC_EnableIRQ(USART1_IRQn);
 8004a6a:	2025      	movs	r0, #37	; 0x25
 8004a6c:	f7ff fdfa 	bl	8004664 <__NVIC_EnableIRQ>
		if(ptrUsartHandler->ptrUSARTx == USART1)
 8004a70:	e013      	b.n	8004a9a <USART_Config+0x3fa>
		}
		else if(ptrUsartHandler->ptrUSARTx == USART2)
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	689b      	ldr	r3, [r3, #8]
 8004a76:	4a17      	ldr	r2, [pc, #92]	; (8004ad4 <USART_Config+0x434>)
 8004a78:	4293      	cmp	r3, r2
 8004a7a:	d103      	bne.n	8004a84 <USART_Config+0x3e4>
		{
			NVIC_EnableIRQ(USART2_IRQn);
 8004a7c:	2026      	movs	r0, #38	; 0x26
 8004a7e:	f7ff fdf1 	bl	8004664 <__NVIC_EnableIRQ>
		if(ptrUsartHandler->ptrUSARTx == USART1)
 8004a82:	e00a      	b.n	8004a9a <USART_Config+0x3fa>
		}
		else if(ptrUsartHandler->ptrUSARTx == USART6)
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	689b      	ldr	r3, [r3, #8]
 8004a88:	4a13      	ldr	r2, [pc, #76]	; (8004ad8 <USART_Config+0x438>)
 8004a8a:	4293      	cmp	r3, r2
 8004a8c:	d105      	bne.n	8004a9a <USART_Config+0x3fa>
		{
			NVIC_EnableIRQ(USART6_IRQn);
 8004a8e:	2047      	movs	r0, #71	; 0x47
 8004a90:	f7ff fde8 	bl	8004664 <__NVIC_EnableIRQ>
		if(ptrUsartHandler->ptrUSARTx == USART1)
 8004a94:	e001      	b.n	8004a9a <USART_Config+0x3fa>
		}
	}
	else
	{
		__NOP();
 8004a96:	bf00      	nop
 8004a98:	e000      	b.n	8004a9c <USART_Config+0x3fc>
		if(ptrUsartHandler->ptrUSARTx == USART1)
 8004a9a:	bf00      	nop
  __ASM volatile ("cpsie i" : : : "memory");
 8004a9c:	b662      	cpsie	i
}
 8004a9e:	bf00      	nop
	__enable_irq();

	//-------------------7) Activacion del modulo Serial------------------------
	//Registro: CR1

	if(ptrUsartHandler->USART_Config.USART_mode != USART_MODE_DISABLE)
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	781b      	ldrb	r3, [r3, #0]
 8004aa4:	2b03      	cmp	r3, #3
 8004aa6:	d00f      	beq.n	8004ac8 <USART_Config+0x428>
	{
		//Activamos el modulo Serial
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_UE;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	689b      	ldr	r3, [r3, #8]
 8004aac:	68da      	ldr	r2, [r3, #12]
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	689b      	ldr	r3, [r3, #8]
 8004ab2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004ab6:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_UE;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	689b      	ldr	r3, [r3, #8]
 8004abc:	68da      	ldr	r2, [r3, #12]
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	689b      	ldr	r3, [r3, #8]
 8004ac2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004ac6:	60da      	str	r2, [r3, #12]
	}
}
 8004ac8:	bf00      	nop
 8004aca:	3710      	adds	r7, #16
 8004acc:	46bd      	mov	sp, r7
 8004ace:	bd80      	pop	{r7, pc}
 8004ad0:	40011000 	.word	0x40011000
 8004ad4:	40004400 	.word	0x40004400
 8004ad8:	40011400 	.word	0x40011400

08004adc <getValueBaudRate>:

//---------------Funcion para calcular el valor correspondiente a ingresar en el BRR----------
uint16_t getValueBaudRate(uint8_t fck, uint32_t baudRate)
{
 8004adc:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004ae0:	b086      	sub	sp, #24
 8004ae2:	af00      	add	r7, sp, #0
 8004ae4:	6039      	str	r1, [r7, #0]
 8004ae6:	4601      	mov	r1, r0
 8004ae8:	71f9      	strb	r1, [r7, #7]
    uint32_t usartDiv = (fck*10000000000)/(16*baudRate);
 8004aea:	79f9      	ldrb	r1, [r7, #7]
 8004aec:	2000      	movs	r0, #0
 8004aee:	460a      	mov	r2, r1
 8004af0:	4603      	mov	r3, r0
 8004af2:	491f      	ldr	r1, [pc, #124]	; (8004b70 <getValueBaudRate+0x94>)
 8004af4:	fb01 f003 	mul.w	r0, r1, r3
 8004af8:	2102      	movs	r1, #2
 8004afa:	fb02 f101 	mul.w	r1, r2, r1
 8004afe:	4401      	add	r1, r0
 8004b00:	481b      	ldr	r0, [pc, #108]	; (8004b70 <getValueBaudRate+0x94>)
 8004b02:	fba2 4500 	umull	r4, r5, r2, r0
 8004b06:	194b      	adds	r3, r1, r5
 8004b08:	461d      	mov	r5, r3
 8004b0a:	683b      	ldr	r3, [r7, #0]
 8004b0c:	011b      	lsls	r3, r3, #4
 8004b0e:	2200      	movs	r2, #0
 8004b10:	4698      	mov	r8, r3
 8004b12:	4691      	mov	r9, r2
 8004b14:	4642      	mov	r2, r8
 8004b16:	464b      	mov	r3, r9
 8004b18:	4620      	mov	r0, r4
 8004b1a:	4629      	mov	r1, r5
 8004b1c:	f7fc f8cc 	bl	8000cb8 <__aeabi_ldivmod>
 8004b20:	4602      	mov	r2, r0
 8004b22:	460b      	mov	r3, r1
 8004b24:	4613      	mov	r3, r2
 8004b26:	617b      	str	r3, [r7, #20]
    uint32_t mantiza = usartDiv/10000;
 8004b28:	697b      	ldr	r3, [r7, #20]
 8004b2a:	4a12      	ldr	r2, [pc, #72]	; (8004b74 <getValueBaudRate+0x98>)
 8004b2c:	fba2 2303 	umull	r2, r3, r2, r3
 8004b30:	0b5b      	lsrs	r3, r3, #13
 8004b32:	613b      	str	r3, [r7, #16]
    uint32_t decimal = usartDiv-mantiza*10000;
 8004b34:	693b      	ldr	r3, [r7, #16]
 8004b36:	f242 7210 	movw	r2, #10000	; 0x2710
 8004b3a:	fb02 f303 	mul.w	r3, r2, r3
 8004b3e:	697a      	ldr	r2, [r7, #20]
 8004b40:	1ad3      	subs	r3, r2, r3
 8004b42:	60fb      	str	r3, [r7, #12]
    uint8_t div_Fraction = (decimal-1000)/625;  //1000
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8004b4a:	4a0a      	ldr	r2, [pc, #40]	; (8004b74 <getValueBaudRate+0x98>)
 8004b4c:	fba2 2303 	umull	r2, r3, r2, r3
 8004b50:	0a5b      	lsrs	r3, r3, #9
 8004b52:	72fb      	strb	r3, [r7, #11]
    uint16_t value  = mantiza<<USART_BRR_DIV_Mantissa_Pos | div_Fraction;
 8004b54:	693b      	ldr	r3, [r7, #16]
 8004b56:	b29b      	uxth	r3, r3
 8004b58:	011b      	lsls	r3, r3, #4
 8004b5a:	b29a      	uxth	r2, r3
 8004b5c:	7afb      	ldrb	r3, [r7, #11]
 8004b5e:	b29b      	uxth	r3, r3
 8004b60:	4313      	orrs	r3, r2
 8004b62:	813b      	strh	r3, [r7, #8]

    return value;
 8004b64:	893b      	ldrh	r3, [r7, #8]
}
 8004b66:	4618      	mov	r0, r3
 8004b68:	3718      	adds	r7, #24
 8004b6a:	46bd      	mov	sp, r7
 8004b6c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8004b70:	540be400 	.word	0x540be400
 8004b74:	d1b71759 	.word	0xd1b71759

08004b78 <writeMsgForTXE>:
	}
}

//Funcion para escribir un string
void writeMsgForTXE(USART_Handler_t *ptrUsartHandlerString, char *MsgtoSend)
{
 8004b78:	b580      	push	{r7, lr}
 8004b7a:	b082      	sub	sp, #8
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	6078      	str	r0, [r7, #4]
 8004b80:	6039      	str	r1, [r7, #0]
	if (posChar == 0 && inLineTxe == 0)
 8004b82:	4b16      	ldr	r3, [pc, #88]	; (8004bdc <writeMsgForTXE+0x64>)
 8004b84:	781b      	ldrb	r3, [r3, #0]
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d111      	bne.n	8004bae <writeMsgForTXE+0x36>
 8004b8a:	4b15      	ldr	r3, [pc, #84]	; (8004be0 <writeMsgForTXE+0x68>)
 8004b8c:	781b      	ldrb	r3, [r3, #0]
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d10d      	bne.n	8004bae <writeMsgForTXE+0x36>
	{
		//Guardamos el string que se desea enviar en un arreglo
		sprintf(bufferMsgForTXE, MsgtoSend);
 8004b92:	6839      	ldr	r1, [r7, #0]
 8004b94:	4813      	ldr	r0, [pc, #76]	; (8004be4 <writeMsgForTXE+0x6c>)
 8004b96:	f001 f8a9 	bl	8005cec <siprintf>
		//cambiamos el tipo
		typeWriteTXE = 1;
 8004b9a:	4b13      	ldr	r3, [pc, #76]	; (8004be8 <writeMsgForTXE+0x70>)
 8004b9c:	2201      	movs	r2, #1
 8004b9e:	701a      	strb	r2, [r3, #0]
		//Activo la interrupcion
		interruptionTX(ptrUsartHandlerString->ptrUSARTx, USART_TX_INTERRUP_ENABLE);
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	689b      	ldr	r3, [r3, #8]
 8004ba4:	2101      	movs	r1, #1
 8004ba6:	4618      	mov	r0, r3
 8004ba8:	f000 f830 	bl	8004c0c <interruptionTX>
 8004bac:	e012      	b.n	8004bd4 <writeMsgForTXE+0x5c>
	}
	else
	{
		sprintf(bufferMsgForTXE_inLine[inLine], MsgtoSend);
 8004bae:	4b0f      	ldr	r3, [pc, #60]	; (8004bec <writeMsgForTXE+0x74>)
 8004bb0:	781b      	ldrb	r3, [r3, #0]
 8004bb2:	461a      	mov	r2, r3
 8004bb4:	2364      	movs	r3, #100	; 0x64
 8004bb6:	fb02 f303 	mul.w	r3, r2, r3
 8004bba:	4a0d      	ldr	r2, [pc, #52]	; (8004bf0 <writeMsgForTXE+0x78>)
 8004bbc:	4413      	add	r3, r2
 8004bbe:	6839      	ldr	r1, [r7, #0]
 8004bc0:	4618      	mov	r0, r3
 8004bc2:	f001 f893 	bl	8005cec <siprintf>
		inLine++;
 8004bc6:	4b09      	ldr	r3, [pc, #36]	; (8004bec <writeMsgForTXE+0x74>)
 8004bc8:	781b      	ldrb	r3, [r3, #0]
 8004bca:	3301      	adds	r3, #1
 8004bcc:	b2da      	uxtb	r2, r3
 8004bce:	4b07      	ldr	r3, [pc, #28]	; (8004bec <writeMsgForTXE+0x74>)
 8004bd0:	701a      	strb	r2, [r3, #0]
	}
}
 8004bd2:	bf00      	nop
 8004bd4:	bf00      	nop
 8004bd6:	3708      	adds	r7, #8
 8004bd8:	46bd      	mov	sp, r7
 8004bda:	bd80      	pop	{r7, pc}
 8004bdc:	20000caa 	.word	0x20000caa
 8004be0:	20000ca9 	.word	0x20000ca9
 8004be4:	20000474 	.word	0x20000474
 8004be8:	20000cab 	.word	0x20000cab
 8004bec:	20000ca8 	.word	0x20000ca8
 8004bf0:	200004d8 	.word	0x200004d8

08004bf4 <getRxData>:

//Funcion para leer un char
uint8_t getRxData(void)
{
 8004bf4:	b480      	push	{r7}
 8004bf6:	af00      	add	r7, sp, #0
	return auxRxData;
 8004bf8:	4b03      	ldr	r3, [pc, #12]	; (8004c08 <getRxData+0x14>)
 8004bfa:	781b      	ldrb	r3, [r3, #0]
}
 8004bfc:	4618      	mov	r0, r3
 8004bfe:	46bd      	mov	sp, r7
 8004c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c04:	4770      	bx	lr
 8004c06:	bf00      	nop
 8004c08:	20000470 	.word	0x20000470

08004c0c <interruptionTX>:

//Funcion para desactivar o activar las interrupciones por  TX
void interruptionTX(USART_TypeDef *ptrUSARTxUsed, uint8_t interrupEnable)
{
 8004c0c:	b480      	push	{r7}
 8004c0e:	b083      	sub	sp, #12
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	6078      	str	r0, [r7, #4]
 8004c14:	460b      	mov	r3, r1
 8004c16:	70fb      	strb	r3, [r7, #3]
	//Se selecciono la interrupcion para TX
	if(interrupEnable ==  USART_TX_INTERRUP_ENABLE)
 8004c18:	78fb      	ldrb	r3, [r7, #3]
 8004c1a:	2b01      	cmp	r3, #1
 8004c1c:	d10c      	bne.n	8004c38 <interruptionTX+0x2c>
	{
		ptrUSARTxUsed->CR1 &= ~USART_CR1_TXEIE;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	68db      	ldr	r3, [r3, #12]
 8004c22:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	60da      	str	r2, [r3, #12]
		ptrUSARTxUsed->CR1 |= USART_CR1_TXEIE;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	68db      	ldr	r3, [r3, #12]
 8004c2e:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	60da      	str	r2, [r3, #12]
	}
	else
	{
		ptrUSARTxUsed->CR1  &= ~USART_CR1_TXEIE;
	}
}
 8004c36:	e005      	b.n	8004c44 <interruptionTX+0x38>
		ptrUSARTxUsed->CR1  &= ~USART_CR1_TXEIE;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	68db      	ldr	r3, [r3, #12]
 8004c3c:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	60da      	str	r2, [r3, #12]
}
 8004c44:	bf00      	nop
 8004c46:	370c      	adds	r7, #12
 8004c48:	46bd      	mov	sp, r7
 8004c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c4e:	4770      	bx	lr

08004c50 <BasicUSART2_Callback>:
	__NOP();
}


__attribute__((weak)) void BasicUSART2_Callback()
{
 8004c50:	b480      	push	{r7}
 8004c52:	af00      	add	r7, sp, #0
	__NOP();
 8004c54:	bf00      	nop
}
 8004c56:	bf00      	nop
 8004c58:	46bd      	mov	sp, r7
 8004c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c5e:	4770      	bx	lr

08004c60 <BasicUSART6_Callback>:


__attribute__((weak)) void BasicUSART6_Callback()
{
 8004c60:	b480      	push	{r7}
 8004c62:	af00      	add	r7, sp, #0
	__NOP();
 8004c64:	bf00      	nop
}
 8004c66:	bf00      	nop
 8004c68:	46bd      	mov	sp, r7
 8004c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c6e:	4770      	bx	lr

08004c70 <USART1_IRQHandler>:
 * estas funciones en el vector de interrupciones respectivamente.
 * Con ello Guardamos el elemento char recibido
 */

void USART1_IRQHandler(void)
{
 8004c70:	b580      	push	{r7, lr}
 8004c72:	af00      	add	r7, sp, #0
	//Confirmamos que el registro RXNE esta activo
	if(ptrUSART1Used->SR & USART_SR_RXNE)
 8004c74:	4b37      	ldr	r3, [pc, #220]	; (8004d54 <USART1_IRQHandler+0xe4>)
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f003 0320 	and.w	r3, r3, #32
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d008      	beq.n	8004c94 <USART1_IRQHandler+0x24>
	{
		//Leemos el registro DR del respectivo USART
		auxRxData = (uint8_t) ptrUSART1Used->DR;
 8004c82:	4b34      	ldr	r3, [pc, #208]	; (8004d54 <USART1_IRQHandler+0xe4>)
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	685b      	ldr	r3, [r3, #4]
 8004c88:	b2da      	uxtb	r2, r3
 8004c8a:	4b33      	ldr	r3, [pc, #204]	; (8004d58 <USART1_IRQHandler+0xe8>)
 8004c8c:	701a      	strb	r2, [r3, #0]
		//Llamanos a la funcion de interrupcion
		BasicUSART1_Callback();
 8004c8e:	f7fc feff 	bl	8001a90 <BasicUSART1_Callback>
	}
	else
	{
		__NOP();
	}
}
 8004c92:	e05d      	b.n	8004d50 <USART1_IRQHandler+0xe0>
	else if (ptrUSART1Used->SR & USART_SR_TXE)
 8004c94:	4b2f      	ldr	r3, [pc, #188]	; (8004d54 <USART1_IRQHandler+0xe4>)
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d055      	beq.n	8004d4e <USART1_IRQHandler+0xde>
		if(typeWriteTXE == 0)
 8004ca2:	4b2e      	ldr	r3, [pc, #184]	; (8004d5c <USART1_IRQHandler+0xec>)
 8004ca4:	781b      	ldrb	r3, [r3, #0]
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d10b      	bne.n	8004cc2 <USART1_IRQHandler+0x52>
			ptrUSART1Used->DR = datatoSendForTXE;
 8004caa:	4b2d      	ldr	r3, [pc, #180]	; (8004d60 <USART1_IRQHandler+0xf0>)
 8004cac:	781a      	ldrb	r2, [r3, #0]
 8004cae:	4b29      	ldr	r3, [pc, #164]	; (8004d54 <USART1_IRQHandler+0xe4>)
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	605a      	str	r2, [r3, #4]
			interruptionTX(ptrUSART1Used, USART_TX_INTERRUP_DISABLE);
 8004cb4:	4b27      	ldr	r3, [pc, #156]	; (8004d54 <USART1_IRQHandler+0xe4>)
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	2100      	movs	r1, #0
 8004cba:	4618      	mov	r0, r3
 8004cbc:	f7ff ffa6 	bl	8004c0c <interruptionTX>
}
 8004cc0:	e046      	b.n	8004d50 <USART1_IRQHandler+0xe0>
		else if(typeWriteTXE == 1)
 8004cc2:	4b26      	ldr	r3, [pc, #152]	; (8004d5c <USART1_IRQHandler+0xec>)
 8004cc4:	781b      	ldrb	r3, [r3, #0]
 8004cc6:	2b01      	cmp	r3, #1
 8004cc8:	d142      	bne.n	8004d50 <USART1_IRQHandler+0xe0>
			if (bufferMsgForTXE[posChar] != '\0')
 8004cca:	4b26      	ldr	r3, [pc, #152]	; (8004d64 <USART1_IRQHandler+0xf4>)
 8004ccc:	781b      	ldrb	r3, [r3, #0]
 8004cce:	461a      	mov	r2, r3
 8004cd0:	4b25      	ldr	r3, [pc, #148]	; (8004d68 <USART1_IRQHandler+0xf8>)
 8004cd2:	5c9b      	ldrb	r3, [r3, r2]
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d00e      	beq.n	8004cf6 <USART1_IRQHandler+0x86>
				ptrUSART1Used->DR = bufferMsgForTXE[posChar];
 8004cd8:	4b22      	ldr	r3, [pc, #136]	; (8004d64 <USART1_IRQHandler+0xf4>)
 8004cda:	781b      	ldrb	r3, [r3, #0]
 8004cdc:	461a      	mov	r2, r3
 8004cde:	4b22      	ldr	r3, [pc, #136]	; (8004d68 <USART1_IRQHandler+0xf8>)
 8004ce0:	5c9a      	ldrb	r2, [r3, r2]
 8004ce2:	4b1c      	ldr	r3, [pc, #112]	; (8004d54 <USART1_IRQHandler+0xe4>)
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	605a      	str	r2, [r3, #4]
				posChar++;
 8004ce8:	4b1e      	ldr	r3, [pc, #120]	; (8004d64 <USART1_IRQHandler+0xf4>)
 8004cea:	781b      	ldrb	r3, [r3, #0]
 8004cec:	3301      	adds	r3, #1
 8004cee:	b2da      	uxtb	r2, r3
 8004cf0:	4b1c      	ldr	r3, [pc, #112]	; (8004d64 <USART1_IRQHandler+0xf4>)
 8004cf2:	701a      	strb	r2, [r3, #0]
}
 8004cf4:	e02c      	b.n	8004d50 <USART1_IRQHandler+0xe0>
				if (inLineTxe<inLine)
 8004cf6:	4b1d      	ldr	r3, [pc, #116]	; (8004d6c <USART1_IRQHandler+0xfc>)
 8004cf8:	781a      	ldrb	r2, [r3, #0]
 8004cfa:	4b1d      	ldr	r3, [pc, #116]	; (8004d70 <USART1_IRQHandler+0x100>)
 8004cfc:	781b      	ldrb	r3, [r3, #0]
 8004cfe:	429a      	cmp	r2, r3
 8004d00:	d215      	bcs.n	8004d2e <USART1_IRQHandler+0xbe>
					sprintf(bufferMsgForTXE, bufferMsgForTXE_inLine[inLineTxe]);
 8004d02:	4b1a      	ldr	r3, [pc, #104]	; (8004d6c <USART1_IRQHandler+0xfc>)
 8004d04:	781b      	ldrb	r3, [r3, #0]
 8004d06:	461a      	mov	r2, r3
 8004d08:	2364      	movs	r3, #100	; 0x64
 8004d0a:	fb02 f303 	mul.w	r3, r2, r3
 8004d0e:	4a19      	ldr	r2, [pc, #100]	; (8004d74 <USART1_IRQHandler+0x104>)
 8004d10:	4413      	add	r3, r2
 8004d12:	4619      	mov	r1, r3
 8004d14:	4814      	ldr	r0, [pc, #80]	; (8004d68 <USART1_IRQHandler+0xf8>)
 8004d16:	f000 ffe9 	bl	8005cec <siprintf>
					posChar = 0;
 8004d1a:	4b12      	ldr	r3, [pc, #72]	; (8004d64 <USART1_IRQHandler+0xf4>)
 8004d1c:	2200      	movs	r2, #0
 8004d1e:	701a      	strb	r2, [r3, #0]
					inLineTxe++;
 8004d20:	4b12      	ldr	r3, [pc, #72]	; (8004d6c <USART1_IRQHandler+0xfc>)
 8004d22:	781b      	ldrb	r3, [r3, #0]
 8004d24:	3301      	adds	r3, #1
 8004d26:	b2da      	uxtb	r2, r3
 8004d28:	4b10      	ldr	r3, [pc, #64]	; (8004d6c <USART1_IRQHandler+0xfc>)
 8004d2a:	701a      	strb	r2, [r3, #0]
}
 8004d2c:	e010      	b.n	8004d50 <USART1_IRQHandler+0xe0>
					interruptionTX(ptrUSART1Used, USART_TX_INTERRUP_DISABLE);
 8004d2e:	4b09      	ldr	r3, [pc, #36]	; (8004d54 <USART1_IRQHandler+0xe4>)
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	2100      	movs	r1, #0
 8004d34:	4618      	mov	r0, r3
 8004d36:	f7ff ff69 	bl	8004c0c <interruptionTX>
					posChar = 0;
 8004d3a:	4b0a      	ldr	r3, [pc, #40]	; (8004d64 <USART1_IRQHandler+0xf4>)
 8004d3c:	2200      	movs	r2, #0
 8004d3e:	701a      	strb	r2, [r3, #0]
					inLineTxe = 0;
 8004d40:	4b0a      	ldr	r3, [pc, #40]	; (8004d6c <USART1_IRQHandler+0xfc>)
 8004d42:	2200      	movs	r2, #0
 8004d44:	701a      	strb	r2, [r3, #0]
					inLine = 0;
 8004d46:	4b0a      	ldr	r3, [pc, #40]	; (8004d70 <USART1_IRQHandler+0x100>)
 8004d48:	2200      	movs	r2, #0
 8004d4a:	701a      	strb	r2, [r3, #0]
}
 8004d4c:	e000      	b.n	8004d50 <USART1_IRQHandler+0xe0>
		__NOP();
 8004d4e:	bf00      	nop
}
 8004d50:	bf00      	nop
 8004d52:	bd80      	pop	{r7, pc}
 8004d54:	20000464 	.word	0x20000464
 8004d58:	20000470 	.word	0x20000470
 8004d5c:	20000cab 	.word	0x20000cab
 8004d60:	20000471 	.word	0x20000471
 8004d64:	20000caa 	.word	0x20000caa
 8004d68:	20000474 	.word	0x20000474
 8004d6c:	20000ca9 	.word	0x20000ca9
 8004d70:	20000ca8 	.word	0x20000ca8
 8004d74:	200004d8 	.word	0x200004d8

08004d78 <USART2_IRQHandler>:

void USART2_IRQHandler(void)
{
 8004d78:	b580      	push	{r7, lr}
 8004d7a:	af00      	add	r7, sp, #0
	//Confirmamos que el registro RXNE esta activo
	if(ptrUSART2Used->SR & USART_SR_RXNE)
 8004d7c:	4b37      	ldr	r3, [pc, #220]	; (8004e5c <USART2_IRQHandler+0xe4>)
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	f003 0320 	and.w	r3, r3, #32
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d008      	beq.n	8004d9c <USART2_IRQHandler+0x24>
	{
		//Leemos el registro DR del respectivo USART
		auxRxData = (uint8_t) ptrUSART2Used->DR;
 8004d8a:	4b34      	ldr	r3, [pc, #208]	; (8004e5c <USART2_IRQHandler+0xe4>)
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	685b      	ldr	r3, [r3, #4]
 8004d90:	b2da      	uxtb	r2, r3
 8004d92:	4b33      	ldr	r3, [pc, #204]	; (8004e60 <USART2_IRQHandler+0xe8>)
 8004d94:	701a      	strb	r2, [r3, #0]
		//Llamanos a la funcion de interrupcion
		BasicUSART2_Callback();
 8004d96:	f7ff ff5b 	bl	8004c50 <BasicUSART2_Callback>
	}
	else
	{
		__NOP();
	}
}
 8004d9a:	e05d      	b.n	8004e58 <USART2_IRQHandler+0xe0>
	else if (ptrUSART2Used->SR & USART_SR_TXE)
 8004d9c:	4b2f      	ldr	r3, [pc, #188]	; (8004e5c <USART2_IRQHandler+0xe4>)
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d055      	beq.n	8004e56 <USART2_IRQHandler+0xde>
		if(typeWriteTXE == 0)
 8004daa:	4b2e      	ldr	r3, [pc, #184]	; (8004e64 <USART2_IRQHandler+0xec>)
 8004dac:	781b      	ldrb	r3, [r3, #0]
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d10b      	bne.n	8004dca <USART2_IRQHandler+0x52>
			ptrUSART2Used->DR = datatoSendForTXE;
 8004db2:	4b2d      	ldr	r3, [pc, #180]	; (8004e68 <USART2_IRQHandler+0xf0>)
 8004db4:	781a      	ldrb	r2, [r3, #0]
 8004db6:	4b29      	ldr	r3, [pc, #164]	; (8004e5c <USART2_IRQHandler+0xe4>)
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	605a      	str	r2, [r3, #4]
			interruptionTX(ptrUSART2Used, USART_TX_INTERRUP_DISABLE);
 8004dbc:	4b27      	ldr	r3, [pc, #156]	; (8004e5c <USART2_IRQHandler+0xe4>)
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	2100      	movs	r1, #0
 8004dc2:	4618      	mov	r0, r3
 8004dc4:	f7ff ff22 	bl	8004c0c <interruptionTX>
}
 8004dc8:	e046      	b.n	8004e58 <USART2_IRQHandler+0xe0>
		else if(typeWriteTXE == 1)
 8004dca:	4b26      	ldr	r3, [pc, #152]	; (8004e64 <USART2_IRQHandler+0xec>)
 8004dcc:	781b      	ldrb	r3, [r3, #0]
 8004dce:	2b01      	cmp	r3, #1
 8004dd0:	d142      	bne.n	8004e58 <USART2_IRQHandler+0xe0>
			if (bufferMsgForTXE[posChar] != '\0')
 8004dd2:	4b26      	ldr	r3, [pc, #152]	; (8004e6c <USART2_IRQHandler+0xf4>)
 8004dd4:	781b      	ldrb	r3, [r3, #0]
 8004dd6:	461a      	mov	r2, r3
 8004dd8:	4b25      	ldr	r3, [pc, #148]	; (8004e70 <USART2_IRQHandler+0xf8>)
 8004dda:	5c9b      	ldrb	r3, [r3, r2]
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d00e      	beq.n	8004dfe <USART2_IRQHandler+0x86>
				ptrUSART2Used->DR = bufferMsgForTXE[posChar];
 8004de0:	4b22      	ldr	r3, [pc, #136]	; (8004e6c <USART2_IRQHandler+0xf4>)
 8004de2:	781b      	ldrb	r3, [r3, #0]
 8004de4:	461a      	mov	r2, r3
 8004de6:	4b22      	ldr	r3, [pc, #136]	; (8004e70 <USART2_IRQHandler+0xf8>)
 8004de8:	5c9a      	ldrb	r2, [r3, r2]
 8004dea:	4b1c      	ldr	r3, [pc, #112]	; (8004e5c <USART2_IRQHandler+0xe4>)
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	605a      	str	r2, [r3, #4]
				posChar++;
 8004df0:	4b1e      	ldr	r3, [pc, #120]	; (8004e6c <USART2_IRQHandler+0xf4>)
 8004df2:	781b      	ldrb	r3, [r3, #0]
 8004df4:	3301      	adds	r3, #1
 8004df6:	b2da      	uxtb	r2, r3
 8004df8:	4b1c      	ldr	r3, [pc, #112]	; (8004e6c <USART2_IRQHandler+0xf4>)
 8004dfa:	701a      	strb	r2, [r3, #0]
}
 8004dfc:	e02c      	b.n	8004e58 <USART2_IRQHandler+0xe0>
				if (inLineTxe<inLine)
 8004dfe:	4b1d      	ldr	r3, [pc, #116]	; (8004e74 <USART2_IRQHandler+0xfc>)
 8004e00:	781a      	ldrb	r2, [r3, #0]
 8004e02:	4b1d      	ldr	r3, [pc, #116]	; (8004e78 <USART2_IRQHandler+0x100>)
 8004e04:	781b      	ldrb	r3, [r3, #0]
 8004e06:	429a      	cmp	r2, r3
 8004e08:	d215      	bcs.n	8004e36 <USART2_IRQHandler+0xbe>
					sprintf(bufferMsgForTXE, bufferMsgForTXE_inLine[inLineTxe]);
 8004e0a:	4b1a      	ldr	r3, [pc, #104]	; (8004e74 <USART2_IRQHandler+0xfc>)
 8004e0c:	781b      	ldrb	r3, [r3, #0]
 8004e0e:	461a      	mov	r2, r3
 8004e10:	2364      	movs	r3, #100	; 0x64
 8004e12:	fb02 f303 	mul.w	r3, r2, r3
 8004e16:	4a19      	ldr	r2, [pc, #100]	; (8004e7c <USART2_IRQHandler+0x104>)
 8004e18:	4413      	add	r3, r2
 8004e1a:	4619      	mov	r1, r3
 8004e1c:	4814      	ldr	r0, [pc, #80]	; (8004e70 <USART2_IRQHandler+0xf8>)
 8004e1e:	f000 ff65 	bl	8005cec <siprintf>
					posChar = 0;
 8004e22:	4b12      	ldr	r3, [pc, #72]	; (8004e6c <USART2_IRQHandler+0xf4>)
 8004e24:	2200      	movs	r2, #0
 8004e26:	701a      	strb	r2, [r3, #0]
					inLineTxe++;
 8004e28:	4b12      	ldr	r3, [pc, #72]	; (8004e74 <USART2_IRQHandler+0xfc>)
 8004e2a:	781b      	ldrb	r3, [r3, #0]
 8004e2c:	3301      	adds	r3, #1
 8004e2e:	b2da      	uxtb	r2, r3
 8004e30:	4b10      	ldr	r3, [pc, #64]	; (8004e74 <USART2_IRQHandler+0xfc>)
 8004e32:	701a      	strb	r2, [r3, #0]
}
 8004e34:	e010      	b.n	8004e58 <USART2_IRQHandler+0xe0>
					interruptionTX(ptrUSART2Used, USART_TX_INTERRUP_DISABLE);
 8004e36:	4b09      	ldr	r3, [pc, #36]	; (8004e5c <USART2_IRQHandler+0xe4>)
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	2100      	movs	r1, #0
 8004e3c:	4618      	mov	r0, r3
 8004e3e:	f7ff fee5 	bl	8004c0c <interruptionTX>
					posChar = 0;
 8004e42:	4b0a      	ldr	r3, [pc, #40]	; (8004e6c <USART2_IRQHandler+0xf4>)
 8004e44:	2200      	movs	r2, #0
 8004e46:	701a      	strb	r2, [r3, #0]
					inLineTxe = 0;
 8004e48:	4b0a      	ldr	r3, [pc, #40]	; (8004e74 <USART2_IRQHandler+0xfc>)
 8004e4a:	2200      	movs	r2, #0
 8004e4c:	701a      	strb	r2, [r3, #0]
					inLine = 0;
 8004e4e:	4b0a      	ldr	r3, [pc, #40]	; (8004e78 <USART2_IRQHandler+0x100>)
 8004e50:	2200      	movs	r2, #0
 8004e52:	701a      	strb	r2, [r3, #0]
}
 8004e54:	e000      	b.n	8004e58 <USART2_IRQHandler+0xe0>
		__NOP();
 8004e56:	bf00      	nop
}
 8004e58:	bf00      	nop
 8004e5a:	bd80      	pop	{r7, pc}
 8004e5c:	20000468 	.word	0x20000468
 8004e60:	20000470 	.word	0x20000470
 8004e64:	20000cab 	.word	0x20000cab
 8004e68:	20000471 	.word	0x20000471
 8004e6c:	20000caa 	.word	0x20000caa
 8004e70:	20000474 	.word	0x20000474
 8004e74:	20000ca9 	.word	0x20000ca9
 8004e78:	20000ca8 	.word	0x20000ca8
 8004e7c:	200004d8 	.word	0x200004d8

08004e80 <USART6_IRQHandler>:

void USART6_IRQHandler(void)
{
 8004e80:	b580      	push	{r7, lr}
 8004e82:	af00      	add	r7, sp, #0
	//Confirmamos que el registro RXNE esta activo
	if(ptrUSART6Used->SR & USART_SR_RXNE)
 8004e84:	4b37      	ldr	r3, [pc, #220]	; (8004f64 <USART6_IRQHandler+0xe4>)
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	f003 0320 	and.w	r3, r3, #32
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d008      	beq.n	8004ea4 <USART6_IRQHandler+0x24>
	{
		//Leemos el registro DR del respectivo USART
		auxRxData = (uint8_t) ptrUSART6Used->DR;
 8004e92:	4b34      	ldr	r3, [pc, #208]	; (8004f64 <USART6_IRQHandler+0xe4>)
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	685b      	ldr	r3, [r3, #4]
 8004e98:	b2da      	uxtb	r2, r3
 8004e9a:	4b33      	ldr	r3, [pc, #204]	; (8004f68 <USART6_IRQHandler+0xe8>)
 8004e9c:	701a      	strb	r2, [r3, #0]
		//Llamanos a la funcion de interrupcion
		BasicUSART6_Callback();
 8004e9e:	f7ff fedf 	bl	8004c60 <BasicUSART6_Callback>
	}
	else
	{
		__NOP();
	}
}
 8004ea2:	e05d      	b.n	8004f60 <USART6_IRQHandler+0xe0>
	else if (ptrUSART6Used->SR & USART_SR_TXE)
 8004ea4:	4b2f      	ldr	r3, [pc, #188]	; (8004f64 <USART6_IRQHandler+0xe4>)
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d055      	beq.n	8004f5e <USART6_IRQHandler+0xde>
		if(typeWriteTXE == 0)
 8004eb2:	4b2e      	ldr	r3, [pc, #184]	; (8004f6c <USART6_IRQHandler+0xec>)
 8004eb4:	781b      	ldrb	r3, [r3, #0]
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d10b      	bne.n	8004ed2 <USART6_IRQHandler+0x52>
			ptrUSART6Used->DR = datatoSendForTXE;
 8004eba:	4b2d      	ldr	r3, [pc, #180]	; (8004f70 <USART6_IRQHandler+0xf0>)
 8004ebc:	781a      	ldrb	r2, [r3, #0]
 8004ebe:	4b29      	ldr	r3, [pc, #164]	; (8004f64 <USART6_IRQHandler+0xe4>)
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	605a      	str	r2, [r3, #4]
			interruptionTX(ptrUSART6Used, USART_TX_INTERRUP_DISABLE);
 8004ec4:	4b27      	ldr	r3, [pc, #156]	; (8004f64 <USART6_IRQHandler+0xe4>)
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	2100      	movs	r1, #0
 8004eca:	4618      	mov	r0, r3
 8004ecc:	f7ff fe9e 	bl	8004c0c <interruptionTX>
}
 8004ed0:	e046      	b.n	8004f60 <USART6_IRQHandler+0xe0>
		else if(typeWriteTXE == 1)
 8004ed2:	4b26      	ldr	r3, [pc, #152]	; (8004f6c <USART6_IRQHandler+0xec>)
 8004ed4:	781b      	ldrb	r3, [r3, #0]
 8004ed6:	2b01      	cmp	r3, #1
 8004ed8:	d142      	bne.n	8004f60 <USART6_IRQHandler+0xe0>
			if (bufferMsgForTXE[posChar] != '\0')
 8004eda:	4b26      	ldr	r3, [pc, #152]	; (8004f74 <USART6_IRQHandler+0xf4>)
 8004edc:	781b      	ldrb	r3, [r3, #0]
 8004ede:	461a      	mov	r2, r3
 8004ee0:	4b25      	ldr	r3, [pc, #148]	; (8004f78 <USART6_IRQHandler+0xf8>)
 8004ee2:	5c9b      	ldrb	r3, [r3, r2]
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d00e      	beq.n	8004f06 <USART6_IRQHandler+0x86>
				ptrUSART6Used->DR = bufferMsgForTXE[posChar];
 8004ee8:	4b22      	ldr	r3, [pc, #136]	; (8004f74 <USART6_IRQHandler+0xf4>)
 8004eea:	781b      	ldrb	r3, [r3, #0]
 8004eec:	461a      	mov	r2, r3
 8004eee:	4b22      	ldr	r3, [pc, #136]	; (8004f78 <USART6_IRQHandler+0xf8>)
 8004ef0:	5c9a      	ldrb	r2, [r3, r2]
 8004ef2:	4b1c      	ldr	r3, [pc, #112]	; (8004f64 <USART6_IRQHandler+0xe4>)
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	605a      	str	r2, [r3, #4]
				posChar++;
 8004ef8:	4b1e      	ldr	r3, [pc, #120]	; (8004f74 <USART6_IRQHandler+0xf4>)
 8004efa:	781b      	ldrb	r3, [r3, #0]
 8004efc:	3301      	adds	r3, #1
 8004efe:	b2da      	uxtb	r2, r3
 8004f00:	4b1c      	ldr	r3, [pc, #112]	; (8004f74 <USART6_IRQHandler+0xf4>)
 8004f02:	701a      	strb	r2, [r3, #0]
}
 8004f04:	e02c      	b.n	8004f60 <USART6_IRQHandler+0xe0>
				if (inLineTxe<inLine)
 8004f06:	4b1d      	ldr	r3, [pc, #116]	; (8004f7c <USART6_IRQHandler+0xfc>)
 8004f08:	781a      	ldrb	r2, [r3, #0]
 8004f0a:	4b1d      	ldr	r3, [pc, #116]	; (8004f80 <USART6_IRQHandler+0x100>)
 8004f0c:	781b      	ldrb	r3, [r3, #0]
 8004f0e:	429a      	cmp	r2, r3
 8004f10:	d215      	bcs.n	8004f3e <USART6_IRQHandler+0xbe>
					sprintf(bufferMsgForTXE, bufferMsgForTXE_inLine[inLineTxe]);
 8004f12:	4b1a      	ldr	r3, [pc, #104]	; (8004f7c <USART6_IRQHandler+0xfc>)
 8004f14:	781b      	ldrb	r3, [r3, #0]
 8004f16:	461a      	mov	r2, r3
 8004f18:	2364      	movs	r3, #100	; 0x64
 8004f1a:	fb02 f303 	mul.w	r3, r2, r3
 8004f1e:	4a19      	ldr	r2, [pc, #100]	; (8004f84 <USART6_IRQHandler+0x104>)
 8004f20:	4413      	add	r3, r2
 8004f22:	4619      	mov	r1, r3
 8004f24:	4814      	ldr	r0, [pc, #80]	; (8004f78 <USART6_IRQHandler+0xf8>)
 8004f26:	f000 fee1 	bl	8005cec <siprintf>
					posChar = 0;
 8004f2a:	4b12      	ldr	r3, [pc, #72]	; (8004f74 <USART6_IRQHandler+0xf4>)
 8004f2c:	2200      	movs	r2, #0
 8004f2e:	701a      	strb	r2, [r3, #0]
					inLineTxe++;
 8004f30:	4b12      	ldr	r3, [pc, #72]	; (8004f7c <USART6_IRQHandler+0xfc>)
 8004f32:	781b      	ldrb	r3, [r3, #0]
 8004f34:	3301      	adds	r3, #1
 8004f36:	b2da      	uxtb	r2, r3
 8004f38:	4b10      	ldr	r3, [pc, #64]	; (8004f7c <USART6_IRQHandler+0xfc>)
 8004f3a:	701a      	strb	r2, [r3, #0]
}
 8004f3c:	e010      	b.n	8004f60 <USART6_IRQHandler+0xe0>
					interruptionTX(ptrUSART6Used, USART_TX_INTERRUP_DISABLE);
 8004f3e:	4b09      	ldr	r3, [pc, #36]	; (8004f64 <USART6_IRQHandler+0xe4>)
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	2100      	movs	r1, #0
 8004f44:	4618      	mov	r0, r3
 8004f46:	f7ff fe61 	bl	8004c0c <interruptionTX>
					posChar = 0;
 8004f4a:	4b0a      	ldr	r3, [pc, #40]	; (8004f74 <USART6_IRQHandler+0xf4>)
 8004f4c:	2200      	movs	r2, #0
 8004f4e:	701a      	strb	r2, [r3, #0]
					inLineTxe = 0;
 8004f50:	4b0a      	ldr	r3, [pc, #40]	; (8004f7c <USART6_IRQHandler+0xfc>)
 8004f52:	2200      	movs	r2, #0
 8004f54:	701a      	strb	r2, [r3, #0]
					inLine = 0;
 8004f56:	4b0a      	ldr	r3, [pc, #40]	; (8004f80 <USART6_IRQHandler+0x100>)
 8004f58:	2200      	movs	r2, #0
 8004f5a:	701a      	strb	r2, [r3, #0]
}
 8004f5c:	e000      	b.n	8004f60 <USART6_IRQHandler+0xe0>
		__NOP();
 8004f5e:	bf00      	nop
}
 8004f60:	bf00      	nop
 8004f62:	bd80      	pop	{r7, pc}
 8004f64:	2000046c 	.word	0x2000046c
 8004f68:	20000470 	.word	0x20000470
 8004f6c:	20000cab 	.word	0x20000cab
 8004f70:	20000471 	.word	0x20000471
 8004f74:	20000caa 	.word	0x20000caa
 8004f78:	20000474 	.word	0x20000474
 8004f7c:	20000ca9 	.word	0x20000ca9
 8004f80:	20000ca8 	.word	0x20000ca8
 8004f84:	200004d8 	.word	0x200004d8

08004f88 <__errno>:
 8004f88:	4b01      	ldr	r3, [pc, #4]	; (8004f90 <__errno+0x8>)
 8004f8a:	6818      	ldr	r0, [r3, #0]
 8004f8c:	4770      	bx	lr
 8004f8e:	bf00      	nop
 8004f90:	20000010 	.word	0x20000010

08004f94 <__libc_init_array>:
 8004f94:	b570      	push	{r4, r5, r6, lr}
 8004f96:	4d0d      	ldr	r5, [pc, #52]	; (8004fcc <__libc_init_array+0x38>)
 8004f98:	4c0d      	ldr	r4, [pc, #52]	; (8004fd0 <__libc_init_array+0x3c>)
 8004f9a:	1b64      	subs	r4, r4, r5
 8004f9c:	10a4      	asrs	r4, r4, #2
 8004f9e:	2600      	movs	r6, #0
 8004fa0:	42a6      	cmp	r6, r4
 8004fa2:	d109      	bne.n	8004fb8 <__libc_init_array+0x24>
 8004fa4:	4d0b      	ldr	r5, [pc, #44]	; (8004fd4 <__libc_init_array+0x40>)
 8004fa6:	4c0c      	ldr	r4, [pc, #48]	; (8004fd8 <__libc_init_array+0x44>)
 8004fa8:	f006 fbdc 	bl	800b764 <_init>
 8004fac:	1b64      	subs	r4, r4, r5
 8004fae:	10a4      	asrs	r4, r4, #2
 8004fb0:	2600      	movs	r6, #0
 8004fb2:	42a6      	cmp	r6, r4
 8004fb4:	d105      	bne.n	8004fc2 <__libc_init_array+0x2e>
 8004fb6:	bd70      	pop	{r4, r5, r6, pc}
 8004fb8:	f855 3b04 	ldr.w	r3, [r5], #4
 8004fbc:	4798      	blx	r3
 8004fbe:	3601      	adds	r6, #1
 8004fc0:	e7ee      	b.n	8004fa0 <__libc_init_array+0xc>
 8004fc2:	f855 3b04 	ldr.w	r3, [r5], #4
 8004fc6:	4798      	blx	r3
 8004fc8:	3601      	adds	r6, #1
 8004fca:	e7f2      	b.n	8004fb2 <__libc_init_array+0x1e>
 8004fcc:	0800c1f8 	.word	0x0800c1f8
 8004fd0:	0800c1f8 	.word	0x0800c1f8
 8004fd4:	0800c1f8 	.word	0x0800c1f8
 8004fd8:	0800c1fc 	.word	0x0800c1fc

08004fdc <memset>:
 8004fdc:	4402      	add	r2, r0
 8004fde:	4603      	mov	r3, r0
 8004fe0:	4293      	cmp	r3, r2
 8004fe2:	d100      	bne.n	8004fe6 <memset+0xa>
 8004fe4:	4770      	bx	lr
 8004fe6:	f803 1b01 	strb.w	r1, [r3], #1
 8004fea:	e7f9      	b.n	8004fe0 <memset+0x4>

08004fec <__cvt>:
 8004fec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004ff0:	ec55 4b10 	vmov	r4, r5, d0
 8004ff4:	2d00      	cmp	r5, #0
 8004ff6:	460e      	mov	r6, r1
 8004ff8:	4619      	mov	r1, r3
 8004ffa:	462b      	mov	r3, r5
 8004ffc:	bfbb      	ittet	lt
 8004ffe:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8005002:	461d      	movlt	r5, r3
 8005004:	2300      	movge	r3, #0
 8005006:	232d      	movlt	r3, #45	; 0x2d
 8005008:	700b      	strb	r3, [r1, #0]
 800500a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800500c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8005010:	4691      	mov	r9, r2
 8005012:	f023 0820 	bic.w	r8, r3, #32
 8005016:	bfbc      	itt	lt
 8005018:	4622      	movlt	r2, r4
 800501a:	4614      	movlt	r4, r2
 800501c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005020:	d005      	beq.n	800502e <__cvt+0x42>
 8005022:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8005026:	d100      	bne.n	800502a <__cvt+0x3e>
 8005028:	3601      	adds	r6, #1
 800502a:	2102      	movs	r1, #2
 800502c:	e000      	b.n	8005030 <__cvt+0x44>
 800502e:	2103      	movs	r1, #3
 8005030:	ab03      	add	r3, sp, #12
 8005032:	9301      	str	r3, [sp, #4]
 8005034:	ab02      	add	r3, sp, #8
 8005036:	9300      	str	r3, [sp, #0]
 8005038:	ec45 4b10 	vmov	d0, r4, r5
 800503c:	4653      	mov	r3, sl
 800503e:	4632      	mov	r2, r6
 8005040:	f001 fe42 	bl	8006cc8 <_dtoa_r>
 8005044:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005048:	4607      	mov	r7, r0
 800504a:	d102      	bne.n	8005052 <__cvt+0x66>
 800504c:	f019 0f01 	tst.w	r9, #1
 8005050:	d022      	beq.n	8005098 <__cvt+0xac>
 8005052:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005056:	eb07 0906 	add.w	r9, r7, r6
 800505a:	d110      	bne.n	800507e <__cvt+0x92>
 800505c:	783b      	ldrb	r3, [r7, #0]
 800505e:	2b30      	cmp	r3, #48	; 0x30
 8005060:	d10a      	bne.n	8005078 <__cvt+0x8c>
 8005062:	2200      	movs	r2, #0
 8005064:	2300      	movs	r3, #0
 8005066:	4620      	mov	r0, r4
 8005068:	4629      	mov	r1, r5
 800506a:	f7fb fd45 	bl	8000af8 <__aeabi_dcmpeq>
 800506e:	b918      	cbnz	r0, 8005078 <__cvt+0x8c>
 8005070:	f1c6 0601 	rsb	r6, r6, #1
 8005074:	f8ca 6000 	str.w	r6, [sl]
 8005078:	f8da 3000 	ldr.w	r3, [sl]
 800507c:	4499      	add	r9, r3
 800507e:	2200      	movs	r2, #0
 8005080:	2300      	movs	r3, #0
 8005082:	4620      	mov	r0, r4
 8005084:	4629      	mov	r1, r5
 8005086:	f7fb fd37 	bl	8000af8 <__aeabi_dcmpeq>
 800508a:	b108      	cbz	r0, 8005090 <__cvt+0xa4>
 800508c:	f8cd 900c 	str.w	r9, [sp, #12]
 8005090:	2230      	movs	r2, #48	; 0x30
 8005092:	9b03      	ldr	r3, [sp, #12]
 8005094:	454b      	cmp	r3, r9
 8005096:	d307      	bcc.n	80050a8 <__cvt+0xbc>
 8005098:	9b03      	ldr	r3, [sp, #12]
 800509a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800509c:	1bdb      	subs	r3, r3, r7
 800509e:	4638      	mov	r0, r7
 80050a0:	6013      	str	r3, [r2, #0]
 80050a2:	b004      	add	sp, #16
 80050a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80050a8:	1c59      	adds	r1, r3, #1
 80050aa:	9103      	str	r1, [sp, #12]
 80050ac:	701a      	strb	r2, [r3, #0]
 80050ae:	e7f0      	b.n	8005092 <__cvt+0xa6>

080050b0 <__exponent>:
 80050b0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80050b2:	4603      	mov	r3, r0
 80050b4:	2900      	cmp	r1, #0
 80050b6:	bfb8      	it	lt
 80050b8:	4249      	neglt	r1, r1
 80050ba:	f803 2b02 	strb.w	r2, [r3], #2
 80050be:	bfb4      	ite	lt
 80050c0:	222d      	movlt	r2, #45	; 0x2d
 80050c2:	222b      	movge	r2, #43	; 0x2b
 80050c4:	2909      	cmp	r1, #9
 80050c6:	7042      	strb	r2, [r0, #1]
 80050c8:	dd2a      	ble.n	8005120 <__exponent+0x70>
 80050ca:	f10d 0407 	add.w	r4, sp, #7
 80050ce:	46a4      	mov	ip, r4
 80050d0:	270a      	movs	r7, #10
 80050d2:	46a6      	mov	lr, r4
 80050d4:	460a      	mov	r2, r1
 80050d6:	fb91 f6f7 	sdiv	r6, r1, r7
 80050da:	fb07 1516 	mls	r5, r7, r6, r1
 80050de:	3530      	adds	r5, #48	; 0x30
 80050e0:	2a63      	cmp	r2, #99	; 0x63
 80050e2:	f104 34ff 	add.w	r4, r4, #4294967295
 80050e6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80050ea:	4631      	mov	r1, r6
 80050ec:	dcf1      	bgt.n	80050d2 <__exponent+0x22>
 80050ee:	3130      	adds	r1, #48	; 0x30
 80050f0:	f1ae 0502 	sub.w	r5, lr, #2
 80050f4:	f804 1c01 	strb.w	r1, [r4, #-1]
 80050f8:	1c44      	adds	r4, r0, #1
 80050fa:	4629      	mov	r1, r5
 80050fc:	4561      	cmp	r1, ip
 80050fe:	d30a      	bcc.n	8005116 <__exponent+0x66>
 8005100:	f10d 0209 	add.w	r2, sp, #9
 8005104:	eba2 020e 	sub.w	r2, r2, lr
 8005108:	4565      	cmp	r5, ip
 800510a:	bf88      	it	hi
 800510c:	2200      	movhi	r2, #0
 800510e:	4413      	add	r3, r2
 8005110:	1a18      	subs	r0, r3, r0
 8005112:	b003      	add	sp, #12
 8005114:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005116:	f811 2b01 	ldrb.w	r2, [r1], #1
 800511a:	f804 2f01 	strb.w	r2, [r4, #1]!
 800511e:	e7ed      	b.n	80050fc <__exponent+0x4c>
 8005120:	2330      	movs	r3, #48	; 0x30
 8005122:	3130      	adds	r1, #48	; 0x30
 8005124:	7083      	strb	r3, [r0, #2]
 8005126:	70c1      	strb	r1, [r0, #3]
 8005128:	1d03      	adds	r3, r0, #4
 800512a:	e7f1      	b.n	8005110 <__exponent+0x60>

0800512c <_printf_float>:
 800512c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005130:	ed2d 8b02 	vpush	{d8}
 8005134:	b08d      	sub	sp, #52	; 0x34
 8005136:	460c      	mov	r4, r1
 8005138:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800513c:	4616      	mov	r6, r2
 800513e:	461f      	mov	r7, r3
 8005140:	4605      	mov	r5, r0
 8005142:	f002 ff1f 	bl	8007f84 <_localeconv_r>
 8005146:	f8d0 a000 	ldr.w	sl, [r0]
 800514a:	4650      	mov	r0, sl
 800514c:	f7fb f852 	bl	80001f4 <strlen>
 8005150:	2300      	movs	r3, #0
 8005152:	930a      	str	r3, [sp, #40]	; 0x28
 8005154:	6823      	ldr	r3, [r4, #0]
 8005156:	9305      	str	r3, [sp, #20]
 8005158:	f8d8 3000 	ldr.w	r3, [r8]
 800515c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8005160:	3307      	adds	r3, #7
 8005162:	f023 0307 	bic.w	r3, r3, #7
 8005166:	f103 0208 	add.w	r2, r3, #8
 800516a:	f8c8 2000 	str.w	r2, [r8]
 800516e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005172:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8005176:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800517a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800517e:	9307      	str	r3, [sp, #28]
 8005180:	f8cd 8018 	str.w	r8, [sp, #24]
 8005184:	ee08 0a10 	vmov	s16, r0
 8005188:	4b9f      	ldr	r3, [pc, #636]	; (8005408 <_printf_float+0x2dc>)
 800518a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800518e:	f04f 32ff 	mov.w	r2, #4294967295
 8005192:	f7fb fce3 	bl	8000b5c <__aeabi_dcmpun>
 8005196:	bb88      	cbnz	r0, 80051fc <_printf_float+0xd0>
 8005198:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800519c:	4b9a      	ldr	r3, [pc, #616]	; (8005408 <_printf_float+0x2dc>)
 800519e:	f04f 32ff 	mov.w	r2, #4294967295
 80051a2:	f7fb fcbd 	bl	8000b20 <__aeabi_dcmple>
 80051a6:	bb48      	cbnz	r0, 80051fc <_printf_float+0xd0>
 80051a8:	2200      	movs	r2, #0
 80051aa:	2300      	movs	r3, #0
 80051ac:	4640      	mov	r0, r8
 80051ae:	4649      	mov	r1, r9
 80051b0:	f7fb fcac 	bl	8000b0c <__aeabi_dcmplt>
 80051b4:	b110      	cbz	r0, 80051bc <_printf_float+0x90>
 80051b6:	232d      	movs	r3, #45	; 0x2d
 80051b8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80051bc:	4b93      	ldr	r3, [pc, #588]	; (800540c <_printf_float+0x2e0>)
 80051be:	4894      	ldr	r0, [pc, #592]	; (8005410 <_printf_float+0x2e4>)
 80051c0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80051c4:	bf94      	ite	ls
 80051c6:	4698      	movls	r8, r3
 80051c8:	4680      	movhi	r8, r0
 80051ca:	2303      	movs	r3, #3
 80051cc:	6123      	str	r3, [r4, #16]
 80051ce:	9b05      	ldr	r3, [sp, #20]
 80051d0:	f023 0204 	bic.w	r2, r3, #4
 80051d4:	6022      	str	r2, [r4, #0]
 80051d6:	f04f 0900 	mov.w	r9, #0
 80051da:	9700      	str	r7, [sp, #0]
 80051dc:	4633      	mov	r3, r6
 80051de:	aa0b      	add	r2, sp, #44	; 0x2c
 80051e0:	4621      	mov	r1, r4
 80051e2:	4628      	mov	r0, r5
 80051e4:	f000 f9d8 	bl	8005598 <_printf_common>
 80051e8:	3001      	adds	r0, #1
 80051ea:	f040 8090 	bne.w	800530e <_printf_float+0x1e2>
 80051ee:	f04f 30ff 	mov.w	r0, #4294967295
 80051f2:	b00d      	add	sp, #52	; 0x34
 80051f4:	ecbd 8b02 	vpop	{d8}
 80051f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80051fc:	4642      	mov	r2, r8
 80051fe:	464b      	mov	r3, r9
 8005200:	4640      	mov	r0, r8
 8005202:	4649      	mov	r1, r9
 8005204:	f7fb fcaa 	bl	8000b5c <__aeabi_dcmpun>
 8005208:	b140      	cbz	r0, 800521c <_printf_float+0xf0>
 800520a:	464b      	mov	r3, r9
 800520c:	2b00      	cmp	r3, #0
 800520e:	bfbc      	itt	lt
 8005210:	232d      	movlt	r3, #45	; 0x2d
 8005212:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8005216:	487f      	ldr	r0, [pc, #508]	; (8005414 <_printf_float+0x2e8>)
 8005218:	4b7f      	ldr	r3, [pc, #508]	; (8005418 <_printf_float+0x2ec>)
 800521a:	e7d1      	b.n	80051c0 <_printf_float+0x94>
 800521c:	6863      	ldr	r3, [r4, #4]
 800521e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8005222:	9206      	str	r2, [sp, #24]
 8005224:	1c5a      	adds	r2, r3, #1
 8005226:	d13f      	bne.n	80052a8 <_printf_float+0x17c>
 8005228:	2306      	movs	r3, #6
 800522a:	6063      	str	r3, [r4, #4]
 800522c:	9b05      	ldr	r3, [sp, #20]
 800522e:	6861      	ldr	r1, [r4, #4]
 8005230:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8005234:	2300      	movs	r3, #0
 8005236:	9303      	str	r3, [sp, #12]
 8005238:	ab0a      	add	r3, sp, #40	; 0x28
 800523a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800523e:	ab09      	add	r3, sp, #36	; 0x24
 8005240:	ec49 8b10 	vmov	d0, r8, r9
 8005244:	9300      	str	r3, [sp, #0]
 8005246:	6022      	str	r2, [r4, #0]
 8005248:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800524c:	4628      	mov	r0, r5
 800524e:	f7ff fecd 	bl	8004fec <__cvt>
 8005252:	9b06      	ldr	r3, [sp, #24]
 8005254:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005256:	2b47      	cmp	r3, #71	; 0x47
 8005258:	4680      	mov	r8, r0
 800525a:	d108      	bne.n	800526e <_printf_float+0x142>
 800525c:	1cc8      	adds	r0, r1, #3
 800525e:	db02      	blt.n	8005266 <_printf_float+0x13a>
 8005260:	6863      	ldr	r3, [r4, #4]
 8005262:	4299      	cmp	r1, r3
 8005264:	dd41      	ble.n	80052ea <_printf_float+0x1be>
 8005266:	f1ab 0b02 	sub.w	fp, fp, #2
 800526a:	fa5f fb8b 	uxtb.w	fp, fp
 800526e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005272:	d820      	bhi.n	80052b6 <_printf_float+0x18a>
 8005274:	3901      	subs	r1, #1
 8005276:	465a      	mov	r2, fp
 8005278:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800527c:	9109      	str	r1, [sp, #36]	; 0x24
 800527e:	f7ff ff17 	bl	80050b0 <__exponent>
 8005282:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005284:	1813      	adds	r3, r2, r0
 8005286:	2a01      	cmp	r2, #1
 8005288:	4681      	mov	r9, r0
 800528a:	6123      	str	r3, [r4, #16]
 800528c:	dc02      	bgt.n	8005294 <_printf_float+0x168>
 800528e:	6822      	ldr	r2, [r4, #0]
 8005290:	07d2      	lsls	r2, r2, #31
 8005292:	d501      	bpl.n	8005298 <_printf_float+0x16c>
 8005294:	3301      	adds	r3, #1
 8005296:	6123      	str	r3, [r4, #16]
 8005298:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800529c:	2b00      	cmp	r3, #0
 800529e:	d09c      	beq.n	80051da <_printf_float+0xae>
 80052a0:	232d      	movs	r3, #45	; 0x2d
 80052a2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80052a6:	e798      	b.n	80051da <_printf_float+0xae>
 80052a8:	9a06      	ldr	r2, [sp, #24]
 80052aa:	2a47      	cmp	r2, #71	; 0x47
 80052ac:	d1be      	bne.n	800522c <_printf_float+0x100>
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d1bc      	bne.n	800522c <_printf_float+0x100>
 80052b2:	2301      	movs	r3, #1
 80052b4:	e7b9      	b.n	800522a <_printf_float+0xfe>
 80052b6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80052ba:	d118      	bne.n	80052ee <_printf_float+0x1c2>
 80052bc:	2900      	cmp	r1, #0
 80052be:	6863      	ldr	r3, [r4, #4]
 80052c0:	dd0b      	ble.n	80052da <_printf_float+0x1ae>
 80052c2:	6121      	str	r1, [r4, #16]
 80052c4:	b913      	cbnz	r3, 80052cc <_printf_float+0x1a0>
 80052c6:	6822      	ldr	r2, [r4, #0]
 80052c8:	07d0      	lsls	r0, r2, #31
 80052ca:	d502      	bpl.n	80052d2 <_printf_float+0x1a6>
 80052cc:	3301      	adds	r3, #1
 80052ce:	440b      	add	r3, r1
 80052d0:	6123      	str	r3, [r4, #16]
 80052d2:	65a1      	str	r1, [r4, #88]	; 0x58
 80052d4:	f04f 0900 	mov.w	r9, #0
 80052d8:	e7de      	b.n	8005298 <_printf_float+0x16c>
 80052da:	b913      	cbnz	r3, 80052e2 <_printf_float+0x1b6>
 80052dc:	6822      	ldr	r2, [r4, #0]
 80052de:	07d2      	lsls	r2, r2, #31
 80052e0:	d501      	bpl.n	80052e6 <_printf_float+0x1ba>
 80052e2:	3302      	adds	r3, #2
 80052e4:	e7f4      	b.n	80052d0 <_printf_float+0x1a4>
 80052e6:	2301      	movs	r3, #1
 80052e8:	e7f2      	b.n	80052d0 <_printf_float+0x1a4>
 80052ea:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80052ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80052f0:	4299      	cmp	r1, r3
 80052f2:	db05      	blt.n	8005300 <_printf_float+0x1d4>
 80052f4:	6823      	ldr	r3, [r4, #0]
 80052f6:	6121      	str	r1, [r4, #16]
 80052f8:	07d8      	lsls	r0, r3, #31
 80052fa:	d5ea      	bpl.n	80052d2 <_printf_float+0x1a6>
 80052fc:	1c4b      	adds	r3, r1, #1
 80052fe:	e7e7      	b.n	80052d0 <_printf_float+0x1a4>
 8005300:	2900      	cmp	r1, #0
 8005302:	bfd4      	ite	le
 8005304:	f1c1 0202 	rsble	r2, r1, #2
 8005308:	2201      	movgt	r2, #1
 800530a:	4413      	add	r3, r2
 800530c:	e7e0      	b.n	80052d0 <_printf_float+0x1a4>
 800530e:	6823      	ldr	r3, [r4, #0]
 8005310:	055a      	lsls	r2, r3, #21
 8005312:	d407      	bmi.n	8005324 <_printf_float+0x1f8>
 8005314:	6923      	ldr	r3, [r4, #16]
 8005316:	4642      	mov	r2, r8
 8005318:	4631      	mov	r1, r6
 800531a:	4628      	mov	r0, r5
 800531c:	47b8      	blx	r7
 800531e:	3001      	adds	r0, #1
 8005320:	d12c      	bne.n	800537c <_printf_float+0x250>
 8005322:	e764      	b.n	80051ee <_printf_float+0xc2>
 8005324:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005328:	f240 80e0 	bls.w	80054ec <_printf_float+0x3c0>
 800532c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005330:	2200      	movs	r2, #0
 8005332:	2300      	movs	r3, #0
 8005334:	f7fb fbe0 	bl	8000af8 <__aeabi_dcmpeq>
 8005338:	2800      	cmp	r0, #0
 800533a:	d034      	beq.n	80053a6 <_printf_float+0x27a>
 800533c:	4a37      	ldr	r2, [pc, #220]	; (800541c <_printf_float+0x2f0>)
 800533e:	2301      	movs	r3, #1
 8005340:	4631      	mov	r1, r6
 8005342:	4628      	mov	r0, r5
 8005344:	47b8      	blx	r7
 8005346:	3001      	adds	r0, #1
 8005348:	f43f af51 	beq.w	80051ee <_printf_float+0xc2>
 800534c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005350:	429a      	cmp	r2, r3
 8005352:	db02      	blt.n	800535a <_printf_float+0x22e>
 8005354:	6823      	ldr	r3, [r4, #0]
 8005356:	07d8      	lsls	r0, r3, #31
 8005358:	d510      	bpl.n	800537c <_printf_float+0x250>
 800535a:	ee18 3a10 	vmov	r3, s16
 800535e:	4652      	mov	r2, sl
 8005360:	4631      	mov	r1, r6
 8005362:	4628      	mov	r0, r5
 8005364:	47b8      	blx	r7
 8005366:	3001      	adds	r0, #1
 8005368:	f43f af41 	beq.w	80051ee <_printf_float+0xc2>
 800536c:	f04f 0800 	mov.w	r8, #0
 8005370:	f104 091a 	add.w	r9, r4, #26
 8005374:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005376:	3b01      	subs	r3, #1
 8005378:	4543      	cmp	r3, r8
 800537a:	dc09      	bgt.n	8005390 <_printf_float+0x264>
 800537c:	6823      	ldr	r3, [r4, #0]
 800537e:	079b      	lsls	r3, r3, #30
 8005380:	f100 8105 	bmi.w	800558e <_printf_float+0x462>
 8005384:	68e0      	ldr	r0, [r4, #12]
 8005386:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005388:	4298      	cmp	r0, r3
 800538a:	bfb8      	it	lt
 800538c:	4618      	movlt	r0, r3
 800538e:	e730      	b.n	80051f2 <_printf_float+0xc6>
 8005390:	2301      	movs	r3, #1
 8005392:	464a      	mov	r2, r9
 8005394:	4631      	mov	r1, r6
 8005396:	4628      	mov	r0, r5
 8005398:	47b8      	blx	r7
 800539a:	3001      	adds	r0, #1
 800539c:	f43f af27 	beq.w	80051ee <_printf_float+0xc2>
 80053a0:	f108 0801 	add.w	r8, r8, #1
 80053a4:	e7e6      	b.n	8005374 <_printf_float+0x248>
 80053a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	dc39      	bgt.n	8005420 <_printf_float+0x2f4>
 80053ac:	4a1b      	ldr	r2, [pc, #108]	; (800541c <_printf_float+0x2f0>)
 80053ae:	2301      	movs	r3, #1
 80053b0:	4631      	mov	r1, r6
 80053b2:	4628      	mov	r0, r5
 80053b4:	47b8      	blx	r7
 80053b6:	3001      	adds	r0, #1
 80053b8:	f43f af19 	beq.w	80051ee <_printf_float+0xc2>
 80053bc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80053c0:	4313      	orrs	r3, r2
 80053c2:	d102      	bne.n	80053ca <_printf_float+0x29e>
 80053c4:	6823      	ldr	r3, [r4, #0]
 80053c6:	07d9      	lsls	r1, r3, #31
 80053c8:	d5d8      	bpl.n	800537c <_printf_float+0x250>
 80053ca:	ee18 3a10 	vmov	r3, s16
 80053ce:	4652      	mov	r2, sl
 80053d0:	4631      	mov	r1, r6
 80053d2:	4628      	mov	r0, r5
 80053d4:	47b8      	blx	r7
 80053d6:	3001      	adds	r0, #1
 80053d8:	f43f af09 	beq.w	80051ee <_printf_float+0xc2>
 80053dc:	f04f 0900 	mov.w	r9, #0
 80053e0:	f104 0a1a 	add.w	sl, r4, #26
 80053e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80053e6:	425b      	negs	r3, r3
 80053e8:	454b      	cmp	r3, r9
 80053ea:	dc01      	bgt.n	80053f0 <_printf_float+0x2c4>
 80053ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80053ee:	e792      	b.n	8005316 <_printf_float+0x1ea>
 80053f0:	2301      	movs	r3, #1
 80053f2:	4652      	mov	r2, sl
 80053f4:	4631      	mov	r1, r6
 80053f6:	4628      	mov	r0, r5
 80053f8:	47b8      	blx	r7
 80053fa:	3001      	adds	r0, #1
 80053fc:	f43f aef7 	beq.w	80051ee <_printf_float+0xc2>
 8005400:	f109 0901 	add.w	r9, r9, #1
 8005404:	e7ee      	b.n	80053e4 <_printf_float+0x2b8>
 8005406:	bf00      	nop
 8005408:	7fefffff 	.word	0x7fefffff
 800540c:	0800baf0 	.word	0x0800baf0
 8005410:	0800baf4 	.word	0x0800baf4
 8005414:	0800bafc 	.word	0x0800bafc
 8005418:	0800baf8 	.word	0x0800baf8
 800541c:	0800bef1 	.word	0x0800bef1
 8005420:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005422:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005424:	429a      	cmp	r2, r3
 8005426:	bfa8      	it	ge
 8005428:	461a      	movge	r2, r3
 800542a:	2a00      	cmp	r2, #0
 800542c:	4691      	mov	r9, r2
 800542e:	dc37      	bgt.n	80054a0 <_printf_float+0x374>
 8005430:	f04f 0b00 	mov.w	fp, #0
 8005434:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005438:	f104 021a 	add.w	r2, r4, #26
 800543c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800543e:	9305      	str	r3, [sp, #20]
 8005440:	eba3 0309 	sub.w	r3, r3, r9
 8005444:	455b      	cmp	r3, fp
 8005446:	dc33      	bgt.n	80054b0 <_printf_float+0x384>
 8005448:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800544c:	429a      	cmp	r2, r3
 800544e:	db3b      	blt.n	80054c8 <_printf_float+0x39c>
 8005450:	6823      	ldr	r3, [r4, #0]
 8005452:	07da      	lsls	r2, r3, #31
 8005454:	d438      	bmi.n	80054c8 <_printf_float+0x39c>
 8005456:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005458:	9a05      	ldr	r2, [sp, #20]
 800545a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800545c:	1a9a      	subs	r2, r3, r2
 800545e:	eba3 0901 	sub.w	r9, r3, r1
 8005462:	4591      	cmp	r9, r2
 8005464:	bfa8      	it	ge
 8005466:	4691      	movge	r9, r2
 8005468:	f1b9 0f00 	cmp.w	r9, #0
 800546c:	dc35      	bgt.n	80054da <_printf_float+0x3ae>
 800546e:	f04f 0800 	mov.w	r8, #0
 8005472:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005476:	f104 0a1a 	add.w	sl, r4, #26
 800547a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800547e:	1a9b      	subs	r3, r3, r2
 8005480:	eba3 0309 	sub.w	r3, r3, r9
 8005484:	4543      	cmp	r3, r8
 8005486:	f77f af79 	ble.w	800537c <_printf_float+0x250>
 800548a:	2301      	movs	r3, #1
 800548c:	4652      	mov	r2, sl
 800548e:	4631      	mov	r1, r6
 8005490:	4628      	mov	r0, r5
 8005492:	47b8      	blx	r7
 8005494:	3001      	adds	r0, #1
 8005496:	f43f aeaa 	beq.w	80051ee <_printf_float+0xc2>
 800549a:	f108 0801 	add.w	r8, r8, #1
 800549e:	e7ec      	b.n	800547a <_printf_float+0x34e>
 80054a0:	4613      	mov	r3, r2
 80054a2:	4631      	mov	r1, r6
 80054a4:	4642      	mov	r2, r8
 80054a6:	4628      	mov	r0, r5
 80054a8:	47b8      	blx	r7
 80054aa:	3001      	adds	r0, #1
 80054ac:	d1c0      	bne.n	8005430 <_printf_float+0x304>
 80054ae:	e69e      	b.n	80051ee <_printf_float+0xc2>
 80054b0:	2301      	movs	r3, #1
 80054b2:	4631      	mov	r1, r6
 80054b4:	4628      	mov	r0, r5
 80054b6:	9205      	str	r2, [sp, #20]
 80054b8:	47b8      	blx	r7
 80054ba:	3001      	adds	r0, #1
 80054bc:	f43f ae97 	beq.w	80051ee <_printf_float+0xc2>
 80054c0:	9a05      	ldr	r2, [sp, #20]
 80054c2:	f10b 0b01 	add.w	fp, fp, #1
 80054c6:	e7b9      	b.n	800543c <_printf_float+0x310>
 80054c8:	ee18 3a10 	vmov	r3, s16
 80054cc:	4652      	mov	r2, sl
 80054ce:	4631      	mov	r1, r6
 80054d0:	4628      	mov	r0, r5
 80054d2:	47b8      	blx	r7
 80054d4:	3001      	adds	r0, #1
 80054d6:	d1be      	bne.n	8005456 <_printf_float+0x32a>
 80054d8:	e689      	b.n	80051ee <_printf_float+0xc2>
 80054da:	9a05      	ldr	r2, [sp, #20]
 80054dc:	464b      	mov	r3, r9
 80054de:	4442      	add	r2, r8
 80054e0:	4631      	mov	r1, r6
 80054e2:	4628      	mov	r0, r5
 80054e4:	47b8      	blx	r7
 80054e6:	3001      	adds	r0, #1
 80054e8:	d1c1      	bne.n	800546e <_printf_float+0x342>
 80054ea:	e680      	b.n	80051ee <_printf_float+0xc2>
 80054ec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80054ee:	2a01      	cmp	r2, #1
 80054f0:	dc01      	bgt.n	80054f6 <_printf_float+0x3ca>
 80054f2:	07db      	lsls	r3, r3, #31
 80054f4:	d538      	bpl.n	8005568 <_printf_float+0x43c>
 80054f6:	2301      	movs	r3, #1
 80054f8:	4642      	mov	r2, r8
 80054fa:	4631      	mov	r1, r6
 80054fc:	4628      	mov	r0, r5
 80054fe:	47b8      	blx	r7
 8005500:	3001      	adds	r0, #1
 8005502:	f43f ae74 	beq.w	80051ee <_printf_float+0xc2>
 8005506:	ee18 3a10 	vmov	r3, s16
 800550a:	4652      	mov	r2, sl
 800550c:	4631      	mov	r1, r6
 800550e:	4628      	mov	r0, r5
 8005510:	47b8      	blx	r7
 8005512:	3001      	adds	r0, #1
 8005514:	f43f ae6b 	beq.w	80051ee <_printf_float+0xc2>
 8005518:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800551c:	2200      	movs	r2, #0
 800551e:	2300      	movs	r3, #0
 8005520:	f7fb faea 	bl	8000af8 <__aeabi_dcmpeq>
 8005524:	b9d8      	cbnz	r0, 800555e <_printf_float+0x432>
 8005526:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005528:	f108 0201 	add.w	r2, r8, #1
 800552c:	3b01      	subs	r3, #1
 800552e:	4631      	mov	r1, r6
 8005530:	4628      	mov	r0, r5
 8005532:	47b8      	blx	r7
 8005534:	3001      	adds	r0, #1
 8005536:	d10e      	bne.n	8005556 <_printf_float+0x42a>
 8005538:	e659      	b.n	80051ee <_printf_float+0xc2>
 800553a:	2301      	movs	r3, #1
 800553c:	4652      	mov	r2, sl
 800553e:	4631      	mov	r1, r6
 8005540:	4628      	mov	r0, r5
 8005542:	47b8      	blx	r7
 8005544:	3001      	adds	r0, #1
 8005546:	f43f ae52 	beq.w	80051ee <_printf_float+0xc2>
 800554a:	f108 0801 	add.w	r8, r8, #1
 800554e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005550:	3b01      	subs	r3, #1
 8005552:	4543      	cmp	r3, r8
 8005554:	dcf1      	bgt.n	800553a <_printf_float+0x40e>
 8005556:	464b      	mov	r3, r9
 8005558:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800555c:	e6dc      	b.n	8005318 <_printf_float+0x1ec>
 800555e:	f04f 0800 	mov.w	r8, #0
 8005562:	f104 0a1a 	add.w	sl, r4, #26
 8005566:	e7f2      	b.n	800554e <_printf_float+0x422>
 8005568:	2301      	movs	r3, #1
 800556a:	4642      	mov	r2, r8
 800556c:	e7df      	b.n	800552e <_printf_float+0x402>
 800556e:	2301      	movs	r3, #1
 8005570:	464a      	mov	r2, r9
 8005572:	4631      	mov	r1, r6
 8005574:	4628      	mov	r0, r5
 8005576:	47b8      	blx	r7
 8005578:	3001      	adds	r0, #1
 800557a:	f43f ae38 	beq.w	80051ee <_printf_float+0xc2>
 800557e:	f108 0801 	add.w	r8, r8, #1
 8005582:	68e3      	ldr	r3, [r4, #12]
 8005584:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005586:	1a5b      	subs	r3, r3, r1
 8005588:	4543      	cmp	r3, r8
 800558a:	dcf0      	bgt.n	800556e <_printf_float+0x442>
 800558c:	e6fa      	b.n	8005384 <_printf_float+0x258>
 800558e:	f04f 0800 	mov.w	r8, #0
 8005592:	f104 0919 	add.w	r9, r4, #25
 8005596:	e7f4      	b.n	8005582 <_printf_float+0x456>

08005598 <_printf_common>:
 8005598:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800559c:	4616      	mov	r6, r2
 800559e:	4699      	mov	r9, r3
 80055a0:	688a      	ldr	r2, [r1, #8]
 80055a2:	690b      	ldr	r3, [r1, #16]
 80055a4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80055a8:	4293      	cmp	r3, r2
 80055aa:	bfb8      	it	lt
 80055ac:	4613      	movlt	r3, r2
 80055ae:	6033      	str	r3, [r6, #0]
 80055b0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80055b4:	4607      	mov	r7, r0
 80055b6:	460c      	mov	r4, r1
 80055b8:	b10a      	cbz	r2, 80055be <_printf_common+0x26>
 80055ba:	3301      	adds	r3, #1
 80055bc:	6033      	str	r3, [r6, #0]
 80055be:	6823      	ldr	r3, [r4, #0]
 80055c0:	0699      	lsls	r1, r3, #26
 80055c2:	bf42      	ittt	mi
 80055c4:	6833      	ldrmi	r3, [r6, #0]
 80055c6:	3302      	addmi	r3, #2
 80055c8:	6033      	strmi	r3, [r6, #0]
 80055ca:	6825      	ldr	r5, [r4, #0]
 80055cc:	f015 0506 	ands.w	r5, r5, #6
 80055d0:	d106      	bne.n	80055e0 <_printf_common+0x48>
 80055d2:	f104 0a19 	add.w	sl, r4, #25
 80055d6:	68e3      	ldr	r3, [r4, #12]
 80055d8:	6832      	ldr	r2, [r6, #0]
 80055da:	1a9b      	subs	r3, r3, r2
 80055dc:	42ab      	cmp	r3, r5
 80055de:	dc26      	bgt.n	800562e <_printf_common+0x96>
 80055e0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80055e4:	1e13      	subs	r3, r2, #0
 80055e6:	6822      	ldr	r2, [r4, #0]
 80055e8:	bf18      	it	ne
 80055ea:	2301      	movne	r3, #1
 80055ec:	0692      	lsls	r2, r2, #26
 80055ee:	d42b      	bmi.n	8005648 <_printf_common+0xb0>
 80055f0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80055f4:	4649      	mov	r1, r9
 80055f6:	4638      	mov	r0, r7
 80055f8:	47c0      	blx	r8
 80055fa:	3001      	adds	r0, #1
 80055fc:	d01e      	beq.n	800563c <_printf_common+0xa4>
 80055fe:	6823      	ldr	r3, [r4, #0]
 8005600:	68e5      	ldr	r5, [r4, #12]
 8005602:	6832      	ldr	r2, [r6, #0]
 8005604:	f003 0306 	and.w	r3, r3, #6
 8005608:	2b04      	cmp	r3, #4
 800560a:	bf08      	it	eq
 800560c:	1aad      	subeq	r5, r5, r2
 800560e:	68a3      	ldr	r3, [r4, #8]
 8005610:	6922      	ldr	r2, [r4, #16]
 8005612:	bf0c      	ite	eq
 8005614:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005618:	2500      	movne	r5, #0
 800561a:	4293      	cmp	r3, r2
 800561c:	bfc4      	itt	gt
 800561e:	1a9b      	subgt	r3, r3, r2
 8005620:	18ed      	addgt	r5, r5, r3
 8005622:	2600      	movs	r6, #0
 8005624:	341a      	adds	r4, #26
 8005626:	42b5      	cmp	r5, r6
 8005628:	d11a      	bne.n	8005660 <_printf_common+0xc8>
 800562a:	2000      	movs	r0, #0
 800562c:	e008      	b.n	8005640 <_printf_common+0xa8>
 800562e:	2301      	movs	r3, #1
 8005630:	4652      	mov	r2, sl
 8005632:	4649      	mov	r1, r9
 8005634:	4638      	mov	r0, r7
 8005636:	47c0      	blx	r8
 8005638:	3001      	adds	r0, #1
 800563a:	d103      	bne.n	8005644 <_printf_common+0xac>
 800563c:	f04f 30ff 	mov.w	r0, #4294967295
 8005640:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005644:	3501      	adds	r5, #1
 8005646:	e7c6      	b.n	80055d6 <_printf_common+0x3e>
 8005648:	18e1      	adds	r1, r4, r3
 800564a:	1c5a      	adds	r2, r3, #1
 800564c:	2030      	movs	r0, #48	; 0x30
 800564e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005652:	4422      	add	r2, r4
 8005654:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005658:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800565c:	3302      	adds	r3, #2
 800565e:	e7c7      	b.n	80055f0 <_printf_common+0x58>
 8005660:	2301      	movs	r3, #1
 8005662:	4622      	mov	r2, r4
 8005664:	4649      	mov	r1, r9
 8005666:	4638      	mov	r0, r7
 8005668:	47c0      	blx	r8
 800566a:	3001      	adds	r0, #1
 800566c:	d0e6      	beq.n	800563c <_printf_common+0xa4>
 800566e:	3601      	adds	r6, #1
 8005670:	e7d9      	b.n	8005626 <_printf_common+0x8e>
	...

08005674 <_printf_i>:
 8005674:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005678:	7e0f      	ldrb	r7, [r1, #24]
 800567a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800567c:	2f78      	cmp	r7, #120	; 0x78
 800567e:	4691      	mov	r9, r2
 8005680:	4680      	mov	r8, r0
 8005682:	460c      	mov	r4, r1
 8005684:	469a      	mov	sl, r3
 8005686:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800568a:	d807      	bhi.n	800569c <_printf_i+0x28>
 800568c:	2f62      	cmp	r7, #98	; 0x62
 800568e:	d80a      	bhi.n	80056a6 <_printf_i+0x32>
 8005690:	2f00      	cmp	r7, #0
 8005692:	f000 80d8 	beq.w	8005846 <_printf_i+0x1d2>
 8005696:	2f58      	cmp	r7, #88	; 0x58
 8005698:	f000 80a3 	beq.w	80057e2 <_printf_i+0x16e>
 800569c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80056a0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80056a4:	e03a      	b.n	800571c <_printf_i+0xa8>
 80056a6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80056aa:	2b15      	cmp	r3, #21
 80056ac:	d8f6      	bhi.n	800569c <_printf_i+0x28>
 80056ae:	a101      	add	r1, pc, #4	; (adr r1, 80056b4 <_printf_i+0x40>)
 80056b0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80056b4:	0800570d 	.word	0x0800570d
 80056b8:	08005721 	.word	0x08005721
 80056bc:	0800569d 	.word	0x0800569d
 80056c0:	0800569d 	.word	0x0800569d
 80056c4:	0800569d 	.word	0x0800569d
 80056c8:	0800569d 	.word	0x0800569d
 80056cc:	08005721 	.word	0x08005721
 80056d0:	0800569d 	.word	0x0800569d
 80056d4:	0800569d 	.word	0x0800569d
 80056d8:	0800569d 	.word	0x0800569d
 80056dc:	0800569d 	.word	0x0800569d
 80056e0:	0800582d 	.word	0x0800582d
 80056e4:	08005751 	.word	0x08005751
 80056e8:	0800580f 	.word	0x0800580f
 80056ec:	0800569d 	.word	0x0800569d
 80056f0:	0800569d 	.word	0x0800569d
 80056f4:	0800584f 	.word	0x0800584f
 80056f8:	0800569d 	.word	0x0800569d
 80056fc:	08005751 	.word	0x08005751
 8005700:	0800569d 	.word	0x0800569d
 8005704:	0800569d 	.word	0x0800569d
 8005708:	08005817 	.word	0x08005817
 800570c:	682b      	ldr	r3, [r5, #0]
 800570e:	1d1a      	adds	r2, r3, #4
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	602a      	str	r2, [r5, #0]
 8005714:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005718:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800571c:	2301      	movs	r3, #1
 800571e:	e0a3      	b.n	8005868 <_printf_i+0x1f4>
 8005720:	6820      	ldr	r0, [r4, #0]
 8005722:	6829      	ldr	r1, [r5, #0]
 8005724:	0606      	lsls	r6, r0, #24
 8005726:	f101 0304 	add.w	r3, r1, #4
 800572a:	d50a      	bpl.n	8005742 <_printf_i+0xce>
 800572c:	680e      	ldr	r6, [r1, #0]
 800572e:	602b      	str	r3, [r5, #0]
 8005730:	2e00      	cmp	r6, #0
 8005732:	da03      	bge.n	800573c <_printf_i+0xc8>
 8005734:	232d      	movs	r3, #45	; 0x2d
 8005736:	4276      	negs	r6, r6
 8005738:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800573c:	485e      	ldr	r0, [pc, #376]	; (80058b8 <_printf_i+0x244>)
 800573e:	230a      	movs	r3, #10
 8005740:	e019      	b.n	8005776 <_printf_i+0x102>
 8005742:	680e      	ldr	r6, [r1, #0]
 8005744:	602b      	str	r3, [r5, #0]
 8005746:	f010 0f40 	tst.w	r0, #64	; 0x40
 800574a:	bf18      	it	ne
 800574c:	b236      	sxthne	r6, r6
 800574e:	e7ef      	b.n	8005730 <_printf_i+0xbc>
 8005750:	682b      	ldr	r3, [r5, #0]
 8005752:	6820      	ldr	r0, [r4, #0]
 8005754:	1d19      	adds	r1, r3, #4
 8005756:	6029      	str	r1, [r5, #0]
 8005758:	0601      	lsls	r1, r0, #24
 800575a:	d501      	bpl.n	8005760 <_printf_i+0xec>
 800575c:	681e      	ldr	r6, [r3, #0]
 800575e:	e002      	b.n	8005766 <_printf_i+0xf2>
 8005760:	0646      	lsls	r6, r0, #25
 8005762:	d5fb      	bpl.n	800575c <_printf_i+0xe8>
 8005764:	881e      	ldrh	r6, [r3, #0]
 8005766:	4854      	ldr	r0, [pc, #336]	; (80058b8 <_printf_i+0x244>)
 8005768:	2f6f      	cmp	r7, #111	; 0x6f
 800576a:	bf0c      	ite	eq
 800576c:	2308      	moveq	r3, #8
 800576e:	230a      	movne	r3, #10
 8005770:	2100      	movs	r1, #0
 8005772:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005776:	6865      	ldr	r5, [r4, #4]
 8005778:	60a5      	str	r5, [r4, #8]
 800577a:	2d00      	cmp	r5, #0
 800577c:	bfa2      	ittt	ge
 800577e:	6821      	ldrge	r1, [r4, #0]
 8005780:	f021 0104 	bicge.w	r1, r1, #4
 8005784:	6021      	strge	r1, [r4, #0]
 8005786:	b90e      	cbnz	r6, 800578c <_printf_i+0x118>
 8005788:	2d00      	cmp	r5, #0
 800578a:	d04d      	beq.n	8005828 <_printf_i+0x1b4>
 800578c:	4615      	mov	r5, r2
 800578e:	fbb6 f1f3 	udiv	r1, r6, r3
 8005792:	fb03 6711 	mls	r7, r3, r1, r6
 8005796:	5dc7      	ldrb	r7, [r0, r7]
 8005798:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800579c:	4637      	mov	r7, r6
 800579e:	42bb      	cmp	r3, r7
 80057a0:	460e      	mov	r6, r1
 80057a2:	d9f4      	bls.n	800578e <_printf_i+0x11a>
 80057a4:	2b08      	cmp	r3, #8
 80057a6:	d10b      	bne.n	80057c0 <_printf_i+0x14c>
 80057a8:	6823      	ldr	r3, [r4, #0]
 80057aa:	07de      	lsls	r6, r3, #31
 80057ac:	d508      	bpl.n	80057c0 <_printf_i+0x14c>
 80057ae:	6923      	ldr	r3, [r4, #16]
 80057b0:	6861      	ldr	r1, [r4, #4]
 80057b2:	4299      	cmp	r1, r3
 80057b4:	bfde      	ittt	le
 80057b6:	2330      	movle	r3, #48	; 0x30
 80057b8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80057bc:	f105 35ff 	addle.w	r5, r5, #4294967295
 80057c0:	1b52      	subs	r2, r2, r5
 80057c2:	6122      	str	r2, [r4, #16]
 80057c4:	f8cd a000 	str.w	sl, [sp]
 80057c8:	464b      	mov	r3, r9
 80057ca:	aa03      	add	r2, sp, #12
 80057cc:	4621      	mov	r1, r4
 80057ce:	4640      	mov	r0, r8
 80057d0:	f7ff fee2 	bl	8005598 <_printf_common>
 80057d4:	3001      	adds	r0, #1
 80057d6:	d14c      	bne.n	8005872 <_printf_i+0x1fe>
 80057d8:	f04f 30ff 	mov.w	r0, #4294967295
 80057dc:	b004      	add	sp, #16
 80057de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80057e2:	4835      	ldr	r0, [pc, #212]	; (80058b8 <_printf_i+0x244>)
 80057e4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80057e8:	6829      	ldr	r1, [r5, #0]
 80057ea:	6823      	ldr	r3, [r4, #0]
 80057ec:	f851 6b04 	ldr.w	r6, [r1], #4
 80057f0:	6029      	str	r1, [r5, #0]
 80057f2:	061d      	lsls	r5, r3, #24
 80057f4:	d514      	bpl.n	8005820 <_printf_i+0x1ac>
 80057f6:	07df      	lsls	r7, r3, #31
 80057f8:	bf44      	itt	mi
 80057fa:	f043 0320 	orrmi.w	r3, r3, #32
 80057fe:	6023      	strmi	r3, [r4, #0]
 8005800:	b91e      	cbnz	r6, 800580a <_printf_i+0x196>
 8005802:	6823      	ldr	r3, [r4, #0]
 8005804:	f023 0320 	bic.w	r3, r3, #32
 8005808:	6023      	str	r3, [r4, #0]
 800580a:	2310      	movs	r3, #16
 800580c:	e7b0      	b.n	8005770 <_printf_i+0xfc>
 800580e:	6823      	ldr	r3, [r4, #0]
 8005810:	f043 0320 	orr.w	r3, r3, #32
 8005814:	6023      	str	r3, [r4, #0]
 8005816:	2378      	movs	r3, #120	; 0x78
 8005818:	4828      	ldr	r0, [pc, #160]	; (80058bc <_printf_i+0x248>)
 800581a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800581e:	e7e3      	b.n	80057e8 <_printf_i+0x174>
 8005820:	0659      	lsls	r1, r3, #25
 8005822:	bf48      	it	mi
 8005824:	b2b6      	uxthmi	r6, r6
 8005826:	e7e6      	b.n	80057f6 <_printf_i+0x182>
 8005828:	4615      	mov	r5, r2
 800582a:	e7bb      	b.n	80057a4 <_printf_i+0x130>
 800582c:	682b      	ldr	r3, [r5, #0]
 800582e:	6826      	ldr	r6, [r4, #0]
 8005830:	6961      	ldr	r1, [r4, #20]
 8005832:	1d18      	adds	r0, r3, #4
 8005834:	6028      	str	r0, [r5, #0]
 8005836:	0635      	lsls	r5, r6, #24
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	d501      	bpl.n	8005840 <_printf_i+0x1cc>
 800583c:	6019      	str	r1, [r3, #0]
 800583e:	e002      	b.n	8005846 <_printf_i+0x1d2>
 8005840:	0670      	lsls	r0, r6, #25
 8005842:	d5fb      	bpl.n	800583c <_printf_i+0x1c8>
 8005844:	8019      	strh	r1, [r3, #0]
 8005846:	2300      	movs	r3, #0
 8005848:	6123      	str	r3, [r4, #16]
 800584a:	4615      	mov	r5, r2
 800584c:	e7ba      	b.n	80057c4 <_printf_i+0x150>
 800584e:	682b      	ldr	r3, [r5, #0]
 8005850:	1d1a      	adds	r2, r3, #4
 8005852:	602a      	str	r2, [r5, #0]
 8005854:	681d      	ldr	r5, [r3, #0]
 8005856:	6862      	ldr	r2, [r4, #4]
 8005858:	2100      	movs	r1, #0
 800585a:	4628      	mov	r0, r5
 800585c:	f7fa fcd8 	bl	8000210 <memchr>
 8005860:	b108      	cbz	r0, 8005866 <_printf_i+0x1f2>
 8005862:	1b40      	subs	r0, r0, r5
 8005864:	6060      	str	r0, [r4, #4]
 8005866:	6863      	ldr	r3, [r4, #4]
 8005868:	6123      	str	r3, [r4, #16]
 800586a:	2300      	movs	r3, #0
 800586c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005870:	e7a8      	b.n	80057c4 <_printf_i+0x150>
 8005872:	6923      	ldr	r3, [r4, #16]
 8005874:	462a      	mov	r2, r5
 8005876:	4649      	mov	r1, r9
 8005878:	4640      	mov	r0, r8
 800587a:	47d0      	blx	sl
 800587c:	3001      	adds	r0, #1
 800587e:	d0ab      	beq.n	80057d8 <_printf_i+0x164>
 8005880:	6823      	ldr	r3, [r4, #0]
 8005882:	079b      	lsls	r3, r3, #30
 8005884:	d413      	bmi.n	80058ae <_printf_i+0x23a>
 8005886:	68e0      	ldr	r0, [r4, #12]
 8005888:	9b03      	ldr	r3, [sp, #12]
 800588a:	4298      	cmp	r0, r3
 800588c:	bfb8      	it	lt
 800588e:	4618      	movlt	r0, r3
 8005890:	e7a4      	b.n	80057dc <_printf_i+0x168>
 8005892:	2301      	movs	r3, #1
 8005894:	4632      	mov	r2, r6
 8005896:	4649      	mov	r1, r9
 8005898:	4640      	mov	r0, r8
 800589a:	47d0      	blx	sl
 800589c:	3001      	adds	r0, #1
 800589e:	d09b      	beq.n	80057d8 <_printf_i+0x164>
 80058a0:	3501      	adds	r5, #1
 80058a2:	68e3      	ldr	r3, [r4, #12]
 80058a4:	9903      	ldr	r1, [sp, #12]
 80058a6:	1a5b      	subs	r3, r3, r1
 80058a8:	42ab      	cmp	r3, r5
 80058aa:	dcf2      	bgt.n	8005892 <_printf_i+0x21e>
 80058ac:	e7eb      	b.n	8005886 <_printf_i+0x212>
 80058ae:	2500      	movs	r5, #0
 80058b0:	f104 0619 	add.w	r6, r4, #25
 80058b4:	e7f5      	b.n	80058a2 <_printf_i+0x22e>
 80058b6:	bf00      	nop
 80058b8:	0800bb00 	.word	0x0800bb00
 80058bc:	0800bb11 	.word	0x0800bb11

080058c0 <_scanf_float>:
 80058c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80058c4:	b087      	sub	sp, #28
 80058c6:	4617      	mov	r7, r2
 80058c8:	9303      	str	r3, [sp, #12]
 80058ca:	688b      	ldr	r3, [r1, #8]
 80058cc:	1e5a      	subs	r2, r3, #1
 80058ce:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80058d2:	bf83      	ittte	hi
 80058d4:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80058d8:	195b      	addhi	r3, r3, r5
 80058da:	9302      	strhi	r3, [sp, #8]
 80058dc:	2300      	movls	r3, #0
 80058de:	bf86      	itte	hi
 80058e0:	f240 135d 	movwhi	r3, #349	; 0x15d
 80058e4:	608b      	strhi	r3, [r1, #8]
 80058e6:	9302      	strls	r3, [sp, #8]
 80058e8:	680b      	ldr	r3, [r1, #0]
 80058ea:	468b      	mov	fp, r1
 80058ec:	2500      	movs	r5, #0
 80058ee:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80058f2:	f84b 3b1c 	str.w	r3, [fp], #28
 80058f6:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80058fa:	4680      	mov	r8, r0
 80058fc:	460c      	mov	r4, r1
 80058fe:	465e      	mov	r6, fp
 8005900:	46aa      	mov	sl, r5
 8005902:	46a9      	mov	r9, r5
 8005904:	9501      	str	r5, [sp, #4]
 8005906:	68a2      	ldr	r2, [r4, #8]
 8005908:	b152      	cbz	r2, 8005920 <_scanf_float+0x60>
 800590a:	683b      	ldr	r3, [r7, #0]
 800590c:	781b      	ldrb	r3, [r3, #0]
 800590e:	2b4e      	cmp	r3, #78	; 0x4e
 8005910:	d864      	bhi.n	80059dc <_scanf_float+0x11c>
 8005912:	2b40      	cmp	r3, #64	; 0x40
 8005914:	d83c      	bhi.n	8005990 <_scanf_float+0xd0>
 8005916:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800591a:	b2c8      	uxtb	r0, r1
 800591c:	280e      	cmp	r0, #14
 800591e:	d93a      	bls.n	8005996 <_scanf_float+0xd6>
 8005920:	f1b9 0f00 	cmp.w	r9, #0
 8005924:	d003      	beq.n	800592e <_scanf_float+0x6e>
 8005926:	6823      	ldr	r3, [r4, #0]
 8005928:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800592c:	6023      	str	r3, [r4, #0]
 800592e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005932:	f1ba 0f01 	cmp.w	sl, #1
 8005936:	f200 8113 	bhi.w	8005b60 <_scanf_float+0x2a0>
 800593a:	455e      	cmp	r6, fp
 800593c:	f200 8105 	bhi.w	8005b4a <_scanf_float+0x28a>
 8005940:	2501      	movs	r5, #1
 8005942:	4628      	mov	r0, r5
 8005944:	b007      	add	sp, #28
 8005946:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800594a:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800594e:	2a0d      	cmp	r2, #13
 8005950:	d8e6      	bhi.n	8005920 <_scanf_float+0x60>
 8005952:	a101      	add	r1, pc, #4	; (adr r1, 8005958 <_scanf_float+0x98>)
 8005954:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8005958:	08005a97 	.word	0x08005a97
 800595c:	08005921 	.word	0x08005921
 8005960:	08005921 	.word	0x08005921
 8005964:	08005921 	.word	0x08005921
 8005968:	08005af7 	.word	0x08005af7
 800596c:	08005acf 	.word	0x08005acf
 8005970:	08005921 	.word	0x08005921
 8005974:	08005921 	.word	0x08005921
 8005978:	08005aa5 	.word	0x08005aa5
 800597c:	08005921 	.word	0x08005921
 8005980:	08005921 	.word	0x08005921
 8005984:	08005921 	.word	0x08005921
 8005988:	08005921 	.word	0x08005921
 800598c:	08005a5d 	.word	0x08005a5d
 8005990:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8005994:	e7db      	b.n	800594e <_scanf_float+0x8e>
 8005996:	290e      	cmp	r1, #14
 8005998:	d8c2      	bhi.n	8005920 <_scanf_float+0x60>
 800599a:	a001      	add	r0, pc, #4	; (adr r0, 80059a0 <_scanf_float+0xe0>)
 800599c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80059a0:	08005a4f 	.word	0x08005a4f
 80059a4:	08005921 	.word	0x08005921
 80059a8:	08005a4f 	.word	0x08005a4f
 80059ac:	08005ae3 	.word	0x08005ae3
 80059b0:	08005921 	.word	0x08005921
 80059b4:	080059fd 	.word	0x080059fd
 80059b8:	08005a39 	.word	0x08005a39
 80059bc:	08005a39 	.word	0x08005a39
 80059c0:	08005a39 	.word	0x08005a39
 80059c4:	08005a39 	.word	0x08005a39
 80059c8:	08005a39 	.word	0x08005a39
 80059cc:	08005a39 	.word	0x08005a39
 80059d0:	08005a39 	.word	0x08005a39
 80059d4:	08005a39 	.word	0x08005a39
 80059d8:	08005a39 	.word	0x08005a39
 80059dc:	2b6e      	cmp	r3, #110	; 0x6e
 80059de:	d809      	bhi.n	80059f4 <_scanf_float+0x134>
 80059e0:	2b60      	cmp	r3, #96	; 0x60
 80059e2:	d8b2      	bhi.n	800594a <_scanf_float+0x8a>
 80059e4:	2b54      	cmp	r3, #84	; 0x54
 80059e6:	d077      	beq.n	8005ad8 <_scanf_float+0x218>
 80059e8:	2b59      	cmp	r3, #89	; 0x59
 80059ea:	d199      	bne.n	8005920 <_scanf_float+0x60>
 80059ec:	2d07      	cmp	r5, #7
 80059ee:	d197      	bne.n	8005920 <_scanf_float+0x60>
 80059f0:	2508      	movs	r5, #8
 80059f2:	e029      	b.n	8005a48 <_scanf_float+0x188>
 80059f4:	2b74      	cmp	r3, #116	; 0x74
 80059f6:	d06f      	beq.n	8005ad8 <_scanf_float+0x218>
 80059f8:	2b79      	cmp	r3, #121	; 0x79
 80059fa:	e7f6      	b.n	80059ea <_scanf_float+0x12a>
 80059fc:	6821      	ldr	r1, [r4, #0]
 80059fe:	05c8      	lsls	r0, r1, #23
 8005a00:	d51a      	bpl.n	8005a38 <_scanf_float+0x178>
 8005a02:	9b02      	ldr	r3, [sp, #8]
 8005a04:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8005a08:	6021      	str	r1, [r4, #0]
 8005a0a:	f109 0901 	add.w	r9, r9, #1
 8005a0e:	b11b      	cbz	r3, 8005a18 <_scanf_float+0x158>
 8005a10:	3b01      	subs	r3, #1
 8005a12:	3201      	adds	r2, #1
 8005a14:	9302      	str	r3, [sp, #8]
 8005a16:	60a2      	str	r2, [r4, #8]
 8005a18:	68a3      	ldr	r3, [r4, #8]
 8005a1a:	3b01      	subs	r3, #1
 8005a1c:	60a3      	str	r3, [r4, #8]
 8005a1e:	6923      	ldr	r3, [r4, #16]
 8005a20:	3301      	adds	r3, #1
 8005a22:	6123      	str	r3, [r4, #16]
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	3b01      	subs	r3, #1
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	607b      	str	r3, [r7, #4]
 8005a2c:	f340 8084 	ble.w	8005b38 <_scanf_float+0x278>
 8005a30:	683b      	ldr	r3, [r7, #0]
 8005a32:	3301      	adds	r3, #1
 8005a34:	603b      	str	r3, [r7, #0]
 8005a36:	e766      	b.n	8005906 <_scanf_float+0x46>
 8005a38:	eb1a 0f05 	cmn.w	sl, r5
 8005a3c:	f47f af70 	bne.w	8005920 <_scanf_float+0x60>
 8005a40:	6822      	ldr	r2, [r4, #0]
 8005a42:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8005a46:	6022      	str	r2, [r4, #0]
 8005a48:	f806 3b01 	strb.w	r3, [r6], #1
 8005a4c:	e7e4      	b.n	8005a18 <_scanf_float+0x158>
 8005a4e:	6822      	ldr	r2, [r4, #0]
 8005a50:	0610      	lsls	r0, r2, #24
 8005a52:	f57f af65 	bpl.w	8005920 <_scanf_float+0x60>
 8005a56:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005a5a:	e7f4      	b.n	8005a46 <_scanf_float+0x186>
 8005a5c:	f1ba 0f00 	cmp.w	sl, #0
 8005a60:	d10e      	bne.n	8005a80 <_scanf_float+0x1c0>
 8005a62:	f1b9 0f00 	cmp.w	r9, #0
 8005a66:	d10e      	bne.n	8005a86 <_scanf_float+0x1c6>
 8005a68:	6822      	ldr	r2, [r4, #0]
 8005a6a:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8005a6e:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8005a72:	d108      	bne.n	8005a86 <_scanf_float+0x1c6>
 8005a74:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8005a78:	6022      	str	r2, [r4, #0]
 8005a7a:	f04f 0a01 	mov.w	sl, #1
 8005a7e:	e7e3      	b.n	8005a48 <_scanf_float+0x188>
 8005a80:	f1ba 0f02 	cmp.w	sl, #2
 8005a84:	d055      	beq.n	8005b32 <_scanf_float+0x272>
 8005a86:	2d01      	cmp	r5, #1
 8005a88:	d002      	beq.n	8005a90 <_scanf_float+0x1d0>
 8005a8a:	2d04      	cmp	r5, #4
 8005a8c:	f47f af48 	bne.w	8005920 <_scanf_float+0x60>
 8005a90:	3501      	adds	r5, #1
 8005a92:	b2ed      	uxtb	r5, r5
 8005a94:	e7d8      	b.n	8005a48 <_scanf_float+0x188>
 8005a96:	f1ba 0f01 	cmp.w	sl, #1
 8005a9a:	f47f af41 	bne.w	8005920 <_scanf_float+0x60>
 8005a9e:	f04f 0a02 	mov.w	sl, #2
 8005aa2:	e7d1      	b.n	8005a48 <_scanf_float+0x188>
 8005aa4:	b97d      	cbnz	r5, 8005ac6 <_scanf_float+0x206>
 8005aa6:	f1b9 0f00 	cmp.w	r9, #0
 8005aaa:	f47f af3c 	bne.w	8005926 <_scanf_float+0x66>
 8005aae:	6822      	ldr	r2, [r4, #0]
 8005ab0:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8005ab4:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8005ab8:	f47f af39 	bne.w	800592e <_scanf_float+0x6e>
 8005abc:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8005ac0:	6022      	str	r2, [r4, #0]
 8005ac2:	2501      	movs	r5, #1
 8005ac4:	e7c0      	b.n	8005a48 <_scanf_float+0x188>
 8005ac6:	2d03      	cmp	r5, #3
 8005ac8:	d0e2      	beq.n	8005a90 <_scanf_float+0x1d0>
 8005aca:	2d05      	cmp	r5, #5
 8005acc:	e7de      	b.n	8005a8c <_scanf_float+0x1cc>
 8005ace:	2d02      	cmp	r5, #2
 8005ad0:	f47f af26 	bne.w	8005920 <_scanf_float+0x60>
 8005ad4:	2503      	movs	r5, #3
 8005ad6:	e7b7      	b.n	8005a48 <_scanf_float+0x188>
 8005ad8:	2d06      	cmp	r5, #6
 8005ada:	f47f af21 	bne.w	8005920 <_scanf_float+0x60>
 8005ade:	2507      	movs	r5, #7
 8005ae0:	e7b2      	b.n	8005a48 <_scanf_float+0x188>
 8005ae2:	6822      	ldr	r2, [r4, #0]
 8005ae4:	0591      	lsls	r1, r2, #22
 8005ae6:	f57f af1b 	bpl.w	8005920 <_scanf_float+0x60>
 8005aea:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8005aee:	6022      	str	r2, [r4, #0]
 8005af0:	f8cd 9004 	str.w	r9, [sp, #4]
 8005af4:	e7a8      	b.n	8005a48 <_scanf_float+0x188>
 8005af6:	6822      	ldr	r2, [r4, #0]
 8005af8:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8005afc:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8005b00:	d006      	beq.n	8005b10 <_scanf_float+0x250>
 8005b02:	0550      	lsls	r0, r2, #21
 8005b04:	f57f af0c 	bpl.w	8005920 <_scanf_float+0x60>
 8005b08:	f1b9 0f00 	cmp.w	r9, #0
 8005b0c:	f43f af0f 	beq.w	800592e <_scanf_float+0x6e>
 8005b10:	0591      	lsls	r1, r2, #22
 8005b12:	bf58      	it	pl
 8005b14:	9901      	ldrpl	r1, [sp, #4]
 8005b16:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8005b1a:	bf58      	it	pl
 8005b1c:	eba9 0101 	subpl.w	r1, r9, r1
 8005b20:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8005b24:	bf58      	it	pl
 8005b26:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8005b2a:	6022      	str	r2, [r4, #0]
 8005b2c:	f04f 0900 	mov.w	r9, #0
 8005b30:	e78a      	b.n	8005a48 <_scanf_float+0x188>
 8005b32:	f04f 0a03 	mov.w	sl, #3
 8005b36:	e787      	b.n	8005a48 <_scanf_float+0x188>
 8005b38:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8005b3c:	4639      	mov	r1, r7
 8005b3e:	4640      	mov	r0, r8
 8005b40:	4798      	blx	r3
 8005b42:	2800      	cmp	r0, #0
 8005b44:	f43f aedf 	beq.w	8005906 <_scanf_float+0x46>
 8005b48:	e6ea      	b.n	8005920 <_scanf_float+0x60>
 8005b4a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005b4e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005b52:	463a      	mov	r2, r7
 8005b54:	4640      	mov	r0, r8
 8005b56:	4798      	blx	r3
 8005b58:	6923      	ldr	r3, [r4, #16]
 8005b5a:	3b01      	subs	r3, #1
 8005b5c:	6123      	str	r3, [r4, #16]
 8005b5e:	e6ec      	b.n	800593a <_scanf_float+0x7a>
 8005b60:	1e6b      	subs	r3, r5, #1
 8005b62:	2b06      	cmp	r3, #6
 8005b64:	d825      	bhi.n	8005bb2 <_scanf_float+0x2f2>
 8005b66:	2d02      	cmp	r5, #2
 8005b68:	d836      	bhi.n	8005bd8 <_scanf_float+0x318>
 8005b6a:	455e      	cmp	r6, fp
 8005b6c:	f67f aee8 	bls.w	8005940 <_scanf_float+0x80>
 8005b70:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005b74:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005b78:	463a      	mov	r2, r7
 8005b7a:	4640      	mov	r0, r8
 8005b7c:	4798      	blx	r3
 8005b7e:	6923      	ldr	r3, [r4, #16]
 8005b80:	3b01      	subs	r3, #1
 8005b82:	6123      	str	r3, [r4, #16]
 8005b84:	e7f1      	b.n	8005b6a <_scanf_float+0x2aa>
 8005b86:	9802      	ldr	r0, [sp, #8]
 8005b88:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005b8c:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8005b90:	9002      	str	r0, [sp, #8]
 8005b92:	463a      	mov	r2, r7
 8005b94:	4640      	mov	r0, r8
 8005b96:	4798      	blx	r3
 8005b98:	6923      	ldr	r3, [r4, #16]
 8005b9a:	3b01      	subs	r3, #1
 8005b9c:	6123      	str	r3, [r4, #16]
 8005b9e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005ba2:	fa5f fa8a 	uxtb.w	sl, sl
 8005ba6:	f1ba 0f02 	cmp.w	sl, #2
 8005baa:	d1ec      	bne.n	8005b86 <_scanf_float+0x2c6>
 8005bac:	3d03      	subs	r5, #3
 8005bae:	b2ed      	uxtb	r5, r5
 8005bb0:	1b76      	subs	r6, r6, r5
 8005bb2:	6823      	ldr	r3, [r4, #0]
 8005bb4:	05da      	lsls	r2, r3, #23
 8005bb6:	d52f      	bpl.n	8005c18 <_scanf_float+0x358>
 8005bb8:	055b      	lsls	r3, r3, #21
 8005bba:	d510      	bpl.n	8005bde <_scanf_float+0x31e>
 8005bbc:	455e      	cmp	r6, fp
 8005bbe:	f67f aebf 	bls.w	8005940 <_scanf_float+0x80>
 8005bc2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005bc6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005bca:	463a      	mov	r2, r7
 8005bcc:	4640      	mov	r0, r8
 8005bce:	4798      	blx	r3
 8005bd0:	6923      	ldr	r3, [r4, #16]
 8005bd2:	3b01      	subs	r3, #1
 8005bd4:	6123      	str	r3, [r4, #16]
 8005bd6:	e7f1      	b.n	8005bbc <_scanf_float+0x2fc>
 8005bd8:	46aa      	mov	sl, r5
 8005bda:	9602      	str	r6, [sp, #8]
 8005bdc:	e7df      	b.n	8005b9e <_scanf_float+0x2de>
 8005bde:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8005be2:	6923      	ldr	r3, [r4, #16]
 8005be4:	2965      	cmp	r1, #101	; 0x65
 8005be6:	f103 33ff 	add.w	r3, r3, #4294967295
 8005bea:	f106 35ff 	add.w	r5, r6, #4294967295
 8005bee:	6123      	str	r3, [r4, #16]
 8005bf0:	d00c      	beq.n	8005c0c <_scanf_float+0x34c>
 8005bf2:	2945      	cmp	r1, #69	; 0x45
 8005bf4:	d00a      	beq.n	8005c0c <_scanf_float+0x34c>
 8005bf6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005bfa:	463a      	mov	r2, r7
 8005bfc:	4640      	mov	r0, r8
 8005bfe:	4798      	blx	r3
 8005c00:	6923      	ldr	r3, [r4, #16]
 8005c02:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8005c06:	3b01      	subs	r3, #1
 8005c08:	1eb5      	subs	r5, r6, #2
 8005c0a:	6123      	str	r3, [r4, #16]
 8005c0c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005c10:	463a      	mov	r2, r7
 8005c12:	4640      	mov	r0, r8
 8005c14:	4798      	blx	r3
 8005c16:	462e      	mov	r6, r5
 8005c18:	6825      	ldr	r5, [r4, #0]
 8005c1a:	f015 0510 	ands.w	r5, r5, #16
 8005c1e:	d159      	bne.n	8005cd4 <_scanf_float+0x414>
 8005c20:	7035      	strb	r5, [r6, #0]
 8005c22:	6823      	ldr	r3, [r4, #0]
 8005c24:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005c28:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005c2c:	d11b      	bne.n	8005c66 <_scanf_float+0x3a6>
 8005c2e:	9b01      	ldr	r3, [sp, #4]
 8005c30:	454b      	cmp	r3, r9
 8005c32:	eba3 0209 	sub.w	r2, r3, r9
 8005c36:	d123      	bne.n	8005c80 <_scanf_float+0x3c0>
 8005c38:	2200      	movs	r2, #0
 8005c3a:	4659      	mov	r1, fp
 8005c3c:	4640      	mov	r0, r8
 8005c3e:	f000 ff09 	bl	8006a54 <_strtod_r>
 8005c42:	6822      	ldr	r2, [r4, #0]
 8005c44:	9b03      	ldr	r3, [sp, #12]
 8005c46:	f012 0f02 	tst.w	r2, #2
 8005c4a:	ec57 6b10 	vmov	r6, r7, d0
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	d021      	beq.n	8005c96 <_scanf_float+0x3d6>
 8005c52:	9903      	ldr	r1, [sp, #12]
 8005c54:	1d1a      	adds	r2, r3, #4
 8005c56:	600a      	str	r2, [r1, #0]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	e9c3 6700 	strd	r6, r7, [r3]
 8005c5e:	68e3      	ldr	r3, [r4, #12]
 8005c60:	3301      	adds	r3, #1
 8005c62:	60e3      	str	r3, [r4, #12]
 8005c64:	e66d      	b.n	8005942 <_scanf_float+0x82>
 8005c66:	9b04      	ldr	r3, [sp, #16]
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d0e5      	beq.n	8005c38 <_scanf_float+0x378>
 8005c6c:	9905      	ldr	r1, [sp, #20]
 8005c6e:	230a      	movs	r3, #10
 8005c70:	462a      	mov	r2, r5
 8005c72:	3101      	adds	r1, #1
 8005c74:	4640      	mov	r0, r8
 8005c76:	f000 ff75 	bl	8006b64 <_strtol_r>
 8005c7a:	9b04      	ldr	r3, [sp, #16]
 8005c7c:	9e05      	ldr	r6, [sp, #20]
 8005c7e:	1ac2      	subs	r2, r0, r3
 8005c80:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8005c84:	429e      	cmp	r6, r3
 8005c86:	bf28      	it	cs
 8005c88:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8005c8c:	4912      	ldr	r1, [pc, #72]	; (8005cd8 <_scanf_float+0x418>)
 8005c8e:	4630      	mov	r0, r6
 8005c90:	f000 f82c 	bl	8005cec <siprintf>
 8005c94:	e7d0      	b.n	8005c38 <_scanf_float+0x378>
 8005c96:	9903      	ldr	r1, [sp, #12]
 8005c98:	f012 0f04 	tst.w	r2, #4
 8005c9c:	f103 0204 	add.w	r2, r3, #4
 8005ca0:	600a      	str	r2, [r1, #0]
 8005ca2:	d1d9      	bne.n	8005c58 <_scanf_float+0x398>
 8005ca4:	f8d3 8000 	ldr.w	r8, [r3]
 8005ca8:	ee10 2a10 	vmov	r2, s0
 8005cac:	ee10 0a10 	vmov	r0, s0
 8005cb0:	463b      	mov	r3, r7
 8005cb2:	4639      	mov	r1, r7
 8005cb4:	f7fa ff52 	bl	8000b5c <__aeabi_dcmpun>
 8005cb8:	b128      	cbz	r0, 8005cc6 <_scanf_float+0x406>
 8005cba:	4808      	ldr	r0, [pc, #32]	; (8005cdc <_scanf_float+0x41c>)
 8005cbc:	f000 f810 	bl	8005ce0 <nanf>
 8005cc0:	ed88 0a00 	vstr	s0, [r8]
 8005cc4:	e7cb      	b.n	8005c5e <_scanf_float+0x39e>
 8005cc6:	4630      	mov	r0, r6
 8005cc8:	4639      	mov	r1, r7
 8005cca:	f7fa ffa5 	bl	8000c18 <__aeabi_d2f>
 8005cce:	f8c8 0000 	str.w	r0, [r8]
 8005cd2:	e7c4      	b.n	8005c5e <_scanf_float+0x39e>
 8005cd4:	2500      	movs	r5, #0
 8005cd6:	e634      	b.n	8005942 <_scanf_float+0x82>
 8005cd8:	0800bb22 	.word	0x0800bb22
 8005cdc:	0800bf43 	.word	0x0800bf43

08005ce0 <nanf>:
 8005ce0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8005ce8 <nanf+0x8>
 8005ce4:	4770      	bx	lr
 8005ce6:	bf00      	nop
 8005ce8:	7fc00000 	.word	0x7fc00000

08005cec <siprintf>:
 8005cec:	b40e      	push	{r1, r2, r3}
 8005cee:	b500      	push	{lr}
 8005cf0:	b09c      	sub	sp, #112	; 0x70
 8005cf2:	ab1d      	add	r3, sp, #116	; 0x74
 8005cf4:	9002      	str	r0, [sp, #8]
 8005cf6:	9006      	str	r0, [sp, #24]
 8005cf8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005cfc:	4809      	ldr	r0, [pc, #36]	; (8005d24 <siprintf+0x38>)
 8005cfe:	9107      	str	r1, [sp, #28]
 8005d00:	9104      	str	r1, [sp, #16]
 8005d02:	4909      	ldr	r1, [pc, #36]	; (8005d28 <siprintf+0x3c>)
 8005d04:	f853 2b04 	ldr.w	r2, [r3], #4
 8005d08:	9105      	str	r1, [sp, #20]
 8005d0a:	6800      	ldr	r0, [r0, #0]
 8005d0c:	9301      	str	r3, [sp, #4]
 8005d0e:	a902      	add	r1, sp, #8
 8005d10:	f002 ff8a 	bl	8008c28 <_svfiprintf_r>
 8005d14:	9b02      	ldr	r3, [sp, #8]
 8005d16:	2200      	movs	r2, #0
 8005d18:	701a      	strb	r2, [r3, #0]
 8005d1a:	b01c      	add	sp, #112	; 0x70
 8005d1c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005d20:	b003      	add	sp, #12
 8005d22:	4770      	bx	lr
 8005d24:	20000010 	.word	0x20000010
 8005d28:	ffff0208 	.word	0xffff0208

08005d2c <siscanf>:
 8005d2c:	b40e      	push	{r1, r2, r3}
 8005d2e:	b510      	push	{r4, lr}
 8005d30:	b09f      	sub	sp, #124	; 0x7c
 8005d32:	ac21      	add	r4, sp, #132	; 0x84
 8005d34:	f44f 7101 	mov.w	r1, #516	; 0x204
 8005d38:	f854 2b04 	ldr.w	r2, [r4], #4
 8005d3c:	9201      	str	r2, [sp, #4]
 8005d3e:	f8ad 101c 	strh.w	r1, [sp, #28]
 8005d42:	9004      	str	r0, [sp, #16]
 8005d44:	9008      	str	r0, [sp, #32]
 8005d46:	f7fa fa55 	bl	80001f4 <strlen>
 8005d4a:	4b0c      	ldr	r3, [pc, #48]	; (8005d7c <siscanf+0x50>)
 8005d4c:	9005      	str	r0, [sp, #20]
 8005d4e:	9009      	str	r0, [sp, #36]	; 0x24
 8005d50:	930d      	str	r3, [sp, #52]	; 0x34
 8005d52:	480b      	ldr	r0, [pc, #44]	; (8005d80 <siscanf+0x54>)
 8005d54:	9a01      	ldr	r2, [sp, #4]
 8005d56:	6800      	ldr	r0, [r0, #0]
 8005d58:	9403      	str	r4, [sp, #12]
 8005d5a:	2300      	movs	r3, #0
 8005d5c:	9311      	str	r3, [sp, #68]	; 0x44
 8005d5e:	9316      	str	r3, [sp, #88]	; 0x58
 8005d60:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005d64:	f8ad 301e 	strh.w	r3, [sp, #30]
 8005d68:	a904      	add	r1, sp, #16
 8005d6a:	4623      	mov	r3, r4
 8005d6c:	f003 f8b6 	bl	8008edc <__ssvfiscanf_r>
 8005d70:	b01f      	add	sp, #124	; 0x7c
 8005d72:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005d76:	b003      	add	sp, #12
 8005d78:	4770      	bx	lr
 8005d7a:	bf00      	nop
 8005d7c:	08005da7 	.word	0x08005da7
 8005d80:	20000010 	.word	0x20000010

08005d84 <__sread>:
 8005d84:	b510      	push	{r4, lr}
 8005d86:	460c      	mov	r4, r1
 8005d88:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005d8c:	f003 fb70 	bl	8009470 <_read_r>
 8005d90:	2800      	cmp	r0, #0
 8005d92:	bfab      	itete	ge
 8005d94:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005d96:	89a3      	ldrhlt	r3, [r4, #12]
 8005d98:	181b      	addge	r3, r3, r0
 8005d9a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005d9e:	bfac      	ite	ge
 8005da0:	6563      	strge	r3, [r4, #84]	; 0x54
 8005da2:	81a3      	strhlt	r3, [r4, #12]
 8005da4:	bd10      	pop	{r4, pc}

08005da6 <__seofread>:
 8005da6:	2000      	movs	r0, #0
 8005da8:	4770      	bx	lr

08005daa <__swrite>:
 8005daa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005dae:	461f      	mov	r7, r3
 8005db0:	898b      	ldrh	r3, [r1, #12]
 8005db2:	05db      	lsls	r3, r3, #23
 8005db4:	4605      	mov	r5, r0
 8005db6:	460c      	mov	r4, r1
 8005db8:	4616      	mov	r6, r2
 8005dba:	d505      	bpl.n	8005dc8 <__swrite+0x1e>
 8005dbc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005dc0:	2302      	movs	r3, #2
 8005dc2:	2200      	movs	r2, #0
 8005dc4:	f002 f8e2 	bl	8007f8c <_lseek_r>
 8005dc8:	89a3      	ldrh	r3, [r4, #12]
 8005dca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005dce:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005dd2:	81a3      	strh	r3, [r4, #12]
 8005dd4:	4632      	mov	r2, r6
 8005dd6:	463b      	mov	r3, r7
 8005dd8:	4628      	mov	r0, r5
 8005dda:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005dde:	f000 bec3 	b.w	8006b68 <_write_r>

08005de2 <__sseek>:
 8005de2:	b510      	push	{r4, lr}
 8005de4:	460c      	mov	r4, r1
 8005de6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005dea:	f002 f8cf 	bl	8007f8c <_lseek_r>
 8005dee:	1c43      	adds	r3, r0, #1
 8005df0:	89a3      	ldrh	r3, [r4, #12]
 8005df2:	bf15      	itete	ne
 8005df4:	6560      	strne	r0, [r4, #84]	; 0x54
 8005df6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005dfa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005dfe:	81a3      	strheq	r3, [r4, #12]
 8005e00:	bf18      	it	ne
 8005e02:	81a3      	strhne	r3, [r4, #12]
 8005e04:	bd10      	pop	{r4, pc}

08005e06 <__sclose>:
 8005e06:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005e0a:	f000 bebf 	b.w	8006b8c <_close_r>

08005e0e <sulp>:
 8005e0e:	b570      	push	{r4, r5, r6, lr}
 8005e10:	4604      	mov	r4, r0
 8005e12:	460d      	mov	r5, r1
 8005e14:	ec45 4b10 	vmov	d0, r4, r5
 8005e18:	4616      	mov	r6, r2
 8005e1a:	f002 fc63 	bl	80086e4 <__ulp>
 8005e1e:	ec51 0b10 	vmov	r0, r1, d0
 8005e22:	b17e      	cbz	r6, 8005e44 <sulp+0x36>
 8005e24:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8005e28:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	dd09      	ble.n	8005e44 <sulp+0x36>
 8005e30:	051b      	lsls	r3, r3, #20
 8005e32:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8005e36:	2400      	movs	r4, #0
 8005e38:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8005e3c:	4622      	mov	r2, r4
 8005e3e:	462b      	mov	r3, r5
 8005e40:	f7fa fbf2 	bl	8000628 <__aeabi_dmul>
 8005e44:	bd70      	pop	{r4, r5, r6, pc}
	...

08005e48 <_strtod_l>:
 8005e48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e4c:	ed2d 8b02 	vpush	{d8}
 8005e50:	b09d      	sub	sp, #116	; 0x74
 8005e52:	461f      	mov	r7, r3
 8005e54:	2300      	movs	r3, #0
 8005e56:	9318      	str	r3, [sp, #96]	; 0x60
 8005e58:	4ba2      	ldr	r3, [pc, #648]	; (80060e4 <_strtod_l+0x29c>)
 8005e5a:	9213      	str	r2, [sp, #76]	; 0x4c
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	9305      	str	r3, [sp, #20]
 8005e60:	4604      	mov	r4, r0
 8005e62:	4618      	mov	r0, r3
 8005e64:	4688      	mov	r8, r1
 8005e66:	f7fa f9c5 	bl	80001f4 <strlen>
 8005e6a:	f04f 0a00 	mov.w	sl, #0
 8005e6e:	4605      	mov	r5, r0
 8005e70:	f04f 0b00 	mov.w	fp, #0
 8005e74:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8005e78:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005e7a:	781a      	ldrb	r2, [r3, #0]
 8005e7c:	2a2b      	cmp	r2, #43	; 0x2b
 8005e7e:	d04e      	beq.n	8005f1e <_strtod_l+0xd6>
 8005e80:	d83b      	bhi.n	8005efa <_strtod_l+0xb2>
 8005e82:	2a0d      	cmp	r2, #13
 8005e84:	d834      	bhi.n	8005ef0 <_strtod_l+0xa8>
 8005e86:	2a08      	cmp	r2, #8
 8005e88:	d834      	bhi.n	8005ef4 <_strtod_l+0xac>
 8005e8a:	2a00      	cmp	r2, #0
 8005e8c:	d03e      	beq.n	8005f0c <_strtod_l+0xc4>
 8005e8e:	2300      	movs	r3, #0
 8005e90:	930a      	str	r3, [sp, #40]	; 0x28
 8005e92:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8005e94:	7833      	ldrb	r3, [r6, #0]
 8005e96:	2b30      	cmp	r3, #48	; 0x30
 8005e98:	f040 80b0 	bne.w	8005ffc <_strtod_l+0x1b4>
 8005e9c:	7873      	ldrb	r3, [r6, #1]
 8005e9e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8005ea2:	2b58      	cmp	r3, #88	; 0x58
 8005ea4:	d168      	bne.n	8005f78 <_strtod_l+0x130>
 8005ea6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005ea8:	9301      	str	r3, [sp, #4]
 8005eaa:	ab18      	add	r3, sp, #96	; 0x60
 8005eac:	9702      	str	r7, [sp, #8]
 8005eae:	9300      	str	r3, [sp, #0]
 8005eb0:	4a8d      	ldr	r2, [pc, #564]	; (80060e8 <_strtod_l+0x2a0>)
 8005eb2:	ab19      	add	r3, sp, #100	; 0x64
 8005eb4:	a917      	add	r1, sp, #92	; 0x5c
 8005eb6:	4620      	mov	r0, r4
 8005eb8:	f001 fd5c 	bl	8007974 <__gethex>
 8005ebc:	f010 0707 	ands.w	r7, r0, #7
 8005ec0:	4605      	mov	r5, r0
 8005ec2:	d005      	beq.n	8005ed0 <_strtod_l+0x88>
 8005ec4:	2f06      	cmp	r7, #6
 8005ec6:	d12c      	bne.n	8005f22 <_strtod_l+0xda>
 8005ec8:	3601      	adds	r6, #1
 8005eca:	2300      	movs	r3, #0
 8005ecc:	9617      	str	r6, [sp, #92]	; 0x5c
 8005ece:	930a      	str	r3, [sp, #40]	; 0x28
 8005ed0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	f040 8590 	bne.w	80069f8 <_strtod_l+0xbb0>
 8005ed8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005eda:	b1eb      	cbz	r3, 8005f18 <_strtod_l+0xd0>
 8005edc:	4652      	mov	r2, sl
 8005ede:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8005ee2:	ec43 2b10 	vmov	d0, r2, r3
 8005ee6:	b01d      	add	sp, #116	; 0x74
 8005ee8:	ecbd 8b02 	vpop	{d8}
 8005eec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ef0:	2a20      	cmp	r2, #32
 8005ef2:	d1cc      	bne.n	8005e8e <_strtod_l+0x46>
 8005ef4:	3301      	adds	r3, #1
 8005ef6:	9317      	str	r3, [sp, #92]	; 0x5c
 8005ef8:	e7be      	b.n	8005e78 <_strtod_l+0x30>
 8005efa:	2a2d      	cmp	r2, #45	; 0x2d
 8005efc:	d1c7      	bne.n	8005e8e <_strtod_l+0x46>
 8005efe:	2201      	movs	r2, #1
 8005f00:	920a      	str	r2, [sp, #40]	; 0x28
 8005f02:	1c5a      	adds	r2, r3, #1
 8005f04:	9217      	str	r2, [sp, #92]	; 0x5c
 8005f06:	785b      	ldrb	r3, [r3, #1]
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d1c2      	bne.n	8005e92 <_strtod_l+0x4a>
 8005f0c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8005f0e:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	f040 856e 	bne.w	80069f4 <_strtod_l+0xbac>
 8005f18:	4652      	mov	r2, sl
 8005f1a:	465b      	mov	r3, fp
 8005f1c:	e7e1      	b.n	8005ee2 <_strtod_l+0x9a>
 8005f1e:	2200      	movs	r2, #0
 8005f20:	e7ee      	b.n	8005f00 <_strtod_l+0xb8>
 8005f22:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8005f24:	b13a      	cbz	r2, 8005f36 <_strtod_l+0xee>
 8005f26:	2135      	movs	r1, #53	; 0x35
 8005f28:	a81a      	add	r0, sp, #104	; 0x68
 8005f2a:	f002 fce6 	bl	80088fa <__copybits>
 8005f2e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8005f30:	4620      	mov	r0, r4
 8005f32:	f002 f8a5 	bl	8008080 <_Bfree>
 8005f36:	3f01      	subs	r7, #1
 8005f38:	2f04      	cmp	r7, #4
 8005f3a:	d806      	bhi.n	8005f4a <_strtod_l+0x102>
 8005f3c:	e8df f007 	tbb	[pc, r7]
 8005f40:	1714030a 	.word	0x1714030a
 8005f44:	0a          	.byte	0x0a
 8005f45:	00          	.byte	0x00
 8005f46:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 8005f4a:	0728      	lsls	r0, r5, #28
 8005f4c:	d5c0      	bpl.n	8005ed0 <_strtod_l+0x88>
 8005f4e:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8005f52:	e7bd      	b.n	8005ed0 <_strtod_l+0x88>
 8005f54:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8005f58:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8005f5a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8005f5e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8005f62:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8005f66:	e7f0      	b.n	8005f4a <_strtod_l+0x102>
 8005f68:	f8df b180 	ldr.w	fp, [pc, #384]	; 80060ec <_strtod_l+0x2a4>
 8005f6c:	e7ed      	b.n	8005f4a <_strtod_l+0x102>
 8005f6e:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8005f72:	f04f 3aff 	mov.w	sl, #4294967295
 8005f76:	e7e8      	b.n	8005f4a <_strtod_l+0x102>
 8005f78:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005f7a:	1c5a      	adds	r2, r3, #1
 8005f7c:	9217      	str	r2, [sp, #92]	; 0x5c
 8005f7e:	785b      	ldrb	r3, [r3, #1]
 8005f80:	2b30      	cmp	r3, #48	; 0x30
 8005f82:	d0f9      	beq.n	8005f78 <_strtod_l+0x130>
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d0a3      	beq.n	8005ed0 <_strtod_l+0x88>
 8005f88:	2301      	movs	r3, #1
 8005f8a:	f04f 0900 	mov.w	r9, #0
 8005f8e:	9304      	str	r3, [sp, #16]
 8005f90:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005f92:	9308      	str	r3, [sp, #32]
 8005f94:	f8cd 901c 	str.w	r9, [sp, #28]
 8005f98:	464f      	mov	r7, r9
 8005f9a:	220a      	movs	r2, #10
 8005f9c:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8005f9e:	7806      	ldrb	r6, [r0, #0]
 8005fa0:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8005fa4:	b2d9      	uxtb	r1, r3
 8005fa6:	2909      	cmp	r1, #9
 8005fa8:	d92a      	bls.n	8006000 <_strtod_l+0x1b8>
 8005faa:	9905      	ldr	r1, [sp, #20]
 8005fac:	462a      	mov	r2, r5
 8005fae:	f003 fac3 	bl	8009538 <strncmp>
 8005fb2:	b398      	cbz	r0, 800601c <_strtod_l+0x1d4>
 8005fb4:	2000      	movs	r0, #0
 8005fb6:	4632      	mov	r2, r6
 8005fb8:	463d      	mov	r5, r7
 8005fba:	9005      	str	r0, [sp, #20]
 8005fbc:	4603      	mov	r3, r0
 8005fbe:	2a65      	cmp	r2, #101	; 0x65
 8005fc0:	d001      	beq.n	8005fc6 <_strtod_l+0x17e>
 8005fc2:	2a45      	cmp	r2, #69	; 0x45
 8005fc4:	d118      	bne.n	8005ff8 <_strtod_l+0x1b0>
 8005fc6:	b91d      	cbnz	r5, 8005fd0 <_strtod_l+0x188>
 8005fc8:	9a04      	ldr	r2, [sp, #16]
 8005fca:	4302      	orrs	r2, r0
 8005fcc:	d09e      	beq.n	8005f0c <_strtod_l+0xc4>
 8005fce:	2500      	movs	r5, #0
 8005fd0:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 8005fd4:	f108 0201 	add.w	r2, r8, #1
 8005fd8:	9217      	str	r2, [sp, #92]	; 0x5c
 8005fda:	f898 2001 	ldrb.w	r2, [r8, #1]
 8005fde:	2a2b      	cmp	r2, #43	; 0x2b
 8005fe0:	d075      	beq.n	80060ce <_strtod_l+0x286>
 8005fe2:	2a2d      	cmp	r2, #45	; 0x2d
 8005fe4:	d07b      	beq.n	80060de <_strtod_l+0x296>
 8005fe6:	f04f 0c00 	mov.w	ip, #0
 8005fea:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8005fee:	2909      	cmp	r1, #9
 8005ff0:	f240 8082 	bls.w	80060f8 <_strtod_l+0x2b0>
 8005ff4:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8005ff8:	2600      	movs	r6, #0
 8005ffa:	e09d      	b.n	8006138 <_strtod_l+0x2f0>
 8005ffc:	2300      	movs	r3, #0
 8005ffe:	e7c4      	b.n	8005f8a <_strtod_l+0x142>
 8006000:	2f08      	cmp	r7, #8
 8006002:	bfd8      	it	le
 8006004:	9907      	ldrle	r1, [sp, #28]
 8006006:	f100 0001 	add.w	r0, r0, #1
 800600a:	bfda      	itte	le
 800600c:	fb02 3301 	mlale	r3, r2, r1, r3
 8006010:	9307      	strle	r3, [sp, #28]
 8006012:	fb02 3909 	mlagt	r9, r2, r9, r3
 8006016:	3701      	adds	r7, #1
 8006018:	9017      	str	r0, [sp, #92]	; 0x5c
 800601a:	e7bf      	b.n	8005f9c <_strtod_l+0x154>
 800601c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800601e:	195a      	adds	r2, r3, r5
 8006020:	9217      	str	r2, [sp, #92]	; 0x5c
 8006022:	5d5a      	ldrb	r2, [r3, r5]
 8006024:	2f00      	cmp	r7, #0
 8006026:	d037      	beq.n	8006098 <_strtod_l+0x250>
 8006028:	9005      	str	r0, [sp, #20]
 800602a:	463d      	mov	r5, r7
 800602c:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8006030:	2b09      	cmp	r3, #9
 8006032:	d912      	bls.n	800605a <_strtod_l+0x212>
 8006034:	2301      	movs	r3, #1
 8006036:	e7c2      	b.n	8005fbe <_strtod_l+0x176>
 8006038:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800603a:	1c5a      	adds	r2, r3, #1
 800603c:	9217      	str	r2, [sp, #92]	; 0x5c
 800603e:	785a      	ldrb	r2, [r3, #1]
 8006040:	3001      	adds	r0, #1
 8006042:	2a30      	cmp	r2, #48	; 0x30
 8006044:	d0f8      	beq.n	8006038 <_strtod_l+0x1f0>
 8006046:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800604a:	2b08      	cmp	r3, #8
 800604c:	f200 84d9 	bhi.w	8006a02 <_strtod_l+0xbba>
 8006050:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006052:	9005      	str	r0, [sp, #20]
 8006054:	2000      	movs	r0, #0
 8006056:	9308      	str	r3, [sp, #32]
 8006058:	4605      	mov	r5, r0
 800605a:	3a30      	subs	r2, #48	; 0x30
 800605c:	f100 0301 	add.w	r3, r0, #1
 8006060:	d014      	beq.n	800608c <_strtod_l+0x244>
 8006062:	9905      	ldr	r1, [sp, #20]
 8006064:	4419      	add	r1, r3
 8006066:	9105      	str	r1, [sp, #20]
 8006068:	462b      	mov	r3, r5
 800606a:	eb00 0e05 	add.w	lr, r0, r5
 800606e:	210a      	movs	r1, #10
 8006070:	4573      	cmp	r3, lr
 8006072:	d113      	bne.n	800609c <_strtod_l+0x254>
 8006074:	182b      	adds	r3, r5, r0
 8006076:	2b08      	cmp	r3, #8
 8006078:	f105 0501 	add.w	r5, r5, #1
 800607c:	4405      	add	r5, r0
 800607e:	dc1c      	bgt.n	80060ba <_strtod_l+0x272>
 8006080:	9907      	ldr	r1, [sp, #28]
 8006082:	230a      	movs	r3, #10
 8006084:	fb03 2301 	mla	r3, r3, r1, r2
 8006088:	9307      	str	r3, [sp, #28]
 800608a:	2300      	movs	r3, #0
 800608c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800608e:	1c51      	adds	r1, r2, #1
 8006090:	9117      	str	r1, [sp, #92]	; 0x5c
 8006092:	7852      	ldrb	r2, [r2, #1]
 8006094:	4618      	mov	r0, r3
 8006096:	e7c9      	b.n	800602c <_strtod_l+0x1e4>
 8006098:	4638      	mov	r0, r7
 800609a:	e7d2      	b.n	8006042 <_strtod_l+0x1fa>
 800609c:	2b08      	cmp	r3, #8
 800609e:	dc04      	bgt.n	80060aa <_strtod_l+0x262>
 80060a0:	9e07      	ldr	r6, [sp, #28]
 80060a2:	434e      	muls	r6, r1
 80060a4:	9607      	str	r6, [sp, #28]
 80060a6:	3301      	adds	r3, #1
 80060a8:	e7e2      	b.n	8006070 <_strtod_l+0x228>
 80060aa:	f103 0c01 	add.w	ip, r3, #1
 80060ae:	f1bc 0f10 	cmp.w	ip, #16
 80060b2:	bfd8      	it	le
 80060b4:	fb01 f909 	mulle.w	r9, r1, r9
 80060b8:	e7f5      	b.n	80060a6 <_strtod_l+0x25e>
 80060ba:	2d10      	cmp	r5, #16
 80060bc:	bfdc      	itt	le
 80060be:	230a      	movle	r3, #10
 80060c0:	fb03 2909 	mlale	r9, r3, r9, r2
 80060c4:	e7e1      	b.n	800608a <_strtod_l+0x242>
 80060c6:	2300      	movs	r3, #0
 80060c8:	9305      	str	r3, [sp, #20]
 80060ca:	2301      	movs	r3, #1
 80060cc:	e77c      	b.n	8005fc8 <_strtod_l+0x180>
 80060ce:	f04f 0c00 	mov.w	ip, #0
 80060d2:	f108 0202 	add.w	r2, r8, #2
 80060d6:	9217      	str	r2, [sp, #92]	; 0x5c
 80060d8:	f898 2002 	ldrb.w	r2, [r8, #2]
 80060dc:	e785      	b.n	8005fea <_strtod_l+0x1a2>
 80060de:	f04f 0c01 	mov.w	ip, #1
 80060e2:	e7f6      	b.n	80060d2 <_strtod_l+0x28a>
 80060e4:	0800bd70 	.word	0x0800bd70
 80060e8:	0800bb28 	.word	0x0800bb28
 80060ec:	7ff00000 	.word	0x7ff00000
 80060f0:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80060f2:	1c51      	adds	r1, r2, #1
 80060f4:	9117      	str	r1, [sp, #92]	; 0x5c
 80060f6:	7852      	ldrb	r2, [r2, #1]
 80060f8:	2a30      	cmp	r2, #48	; 0x30
 80060fa:	d0f9      	beq.n	80060f0 <_strtod_l+0x2a8>
 80060fc:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8006100:	2908      	cmp	r1, #8
 8006102:	f63f af79 	bhi.w	8005ff8 <_strtod_l+0x1b0>
 8006106:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800610a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800610c:	9206      	str	r2, [sp, #24]
 800610e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8006110:	1c51      	adds	r1, r2, #1
 8006112:	9117      	str	r1, [sp, #92]	; 0x5c
 8006114:	7852      	ldrb	r2, [r2, #1]
 8006116:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800611a:	2e09      	cmp	r6, #9
 800611c:	d937      	bls.n	800618e <_strtod_l+0x346>
 800611e:	9e06      	ldr	r6, [sp, #24]
 8006120:	1b89      	subs	r1, r1, r6
 8006122:	2908      	cmp	r1, #8
 8006124:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8006128:	dc02      	bgt.n	8006130 <_strtod_l+0x2e8>
 800612a:	4576      	cmp	r6, lr
 800612c:	bfa8      	it	ge
 800612e:	4676      	movge	r6, lr
 8006130:	f1bc 0f00 	cmp.w	ip, #0
 8006134:	d000      	beq.n	8006138 <_strtod_l+0x2f0>
 8006136:	4276      	negs	r6, r6
 8006138:	2d00      	cmp	r5, #0
 800613a:	d14d      	bne.n	80061d8 <_strtod_l+0x390>
 800613c:	9904      	ldr	r1, [sp, #16]
 800613e:	4301      	orrs	r1, r0
 8006140:	f47f aec6 	bne.w	8005ed0 <_strtod_l+0x88>
 8006144:	2b00      	cmp	r3, #0
 8006146:	f47f aee1 	bne.w	8005f0c <_strtod_l+0xc4>
 800614a:	2a69      	cmp	r2, #105	; 0x69
 800614c:	d027      	beq.n	800619e <_strtod_l+0x356>
 800614e:	dc24      	bgt.n	800619a <_strtod_l+0x352>
 8006150:	2a49      	cmp	r2, #73	; 0x49
 8006152:	d024      	beq.n	800619e <_strtod_l+0x356>
 8006154:	2a4e      	cmp	r2, #78	; 0x4e
 8006156:	f47f aed9 	bne.w	8005f0c <_strtod_l+0xc4>
 800615a:	499f      	ldr	r1, [pc, #636]	; (80063d8 <_strtod_l+0x590>)
 800615c:	a817      	add	r0, sp, #92	; 0x5c
 800615e:	f001 fe61 	bl	8007e24 <__match>
 8006162:	2800      	cmp	r0, #0
 8006164:	f43f aed2 	beq.w	8005f0c <_strtod_l+0xc4>
 8006168:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800616a:	781b      	ldrb	r3, [r3, #0]
 800616c:	2b28      	cmp	r3, #40	; 0x28
 800616e:	d12d      	bne.n	80061cc <_strtod_l+0x384>
 8006170:	499a      	ldr	r1, [pc, #616]	; (80063dc <_strtod_l+0x594>)
 8006172:	aa1a      	add	r2, sp, #104	; 0x68
 8006174:	a817      	add	r0, sp, #92	; 0x5c
 8006176:	f001 fe69 	bl	8007e4c <__hexnan>
 800617a:	2805      	cmp	r0, #5
 800617c:	d126      	bne.n	80061cc <_strtod_l+0x384>
 800617e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006180:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 8006184:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8006188:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800618c:	e6a0      	b.n	8005ed0 <_strtod_l+0x88>
 800618e:	210a      	movs	r1, #10
 8006190:	fb01 2e0e 	mla	lr, r1, lr, r2
 8006194:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8006198:	e7b9      	b.n	800610e <_strtod_l+0x2c6>
 800619a:	2a6e      	cmp	r2, #110	; 0x6e
 800619c:	e7db      	b.n	8006156 <_strtod_l+0x30e>
 800619e:	4990      	ldr	r1, [pc, #576]	; (80063e0 <_strtod_l+0x598>)
 80061a0:	a817      	add	r0, sp, #92	; 0x5c
 80061a2:	f001 fe3f 	bl	8007e24 <__match>
 80061a6:	2800      	cmp	r0, #0
 80061a8:	f43f aeb0 	beq.w	8005f0c <_strtod_l+0xc4>
 80061ac:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80061ae:	498d      	ldr	r1, [pc, #564]	; (80063e4 <_strtod_l+0x59c>)
 80061b0:	3b01      	subs	r3, #1
 80061b2:	a817      	add	r0, sp, #92	; 0x5c
 80061b4:	9317      	str	r3, [sp, #92]	; 0x5c
 80061b6:	f001 fe35 	bl	8007e24 <__match>
 80061ba:	b910      	cbnz	r0, 80061c2 <_strtod_l+0x37a>
 80061bc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80061be:	3301      	adds	r3, #1
 80061c0:	9317      	str	r3, [sp, #92]	; 0x5c
 80061c2:	f8df b230 	ldr.w	fp, [pc, #560]	; 80063f4 <_strtod_l+0x5ac>
 80061c6:	f04f 0a00 	mov.w	sl, #0
 80061ca:	e681      	b.n	8005ed0 <_strtod_l+0x88>
 80061cc:	4886      	ldr	r0, [pc, #536]	; (80063e8 <_strtod_l+0x5a0>)
 80061ce:	f003 f963 	bl	8009498 <nan>
 80061d2:	ec5b ab10 	vmov	sl, fp, d0
 80061d6:	e67b      	b.n	8005ed0 <_strtod_l+0x88>
 80061d8:	9b05      	ldr	r3, [sp, #20]
 80061da:	9807      	ldr	r0, [sp, #28]
 80061dc:	1af3      	subs	r3, r6, r3
 80061de:	2f00      	cmp	r7, #0
 80061e0:	bf08      	it	eq
 80061e2:	462f      	moveq	r7, r5
 80061e4:	2d10      	cmp	r5, #16
 80061e6:	9306      	str	r3, [sp, #24]
 80061e8:	46a8      	mov	r8, r5
 80061ea:	bfa8      	it	ge
 80061ec:	f04f 0810 	movge.w	r8, #16
 80061f0:	f7fa f9a0 	bl	8000534 <__aeabi_ui2d>
 80061f4:	2d09      	cmp	r5, #9
 80061f6:	4682      	mov	sl, r0
 80061f8:	468b      	mov	fp, r1
 80061fa:	dd13      	ble.n	8006224 <_strtod_l+0x3dc>
 80061fc:	4b7b      	ldr	r3, [pc, #492]	; (80063ec <_strtod_l+0x5a4>)
 80061fe:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8006202:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8006206:	f7fa fa0f 	bl	8000628 <__aeabi_dmul>
 800620a:	4682      	mov	sl, r0
 800620c:	4648      	mov	r0, r9
 800620e:	468b      	mov	fp, r1
 8006210:	f7fa f990 	bl	8000534 <__aeabi_ui2d>
 8006214:	4602      	mov	r2, r0
 8006216:	460b      	mov	r3, r1
 8006218:	4650      	mov	r0, sl
 800621a:	4659      	mov	r1, fp
 800621c:	f7fa f84e 	bl	80002bc <__adddf3>
 8006220:	4682      	mov	sl, r0
 8006222:	468b      	mov	fp, r1
 8006224:	2d0f      	cmp	r5, #15
 8006226:	dc38      	bgt.n	800629a <_strtod_l+0x452>
 8006228:	9b06      	ldr	r3, [sp, #24]
 800622a:	2b00      	cmp	r3, #0
 800622c:	f43f ae50 	beq.w	8005ed0 <_strtod_l+0x88>
 8006230:	dd24      	ble.n	800627c <_strtod_l+0x434>
 8006232:	2b16      	cmp	r3, #22
 8006234:	dc0b      	bgt.n	800624e <_strtod_l+0x406>
 8006236:	496d      	ldr	r1, [pc, #436]	; (80063ec <_strtod_l+0x5a4>)
 8006238:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800623c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006240:	4652      	mov	r2, sl
 8006242:	465b      	mov	r3, fp
 8006244:	f7fa f9f0 	bl	8000628 <__aeabi_dmul>
 8006248:	4682      	mov	sl, r0
 800624a:	468b      	mov	fp, r1
 800624c:	e640      	b.n	8005ed0 <_strtod_l+0x88>
 800624e:	9a06      	ldr	r2, [sp, #24]
 8006250:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8006254:	4293      	cmp	r3, r2
 8006256:	db20      	blt.n	800629a <_strtod_l+0x452>
 8006258:	4c64      	ldr	r4, [pc, #400]	; (80063ec <_strtod_l+0x5a4>)
 800625a:	f1c5 050f 	rsb	r5, r5, #15
 800625e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8006262:	4652      	mov	r2, sl
 8006264:	465b      	mov	r3, fp
 8006266:	e9d1 0100 	ldrd	r0, r1, [r1]
 800626a:	f7fa f9dd 	bl	8000628 <__aeabi_dmul>
 800626e:	9b06      	ldr	r3, [sp, #24]
 8006270:	1b5d      	subs	r5, r3, r5
 8006272:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8006276:	e9d4 2300 	ldrd	r2, r3, [r4]
 800627a:	e7e3      	b.n	8006244 <_strtod_l+0x3fc>
 800627c:	9b06      	ldr	r3, [sp, #24]
 800627e:	3316      	adds	r3, #22
 8006280:	db0b      	blt.n	800629a <_strtod_l+0x452>
 8006282:	9b05      	ldr	r3, [sp, #20]
 8006284:	1b9e      	subs	r6, r3, r6
 8006286:	4b59      	ldr	r3, [pc, #356]	; (80063ec <_strtod_l+0x5a4>)
 8006288:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800628c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006290:	4650      	mov	r0, sl
 8006292:	4659      	mov	r1, fp
 8006294:	f7fa faf2 	bl	800087c <__aeabi_ddiv>
 8006298:	e7d6      	b.n	8006248 <_strtod_l+0x400>
 800629a:	9b06      	ldr	r3, [sp, #24]
 800629c:	eba5 0808 	sub.w	r8, r5, r8
 80062a0:	4498      	add	r8, r3
 80062a2:	f1b8 0f00 	cmp.w	r8, #0
 80062a6:	dd74      	ble.n	8006392 <_strtod_l+0x54a>
 80062a8:	f018 030f 	ands.w	r3, r8, #15
 80062ac:	d00a      	beq.n	80062c4 <_strtod_l+0x47c>
 80062ae:	494f      	ldr	r1, [pc, #316]	; (80063ec <_strtod_l+0x5a4>)
 80062b0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80062b4:	4652      	mov	r2, sl
 80062b6:	465b      	mov	r3, fp
 80062b8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80062bc:	f7fa f9b4 	bl	8000628 <__aeabi_dmul>
 80062c0:	4682      	mov	sl, r0
 80062c2:	468b      	mov	fp, r1
 80062c4:	f038 080f 	bics.w	r8, r8, #15
 80062c8:	d04f      	beq.n	800636a <_strtod_l+0x522>
 80062ca:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 80062ce:	dd22      	ble.n	8006316 <_strtod_l+0x4ce>
 80062d0:	2500      	movs	r5, #0
 80062d2:	462e      	mov	r6, r5
 80062d4:	9507      	str	r5, [sp, #28]
 80062d6:	9505      	str	r5, [sp, #20]
 80062d8:	2322      	movs	r3, #34	; 0x22
 80062da:	f8df b118 	ldr.w	fp, [pc, #280]	; 80063f4 <_strtod_l+0x5ac>
 80062de:	6023      	str	r3, [r4, #0]
 80062e0:	f04f 0a00 	mov.w	sl, #0
 80062e4:	9b07      	ldr	r3, [sp, #28]
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	f43f adf2 	beq.w	8005ed0 <_strtod_l+0x88>
 80062ec:	9918      	ldr	r1, [sp, #96]	; 0x60
 80062ee:	4620      	mov	r0, r4
 80062f0:	f001 fec6 	bl	8008080 <_Bfree>
 80062f4:	9905      	ldr	r1, [sp, #20]
 80062f6:	4620      	mov	r0, r4
 80062f8:	f001 fec2 	bl	8008080 <_Bfree>
 80062fc:	4631      	mov	r1, r6
 80062fe:	4620      	mov	r0, r4
 8006300:	f001 febe 	bl	8008080 <_Bfree>
 8006304:	9907      	ldr	r1, [sp, #28]
 8006306:	4620      	mov	r0, r4
 8006308:	f001 feba 	bl	8008080 <_Bfree>
 800630c:	4629      	mov	r1, r5
 800630e:	4620      	mov	r0, r4
 8006310:	f001 feb6 	bl	8008080 <_Bfree>
 8006314:	e5dc      	b.n	8005ed0 <_strtod_l+0x88>
 8006316:	4b36      	ldr	r3, [pc, #216]	; (80063f0 <_strtod_l+0x5a8>)
 8006318:	9304      	str	r3, [sp, #16]
 800631a:	2300      	movs	r3, #0
 800631c:	ea4f 1828 	mov.w	r8, r8, asr #4
 8006320:	4650      	mov	r0, sl
 8006322:	4659      	mov	r1, fp
 8006324:	4699      	mov	r9, r3
 8006326:	f1b8 0f01 	cmp.w	r8, #1
 800632a:	dc21      	bgt.n	8006370 <_strtod_l+0x528>
 800632c:	b10b      	cbz	r3, 8006332 <_strtod_l+0x4ea>
 800632e:	4682      	mov	sl, r0
 8006330:	468b      	mov	fp, r1
 8006332:	4b2f      	ldr	r3, [pc, #188]	; (80063f0 <_strtod_l+0x5a8>)
 8006334:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8006338:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800633c:	4652      	mov	r2, sl
 800633e:	465b      	mov	r3, fp
 8006340:	e9d9 0100 	ldrd	r0, r1, [r9]
 8006344:	f7fa f970 	bl	8000628 <__aeabi_dmul>
 8006348:	4b2a      	ldr	r3, [pc, #168]	; (80063f4 <_strtod_l+0x5ac>)
 800634a:	460a      	mov	r2, r1
 800634c:	400b      	ands	r3, r1
 800634e:	492a      	ldr	r1, [pc, #168]	; (80063f8 <_strtod_l+0x5b0>)
 8006350:	428b      	cmp	r3, r1
 8006352:	4682      	mov	sl, r0
 8006354:	d8bc      	bhi.n	80062d0 <_strtod_l+0x488>
 8006356:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800635a:	428b      	cmp	r3, r1
 800635c:	bf86      	itte	hi
 800635e:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 80063fc <_strtod_l+0x5b4>
 8006362:	f04f 3aff 	movhi.w	sl, #4294967295
 8006366:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800636a:	2300      	movs	r3, #0
 800636c:	9304      	str	r3, [sp, #16]
 800636e:	e084      	b.n	800647a <_strtod_l+0x632>
 8006370:	f018 0f01 	tst.w	r8, #1
 8006374:	d005      	beq.n	8006382 <_strtod_l+0x53a>
 8006376:	9b04      	ldr	r3, [sp, #16]
 8006378:	e9d3 2300 	ldrd	r2, r3, [r3]
 800637c:	f7fa f954 	bl	8000628 <__aeabi_dmul>
 8006380:	2301      	movs	r3, #1
 8006382:	9a04      	ldr	r2, [sp, #16]
 8006384:	3208      	adds	r2, #8
 8006386:	f109 0901 	add.w	r9, r9, #1
 800638a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800638e:	9204      	str	r2, [sp, #16]
 8006390:	e7c9      	b.n	8006326 <_strtod_l+0x4de>
 8006392:	d0ea      	beq.n	800636a <_strtod_l+0x522>
 8006394:	f1c8 0800 	rsb	r8, r8, #0
 8006398:	f018 020f 	ands.w	r2, r8, #15
 800639c:	d00a      	beq.n	80063b4 <_strtod_l+0x56c>
 800639e:	4b13      	ldr	r3, [pc, #76]	; (80063ec <_strtod_l+0x5a4>)
 80063a0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80063a4:	4650      	mov	r0, sl
 80063a6:	4659      	mov	r1, fp
 80063a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063ac:	f7fa fa66 	bl	800087c <__aeabi_ddiv>
 80063b0:	4682      	mov	sl, r0
 80063b2:	468b      	mov	fp, r1
 80063b4:	ea5f 1828 	movs.w	r8, r8, asr #4
 80063b8:	d0d7      	beq.n	800636a <_strtod_l+0x522>
 80063ba:	f1b8 0f1f 	cmp.w	r8, #31
 80063be:	dd1f      	ble.n	8006400 <_strtod_l+0x5b8>
 80063c0:	2500      	movs	r5, #0
 80063c2:	462e      	mov	r6, r5
 80063c4:	9507      	str	r5, [sp, #28]
 80063c6:	9505      	str	r5, [sp, #20]
 80063c8:	2322      	movs	r3, #34	; 0x22
 80063ca:	f04f 0a00 	mov.w	sl, #0
 80063ce:	f04f 0b00 	mov.w	fp, #0
 80063d2:	6023      	str	r3, [r4, #0]
 80063d4:	e786      	b.n	80062e4 <_strtod_l+0x49c>
 80063d6:	bf00      	nop
 80063d8:	0800bafd 	.word	0x0800bafd
 80063dc:	0800bb3c 	.word	0x0800bb3c
 80063e0:	0800baf5 	.word	0x0800baf5
 80063e4:	0800bc7c 	.word	0x0800bc7c
 80063e8:	0800bf43 	.word	0x0800bf43
 80063ec:	0800be08 	.word	0x0800be08
 80063f0:	0800bde0 	.word	0x0800bde0
 80063f4:	7ff00000 	.word	0x7ff00000
 80063f8:	7ca00000 	.word	0x7ca00000
 80063fc:	7fefffff 	.word	0x7fefffff
 8006400:	f018 0310 	ands.w	r3, r8, #16
 8006404:	bf18      	it	ne
 8006406:	236a      	movne	r3, #106	; 0x6a
 8006408:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 80067b8 <_strtod_l+0x970>
 800640c:	9304      	str	r3, [sp, #16]
 800640e:	4650      	mov	r0, sl
 8006410:	4659      	mov	r1, fp
 8006412:	2300      	movs	r3, #0
 8006414:	f018 0f01 	tst.w	r8, #1
 8006418:	d004      	beq.n	8006424 <_strtod_l+0x5dc>
 800641a:	e9d9 2300 	ldrd	r2, r3, [r9]
 800641e:	f7fa f903 	bl	8000628 <__aeabi_dmul>
 8006422:	2301      	movs	r3, #1
 8006424:	ea5f 0868 	movs.w	r8, r8, asr #1
 8006428:	f109 0908 	add.w	r9, r9, #8
 800642c:	d1f2      	bne.n	8006414 <_strtod_l+0x5cc>
 800642e:	b10b      	cbz	r3, 8006434 <_strtod_l+0x5ec>
 8006430:	4682      	mov	sl, r0
 8006432:	468b      	mov	fp, r1
 8006434:	9b04      	ldr	r3, [sp, #16]
 8006436:	b1c3      	cbz	r3, 800646a <_strtod_l+0x622>
 8006438:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800643c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8006440:	2b00      	cmp	r3, #0
 8006442:	4659      	mov	r1, fp
 8006444:	dd11      	ble.n	800646a <_strtod_l+0x622>
 8006446:	2b1f      	cmp	r3, #31
 8006448:	f340 8124 	ble.w	8006694 <_strtod_l+0x84c>
 800644c:	2b34      	cmp	r3, #52	; 0x34
 800644e:	bfde      	ittt	le
 8006450:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8006454:	f04f 33ff 	movle.w	r3, #4294967295
 8006458:	fa03 f202 	lslle.w	r2, r3, r2
 800645c:	f04f 0a00 	mov.w	sl, #0
 8006460:	bfcc      	ite	gt
 8006462:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8006466:	ea02 0b01 	andle.w	fp, r2, r1
 800646a:	2200      	movs	r2, #0
 800646c:	2300      	movs	r3, #0
 800646e:	4650      	mov	r0, sl
 8006470:	4659      	mov	r1, fp
 8006472:	f7fa fb41 	bl	8000af8 <__aeabi_dcmpeq>
 8006476:	2800      	cmp	r0, #0
 8006478:	d1a2      	bne.n	80063c0 <_strtod_l+0x578>
 800647a:	9b07      	ldr	r3, [sp, #28]
 800647c:	9300      	str	r3, [sp, #0]
 800647e:	9908      	ldr	r1, [sp, #32]
 8006480:	462b      	mov	r3, r5
 8006482:	463a      	mov	r2, r7
 8006484:	4620      	mov	r0, r4
 8006486:	f001 fe63 	bl	8008150 <__s2b>
 800648a:	9007      	str	r0, [sp, #28]
 800648c:	2800      	cmp	r0, #0
 800648e:	f43f af1f 	beq.w	80062d0 <_strtod_l+0x488>
 8006492:	9b05      	ldr	r3, [sp, #20]
 8006494:	1b9e      	subs	r6, r3, r6
 8006496:	9b06      	ldr	r3, [sp, #24]
 8006498:	2b00      	cmp	r3, #0
 800649a:	bfb4      	ite	lt
 800649c:	4633      	movlt	r3, r6
 800649e:	2300      	movge	r3, #0
 80064a0:	930c      	str	r3, [sp, #48]	; 0x30
 80064a2:	9b06      	ldr	r3, [sp, #24]
 80064a4:	2500      	movs	r5, #0
 80064a6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80064aa:	9312      	str	r3, [sp, #72]	; 0x48
 80064ac:	462e      	mov	r6, r5
 80064ae:	9b07      	ldr	r3, [sp, #28]
 80064b0:	4620      	mov	r0, r4
 80064b2:	6859      	ldr	r1, [r3, #4]
 80064b4:	f001 fda4 	bl	8008000 <_Balloc>
 80064b8:	9005      	str	r0, [sp, #20]
 80064ba:	2800      	cmp	r0, #0
 80064bc:	f43f af0c 	beq.w	80062d8 <_strtod_l+0x490>
 80064c0:	9b07      	ldr	r3, [sp, #28]
 80064c2:	691a      	ldr	r2, [r3, #16]
 80064c4:	3202      	adds	r2, #2
 80064c6:	f103 010c 	add.w	r1, r3, #12
 80064ca:	0092      	lsls	r2, r2, #2
 80064cc:	300c      	adds	r0, #12
 80064ce:	f001 fd89 	bl	8007fe4 <memcpy>
 80064d2:	ec4b ab10 	vmov	d0, sl, fp
 80064d6:	aa1a      	add	r2, sp, #104	; 0x68
 80064d8:	a919      	add	r1, sp, #100	; 0x64
 80064da:	4620      	mov	r0, r4
 80064dc:	f002 f97e 	bl	80087dc <__d2b>
 80064e0:	ec4b ab18 	vmov	d8, sl, fp
 80064e4:	9018      	str	r0, [sp, #96]	; 0x60
 80064e6:	2800      	cmp	r0, #0
 80064e8:	f43f aef6 	beq.w	80062d8 <_strtod_l+0x490>
 80064ec:	2101      	movs	r1, #1
 80064ee:	4620      	mov	r0, r4
 80064f0:	f001 fec8 	bl	8008284 <__i2b>
 80064f4:	4606      	mov	r6, r0
 80064f6:	2800      	cmp	r0, #0
 80064f8:	f43f aeee 	beq.w	80062d8 <_strtod_l+0x490>
 80064fc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80064fe:	9904      	ldr	r1, [sp, #16]
 8006500:	2b00      	cmp	r3, #0
 8006502:	bfab      	itete	ge
 8006504:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 8006506:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8006508:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800650a:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 800650e:	bfac      	ite	ge
 8006510:	eb03 0902 	addge.w	r9, r3, r2
 8006514:	1ad7      	sublt	r7, r2, r3
 8006516:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8006518:	eba3 0801 	sub.w	r8, r3, r1
 800651c:	4490      	add	r8, r2
 800651e:	4ba1      	ldr	r3, [pc, #644]	; (80067a4 <_strtod_l+0x95c>)
 8006520:	f108 38ff 	add.w	r8, r8, #4294967295
 8006524:	4598      	cmp	r8, r3
 8006526:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800652a:	f280 80c7 	bge.w	80066bc <_strtod_l+0x874>
 800652e:	eba3 0308 	sub.w	r3, r3, r8
 8006532:	2b1f      	cmp	r3, #31
 8006534:	eba2 0203 	sub.w	r2, r2, r3
 8006538:	f04f 0101 	mov.w	r1, #1
 800653c:	f300 80b1 	bgt.w	80066a2 <_strtod_l+0x85a>
 8006540:	fa01 f303 	lsl.w	r3, r1, r3
 8006544:	930d      	str	r3, [sp, #52]	; 0x34
 8006546:	2300      	movs	r3, #0
 8006548:	9308      	str	r3, [sp, #32]
 800654a:	eb09 0802 	add.w	r8, r9, r2
 800654e:	9b04      	ldr	r3, [sp, #16]
 8006550:	45c1      	cmp	r9, r8
 8006552:	4417      	add	r7, r2
 8006554:	441f      	add	r7, r3
 8006556:	464b      	mov	r3, r9
 8006558:	bfa8      	it	ge
 800655a:	4643      	movge	r3, r8
 800655c:	42bb      	cmp	r3, r7
 800655e:	bfa8      	it	ge
 8006560:	463b      	movge	r3, r7
 8006562:	2b00      	cmp	r3, #0
 8006564:	bfc2      	ittt	gt
 8006566:	eba8 0803 	subgt.w	r8, r8, r3
 800656a:	1aff      	subgt	r7, r7, r3
 800656c:	eba9 0903 	subgt.w	r9, r9, r3
 8006570:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006572:	2b00      	cmp	r3, #0
 8006574:	dd17      	ble.n	80065a6 <_strtod_l+0x75e>
 8006576:	4631      	mov	r1, r6
 8006578:	461a      	mov	r2, r3
 800657a:	4620      	mov	r0, r4
 800657c:	f001 ff42 	bl	8008404 <__pow5mult>
 8006580:	4606      	mov	r6, r0
 8006582:	2800      	cmp	r0, #0
 8006584:	f43f aea8 	beq.w	80062d8 <_strtod_l+0x490>
 8006588:	4601      	mov	r1, r0
 800658a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800658c:	4620      	mov	r0, r4
 800658e:	f001 fe8f 	bl	80082b0 <__multiply>
 8006592:	900b      	str	r0, [sp, #44]	; 0x2c
 8006594:	2800      	cmp	r0, #0
 8006596:	f43f ae9f 	beq.w	80062d8 <_strtod_l+0x490>
 800659a:	9918      	ldr	r1, [sp, #96]	; 0x60
 800659c:	4620      	mov	r0, r4
 800659e:	f001 fd6f 	bl	8008080 <_Bfree>
 80065a2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80065a4:	9318      	str	r3, [sp, #96]	; 0x60
 80065a6:	f1b8 0f00 	cmp.w	r8, #0
 80065aa:	f300 808c 	bgt.w	80066c6 <_strtod_l+0x87e>
 80065ae:	9b06      	ldr	r3, [sp, #24]
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	dd08      	ble.n	80065c6 <_strtod_l+0x77e>
 80065b4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80065b6:	9905      	ldr	r1, [sp, #20]
 80065b8:	4620      	mov	r0, r4
 80065ba:	f001 ff23 	bl	8008404 <__pow5mult>
 80065be:	9005      	str	r0, [sp, #20]
 80065c0:	2800      	cmp	r0, #0
 80065c2:	f43f ae89 	beq.w	80062d8 <_strtod_l+0x490>
 80065c6:	2f00      	cmp	r7, #0
 80065c8:	dd08      	ble.n	80065dc <_strtod_l+0x794>
 80065ca:	9905      	ldr	r1, [sp, #20]
 80065cc:	463a      	mov	r2, r7
 80065ce:	4620      	mov	r0, r4
 80065d0:	f001 ff72 	bl	80084b8 <__lshift>
 80065d4:	9005      	str	r0, [sp, #20]
 80065d6:	2800      	cmp	r0, #0
 80065d8:	f43f ae7e 	beq.w	80062d8 <_strtod_l+0x490>
 80065dc:	f1b9 0f00 	cmp.w	r9, #0
 80065e0:	dd08      	ble.n	80065f4 <_strtod_l+0x7ac>
 80065e2:	4631      	mov	r1, r6
 80065e4:	464a      	mov	r2, r9
 80065e6:	4620      	mov	r0, r4
 80065e8:	f001 ff66 	bl	80084b8 <__lshift>
 80065ec:	4606      	mov	r6, r0
 80065ee:	2800      	cmp	r0, #0
 80065f0:	f43f ae72 	beq.w	80062d8 <_strtod_l+0x490>
 80065f4:	9a05      	ldr	r2, [sp, #20]
 80065f6:	9918      	ldr	r1, [sp, #96]	; 0x60
 80065f8:	4620      	mov	r0, r4
 80065fa:	f001 ffe9 	bl	80085d0 <__mdiff>
 80065fe:	4605      	mov	r5, r0
 8006600:	2800      	cmp	r0, #0
 8006602:	f43f ae69 	beq.w	80062d8 <_strtod_l+0x490>
 8006606:	68c3      	ldr	r3, [r0, #12]
 8006608:	930b      	str	r3, [sp, #44]	; 0x2c
 800660a:	2300      	movs	r3, #0
 800660c:	60c3      	str	r3, [r0, #12]
 800660e:	4631      	mov	r1, r6
 8006610:	f001 ffc2 	bl	8008598 <__mcmp>
 8006614:	2800      	cmp	r0, #0
 8006616:	da60      	bge.n	80066da <_strtod_l+0x892>
 8006618:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800661a:	ea53 030a 	orrs.w	r3, r3, sl
 800661e:	f040 8082 	bne.w	8006726 <_strtod_l+0x8de>
 8006622:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006626:	2b00      	cmp	r3, #0
 8006628:	d17d      	bne.n	8006726 <_strtod_l+0x8de>
 800662a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800662e:	0d1b      	lsrs	r3, r3, #20
 8006630:	051b      	lsls	r3, r3, #20
 8006632:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8006636:	d976      	bls.n	8006726 <_strtod_l+0x8de>
 8006638:	696b      	ldr	r3, [r5, #20]
 800663a:	b913      	cbnz	r3, 8006642 <_strtod_l+0x7fa>
 800663c:	692b      	ldr	r3, [r5, #16]
 800663e:	2b01      	cmp	r3, #1
 8006640:	dd71      	ble.n	8006726 <_strtod_l+0x8de>
 8006642:	4629      	mov	r1, r5
 8006644:	2201      	movs	r2, #1
 8006646:	4620      	mov	r0, r4
 8006648:	f001 ff36 	bl	80084b8 <__lshift>
 800664c:	4631      	mov	r1, r6
 800664e:	4605      	mov	r5, r0
 8006650:	f001 ffa2 	bl	8008598 <__mcmp>
 8006654:	2800      	cmp	r0, #0
 8006656:	dd66      	ble.n	8006726 <_strtod_l+0x8de>
 8006658:	9904      	ldr	r1, [sp, #16]
 800665a:	4a53      	ldr	r2, [pc, #332]	; (80067a8 <_strtod_l+0x960>)
 800665c:	465b      	mov	r3, fp
 800665e:	2900      	cmp	r1, #0
 8006660:	f000 8081 	beq.w	8006766 <_strtod_l+0x91e>
 8006664:	ea02 010b 	and.w	r1, r2, fp
 8006668:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800666c:	dc7b      	bgt.n	8006766 <_strtod_l+0x91e>
 800666e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8006672:	f77f aea9 	ble.w	80063c8 <_strtod_l+0x580>
 8006676:	4b4d      	ldr	r3, [pc, #308]	; (80067ac <_strtod_l+0x964>)
 8006678:	4650      	mov	r0, sl
 800667a:	4659      	mov	r1, fp
 800667c:	2200      	movs	r2, #0
 800667e:	f7f9 ffd3 	bl	8000628 <__aeabi_dmul>
 8006682:	460b      	mov	r3, r1
 8006684:	4303      	orrs	r3, r0
 8006686:	bf08      	it	eq
 8006688:	2322      	moveq	r3, #34	; 0x22
 800668a:	4682      	mov	sl, r0
 800668c:	468b      	mov	fp, r1
 800668e:	bf08      	it	eq
 8006690:	6023      	streq	r3, [r4, #0]
 8006692:	e62b      	b.n	80062ec <_strtod_l+0x4a4>
 8006694:	f04f 32ff 	mov.w	r2, #4294967295
 8006698:	fa02 f303 	lsl.w	r3, r2, r3
 800669c:	ea03 0a0a 	and.w	sl, r3, sl
 80066a0:	e6e3      	b.n	800646a <_strtod_l+0x622>
 80066a2:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 80066a6:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 80066aa:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 80066ae:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 80066b2:	fa01 f308 	lsl.w	r3, r1, r8
 80066b6:	9308      	str	r3, [sp, #32]
 80066b8:	910d      	str	r1, [sp, #52]	; 0x34
 80066ba:	e746      	b.n	800654a <_strtod_l+0x702>
 80066bc:	2300      	movs	r3, #0
 80066be:	9308      	str	r3, [sp, #32]
 80066c0:	2301      	movs	r3, #1
 80066c2:	930d      	str	r3, [sp, #52]	; 0x34
 80066c4:	e741      	b.n	800654a <_strtod_l+0x702>
 80066c6:	9918      	ldr	r1, [sp, #96]	; 0x60
 80066c8:	4642      	mov	r2, r8
 80066ca:	4620      	mov	r0, r4
 80066cc:	f001 fef4 	bl	80084b8 <__lshift>
 80066d0:	9018      	str	r0, [sp, #96]	; 0x60
 80066d2:	2800      	cmp	r0, #0
 80066d4:	f47f af6b 	bne.w	80065ae <_strtod_l+0x766>
 80066d8:	e5fe      	b.n	80062d8 <_strtod_l+0x490>
 80066da:	465f      	mov	r7, fp
 80066dc:	d16e      	bne.n	80067bc <_strtod_l+0x974>
 80066de:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80066e0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80066e4:	b342      	cbz	r2, 8006738 <_strtod_l+0x8f0>
 80066e6:	4a32      	ldr	r2, [pc, #200]	; (80067b0 <_strtod_l+0x968>)
 80066e8:	4293      	cmp	r3, r2
 80066ea:	d128      	bne.n	800673e <_strtod_l+0x8f6>
 80066ec:	9b04      	ldr	r3, [sp, #16]
 80066ee:	4651      	mov	r1, sl
 80066f0:	b1eb      	cbz	r3, 800672e <_strtod_l+0x8e6>
 80066f2:	4b2d      	ldr	r3, [pc, #180]	; (80067a8 <_strtod_l+0x960>)
 80066f4:	403b      	ands	r3, r7
 80066f6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80066fa:	f04f 32ff 	mov.w	r2, #4294967295
 80066fe:	d819      	bhi.n	8006734 <_strtod_l+0x8ec>
 8006700:	0d1b      	lsrs	r3, r3, #20
 8006702:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8006706:	fa02 f303 	lsl.w	r3, r2, r3
 800670a:	4299      	cmp	r1, r3
 800670c:	d117      	bne.n	800673e <_strtod_l+0x8f6>
 800670e:	4b29      	ldr	r3, [pc, #164]	; (80067b4 <_strtod_l+0x96c>)
 8006710:	429f      	cmp	r7, r3
 8006712:	d102      	bne.n	800671a <_strtod_l+0x8d2>
 8006714:	3101      	adds	r1, #1
 8006716:	f43f addf 	beq.w	80062d8 <_strtod_l+0x490>
 800671a:	4b23      	ldr	r3, [pc, #140]	; (80067a8 <_strtod_l+0x960>)
 800671c:	403b      	ands	r3, r7
 800671e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8006722:	f04f 0a00 	mov.w	sl, #0
 8006726:	9b04      	ldr	r3, [sp, #16]
 8006728:	2b00      	cmp	r3, #0
 800672a:	d1a4      	bne.n	8006676 <_strtod_l+0x82e>
 800672c:	e5de      	b.n	80062ec <_strtod_l+0x4a4>
 800672e:	f04f 33ff 	mov.w	r3, #4294967295
 8006732:	e7ea      	b.n	800670a <_strtod_l+0x8c2>
 8006734:	4613      	mov	r3, r2
 8006736:	e7e8      	b.n	800670a <_strtod_l+0x8c2>
 8006738:	ea53 030a 	orrs.w	r3, r3, sl
 800673c:	d08c      	beq.n	8006658 <_strtod_l+0x810>
 800673e:	9b08      	ldr	r3, [sp, #32]
 8006740:	b1db      	cbz	r3, 800677a <_strtod_l+0x932>
 8006742:	423b      	tst	r3, r7
 8006744:	d0ef      	beq.n	8006726 <_strtod_l+0x8de>
 8006746:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006748:	9a04      	ldr	r2, [sp, #16]
 800674a:	4650      	mov	r0, sl
 800674c:	4659      	mov	r1, fp
 800674e:	b1c3      	cbz	r3, 8006782 <_strtod_l+0x93a>
 8006750:	f7ff fb5d 	bl	8005e0e <sulp>
 8006754:	4602      	mov	r2, r0
 8006756:	460b      	mov	r3, r1
 8006758:	ec51 0b18 	vmov	r0, r1, d8
 800675c:	f7f9 fdae 	bl	80002bc <__adddf3>
 8006760:	4682      	mov	sl, r0
 8006762:	468b      	mov	fp, r1
 8006764:	e7df      	b.n	8006726 <_strtod_l+0x8de>
 8006766:	4013      	ands	r3, r2
 8006768:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800676c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8006770:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8006774:	f04f 3aff 	mov.w	sl, #4294967295
 8006778:	e7d5      	b.n	8006726 <_strtod_l+0x8de>
 800677a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800677c:	ea13 0f0a 	tst.w	r3, sl
 8006780:	e7e0      	b.n	8006744 <_strtod_l+0x8fc>
 8006782:	f7ff fb44 	bl	8005e0e <sulp>
 8006786:	4602      	mov	r2, r0
 8006788:	460b      	mov	r3, r1
 800678a:	ec51 0b18 	vmov	r0, r1, d8
 800678e:	f7f9 fd93 	bl	80002b8 <__aeabi_dsub>
 8006792:	2200      	movs	r2, #0
 8006794:	2300      	movs	r3, #0
 8006796:	4682      	mov	sl, r0
 8006798:	468b      	mov	fp, r1
 800679a:	f7fa f9ad 	bl	8000af8 <__aeabi_dcmpeq>
 800679e:	2800      	cmp	r0, #0
 80067a0:	d0c1      	beq.n	8006726 <_strtod_l+0x8de>
 80067a2:	e611      	b.n	80063c8 <_strtod_l+0x580>
 80067a4:	fffffc02 	.word	0xfffffc02
 80067a8:	7ff00000 	.word	0x7ff00000
 80067ac:	39500000 	.word	0x39500000
 80067b0:	000fffff 	.word	0x000fffff
 80067b4:	7fefffff 	.word	0x7fefffff
 80067b8:	0800bb50 	.word	0x0800bb50
 80067bc:	4631      	mov	r1, r6
 80067be:	4628      	mov	r0, r5
 80067c0:	f002 f868 	bl	8008894 <__ratio>
 80067c4:	ec59 8b10 	vmov	r8, r9, d0
 80067c8:	ee10 0a10 	vmov	r0, s0
 80067cc:	2200      	movs	r2, #0
 80067ce:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80067d2:	4649      	mov	r1, r9
 80067d4:	f7fa f9a4 	bl	8000b20 <__aeabi_dcmple>
 80067d8:	2800      	cmp	r0, #0
 80067da:	d07a      	beq.n	80068d2 <_strtod_l+0xa8a>
 80067dc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d04a      	beq.n	8006878 <_strtod_l+0xa30>
 80067e2:	4b95      	ldr	r3, [pc, #596]	; (8006a38 <_strtod_l+0xbf0>)
 80067e4:	2200      	movs	r2, #0
 80067e6:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80067ea:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8006a38 <_strtod_l+0xbf0>
 80067ee:	f04f 0800 	mov.w	r8, #0
 80067f2:	4b92      	ldr	r3, [pc, #584]	; (8006a3c <_strtod_l+0xbf4>)
 80067f4:	403b      	ands	r3, r7
 80067f6:	930d      	str	r3, [sp, #52]	; 0x34
 80067f8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80067fa:	4b91      	ldr	r3, [pc, #580]	; (8006a40 <_strtod_l+0xbf8>)
 80067fc:	429a      	cmp	r2, r3
 80067fe:	f040 80b0 	bne.w	8006962 <_strtod_l+0xb1a>
 8006802:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8006806:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800680a:	ec4b ab10 	vmov	d0, sl, fp
 800680e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8006812:	f001 ff67 	bl	80086e4 <__ulp>
 8006816:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800681a:	ec53 2b10 	vmov	r2, r3, d0
 800681e:	f7f9 ff03 	bl	8000628 <__aeabi_dmul>
 8006822:	4652      	mov	r2, sl
 8006824:	465b      	mov	r3, fp
 8006826:	f7f9 fd49 	bl	80002bc <__adddf3>
 800682a:	460b      	mov	r3, r1
 800682c:	4983      	ldr	r1, [pc, #524]	; (8006a3c <_strtod_l+0xbf4>)
 800682e:	4a85      	ldr	r2, [pc, #532]	; (8006a44 <_strtod_l+0xbfc>)
 8006830:	4019      	ands	r1, r3
 8006832:	4291      	cmp	r1, r2
 8006834:	4682      	mov	sl, r0
 8006836:	d960      	bls.n	80068fa <_strtod_l+0xab2>
 8006838:	ee18 3a90 	vmov	r3, s17
 800683c:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8006840:	4293      	cmp	r3, r2
 8006842:	d104      	bne.n	800684e <_strtod_l+0xa06>
 8006844:	ee18 3a10 	vmov	r3, s16
 8006848:	3301      	adds	r3, #1
 800684a:	f43f ad45 	beq.w	80062d8 <_strtod_l+0x490>
 800684e:	f8df b200 	ldr.w	fp, [pc, #512]	; 8006a50 <_strtod_l+0xc08>
 8006852:	f04f 3aff 	mov.w	sl, #4294967295
 8006856:	9918      	ldr	r1, [sp, #96]	; 0x60
 8006858:	4620      	mov	r0, r4
 800685a:	f001 fc11 	bl	8008080 <_Bfree>
 800685e:	9905      	ldr	r1, [sp, #20]
 8006860:	4620      	mov	r0, r4
 8006862:	f001 fc0d 	bl	8008080 <_Bfree>
 8006866:	4631      	mov	r1, r6
 8006868:	4620      	mov	r0, r4
 800686a:	f001 fc09 	bl	8008080 <_Bfree>
 800686e:	4629      	mov	r1, r5
 8006870:	4620      	mov	r0, r4
 8006872:	f001 fc05 	bl	8008080 <_Bfree>
 8006876:	e61a      	b.n	80064ae <_strtod_l+0x666>
 8006878:	f1ba 0f00 	cmp.w	sl, #0
 800687c:	d11b      	bne.n	80068b6 <_strtod_l+0xa6e>
 800687e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006882:	b9f3      	cbnz	r3, 80068c2 <_strtod_l+0xa7a>
 8006884:	4b6c      	ldr	r3, [pc, #432]	; (8006a38 <_strtod_l+0xbf0>)
 8006886:	2200      	movs	r2, #0
 8006888:	4640      	mov	r0, r8
 800688a:	4649      	mov	r1, r9
 800688c:	f7fa f93e 	bl	8000b0c <__aeabi_dcmplt>
 8006890:	b9d0      	cbnz	r0, 80068c8 <_strtod_l+0xa80>
 8006892:	4640      	mov	r0, r8
 8006894:	4649      	mov	r1, r9
 8006896:	4b6c      	ldr	r3, [pc, #432]	; (8006a48 <_strtod_l+0xc00>)
 8006898:	2200      	movs	r2, #0
 800689a:	f7f9 fec5 	bl	8000628 <__aeabi_dmul>
 800689e:	4680      	mov	r8, r0
 80068a0:	4689      	mov	r9, r1
 80068a2:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80068a6:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 80068aa:	9315      	str	r3, [sp, #84]	; 0x54
 80068ac:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 80068b0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80068b4:	e79d      	b.n	80067f2 <_strtod_l+0x9aa>
 80068b6:	f1ba 0f01 	cmp.w	sl, #1
 80068ba:	d102      	bne.n	80068c2 <_strtod_l+0xa7a>
 80068bc:	2f00      	cmp	r7, #0
 80068be:	f43f ad83 	beq.w	80063c8 <_strtod_l+0x580>
 80068c2:	4b62      	ldr	r3, [pc, #392]	; (8006a4c <_strtod_l+0xc04>)
 80068c4:	2200      	movs	r2, #0
 80068c6:	e78e      	b.n	80067e6 <_strtod_l+0x99e>
 80068c8:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8006a48 <_strtod_l+0xc00>
 80068cc:	f04f 0800 	mov.w	r8, #0
 80068d0:	e7e7      	b.n	80068a2 <_strtod_l+0xa5a>
 80068d2:	4b5d      	ldr	r3, [pc, #372]	; (8006a48 <_strtod_l+0xc00>)
 80068d4:	4640      	mov	r0, r8
 80068d6:	4649      	mov	r1, r9
 80068d8:	2200      	movs	r2, #0
 80068da:	f7f9 fea5 	bl	8000628 <__aeabi_dmul>
 80068de:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80068e0:	4680      	mov	r8, r0
 80068e2:	4689      	mov	r9, r1
 80068e4:	b933      	cbnz	r3, 80068f4 <_strtod_l+0xaac>
 80068e6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80068ea:	900e      	str	r0, [sp, #56]	; 0x38
 80068ec:	930f      	str	r3, [sp, #60]	; 0x3c
 80068ee:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 80068f2:	e7dd      	b.n	80068b0 <_strtod_l+0xa68>
 80068f4:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 80068f8:	e7f9      	b.n	80068ee <_strtod_l+0xaa6>
 80068fa:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 80068fe:	9b04      	ldr	r3, [sp, #16]
 8006900:	2b00      	cmp	r3, #0
 8006902:	d1a8      	bne.n	8006856 <_strtod_l+0xa0e>
 8006904:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8006908:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800690a:	0d1b      	lsrs	r3, r3, #20
 800690c:	051b      	lsls	r3, r3, #20
 800690e:	429a      	cmp	r2, r3
 8006910:	d1a1      	bne.n	8006856 <_strtod_l+0xa0e>
 8006912:	4640      	mov	r0, r8
 8006914:	4649      	mov	r1, r9
 8006916:	f7fa fa1f 	bl	8000d58 <__aeabi_d2lz>
 800691a:	f7f9 fe57 	bl	80005cc <__aeabi_l2d>
 800691e:	4602      	mov	r2, r0
 8006920:	460b      	mov	r3, r1
 8006922:	4640      	mov	r0, r8
 8006924:	4649      	mov	r1, r9
 8006926:	f7f9 fcc7 	bl	80002b8 <__aeabi_dsub>
 800692a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800692c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006930:	ea43 030a 	orr.w	r3, r3, sl
 8006934:	4313      	orrs	r3, r2
 8006936:	4680      	mov	r8, r0
 8006938:	4689      	mov	r9, r1
 800693a:	d055      	beq.n	80069e8 <_strtod_l+0xba0>
 800693c:	a336      	add	r3, pc, #216	; (adr r3, 8006a18 <_strtod_l+0xbd0>)
 800693e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006942:	f7fa f8e3 	bl	8000b0c <__aeabi_dcmplt>
 8006946:	2800      	cmp	r0, #0
 8006948:	f47f acd0 	bne.w	80062ec <_strtod_l+0x4a4>
 800694c:	a334      	add	r3, pc, #208	; (adr r3, 8006a20 <_strtod_l+0xbd8>)
 800694e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006952:	4640      	mov	r0, r8
 8006954:	4649      	mov	r1, r9
 8006956:	f7fa f8f7 	bl	8000b48 <__aeabi_dcmpgt>
 800695a:	2800      	cmp	r0, #0
 800695c:	f43f af7b 	beq.w	8006856 <_strtod_l+0xa0e>
 8006960:	e4c4      	b.n	80062ec <_strtod_l+0x4a4>
 8006962:	9b04      	ldr	r3, [sp, #16]
 8006964:	b333      	cbz	r3, 80069b4 <_strtod_l+0xb6c>
 8006966:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006968:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800696c:	d822      	bhi.n	80069b4 <_strtod_l+0xb6c>
 800696e:	a32e      	add	r3, pc, #184	; (adr r3, 8006a28 <_strtod_l+0xbe0>)
 8006970:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006974:	4640      	mov	r0, r8
 8006976:	4649      	mov	r1, r9
 8006978:	f7fa f8d2 	bl	8000b20 <__aeabi_dcmple>
 800697c:	b1a0      	cbz	r0, 80069a8 <_strtod_l+0xb60>
 800697e:	4649      	mov	r1, r9
 8006980:	4640      	mov	r0, r8
 8006982:	f7fa f929 	bl	8000bd8 <__aeabi_d2uiz>
 8006986:	2801      	cmp	r0, #1
 8006988:	bf38      	it	cc
 800698a:	2001      	movcc	r0, #1
 800698c:	f7f9 fdd2 	bl	8000534 <__aeabi_ui2d>
 8006990:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006992:	4680      	mov	r8, r0
 8006994:	4689      	mov	r9, r1
 8006996:	bb23      	cbnz	r3, 80069e2 <_strtod_l+0xb9a>
 8006998:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800699c:	9010      	str	r0, [sp, #64]	; 0x40
 800699e:	9311      	str	r3, [sp, #68]	; 0x44
 80069a0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80069a4:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80069a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80069aa:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80069ac:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 80069b0:	1a9b      	subs	r3, r3, r2
 80069b2:	9309      	str	r3, [sp, #36]	; 0x24
 80069b4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80069b8:	eeb0 0a48 	vmov.f32	s0, s16
 80069bc:	eef0 0a68 	vmov.f32	s1, s17
 80069c0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80069c4:	f001 fe8e 	bl	80086e4 <__ulp>
 80069c8:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80069cc:	ec53 2b10 	vmov	r2, r3, d0
 80069d0:	f7f9 fe2a 	bl	8000628 <__aeabi_dmul>
 80069d4:	ec53 2b18 	vmov	r2, r3, d8
 80069d8:	f7f9 fc70 	bl	80002bc <__adddf3>
 80069dc:	4682      	mov	sl, r0
 80069de:	468b      	mov	fp, r1
 80069e0:	e78d      	b.n	80068fe <_strtod_l+0xab6>
 80069e2:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 80069e6:	e7db      	b.n	80069a0 <_strtod_l+0xb58>
 80069e8:	a311      	add	r3, pc, #68	; (adr r3, 8006a30 <_strtod_l+0xbe8>)
 80069ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069ee:	f7fa f88d 	bl	8000b0c <__aeabi_dcmplt>
 80069f2:	e7b2      	b.n	800695a <_strtod_l+0xb12>
 80069f4:	2300      	movs	r3, #0
 80069f6:	930a      	str	r3, [sp, #40]	; 0x28
 80069f8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80069fa:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80069fc:	6013      	str	r3, [r2, #0]
 80069fe:	f7ff ba6b 	b.w	8005ed8 <_strtod_l+0x90>
 8006a02:	2a65      	cmp	r2, #101	; 0x65
 8006a04:	f43f ab5f 	beq.w	80060c6 <_strtod_l+0x27e>
 8006a08:	2a45      	cmp	r2, #69	; 0x45
 8006a0a:	f43f ab5c 	beq.w	80060c6 <_strtod_l+0x27e>
 8006a0e:	2301      	movs	r3, #1
 8006a10:	f7ff bb94 	b.w	800613c <_strtod_l+0x2f4>
 8006a14:	f3af 8000 	nop.w
 8006a18:	94a03595 	.word	0x94a03595
 8006a1c:	3fdfffff 	.word	0x3fdfffff
 8006a20:	35afe535 	.word	0x35afe535
 8006a24:	3fe00000 	.word	0x3fe00000
 8006a28:	ffc00000 	.word	0xffc00000
 8006a2c:	41dfffff 	.word	0x41dfffff
 8006a30:	94a03595 	.word	0x94a03595
 8006a34:	3fcfffff 	.word	0x3fcfffff
 8006a38:	3ff00000 	.word	0x3ff00000
 8006a3c:	7ff00000 	.word	0x7ff00000
 8006a40:	7fe00000 	.word	0x7fe00000
 8006a44:	7c9fffff 	.word	0x7c9fffff
 8006a48:	3fe00000 	.word	0x3fe00000
 8006a4c:	bff00000 	.word	0xbff00000
 8006a50:	7fefffff 	.word	0x7fefffff

08006a54 <_strtod_r>:
 8006a54:	4b01      	ldr	r3, [pc, #4]	; (8006a5c <_strtod_r+0x8>)
 8006a56:	f7ff b9f7 	b.w	8005e48 <_strtod_l>
 8006a5a:	bf00      	nop
 8006a5c:	20000078 	.word	0x20000078

08006a60 <_strtol_l.constprop.0>:
 8006a60:	2b01      	cmp	r3, #1
 8006a62:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006a66:	d001      	beq.n	8006a6c <_strtol_l.constprop.0+0xc>
 8006a68:	2b24      	cmp	r3, #36	; 0x24
 8006a6a:	d906      	bls.n	8006a7a <_strtol_l.constprop.0+0x1a>
 8006a6c:	f7fe fa8c 	bl	8004f88 <__errno>
 8006a70:	2316      	movs	r3, #22
 8006a72:	6003      	str	r3, [r0, #0]
 8006a74:	2000      	movs	r0, #0
 8006a76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a7a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8006b60 <_strtol_l.constprop.0+0x100>
 8006a7e:	460d      	mov	r5, r1
 8006a80:	462e      	mov	r6, r5
 8006a82:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006a86:	f814 700c 	ldrb.w	r7, [r4, ip]
 8006a8a:	f017 0708 	ands.w	r7, r7, #8
 8006a8e:	d1f7      	bne.n	8006a80 <_strtol_l.constprop.0+0x20>
 8006a90:	2c2d      	cmp	r4, #45	; 0x2d
 8006a92:	d132      	bne.n	8006afa <_strtol_l.constprop.0+0x9a>
 8006a94:	782c      	ldrb	r4, [r5, #0]
 8006a96:	2701      	movs	r7, #1
 8006a98:	1cb5      	adds	r5, r6, #2
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d05b      	beq.n	8006b56 <_strtol_l.constprop.0+0xf6>
 8006a9e:	2b10      	cmp	r3, #16
 8006aa0:	d109      	bne.n	8006ab6 <_strtol_l.constprop.0+0x56>
 8006aa2:	2c30      	cmp	r4, #48	; 0x30
 8006aa4:	d107      	bne.n	8006ab6 <_strtol_l.constprop.0+0x56>
 8006aa6:	782c      	ldrb	r4, [r5, #0]
 8006aa8:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8006aac:	2c58      	cmp	r4, #88	; 0x58
 8006aae:	d14d      	bne.n	8006b4c <_strtol_l.constprop.0+0xec>
 8006ab0:	786c      	ldrb	r4, [r5, #1]
 8006ab2:	2310      	movs	r3, #16
 8006ab4:	3502      	adds	r5, #2
 8006ab6:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8006aba:	f108 38ff 	add.w	r8, r8, #4294967295
 8006abe:	f04f 0c00 	mov.w	ip, #0
 8006ac2:	fbb8 f9f3 	udiv	r9, r8, r3
 8006ac6:	4666      	mov	r6, ip
 8006ac8:	fb03 8a19 	mls	sl, r3, r9, r8
 8006acc:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8006ad0:	f1be 0f09 	cmp.w	lr, #9
 8006ad4:	d816      	bhi.n	8006b04 <_strtol_l.constprop.0+0xa4>
 8006ad6:	4674      	mov	r4, lr
 8006ad8:	42a3      	cmp	r3, r4
 8006ada:	dd24      	ble.n	8006b26 <_strtol_l.constprop.0+0xc6>
 8006adc:	f1bc 0f00 	cmp.w	ip, #0
 8006ae0:	db1e      	blt.n	8006b20 <_strtol_l.constprop.0+0xc0>
 8006ae2:	45b1      	cmp	r9, r6
 8006ae4:	d31c      	bcc.n	8006b20 <_strtol_l.constprop.0+0xc0>
 8006ae6:	d101      	bne.n	8006aec <_strtol_l.constprop.0+0x8c>
 8006ae8:	45a2      	cmp	sl, r4
 8006aea:	db19      	blt.n	8006b20 <_strtol_l.constprop.0+0xc0>
 8006aec:	fb06 4603 	mla	r6, r6, r3, r4
 8006af0:	f04f 0c01 	mov.w	ip, #1
 8006af4:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006af8:	e7e8      	b.n	8006acc <_strtol_l.constprop.0+0x6c>
 8006afa:	2c2b      	cmp	r4, #43	; 0x2b
 8006afc:	bf04      	itt	eq
 8006afe:	782c      	ldrbeq	r4, [r5, #0]
 8006b00:	1cb5      	addeq	r5, r6, #2
 8006b02:	e7ca      	b.n	8006a9a <_strtol_l.constprop.0+0x3a>
 8006b04:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8006b08:	f1be 0f19 	cmp.w	lr, #25
 8006b0c:	d801      	bhi.n	8006b12 <_strtol_l.constprop.0+0xb2>
 8006b0e:	3c37      	subs	r4, #55	; 0x37
 8006b10:	e7e2      	b.n	8006ad8 <_strtol_l.constprop.0+0x78>
 8006b12:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8006b16:	f1be 0f19 	cmp.w	lr, #25
 8006b1a:	d804      	bhi.n	8006b26 <_strtol_l.constprop.0+0xc6>
 8006b1c:	3c57      	subs	r4, #87	; 0x57
 8006b1e:	e7db      	b.n	8006ad8 <_strtol_l.constprop.0+0x78>
 8006b20:	f04f 3cff 	mov.w	ip, #4294967295
 8006b24:	e7e6      	b.n	8006af4 <_strtol_l.constprop.0+0x94>
 8006b26:	f1bc 0f00 	cmp.w	ip, #0
 8006b2a:	da05      	bge.n	8006b38 <_strtol_l.constprop.0+0xd8>
 8006b2c:	2322      	movs	r3, #34	; 0x22
 8006b2e:	6003      	str	r3, [r0, #0]
 8006b30:	4646      	mov	r6, r8
 8006b32:	b942      	cbnz	r2, 8006b46 <_strtol_l.constprop.0+0xe6>
 8006b34:	4630      	mov	r0, r6
 8006b36:	e79e      	b.n	8006a76 <_strtol_l.constprop.0+0x16>
 8006b38:	b107      	cbz	r7, 8006b3c <_strtol_l.constprop.0+0xdc>
 8006b3a:	4276      	negs	r6, r6
 8006b3c:	2a00      	cmp	r2, #0
 8006b3e:	d0f9      	beq.n	8006b34 <_strtol_l.constprop.0+0xd4>
 8006b40:	f1bc 0f00 	cmp.w	ip, #0
 8006b44:	d000      	beq.n	8006b48 <_strtol_l.constprop.0+0xe8>
 8006b46:	1e69      	subs	r1, r5, #1
 8006b48:	6011      	str	r1, [r2, #0]
 8006b4a:	e7f3      	b.n	8006b34 <_strtol_l.constprop.0+0xd4>
 8006b4c:	2430      	movs	r4, #48	; 0x30
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d1b1      	bne.n	8006ab6 <_strtol_l.constprop.0+0x56>
 8006b52:	2308      	movs	r3, #8
 8006b54:	e7af      	b.n	8006ab6 <_strtol_l.constprop.0+0x56>
 8006b56:	2c30      	cmp	r4, #48	; 0x30
 8006b58:	d0a5      	beq.n	8006aa6 <_strtol_l.constprop.0+0x46>
 8006b5a:	230a      	movs	r3, #10
 8006b5c:	e7ab      	b.n	8006ab6 <_strtol_l.constprop.0+0x56>
 8006b5e:	bf00      	nop
 8006b60:	0800bb79 	.word	0x0800bb79

08006b64 <_strtol_r>:
 8006b64:	f7ff bf7c 	b.w	8006a60 <_strtol_l.constprop.0>

08006b68 <_write_r>:
 8006b68:	b538      	push	{r3, r4, r5, lr}
 8006b6a:	4d07      	ldr	r5, [pc, #28]	; (8006b88 <_write_r+0x20>)
 8006b6c:	4604      	mov	r4, r0
 8006b6e:	4608      	mov	r0, r1
 8006b70:	4611      	mov	r1, r2
 8006b72:	2200      	movs	r2, #0
 8006b74:	602a      	str	r2, [r5, #0]
 8006b76:	461a      	mov	r2, r3
 8006b78:	f7fb fd12 	bl	80025a0 <_write>
 8006b7c:	1c43      	adds	r3, r0, #1
 8006b7e:	d102      	bne.n	8006b86 <_write_r+0x1e>
 8006b80:	682b      	ldr	r3, [r5, #0]
 8006b82:	b103      	cbz	r3, 8006b86 <_write_r+0x1e>
 8006b84:	6023      	str	r3, [r4, #0]
 8006b86:	bd38      	pop	{r3, r4, r5, pc}
 8006b88:	20000cb4 	.word	0x20000cb4

08006b8c <_close_r>:
 8006b8c:	b538      	push	{r3, r4, r5, lr}
 8006b8e:	4d06      	ldr	r5, [pc, #24]	; (8006ba8 <_close_r+0x1c>)
 8006b90:	2300      	movs	r3, #0
 8006b92:	4604      	mov	r4, r0
 8006b94:	4608      	mov	r0, r1
 8006b96:	602b      	str	r3, [r5, #0]
 8006b98:	f7fb fd1e 	bl	80025d8 <_close>
 8006b9c:	1c43      	adds	r3, r0, #1
 8006b9e:	d102      	bne.n	8006ba6 <_close_r+0x1a>
 8006ba0:	682b      	ldr	r3, [r5, #0]
 8006ba2:	b103      	cbz	r3, 8006ba6 <_close_r+0x1a>
 8006ba4:	6023      	str	r3, [r4, #0]
 8006ba6:	bd38      	pop	{r3, r4, r5, pc}
 8006ba8:	20000cb4 	.word	0x20000cb4

08006bac <quorem>:
 8006bac:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006bb0:	6903      	ldr	r3, [r0, #16]
 8006bb2:	690c      	ldr	r4, [r1, #16]
 8006bb4:	42a3      	cmp	r3, r4
 8006bb6:	4607      	mov	r7, r0
 8006bb8:	f2c0 8081 	blt.w	8006cbe <quorem+0x112>
 8006bbc:	3c01      	subs	r4, #1
 8006bbe:	f101 0814 	add.w	r8, r1, #20
 8006bc2:	f100 0514 	add.w	r5, r0, #20
 8006bc6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006bca:	9301      	str	r3, [sp, #4]
 8006bcc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006bd0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006bd4:	3301      	adds	r3, #1
 8006bd6:	429a      	cmp	r2, r3
 8006bd8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006bdc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006be0:	fbb2 f6f3 	udiv	r6, r2, r3
 8006be4:	d331      	bcc.n	8006c4a <quorem+0x9e>
 8006be6:	f04f 0e00 	mov.w	lr, #0
 8006bea:	4640      	mov	r0, r8
 8006bec:	46ac      	mov	ip, r5
 8006bee:	46f2      	mov	sl, lr
 8006bf0:	f850 2b04 	ldr.w	r2, [r0], #4
 8006bf4:	b293      	uxth	r3, r2
 8006bf6:	fb06 e303 	mla	r3, r6, r3, lr
 8006bfa:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8006bfe:	b29b      	uxth	r3, r3
 8006c00:	ebaa 0303 	sub.w	r3, sl, r3
 8006c04:	f8dc a000 	ldr.w	sl, [ip]
 8006c08:	0c12      	lsrs	r2, r2, #16
 8006c0a:	fa13 f38a 	uxtah	r3, r3, sl
 8006c0e:	fb06 e202 	mla	r2, r6, r2, lr
 8006c12:	9300      	str	r3, [sp, #0]
 8006c14:	9b00      	ldr	r3, [sp, #0]
 8006c16:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006c1a:	b292      	uxth	r2, r2
 8006c1c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8006c20:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006c24:	f8bd 3000 	ldrh.w	r3, [sp]
 8006c28:	4581      	cmp	r9, r0
 8006c2a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006c2e:	f84c 3b04 	str.w	r3, [ip], #4
 8006c32:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8006c36:	d2db      	bcs.n	8006bf0 <quorem+0x44>
 8006c38:	f855 300b 	ldr.w	r3, [r5, fp]
 8006c3c:	b92b      	cbnz	r3, 8006c4a <quorem+0x9e>
 8006c3e:	9b01      	ldr	r3, [sp, #4]
 8006c40:	3b04      	subs	r3, #4
 8006c42:	429d      	cmp	r5, r3
 8006c44:	461a      	mov	r2, r3
 8006c46:	d32e      	bcc.n	8006ca6 <quorem+0xfa>
 8006c48:	613c      	str	r4, [r7, #16]
 8006c4a:	4638      	mov	r0, r7
 8006c4c:	f001 fca4 	bl	8008598 <__mcmp>
 8006c50:	2800      	cmp	r0, #0
 8006c52:	db24      	blt.n	8006c9e <quorem+0xf2>
 8006c54:	3601      	adds	r6, #1
 8006c56:	4628      	mov	r0, r5
 8006c58:	f04f 0c00 	mov.w	ip, #0
 8006c5c:	f858 2b04 	ldr.w	r2, [r8], #4
 8006c60:	f8d0 e000 	ldr.w	lr, [r0]
 8006c64:	b293      	uxth	r3, r2
 8006c66:	ebac 0303 	sub.w	r3, ip, r3
 8006c6a:	0c12      	lsrs	r2, r2, #16
 8006c6c:	fa13 f38e 	uxtah	r3, r3, lr
 8006c70:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8006c74:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006c78:	b29b      	uxth	r3, r3
 8006c7a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006c7e:	45c1      	cmp	r9, r8
 8006c80:	f840 3b04 	str.w	r3, [r0], #4
 8006c84:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8006c88:	d2e8      	bcs.n	8006c5c <quorem+0xb0>
 8006c8a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006c8e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006c92:	b922      	cbnz	r2, 8006c9e <quorem+0xf2>
 8006c94:	3b04      	subs	r3, #4
 8006c96:	429d      	cmp	r5, r3
 8006c98:	461a      	mov	r2, r3
 8006c9a:	d30a      	bcc.n	8006cb2 <quorem+0x106>
 8006c9c:	613c      	str	r4, [r7, #16]
 8006c9e:	4630      	mov	r0, r6
 8006ca0:	b003      	add	sp, #12
 8006ca2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ca6:	6812      	ldr	r2, [r2, #0]
 8006ca8:	3b04      	subs	r3, #4
 8006caa:	2a00      	cmp	r2, #0
 8006cac:	d1cc      	bne.n	8006c48 <quorem+0x9c>
 8006cae:	3c01      	subs	r4, #1
 8006cb0:	e7c7      	b.n	8006c42 <quorem+0x96>
 8006cb2:	6812      	ldr	r2, [r2, #0]
 8006cb4:	3b04      	subs	r3, #4
 8006cb6:	2a00      	cmp	r2, #0
 8006cb8:	d1f0      	bne.n	8006c9c <quorem+0xf0>
 8006cba:	3c01      	subs	r4, #1
 8006cbc:	e7eb      	b.n	8006c96 <quorem+0xea>
 8006cbe:	2000      	movs	r0, #0
 8006cc0:	e7ee      	b.n	8006ca0 <quorem+0xf4>
 8006cc2:	0000      	movs	r0, r0
 8006cc4:	0000      	movs	r0, r0
	...

08006cc8 <_dtoa_r>:
 8006cc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ccc:	ed2d 8b04 	vpush	{d8-d9}
 8006cd0:	ec57 6b10 	vmov	r6, r7, d0
 8006cd4:	b093      	sub	sp, #76	; 0x4c
 8006cd6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006cd8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8006cdc:	9106      	str	r1, [sp, #24]
 8006cde:	ee10 aa10 	vmov	sl, s0
 8006ce2:	4604      	mov	r4, r0
 8006ce4:	9209      	str	r2, [sp, #36]	; 0x24
 8006ce6:	930c      	str	r3, [sp, #48]	; 0x30
 8006ce8:	46bb      	mov	fp, r7
 8006cea:	b975      	cbnz	r5, 8006d0a <_dtoa_r+0x42>
 8006cec:	2010      	movs	r0, #16
 8006cee:	f001 f95f 	bl	8007fb0 <malloc>
 8006cf2:	4602      	mov	r2, r0
 8006cf4:	6260      	str	r0, [r4, #36]	; 0x24
 8006cf6:	b920      	cbnz	r0, 8006d02 <_dtoa_r+0x3a>
 8006cf8:	4ba7      	ldr	r3, [pc, #668]	; (8006f98 <_dtoa_r+0x2d0>)
 8006cfa:	21ea      	movs	r1, #234	; 0xea
 8006cfc:	48a7      	ldr	r0, [pc, #668]	; (8006f9c <_dtoa_r+0x2d4>)
 8006cfe:	f002 fceb 	bl	80096d8 <__assert_func>
 8006d02:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006d06:	6005      	str	r5, [r0, #0]
 8006d08:	60c5      	str	r5, [r0, #12]
 8006d0a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006d0c:	6819      	ldr	r1, [r3, #0]
 8006d0e:	b151      	cbz	r1, 8006d26 <_dtoa_r+0x5e>
 8006d10:	685a      	ldr	r2, [r3, #4]
 8006d12:	604a      	str	r2, [r1, #4]
 8006d14:	2301      	movs	r3, #1
 8006d16:	4093      	lsls	r3, r2
 8006d18:	608b      	str	r3, [r1, #8]
 8006d1a:	4620      	mov	r0, r4
 8006d1c:	f001 f9b0 	bl	8008080 <_Bfree>
 8006d20:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006d22:	2200      	movs	r2, #0
 8006d24:	601a      	str	r2, [r3, #0]
 8006d26:	1e3b      	subs	r3, r7, #0
 8006d28:	bfaa      	itet	ge
 8006d2a:	2300      	movge	r3, #0
 8006d2c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8006d30:	f8c8 3000 	strge.w	r3, [r8]
 8006d34:	4b9a      	ldr	r3, [pc, #616]	; (8006fa0 <_dtoa_r+0x2d8>)
 8006d36:	bfbc      	itt	lt
 8006d38:	2201      	movlt	r2, #1
 8006d3a:	f8c8 2000 	strlt.w	r2, [r8]
 8006d3e:	ea33 030b 	bics.w	r3, r3, fp
 8006d42:	d11b      	bne.n	8006d7c <_dtoa_r+0xb4>
 8006d44:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006d46:	f242 730f 	movw	r3, #9999	; 0x270f
 8006d4a:	6013      	str	r3, [r2, #0]
 8006d4c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006d50:	4333      	orrs	r3, r6
 8006d52:	f000 8592 	beq.w	800787a <_dtoa_r+0xbb2>
 8006d56:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006d58:	b963      	cbnz	r3, 8006d74 <_dtoa_r+0xac>
 8006d5a:	4b92      	ldr	r3, [pc, #584]	; (8006fa4 <_dtoa_r+0x2dc>)
 8006d5c:	e022      	b.n	8006da4 <_dtoa_r+0xdc>
 8006d5e:	4b92      	ldr	r3, [pc, #584]	; (8006fa8 <_dtoa_r+0x2e0>)
 8006d60:	9301      	str	r3, [sp, #4]
 8006d62:	3308      	adds	r3, #8
 8006d64:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006d66:	6013      	str	r3, [r2, #0]
 8006d68:	9801      	ldr	r0, [sp, #4]
 8006d6a:	b013      	add	sp, #76	; 0x4c
 8006d6c:	ecbd 8b04 	vpop	{d8-d9}
 8006d70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d74:	4b8b      	ldr	r3, [pc, #556]	; (8006fa4 <_dtoa_r+0x2dc>)
 8006d76:	9301      	str	r3, [sp, #4]
 8006d78:	3303      	adds	r3, #3
 8006d7a:	e7f3      	b.n	8006d64 <_dtoa_r+0x9c>
 8006d7c:	2200      	movs	r2, #0
 8006d7e:	2300      	movs	r3, #0
 8006d80:	4650      	mov	r0, sl
 8006d82:	4659      	mov	r1, fp
 8006d84:	f7f9 feb8 	bl	8000af8 <__aeabi_dcmpeq>
 8006d88:	ec4b ab19 	vmov	d9, sl, fp
 8006d8c:	4680      	mov	r8, r0
 8006d8e:	b158      	cbz	r0, 8006da8 <_dtoa_r+0xe0>
 8006d90:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006d92:	2301      	movs	r3, #1
 8006d94:	6013      	str	r3, [r2, #0]
 8006d96:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	f000 856b 	beq.w	8007874 <_dtoa_r+0xbac>
 8006d9e:	4883      	ldr	r0, [pc, #524]	; (8006fac <_dtoa_r+0x2e4>)
 8006da0:	6018      	str	r0, [r3, #0]
 8006da2:	1e43      	subs	r3, r0, #1
 8006da4:	9301      	str	r3, [sp, #4]
 8006da6:	e7df      	b.n	8006d68 <_dtoa_r+0xa0>
 8006da8:	ec4b ab10 	vmov	d0, sl, fp
 8006dac:	aa10      	add	r2, sp, #64	; 0x40
 8006dae:	a911      	add	r1, sp, #68	; 0x44
 8006db0:	4620      	mov	r0, r4
 8006db2:	f001 fd13 	bl	80087dc <__d2b>
 8006db6:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8006dba:	ee08 0a10 	vmov	s16, r0
 8006dbe:	2d00      	cmp	r5, #0
 8006dc0:	f000 8084 	beq.w	8006ecc <_dtoa_r+0x204>
 8006dc4:	ee19 3a90 	vmov	r3, s19
 8006dc8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006dcc:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8006dd0:	4656      	mov	r6, sl
 8006dd2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8006dd6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8006dda:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8006dde:	4b74      	ldr	r3, [pc, #464]	; (8006fb0 <_dtoa_r+0x2e8>)
 8006de0:	2200      	movs	r2, #0
 8006de2:	4630      	mov	r0, r6
 8006de4:	4639      	mov	r1, r7
 8006de6:	f7f9 fa67 	bl	80002b8 <__aeabi_dsub>
 8006dea:	a365      	add	r3, pc, #404	; (adr r3, 8006f80 <_dtoa_r+0x2b8>)
 8006dec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006df0:	f7f9 fc1a 	bl	8000628 <__aeabi_dmul>
 8006df4:	a364      	add	r3, pc, #400	; (adr r3, 8006f88 <_dtoa_r+0x2c0>)
 8006df6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dfa:	f7f9 fa5f 	bl	80002bc <__adddf3>
 8006dfe:	4606      	mov	r6, r0
 8006e00:	4628      	mov	r0, r5
 8006e02:	460f      	mov	r7, r1
 8006e04:	f7f9 fba6 	bl	8000554 <__aeabi_i2d>
 8006e08:	a361      	add	r3, pc, #388	; (adr r3, 8006f90 <_dtoa_r+0x2c8>)
 8006e0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e0e:	f7f9 fc0b 	bl	8000628 <__aeabi_dmul>
 8006e12:	4602      	mov	r2, r0
 8006e14:	460b      	mov	r3, r1
 8006e16:	4630      	mov	r0, r6
 8006e18:	4639      	mov	r1, r7
 8006e1a:	f7f9 fa4f 	bl	80002bc <__adddf3>
 8006e1e:	4606      	mov	r6, r0
 8006e20:	460f      	mov	r7, r1
 8006e22:	f7f9 feb1 	bl	8000b88 <__aeabi_d2iz>
 8006e26:	2200      	movs	r2, #0
 8006e28:	9000      	str	r0, [sp, #0]
 8006e2a:	2300      	movs	r3, #0
 8006e2c:	4630      	mov	r0, r6
 8006e2e:	4639      	mov	r1, r7
 8006e30:	f7f9 fe6c 	bl	8000b0c <__aeabi_dcmplt>
 8006e34:	b150      	cbz	r0, 8006e4c <_dtoa_r+0x184>
 8006e36:	9800      	ldr	r0, [sp, #0]
 8006e38:	f7f9 fb8c 	bl	8000554 <__aeabi_i2d>
 8006e3c:	4632      	mov	r2, r6
 8006e3e:	463b      	mov	r3, r7
 8006e40:	f7f9 fe5a 	bl	8000af8 <__aeabi_dcmpeq>
 8006e44:	b910      	cbnz	r0, 8006e4c <_dtoa_r+0x184>
 8006e46:	9b00      	ldr	r3, [sp, #0]
 8006e48:	3b01      	subs	r3, #1
 8006e4a:	9300      	str	r3, [sp, #0]
 8006e4c:	9b00      	ldr	r3, [sp, #0]
 8006e4e:	2b16      	cmp	r3, #22
 8006e50:	d85a      	bhi.n	8006f08 <_dtoa_r+0x240>
 8006e52:	9a00      	ldr	r2, [sp, #0]
 8006e54:	4b57      	ldr	r3, [pc, #348]	; (8006fb4 <_dtoa_r+0x2ec>)
 8006e56:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006e5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e5e:	ec51 0b19 	vmov	r0, r1, d9
 8006e62:	f7f9 fe53 	bl	8000b0c <__aeabi_dcmplt>
 8006e66:	2800      	cmp	r0, #0
 8006e68:	d050      	beq.n	8006f0c <_dtoa_r+0x244>
 8006e6a:	9b00      	ldr	r3, [sp, #0]
 8006e6c:	3b01      	subs	r3, #1
 8006e6e:	9300      	str	r3, [sp, #0]
 8006e70:	2300      	movs	r3, #0
 8006e72:	930b      	str	r3, [sp, #44]	; 0x2c
 8006e74:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006e76:	1b5d      	subs	r5, r3, r5
 8006e78:	1e6b      	subs	r3, r5, #1
 8006e7a:	9305      	str	r3, [sp, #20]
 8006e7c:	bf45      	ittet	mi
 8006e7e:	f1c5 0301 	rsbmi	r3, r5, #1
 8006e82:	9304      	strmi	r3, [sp, #16]
 8006e84:	2300      	movpl	r3, #0
 8006e86:	2300      	movmi	r3, #0
 8006e88:	bf4c      	ite	mi
 8006e8a:	9305      	strmi	r3, [sp, #20]
 8006e8c:	9304      	strpl	r3, [sp, #16]
 8006e8e:	9b00      	ldr	r3, [sp, #0]
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	db3d      	blt.n	8006f10 <_dtoa_r+0x248>
 8006e94:	9b05      	ldr	r3, [sp, #20]
 8006e96:	9a00      	ldr	r2, [sp, #0]
 8006e98:	920a      	str	r2, [sp, #40]	; 0x28
 8006e9a:	4413      	add	r3, r2
 8006e9c:	9305      	str	r3, [sp, #20]
 8006e9e:	2300      	movs	r3, #0
 8006ea0:	9307      	str	r3, [sp, #28]
 8006ea2:	9b06      	ldr	r3, [sp, #24]
 8006ea4:	2b09      	cmp	r3, #9
 8006ea6:	f200 8089 	bhi.w	8006fbc <_dtoa_r+0x2f4>
 8006eaa:	2b05      	cmp	r3, #5
 8006eac:	bfc4      	itt	gt
 8006eae:	3b04      	subgt	r3, #4
 8006eb0:	9306      	strgt	r3, [sp, #24]
 8006eb2:	9b06      	ldr	r3, [sp, #24]
 8006eb4:	f1a3 0302 	sub.w	r3, r3, #2
 8006eb8:	bfcc      	ite	gt
 8006eba:	2500      	movgt	r5, #0
 8006ebc:	2501      	movle	r5, #1
 8006ebe:	2b03      	cmp	r3, #3
 8006ec0:	f200 8087 	bhi.w	8006fd2 <_dtoa_r+0x30a>
 8006ec4:	e8df f003 	tbb	[pc, r3]
 8006ec8:	59383a2d 	.word	0x59383a2d
 8006ecc:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8006ed0:	441d      	add	r5, r3
 8006ed2:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8006ed6:	2b20      	cmp	r3, #32
 8006ed8:	bfc1      	itttt	gt
 8006eda:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8006ede:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8006ee2:	fa0b f303 	lslgt.w	r3, fp, r3
 8006ee6:	fa26 f000 	lsrgt.w	r0, r6, r0
 8006eea:	bfda      	itte	le
 8006eec:	f1c3 0320 	rsble	r3, r3, #32
 8006ef0:	fa06 f003 	lslle.w	r0, r6, r3
 8006ef4:	4318      	orrgt	r0, r3
 8006ef6:	f7f9 fb1d 	bl	8000534 <__aeabi_ui2d>
 8006efa:	2301      	movs	r3, #1
 8006efc:	4606      	mov	r6, r0
 8006efe:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8006f02:	3d01      	subs	r5, #1
 8006f04:	930e      	str	r3, [sp, #56]	; 0x38
 8006f06:	e76a      	b.n	8006dde <_dtoa_r+0x116>
 8006f08:	2301      	movs	r3, #1
 8006f0a:	e7b2      	b.n	8006e72 <_dtoa_r+0x1aa>
 8006f0c:	900b      	str	r0, [sp, #44]	; 0x2c
 8006f0e:	e7b1      	b.n	8006e74 <_dtoa_r+0x1ac>
 8006f10:	9b04      	ldr	r3, [sp, #16]
 8006f12:	9a00      	ldr	r2, [sp, #0]
 8006f14:	1a9b      	subs	r3, r3, r2
 8006f16:	9304      	str	r3, [sp, #16]
 8006f18:	4253      	negs	r3, r2
 8006f1a:	9307      	str	r3, [sp, #28]
 8006f1c:	2300      	movs	r3, #0
 8006f1e:	930a      	str	r3, [sp, #40]	; 0x28
 8006f20:	e7bf      	b.n	8006ea2 <_dtoa_r+0x1da>
 8006f22:	2300      	movs	r3, #0
 8006f24:	9308      	str	r3, [sp, #32]
 8006f26:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	dc55      	bgt.n	8006fd8 <_dtoa_r+0x310>
 8006f2c:	2301      	movs	r3, #1
 8006f2e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8006f32:	461a      	mov	r2, r3
 8006f34:	9209      	str	r2, [sp, #36]	; 0x24
 8006f36:	e00c      	b.n	8006f52 <_dtoa_r+0x28a>
 8006f38:	2301      	movs	r3, #1
 8006f3a:	e7f3      	b.n	8006f24 <_dtoa_r+0x25c>
 8006f3c:	2300      	movs	r3, #0
 8006f3e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006f40:	9308      	str	r3, [sp, #32]
 8006f42:	9b00      	ldr	r3, [sp, #0]
 8006f44:	4413      	add	r3, r2
 8006f46:	9302      	str	r3, [sp, #8]
 8006f48:	3301      	adds	r3, #1
 8006f4a:	2b01      	cmp	r3, #1
 8006f4c:	9303      	str	r3, [sp, #12]
 8006f4e:	bfb8      	it	lt
 8006f50:	2301      	movlt	r3, #1
 8006f52:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8006f54:	2200      	movs	r2, #0
 8006f56:	6042      	str	r2, [r0, #4]
 8006f58:	2204      	movs	r2, #4
 8006f5a:	f102 0614 	add.w	r6, r2, #20
 8006f5e:	429e      	cmp	r6, r3
 8006f60:	6841      	ldr	r1, [r0, #4]
 8006f62:	d93d      	bls.n	8006fe0 <_dtoa_r+0x318>
 8006f64:	4620      	mov	r0, r4
 8006f66:	f001 f84b 	bl	8008000 <_Balloc>
 8006f6a:	9001      	str	r0, [sp, #4]
 8006f6c:	2800      	cmp	r0, #0
 8006f6e:	d13b      	bne.n	8006fe8 <_dtoa_r+0x320>
 8006f70:	4b11      	ldr	r3, [pc, #68]	; (8006fb8 <_dtoa_r+0x2f0>)
 8006f72:	4602      	mov	r2, r0
 8006f74:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8006f78:	e6c0      	b.n	8006cfc <_dtoa_r+0x34>
 8006f7a:	2301      	movs	r3, #1
 8006f7c:	e7df      	b.n	8006f3e <_dtoa_r+0x276>
 8006f7e:	bf00      	nop
 8006f80:	636f4361 	.word	0x636f4361
 8006f84:	3fd287a7 	.word	0x3fd287a7
 8006f88:	8b60c8b3 	.word	0x8b60c8b3
 8006f8c:	3fc68a28 	.word	0x3fc68a28
 8006f90:	509f79fb 	.word	0x509f79fb
 8006f94:	3fd34413 	.word	0x3fd34413
 8006f98:	0800bc86 	.word	0x0800bc86
 8006f9c:	0800bc9d 	.word	0x0800bc9d
 8006fa0:	7ff00000 	.word	0x7ff00000
 8006fa4:	0800bc82 	.word	0x0800bc82
 8006fa8:	0800bc79 	.word	0x0800bc79
 8006fac:	0800bef2 	.word	0x0800bef2
 8006fb0:	3ff80000 	.word	0x3ff80000
 8006fb4:	0800be08 	.word	0x0800be08
 8006fb8:	0800bcf8 	.word	0x0800bcf8
 8006fbc:	2501      	movs	r5, #1
 8006fbe:	2300      	movs	r3, #0
 8006fc0:	9306      	str	r3, [sp, #24]
 8006fc2:	9508      	str	r5, [sp, #32]
 8006fc4:	f04f 33ff 	mov.w	r3, #4294967295
 8006fc8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8006fcc:	2200      	movs	r2, #0
 8006fce:	2312      	movs	r3, #18
 8006fd0:	e7b0      	b.n	8006f34 <_dtoa_r+0x26c>
 8006fd2:	2301      	movs	r3, #1
 8006fd4:	9308      	str	r3, [sp, #32]
 8006fd6:	e7f5      	b.n	8006fc4 <_dtoa_r+0x2fc>
 8006fd8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006fda:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8006fde:	e7b8      	b.n	8006f52 <_dtoa_r+0x28a>
 8006fe0:	3101      	adds	r1, #1
 8006fe2:	6041      	str	r1, [r0, #4]
 8006fe4:	0052      	lsls	r2, r2, #1
 8006fe6:	e7b8      	b.n	8006f5a <_dtoa_r+0x292>
 8006fe8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006fea:	9a01      	ldr	r2, [sp, #4]
 8006fec:	601a      	str	r2, [r3, #0]
 8006fee:	9b03      	ldr	r3, [sp, #12]
 8006ff0:	2b0e      	cmp	r3, #14
 8006ff2:	f200 809d 	bhi.w	8007130 <_dtoa_r+0x468>
 8006ff6:	2d00      	cmp	r5, #0
 8006ff8:	f000 809a 	beq.w	8007130 <_dtoa_r+0x468>
 8006ffc:	9b00      	ldr	r3, [sp, #0]
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	dd32      	ble.n	8007068 <_dtoa_r+0x3a0>
 8007002:	4ab7      	ldr	r2, [pc, #732]	; (80072e0 <_dtoa_r+0x618>)
 8007004:	f003 030f 	and.w	r3, r3, #15
 8007008:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800700c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007010:	9b00      	ldr	r3, [sp, #0]
 8007012:	05d8      	lsls	r0, r3, #23
 8007014:	ea4f 1723 	mov.w	r7, r3, asr #4
 8007018:	d516      	bpl.n	8007048 <_dtoa_r+0x380>
 800701a:	4bb2      	ldr	r3, [pc, #712]	; (80072e4 <_dtoa_r+0x61c>)
 800701c:	ec51 0b19 	vmov	r0, r1, d9
 8007020:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007024:	f7f9 fc2a 	bl	800087c <__aeabi_ddiv>
 8007028:	f007 070f 	and.w	r7, r7, #15
 800702c:	4682      	mov	sl, r0
 800702e:	468b      	mov	fp, r1
 8007030:	2503      	movs	r5, #3
 8007032:	4eac      	ldr	r6, [pc, #688]	; (80072e4 <_dtoa_r+0x61c>)
 8007034:	b957      	cbnz	r7, 800704c <_dtoa_r+0x384>
 8007036:	4642      	mov	r2, r8
 8007038:	464b      	mov	r3, r9
 800703a:	4650      	mov	r0, sl
 800703c:	4659      	mov	r1, fp
 800703e:	f7f9 fc1d 	bl	800087c <__aeabi_ddiv>
 8007042:	4682      	mov	sl, r0
 8007044:	468b      	mov	fp, r1
 8007046:	e028      	b.n	800709a <_dtoa_r+0x3d2>
 8007048:	2502      	movs	r5, #2
 800704a:	e7f2      	b.n	8007032 <_dtoa_r+0x36a>
 800704c:	07f9      	lsls	r1, r7, #31
 800704e:	d508      	bpl.n	8007062 <_dtoa_r+0x39a>
 8007050:	4640      	mov	r0, r8
 8007052:	4649      	mov	r1, r9
 8007054:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007058:	f7f9 fae6 	bl	8000628 <__aeabi_dmul>
 800705c:	3501      	adds	r5, #1
 800705e:	4680      	mov	r8, r0
 8007060:	4689      	mov	r9, r1
 8007062:	107f      	asrs	r7, r7, #1
 8007064:	3608      	adds	r6, #8
 8007066:	e7e5      	b.n	8007034 <_dtoa_r+0x36c>
 8007068:	f000 809b 	beq.w	80071a2 <_dtoa_r+0x4da>
 800706c:	9b00      	ldr	r3, [sp, #0]
 800706e:	4f9d      	ldr	r7, [pc, #628]	; (80072e4 <_dtoa_r+0x61c>)
 8007070:	425e      	negs	r6, r3
 8007072:	4b9b      	ldr	r3, [pc, #620]	; (80072e0 <_dtoa_r+0x618>)
 8007074:	f006 020f 	and.w	r2, r6, #15
 8007078:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800707c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007080:	ec51 0b19 	vmov	r0, r1, d9
 8007084:	f7f9 fad0 	bl	8000628 <__aeabi_dmul>
 8007088:	1136      	asrs	r6, r6, #4
 800708a:	4682      	mov	sl, r0
 800708c:	468b      	mov	fp, r1
 800708e:	2300      	movs	r3, #0
 8007090:	2502      	movs	r5, #2
 8007092:	2e00      	cmp	r6, #0
 8007094:	d17a      	bne.n	800718c <_dtoa_r+0x4c4>
 8007096:	2b00      	cmp	r3, #0
 8007098:	d1d3      	bne.n	8007042 <_dtoa_r+0x37a>
 800709a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800709c:	2b00      	cmp	r3, #0
 800709e:	f000 8082 	beq.w	80071a6 <_dtoa_r+0x4de>
 80070a2:	4b91      	ldr	r3, [pc, #580]	; (80072e8 <_dtoa_r+0x620>)
 80070a4:	2200      	movs	r2, #0
 80070a6:	4650      	mov	r0, sl
 80070a8:	4659      	mov	r1, fp
 80070aa:	f7f9 fd2f 	bl	8000b0c <__aeabi_dcmplt>
 80070ae:	2800      	cmp	r0, #0
 80070b0:	d079      	beq.n	80071a6 <_dtoa_r+0x4de>
 80070b2:	9b03      	ldr	r3, [sp, #12]
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d076      	beq.n	80071a6 <_dtoa_r+0x4de>
 80070b8:	9b02      	ldr	r3, [sp, #8]
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	dd36      	ble.n	800712c <_dtoa_r+0x464>
 80070be:	9b00      	ldr	r3, [sp, #0]
 80070c0:	4650      	mov	r0, sl
 80070c2:	4659      	mov	r1, fp
 80070c4:	1e5f      	subs	r7, r3, #1
 80070c6:	2200      	movs	r2, #0
 80070c8:	4b88      	ldr	r3, [pc, #544]	; (80072ec <_dtoa_r+0x624>)
 80070ca:	f7f9 faad 	bl	8000628 <__aeabi_dmul>
 80070ce:	9e02      	ldr	r6, [sp, #8]
 80070d0:	4682      	mov	sl, r0
 80070d2:	468b      	mov	fp, r1
 80070d4:	3501      	adds	r5, #1
 80070d6:	4628      	mov	r0, r5
 80070d8:	f7f9 fa3c 	bl	8000554 <__aeabi_i2d>
 80070dc:	4652      	mov	r2, sl
 80070de:	465b      	mov	r3, fp
 80070e0:	f7f9 faa2 	bl	8000628 <__aeabi_dmul>
 80070e4:	4b82      	ldr	r3, [pc, #520]	; (80072f0 <_dtoa_r+0x628>)
 80070e6:	2200      	movs	r2, #0
 80070e8:	f7f9 f8e8 	bl	80002bc <__adddf3>
 80070ec:	46d0      	mov	r8, sl
 80070ee:	46d9      	mov	r9, fp
 80070f0:	4682      	mov	sl, r0
 80070f2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 80070f6:	2e00      	cmp	r6, #0
 80070f8:	d158      	bne.n	80071ac <_dtoa_r+0x4e4>
 80070fa:	4b7e      	ldr	r3, [pc, #504]	; (80072f4 <_dtoa_r+0x62c>)
 80070fc:	2200      	movs	r2, #0
 80070fe:	4640      	mov	r0, r8
 8007100:	4649      	mov	r1, r9
 8007102:	f7f9 f8d9 	bl	80002b8 <__aeabi_dsub>
 8007106:	4652      	mov	r2, sl
 8007108:	465b      	mov	r3, fp
 800710a:	4680      	mov	r8, r0
 800710c:	4689      	mov	r9, r1
 800710e:	f7f9 fd1b 	bl	8000b48 <__aeabi_dcmpgt>
 8007112:	2800      	cmp	r0, #0
 8007114:	f040 8295 	bne.w	8007642 <_dtoa_r+0x97a>
 8007118:	4652      	mov	r2, sl
 800711a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800711e:	4640      	mov	r0, r8
 8007120:	4649      	mov	r1, r9
 8007122:	f7f9 fcf3 	bl	8000b0c <__aeabi_dcmplt>
 8007126:	2800      	cmp	r0, #0
 8007128:	f040 8289 	bne.w	800763e <_dtoa_r+0x976>
 800712c:	ec5b ab19 	vmov	sl, fp, d9
 8007130:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007132:	2b00      	cmp	r3, #0
 8007134:	f2c0 8148 	blt.w	80073c8 <_dtoa_r+0x700>
 8007138:	9a00      	ldr	r2, [sp, #0]
 800713a:	2a0e      	cmp	r2, #14
 800713c:	f300 8144 	bgt.w	80073c8 <_dtoa_r+0x700>
 8007140:	4b67      	ldr	r3, [pc, #412]	; (80072e0 <_dtoa_r+0x618>)
 8007142:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007146:	e9d3 8900 	ldrd	r8, r9, [r3]
 800714a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800714c:	2b00      	cmp	r3, #0
 800714e:	f280 80d5 	bge.w	80072fc <_dtoa_r+0x634>
 8007152:	9b03      	ldr	r3, [sp, #12]
 8007154:	2b00      	cmp	r3, #0
 8007156:	f300 80d1 	bgt.w	80072fc <_dtoa_r+0x634>
 800715a:	f040 826f 	bne.w	800763c <_dtoa_r+0x974>
 800715e:	4b65      	ldr	r3, [pc, #404]	; (80072f4 <_dtoa_r+0x62c>)
 8007160:	2200      	movs	r2, #0
 8007162:	4640      	mov	r0, r8
 8007164:	4649      	mov	r1, r9
 8007166:	f7f9 fa5f 	bl	8000628 <__aeabi_dmul>
 800716a:	4652      	mov	r2, sl
 800716c:	465b      	mov	r3, fp
 800716e:	f7f9 fce1 	bl	8000b34 <__aeabi_dcmpge>
 8007172:	9e03      	ldr	r6, [sp, #12]
 8007174:	4637      	mov	r7, r6
 8007176:	2800      	cmp	r0, #0
 8007178:	f040 8245 	bne.w	8007606 <_dtoa_r+0x93e>
 800717c:	9d01      	ldr	r5, [sp, #4]
 800717e:	2331      	movs	r3, #49	; 0x31
 8007180:	f805 3b01 	strb.w	r3, [r5], #1
 8007184:	9b00      	ldr	r3, [sp, #0]
 8007186:	3301      	adds	r3, #1
 8007188:	9300      	str	r3, [sp, #0]
 800718a:	e240      	b.n	800760e <_dtoa_r+0x946>
 800718c:	07f2      	lsls	r2, r6, #31
 800718e:	d505      	bpl.n	800719c <_dtoa_r+0x4d4>
 8007190:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007194:	f7f9 fa48 	bl	8000628 <__aeabi_dmul>
 8007198:	3501      	adds	r5, #1
 800719a:	2301      	movs	r3, #1
 800719c:	1076      	asrs	r6, r6, #1
 800719e:	3708      	adds	r7, #8
 80071a0:	e777      	b.n	8007092 <_dtoa_r+0x3ca>
 80071a2:	2502      	movs	r5, #2
 80071a4:	e779      	b.n	800709a <_dtoa_r+0x3d2>
 80071a6:	9f00      	ldr	r7, [sp, #0]
 80071a8:	9e03      	ldr	r6, [sp, #12]
 80071aa:	e794      	b.n	80070d6 <_dtoa_r+0x40e>
 80071ac:	9901      	ldr	r1, [sp, #4]
 80071ae:	4b4c      	ldr	r3, [pc, #304]	; (80072e0 <_dtoa_r+0x618>)
 80071b0:	4431      	add	r1, r6
 80071b2:	910d      	str	r1, [sp, #52]	; 0x34
 80071b4:	9908      	ldr	r1, [sp, #32]
 80071b6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80071ba:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80071be:	2900      	cmp	r1, #0
 80071c0:	d043      	beq.n	800724a <_dtoa_r+0x582>
 80071c2:	494d      	ldr	r1, [pc, #308]	; (80072f8 <_dtoa_r+0x630>)
 80071c4:	2000      	movs	r0, #0
 80071c6:	f7f9 fb59 	bl	800087c <__aeabi_ddiv>
 80071ca:	4652      	mov	r2, sl
 80071cc:	465b      	mov	r3, fp
 80071ce:	f7f9 f873 	bl	80002b8 <__aeabi_dsub>
 80071d2:	9d01      	ldr	r5, [sp, #4]
 80071d4:	4682      	mov	sl, r0
 80071d6:	468b      	mov	fp, r1
 80071d8:	4649      	mov	r1, r9
 80071da:	4640      	mov	r0, r8
 80071dc:	f7f9 fcd4 	bl	8000b88 <__aeabi_d2iz>
 80071e0:	4606      	mov	r6, r0
 80071e2:	f7f9 f9b7 	bl	8000554 <__aeabi_i2d>
 80071e6:	4602      	mov	r2, r0
 80071e8:	460b      	mov	r3, r1
 80071ea:	4640      	mov	r0, r8
 80071ec:	4649      	mov	r1, r9
 80071ee:	f7f9 f863 	bl	80002b8 <__aeabi_dsub>
 80071f2:	3630      	adds	r6, #48	; 0x30
 80071f4:	f805 6b01 	strb.w	r6, [r5], #1
 80071f8:	4652      	mov	r2, sl
 80071fa:	465b      	mov	r3, fp
 80071fc:	4680      	mov	r8, r0
 80071fe:	4689      	mov	r9, r1
 8007200:	f7f9 fc84 	bl	8000b0c <__aeabi_dcmplt>
 8007204:	2800      	cmp	r0, #0
 8007206:	d163      	bne.n	80072d0 <_dtoa_r+0x608>
 8007208:	4642      	mov	r2, r8
 800720a:	464b      	mov	r3, r9
 800720c:	4936      	ldr	r1, [pc, #216]	; (80072e8 <_dtoa_r+0x620>)
 800720e:	2000      	movs	r0, #0
 8007210:	f7f9 f852 	bl	80002b8 <__aeabi_dsub>
 8007214:	4652      	mov	r2, sl
 8007216:	465b      	mov	r3, fp
 8007218:	f7f9 fc78 	bl	8000b0c <__aeabi_dcmplt>
 800721c:	2800      	cmp	r0, #0
 800721e:	f040 80b5 	bne.w	800738c <_dtoa_r+0x6c4>
 8007222:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007224:	429d      	cmp	r5, r3
 8007226:	d081      	beq.n	800712c <_dtoa_r+0x464>
 8007228:	4b30      	ldr	r3, [pc, #192]	; (80072ec <_dtoa_r+0x624>)
 800722a:	2200      	movs	r2, #0
 800722c:	4650      	mov	r0, sl
 800722e:	4659      	mov	r1, fp
 8007230:	f7f9 f9fa 	bl	8000628 <__aeabi_dmul>
 8007234:	4b2d      	ldr	r3, [pc, #180]	; (80072ec <_dtoa_r+0x624>)
 8007236:	4682      	mov	sl, r0
 8007238:	468b      	mov	fp, r1
 800723a:	4640      	mov	r0, r8
 800723c:	4649      	mov	r1, r9
 800723e:	2200      	movs	r2, #0
 8007240:	f7f9 f9f2 	bl	8000628 <__aeabi_dmul>
 8007244:	4680      	mov	r8, r0
 8007246:	4689      	mov	r9, r1
 8007248:	e7c6      	b.n	80071d8 <_dtoa_r+0x510>
 800724a:	4650      	mov	r0, sl
 800724c:	4659      	mov	r1, fp
 800724e:	f7f9 f9eb 	bl	8000628 <__aeabi_dmul>
 8007252:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007254:	9d01      	ldr	r5, [sp, #4]
 8007256:	930f      	str	r3, [sp, #60]	; 0x3c
 8007258:	4682      	mov	sl, r0
 800725a:	468b      	mov	fp, r1
 800725c:	4649      	mov	r1, r9
 800725e:	4640      	mov	r0, r8
 8007260:	f7f9 fc92 	bl	8000b88 <__aeabi_d2iz>
 8007264:	4606      	mov	r6, r0
 8007266:	f7f9 f975 	bl	8000554 <__aeabi_i2d>
 800726a:	3630      	adds	r6, #48	; 0x30
 800726c:	4602      	mov	r2, r0
 800726e:	460b      	mov	r3, r1
 8007270:	4640      	mov	r0, r8
 8007272:	4649      	mov	r1, r9
 8007274:	f7f9 f820 	bl	80002b8 <__aeabi_dsub>
 8007278:	f805 6b01 	strb.w	r6, [r5], #1
 800727c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800727e:	429d      	cmp	r5, r3
 8007280:	4680      	mov	r8, r0
 8007282:	4689      	mov	r9, r1
 8007284:	f04f 0200 	mov.w	r2, #0
 8007288:	d124      	bne.n	80072d4 <_dtoa_r+0x60c>
 800728a:	4b1b      	ldr	r3, [pc, #108]	; (80072f8 <_dtoa_r+0x630>)
 800728c:	4650      	mov	r0, sl
 800728e:	4659      	mov	r1, fp
 8007290:	f7f9 f814 	bl	80002bc <__adddf3>
 8007294:	4602      	mov	r2, r0
 8007296:	460b      	mov	r3, r1
 8007298:	4640      	mov	r0, r8
 800729a:	4649      	mov	r1, r9
 800729c:	f7f9 fc54 	bl	8000b48 <__aeabi_dcmpgt>
 80072a0:	2800      	cmp	r0, #0
 80072a2:	d173      	bne.n	800738c <_dtoa_r+0x6c4>
 80072a4:	4652      	mov	r2, sl
 80072a6:	465b      	mov	r3, fp
 80072a8:	4913      	ldr	r1, [pc, #76]	; (80072f8 <_dtoa_r+0x630>)
 80072aa:	2000      	movs	r0, #0
 80072ac:	f7f9 f804 	bl	80002b8 <__aeabi_dsub>
 80072b0:	4602      	mov	r2, r0
 80072b2:	460b      	mov	r3, r1
 80072b4:	4640      	mov	r0, r8
 80072b6:	4649      	mov	r1, r9
 80072b8:	f7f9 fc28 	bl	8000b0c <__aeabi_dcmplt>
 80072bc:	2800      	cmp	r0, #0
 80072be:	f43f af35 	beq.w	800712c <_dtoa_r+0x464>
 80072c2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80072c4:	1e6b      	subs	r3, r5, #1
 80072c6:	930f      	str	r3, [sp, #60]	; 0x3c
 80072c8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80072cc:	2b30      	cmp	r3, #48	; 0x30
 80072ce:	d0f8      	beq.n	80072c2 <_dtoa_r+0x5fa>
 80072d0:	9700      	str	r7, [sp, #0]
 80072d2:	e049      	b.n	8007368 <_dtoa_r+0x6a0>
 80072d4:	4b05      	ldr	r3, [pc, #20]	; (80072ec <_dtoa_r+0x624>)
 80072d6:	f7f9 f9a7 	bl	8000628 <__aeabi_dmul>
 80072da:	4680      	mov	r8, r0
 80072dc:	4689      	mov	r9, r1
 80072de:	e7bd      	b.n	800725c <_dtoa_r+0x594>
 80072e0:	0800be08 	.word	0x0800be08
 80072e4:	0800bde0 	.word	0x0800bde0
 80072e8:	3ff00000 	.word	0x3ff00000
 80072ec:	40240000 	.word	0x40240000
 80072f0:	401c0000 	.word	0x401c0000
 80072f4:	40140000 	.word	0x40140000
 80072f8:	3fe00000 	.word	0x3fe00000
 80072fc:	9d01      	ldr	r5, [sp, #4]
 80072fe:	4656      	mov	r6, sl
 8007300:	465f      	mov	r7, fp
 8007302:	4642      	mov	r2, r8
 8007304:	464b      	mov	r3, r9
 8007306:	4630      	mov	r0, r6
 8007308:	4639      	mov	r1, r7
 800730a:	f7f9 fab7 	bl	800087c <__aeabi_ddiv>
 800730e:	f7f9 fc3b 	bl	8000b88 <__aeabi_d2iz>
 8007312:	4682      	mov	sl, r0
 8007314:	f7f9 f91e 	bl	8000554 <__aeabi_i2d>
 8007318:	4642      	mov	r2, r8
 800731a:	464b      	mov	r3, r9
 800731c:	f7f9 f984 	bl	8000628 <__aeabi_dmul>
 8007320:	4602      	mov	r2, r0
 8007322:	460b      	mov	r3, r1
 8007324:	4630      	mov	r0, r6
 8007326:	4639      	mov	r1, r7
 8007328:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800732c:	f7f8 ffc4 	bl	80002b8 <__aeabi_dsub>
 8007330:	f805 6b01 	strb.w	r6, [r5], #1
 8007334:	9e01      	ldr	r6, [sp, #4]
 8007336:	9f03      	ldr	r7, [sp, #12]
 8007338:	1bae      	subs	r6, r5, r6
 800733a:	42b7      	cmp	r7, r6
 800733c:	4602      	mov	r2, r0
 800733e:	460b      	mov	r3, r1
 8007340:	d135      	bne.n	80073ae <_dtoa_r+0x6e6>
 8007342:	f7f8 ffbb 	bl	80002bc <__adddf3>
 8007346:	4642      	mov	r2, r8
 8007348:	464b      	mov	r3, r9
 800734a:	4606      	mov	r6, r0
 800734c:	460f      	mov	r7, r1
 800734e:	f7f9 fbfb 	bl	8000b48 <__aeabi_dcmpgt>
 8007352:	b9d0      	cbnz	r0, 800738a <_dtoa_r+0x6c2>
 8007354:	4642      	mov	r2, r8
 8007356:	464b      	mov	r3, r9
 8007358:	4630      	mov	r0, r6
 800735a:	4639      	mov	r1, r7
 800735c:	f7f9 fbcc 	bl	8000af8 <__aeabi_dcmpeq>
 8007360:	b110      	cbz	r0, 8007368 <_dtoa_r+0x6a0>
 8007362:	f01a 0f01 	tst.w	sl, #1
 8007366:	d110      	bne.n	800738a <_dtoa_r+0x6c2>
 8007368:	4620      	mov	r0, r4
 800736a:	ee18 1a10 	vmov	r1, s16
 800736e:	f000 fe87 	bl	8008080 <_Bfree>
 8007372:	2300      	movs	r3, #0
 8007374:	9800      	ldr	r0, [sp, #0]
 8007376:	702b      	strb	r3, [r5, #0]
 8007378:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800737a:	3001      	adds	r0, #1
 800737c:	6018      	str	r0, [r3, #0]
 800737e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007380:	2b00      	cmp	r3, #0
 8007382:	f43f acf1 	beq.w	8006d68 <_dtoa_r+0xa0>
 8007386:	601d      	str	r5, [r3, #0]
 8007388:	e4ee      	b.n	8006d68 <_dtoa_r+0xa0>
 800738a:	9f00      	ldr	r7, [sp, #0]
 800738c:	462b      	mov	r3, r5
 800738e:	461d      	mov	r5, r3
 8007390:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007394:	2a39      	cmp	r2, #57	; 0x39
 8007396:	d106      	bne.n	80073a6 <_dtoa_r+0x6de>
 8007398:	9a01      	ldr	r2, [sp, #4]
 800739a:	429a      	cmp	r2, r3
 800739c:	d1f7      	bne.n	800738e <_dtoa_r+0x6c6>
 800739e:	9901      	ldr	r1, [sp, #4]
 80073a0:	2230      	movs	r2, #48	; 0x30
 80073a2:	3701      	adds	r7, #1
 80073a4:	700a      	strb	r2, [r1, #0]
 80073a6:	781a      	ldrb	r2, [r3, #0]
 80073a8:	3201      	adds	r2, #1
 80073aa:	701a      	strb	r2, [r3, #0]
 80073ac:	e790      	b.n	80072d0 <_dtoa_r+0x608>
 80073ae:	4ba6      	ldr	r3, [pc, #664]	; (8007648 <_dtoa_r+0x980>)
 80073b0:	2200      	movs	r2, #0
 80073b2:	f7f9 f939 	bl	8000628 <__aeabi_dmul>
 80073b6:	2200      	movs	r2, #0
 80073b8:	2300      	movs	r3, #0
 80073ba:	4606      	mov	r6, r0
 80073bc:	460f      	mov	r7, r1
 80073be:	f7f9 fb9b 	bl	8000af8 <__aeabi_dcmpeq>
 80073c2:	2800      	cmp	r0, #0
 80073c4:	d09d      	beq.n	8007302 <_dtoa_r+0x63a>
 80073c6:	e7cf      	b.n	8007368 <_dtoa_r+0x6a0>
 80073c8:	9a08      	ldr	r2, [sp, #32]
 80073ca:	2a00      	cmp	r2, #0
 80073cc:	f000 80d7 	beq.w	800757e <_dtoa_r+0x8b6>
 80073d0:	9a06      	ldr	r2, [sp, #24]
 80073d2:	2a01      	cmp	r2, #1
 80073d4:	f300 80ba 	bgt.w	800754c <_dtoa_r+0x884>
 80073d8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80073da:	2a00      	cmp	r2, #0
 80073dc:	f000 80b2 	beq.w	8007544 <_dtoa_r+0x87c>
 80073e0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80073e4:	9e07      	ldr	r6, [sp, #28]
 80073e6:	9d04      	ldr	r5, [sp, #16]
 80073e8:	9a04      	ldr	r2, [sp, #16]
 80073ea:	441a      	add	r2, r3
 80073ec:	9204      	str	r2, [sp, #16]
 80073ee:	9a05      	ldr	r2, [sp, #20]
 80073f0:	2101      	movs	r1, #1
 80073f2:	441a      	add	r2, r3
 80073f4:	4620      	mov	r0, r4
 80073f6:	9205      	str	r2, [sp, #20]
 80073f8:	f000 ff44 	bl	8008284 <__i2b>
 80073fc:	4607      	mov	r7, r0
 80073fe:	2d00      	cmp	r5, #0
 8007400:	dd0c      	ble.n	800741c <_dtoa_r+0x754>
 8007402:	9b05      	ldr	r3, [sp, #20]
 8007404:	2b00      	cmp	r3, #0
 8007406:	dd09      	ble.n	800741c <_dtoa_r+0x754>
 8007408:	42ab      	cmp	r3, r5
 800740a:	9a04      	ldr	r2, [sp, #16]
 800740c:	bfa8      	it	ge
 800740e:	462b      	movge	r3, r5
 8007410:	1ad2      	subs	r2, r2, r3
 8007412:	9204      	str	r2, [sp, #16]
 8007414:	9a05      	ldr	r2, [sp, #20]
 8007416:	1aed      	subs	r5, r5, r3
 8007418:	1ad3      	subs	r3, r2, r3
 800741a:	9305      	str	r3, [sp, #20]
 800741c:	9b07      	ldr	r3, [sp, #28]
 800741e:	b31b      	cbz	r3, 8007468 <_dtoa_r+0x7a0>
 8007420:	9b08      	ldr	r3, [sp, #32]
 8007422:	2b00      	cmp	r3, #0
 8007424:	f000 80af 	beq.w	8007586 <_dtoa_r+0x8be>
 8007428:	2e00      	cmp	r6, #0
 800742a:	dd13      	ble.n	8007454 <_dtoa_r+0x78c>
 800742c:	4639      	mov	r1, r7
 800742e:	4632      	mov	r2, r6
 8007430:	4620      	mov	r0, r4
 8007432:	f000 ffe7 	bl	8008404 <__pow5mult>
 8007436:	ee18 2a10 	vmov	r2, s16
 800743a:	4601      	mov	r1, r0
 800743c:	4607      	mov	r7, r0
 800743e:	4620      	mov	r0, r4
 8007440:	f000 ff36 	bl	80082b0 <__multiply>
 8007444:	ee18 1a10 	vmov	r1, s16
 8007448:	4680      	mov	r8, r0
 800744a:	4620      	mov	r0, r4
 800744c:	f000 fe18 	bl	8008080 <_Bfree>
 8007450:	ee08 8a10 	vmov	s16, r8
 8007454:	9b07      	ldr	r3, [sp, #28]
 8007456:	1b9a      	subs	r2, r3, r6
 8007458:	d006      	beq.n	8007468 <_dtoa_r+0x7a0>
 800745a:	ee18 1a10 	vmov	r1, s16
 800745e:	4620      	mov	r0, r4
 8007460:	f000 ffd0 	bl	8008404 <__pow5mult>
 8007464:	ee08 0a10 	vmov	s16, r0
 8007468:	2101      	movs	r1, #1
 800746a:	4620      	mov	r0, r4
 800746c:	f000 ff0a 	bl	8008284 <__i2b>
 8007470:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007472:	2b00      	cmp	r3, #0
 8007474:	4606      	mov	r6, r0
 8007476:	f340 8088 	ble.w	800758a <_dtoa_r+0x8c2>
 800747a:	461a      	mov	r2, r3
 800747c:	4601      	mov	r1, r0
 800747e:	4620      	mov	r0, r4
 8007480:	f000 ffc0 	bl	8008404 <__pow5mult>
 8007484:	9b06      	ldr	r3, [sp, #24]
 8007486:	2b01      	cmp	r3, #1
 8007488:	4606      	mov	r6, r0
 800748a:	f340 8081 	ble.w	8007590 <_dtoa_r+0x8c8>
 800748e:	f04f 0800 	mov.w	r8, #0
 8007492:	6933      	ldr	r3, [r6, #16]
 8007494:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8007498:	6918      	ldr	r0, [r3, #16]
 800749a:	f000 fea3 	bl	80081e4 <__hi0bits>
 800749e:	f1c0 0020 	rsb	r0, r0, #32
 80074a2:	9b05      	ldr	r3, [sp, #20]
 80074a4:	4418      	add	r0, r3
 80074a6:	f010 001f 	ands.w	r0, r0, #31
 80074aa:	f000 8092 	beq.w	80075d2 <_dtoa_r+0x90a>
 80074ae:	f1c0 0320 	rsb	r3, r0, #32
 80074b2:	2b04      	cmp	r3, #4
 80074b4:	f340 808a 	ble.w	80075cc <_dtoa_r+0x904>
 80074b8:	f1c0 001c 	rsb	r0, r0, #28
 80074bc:	9b04      	ldr	r3, [sp, #16]
 80074be:	4403      	add	r3, r0
 80074c0:	9304      	str	r3, [sp, #16]
 80074c2:	9b05      	ldr	r3, [sp, #20]
 80074c4:	4403      	add	r3, r0
 80074c6:	4405      	add	r5, r0
 80074c8:	9305      	str	r3, [sp, #20]
 80074ca:	9b04      	ldr	r3, [sp, #16]
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	dd07      	ble.n	80074e0 <_dtoa_r+0x818>
 80074d0:	ee18 1a10 	vmov	r1, s16
 80074d4:	461a      	mov	r2, r3
 80074d6:	4620      	mov	r0, r4
 80074d8:	f000 ffee 	bl	80084b8 <__lshift>
 80074dc:	ee08 0a10 	vmov	s16, r0
 80074e0:	9b05      	ldr	r3, [sp, #20]
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	dd05      	ble.n	80074f2 <_dtoa_r+0x82a>
 80074e6:	4631      	mov	r1, r6
 80074e8:	461a      	mov	r2, r3
 80074ea:	4620      	mov	r0, r4
 80074ec:	f000 ffe4 	bl	80084b8 <__lshift>
 80074f0:	4606      	mov	r6, r0
 80074f2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d06e      	beq.n	80075d6 <_dtoa_r+0x90e>
 80074f8:	ee18 0a10 	vmov	r0, s16
 80074fc:	4631      	mov	r1, r6
 80074fe:	f001 f84b 	bl	8008598 <__mcmp>
 8007502:	2800      	cmp	r0, #0
 8007504:	da67      	bge.n	80075d6 <_dtoa_r+0x90e>
 8007506:	9b00      	ldr	r3, [sp, #0]
 8007508:	3b01      	subs	r3, #1
 800750a:	ee18 1a10 	vmov	r1, s16
 800750e:	9300      	str	r3, [sp, #0]
 8007510:	220a      	movs	r2, #10
 8007512:	2300      	movs	r3, #0
 8007514:	4620      	mov	r0, r4
 8007516:	f000 fdd5 	bl	80080c4 <__multadd>
 800751a:	9b08      	ldr	r3, [sp, #32]
 800751c:	ee08 0a10 	vmov	s16, r0
 8007520:	2b00      	cmp	r3, #0
 8007522:	f000 81b1 	beq.w	8007888 <_dtoa_r+0xbc0>
 8007526:	2300      	movs	r3, #0
 8007528:	4639      	mov	r1, r7
 800752a:	220a      	movs	r2, #10
 800752c:	4620      	mov	r0, r4
 800752e:	f000 fdc9 	bl	80080c4 <__multadd>
 8007532:	9b02      	ldr	r3, [sp, #8]
 8007534:	2b00      	cmp	r3, #0
 8007536:	4607      	mov	r7, r0
 8007538:	f300 808e 	bgt.w	8007658 <_dtoa_r+0x990>
 800753c:	9b06      	ldr	r3, [sp, #24]
 800753e:	2b02      	cmp	r3, #2
 8007540:	dc51      	bgt.n	80075e6 <_dtoa_r+0x91e>
 8007542:	e089      	b.n	8007658 <_dtoa_r+0x990>
 8007544:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007546:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800754a:	e74b      	b.n	80073e4 <_dtoa_r+0x71c>
 800754c:	9b03      	ldr	r3, [sp, #12]
 800754e:	1e5e      	subs	r6, r3, #1
 8007550:	9b07      	ldr	r3, [sp, #28]
 8007552:	42b3      	cmp	r3, r6
 8007554:	bfbf      	itttt	lt
 8007556:	9b07      	ldrlt	r3, [sp, #28]
 8007558:	9607      	strlt	r6, [sp, #28]
 800755a:	1af2      	sublt	r2, r6, r3
 800755c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800755e:	bfb6      	itet	lt
 8007560:	189b      	addlt	r3, r3, r2
 8007562:	1b9e      	subge	r6, r3, r6
 8007564:	930a      	strlt	r3, [sp, #40]	; 0x28
 8007566:	9b03      	ldr	r3, [sp, #12]
 8007568:	bfb8      	it	lt
 800756a:	2600      	movlt	r6, #0
 800756c:	2b00      	cmp	r3, #0
 800756e:	bfb7      	itett	lt
 8007570:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8007574:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8007578:	1a9d      	sublt	r5, r3, r2
 800757a:	2300      	movlt	r3, #0
 800757c:	e734      	b.n	80073e8 <_dtoa_r+0x720>
 800757e:	9e07      	ldr	r6, [sp, #28]
 8007580:	9d04      	ldr	r5, [sp, #16]
 8007582:	9f08      	ldr	r7, [sp, #32]
 8007584:	e73b      	b.n	80073fe <_dtoa_r+0x736>
 8007586:	9a07      	ldr	r2, [sp, #28]
 8007588:	e767      	b.n	800745a <_dtoa_r+0x792>
 800758a:	9b06      	ldr	r3, [sp, #24]
 800758c:	2b01      	cmp	r3, #1
 800758e:	dc18      	bgt.n	80075c2 <_dtoa_r+0x8fa>
 8007590:	f1ba 0f00 	cmp.w	sl, #0
 8007594:	d115      	bne.n	80075c2 <_dtoa_r+0x8fa>
 8007596:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800759a:	b993      	cbnz	r3, 80075c2 <_dtoa_r+0x8fa>
 800759c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80075a0:	0d1b      	lsrs	r3, r3, #20
 80075a2:	051b      	lsls	r3, r3, #20
 80075a4:	b183      	cbz	r3, 80075c8 <_dtoa_r+0x900>
 80075a6:	9b04      	ldr	r3, [sp, #16]
 80075a8:	3301      	adds	r3, #1
 80075aa:	9304      	str	r3, [sp, #16]
 80075ac:	9b05      	ldr	r3, [sp, #20]
 80075ae:	3301      	adds	r3, #1
 80075b0:	9305      	str	r3, [sp, #20]
 80075b2:	f04f 0801 	mov.w	r8, #1
 80075b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	f47f af6a 	bne.w	8007492 <_dtoa_r+0x7ca>
 80075be:	2001      	movs	r0, #1
 80075c0:	e76f      	b.n	80074a2 <_dtoa_r+0x7da>
 80075c2:	f04f 0800 	mov.w	r8, #0
 80075c6:	e7f6      	b.n	80075b6 <_dtoa_r+0x8ee>
 80075c8:	4698      	mov	r8, r3
 80075ca:	e7f4      	b.n	80075b6 <_dtoa_r+0x8ee>
 80075cc:	f43f af7d 	beq.w	80074ca <_dtoa_r+0x802>
 80075d0:	4618      	mov	r0, r3
 80075d2:	301c      	adds	r0, #28
 80075d4:	e772      	b.n	80074bc <_dtoa_r+0x7f4>
 80075d6:	9b03      	ldr	r3, [sp, #12]
 80075d8:	2b00      	cmp	r3, #0
 80075da:	dc37      	bgt.n	800764c <_dtoa_r+0x984>
 80075dc:	9b06      	ldr	r3, [sp, #24]
 80075de:	2b02      	cmp	r3, #2
 80075e0:	dd34      	ble.n	800764c <_dtoa_r+0x984>
 80075e2:	9b03      	ldr	r3, [sp, #12]
 80075e4:	9302      	str	r3, [sp, #8]
 80075e6:	9b02      	ldr	r3, [sp, #8]
 80075e8:	b96b      	cbnz	r3, 8007606 <_dtoa_r+0x93e>
 80075ea:	4631      	mov	r1, r6
 80075ec:	2205      	movs	r2, #5
 80075ee:	4620      	mov	r0, r4
 80075f0:	f000 fd68 	bl	80080c4 <__multadd>
 80075f4:	4601      	mov	r1, r0
 80075f6:	4606      	mov	r6, r0
 80075f8:	ee18 0a10 	vmov	r0, s16
 80075fc:	f000 ffcc 	bl	8008598 <__mcmp>
 8007600:	2800      	cmp	r0, #0
 8007602:	f73f adbb 	bgt.w	800717c <_dtoa_r+0x4b4>
 8007606:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007608:	9d01      	ldr	r5, [sp, #4]
 800760a:	43db      	mvns	r3, r3
 800760c:	9300      	str	r3, [sp, #0]
 800760e:	f04f 0800 	mov.w	r8, #0
 8007612:	4631      	mov	r1, r6
 8007614:	4620      	mov	r0, r4
 8007616:	f000 fd33 	bl	8008080 <_Bfree>
 800761a:	2f00      	cmp	r7, #0
 800761c:	f43f aea4 	beq.w	8007368 <_dtoa_r+0x6a0>
 8007620:	f1b8 0f00 	cmp.w	r8, #0
 8007624:	d005      	beq.n	8007632 <_dtoa_r+0x96a>
 8007626:	45b8      	cmp	r8, r7
 8007628:	d003      	beq.n	8007632 <_dtoa_r+0x96a>
 800762a:	4641      	mov	r1, r8
 800762c:	4620      	mov	r0, r4
 800762e:	f000 fd27 	bl	8008080 <_Bfree>
 8007632:	4639      	mov	r1, r7
 8007634:	4620      	mov	r0, r4
 8007636:	f000 fd23 	bl	8008080 <_Bfree>
 800763a:	e695      	b.n	8007368 <_dtoa_r+0x6a0>
 800763c:	2600      	movs	r6, #0
 800763e:	4637      	mov	r7, r6
 8007640:	e7e1      	b.n	8007606 <_dtoa_r+0x93e>
 8007642:	9700      	str	r7, [sp, #0]
 8007644:	4637      	mov	r7, r6
 8007646:	e599      	b.n	800717c <_dtoa_r+0x4b4>
 8007648:	40240000 	.word	0x40240000
 800764c:	9b08      	ldr	r3, [sp, #32]
 800764e:	2b00      	cmp	r3, #0
 8007650:	f000 80ca 	beq.w	80077e8 <_dtoa_r+0xb20>
 8007654:	9b03      	ldr	r3, [sp, #12]
 8007656:	9302      	str	r3, [sp, #8]
 8007658:	2d00      	cmp	r5, #0
 800765a:	dd05      	ble.n	8007668 <_dtoa_r+0x9a0>
 800765c:	4639      	mov	r1, r7
 800765e:	462a      	mov	r2, r5
 8007660:	4620      	mov	r0, r4
 8007662:	f000 ff29 	bl	80084b8 <__lshift>
 8007666:	4607      	mov	r7, r0
 8007668:	f1b8 0f00 	cmp.w	r8, #0
 800766c:	d05b      	beq.n	8007726 <_dtoa_r+0xa5e>
 800766e:	6879      	ldr	r1, [r7, #4]
 8007670:	4620      	mov	r0, r4
 8007672:	f000 fcc5 	bl	8008000 <_Balloc>
 8007676:	4605      	mov	r5, r0
 8007678:	b928      	cbnz	r0, 8007686 <_dtoa_r+0x9be>
 800767a:	4b87      	ldr	r3, [pc, #540]	; (8007898 <_dtoa_r+0xbd0>)
 800767c:	4602      	mov	r2, r0
 800767e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8007682:	f7ff bb3b 	b.w	8006cfc <_dtoa_r+0x34>
 8007686:	693a      	ldr	r2, [r7, #16]
 8007688:	3202      	adds	r2, #2
 800768a:	0092      	lsls	r2, r2, #2
 800768c:	f107 010c 	add.w	r1, r7, #12
 8007690:	300c      	adds	r0, #12
 8007692:	f000 fca7 	bl	8007fe4 <memcpy>
 8007696:	2201      	movs	r2, #1
 8007698:	4629      	mov	r1, r5
 800769a:	4620      	mov	r0, r4
 800769c:	f000 ff0c 	bl	80084b8 <__lshift>
 80076a0:	9b01      	ldr	r3, [sp, #4]
 80076a2:	f103 0901 	add.w	r9, r3, #1
 80076a6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 80076aa:	4413      	add	r3, r2
 80076ac:	9305      	str	r3, [sp, #20]
 80076ae:	f00a 0301 	and.w	r3, sl, #1
 80076b2:	46b8      	mov	r8, r7
 80076b4:	9304      	str	r3, [sp, #16]
 80076b6:	4607      	mov	r7, r0
 80076b8:	4631      	mov	r1, r6
 80076ba:	ee18 0a10 	vmov	r0, s16
 80076be:	f7ff fa75 	bl	8006bac <quorem>
 80076c2:	4641      	mov	r1, r8
 80076c4:	9002      	str	r0, [sp, #8]
 80076c6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80076ca:	ee18 0a10 	vmov	r0, s16
 80076ce:	f000 ff63 	bl	8008598 <__mcmp>
 80076d2:	463a      	mov	r2, r7
 80076d4:	9003      	str	r0, [sp, #12]
 80076d6:	4631      	mov	r1, r6
 80076d8:	4620      	mov	r0, r4
 80076da:	f000 ff79 	bl	80085d0 <__mdiff>
 80076de:	68c2      	ldr	r2, [r0, #12]
 80076e0:	f109 3bff 	add.w	fp, r9, #4294967295
 80076e4:	4605      	mov	r5, r0
 80076e6:	bb02      	cbnz	r2, 800772a <_dtoa_r+0xa62>
 80076e8:	4601      	mov	r1, r0
 80076ea:	ee18 0a10 	vmov	r0, s16
 80076ee:	f000 ff53 	bl	8008598 <__mcmp>
 80076f2:	4602      	mov	r2, r0
 80076f4:	4629      	mov	r1, r5
 80076f6:	4620      	mov	r0, r4
 80076f8:	9207      	str	r2, [sp, #28]
 80076fa:	f000 fcc1 	bl	8008080 <_Bfree>
 80076fe:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8007702:	ea43 0102 	orr.w	r1, r3, r2
 8007706:	9b04      	ldr	r3, [sp, #16]
 8007708:	430b      	orrs	r3, r1
 800770a:	464d      	mov	r5, r9
 800770c:	d10f      	bne.n	800772e <_dtoa_r+0xa66>
 800770e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007712:	d02a      	beq.n	800776a <_dtoa_r+0xaa2>
 8007714:	9b03      	ldr	r3, [sp, #12]
 8007716:	2b00      	cmp	r3, #0
 8007718:	dd02      	ble.n	8007720 <_dtoa_r+0xa58>
 800771a:	9b02      	ldr	r3, [sp, #8]
 800771c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8007720:	f88b a000 	strb.w	sl, [fp]
 8007724:	e775      	b.n	8007612 <_dtoa_r+0x94a>
 8007726:	4638      	mov	r0, r7
 8007728:	e7ba      	b.n	80076a0 <_dtoa_r+0x9d8>
 800772a:	2201      	movs	r2, #1
 800772c:	e7e2      	b.n	80076f4 <_dtoa_r+0xa2c>
 800772e:	9b03      	ldr	r3, [sp, #12]
 8007730:	2b00      	cmp	r3, #0
 8007732:	db04      	blt.n	800773e <_dtoa_r+0xa76>
 8007734:	9906      	ldr	r1, [sp, #24]
 8007736:	430b      	orrs	r3, r1
 8007738:	9904      	ldr	r1, [sp, #16]
 800773a:	430b      	orrs	r3, r1
 800773c:	d122      	bne.n	8007784 <_dtoa_r+0xabc>
 800773e:	2a00      	cmp	r2, #0
 8007740:	ddee      	ble.n	8007720 <_dtoa_r+0xa58>
 8007742:	ee18 1a10 	vmov	r1, s16
 8007746:	2201      	movs	r2, #1
 8007748:	4620      	mov	r0, r4
 800774a:	f000 feb5 	bl	80084b8 <__lshift>
 800774e:	4631      	mov	r1, r6
 8007750:	ee08 0a10 	vmov	s16, r0
 8007754:	f000 ff20 	bl	8008598 <__mcmp>
 8007758:	2800      	cmp	r0, #0
 800775a:	dc03      	bgt.n	8007764 <_dtoa_r+0xa9c>
 800775c:	d1e0      	bne.n	8007720 <_dtoa_r+0xa58>
 800775e:	f01a 0f01 	tst.w	sl, #1
 8007762:	d0dd      	beq.n	8007720 <_dtoa_r+0xa58>
 8007764:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007768:	d1d7      	bne.n	800771a <_dtoa_r+0xa52>
 800776a:	2339      	movs	r3, #57	; 0x39
 800776c:	f88b 3000 	strb.w	r3, [fp]
 8007770:	462b      	mov	r3, r5
 8007772:	461d      	mov	r5, r3
 8007774:	3b01      	subs	r3, #1
 8007776:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800777a:	2a39      	cmp	r2, #57	; 0x39
 800777c:	d071      	beq.n	8007862 <_dtoa_r+0xb9a>
 800777e:	3201      	adds	r2, #1
 8007780:	701a      	strb	r2, [r3, #0]
 8007782:	e746      	b.n	8007612 <_dtoa_r+0x94a>
 8007784:	2a00      	cmp	r2, #0
 8007786:	dd07      	ble.n	8007798 <_dtoa_r+0xad0>
 8007788:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800778c:	d0ed      	beq.n	800776a <_dtoa_r+0xaa2>
 800778e:	f10a 0301 	add.w	r3, sl, #1
 8007792:	f88b 3000 	strb.w	r3, [fp]
 8007796:	e73c      	b.n	8007612 <_dtoa_r+0x94a>
 8007798:	9b05      	ldr	r3, [sp, #20]
 800779a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800779e:	4599      	cmp	r9, r3
 80077a0:	d047      	beq.n	8007832 <_dtoa_r+0xb6a>
 80077a2:	ee18 1a10 	vmov	r1, s16
 80077a6:	2300      	movs	r3, #0
 80077a8:	220a      	movs	r2, #10
 80077aa:	4620      	mov	r0, r4
 80077ac:	f000 fc8a 	bl	80080c4 <__multadd>
 80077b0:	45b8      	cmp	r8, r7
 80077b2:	ee08 0a10 	vmov	s16, r0
 80077b6:	f04f 0300 	mov.w	r3, #0
 80077ba:	f04f 020a 	mov.w	r2, #10
 80077be:	4641      	mov	r1, r8
 80077c0:	4620      	mov	r0, r4
 80077c2:	d106      	bne.n	80077d2 <_dtoa_r+0xb0a>
 80077c4:	f000 fc7e 	bl	80080c4 <__multadd>
 80077c8:	4680      	mov	r8, r0
 80077ca:	4607      	mov	r7, r0
 80077cc:	f109 0901 	add.w	r9, r9, #1
 80077d0:	e772      	b.n	80076b8 <_dtoa_r+0x9f0>
 80077d2:	f000 fc77 	bl	80080c4 <__multadd>
 80077d6:	4639      	mov	r1, r7
 80077d8:	4680      	mov	r8, r0
 80077da:	2300      	movs	r3, #0
 80077dc:	220a      	movs	r2, #10
 80077de:	4620      	mov	r0, r4
 80077e0:	f000 fc70 	bl	80080c4 <__multadd>
 80077e4:	4607      	mov	r7, r0
 80077e6:	e7f1      	b.n	80077cc <_dtoa_r+0xb04>
 80077e8:	9b03      	ldr	r3, [sp, #12]
 80077ea:	9302      	str	r3, [sp, #8]
 80077ec:	9d01      	ldr	r5, [sp, #4]
 80077ee:	ee18 0a10 	vmov	r0, s16
 80077f2:	4631      	mov	r1, r6
 80077f4:	f7ff f9da 	bl	8006bac <quorem>
 80077f8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80077fc:	9b01      	ldr	r3, [sp, #4]
 80077fe:	f805 ab01 	strb.w	sl, [r5], #1
 8007802:	1aea      	subs	r2, r5, r3
 8007804:	9b02      	ldr	r3, [sp, #8]
 8007806:	4293      	cmp	r3, r2
 8007808:	dd09      	ble.n	800781e <_dtoa_r+0xb56>
 800780a:	ee18 1a10 	vmov	r1, s16
 800780e:	2300      	movs	r3, #0
 8007810:	220a      	movs	r2, #10
 8007812:	4620      	mov	r0, r4
 8007814:	f000 fc56 	bl	80080c4 <__multadd>
 8007818:	ee08 0a10 	vmov	s16, r0
 800781c:	e7e7      	b.n	80077ee <_dtoa_r+0xb26>
 800781e:	9b02      	ldr	r3, [sp, #8]
 8007820:	2b00      	cmp	r3, #0
 8007822:	bfc8      	it	gt
 8007824:	461d      	movgt	r5, r3
 8007826:	9b01      	ldr	r3, [sp, #4]
 8007828:	bfd8      	it	le
 800782a:	2501      	movle	r5, #1
 800782c:	441d      	add	r5, r3
 800782e:	f04f 0800 	mov.w	r8, #0
 8007832:	ee18 1a10 	vmov	r1, s16
 8007836:	2201      	movs	r2, #1
 8007838:	4620      	mov	r0, r4
 800783a:	f000 fe3d 	bl	80084b8 <__lshift>
 800783e:	4631      	mov	r1, r6
 8007840:	ee08 0a10 	vmov	s16, r0
 8007844:	f000 fea8 	bl	8008598 <__mcmp>
 8007848:	2800      	cmp	r0, #0
 800784a:	dc91      	bgt.n	8007770 <_dtoa_r+0xaa8>
 800784c:	d102      	bne.n	8007854 <_dtoa_r+0xb8c>
 800784e:	f01a 0f01 	tst.w	sl, #1
 8007852:	d18d      	bne.n	8007770 <_dtoa_r+0xaa8>
 8007854:	462b      	mov	r3, r5
 8007856:	461d      	mov	r5, r3
 8007858:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800785c:	2a30      	cmp	r2, #48	; 0x30
 800785e:	d0fa      	beq.n	8007856 <_dtoa_r+0xb8e>
 8007860:	e6d7      	b.n	8007612 <_dtoa_r+0x94a>
 8007862:	9a01      	ldr	r2, [sp, #4]
 8007864:	429a      	cmp	r2, r3
 8007866:	d184      	bne.n	8007772 <_dtoa_r+0xaaa>
 8007868:	9b00      	ldr	r3, [sp, #0]
 800786a:	3301      	adds	r3, #1
 800786c:	9300      	str	r3, [sp, #0]
 800786e:	2331      	movs	r3, #49	; 0x31
 8007870:	7013      	strb	r3, [r2, #0]
 8007872:	e6ce      	b.n	8007612 <_dtoa_r+0x94a>
 8007874:	4b09      	ldr	r3, [pc, #36]	; (800789c <_dtoa_r+0xbd4>)
 8007876:	f7ff ba95 	b.w	8006da4 <_dtoa_r+0xdc>
 800787a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800787c:	2b00      	cmp	r3, #0
 800787e:	f47f aa6e 	bne.w	8006d5e <_dtoa_r+0x96>
 8007882:	4b07      	ldr	r3, [pc, #28]	; (80078a0 <_dtoa_r+0xbd8>)
 8007884:	f7ff ba8e 	b.w	8006da4 <_dtoa_r+0xdc>
 8007888:	9b02      	ldr	r3, [sp, #8]
 800788a:	2b00      	cmp	r3, #0
 800788c:	dcae      	bgt.n	80077ec <_dtoa_r+0xb24>
 800788e:	9b06      	ldr	r3, [sp, #24]
 8007890:	2b02      	cmp	r3, #2
 8007892:	f73f aea8 	bgt.w	80075e6 <_dtoa_r+0x91e>
 8007896:	e7a9      	b.n	80077ec <_dtoa_r+0xb24>
 8007898:	0800bcf8 	.word	0x0800bcf8
 800789c:	0800bef1 	.word	0x0800bef1
 80078a0:	0800bc79 	.word	0x0800bc79

080078a4 <rshift>:
 80078a4:	6903      	ldr	r3, [r0, #16]
 80078a6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80078aa:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80078ae:	ea4f 1261 	mov.w	r2, r1, asr #5
 80078b2:	f100 0414 	add.w	r4, r0, #20
 80078b6:	dd45      	ble.n	8007944 <rshift+0xa0>
 80078b8:	f011 011f 	ands.w	r1, r1, #31
 80078bc:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80078c0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80078c4:	d10c      	bne.n	80078e0 <rshift+0x3c>
 80078c6:	f100 0710 	add.w	r7, r0, #16
 80078ca:	4629      	mov	r1, r5
 80078cc:	42b1      	cmp	r1, r6
 80078ce:	d334      	bcc.n	800793a <rshift+0x96>
 80078d0:	1a9b      	subs	r3, r3, r2
 80078d2:	009b      	lsls	r3, r3, #2
 80078d4:	1eea      	subs	r2, r5, #3
 80078d6:	4296      	cmp	r6, r2
 80078d8:	bf38      	it	cc
 80078da:	2300      	movcc	r3, #0
 80078dc:	4423      	add	r3, r4
 80078de:	e015      	b.n	800790c <rshift+0x68>
 80078e0:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80078e4:	f1c1 0820 	rsb	r8, r1, #32
 80078e8:	40cf      	lsrs	r7, r1
 80078ea:	f105 0e04 	add.w	lr, r5, #4
 80078ee:	46a1      	mov	r9, r4
 80078f0:	4576      	cmp	r6, lr
 80078f2:	46f4      	mov	ip, lr
 80078f4:	d815      	bhi.n	8007922 <rshift+0x7e>
 80078f6:	1a9a      	subs	r2, r3, r2
 80078f8:	0092      	lsls	r2, r2, #2
 80078fa:	3a04      	subs	r2, #4
 80078fc:	3501      	adds	r5, #1
 80078fe:	42ae      	cmp	r6, r5
 8007900:	bf38      	it	cc
 8007902:	2200      	movcc	r2, #0
 8007904:	18a3      	adds	r3, r4, r2
 8007906:	50a7      	str	r7, [r4, r2]
 8007908:	b107      	cbz	r7, 800790c <rshift+0x68>
 800790a:	3304      	adds	r3, #4
 800790c:	1b1a      	subs	r2, r3, r4
 800790e:	42a3      	cmp	r3, r4
 8007910:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8007914:	bf08      	it	eq
 8007916:	2300      	moveq	r3, #0
 8007918:	6102      	str	r2, [r0, #16]
 800791a:	bf08      	it	eq
 800791c:	6143      	streq	r3, [r0, #20]
 800791e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007922:	f8dc c000 	ldr.w	ip, [ip]
 8007926:	fa0c fc08 	lsl.w	ip, ip, r8
 800792a:	ea4c 0707 	orr.w	r7, ip, r7
 800792e:	f849 7b04 	str.w	r7, [r9], #4
 8007932:	f85e 7b04 	ldr.w	r7, [lr], #4
 8007936:	40cf      	lsrs	r7, r1
 8007938:	e7da      	b.n	80078f0 <rshift+0x4c>
 800793a:	f851 cb04 	ldr.w	ip, [r1], #4
 800793e:	f847 cf04 	str.w	ip, [r7, #4]!
 8007942:	e7c3      	b.n	80078cc <rshift+0x28>
 8007944:	4623      	mov	r3, r4
 8007946:	e7e1      	b.n	800790c <rshift+0x68>

08007948 <__hexdig_fun>:
 8007948:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800794c:	2b09      	cmp	r3, #9
 800794e:	d802      	bhi.n	8007956 <__hexdig_fun+0xe>
 8007950:	3820      	subs	r0, #32
 8007952:	b2c0      	uxtb	r0, r0
 8007954:	4770      	bx	lr
 8007956:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800795a:	2b05      	cmp	r3, #5
 800795c:	d801      	bhi.n	8007962 <__hexdig_fun+0x1a>
 800795e:	3847      	subs	r0, #71	; 0x47
 8007960:	e7f7      	b.n	8007952 <__hexdig_fun+0xa>
 8007962:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8007966:	2b05      	cmp	r3, #5
 8007968:	d801      	bhi.n	800796e <__hexdig_fun+0x26>
 800796a:	3827      	subs	r0, #39	; 0x27
 800796c:	e7f1      	b.n	8007952 <__hexdig_fun+0xa>
 800796e:	2000      	movs	r0, #0
 8007970:	4770      	bx	lr
	...

08007974 <__gethex>:
 8007974:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007978:	ed2d 8b02 	vpush	{d8}
 800797c:	b089      	sub	sp, #36	; 0x24
 800797e:	ee08 0a10 	vmov	s16, r0
 8007982:	9304      	str	r3, [sp, #16]
 8007984:	4bb4      	ldr	r3, [pc, #720]	; (8007c58 <__gethex+0x2e4>)
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	9301      	str	r3, [sp, #4]
 800798a:	4618      	mov	r0, r3
 800798c:	468b      	mov	fp, r1
 800798e:	4690      	mov	r8, r2
 8007990:	f7f8 fc30 	bl	80001f4 <strlen>
 8007994:	9b01      	ldr	r3, [sp, #4]
 8007996:	f8db 2000 	ldr.w	r2, [fp]
 800799a:	4403      	add	r3, r0
 800799c:	4682      	mov	sl, r0
 800799e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80079a2:	9305      	str	r3, [sp, #20]
 80079a4:	1c93      	adds	r3, r2, #2
 80079a6:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 80079aa:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 80079ae:	32fe      	adds	r2, #254	; 0xfe
 80079b0:	18d1      	adds	r1, r2, r3
 80079b2:	461f      	mov	r7, r3
 80079b4:	f813 0b01 	ldrb.w	r0, [r3], #1
 80079b8:	9100      	str	r1, [sp, #0]
 80079ba:	2830      	cmp	r0, #48	; 0x30
 80079bc:	d0f8      	beq.n	80079b0 <__gethex+0x3c>
 80079be:	f7ff ffc3 	bl	8007948 <__hexdig_fun>
 80079c2:	4604      	mov	r4, r0
 80079c4:	2800      	cmp	r0, #0
 80079c6:	d13a      	bne.n	8007a3e <__gethex+0xca>
 80079c8:	9901      	ldr	r1, [sp, #4]
 80079ca:	4652      	mov	r2, sl
 80079cc:	4638      	mov	r0, r7
 80079ce:	f001 fdb3 	bl	8009538 <strncmp>
 80079d2:	4605      	mov	r5, r0
 80079d4:	2800      	cmp	r0, #0
 80079d6:	d168      	bne.n	8007aaa <__gethex+0x136>
 80079d8:	f817 000a 	ldrb.w	r0, [r7, sl]
 80079dc:	eb07 060a 	add.w	r6, r7, sl
 80079e0:	f7ff ffb2 	bl	8007948 <__hexdig_fun>
 80079e4:	2800      	cmp	r0, #0
 80079e6:	d062      	beq.n	8007aae <__gethex+0x13a>
 80079e8:	4633      	mov	r3, r6
 80079ea:	7818      	ldrb	r0, [r3, #0]
 80079ec:	2830      	cmp	r0, #48	; 0x30
 80079ee:	461f      	mov	r7, r3
 80079f0:	f103 0301 	add.w	r3, r3, #1
 80079f4:	d0f9      	beq.n	80079ea <__gethex+0x76>
 80079f6:	f7ff ffa7 	bl	8007948 <__hexdig_fun>
 80079fa:	2301      	movs	r3, #1
 80079fc:	fab0 f480 	clz	r4, r0
 8007a00:	0964      	lsrs	r4, r4, #5
 8007a02:	4635      	mov	r5, r6
 8007a04:	9300      	str	r3, [sp, #0]
 8007a06:	463a      	mov	r2, r7
 8007a08:	4616      	mov	r6, r2
 8007a0a:	3201      	adds	r2, #1
 8007a0c:	7830      	ldrb	r0, [r6, #0]
 8007a0e:	f7ff ff9b 	bl	8007948 <__hexdig_fun>
 8007a12:	2800      	cmp	r0, #0
 8007a14:	d1f8      	bne.n	8007a08 <__gethex+0x94>
 8007a16:	9901      	ldr	r1, [sp, #4]
 8007a18:	4652      	mov	r2, sl
 8007a1a:	4630      	mov	r0, r6
 8007a1c:	f001 fd8c 	bl	8009538 <strncmp>
 8007a20:	b980      	cbnz	r0, 8007a44 <__gethex+0xd0>
 8007a22:	b94d      	cbnz	r5, 8007a38 <__gethex+0xc4>
 8007a24:	eb06 050a 	add.w	r5, r6, sl
 8007a28:	462a      	mov	r2, r5
 8007a2a:	4616      	mov	r6, r2
 8007a2c:	3201      	adds	r2, #1
 8007a2e:	7830      	ldrb	r0, [r6, #0]
 8007a30:	f7ff ff8a 	bl	8007948 <__hexdig_fun>
 8007a34:	2800      	cmp	r0, #0
 8007a36:	d1f8      	bne.n	8007a2a <__gethex+0xb6>
 8007a38:	1bad      	subs	r5, r5, r6
 8007a3a:	00ad      	lsls	r5, r5, #2
 8007a3c:	e004      	b.n	8007a48 <__gethex+0xd4>
 8007a3e:	2400      	movs	r4, #0
 8007a40:	4625      	mov	r5, r4
 8007a42:	e7e0      	b.n	8007a06 <__gethex+0x92>
 8007a44:	2d00      	cmp	r5, #0
 8007a46:	d1f7      	bne.n	8007a38 <__gethex+0xc4>
 8007a48:	7833      	ldrb	r3, [r6, #0]
 8007a4a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8007a4e:	2b50      	cmp	r3, #80	; 0x50
 8007a50:	d13b      	bne.n	8007aca <__gethex+0x156>
 8007a52:	7873      	ldrb	r3, [r6, #1]
 8007a54:	2b2b      	cmp	r3, #43	; 0x2b
 8007a56:	d02c      	beq.n	8007ab2 <__gethex+0x13e>
 8007a58:	2b2d      	cmp	r3, #45	; 0x2d
 8007a5a:	d02e      	beq.n	8007aba <__gethex+0x146>
 8007a5c:	1c71      	adds	r1, r6, #1
 8007a5e:	f04f 0900 	mov.w	r9, #0
 8007a62:	7808      	ldrb	r0, [r1, #0]
 8007a64:	f7ff ff70 	bl	8007948 <__hexdig_fun>
 8007a68:	1e43      	subs	r3, r0, #1
 8007a6a:	b2db      	uxtb	r3, r3
 8007a6c:	2b18      	cmp	r3, #24
 8007a6e:	d82c      	bhi.n	8007aca <__gethex+0x156>
 8007a70:	f1a0 0210 	sub.w	r2, r0, #16
 8007a74:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8007a78:	f7ff ff66 	bl	8007948 <__hexdig_fun>
 8007a7c:	1e43      	subs	r3, r0, #1
 8007a7e:	b2db      	uxtb	r3, r3
 8007a80:	2b18      	cmp	r3, #24
 8007a82:	d91d      	bls.n	8007ac0 <__gethex+0x14c>
 8007a84:	f1b9 0f00 	cmp.w	r9, #0
 8007a88:	d000      	beq.n	8007a8c <__gethex+0x118>
 8007a8a:	4252      	negs	r2, r2
 8007a8c:	4415      	add	r5, r2
 8007a8e:	f8cb 1000 	str.w	r1, [fp]
 8007a92:	b1e4      	cbz	r4, 8007ace <__gethex+0x15a>
 8007a94:	9b00      	ldr	r3, [sp, #0]
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	bf14      	ite	ne
 8007a9a:	2700      	movne	r7, #0
 8007a9c:	2706      	moveq	r7, #6
 8007a9e:	4638      	mov	r0, r7
 8007aa0:	b009      	add	sp, #36	; 0x24
 8007aa2:	ecbd 8b02 	vpop	{d8}
 8007aa6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007aaa:	463e      	mov	r6, r7
 8007aac:	4625      	mov	r5, r4
 8007aae:	2401      	movs	r4, #1
 8007ab0:	e7ca      	b.n	8007a48 <__gethex+0xd4>
 8007ab2:	f04f 0900 	mov.w	r9, #0
 8007ab6:	1cb1      	adds	r1, r6, #2
 8007ab8:	e7d3      	b.n	8007a62 <__gethex+0xee>
 8007aba:	f04f 0901 	mov.w	r9, #1
 8007abe:	e7fa      	b.n	8007ab6 <__gethex+0x142>
 8007ac0:	230a      	movs	r3, #10
 8007ac2:	fb03 0202 	mla	r2, r3, r2, r0
 8007ac6:	3a10      	subs	r2, #16
 8007ac8:	e7d4      	b.n	8007a74 <__gethex+0x100>
 8007aca:	4631      	mov	r1, r6
 8007acc:	e7df      	b.n	8007a8e <__gethex+0x11a>
 8007ace:	1bf3      	subs	r3, r6, r7
 8007ad0:	3b01      	subs	r3, #1
 8007ad2:	4621      	mov	r1, r4
 8007ad4:	2b07      	cmp	r3, #7
 8007ad6:	dc0b      	bgt.n	8007af0 <__gethex+0x17c>
 8007ad8:	ee18 0a10 	vmov	r0, s16
 8007adc:	f000 fa90 	bl	8008000 <_Balloc>
 8007ae0:	4604      	mov	r4, r0
 8007ae2:	b940      	cbnz	r0, 8007af6 <__gethex+0x182>
 8007ae4:	4b5d      	ldr	r3, [pc, #372]	; (8007c5c <__gethex+0x2e8>)
 8007ae6:	4602      	mov	r2, r0
 8007ae8:	21de      	movs	r1, #222	; 0xde
 8007aea:	485d      	ldr	r0, [pc, #372]	; (8007c60 <__gethex+0x2ec>)
 8007aec:	f001 fdf4 	bl	80096d8 <__assert_func>
 8007af0:	3101      	adds	r1, #1
 8007af2:	105b      	asrs	r3, r3, #1
 8007af4:	e7ee      	b.n	8007ad4 <__gethex+0x160>
 8007af6:	f100 0914 	add.w	r9, r0, #20
 8007afa:	f04f 0b00 	mov.w	fp, #0
 8007afe:	f1ca 0301 	rsb	r3, sl, #1
 8007b02:	f8cd 9008 	str.w	r9, [sp, #8]
 8007b06:	f8cd b000 	str.w	fp, [sp]
 8007b0a:	9306      	str	r3, [sp, #24]
 8007b0c:	42b7      	cmp	r7, r6
 8007b0e:	d340      	bcc.n	8007b92 <__gethex+0x21e>
 8007b10:	9802      	ldr	r0, [sp, #8]
 8007b12:	9b00      	ldr	r3, [sp, #0]
 8007b14:	f840 3b04 	str.w	r3, [r0], #4
 8007b18:	eba0 0009 	sub.w	r0, r0, r9
 8007b1c:	1080      	asrs	r0, r0, #2
 8007b1e:	0146      	lsls	r6, r0, #5
 8007b20:	6120      	str	r0, [r4, #16]
 8007b22:	4618      	mov	r0, r3
 8007b24:	f000 fb5e 	bl	80081e4 <__hi0bits>
 8007b28:	1a30      	subs	r0, r6, r0
 8007b2a:	f8d8 6000 	ldr.w	r6, [r8]
 8007b2e:	42b0      	cmp	r0, r6
 8007b30:	dd63      	ble.n	8007bfa <__gethex+0x286>
 8007b32:	1b87      	subs	r7, r0, r6
 8007b34:	4639      	mov	r1, r7
 8007b36:	4620      	mov	r0, r4
 8007b38:	f000 ff02 	bl	8008940 <__any_on>
 8007b3c:	4682      	mov	sl, r0
 8007b3e:	b1a8      	cbz	r0, 8007b6c <__gethex+0x1f8>
 8007b40:	1e7b      	subs	r3, r7, #1
 8007b42:	1159      	asrs	r1, r3, #5
 8007b44:	f003 021f 	and.w	r2, r3, #31
 8007b48:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8007b4c:	f04f 0a01 	mov.w	sl, #1
 8007b50:	fa0a f202 	lsl.w	r2, sl, r2
 8007b54:	420a      	tst	r2, r1
 8007b56:	d009      	beq.n	8007b6c <__gethex+0x1f8>
 8007b58:	4553      	cmp	r3, sl
 8007b5a:	dd05      	ble.n	8007b68 <__gethex+0x1f4>
 8007b5c:	1eb9      	subs	r1, r7, #2
 8007b5e:	4620      	mov	r0, r4
 8007b60:	f000 feee 	bl	8008940 <__any_on>
 8007b64:	2800      	cmp	r0, #0
 8007b66:	d145      	bne.n	8007bf4 <__gethex+0x280>
 8007b68:	f04f 0a02 	mov.w	sl, #2
 8007b6c:	4639      	mov	r1, r7
 8007b6e:	4620      	mov	r0, r4
 8007b70:	f7ff fe98 	bl	80078a4 <rshift>
 8007b74:	443d      	add	r5, r7
 8007b76:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007b7a:	42ab      	cmp	r3, r5
 8007b7c:	da4c      	bge.n	8007c18 <__gethex+0x2a4>
 8007b7e:	ee18 0a10 	vmov	r0, s16
 8007b82:	4621      	mov	r1, r4
 8007b84:	f000 fa7c 	bl	8008080 <_Bfree>
 8007b88:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8007b8a:	2300      	movs	r3, #0
 8007b8c:	6013      	str	r3, [r2, #0]
 8007b8e:	27a3      	movs	r7, #163	; 0xa3
 8007b90:	e785      	b.n	8007a9e <__gethex+0x12a>
 8007b92:	1e73      	subs	r3, r6, #1
 8007b94:	9a05      	ldr	r2, [sp, #20]
 8007b96:	9303      	str	r3, [sp, #12]
 8007b98:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8007b9c:	4293      	cmp	r3, r2
 8007b9e:	d019      	beq.n	8007bd4 <__gethex+0x260>
 8007ba0:	f1bb 0f20 	cmp.w	fp, #32
 8007ba4:	d107      	bne.n	8007bb6 <__gethex+0x242>
 8007ba6:	9b02      	ldr	r3, [sp, #8]
 8007ba8:	9a00      	ldr	r2, [sp, #0]
 8007baa:	f843 2b04 	str.w	r2, [r3], #4
 8007bae:	9302      	str	r3, [sp, #8]
 8007bb0:	2300      	movs	r3, #0
 8007bb2:	9300      	str	r3, [sp, #0]
 8007bb4:	469b      	mov	fp, r3
 8007bb6:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8007bba:	f7ff fec5 	bl	8007948 <__hexdig_fun>
 8007bbe:	9b00      	ldr	r3, [sp, #0]
 8007bc0:	f000 000f 	and.w	r0, r0, #15
 8007bc4:	fa00 f00b 	lsl.w	r0, r0, fp
 8007bc8:	4303      	orrs	r3, r0
 8007bca:	9300      	str	r3, [sp, #0]
 8007bcc:	f10b 0b04 	add.w	fp, fp, #4
 8007bd0:	9b03      	ldr	r3, [sp, #12]
 8007bd2:	e00d      	b.n	8007bf0 <__gethex+0x27c>
 8007bd4:	9b03      	ldr	r3, [sp, #12]
 8007bd6:	9a06      	ldr	r2, [sp, #24]
 8007bd8:	4413      	add	r3, r2
 8007bda:	42bb      	cmp	r3, r7
 8007bdc:	d3e0      	bcc.n	8007ba0 <__gethex+0x22c>
 8007bde:	4618      	mov	r0, r3
 8007be0:	9901      	ldr	r1, [sp, #4]
 8007be2:	9307      	str	r3, [sp, #28]
 8007be4:	4652      	mov	r2, sl
 8007be6:	f001 fca7 	bl	8009538 <strncmp>
 8007bea:	9b07      	ldr	r3, [sp, #28]
 8007bec:	2800      	cmp	r0, #0
 8007bee:	d1d7      	bne.n	8007ba0 <__gethex+0x22c>
 8007bf0:	461e      	mov	r6, r3
 8007bf2:	e78b      	b.n	8007b0c <__gethex+0x198>
 8007bf4:	f04f 0a03 	mov.w	sl, #3
 8007bf8:	e7b8      	b.n	8007b6c <__gethex+0x1f8>
 8007bfa:	da0a      	bge.n	8007c12 <__gethex+0x29e>
 8007bfc:	1a37      	subs	r7, r6, r0
 8007bfe:	4621      	mov	r1, r4
 8007c00:	ee18 0a10 	vmov	r0, s16
 8007c04:	463a      	mov	r2, r7
 8007c06:	f000 fc57 	bl	80084b8 <__lshift>
 8007c0a:	1bed      	subs	r5, r5, r7
 8007c0c:	4604      	mov	r4, r0
 8007c0e:	f100 0914 	add.w	r9, r0, #20
 8007c12:	f04f 0a00 	mov.w	sl, #0
 8007c16:	e7ae      	b.n	8007b76 <__gethex+0x202>
 8007c18:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8007c1c:	42a8      	cmp	r0, r5
 8007c1e:	dd72      	ble.n	8007d06 <__gethex+0x392>
 8007c20:	1b45      	subs	r5, r0, r5
 8007c22:	42ae      	cmp	r6, r5
 8007c24:	dc36      	bgt.n	8007c94 <__gethex+0x320>
 8007c26:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8007c2a:	2b02      	cmp	r3, #2
 8007c2c:	d02a      	beq.n	8007c84 <__gethex+0x310>
 8007c2e:	2b03      	cmp	r3, #3
 8007c30:	d02c      	beq.n	8007c8c <__gethex+0x318>
 8007c32:	2b01      	cmp	r3, #1
 8007c34:	d11c      	bne.n	8007c70 <__gethex+0x2fc>
 8007c36:	42ae      	cmp	r6, r5
 8007c38:	d11a      	bne.n	8007c70 <__gethex+0x2fc>
 8007c3a:	2e01      	cmp	r6, #1
 8007c3c:	d112      	bne.n	8007c64 <__gethex+0x2f0>
 8007c3e:	9a04      	ldr	r2, [sp, #16]
 8007c40:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8007c44:	6013      	str	r3, [r2, #0]
 8007c46:	2301      	movs	r3, #1
 8007c48:	6123      	str	r3, [r4, #16]
 8007c4a:	f8c9 3000 	str.w	r3, [r9]
 8007c4e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007c50:	2762      	movs	r7, #98	; 0x62
 8007c52:	601c      	str	r4, [r3, #0]
 8007c54:	e723      	b.n	8007a9e <__gethex+0x12a>
 8007c56:	bf00      	nop
 8007c58:	0800bd70 	.word	0x0800bd70
 8007c5c:	0800bcf8 	.word	0x0800bcf8
 8007c60:	0800bd09 	.word	0x0800bd09
 8007c64:	1e71      	subs	r1, r6, #1
 8007c66:	4620      	mov	r0, r4
 8007c68:	f000 fe6a 	bl	8008940 <__any_on>
 8007c6c:	2800      	cmp	r0, #0
 8007c6e:	d1e6      	bne.n	8007c3e <__gethex+0x2ca>
 8007c70:	ee18 0a10 	vmov	r0, s16
 8007c74:	4621      	mov	r1, r4
 8007c76:	f000 fa03 	bl	8008080 <_Bfree>
 8007c7a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8007c7c:	2300      	movs	r3, #0
 8007c7e:	6013      	str	r3, [r2, #0]
 8007c80:	2750      	movs	r7, #80	; 0x50
 8007c82:	e70c      	b.n	8007a9e <__gethex+0x12a>
 8007c84:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d1f2      	bne.n	8007c70 <__gethex+0x2fc>
 8007c8a:	e7d8      	b.n	8007c3e <__gethex+0x2ca>
 8007c8c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d1d5      	bne.n	8007c3e <__gethex+0x2ca>
 8007c92:	e7ed      	b.n	8007c70 <__gethex+0x2fc>
 8007c94:	1e6f      	subs	r7, r5, #1
 8007c96:	f1ba 0f00 	cmp.w	sl, #0
 8007c9a:	d131      	bne.n	8007d00 <__gethex+0x38c>
 8007c9c:	b127      	cbz	r7, 8007ca8 <__gethex+0x334>
 8007c9e:	4639      	mov	r1, r7
 8007ca0:	4620      	mov	r0, r4
 8007ca2:	f000 fe4d 	bl	8008940 <__any_on>
 8007ca6:	4682      	mov	sl, r0
 8007ca8:	117b      	asrs	r3, r7, #5
 8007caa:	2101      	movs	r1, #1
 8007cac:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8007cb0:	f007 071f 	and.w	r7, r7, #31
 8007cb4:	fa01 f707 	lsl.w	r7, r1, r7
 8007cb8:	421f      	tst	r7, r3
 8007cba:	4629      	mov	r1, r5
 8007cbc:	4620      	mov	r0, r4
 8007cbe:	bf18      	it	ne
 8007cc0:	f04a 0a02 	orrne.w	sl, sl, #2
 8007cc4:	1b76      	subs	r6, r6, r5
 8007cc6:	f7ff fded 	bl	80078a4 <rshift>
 8007cca:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8007cce:	2702      	movs	r7, #2
 8007cd0:	f1ba 0f00 	cmp.w	sl, #0
 8007cd4:	d048      	beq.n	8007d68 <__gethex+0x3f4>
 8007cd6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8007cda:	2b02      	cmp	r3, #2
 8007cdc:	d015      	beq.n	8007d0a <__gethex+0x396>
 8007cde:	2b03      	cmp	r3, #3
 8007ce0:	d017      	beq.n	8007d12 <__gethex+0x39e>
 8007ce2:	2b01      	cmp	r3, #1
 8007ce4:	d109      	bne.n	8007cfa <__gethex+0x386>
 8007ce6:	f01a 0f02 	tst.w	sl, #2
 8007cea:	d006      	beq.n	8007cfa <__gethex+0x386>
 8007cec:	f8d9 0000 	ldr.w	r0, [r9]
 8007cf0:	ea4a 0a00 	orr.w	sl, sl, r0
 8007cf4:	f01a 0f01 	tst.w	sl, #1
 8007cf8:	d10e      	bne.n	8007d18 <__gethex+0x3a4>
 8007cfa:	f047 0710 	orr.w	r7, r7, #16
 8007cfe:	e033      	b.n	8007d68 <__gethex+0x3f4>
 8007d00:	f04f 0a01 	mov.w	sl, #1
 8007d04:	e7d0      	b.n	8007ca8 <__gethex+0x334>
 8007d06:	2701      	movs	r7, #1
 8007d08:	e7e2      	b.n	8007cd0 <__gethex+0x35c>
 8007d0a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007d0c:	f1c3 0301 	rsb	r3, r3, #1
 8007d10:	9315      	str	r3, [sp, #84]	; 0x54
 8007d12:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d0f0      	beq.n	8007cfa <__gethex+0x386>
 8007d18:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8007d1c:	f104 0314 	add.w	r3, r4, #20
 8007d20:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8007d24:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8007d28:	f04f 0c00 	mov.w	ip, #0
 8007d2c:	4618      	mov	r0, r3
 8007d2e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007d32:	f1b2 3fff 	cmp.w	r2, #4294967295
 8007d36:	d01c      	beq.n	8007d72 <__gethex+0x3fe>
 8007d38:	3201      	adds	r2, #1
 8007d3a:	6002      	str	r2, [r0, #0]
 8007d3c:	2f02      	cmp	r7, #2
 8007d3e:	f104 0314 	add.w	r3, r4, #20
 8007d42:	d13f      	bne.n	8007dc4 <__gethex+0x450>
 8007d44:	f8d8 2000 	ldr.w	r2, [r8]
 8007d48:	3a01      	subs	r2, #1
 8007d4a:	42b2      	cmp	r2, r6
 8007d4c:	d10a      	bne.n	8007d64 <__gethex+0x3f0>
 8007d4e:	1171      	asrs	r1, r6, #5
 8007d50:	2201      	movs	r2, #1
 8007d52:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007d56:	f006 061f 	and.w	r6, r6, #31
 8007d5a:	fa02 f606 	lsl.w	r6, r2, r6
 8007d5e:	421e      	tst	r6, r3
 8007d60:	bf18      	it	ne
 8007d62:	4617      	movne	r7, r2
 8007d64:	f047 0720 	orr.w	r7, r7, #32
 8007d68:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007d6a:	601c      	str	r4, [r3, #0]
 8007d6c:	9b04      	ldr	r3, [sp, #16]
 8007d6e:	601d      	str	r5, [r3, #0]
 8007d70:	e695      	b.n	8007a9e <__gethex+0x12a>
 8007d72:	4299      	cmp	r1, r3
 8007d74:	f843 cc04 	str.w	ip, [r3, #-4]
 8007d78:	d8d8      	bhi.n	8007d2c <__gethex+0x3b8>
 8007d7a:	68a3      	ldr	r3, [r4, #8]
 8007d7c:	459b      	cmp	fp, r3
 8007d7e:	db19      	blt.n	8007db4 <__gethex+0x440>
 8007d80:	6861      	ldr	r1, [r4, #4]
 8007d82:	ee18 0a10 	vmov	r0, s16
 8007d86:	3101      	adds	r1, #1
 8007d88:	f000 f93a 	bl	8008000 <_Balloc>
 8007d8c:	4681      	mov	r9, r0
 8007d8e:	b918      	cbnz	r0, 8007d98 <__gethex+0x424>
 8007d90:	4b1a      	ldr	r3, [pc, #104]	; (8007dfc <__gethex+0x488>)
 8007d92:	4602      	mov	r2, r0
 8007d94:	2184      	movs	r1, #132	; 0x84
 8007d96:	e6a8      	b.n	8007aea <__gethex+0x176>
 8007d98:	6922      	ldr	r2, [r4, #16]
 8007d9a:	3202      	adds	r2, #2
 8007d9c:	f104 010c 	add.w	r1, r4, #12
 8007da0:	0092      	lsls	r2, r2, #2
 8007da2:	300c      	adds	r0, #12
 8007da4:	f000 f91e 	bl	8007fe4 <memcpy>
 8007da8:	4621      	mov	r1, r4
 8007daa:	ee18 0a10 	vmov	r0, s16
 8007dae:	f000 f967 	bl	8008080 <_Bfree>
 8007db2:	464c      	mov	r4, r9
 8007db4:	6923      	ldr	r3, [r4, #16]
 8007db6:	1c5a      	adds	r2, r3, #1
 8007db8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007dbc:	6122      	str	r2, [r4, #16]
 8007dbe:	2201      	movs	r2, #1
 8007dc0:	615a      	str	r2, [r3, #20]
 8007dc2:	e7bb      	b.n	8007d3c <__gethex+0x3c8>
 8007dc4:	6922      	ldr	r2, [r4, #16]
 8007dc6:	455a      	cmp	r2, fp
 8007dc8:	dd0b      	ble.n	8007de2 <__gethex+0x46e>
 8007dca:	2101      	movs	r1, #1
 8007dcc:	4620      	mov	r0, r4
 8007dce:	f7ff fd69 	bl	80078a4 <rshift>
 8007dd2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007dd6:	3501      	adds	r5, #1
 8007dd8:	42ab      	cmp	r3, r5
 8007dda:	f6ff aed0 	blt.w	8007b7e <__gethex+0x20a>
 8007dde:	2701      	movs	r7, #1
 8007de0:	e7c0      	b.n	8007d64 <__gethex+0x3f0>
 8007de2:	f016 061f 	ands.w	r6, r6, #31
 8007de6:	d0fa      	beq.n	8007dde <__gethex+0x46a>
 8007de8:	4453      	add	r3, sl
 8007dea:	f1c6 0620 	rsb	r6, r6, #32
 8007dee:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8007df2:	f000 f9f7 	bl	80081e4 <__hi0bits>
 8007df6:	42b0      	cmp	r0, r6
 8007df8:	dbe7      	blt.n	8007dca <__gethex+0x456>
 8007dfa:	e7f0      	b.n	8007dde <__gethex+0x46a>
 8007dfc:	0800bcf8 	.word	0x0800bcf8

08007e00 <L_shift>:
 8007e00:	f1c2 0208 	rsb	r2, r2, #8
 8007e04:	0092      	lsls	r2, r2, #2
 8007e06:	b570      	push	{r4, r5, r6, lr}
 8007e08:	f1c2 0620 	rsb	r6, r2, #32
 8007e0c:	6843      	ldr	r3, [r0, #4]
 8007e0e:	6804      	ldr	r4, [r0, #0]
 8007e10:	fa03 f506 	lsl.w	r5, r3, r6
 8007e14:	432c      	orrs	r4, r5
 8007e16:	40d3      	lsrs	r3, r2
 8007e18:	6004      	str	r4, [r0, #0]
 8007e1a:	f840 3f04 	str.w	r3, [r0, #4]!
 8007e1e:	4288      	cmp	r0, r1
 8007e20:	d3f4      	bcc.n	8007e0c <L_shift+0xc>
 8007e22:	bd70      	pop	{r4, r5, r6, pc}

08007e24 <__match>:
 8007e24:	b530      	push	{r4, r5, lr}
 8007e26:	6803      	ldr	r3, [r0, #0]
 8007e28:	3301      	adds	r3, #1
 8007e2a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007e2e:	b914      	cbnz	r4, 8007e36 <__match+0x12>
 8007e30:	6003      	str	r3, [r0, #0]
 8007e32:	2001      	movs	r0, #1
 8007e34:	bd30      	pop	{r4, r5, pc}
 8007e36:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007e3a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8007e3e:	2d19      	cmp	r5, #25
 8007e40:	bf98      	it	ls
 8007e42:	3220      	addls	r2, #32
 8007e44:	42a2      	cmp	r2, r4
 8007e46:	d0f0      	beq.n	8007e2a <__match+0x6>
 8007e48:	2000      	movs	r0, #0
 8007e4a:	e7f3      	b.n	8007e34 <__match+0x10>

08007e4c <__hexnan>:
 8007e4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e50:	680b      	ldr	r3, [r1, #0]
 8007e52:	115e      	asrs	r6, r3, #5
 8007e54:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8007e58:	f013 031f 	ands.w	r3, r3, #31
 8007e5c:	b087      	sub	sp, #28
 8007e5e:	bf18      	it	ne
 8007e60:	3604      	addne	r6, #4
 8007e62:	2500      	movs	r5, #0
 8007e64:	1f37      	subs	r7, r6, #4
 8007e66:	4690      	mov	r8, r2
 8007e68:	6802      	ldr	r2, [r0, #0]
 8007e6a:	9301      	str	r3, [sp, #4]
 8007e6c:	4682      	mov	sl, r0
 8007e6e:	f846 5c04 	str.w	r5, [r6, #-4]
 8007e72:	46b9      	mov	r9, r7
 8007e74:	463c      	mov	r4, r7
 8007e76:	9502      	str	r5, [sp, #8]
 8007e78:	46ab      	mov	fp, r5
 8007e7a:	7851      	ldrb	r1, [r2, #1]
 8007e7c:	1c53      	adds	r3, r2, #1
 8007e7e:	9303      	str	r3, [sp, #12]
 8007e80:	b341      	cbz	r1, 8007ed4 <__hexnan+0x88>
 8007e82:	4608      	mov	r0, r1
 8007e84:	9205      	str	r2, [sp, #20]
 8007e86:	9104      	str	r1, [sp, #16]
 8007e88:	f7ff fd5e 	bl	8007948 <__hexdig_fun>
 8007e8c:	2800      	cmp	r0, #0
 8007e8e:	d14f      	bne.n	8007f30 <__hexnan+0xe4>
 8007e90:	9904      	ldr	r1, [sp, #16]
 8007e92:	9a05      	ldr	r2, [sp, #20]
 8007e94:	2920      	cmp	r1, #32
 8007e96:	d818      	bhi.n	8007eca <__hexnan+0x7e>
 8007e98:	9b02      	ldr	r3, [sp, #8]
 8007e9a:	459b      	cmp	fp, r3
 8007e9c:	dd13      	ble.n	8007ec6 <__hexnan+0x7a>
 8007e9e:	454c      	cmp	r4, r9
 8007ea0:	d206      	bcs.n	8007eb0 <__hexnan+0x64>
 8007ea2:	2d07      	cmp	r5, #7
 8007ea4:	dc04      	bgt.n	8007eb0 <__hexnan+0x64>
 8007ea6:	462a      	mov	r2, r5
 8007ea8:	4649      	mov	r1, r9
 8007eaa:	4620      	mov	r0, r4
 8007eac:	f7ff ffa8 	bl	8007e00 <L_shift>
 8007eb0:	4544      	cmp	r4, r8
 8007eb2:	d950      	bls.n	8007f56 <__hexnan+0x10a>
 8007eb4:	2300      	movs	r3, #0
 8007eb6:	f1a4 0904 	sub.w	r9, r4, #4
 8007eba:	f844 3c04 	str.w	r3, [r4, #-4]
 8007ebe:	f8cd b008 	str.w	fp, [sp, #8]
 8007ec2:	464c      	mov	r4, r9
 8007ec4:	461d      	mov	r5, r3
 8007ec6:	9a03      	ldr	r2, [sp, #12]
 8007ec8:	e7d7      	b.n	8007e7a <__hexnan+0x2e>
 8007eca:	2929      	cmp	r1, #41	; 0x29
 8007ecc:	d156      	bne.n	8007f7c <__hexnan+0x130>
 8007ece:	3202      	adds	r2, #2
 8007ed0:	f8ca 2000 	str.w	r2, [sl]
 8007ed4:	f1bb 0f00 	cmp.w	fp, #0
 8007ed8:	d050      	beq.n	8007f7c <__hexnan+0x130>
 8007eda:	454c      	cmp	r4, r9
 8007edc:	d206      	bcs.n	8007eec <__hexnan+0xa0>
 8007ede:	2d07      	cmp	r5, #7
 8007ee0:	dc04      	bgt.n	8007eec <__hexnan+0xa0>
 8007ee2:	462a      	mov	r2, r5
 8007ee4:	4649      	mov	r1, r9
 8007ee6:	4620      	mov	r0, r4
 8007ee8:	f7ff ff8a 	bl	8007e00 <L_shift>
 8007eec:	4544      	cmp	r4, r8
 8007eee:	d934      	bls.n	8007f5a <__hexnan+0x10e>
 8007ef0:	f1a8 0204 	sub.w	r2, r8, #4
 8007ef4:	4623      	mov	r3, r4
 8007ef6:	f853 1b04 	ldr.w	r1, [r3], #4
 8007efa:	f842 1f04 	str.w	r1, [r2, #4]!
 8007efe:	429f      	cmp	r7, r3
 8007f00:	d2f9      	bcs.n	8007ef6 <__hexnan+0xaa>
 8007f02:	1b3b      	subs	r3, r7, r4
 8007f04:	f023 0303 	bic.w	r3, r3, #3
 8007f08:	3304      	adds	r3, #4
 8007f0a:	3401      	adds	r4, #1
 8007f0c:	3e03      	subs	r6, #3
 8007f0e:	42b4      	cmp	r4, r6
 8007f10:	bf88      	it	hi
 8007f12:	2304      	movhi	r3, #4
 8007f14:	4443      	add	r3, r8
 8007f16:	2200      	movs	r2, #0
 8007f18:	f843 2b04 	str.w	r2, [r3], #4
 8007f1c:	429f      	cmp	r7, r3
 8007f1e:	d2fb      	bcs.n	8007f18 <__hexnan+0xcc>
 8007f20:	683b      	ldr	r3, [r7, #0]
 8007f22:	b91b      	cbnz	r3, 8007f2c <__hexnan+0xe0>
 8007f24:	4547      	cmp	r7, r8
 8007f26:	d127      	bne.n	8007f78 <__hexnan+0x12c>
 8007f28:	2301      	movs	r3, #1
 8007f2a:	603b      	str	r3, [r7, #0]
 8007f2c:	2005      	movs	r0, #5
 8007f2e:	e026      	b.n	8007f7e <__hexnan+0x132>
 8007f30:	3501      	adds	r5, #1
 8007f32:	2d08      	cmp	r5, #8
 8007f34:	f10b 0b01 	add.w	fp, fp, #1
 8007f38:	dd06      	ble.n	8007f48 <__hexnan+0xfc>
 8007f3a:	4544      	cmp	r4, r8
 8007f3c:	d9c3      	bls.n	8007ec6 <__hexnan+0x7a>
 8007f3e:	2300      	movs	r3, #0
 8007f40:	f844 3c04 	str.w	r3, [r4, #-4]
 8007f44:	2501      	movs	r5, #1
 8007f46:	3c04      	subs	r4, #4
 8007f48:	6822      	ldr	r2, [r4, #0]
 8007f4a:	f000 000f 	and.w	r0, r0, #15
 8007f4e:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8007f52:	6022      	str	r2, [r4, #0]
 8007f54:	e7b7      	b.n	8007ec6 <__hexnan+0x7a>
 8007f56:	2508      	movs	r5, #8
 8007f58:	e7b5      	b.n	8007ec6 <__hexnan+0x7a>
 8007f5a:	9b01      	ldr	r3, [sp, #4]
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d0df      	beq.n	8007f20 <__hexnan+0xd4>
 8007f60:	f04f 32ff 	mov.w	r2, #4294967295
 8007f64:	f1c3 0320 	rsb	r3, r3, #32
 8007f68:	fa22 f303 	lsr.w	r3, r2, r3
 8007f6c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8007f70:	401a      	ands	r2, r3
 8007f72:	f846 2c04 	str.w	r2, [r6, #-4]
 8007f76:	e7d3      	b.n	8007f20 <__hexnan+0xd4>
 8007f78:	3f04      	subs	r7, #4
 8007f7a:	e7d1      	b.n	8007f20 <__hexnan+0xd4>
 8007f7c:	2004      	movs	r0, #4
 8007f7e:	b007      	add	sp, #28
 8007f80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007f84 <_localeconv_r>:
 8007f84:	4800      	ldr	r0, [pc, #0]	; (8007f88 <_localeconv_r+0x4>)
 8007f86:	4770      	bx	lr
 8007f88:	20000168 	.word	0x20000168

08007f8c <_lseek_r>:
 8007f8c:	b538      	push	{r3, r4, r5, lr}
 8007f8e:	4d07      	ldr	r5, [pc, #28]	; (8007fac <_lseek_r+0x20>)
 8007f90:	4604      	mov	r4, r0
 8007f92:	4608      	mov	r0, r1
 8007f94:	4611      	mov	r1, r2
 8007f96:	2200      	movs	r2, #0
 8007f98:	602a      	str	r2, [r5, #0]
 8007f9a:	461a      	mov	r2, r3
 8007f9c:	f7fa fb43 	bl	8002626 <_lseek>
 8007fa0:	1c43      	adds	r3, r0, #1
 8007fa2:	d102      	bne.n	8007faa <_lseek_r+0x1e>
 8007fa4:	682b      	ldr	r3, [r5, #0]
 8007fa6:	b103      	cbz	r3, 8007faa <_lseek_r+0x1e>
 8007fa8:	6023      	str	r3, [r4, #0]
 8007faa:	bd38      	pop	{r3, r4, r5, pc}
 8007fac:	20000cb4 	.word	0x20000cb4

08007fb0 <malloc>:
 8007fb0:	4b02      	ldr	r3, [pc, #8]	; (8007fbc <malloc+0xc>)
 8007fb2:	4601      	mov	r1, r0
 8007fb4:	6818      	ldr	r0, [r3, #0]
 8007fb6:	f000 bd67 	b.w	8008a88 <_malloc_r>
 8007fba:	bf00      	nop
 8007fbc:	20000010 	.word	0x20000010

08007fc0 <__ascii_mbtowc>:
 8007fc0:	b082      	sub	sp, #8
 8007fc2:	b901      	cbnz	r1, 8007fc6 <__ascii_mbtowc+0x6>
 8007fc4:	a901      	add	r1, sp, #4
 8007fc6:	b142      	cbz	r2, 8007fda <__ascii_mbtowc+0x1a>
 8007fc8:	b14b      	cbz	r3, 8007fde <__ascii_mbtowc+0x1e>
 8007fca:	7813      	ldrb	r3, [r2, #0]
 8007fcc:	600b      	str	r3, [r1, #0]
 8007fce:	7812      	ldrb	r2, [r2, #0]
 8007fd0:	1e10      	subs	r0, r2, #0
 8007fd2:	bf18      	it	ne
 8007fd4:	2001      	movne	r0, #1
 8007fd6:	b002      	add	sp, #8
 8007fd8:	4770      	bx	lr
 8007fda:	4610      	mov	r0, r2
 8007fdc:	e7fb      	b.n	8007fd6 <__ascii_mbtowc+0x16>
 8007fde:	f06f 0001 	mvn.w	r0, #1
 8007fe2:	e7f8      	b.n	8007fd6 <__ascii_mbtowc+0x16>

08007fe4 <memcpy>:
 8007fe4:	440a      	add	r2, r1
 8007fe6:	4291      	cmp	r1, r2
 8007fe8:	f100 33ff 	add.w	r3, r0, #4294967295
 8007fec:	d100      	bne.n	8007ff0 <memcpy+0xc>
 8007fee:	4770      	bx	lr
 8007ff0:	b510      	push	{r4, lr}
 8007ff2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007ff6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007ffa:	4291      	cmp	r1, r2
 8007ffc:	d1f9      	bne.n	8007ff2 <memcpy+0xe>
 8007ffe:	bd10      	pop	{r4, pc}

08008000 <_Balloc>:
 8008000:	b570      	push	{r4, r5, r6, lr}
 8008002:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008004:	4604      	mov	r4, r0
 8008006:	460d      	mov	r5, r1
 8008008:	b976      	cbnz	r6, 8008028 <_Balloc+0x28>
 800800a:	2010      	movs	r0, #16
 800800c:	f7ff ffd0 	bl	8007fb0 <malloc>
 8008010:	4602      	mov	r2, r0
 8008012:	6260      	str	r0, [r4, #36]	; 0x24
 8008014:	b920      	cbnz	r0, 8008020 <_Balloc+0x20>
 8008016:	4b18      	ldr	r3, [pc, #96]	; (8008078 <_Balloc+0x78>)
 8008018:	4818      	ldr	r0, [pc, #96]	; (800807c <_Balloc+0x7c>)
 800801a:	2166      	movs	r1, #102	; 0x66
 800801c:	f001 fb5c 	bl	80096d8 <__assert_func>
 8008020:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008024:	6006      	str	r6, [r0, #0]
 8008026:	60c6      	str	r6, [r0, #12]
 8008028:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800802a:	68f3      	ldr	r3, [r6, #12]
 800802c:	b183      	cbz	r3, 8008050 <_Balloc+0x50>
 800802e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008030:	68db      	ldr	r3, [r3, #12]
 8008032:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008036:	b9b8      	cbnz	r0, 8008068 <_Balloc+0x68>
 8008038:	2101      	movs	r1, #1
 800803a:	fa01 f605 	lsl.w	r6, r1, r5
 800803e:	1d72      	adds	r2, r6, #5
 8008040:	0092      	lsls	r2, r2, #2
 8008042:	4620      	mov	r0, r4
 8008044:	f000 fc9d 	bl	8008982 <_calloc_r>
 8008048:	b160      	cbz	r0, 8008064 <_Balloc+0x64>
 800804a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800804e:	e00e      	b.n	800806e <_Balloc+0x6e>
 8008050:	2221      	movs	r2, #33	; 0x21
 8008052:	2104      	movs	r1, #4
 8008054:	4620      	mov	r0, r4
 8008056:	f000 fc94 	bl	8008982 <_calloc_r>
 800805a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800805c:	60f0      	str	r0, [r6, #12]
 800805e:	68db      	ldr	r3, [r3, #12]
 8008060:	2b00      	cmp	r3, #0
 8008062:	d1e4      	bne.n	800802e <_Balloc+0x2e>
 8008064:	2000      	movs	r0, #0
 8008066:	bd70      	pop	{r4, r5, r6, pc}
 8008068:	6802      	ldr	r2, [r0, #0]
 800806a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800806e:	2300      	movs	r3, #0
 8008070:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008074:	e7f7      	b.n	8008066 <_Balloc+0x66>
 8008076:	bf00      	nop
 8008078:	0800bc86 	.word	0x0800bc86
 800807c:	0800bd84 	.word	0x0800bd84

08008080 <_Bfree>:
 8008080:	b570      	push	{r4, r5, r6, lr}
 8008082:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008084:	4605      	mov	r5, r0
 8008086:	460c      	mov	r4, r1
 8008088:	b976      	cbnz	r6, 80080a8 <_Bfree+0x28>
 800808a:	2010      	movs	r0, #16
 800808c:	f7ff ff90 	bl	8007fb0 <malloc>
 8008090:	4602      	mov	r2, r0
 8008092:	6268      	str	r0, [r5, #36]	; 0x24
 8008094:	b920      	cbnz	r0, 80080a0 <_Bfree+0x20>
 8008096:	4b09      	ldr	r3, [pc, #36]	; (80080bc <_Bfree+0x3c>)
 8008098:	4809      	ldr	r0, [pc, #36]	; (80080c0 <_Bfree+0x40>)
 800809a:	218a      	movs	r1, #138	; 0x8a
 800809c:	f001 fb1c 	bl	80096d8 <__assert_func>
 80080a0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80080a4:	6006      	str	r6, [r0, #0]
 80080a6:	60c6      	str	r6, [r0, #12]
 80080a8:	b13c      	cbz	r4, 80080ba <_Bfree+0x3a>
 80080aa:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80080ac:	6862      	ldr	r2, [r4, #4]
 80080ae:	68db      	ldr	r3, [r3, #12]
 80080b0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80080b4:	6021      	str	r1, [r4, #0]
 80080b6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80080ba:	bd70      	pop	{r4, r5, r6, pc}
 80080bc:	0800bc86 	.word	0x0800bc86
 80080c0:	0800bd84 	.word	0x0800bd84

080080c4 <__multadd>:
 80080c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80080c8:	690d      	ldr	r5, [r1, #16]
 80080ca:	4607      	mov	r7, r0
 80080cc:	460c      	mov	r4, r1
 80080ce:	461e      	mov	r6, r3
 80080d0:	f101 0c14 	add.w	ip, r1, #20
 80080d4:	2000      	movs	r0, #0
 80080d6:	f8dc 3000 	ldr.w	r3, [ip]
 80080da:	b299      	uxth	r1, r3
 80080dc:	fb02 6101 	mla	r1, r2, r1, r6
 80080e0:	0c1e      	lsrs	r6, r3, #16
 80080e2:	0c0b      	lsrs	r3, r1, #16
 80080e4:	fb02 3306 	mla	r3, r2, r6, r3
 80080e8:	b289      	uxth	r1, r1
 80080ea:	3001      	adds	r0, #1
 80080ec:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80080f0:	4285      	cmp	r5, r0
 80080f2:	f84c 1b04 	str.w	r1, [ip], #4
 80080f6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80080fa:	dcec      	bgt.n	80080d6 <__multadd+0x12>
 80080fc:	b30e      	cbz	r6, 8008142 <__multadd+0x7e>
 80080fe:	68a3      	ldr	r3, [r4, #8]
 8008100:	42ab      	cmp	r3, r5
 8008102:	dc19      	bgt.n	8008138 <__multadd+0x74>
 8008104:	6861      	ldr	r1, [r4, #4]
 8008106:	4638      	mov	r0, r7
 8008108:	3101      	adds	r1, #1
 800810a:	f7ff ff79 	bl	8008000 <_Balloc>
 800810e:	4680      	mov	r8, r0
 8008110:	b928      	cbnz	r0, 800811e <__multadd+0x5a>
 8008112:	4602      	mov	r2, r0
 8008114:	4b0c      	ldr	r3, [pc, #48]	; (8008148 <__multadd+0x84>)
 8008116:	480d      	ldr	r0, [pc, #52]	; (800814c <__multadd+0x88>)
 8008118:	21b5      	movs	r1, #181	; 0xb5
 800811a:	f001 fadd 	bl	80096d8 <__assert_func>
 800811e:	6922      	ldr	r2, [r4, #16]
 8008120:	3202      	adds	r2, #2
 8008122:	f104 010c 	add.w	r1, r4, #12
 8008126:	0092      	lsls	r2, r2, #2
 8008128:	300c      	adds	r0, #12
 800812a:	f7ff ff5b 	bl	8007fe4 <memcpy>
 800812e:	4621      	mov	r1, r4
 8008130:	4638      	mov	r0, r7
 8008132:	f7ff ffa5 	bl	8008080 <_Bfree>
 8008136:	4644      	mov	r4, r8
 8008138:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800813c:	3501      	adds	r5, #1
 800813e:	615e      	str	r6, [r3, #20]
 8008140:	6125      	str	r5, [r4, #16]
 8008142:	4620      	mov	r0, r4
 8008144:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008148:	0800bcf8 	.word	0x0800bcf8
 800814c:	0800bd84 	.word	0x0800bd84

08008150 <__s2b>:
 8008150:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008154:	460c      	mov	r4, r1
 8008156:	4615      	mov	r5, r2
 8008158:	461f      	mov	r7, r3
 800815a:	2209      	movs	r2, #9
 800815c:	3308      	adds	r3, #8
 800815e:	4606      	mov	r6, r0
 8008160:	fb93 f3f2 	sdiv	r3, r3, r2
 8008164:	2100      	movs	r1, #0
 8008166:	2201      	movs	r2, #1
 8008168:	429a      	cmp	r2, r3
 800816a:	db09      	blt.n	8008180 <__s2b+0x30>
 800816c:	4630      	mov	r0, r6
 800816e:	f7ff ff47 	bl	8008000 <_Balloc>
 8008172:	b940      	cbnz	r0, 8008186 <__s2b+0x36>
 8008174:	4602      	mov	r2, r0
 8008176:	4b19      	ldr	r3, [pc, #100]	; (80081dc <__s2b+0x8c>)
 8008178:	4819      	ldr	r0, [pc, #100]	; (80081e0 <__s2b+0x90>)
 800817a:	21ce      	movs	r1, #206	; 0xce
 800817c:	f001 faac 	bl	80096d8 <__assert_func>
 8008180:	0052      	lsls	r2, r2, #1
 8008182:	3101      	adds	r1, #1
 8008184:	e7f0      	b.n	8008168 <__s2b+0x18>
 8008186:	9b08      	ldr	r3, [sp, #32]
 8008188:	6143      	str	r3, [r0, #20]
 800818a:	2d09      	cmp	r5, #9
 800818c:	f04f 0301 	mov.w	r3, #1
 8008190:	6103      	str	r3, [r0, #16]
 8008192:	dd16      	ble.n	80081c2 <__s2b+0x72>
 8008194:	f104 0909 	add.w	r9, r4, #9
 8008198:	46c8      	mov	r8, r9
 800819a:	442c      	add	r4, r5
 800819c:	f818 3b01 	ldrb.w	r3, [r8], #1
 80081a0:	4601      	mov	r1, r0
 80081a2:	3b30      	subs	r3, #48	; 0x30
 80081a4:	220a      	movs	r2, #10
 80081a6:	4630      	mov	r0, r6
 80081a8:	f7ff ff8c 	bl	80080c4 <__multadd>
 80081ac:	45a0      	cmp	r8, r4
 80081ae:	d1f5      	bne.n	800819c <__s2b+0x4c>
 80081b0:	f1a5 0408 	sub.w	r4, r5, #8
 80081b4:	444c      	add	r4, r9
 80081b6:	1b2d      	subs	r5, r5, r4
 80081b8:	1963      	adds	r3, r4, r5
 80081ba:	42bb      	cmp	r3, r7
 80081bc:	db04      	blt.n	80081c8 <__s2b+0x78>
 80081be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80081c2:	340a      	adds	r4, #10
 80081c4:	2509      	movs	r5, #9
 80081c6:	e7f6      	b.n	80081b6 <__s2b+0x66>
 80081c8:	f814 3b01 	ldrb.w	r3, [r4], #1
 80081cc:	4601      	mov	r1, r0
 80081ce:	3b30      	subs	r3, #48	; 0x30
 80081d0:	220a      	movs	r2, #10
 80081d2:	4630      	mov	r0, r6
 80081d4:	f7ff ff76 	bl	80080c4 <__multadd>
 80081d8:	e7ee      	b.n	80081b8 <__s2b+0x68>
 80081da:	bf00      	nop
 80081dc:	0800bcf8 	.word	0x0800bcf8
 80081e0:	0800bd84 	.word	0x0800bd84

080081e4 <__hi0bits>:
 80081e4:	0c03      	lsrs	r3, r0, #16
 80081e6:	041b      	lsls	r3, r3, #16
 80081e8:	b9d3      	cbnz	r3, 8008220 <__hi0bits+0x3c>
 80081ea:	0400      	lsls	r0, r0, #16
 80081ec:	2310      	movs	r3, #16
 80081ee:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80081f2:	bf04      	itt	eq
 80081f4:	0200      	lsleq	r0, r0, #8
 80081f6:	3308      	addeq	r3, #8
 80081f8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80081fc:	bf04      	itt	eq
 80081fe:	0100      	lsleq	r0, r0, #4
 8008200:	3304      	addeq	r3, #4
 8008202:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8008206:	bf04      	itt	eq
 8008208:	0080      	lsleq	r0, r0, #2
 800820a:	3302      	addeq	r3, #2
 800820c:	2800      	cmp	r0, #0
 800820e:	db05      	blt.n	800821c <__hi0bits+0x38>
 8008210:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8008214:	f103 0301 	add.w	r3, r3, #1
 8008218:	bf08      	it	eq
 800821a:	2320      	moveq	r3, #32
 800821c:	4618      	mov	r0, r3
 800821e:	4770      	bx	lr
 8008220:	2300      	movs	r3, #0
 8008222:	e7e4      	b.n	80081ee <__hi0bits+0xa>

08008224 <__lo0bits>:
 8008224:	6803      	ldr	r3, [r0, #0]
 8008226:	f013 0207 	ands.w	r2, r3, #7
 800822a:	4601      	mov	r1, r0
 800822c:	d00b      	beq.n	8008246 <__lo0bits+0x22>
 800822e:	07da      	lsls	r2, r3, #31
 8008230:	d423      	bmi.n	800827a <__lo0bits+0x56>
 8008232:	0798      	lsls	r0, r3, #30
 8008234:	bf49      	itett	mi
 8008236:	085b      	lsrmi	r3, r3, #1
 8008238:	089b      	lsrpl	r3, r3, #2
 800823a:	2001      	movmi	r0, #1
 800823c:	600b      	strmi	r3, [r1, #0]
 800823e:	bf5c      	itt	pl
 8008240:	600b      	strpl	r3, [r1, #0]
 8008242:	2002      	movpl	r0, #2
 8008244:	4770      	bx	lr
 8008246:	b298      	uxth	r0, r3
 8008248:	b9a8      	cbnz	r0, 8008276 <__lo0bits+0x52>
 800824a:	0c1b      	lsrs	r3, r3, #16
 800824c:	2010      	movs	r0, #16
 800824e:	b2da      	uxtb	r2, r3
 8008250:	b90a      	cbnz	r2, 8008256 <__lo0bits+0x32>
 8008252:	3008      	adds	r0, #8
 8008254:	0a1b      	lsrs	r3, r3, #8
 8008256:	071a      	lsls	r2, r3, #28
 8008258:	bf04      	itt	eq
 800825a:	091b      	lsreq	r3, r3, #4
 800825c:	3004      	addeq	r0, #4
 800825e:	079a      	lsls	r2, r3, #30
 8008260:	bf04      	itt	eq
 8008262:	089b      	lsreq	r3, r3, #2
 8008264:	3002      	addeq	r0, #2
 8008266:	07da      	lsls	r2, r3, #31
 8008268:	d403      	bmi.n	8008272 <__lo0bits+0x4e>
 800826a:	085b      	lsrs	r3, r3, #1
 800826c:	f100 0001 	add.w	r0, r0, #1
 8008270:	d005      	beq.n	800827e <__lo0bits+0x5a>
 8008272:	600b      	str	r3, [r1, #0]
 8008274:	4770      	bx	lr
 8008276:	4610      	mov	r0, r2
 8008278:	e7e9      	b.n	800824e <__lo0bits+0x2a>
 800827a:	2000      	movs	r0, #0
 800827c:	4770      	bx	lr
 800827e:	2020      	movs	r0, #32
 8008280:	4770      	bx	lr
	...

08008284 <__i2b>:
 8008284:	b510      	push	{r4, lr}
 8008286:	460c      	mov	r4, r1
 8008288:	2101      	movs	r1, #1
 800828a:	f7ff feb9 	bl	8008000 <_Balloc>
 800828e:	4602      	mov	r2, r0
 8008290:	b928      	cbnz	r0, 800829e <__i2b+0x1a>
 8008292:	4b05      	ldr	r3, [pc, #20]	; (80082a8 <__i2b+0x24>)
 8008294:	4805      	ldr	r0, [pc, #20]	; (80082ac <__i2b+0x28>)
 8008296:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800829a:	f001 fa1d 	bl	80096d8 <__assert_func>
 800829e:	2301      	movs	r3, #1
 80082a0:	6144      	str	r4, [r0, #20]
 80082a2:	6103      	str	r3, [r0, #16]
 80082a4:	bd10      	pop	{r4, pc}
 80082a6:	bf00      	nop
 80082a8:	0800bcf8 	.word	0x0800bcf8
 80082ac:	0800bd84 	.word	0x0800bd84

080082b0 <__multiply>:
 80082b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80082b4:	4691      	mov	r9, r2
 80082b6:	690a      	ldr	r2, [r1, #16]
 80082b8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80082bc:	429a      	cmp	r2, r3
 80082be:	bfb8      	it	lt
 80082c0:	460b      	movlt	r3, r1
 80082c2:	460c      	mov	r4, r1
 80082c4:	bfbc      	itt	lt
 80082c6:	464c      	movlt	r4, r9
 80082c8:	4699      	movlt	r9, r3
 80082ca:	6927      	ldr	r7, [r4, #16]
 80082cc:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80082d0:	68a3      	ldr	r3, [r4, #8]
 80082d2:	6861      	ldr	r1, [r4, #4]
 80082d4:	eb07 060a 	add.w	r6, r7, sl
 80082d8:	42b3      	cmp	r3, r6
 80082da:	b085      	sub	sp, #20
 80082dc:	bfb8      	it	lt
 80082de:	3101      	addlt	r1, #1
 80082e0:	f7ff fe8e 	bl	8008000 <_Balloc>
 80082e4:	b930      	cbnz	r0, 80082f4 <__multiply+0x44>
 80082e6:	4602      	mov	r2, r0
 80082e8:	4b44      	ldr	r3, [pc, #272]	; (80083fc <__multiply+0x14c>)
 80082ea:	4845      	ldr	r0, [pc, #276]	; (8008400 <__multiply+0x150>)
 80082ec:	f240 115d 	movw	r1, #349	; 0x15d
 80082f0:	f001 f9f2 	bl	80096d8 <__assert_func>
 80082f4:	f100 0514 	add.w	r5, r0, #20
 80082f8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80082fc:	462b      	mov	r3, r5
 80082fe:	2200      	movs	r2, #0
 8008300:	4543      	cmp	r3, r8
 8008302:	d321      	bcc.n	8008348 <__multiply+0x98>
 8008304:	f104 0314 	add.w	r3, r4, #20
 8008308:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800830c:	f109 0314 	add.w	r3, r9, #20
 8008310:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8008314:	9202      	str	r2, [sp, #8]
 8008316:	1b3a      	subs	r2, r7, r4
 8008318:	3a15      	subs	r2, #21
 800831a:	f022 0203 	bic.w	r2, r2, #3
 800831e:	3204      	adds	r2, #4
 8008320:	f104 0115 	add.w	r1, r4, #21
 8008324:	428f      	cmp	r7, r1
 8008326:	bf38      	it	cc
 8008328:	2204      	movcc	r2, #4
 800832a:	9201      	str	r2, [sp, #4]
 800832c:	9a02      	ldr	r2, [sp, #8]
 800832e:	9303      	str	r3, [sp, #12]
 8008330:	429a      	cmp	r2, r3
 8008332:	d80c      	bhi.n	800834e <__multiply+0x9e>
 8008334:	2e00      	cmp	r6, #0
 8008336:	dd03      	ble.n	8008340 <__multiply+0x90>
 8008338:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800833c:	2b00      	cmp	r3, #0
 800833e:	d05a      	beq.n	80083f6 <__multiply+0x146>
 8008340:	6106      	str	r6, [r0, #16]
 8008342:	b005      	add	sp, #20
 8008344:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008348:	f843 2b04 	str.w	r2, [r3], #4
 800834c:	e7d8      	b.n	8008300 <__multiply+0x50>
 800834e:	f8b3 a000 	ldrh.w	sl, [r3]
 8008352:	f1ba 0f00 	cmp.w	sl, #0
 8008356:	d024      	beq.n	80083a2 <__multiply+0xf2>
 8008358:	f104 0e14 	add.w	lr, r4, #20
 800835c:	46a9      	mov	r9, r5
 800835e:	f04f 0c00 	mov.w	ip, #0
 8008362:	f85e 2b04 	ldr.w	r2, [lr], #4
 8008366:	f8d9 1000 	ldr.w	r1, [r9]
 800836a:	fa1f fb82 	uxth.w	fp, r2
 800836e:	b289      	uxth	r1, r1
 8008370:	fb0a 110b 	mla	r1, sl, fp, r1
 8008374:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8008378:	f8d9 2000 	ldr.w	r2, [r9]
 800837c:	4461      	add	r1, ip
 800837e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008382:	fb0a c20b 	mla	r2, sl, fp, ip
 8008386:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800838a:	b289      	uxth	r1, r1
 800838c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008390:	4577      	cmp	r7, lr
 8008392:	f849 1b04 	str.w	r1, [r9], #4
 8008396:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800839a:	d8e2      	bhi.n	8008362 <__multiply+0xb2>
 800839c:	9a01      	ldr	r2, [sp, #4]
 800839e:	f845 c002 	str.w	ip, [r5, r2]
 80083a2:	9a03      	ldr	r2, [sp, #12]
 80083a4:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80083a8:	3304      	adds	r3, #4
 80083aa:	f1b9 0f00 	cmp.w	r9, #0
 80083ae:	d020      	beq.n	80083f2 <__multiply+0x142>
 80083b0:	6829      	ldr	r1, [r5, #0]
 80083b2:	f104 0c14 	add.w	ip, r4, #20
 80083b6:	46ae      	mov	lr, r5
 80083b8:	f04f 0a00 	mov.w	sl, #0
 80083bc:	f8bc b000 	ldrh.w	fp, [ip]
 80083c0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80083c4:	fb09 220b 	mla	r2, r9, fp, r2
 80083c8:	4492      	add	sl, r2
 80083ca:	b289      	uxth	r1, r1
 80083cc:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80083d0:	f84e 1b04 	str.w	r1, [lr], #4
 80083d4:	f85c 2b04 	ldr.w	r2, [ip], #4
 80083d8:	f8be 1000 	ldrh.w	r1, [lr]
 80083dc:	0c12      	lsrs	r2, r2, #16
 80083de:	fb09 1102 	mla	r1, r9, r2, r1
 80083e2:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80083e6:	4567      	cmp	r7, ip
 80083e8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80083ec:	d8e6      	bhi.n	80083bc <__multiply+0x10c>
 80083ee:	9a01      	ldr	r2, [sp, #4]
 80083f0:	50a9      	str	r1, [r5, r2]
 80083f2:	3504      	adds	r5, #4
 80083f4:	e79a      	b.n	800832c <__multiply+0x7c>
 80083f6:	3e01      	subs	r6, #1
 80083f8:	e79c      	b.n	8008334 <__multiply+0x84>
 80083fa:	bf00      	nop
 80083fc:	0800bcf8 	.word	0x0800bcf8
 8008400:	0800bd84 	.word	0x0800bd84

08008404 <__pow5mult>:
 8008404:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008408:	4615      	mov	r5, r2
 800840a:	f012 0203 	ands.w	r2, r2, #3
 800840e:	4606      	mov	r6, r0
 8008410:	460f      	mov	r7, r1
 8008412:	d007      	beq.n	8008424 <__pow5mult+0x20>
 8008414:	4c25      	ldr	r4, [pc, #148]	; (80084ac <__pow5mult+0xa8>)
 8008416:	3a01      	subs	r2, #1
 8008418:	2300      	movs	r3, #0
 800841a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800841e:	f7ff fe51 	bl	80080c4 <__multadd>
 8008422:	4607      	mov	r7, r0
 8008424:	10ad      	asrs	r5, r5, #2
 8008426:	d03d      	beq.n	80084a4 <__pow5mult+0xa0>
 8008428:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800842a:	b97c      	cbnz	r4, 800844c <__pow5mult+0x48>
 800842c:	2010      	movs	r0, #16
 800842e:	f7ff fdbf 	bl	8007fb0 <malloc>
 8008432:	4602      	mov	r2, r0
 8008434:	6270      	str	r0, [r6, #36]	; 0x24
 8008436:	b928      	cbnz	r0, 8008444 <__pow5mult+0x40>
 8008438:	4b1d      	ldr	r3, [pc, #116]	; (80084b0 <__pow5mult+0xac>)
 800843a:	481e      	ldr	r0, [pc, #120]	; (80084b4 <__pow5mult+0xb0>)
 800843c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8008440:	f001 f94a 	bl	80096d8 <__assert_func>
 8008444:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008448:	6004      	str	r4, [r0, #0]
 800844a:	60c4      	str	r4, [r0, #12]
 800844c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8008450:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008454:	b94c      	cbnz	r4, 800846a <__pow5mult+0x66>
 8008456:	f240 2171 	movw	r1, #625	; 0x271
 800845a:	4630      	mov	r0, r6
 800845c:	f7ff ff12 	bl	8008284 <__i2b>
 8008460:	2300      	movs	r3, #0
 8008462:	f8c8 0008 	str.w	r0, [r8, #8]
 8008466:	4604      	mov	r4, r0
 8008468:	6003      	str	r3, [r0, #0]
 800846a:	f04f 0900 	mov.w	r9, #0
 800846e:	07eb      	lsls	r3, r5, #31
 8008470:	d50a      	bpl.n	8008488 <__pow5mult+0x84>
 8008472:	4639      	mov	r1, r7
 8008474:	4622      	mov	r2, r4
 8008476:	4630      	mov	r0, r6
 8008478:	f7ff ff1a 	bl	80082b0 <__multiply>
 800847c:	4639      	mov	r1, r7
 800847e:	4680      	mov	r8, r0
 8008480:	4630      	mov	r0, r6
 8008482:	f7ff fdfd 	bl	8008080 <_Bfree>
 8008486:	4647      	mov	r7, r8
 8008488:	106d      	asrs	r5, r5, #1
 800848a:	d00b      	beq.n	80084a4 <__pow5mult+0xa0>
 800848c:	6820      	ldr	r0, [r4, #0]
 800848e:	b938      	cbnz	r0, 80084a0 <__pow5mult+0x9c>
 8008490:	4622      	mov	r2, r4
 8008492:	4621      	mov	r1, r4
 8008494:	4630      	mov	r0, r6
 8008496:	f7ff ff0b 	bl	80082b0 <__multiply>
 800849a:	6020      	str	r0, [r4, #0]
 800849c:	f8c0 9000 	str.w	r9, [r0]
 80084a0:	4604      	mov	r4, r0
 80084a2:	e7e4      	b.n	800846e <__pow5mult+0x6a>
 80084a4:	4638      	mov	r0, r7
 80084a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80084aa:	bf00      	nop
 80084ac:	0800bed0 	.word	0x0800bed0
 80084b0:	0800bc86 	.word	0x0800bc86
 80084b4:	0800bd84 	.word	0x0800bd84

080084b8 <__lshift>:
 80084b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80084bc:	460c      	mov	r4, r1
 80084be:	6849      	ldr	r1, [r1, #4]
 80084c0:	6923      	ldr	r3, [r4, #16]
 80084c2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80084c6:	68a3      	ldr	r3, [r4, #8]
 80084c8:	4607      	mov	r7, r0
 80084ca:	4691      	mov	r9, r2
 80084cc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80084d0:	f108 0601 	add.w	r6, r8, #1
 80084d4:	42b3      	cmp	r3, r6
 80084d6:	db0b      	blt.n	80084f0 <__lshift+0x38>
 80084d8:	4638      	mov	r0, r7
 80084da:	f7ff fd91 	bl	8008000 <_Balloc>
 80084de:	4605      	mov	r5, r0
 80084e0:	b948      	cbnz	r0, 80084f6 <__lshift+0x3e>
 80084e2:	4602      	mov	r2, r0
 80084e4:	4b2a      	ldr	r3, [pc, #168]	; (8008590 <__lshift+0xd8>)
 80084e6:	482b      	ldr	r0, [pc, #172]	; (8008594 <__lshift+0xdc>)
 80084e8:	f240 11d9 	movw	r1, #473	; 0x1d9
 80084ec:	f001 f8f4 	bl	80096d8 <__assert_func>
 80084f0:	3101      	adds	r1, #1
 80084f2:	005b      	lsls	r3, r3, #1
 80084f4:	e7ee      	b.n	80084d4 <__lshift+0x1c>
 80084f6:	2300      	movs	r3, #0
 80084f8:	f100 0114 	add.w	r1, r0, #20
 80084fc:	f100 0210 	add.w	r2, r0, #16
 8008500:	4618      	mov	r0, r3
 8008502:	4553      	cmp	r3, sl
 8008504:	db37      	blt.n	8008576 <__lshift+0xbe>
 8008506:	6920      	ldr	r0, [r4, #16]
 8008508:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800850c:	f104 0314 	add.w	r3, r4, #20
 8008510:	f019 091f 	ands.w	r9, r9, #31
 8008514:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008518:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800851c:	d02f      	beq.n	800857e <__lshift+0xc6>
 800851e:	f1c9 0e20 	rsb	lr, r9, #32
 8008522:	468a      	mov	sl, r1
 8008524:	f04f 0c00 	mov.w	ip, #0
 8008528:	681a      	ldr	r2, [r3, #0]
 800852a:	fa02 f209 	lsl.w	r2, r2, r9
 800852e:	ea42 020c 	orr.w	r2, r2, ip
 8008532:	f84a 2b04 	str.w	r2, [sl], #4
 8008536:	f853 2b04 	ldr.w	r2, [r3], #4
 800853a:	4298      	cmp	r0, r3
 800853c:	fa22 fc0e 	lsr.w	ip, r2, lr
 8008540:	d8f2      	bhi.n	8008528 <__lshift+0x70>
 8008542:	1b03      	subs	r3, r0, r4
 8008544:	3b15      	subs	r3, #21
 8008546:	f023 0303 	bic.w	r3, r3, #3
 800854a:	3304      	adds	r3, #4
 800854c:	f104 0215 	add.w	r2, r4, #21
 8008550:	4290      	cmp	r0, r2
 8008552:	bf38      	it	cc
 8008554:	2304      	movcc	r3, #4
 8008556:	f841 c003 	str.w	ip, [r1, r3]
 800855a:	f1bc 0f00 	cmp.w	ip, #0
 800855e:	d001      	beq.n	8008564 <__lshift+0xac>
 8008560:	f108 0602 	add.w	r6, r8, #2
 8008564:	3e01      	subs	r6, #1
 8008566:	4638      	mov	r0, r7
 8008568:	612e      	str	r6, [r5, #16]
 800856a:	4621      	mov	r1, r4
 800856c:	f7ff fd88 	bl	8008080 <_Bfree>
 8008570:	4628      	mov	r0, r5
 8008572:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008576:	f842 0f04 	str.w	r0, [r2, #4]!
 800857a:	3301      	adds	r3, #1
 800857c:	e7c1      	b.n	8008502 <__lshift+0x4a>
 800857e:	3904      	subs	r1, #4
 8008580:	f853 2b04 	ldr.w	r2, [r3], #4
 8008584:	f841 2f04 	str.w	r2, [r1, #4]!
 8008588:	4298      	cmp	r0, r3
 800858a:	d8f9      	bhi.n	8008580 <__lshift+0xc8>
 800858c:	e7ea      	b.n	8008564 <__lshift+0xac>
 800858e:	bf00      	nop
 8008590:	0800bcf8 	.word	0x0800bcf8
 8008594:	0800bd84 	.word	0x0800bd84

08008598 <__mcmp>:
 8008598:	b530      	push	{r4, r5, lr}
 800859a:	6902      	ldr	r2, [r0, #16]
 800859c:	690c      	ldr	r4, [r1, #16]
 800859e:	1b12      	subs	r2, r2, r4
 80085a0:	d10e      	bne.n	80085c0 <__mcmp+0x28>
 80085a2:	f100 0314 	add.w	r3, r0, #20
 80085a6:	3114      	adds	r1, #20
 80085a8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80085ac:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80085b0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80085b4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80085b8:	42a5      	cmp	r5, r4
 80085ba:	d003      	beq.n	80085c4 <__mcmp+0x2c>
 80085bc:	d305      	bcc.n	80085ca <__mcmp+0x32>
 80085be:	2201      	movs	r2, #1
 80085c0:	4610      	mov	r0, r2
 80085c2:	bd30      	pop	{r4, r5, pc}
 80085c4:	4283      	cmp	r3, r0
 80085c6:	d3f3      	bcc.n	80085b0 <__mcmp+0x18>
 80085c8:	e7fa      	b.n	80085c0 <__mcmp+0x28>
 80085ca:	f04f 32ff 	mov.w	r2, #4294967295
 80085ce:	e7f7      	b.n	80085c0 <__mcmp+0x28>

080085d0 <__mdiff>:
 80085d0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085d4:	460c      	mov	r4, r1
 80085d6:	4606      	mov	r6, r0
 80085d8:	4611      	mov	r1, r2
 80085da:	4620      	mov	r0, r4
 80085dc:	4690      	mov	r8, r2
 80085de:	f7ff ffdb 	bl	8008598 <__mcmp>
 80085e2:	1e05      	subs	r5, r0, #0
 80085e4:	d110      	bne.n	8008608 <__mdiff+0x38>
 80085e6:	4629      	mov	r1, r5
 80085e8:	4630      	mov	r0, r6
 80085ea:	f7ff fd09 	bl	8008000 <_Balloc>
 80085ee:	b930      	cbnz	r0, 80085fe <__mdiff+0x2e>
 80085f0:	4b3a      	ldr	r3, [pc, #232]	; (80086dc <__mdiff+0x10c>)
 80085f2:	4602      	mov	r2, r0
 80085f4:	f240 2132 	movw	r1, #562	; 0x232
 80085f8:	4839      	ldr	r0, [pc, #228]	; (80086e0 <__mdiff+0x110>)
 80085fa:	f001 f86d 	bl	80096d8 <__assert_func>
 80085fe:	2301      	movs	r3, #1
 8008600:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008604:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008608:	bfa4      	itt	ge
 800860a:	4643      	movge	r3, r8
 800860c:	46a0      	movge	r8, r4
 800860e:	4630      	mov	r0, r6
 8008610:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8008614:	bfa6      	itte	ge
 8008616:	461c      	movge	r4, r3
 8008618:	2500      	movge	r5, #0
 800861a:	2501      	movlt	r5, #1
 800861c:	f7ff fcf0 	bl	8008000 <_Balloc>
 8008620:	b920      	cbnz	r0, 800862c <__mdiff+0x5c>
 8008622:	4b2e      	ldr	r3, [pc, #184]	; (80086dc <__mdiff+0x10c>)
 8008624:	4602      	mov	r2, r0
 8008626:	f44f 7110 	mov.w	r1, #576	; 0x240
 800862a:	e7e5      	b.n	80085f8 <__mdiff+0x28>
 800862c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8008630:	6926      	ldr	r6, [r4, #16]
 8008632:	60c5      	str	r5, [r0, #12]
 8008634:	f104 0914 	add.w	r9, r4, #20
 8008638:	f108 0514 	add.w	r5, r8, #20
 800863c:	f100 0e14 	add.w	lr, r0, #20
 8008640:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8008644:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8008648:	f108 0210 	add.w	r2, r8, #16
 800864c:	46f2      	mov	sl, lr
 800864e:	2100      	movs	r1, #0
 8008650:	f859 3b04 	ldr.w	r3, [r9], #4
 8008654:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8008658:	fa1f f883 	uxth.w	r8, r3
 800865c:	fa11 f18b 	uxtah	r1, r1, fp
 8008660:	0c1b      	lsrs	r3, r3, #16
 8008662:	eba1 0808 	sub.w	r8, r1, r8
 8008666:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800866a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800866e:	fa1f f888 	uxth.w	r8, r8
 8008672:	1419      	asrs	r1, r3, #16
 8008674:	454e      	cmp	r6, r9
 8008676:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800867a:	f84a 3b04 	str.w	r3, [sl], #4
 800867e:	d8e7      	bhi.n	8008650 <__mdiff+0x80>
 8008680:	1b33      	subs	r3, r6, r4
 8008682:	3b15      	subs	r3, #21
 8008684:	f023 0303 	bic.w	r3, r3, #3
 8008688:	3304      	adds	r3, #4
 800868a:	3415      	adds	r4, #21
 800868c:	42a6      	cmp	r6, r4
 800868e:	bf38      	it	cc
 8008690:	2304      	movcc	r3, #4
 8008692:	441d      	add	r5, r3
 8008694:	4473      	add	r3, lr
 8008696:	469e      	mov	lr, r3
 8008698:	462e      	mov	r6, r5
 800869a:	4566      	cmp	r6, ip
 800869c:	d30e      	bcc.n	80086bc <__mdiff+0xec>
 800869e:	f10c 0203 	add.w	r2, ip, #3
 80086a2:	1b52      	subs	r2, r2, r5
 80086a4:	f022 0203 	bic.w	r2, r2, #3
 80086a8:	3d03      	subs	r5, #3
 80086aa:	45ac      	cmp	ip, r5
 80086ac:	bf38      	it	cc
 80086ae:	2200      	movcc	r2, #0
 80086b0:	441a      	add	r2, r3
 80086b2:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80086b6:	b17b      	cbz	r3, 80086d8 <__mdiff+0x108>
 80086b8:	6107      	str	r7, [r0, #16]
 80086ba:	e7a3      	b.n	8008604 <__mdiff+0x34>
 80086bc:	f856 8b04 	ldr.w	r8, [r6], #4
 80086c0:	fa11 f288 	uxtah	r2, r1, r8
 80086c4:	1414      	asrs	r4, r2, #16
 80086c6:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80086ca:	b292      	uxth	r2, r2
 80086cc:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80086d0:	f84e 2b04 	str.w	r2, [lr], #4
 80086d4:	1421      	asrs	r1, r4, #16
 80086d6:	e7e0      	b.n	800869a <__mdiff+0xca>
 80086d8:	3f01      	subs	r7, #1
 80086da:	e7ea      	b.n	80086b2 <__mdiff+0xe2>
 80086dc:	0800bcf8 	.word	0x0800bcf8
 80086e0:	0800bd84 	.word	0x0800bd84

080086e4 <__ulp>:
 80086e4:	b082      	sub	sp, #8
 80086e6:	ed8d 0b00 	vstr	d0, [sp]
 80086ea:	9b01      	ldr	r3, [sp, #4]
 80086ec:	4912      	ldr	r1, [pc, #72]	; (8008738 <__ulp+0x54>)
 80086ee:	4019      	ands	r1, r3
 80086f0:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 80086f4:	2900      	cmp	r1, #0
 80086f6:	dd05      	ble.n	8008704 <__ulp+0x20>
 80086f8:	2200      	movs	r2, #0
 80086fa:	460b      	mov	r3, r1
 80086fc:	ec43 2b10 	vmov	d0, r2, r3
 8008700:	b002      	add	sp, #8
 8008702:	4770      	bx	lr
 8008704:	4249      	negs	r1, r1
 8008706:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800870a:	ea4f 5021 	mov.w	r0, r1, asr #20
 800870e:	f04f 0200 	mov.w	r2, #0
 8008712:	f04f 0300 	mov.w	r3, #0
 8008716:	da04      	bge.n	8008722 <__ulp+0x3e>
 8008718:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800871c:	fa41 f300 	asr.w	r3, r1, r0
 8008720:	e7ec      	b.n	80086fc <__ulp+0x18>
 8008722:	f1a0 0114 	sub.w	r1, r0, #20
 8008726:	291e      	cmp	r1, #30
 8008728:	bfda      	itte	le
 800872a:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800872e:	fa20 f101 	lsrle.w	r1, r0, r1
 8008732:	2101      	movgt	r1, #1
 8008734:	460a      	mov	r2, r1
 8008736:	e7e1      	b.n	80086fc <__ulp+0x18>
 8008738:	7ff00000 	.word	0x7ff00000

0800873c <__b2d>:
 800873c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800873e:	6905      	ldr	r5, [r0, #16]
 8008740:	f100 0714 	add.w	r7, r0, #20
 8008744:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8008748:	1f2e      	subs	r6, r5, #4
 800874a:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800874e:	4620      	mov	r0, r4
 8008750:	f7ff fd48 	bl	80081e4 <__hi0bits>
 8008754:	f1c0 0320 	rsb	r3, r0, #32
 8008758:	280a      	cmp	r0, #10
 800875a:	f8df c07c 	ldr.w	ip, [pc, #124]	; 80087d8 <__b2d+0x9c>
 800875e:	600b      	str	r3, [r1, #0]
 8008760:	dc14      	bgt.n	800878c <__b2d+0x50>
 8008762:	f1c0 0e0b 	rsb	lr, r0, #11
 8008766:	fa24 f10e 	lsr.w	r1, r4, lr
 800876a:	42b7      	cmp	r7, r6
 800876c:	ea41 030c 	orr.w	r3, r1, ip
 8008770:	bf34      	ite	cc
 8008772:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8008776:	2100      	movcs	r1, #0
 8008778:	3015      	adds	r0, #21
 800877a:	fa04 f000 	lsl.w	r0, r4, r0
 800877e:	fa21 f10e 	lsr.w	r1, r1, lr
 8008782:	ea40 0201 	orr.w	r2, r0, r1
 8008786:	ec43 2b10 	vmov	d0, r2, r3
 800878a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800878c:	42b7      	cmp	r7, r6
 800878e:	bf3a      	itte	cc
 8008790:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8008794:	f1a5 0608 	subcc.w	r6, r5, #8
 8008798:	2100      	movcs	r1, #0
 800879a:	380b      	subs	r0, #11
 800879c:	d017      	beq.n	80087ce <__b2d+0x92>
 800879e:	f1c0 0c20 	rsb	ip, r0, #32
 80087a2:	fa04 f500 	lsl.w	r5, r4, r0
 80087a6:	42be      	cmp	r6, r7
 80087a8:	fa21 f40c 	lsr.w	r4, r1, ip
 80087ac:	ea45 0504 	orr.w	r5, r5, r4
 80087b0:	bf8c      	ite	hi
 80087b2:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 80087b6:	2400      	movls	r4, #0
 80087b8:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 80087bc:	fa01 f000 	lsl.w	r0, r1, r0
 80087c0:	fa24 f40c 	lsr.w	r4, r4, ip
 80087c4:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80087c8:	ea40 0204 	orr.w	r2, r0, r4
 80087cc:	e7db      	b.n	8008786 <__b2d+0x4a>
 80087ce:	ea44 030c 	orr.w	r3, r4, ip
 80087d2:	460a      	mov	r2, r1
 80087d4:	e7d7      	b.n	8008786 <__b2d+0x4a>
 80087d6:	bf00      	nop
 80087d8:	3ff00000 	.word	0x3ff00000

080087dc <__d2b>:
 80087dc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80087e0:	4689      	mov	r9, r1
 80087e2:	2101      	movs	r1, #1
 80087e4:	ec57 6b10 	vmov	r6, r7, d0
 80087e8:	4690      	mov	r8, r2
 80087ea:	f7ff fc09 	bl	8008000 <_Balloc>
 80087ee:	4604      	mov	r4, r0
 80087f0:	b930      	cbnz	r0, 8008800 <__d2b+0x24>
 80087f2:	4602      	mov	r2, r0
 80087f4:	4b25      	ldr	r3, [pc, #148]	; (800888c <__d2b+0xb0>)
 80087f6:	4826      	ldr	r0, [pc, #152]	; (8008890 <__d2b+0xb4>)
 80087f8:	f240 310a 	movw	r1, #778	; 0x30a
 80087fc:	f000 ff6c 	bl	80096d8 <__assert_func>
 8008800:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8008804:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008808:	bb35      	cbnz	r5, 8008858 <__d2b+0x7c>
 800880a:	2e00      	cmp	r6, #0
 800880c:	9301      	str	r3, [sp, #4]
 800880e:	d028      	beq.n	8008862 <__d2b+0x86>
 8008810:	4668      	mov	r0, sp
 8008812:	9600      	str	r6, [sp, #0]
 8008814:	f7ff fd06 	bl	8008224 <__lo0bits>
 8008818:	9900      	ldr	r1, [sp, #0]
 800881a:	b300      	cbz	r0, 800885e <__d2b+0x82>
 800881c:	9a01      	ldr	r2, [sp, #4]
 800881e:	f1c0 0320 	rsb	r3, r0, #32
 8008822:	fa02 f303 	lsl.w	r3, r2, r3
 8008826:	430b      	orrs	r3, r1
 8008828:	40c2      	lsrs	r2, r0
 800882a:	6163      	str	r3, [r4, #20]
 800882c:	9201      	str	r2, [sp, #4]
 800882e:	9b01      	ldr	r3, [sp, #4]
 8008830:	61a3      	str	r3, [r4, #24]
 8008832:	2b00      	cmp	r3, #0
 8008834:	bf14      	ite	ne
 8008836:	2202      	movne	r2, #2
 8008838:	2201      	moveq	r2, #1
 800883a:	6122      	str	r2, [r4, #16]
 800883c:	b1d5      	cbz	r5, 8008874 <__d2b+0x98>
 800883e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8008842:	4405      	add	r5, r0
 8008844:	f8c9 5000 	str.w	r5, [r9]
 8008848:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800884c:	f8c8 0000 	str.w	r0, [r8]
 8008850:	4620      	mov	r0, r4
 8008852:	b003      	add	sp, #12
 8008854:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008858:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800885c:	e7d5      	b.n	800880a <__d2b+0x2e>
 800885e:	6161      	str	r1, [r4, #20]
 8008860:	e7e5      	b.n	800882e <__d2b+0x52>
 8008862:	a801      	add	r0, sp, #4
 8008864:	f7ff fcde 	bl	8008224 <__lo0bits>
 8008868:	9b01      	ldr	r3, [sp, #4]
 800886a:	6163      	str	r3, [r4, #20]
 800886c:	2201      	movs	r2, #1
 800886e:	6122      	str	r2, [r4, #16]
 8008870:	3020      	adds	r0, #32
 8008872:	e7e3      	b.n	800883c <__d2b+0x60>
 8008874:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008878:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800887c:	f8c9 0000 	str.w	r0, [r9]
 8008880:	6918      	ldr	r0, [r3, #16]
 8008882:	f7ff fcaf 	bl	80081e4 <__hi0bits>
 8008886:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800888a:	e7df      	b.n	800884c <__d2b+0x70>
 800888c:	0800bcf8 	.word	0x0800bcf8
 8008890:	0800bd84 	.word	0x0800bd84

08008894 <__ratio>:
 8008894:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008898:	4688      	mov	r8, r1
 800889a:	4669      	mov	r1, sp
 800889c:	4681      	mov	r9, r0
 800889e:	f7ff ff4d 	bl	800873c <__b2d>
 80088a2:	a901      	add	r1, sp, #4
 80088a4:	4640      	mov	r0, r8
 80088a6:	ec55 4b10 	vmov	r4, r5, d0
 80088aa:	f7ff ff47 	bl	800873c <__b2d>
 80088ae:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80088b2:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80088b6:	eba3 0c02 	sub.w	ip, r3, r2
 80088ba:	e9dd 3200 	ldrd	r3, r2, [sp]
 80088be:	1a9b      	subs	r3, r3, r2
 80088c0:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 80088c4:	ec51 0b10 	vmov	r0, r1, d0
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	bfd6      	itet	le
 80088cc:	460a      	movle	r2, r1
 80088ce:	462a      	movgt	r2, r5
 80088d0:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80088d4:	468b      	mov	fp, r1
 80088d6:	462f      	mov	r7, r5
 80088d8:	bfd4      	ite	le
 80088da:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 80088de:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80088e2:	4620      	mov	r0, r4
 80088e4:	ee10 2a10 	vmov	r2, s0
 80088e8:	465b      	mov	r3, fp
 80088ea:	4639      	mov	r1, r7
 80088ec:	f7f7 ffc6 	bl	800087c <__aeabi_ddiv>
 80088f0:	ec41 0b10 	vmov	d0, r0, r1
 80088f4:	b003      	add	sp, #12
 80088f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080088fa <__copybits>:
 80088fa:	3901      	subs	r1, #1
 80088fc:	b570      	push	{r4, r5, r6, lr}
 80088fe:	1149      	asrs	r1, r1, #5
 8008900:	6914      	ldr	r4, [r2, #16]
 8008902:	3101      	adds	r1, #1
 8008904:	f102 0314 	add.w	r3, r2, #20
 8008908:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800890c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8008910:	1f05      	subs	r5, r0, #4
 8008912:	42a3      	cmp	r3, r4
 8008914:	d30c      	bcc.n	8008930 <__copybits+0x36>
 8008916:	1aa3      	subs	r3, r4, r2
 8008918:	3b11      	subs	r3, #17
 800891a:	f023 0303 	bic.w	r3, r3, #3
 800891e:	3211      	adds	r2, #17
 8008920:	42a2      	cmp	r2, r4
 8008922:	bf88      	it	hi
 8008924:	2300      	movhi	r3, #0
 8008926:	4418      	add	r0, r3
 8008928:	2300      	movs	r3, #0
 800892a:	4288      	cmp	r0, r1
 800892c:	d305      	bcc.n	800893a <__copybits+0x40>
 800892e:	bd70      	pop	{r4, r5, r6, pc}
 8008930:	f853 6b04 	ldr.w	r6, [r3], #4
 8008934:	f845 6f04 	str.w	r6, [r5, #4]!
 8008938:	e7eb      	b.n	8008912 <__copybits+0x18>
 800893a:	f840 3b04 	str.w	r3, [r0], #4
 800893e:	e7f4      	b.n	800892a <__copybits+0x30>

08008940 <__any_on>:
 8008940:	f100 0214 	add.w	r2, r0, #20
 8008944:	6900      	ldr	r0, [r0, #16]
 8008946:	114b      	asrs	r3, r1, #5
 8008948:	4298      	cmp	r0, r3
 800894a:	b510      	push	{r4, lr}
 800894c:	db11      	blt.n	8008972 <__any_on+0x32>
 800894e:	dd0a      	ble.n	8008966 <__any_on+0x26>
 8008950:	f011 011f 	ands.w	r1, r1, #31
 8008954:	d007      	beq.n	8008966 <__any_on+0x26>
 8008956:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800895a:	fa24 f001 	lsr.w	r0, r4, r1
 800895e:	fa00 f101 	lsl.w	r1, r0, r1
 8008962:	428c      	cmp	r4, r1
 8008964:	d10b      	bne.n	800897e <__any_on+0x3e>
 8008966:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800896a:	4293      	cmp	r3, r2
 800896c:	d803      	bhi.n	8008976 <__any_on+0x36>
 800896e:	2000      	movs	r0, #0
 8008970:	bd10      	pop	{r4, pc}
 8008972:	4603      	mov	r3, r0
 8008974:	e7f7      	b.n	8008966 <__any_on+0x26>
 8008976:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800897a:	2900      	cmp	r1, #0
 800897c:	d0f5      	beq.n	800896a <__any_on+0x2a>
 800897e:	2001      	movs	r0, #1
 8008980:	e7f6      	b.n	8008970 <__any_on+0x30>

08008982 <_calloc_r>:
 8008982:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008984:	fba1 2402 	umull	r2, r4, r1, r2
 8008988:	b94c      	cbnz	r4, 800899e <_calloc_r+0x1c>
 800898a:	4611      	mov	r1, r2
 800898c:	9201      	str	r2, [sp, #4]
 800898e:	f000 f87b 	bl	8008a88 <_malloc_r>
 8008992:	9a01      	ldr	r2, [sp, #4]
 8008994:	4605      	mov	r5, r0
 8008996:	b930      	cbnz	r0, 80089a6 <_calloc_r+0x24>
 8008998:	4628      	mov	r0, r5
 800899a:	b003      	add	sp, #12
 800899c:	bd30      	pop	{r4, r5, pc}
 800899e:	220c      	movs	r2, #12
 80089a0:	6002      	str	r2, [r0, #0]
 80089a2:	2500      	movs	r5, #0
 80089a4:	e7f8      	b.n	8008998 <_calloc_r+0x16>
 80089a6:	4621      	mov	r1, r4
 80089a8:	f7fc fb18 	bl	8004fdc <memset>
 80089ac:	e7f4      	b.n	8008998 <_calloc_r+0x16>
	...

080089b0 <_free_r>:
 80089b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80089b2:	2900      	cmp	r1, #0
 80089b4:	d044      	beq.n	8008a40 <_free_r+0x90>
 80089b6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80089ba:	9001      	str	r0, [sp, #4]
 80089bc:	2b00      	cmp	r3, #0
 80089be:	f1a1 0404 	sub.w	r4, r1, #4
 80089c2:	bfb8      	it	lt
 80089c4:	18e4      	addlt	r4, r4, r3
 80089c6:	f001 f88b 	bl	8009ae0 <__malloc_lock>
 80089ca:	4a1e      	ldr	r2, [pc, #120]	; (8008a44 <_free_r+0x94>)
 80089cc:	9801      	ldr	r0, [sp, #4]
 80089ce:	6813      	ldr	r3, [r2, #0]
 80089d0:	b933      	cbnz	r3, 80089e0 <_free_r+0x30>
 80089d2:	6063      	str	r3, [r4, #4]
 80089d4:	6014      	str	r4, [r2, #0]
 80089d6:	b003      	add	sp, #12
 80089d8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80089dc:	f001 b886 	b.w	8009aec <__malloc_unlock>
 80089e0:	42a3      	cmp	r3, r4
 80089e2:	d908      	bls.n	80089f6 <_free_r+0x46>
 80089e4:	6825      	ldr	r5, [r4, #0]
 80089e6:	1961      	adds	r1, r4, r5
 80089e8:	428b      	cmp	r3, r1
 80089ea:	bf01      	itttt	eq
 80089ec:	6819      	ldreq	r1, [r3, #0]
 80089ee:	685b      	ldreq	r3, [r3, #4]
 80089f0:	1949      	addeq	r1, r1, r5
 80089f2:	6021      	streq	r1, [r4, #0]
 80089f4:	e7ed      	b.n	80089d2 <_free_r+0x22>
 80089f6:	461a      	mov	r2, r3
 80089f8:	685b      	ldr	r3, [r3, #4]
 80089fa:	b10b      	cbz	r3, 8008a00 <_free_r+0x50>
 80089fc:	42a3      	cmp	r3, r4
 80089fe:	d9fa      	bls.n	80089f6 <_free_r+0x46>
 8008a00:	6811      	ldr	r1, [r2, #0]
 8008a02:	1855      	adds	r5, r2, r1
 8008a04:	42a5      	cmp	r5, r4
 8008a06:	d10b      	bne.n	8008a20 <_free_r+0x70>
 8008a08:	6824      	ldr	r4, [r4, #0]
 8008a0a:	4421      	add	r1, r4
 8008a0c:	1854      	adds	r4, r2, r1
 8008a0e:	42a3      	cmp	r3, r4
 8008a10:	6011      	str	r1, [r2, #0]
 8008a12:	d1e0      	bne.n	80089d6 <_free_r+0x26>
 8008a14:	681c      	ldr	r4, [r3, #0]
 8008a16:	685b      	ldr	r3, [r3, #4]
 8008a18:	6053      	str	r3, [r2, #4]
 8008a1a:	4421      	add	r1, r4
 8008a1c:	6011      	str	r1, [r2, #0]
 8008a1e:	e7da      	b.n	80089d6 <_free_r+0x26>
 8008a20:	d902      	bls.n	8008a28 <_free_r+0x78>
 8008a22:	230c      	movs	r3, #12
 8008a24:	6003      	str	r3, [r0, #0]
 8008a26:	e7d6      	b.n	80089d6 <_free_r+0x26>
 8008a28:	6825      	ldr	r5, [r4, #0]
 8008a2a:	1961      	adds	r1, r4, r5
 8008a2c:	428b      	cmp	r3, r1
 8008a2e:	bf04      	itt	eq
 8008a30:	6819      	ldreq	r1, [r3, #0]
 8008a32:	685b      	ldreq	r3, [r3, #4]
 8008a34:	6063      	str	r3, [r4, #4]
 8008a36:	bf04      	itt	eq
 8008a38:	1949      	addeq	r1, r1, r5
 8008a3a:	6021      	streq	r1, [r4, #0]
 8008a3c:	6054      	str	r4, [r2, #4]
 8008a3e:	e7ca      	b.n	80089d6 <_free_r+0x26>
 8008a40:	b003      	add	sp, #12
 8008a42:	bd30      	pop	{r4, r5, pc}
 8008a44:	20000cac 	.word	0x20000cac

08008a48 <sbrk_aligned>:
 8008a48:	b570      	push	{r4, r5, r6, lr}
 8008a4a:	4e0e      	ldr	r6, [pc, #56]	; (8008a84 <sbrk_aligned+0x3c>)
 8008a4c:	460c      	mov	r4, r1
 8008a4e:	6831      	ldr	r1, [r6, #0]
 8008a50:	4605      	mov	r5, r0
 8008a52:	b911      	cbnz	r1, 8008a5a <sbrk_aligned+0x12>
 8008a54:	f000 fd28 	bl	80094a8 <_sbrk_r>
 8008a58:	6030      	str	r0, [r6, #0]
 8008a5a:	4621      	mov	r1, r4
 8008a5c:	4628      	mov	r0, r5
 8008a5e:	f000 fd23 	bl	80094a8 <_sbrk_r>
 8008a62:	1c43      	adds	r3, r0, #1
 8008a64:	d00a      	beq.n	8008a7c <sbrk_aligned+0x34>
 8008a66:	1cc4      	adds	r4, r0, #3
 8008a68:	f024 0403 	bic.w	r4, r4, #3
 8008a6c:	42a0      	cmp	r0, r4
 8008a6e:	d007      	beq.n	8008a80 <sbrk_aligned+0x38>
 8008a70:	1a21      	subs	r1, r4, r0
 8008a72:	4628      	mov	r0, r5
 8008a74:	f000 fd18 	bl	80094a8 <_sbrk_r>
 8008a78:	3001      	adds	r0, #1
 8008a7a:	d101      	bne.n	8008a80 <sbrk_aligned+0x38>
 8008a7c:	f04f 34ff 	mov.w	r4, #4294967295
 8008a80:	4620      	mov	r0, r4
 8008a82:	bd70      	pop	{r4, r5, r6, pc}
 8008a84:	20000cb0 	.word	0x20000cb0

08008a88 <_malloc_r>:
 8008a88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008a8c:	1ccd      	adds	r5, r1, #3
 8008a8e:	f025 0503 	bic.w	r5, r5, #3
 8008a92:	3508      	adds	r5, #8
 8008a94:	2d0c      	cmp	r5, #12
 8008a96:	bf38      	it	cc
 8008a98:	250c      	movcc	r5, #12
 8008a9a:	2d00      	cmp	r5, #0
 8008a9c:	4607      	mov	r7, r0
 8008a9e:	db01      	blt.n	8008aa4 <_malloc_r+0x1c>
 8008aa0:	42a9      	cmp	r1, r5
 8008aa2:	d905      	bls.n	8008ab0 <_malloc_r+0x28>
 8008aa4:	230c      	movs	r3, #12
 8008aa6:	603b      	str	r3, [r7, #0]
 8008aa8:	2600      	movs	r6, #0
 8008aaa:	4630      	mov	r0, r6
 8008aac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008ab0:	4e2e      	ldr	r6, [pc, #184]	; (8008b6c <_malloc_r+0xe4>)
 8008ab2:	f001 f815 	bl	8009ae0 <__malloc_lock>
 8008ab6:	6833      	ldr	r3, [r6, #0]
 8008ab8:	461c      	mov	r4, r3
 8008aba:	bb34      	cbnz	r4, 8008b0a <_malloc_r+0x82>
 8008abc:	4629      	mov	r1, r5
 8008abe:	4638      	mov	r0, r7
 8008ac0:	f7ff ffc2 	bl	8008a48 <sbrk_aligned>
 8008ac4:	1c43      	adds	r3, r0, #1
 8008ac6:	4604      	mov	r4, r0
 8008ac8:	d14d      	bne.n	8008b66 <_malloc_r+0xde>
 8008aca:	6834      	ldr	r4, [r6, #0]
 8008acc:	4626      	mov	r6, r4
 8008ace:	2e00      	cmp	r6, #0
 8008ad0:	d140      	bne.n	8008b54 <_malloc_r+0xcc>
 8008ad2:	6823      	ldr	r3, [r4, #0]
 8008ad4:	4631      	mov	r1, r6
 8008ad6:	4638      	mov	r0, r7
 8008ad8:	eb04 0803 	add.w	r8, r4, r3
 8008adc:	f000 fce4 	bl	80094a8 <_sbrk_r>
 8008ae0:	4580      	cmp	r8, r0
 8008ae2:	d13a      	bne.n	8008b5a <_malloc_r+0xd2>
 8008ae4:	6821      	ldr	r1, [r4, #0]
 8008ae6:	3503      	adds	r5, #3
 8008ae8:	1a6d      	subs	r5, r5, r1
 8008aea:	f025 0503 	bic.w	r5, r5, #3
 8008aee:	3508      	adds	r5, #8
 8008af0:	2d0c      	cmp	r5, #12
 8008af2:	bf38      	it	cc
 8008af4:	250c      	movcc	r5, #12
 8008af6:	4629      	mov	r1, r5
 8008af8:	4638      	mov	r0, r7
 8008afa:	f7ff ffa5 	bl	8008a48 <sbrk_aligned>
 8008afe:	3001      	adds	r0, #1
 8008b00:	d02b      	beq.n	8008b5a <_malloc_r+0xd2>
 8008b02:	6823      	ldr	r3, [r4, #0]
 8008b04:	442b      	add	r3, r5
 8008b06:	6023      	str	r3, [r4, #0]
 8008b08:	e00e      	b.n	8008b28 <_malloc_r+0xa0>
 8008b0a:	6822      	ldr	r2, [r4, #0]
 8008b0c:	1b52      	subs	r2, r2, r5
 8008b0e:	d41e      	bmi.n	8008b4e <_malloc_r+0xc6>
 8008b10:	2a0b      	cmp	r2, #11
 8008b12:	d916      	bls.n	8008b42 <_malloc_r+0xba>
 8008b14:	1961      	adds	r1, r4, r5
 8008b16:	42a3      	cmp	r3, r4
 8008b18:	6025      	str	r5, [r4, #0]
 8008b1a:	bf18      	it	ne
 8008b1c:	6059      	strne	r1, [r3, #4]
 8008b1e:	6863      	ldr	r3, [r4, #4]
 8008b20:	bf08      	it	eq
 8008b22:	6031      	streq	r1, [r6, #0]
 8008b24:	5162      	str	r2, [r4, r5]
 8008b26:	604b      	str	r3, [r1, #4]
 8008b28:	4638      	mov	r0, r7
 8008b2a:	f104 060b 	add.w	r6, r4, #11
 8008b2e:	f000 ffdd 	bl	8009aec <__malloc_unlock>
 8008b32:	f026 0607 	bic.w	r6, r6, #7
 8008b36:	1d23      	adds	r3, r4, #4
 8008b38:	1af2      	subs	r2, r6, r3
 8008b3a:	d0b6      	beq.n	8008aaa <_malloc_r+0x22>
 8008b3c:	1b9b      	subs	r3, r3, r6
 8008b3e:	50a3      	str	r3, [r4, r2]
 8008b40:	e7b3      	b.n	8008aaa <_malloc_r+0x22>
 8008b42:	6862      	ldr	r2, [r4, #4]
 8008b44:	42a3      	cmp	r3, r4
 8008b46:	bf0c      	ite	eq
 8008b48:	6032      	streq	r2, [r6, #0]
 8008b4a:	605a      	strne	r2, [r3, #4]
 8008b4c:	e7ec      	b.n	8008b28 <_malloc_r+0xa0>
 8008b4e:	4623      	mov	r3, r4
 8008b50:	6864      	ldr	r4, [r4, #4]
 8008b52:	e7b2      	b.n	8008aba <_malloc_r+0x32>
 8008b54:	4634      	mov	r4, r6
 8008b56:	6876      	ldr	r6, [r6, #4]
 8008b58:	e7b9      	b.n	8008ace <_malloc_r+0x46>
 8008b5a:	230c      	movs	r3, #12
 8008b5c:	603b      	str	r3, [r7, #0]
 8008b5e:	4638      	mov	r0, r7
 8008b60:	f000 ffc4 	bl	8009aec <__malloc_unlock>
 8008b64:	e7a1      	b.n	8008aaa <_malloc_r+0x22>
 8008b66:	6025      	str	r5, [r4, #0]
 8008b68:	e7de      	b.n	8008b28 <_malloc_r+0xa0>
 8008b6a:	bf00      	nop
 8008b6c:	20000cac 	.word	0x20000cac

08008b70 <__ssputs_r>:
 8008b70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008b74:	688e      	ldr	r6, [r1, #8]
 8008b76:	429e      	cmp	r6, r3
 8008b78:	4682      	mov	sl, r0
 8008b7a:	460c      	mov	r4, r1
 8008b7c:	4690      	mov	r8, r2
 8008b7e:	461f      	mov	r7, r3
 8008b80:	d838      	bhi.n	8008bf4 <__ssputs_r+0x84>
 8008b82:	898a      	ldrh	r2, [r1, #12]
 8008b84:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008b88:	d032      	beq.n	8008bf0 <__ssputs_r+0x80>
 8008b8a:	6825      	ldr	r5, [r4, #0]
 8008b8c:	6909      	ldr	r1, [r1, #16]
 8008b8e:	eba5 0901 	sub.w	r9, r5, r1
 8008b92:	6965      	ldr	r5, [r4, #20]
 8008b94:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008b98:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008b9c:	3301      	adds	r3, #1
 8008b9e:	444b      	add	r3, r9
 8008ba0:	106d      	asrs	r5, r5, #1
 8008ba2:	429d      	cmp	r5, r3
 8008ba4:	bf38      	it	cc
 8008ba6:	461d      	movcc	r5, r3
 8008ba8:	0553      	lsls	r3, r2, #21
 8008baa:	d531      	bpl.n	8008c10 <__ssputs_r+0xa0>
 8008bac:	4629      	mov	r1, r5
 8008bae:	f7ff ff6b 	bl	8008a88 <_malloc_r>
 8008bb2:	4606      	mov	r6, r0
 8008bb4:	b950      	cbnz	r0, 8008bcc <__ssputs_r+0x5c>
 8008bb6:	230c      	movs	r3, #12
 8008bb8:	f8ca 3000 	str.w	r3, [sl]
 8008bbc:	89a3      	ldrh	r3, [r4, #12]
 8008bbe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008bc2:	81a3      	strh	r3, [r4, #12]
 8008bc4:	f04f 30ff 	mov.w	r0, #4294967295
 8008bc8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008bcc:	6921      	ldr	r1, [r4, #16]
 8008bce:	464a      	mov	r2, r9
 8008bd0:	f7ff fa08 	bl	8007fe4 <memcpy>
 8008bd4:	89a3      	ldrh	r3, [r4, #12]
 8008bd6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008bda:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008bde:	81a3      	strh	r3, [r4, #12]
 8008be0:	6126      	str	r6, [r4, #16]
 8008be2:	6165      	str	r5, [r4, #20]
 8008be4:	444e      	add	r6, r9
 8008be6:	eba5 0509 	sub.w	r5, r5, r9
 8008bea:	6026      	str	r6, [r4, #0]
 8008bec:	60a5      	str	r5, [r4, #8]
 8008bee:	463e      	mov	r6, r7
 8008bf0:	42be      	cmp	r6, r7
 8008bf2:	d900      	bls.n	8008bf6 <__ssputs_r+0x86>
 8008bf4:	463e      	mov	r6, r7
 8008bf6:	6820      	ldr	r0, [r4, #0]
 8008bf8:	4632      	mov	r2, r6
 8008bfa:	4641      	mov	r1, r8
 8008bfc:	f000 ff56 	bl	8009aac <memmove>
 8008c00:	68a3      	ldr	r3, [r4, #8]
 8008c02:	1b9b      	subs	r3, r3, r6
 8008c04:	60a3      	str	r3, [r4, #8]
 8008c06:	6823      	ldr	r3, [r4, #0]
 8008c08:	4433      	add	r3, r6
 8008c0a:	6023      	str	r3, [r4, #0]
 8008c0c:	2000      	movs	r0, #0
 8008c0e:	e7db      	b.n	8008bc8 <__ssputs_r+0x58>
 8008c10:	462a      	mov	r2, r5
 8008c12:	f000 ff71 	bl	8009af8 <_realloc_r>
 8008c16:	4606      	mov	r6, r0
 8008c18:	2800      	cmp	r0, #0
 8008c1a:	d1e1      	bne.n	8008be0 <__ssputs_r+0x70>
 8008c1c:	6921      	ldr	r1, [r4, #16]
 8008c1e:	4650      	mov	r0, sl
 8008c20:	f7ff fec6 	bl	80089b0 <_free_r>
 8008c24:	e7c7      	b.n	8008bb6 <__ssputs_r+0x46>
	...

08008c28 <_svfiprintf_r>:
 8008c28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c2c:	4698      	mov	r8, r3
 8008c2e:	898b      	ldrh	r3, [r1, #12]
 8008c30:	061b      	lsls	r3, r3, #24
 8008c32:	b09d      	sub	sp, #116	; 0x74
 8008c34:	4607      	mov	r7, r0
 8008c36:	460d      	mov	r5, r1
 8008c38:	4614      	mov	r4, r2
 8008c3a:	d50e      	bpl.n	8008c5a <_svfiprintf_r+0x32>
 8008c3c:	690b      	ldr	r3, [r1, #16]
 8008c3e:	b963      	cbnz	r3, 8008c5a <_svfiprintf_r+0x32>
 8008c40:	2140      	movs	r1, #64	; 0x40
 8008c42:	f7ff ff21 	bl	8008a88 <_malloc_r>
 8008c46:	6028      	str	r0, [r5, #0]
 8008c48:	6128      	str	r0, [r5, #16]
 8008c4a:	b920      	cbnz	r0, 8008c56 <_svfiprintf_r+0x2e>
 8008c4c:	230c      	movs	r3, #12
 8008c4e:	603b      	str	r3, [r7, #0]
 8008c50:	f04f 30ff 	mov.w	r0, #4294967295
 8008c54:	e0d1      	b.n	8008dfa <_svfiprintf_r+0x1d2>
 8008c56:	2340      	movs	r3, #64	; 0x40
 8008c58:	616b      	str	r3, [r5, #20]
 8008c5a:	2300      	movs	r3, #0
 8008c5c:	9309      	str	r3, [sp, #36]	; 0x24
 8008c5e:	2320      	movs	r3, #32
 8008c60:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008c64:	f8cd 800c 	str.w	r8, [sp, #12]
 8008c68:	2330      	movs	r3, #48	; 0x30
 8008c6a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8008e14 <_svfiprintf_r+0x1ec>
 8008c6e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008c72:	f04f 0901 	mov.w	r9, #1
 8008c76:	4623      	mov	r3, r4
 8008c78:	469a      	mov	sl, r3
 8008c7a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008c7e:	b10a      	cbz	r2, 8008c84 <_svfiprintf_r+0x5c>
 8008c80:	2a25      	cmp	r2, #37	; 0x25
 8008c82:	d1f9      	bne.n	8008c78 <_svfiprintf_r+0x50>
 8008c84:	ebba 0b04 	subs.w	fp, sl, r4
 8008c88:	d00b      	beq.n	8008ca2 <_svfiprintf_r+0x7a>
 8008c8a:	465b      	mov	r3, fp
 8008c8c:	4622      	mov	r2, r4
 8008c8e:	4629      	mov	r1, r5
 8008c90:	4638      	mov	r0, r7
 8008c92:	f7ff ff6d 	bl	8008b70 <__ssputs_r>
 8008c96:	3001      	adds	r0, #1
 8008c98:	f000 80aa 	beq.w	8008df0 <_svfiprintf_r+0x1c8>
 8008c9c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008c9e:	445a      	add	r2, fp
 8008ca0:	9209      	str	r2, [sp, #36]	; 0x24
 8008ca2:	f89a 3000 	ldrb.w	r3, [sl]
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	f000 80a2 	beq.w	8008df0 <_svfiprintf_r+0x1c8>
 8008cac:	2300      	movs	r3, #0
 8008cae:	f04f 32ff 	mov.w	r2, #4294967295
 8008cb2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008cb6:	f10a 0a01 	add.w	sl, sl, #1
 8008cba:	9304      	str	r3, [sp, #16]
 8008cbc:	9307      	str	r3, [sp, #28]
 8008cbe:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008cc2:	931a      	str	r3, [sp, #104]	; 0x68
 8008cc4:	4654      	mov	r4, sl
 8008cc6:	2205      	movs	r2, #5
 8008cc8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008ccc:	4851      	ldr	r0, [pc, #324]	; (8008e14 <_svfiprintf_r+0x1ec>)
 8008cce:	f7f7 fa9f 	bl	8000210 <memchr>
 8008cd2:	9a04      	ldr	r2, [sp, #16]
 8008cd4:	b9d8      	cbnz	r0, 8008d0e <_svfiprintf_r+0xe6>
 8008cd6:	06d0      	lsls	r0, r2, #27
 8008cd8:	bf44      	itt	mi
 8008cda:	2320      	movmi	r3, #32
 8008cdc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008ce0:	0711      	lsls	r1, r2, #28
 8008ce2:	bf44      	itt	mi
 8008ce4:	232b      	movmi	r3, #43	; 0x2b
 8008ce6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008cea:	f89a 3000 	ldrb.w	r3, [sl]
 8008cee:	2b2a      	cmp	r3, #42	; 0x2a
 8008cf0:	d015      	beq.n	8008d1e <_svfiprintf_r+0xf6>
 8008cf2:	9a07      	ldr	r2, [sp, #28]
 8008cf4:	4654      	mov	r4, sl
 8008cf6:	2000      	movs	r0, #0
 8008cf8:	f04f 0c0a 	mov.w	ip, #10
 8008cfc:	4621      	mov	r1, r4
 8008cfe:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008d02:	3b30      	subs	r3, #48	; 0x30
 8008d04:	2b09      	cmp	r3, #9
 8008d06:	d94e      	bls.n	8008da6 <_svfiprintf_r+0x17e>
 8008d08:	b1b0      	cbz	r0, 8008d38 <_svfiprintf_r+0x110>
 8008d0a:	9207      	str	r2, [sp, #28]
 8008d0c:	e014      	b.n	8008d38 <_svfiprintf_r+0x110>
 8008d0e:	eba0 0308 	sub.w	r3, r0, r8
 8008d12:	fa09 f303 	lsl.w	r3, r9, r3
 8008d16:	4313      	orrs	r3, r2
 8008d18:	9304      	str	r3, [sp, #16]
 8008d1a:	46a2      	mov	sl, r4
 8008d1c:	e7d2      	b.n	8008cc4 <_svfiprintf_r+0x9c>
 8008d1e:	9b03      	ldr	r3, [sp, #12]
 8008d20:	1d19      	adds	r1, r3, #4
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	9103      	str	r1, [sp, #12]
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	bfbb      	ittet	lt
 8008d2a:	425b      	neglt	r3, r3
 8008d2c:	f042 0202 	orrlt.w	r2, r2, #2
 8008d30:	9307      	strge	r3, [sp, #28]
 8008d32:	9307      	strlt	r3, [sp, #28]
 8008d34:	bfb8      	it	lt
 8008d36:	9204      	strlt	r2, [sp, #16]
 8008d38:	7823      	ldrb	r3, [r4, #0]
 8008d3a:	2b2e      	cmp	r3, #46	; 0x2e
 8008d3c:	d10c      	bne.n	8008d58 <_svfiprintf_r+0x130>
 8008d3e:	7863      	ldrb	r3, [r4, #1]
 8008d40:	2b2a      	cmp	r3, #42	; 0x2a
 8008d42:	d135      	bne.n	8008db0 <_svfiprintf_r+0x188>
 8008d44:	9b03      	ldr	r3, [sp, #12]
 8008d46:	1d1a      	adds	r2, r3, #4
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	9203      	str	r2, [sp, #12]
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	bfb8      	it	lt
 8008d50:	f04f 33ff 	movlt.w	r3, #4294967295
 8008d54:	3402      	adds	r4, #2
 8008d56:	9305      	str	r3, [sp, #20]
 8008d58:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008e24 <_svfiprintf_r+0x1fc>
 8008d5c:	7821      	ldrb	r1, [r4, #0]
 8008d5e:	2203      	movs	r2, #3
 8008d60:	4650      	mov	r0, sl
 8008d62:	f7f7 fa55 	bl	8000210 <memchr>
 8008d66:	b140      	cbz	r0, 8008d7a <_svfiprintf_r+0x152>
 8008d68:	2340      	movs	r3, #64	; 0x40
 8008d6a:	eba0 000a 	sub.w	r0, r0, sl
 8008d6e:	fa03 f000 	lsl.w	r0, r3, r0
 8008d72:	9b04      	ldr	r3, [sp, #16]
 8008d74:	4303      	orrs	r3, r0
 8008d76:	3401      	adds	r4, #1
 8008d78:	9304      	str	r3, [sp, #16]
 8008d7a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008d7e:	4826      	ldr	r0, [pc, #152]	; (8008e18 <_svfiprintf_r+0x1f0>)
 8008d80:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008d84:	2206      	movs	r2, #6
 8008d86:	f7f7 fa43 	bl	8000210 <memchr>
 8008d8a:	2800      	cmp	r0, #0
 8008d8c:	d038      	beq.n	8008e00 <_svfiprintf_r+0x1d8>
 8008d8e:	4b23      	ldr	r3, [pc, #140]	; (8008e1c <_svfiprintf_r+0x1f4>)
 8008d90:	bb1b      	cbnz	r3, 8008dda <_svfiprintf_r+0x1b2>
 8008d92:	9b03      	ldr	r3, [sp, #12]
 8008d94:	3307      	adds	r3, #7
 8008d96:	f023 0307 	bic.w	r3, r3, #7
 8008d9a:	3308      	adds	r3, #8
 8008d9c:	9303      	str	r3, [sp, #12]
 8008d9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008da0:	4433      	add	r3, r6
 8008da2:	9309      	str	r3, [sp, #36]	; 0x24
 8008da4:	e767      	b.n	8008c76 <_svfiprintf_r+0x4e>
 8008da6:	fb0c 3202 	mla	r2, ip, r2, r3
 8008daa:	460c      	mov	r4, r1
 8008dac:	2001      	movs	r0, #1
 8008dae:	e7a5      	b.n	8008cfc <_svfiprintf_r+0xd4>
 8008db0:	2300      	movs	r3, #0
 8008db2:	3401      	adds	r4, #1
 8008db4:	9305      	str	r3, [sp, #20]
 8008db6:	4619      	mov	r1, r3
 8008db8:	f04f 0c0a 	mov.w	ip, #10
 8008dbc:	4620      	mov	r0, r4
 8008dbe:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008dc2:	3a30      	subs	r2, #48	; 0x30
 8008dc4:	2a09      	cmp	r2, #9
 8008dc6:	d903      	bls.n	8008dd0 <_svfiprintf_r+0x1a8>
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	d0c5      	beq.n	8008d58 <_svfiprintf_r+0x130>
 8008dcc:	9105      	str	r1, [sp, #20]
 8008dce:	e7c3      	b.n	8008d58 <_svfiprintf_r+0x130>
 8008dd0:	fb0c 2101 	mla	r1, ip, r1, r2
 8008dd4:	4604      	mov	r4, r0
 8008dd6:	2301      	movs	r3, #1
 8008dd8:	e7f0      	b.n	8008dbc <_svfiprintf_r+0x194>
 8008dda:	ab03      	add	r3, sp, #12
 8008ddc:	9300      	str	r3, [sp, #0]
 8008dde:	462a      	mov	r2, r5
 8008de0:	4b0f      	ldr	r3, [pc, #60]	; (8008e20 <_svfiprintf_r+0x1f8>)
 8008de2:	a904      	add	r1, sp, #16
 8008de4:	4638      	mov	r0, r7
 8008de6:	f7fc f9a1 	bl	800512c <_printf_float>
 8008dea:	1c42      	adds	r2, r0, #1
 8008dec:	4606      	mov	r6, r0
 8008dee:	d1d6      	bne.n	8008d9e <_svfiprintf_r+0x176>
 8008df0:	89ab      	ldrh	r3, [r5, #12]
 8008df2:	065b      	lsls	r3, r3, #25
 8008df4:	f53f af2c 	bmi.w	8008c50 <_svfiprintf_r+0x28>
 8008df8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008dfa:	b01d      	add	sp, #116	; 0x74
 8008dfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e00:	ab03      	add	r3, sp, #12
 8008e02:	9300      	str	r3, [sp, #0]
 8008e04:	462a      	mov	r2, r5
 8008e06:	4b06      	ldr	r3, [pc, #24]	; (8008e20 <_svfiprintf_r+0x1f8>)
 8008e08:	a904      	add	r1, sp, #16
 8008e0a:	4638      	mov	r0, r7
 8008e0c:	f7fc fc32 	bl	8005674 <_printf_i>
 8008e10:	e7eb      	b.n	8008dea <_svfiprintf_r+0x1c2>
 8008e12:	bf00      	nop
 8008e14:	0800bedc 	.word	0x0800bedc
 8008e18:	0800bee6 	.word	0x0800bee6
 8008e1c:	0800512d 	.word	0x0800512d
 8008e20:	08008b71 	.word	0x08008b71
 8008e24:	0800bee2 	.word	0x0800bee2

08008e28 <_sungetc_r>:
 8008e28:	b538      	push	{r3, r4, r5, lr}
 8008e2a:	1c4b      	adds	r3, r1, #1
 8008e2c:	4614      	mov	r4, r2
 8008e2e:	d103      	bne.n	8008e38 <_sungetc_r+0x10>
 8008e30:	f04f 35ff 	mov.w	r5, #4294967295
 8008e34:	4628      	mov	r0, r5
 8008e36:	bd38      	pop	{r3, r4, r5, pc}
 8008e38:	8993      	ldrh	r3, [r2, #12]
 8008e3a:	f023 0320 	bic.w	r3, r3, #32
 8008e3e:	8193      	strh	r3, [r2, #12]
 8008e40:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008e42:	6852      	ldr	r2, [r2, #4]
 8008e44:	b2cd      	uxtb	r5, r1
 8008e46:	b18b      	cbz	r3, 8008e6c <_sungetc_r+0x44>
 8008e48:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8008e4a:	4293      	cmp	r3, r2
 8008e4c:	dd08      	ble.n	8008e60 <_sungetc_r+0x38>
 8008e4e:	6823      	ldr	r3, [r4, #0]
 8008e50:	1e5a      	subs	r2, r3, #1
 8008e52:	6022      	str	r2, [r4, #0]
 8008e54:	f803 5c01 	strb.w	r5, [r3, #-1]
 8008e58:	6863      	ldr	r3, [r4, #4]
 8008e5a:	3301      	adds	r3, #1
 8008e5c:	6063      	str	r3, [r4, #4]
 8008e5e:	e7e9      	b.n	8008e34 <_sungetc_r+0xc>
 8008e60:	4621      	mov	r1, r4
 8008e62:	f000 fbf1 	bl	8009648 <__submore>
 8008e66:	2800      	cmp	r0, #0
 8008e68:	d0f1      	beq.n	8008e4e <_sungetc_r+0x26>
 8008e6a:	e7e1      	b.n	8008e30 <_sungetc_r+0x8>
 8008e6c:	6921      	ldr	r1, [r4, #16]
 8008e6e:	6823      	ldr	r3, [r4, #0]
 8008e70:	b151      	cbz	r1, 8008e88 <_sungetc_r+0x60>
 8008e72:	4299      	cmp	r1, r3
 8008e74:	d208      	bcs.n	8008e88 <_sungetc_r+0x60>
 8008e76:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8008e7a:	42a9      	cmp	r1, r5
 8008e7c:	d104      	bne.n	8008e88 <_sungetc_r+0x60>
 8008e7e:	3b01      	subs	r3, #1
 8008e80:	3201      	adds	r2, #1
 8008e82:	6023      	str	r3, [r4, #0]
 8008e84:	6062      	str	r2, [r4, #4]
 8008e86:	e7d5      	b.n	8008e34 <_sungetc_r+0xc>
 8008e88:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8008e8c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008e90:	6363      	str	r3, [r4, #52]	; 0x34
 8008e92:	2303      	movs	r3, #3
 8008e94:	63a3      	str	r3, [r4, #56]	; 0x38
 8008e96:	4623      	mov	r3, r4
 8008e98:	f803 5f46 	strb.w	r5, [r3, #70]!
 8008e9c:	6023      	str	r3, [r4, #0]
 8008e9e:	2301      	movs	r3, #1
 8008ea0:	e7dc      	b.n	8008e5c <_sungetc_r+0x34>

08008ea2 <__ssrefill_r>:
 8008ea2:	b510      	push	{r4, lr}
 8008ea4:	460c      	mov	r4, r1
 8008ea6:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8008ea8:	b169      	cbz	r1, 8008ec6 <__ssrefill_r+0x24>
 8008eaa:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008eae:	4299      	cmp	r1, r3
 8008eb0:	d001      	beq.n	8008eb6 <__ssrefill_r+0x14>
 8008eb2:	f7ff fd7d 	bl	80089b0 <_free_r>
 8008eb6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008eb8:	6063      	str	r3, [r4, #4]
 8008eba:	2000      	movs	r0, #0
 8008ebc:	6360      	str	r0, [r4, #52]	; 0x34
 8008ebe:	b113      	cbz	r3, 8008ec6 <__ssrefill_r+0x24>
 8008ec0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8008ec2:	6023      	str	r3, [r4, #0]
 8008ec4:	bd10      	pop	{r4, pc}
 8008ec6:	6923      	ldr	r3, [r4, #16]
 8008ec8:	6023      	str	r3, [r4, #0]
 8008eca:	2300      	movs	r3, #0
 8008ecc:	6063      	str	r3, [r4, #4]
 8008ece:	89a3      	ldrh	r3, [r4, #12]
 8008ed0:	f043 0320 	orr.w	r3, r3, #32
 8008ed4:	81a3      	strh	r3, [r4, #12]
 8008ed6:	f04f 30ff 	mov.w	r0, #4294967295
 8008eda:	e7f3      	b.n	8008ec4 <__ssrefill_r+0x22>

08008edc <__ssvfiscanf_r>:
 8008edc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008ee0:	460c      	mov	r4, r1
 8008ee2:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 8008ee6:	2100      	movs	r1, #0
 8008ee8:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8008eec:	49a6      	ldr	r1, [pc, #664]	; (8009188 <__ssvfiscanf_r+0x2ac>)
 8008eee:	91a0      	str	r1, [sp, #640]	; 0x280
 8008ef0:	f10d 0804 	add.w	r8, sp, #4
 8008ef4:	49a5      	ldr	r1, [pc, #660]	; (800918c <__ssvfiscanf_r+0x2b0>)
 8008ef6:	4fa6      	ldr	r7, [pc, #664]	; (8009190 <__ssvfiscanf_r+0x2b4>)
 8008ef8:	f8df 9298 	ldr.w	r9, [pc, #664]	; 8009194 <__ssvfiscanf_r+0x2b8>
 8008efc:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8008f00:	4606      	mov	r6, r0
 8008f02:	91a1      	str	r1, [sp, #644]	; 0x284
 8008f04:	9300      	str	r3, [sp, #0]
 8008f06:	7813      	ldrb	r3, [r2, #0]
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	f000 815a 	beq.w	80091c2 <__ssvfiscanf_r+0x2e6>
 8008f0e:	5dd9      	ldrb	r1, [r3, r7]
 8008f10:	f011 0108 	ands.w	r1, r1, #8
 8008f14:	f102 0501 	add.w	r5, r2, #1
 8008f18:	d019      	beq.n	8008f4e <__ssvfiscanf_r+0x72>
 8008f1a:	6863      	ldr	r3, [r4, #4]
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	dd0f      	ble.n	8008f40 <__ssvfiscanf_r+0x64>
 8008f20:	6823      	ldr	r3, [r4, #0]
 8008f22:	781a      	ldrb	r2, [r3, #0]
 8008f24:	5cba      	ldrb	r2, [r7, r2]
 8008f26:	0712      	lsls	r2, r2, #28
 8008f28:	d401      	bmi.n	8008f2e <__ssvfiscanf_r+0x52>
 8008f2a:	462a      	mov	r2, r5
 8008f2c:	e7eb      	b.n	8008f06 <__ssvfiscanf_r+0x2a>
 8008f2e:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8008f30:	3201      	adds	r2, #1
 8008f32:	9245      	str	r2, [sp, #276]	; 0x114
 8008f34:	6862      	ldr	r2, [r4, #4]
 8008f36:	3301      	adds	r3, #1
 8008f38:	3a01      	subs	r2, #1
 8008f3a:	6062      	str	r2, [r4, #4]
 8008f3c:	6023      	str	r3, [r4, #0]
 8008f3e:	e7ec      	b.n	8008f1a <__ssvfiscanf_r+0x3e>
 8008f40:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8008f42:	4621      	mov	r1, r4
 8008f44:	4630      	mov	r0, r6
 8008f46:	4798      	blx	r3
 8008f48:	2800      	cmp	r0, #0
 8008f4a:	d0e9      	beq.n	8008f20 <__ssvfiscanf_r+0x44>
 8008f4c:	e7ed      	b.n	8008f2a <__ssvfiscanf_r+0x4e>
 8008f4e:	2b25      	cmp	r3, #37	; 0x25
 8008f50:	d012      	beq.n	8008f78 <__ssvfiscanf_r+0x9c>
 8008f52:	469a      	mov	sl, r3
 8008f54:	6863      	ldr	r3, [r4, #4]
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	f340 8091 	ble.w	800907e <__ssvfiscanf_r+0x1a2>
 8008f5c:	6822      	ldr	r2, [r4, #0]
 8008f5e:	7813      	ldrb	r3, [r2, #0]
 8008f60:	4553      	cmp	r3, sl
 8008f62:	f040 812e 	bne.w	80091c2 <__ssvfiscanf_r+0x2e6>
 8008f66:	6863      	ldr	r3, [r4, #4]
 8008f68:	3b01      	subs	r3, #1
 8008f6a:	6063      	str	r3, [r4, #4]
 8008f6c:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8008f6e:	3201      	adds	r2, #1
 8008f70:	3301      	adds	r3, #1
 8008f72:	6022      	str	r2, [r4, #0]
 8008f74:	9345      	str	r3, [sp, #276]	; 0x114
 8008f76:	e7d8      	b.n	8008f2a <__ssvfiscanf_r+0x4e>
 8008f78:	9141      	str	r1, [sp, #260]	; 0x104
 8008f7a:	9143      	str	r1, [sp, #268]	; 0x10c
 8008f7c:	7853      	ldrb	r3, [r2, #1]
 8008f7e:	2b2a      	cmp	r3, #42	; 0x2a
 8008f80:	bf02      	ittt	eq
 8008f82:	2310      	moveq	r3, #16
 8008f84:	1c95      	addeq	r5, r2, #2
 8008f86:	9341      	streq	r3, [sp, #260]	; 0x104
 8008f88:	220a      	movs	r2, #10
 8008f8a:	46aa      	mov	sl, r5
 8008f8c:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8008f90:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8008f94:	2b09      	cmp	r3, #9
 8008f96:	d91d      	bls.n	8008fd4 <__ssvfiscanf_r+0xf8>
 8008f98:	487e      	ldr	r0, [pc, #504]	; (8009194 <__ssvfiscanf_r+0x2b8>)
 8008f9a:	2203      	movs	r2, #3
 8008f9c:	f7f7 f938 	bl	8000210 <memchr>
 8008fa0:	b140      	cbz	r0, 8008fb4 <__ssvfiscanf_r+0xd8>
 8008fa2:	2301      	movs	r3, #1
 8008fa4:	eba0 0009 	sub.w	r0, r0, r9
 8008fa8:	fa03 f000 	lsl.w	r0, r3, r0
 8008fac:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8008fae:	4318      	orrs	r0, r3
 8008fb0:	9041      	str	r0, [sp, #260]	; 0x104
 8008fb2:	4655      	mov	r5, sl
 8008fb4:	f815 3b01 	ldrb.w	r3, [r5], #1
 8008fb8:	2b78      	cmp	r3, #120	; 0x78
 8008fba:	d806      	bhi.n	8008fca <__ssvfiscanf_r+0xee>
 8008fbc:	2b57      	cmp	r3, #87	; 0x57
 8008fbe:	d810      	bhi.n	8008fe2 <__ssvfiscanf_r+0x106>
 8008fc0:	2b25      	cmp	r3, #37	; 0x25
 8008fc2:	d0c6      	beq.n	8008f52 <__ssvfiscanf_r+0x76>
 8008fc4:	d856      	bhi.n	8009074 <__ssvfiscanf_r+0x198>
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	d064      	beq.n	8009094 <__ssvfiscanf_r+0x1b8>
 8008fca:	2303      	movs	r3, #3
 8008fcc:	9347      	str	r3, [sp, #284]	; 0x11c
 8008fce:	230a      	movs	r3, #10
 8008fd0:	9342      	str	r3, [sp, #264]	; 0x108
 8008fd2:	e071      	b.n	80090b8 <__ssvfiscanf_r+0x1dc>
 8008fd4:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8008fd6:	fb02 1103 	mla	r1, r2, r3, r1
 8008fda:	3930      	subs	r1, #48	; 0x30
 8008fdc:	9143      	str	r1, [sp, #268]	; 0x10c
 8008fde:	4655      	mov	r5, sl
 8008fe0:	e7d3      	b.n	8008f8a <__ssvfiscanf_r+0xae>
 8008fe2:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8008fe6:	2a20      	cmp	r2, #32
 8008fe8:	d8ef      	bhi.n	8008fca <__ssvfiscanf_r+0xee>
 8008fea:	a101      	add	r1, pc, #4	; (adr r1, 8008ff0 <__ssvfiscanf_r+0x114>)
 8008fec:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8008ff0:	080090a3 	.word	0x080090a3
 8008ff4:	08008fcb 	.word	0x08008fcb
 8008ff8:	08008fcb 	.word	0x08008fcb
 8008ffc:	08009101 	.word	0x08009101
 8009000:	08008fcb 	.word	0x08008fcb
 8009004:	08008fcb 	.word	0x08008fcb
 8009008:	08008fcb 	.word	0x08008fcb
 800900c:	08008fcb 	.word	0x08008fcb
 8009010:	08008fcb 	.word	0x08008fcb
 8009014:	08008fcb 	.word	0x08008fcb
 8009018:	08008fcb 	.word	0x08008fcb
 800901c:	08009117 	.word	0x08009117
 8009020:	080090ed 	.word	0x080090ed
 8009024:	0800907b 	.word	0x0800907b
 8009028:	0800907b 	.word	0x0800907b
 800902c:	0800907b 	.word	0x0800907b
 8009030:	08008fcb 	.word	0x08008fcb
 8009034:	080090f1 	.word	0x080090f1
 8009038:	08008fcb 	.word	0x08008fcb
 800903c:	08008fcb 	.word	0x08008fcb
 8009040:	08008fcb 	.word	0x08008fcb
 8009044:	08008fcb 	.word	0x08008fcb
 8009048:	08009127 	.word	0x08009127
 800904c:	080090f9 	.word	0x080090f9
 8009050:	0800909b 	.word	0x0800909b
 8009054:	08008fcb 	.word	0x08008fcb
 8009058:	08008fcb 	.word	0x08008fcb
 800905c:	08009123 	.word	0x08009123
 8009060:	08008fcb 	.word	0x08008fcb
 8009064:	080090ed 	.word	0x080090ed
 8009068:	08008fcb 	.word	0x08008fcb
 800906c:	08008fcb 	.word	0x08008fcb
 8009070:	080090a3 	.word	0x080090a3
 8009074:	3b45      	subs	r3, #69	; 0x45
 8009076:	2b02      	cmp	r3, #2
 8009078:	d8a7      	bhi.n	8008fca <__ssvfiscanf_r+0xee>
 800907a:	2305      	movs	r3, #5
 800907c:	e01b      	b.n	80090b6 <__ssvfiscanf_r+0x1da>
 800907e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8009080:	4621      	mov	r1, r4
 8009082:	4630      	mov	r0, r6
 8009084:	4798      	blx	r3
 8009086:	2800      	cmp	r0, #0
 8009088:	f43f af68 	beq.w	8008f5c <__ssvfiscanf_r+0x80>
 800908c:	9844      	ldr	r0, [sp, #272]	; 0x110
 800908e:	2800      	cmp	r0, #0
 8009090:	f040 808d 	bne.w	80091ae <__ssvfiscanf_r+0x2d2>
 8009094:	f04f 30ff 	mov.w	r0, #4294967295
 8009098:	e08f      	b.n	80091ba <__ssvfiscanf_r+0x2de>
 800909a:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800909c:	f042 0220 	orr.w	r2, r2, #32
 80090a0:	9241      	str	r2, [sp, #260]	; 0x104
 80090a2:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80090a4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80090a8:	9241      	str	r2, [sp, #260]	; 0x104
 80090aa:	2210      	movs	r2, #16
 80090ac:	2b6f      	cmp	r3, #111	; 0x6f
 80090ae:	9242      	str	r2, [sp, #264]	; 0x108
 80090b0:	bf34      	ite	cc
 80090b2:	2303      	movcc	r3, #3
 80090b4:	2304      	movcs	r3, #4
 80090b6:	9347      	str	r3, [sp, #284]	; 0x11c
 80090b8:	6863      	ldr	r3, [r4, #4]
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	dd42      	ble.n	8009144 <__ssvfiscanf_r+0x268>
 80090be:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80090c0:	0659      	lsls	r1, r3, #25
 80090c2:	d404      	bmi.n	80090ce <__ssvfiscanf_r+0x1f2>
 80090c4:	6823      	ldr	r3, [r4, #0]
 80090c6:	781a      	ldrb	r2, [r3, #0]
 80090c8:	5cba      	ldrb	r2, [r7, r2]
 80090ca:	0712      	lsls	r2, r2, #28
 80090cc:	d441      	bmi.n	8009152 <__ssvfiscanf_r+0x276>
 80090ce:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 80090d0:	2b02      	cmp	r3, #2
 80090d2:	dc50      	bgt.n	8009176 <__ssvfiscanf_r+0x29a>
 80090d4:	466b      	mov	r3, sp
 80090d6:	4622      	mov	r2, r4
 80090d8:	a941      	add	r1, sp, #260	; 0x104
 80090da:	4630      	mov	r0, r6
 80090dc:	f000 f876 	bl	80091cc <_scanf_chars>
 80090e0:	2801      	cmp	r0, #1
 80090e2:	d06e      	beq.n	80091c2 <__ssvfiscanf_r+0x2e6>
 80090e4:	2802      	cmp	r0, #2
 80090e6:	f47f af20 	bne.w	8008f2a <__ssvfiscanf_r+0x4e>
 80090ea:	e7cf      	b.n	800908c <__ssvfiscanf_r+0x1b0>
 80090ec:	220a      	movs	r2, #10
 80090ee:	e7dd      	b.n	80090ac <__ssvfiscanf_r+0x1d0>
 80090f0:	2300      	movs	r3, #0
 80090f2:	9342      	str	r3, [sp, #264]	; 0x108
 80090f4:	2303      	movs	r3, #3
 80090f6:	e7de      	b.n	80090b6 <__ssvfiscanf_r+0x1da>
 80090f8:	2308      	movs	r3, #8
 80090fa:	9342      	str	r3, [sp, #264]	; 0x108
 80090fc:	2304      	movs	r3, #4
 80090fe:	e7da      	b.n	80090b6 <__ssvfiscanf_r+0x1da>
 8009100:	4629      	mov	r1, r5
 8009102:	4640      	mov	r0, r8
 8009104:	f000 f9e0 	bl	80094c8 <__sccl>
 8009108:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800910a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800910e:	9341      	str	r3, [sp, #260]	; 0x104
 8009110:	4605      	mov	r5, r0
 8009112:	2301      	movs	r3, #1
 8009114:	e7cf      	b.n	80090b6 <__ssvfiscanf_r+0x1da>
 8009116:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8009118:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800911c:	9341      	str	r3, [sp, #260]	; 0x104
 800911e:	2300      	movs	r3, #0
 8009120:	e7c9      	b.n	80090b6 <__ssvfiscanf_r+0x1da>
 8009122:	2302      	movs	r3, #2
 8009124:	e7c7      	b.n	80090b6 <__ssvfiscanf_r+0x1da>
 8009126:	9841      	ldr	r0, [sp, #260]	; 0x104
 8009128:	06c3      	lsls	r3, r0, #27
 800912a:	f53f aefe 	bmi.w	8008f2a <__ssvfiscanf_r+0x4e>
 800912e:	9b00      	ldr	r3, [sp, #0]
 8009130:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8009132:	1d19      	adds	r1, r3, #4
 8009134:	9100      	str	r1, [sp, #0]
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	f010 0f01 	tst.w	r0, #1
 800913c:	bf14      	ite	ne
 800913e:	801a      	strhne	r2, [r3, #0]
 8009140:	601a      	streq	r2, [r3, #0]
 8009142:	e6f2      	b.n	8008f2a <__ssvfiscanf_r+0x4e>
 8009144:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8009146:	4621      	mov	r1, r4
 8009148:	4630      	mov	r0, r6
 800914a:	4798      	blx	r3
 800914c:	2800      	cmp	r0, #0
 800914e:	d0b6      	beq.n	80090be <__ssvfiscanf_r+0x1e2>
 8009150:	e79c      	b.n	800908c <__ssvfiscanf_r+0x1b0>
 8009152:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8009154:	3201      	adds	r2, #1
 8009156:	9245      	str	r2, [sp, #276]	; 0x114
 8009158:	6862      	ldr	r2, [r4, #4]
 800915a:	3a01      	subs	r2, #1
 800915c:	2a00      	cmp	r2, #0
 800915e:	6062      	str	r2, [r4, #4]
 8009160:	dd02      	ble.n	8009168 <__ssvfiscanf_r+0x28c>
 8009162:	3301      	adds	r3, #1
 8009164:	6023      	str	r3, [r4, #0]
 8009166:	e7ad      	b.n	80090c4 <__ssvfiscanf_r+0x1e8>
 8009168:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800916a:	4621      	mov	r1, r4
 800916c:	4630      	mov	r0, r6
 800916e:	4798      	blx	r3
 8009170:	2800      	cmp	r0, #0
 8009172:	d0a7      	beq.n	80090c4 <__ssvfiscanf_r+0x1e8>
 8009174:	e78a      	b.n	800908c <__ssvfiscanf_r+0x1b0>
 8009176:	2b04      	cmp	r3, #4
 8009178:	dc0e      	bgt.n	8009198 <__ssvfiscanf_r+0x2bc>
 800917a:	466b      	mov	r3, sp
 800917c:	4622      	mov	r2, r4
 800917e:	a941      	add	r1, sp, #260	; 0x104
 8009180:	4630      	mov	r0, r6
 8009182:	f000 f87d 	bl	8009280 <_scanf_i>
 8009186:	e7ab      	b.n	80090e0 <__ssvfiscanf_r+0x204>
 8009188:	08008e29 	.word	0x08008e29
 800918c:	08008ea3 	.word	0x08008ea3
 8009190:	0800bb79 	.word	0x0800bb79
 8009194:	0800bee2 	.word	0x0800bee2
 8009198:	4b0b      	ldr	r3, [pc, #44]	; (80091c8 <__ssvfiscanf_r+0x2ec>)
 800919a:	2b00      	cmp	r3, #0
 800919c:	f43f aec5 	beq.w	8008f2a <__ssvfiscanf_r+0x4e>
 80091a0:	466b      	mov	r3, sp
 80091a2:	4622      	mov	r2, r4
 80091a4:	a941      	add	r1, sp, #260	; 0x104
 80091a6:	4630      	mov	r0, r6
 80091a8:	f7fc fb8a 	bl	80058c0 <_scanf_float>
 80091ac:	e798      	b.n	80090e0 <__ssvfiscanf_r+0x204>
 80091ae:	89a3      	ldrh	r3, [r4, #12]
 80091b0:	f013 0f40 	tst.w	r3, #64	; 0x40
 80091b4:	bf18      	it	ne
 80091b6:	f04f 30ff 	movne.w	r0, #4294967295
 80091ba:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 80091be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80091c2:	9844      	ldr	r0, [sp, #272]	; 0x110
 80091c4:	e7f9      	b.n	80091ba <__ssvfiscanf_r+0x2de>
 80091c6:	bf00      	nop
 80091c8:	080058c1 	.word	0x080058c1

080091cc <_scanf_chars>:
 80091cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80091d0:	4615      	mov	r5, r2
 80091d2:	688a      	ldr	r2, [r1, #8]
 80091d4:	4680      	mov	r8, r0
 80091d6:	460c      	mov	r4, r1
 80091d8:	b932      	cbnz	r2, 80091e8 <_scanf_chars+0x1c>
 80091da:	698a      	ldr	r2, [r1, #24]
 80091dc:	2a00      	cmp	r2, #0
 80091de:	bf0c      	ite	eq
 80091e0:	2201      	moveq	r2, #1
 80091e2:	f04f 32ff 	movne.w	r2, #4294967295
 80091e6:	608a      	str	r2, [r1, #8]
 80091e8:	6822      	ldr	r2, [r4, #0]
 80091ea:	f8df 9090 	ldr.w	r9, [pc, #144]	; 800927c <_scanf_chars+0xb0>
 80091ee:	06d1      	lsls	r1, r2, #27
 80091f0:	bf5f      	itttt	pl
 80091f2:	681a      	ldrpl	r2, [r3, #0]
 80091f4:	1d11      	addpl	r1, r2, #4
 80091f6:	6019      	strpl	r1, [r3, #0]
 80091f8:	6816      	ldrpl	r6, [r2, #0]
 80091fa:	2700      	movs	r7, #0
 80091fc:	69a0      	ldr	r0, [r4, #24]
 80091fe:	b188      	cbz	r0, 8009224 <_scanf_chars+0x58>
 8009200:	2801      	cmp	r0, #1
 8009202:	d107      	bne.n	8009214 <_scanf_chars+0x48>
 8009204:	682a      	ldr	r2, [r5, #0]
 8009206:	7811      	ldrb	r1, [r2, #0]
 8009208:	6962      	ldr	r2, [r4, #20]
 800920a:	5c52      	ldrb	r2, [r2, r1]
 800920c:	b952      	cbnz	r2, 8009224 <_scanf_chars+0x58>
 800920e:	2f00      	cmp	r7, #0
 8009210:	d031      	beq.n	8009276 <_scanf_chars+0xaa>
 8009212:	e022      	b.n	800925a <_scanf_chars+0x8e>
 8009214:	2802      	cmp	r0, #2
 8009216:	d120      	bne.n	800925a <_scanf_chars+0x8e>
 8009218:	682b      	ldr	r3, [r5, #0]
 800921a:	781b      	ldrb	r3, [r3, #0]
 800921c:	f813 3009 	ldrb.w	r3, [r3, r9]
 8009220:	071b      	lsls	r3, r3, #28
 8009222:	d41a      	bmi.n	800925a <_scanf_chars+0x8e>
 8009224:	6823      	ldr	r3, [r4, #0]
 8009226:	06da      	lsls	r2, r3, #27
 8009228:	bf5e      	ittt	pl
 800922a:	682b      	ldrpl	r3, [r5, #0]
 800922c:	781b      	ldrbpl	r3, [r3, #0]
 800922e:	f806 3b01 	strbpl.w	r3, [r6], #1
 8009232:	682a      	ldr	r2, [r5, #0]
 8009234:	686b      	ldr	r3, [r5, #4]
 8009236:	3201      	adds	r2, #1
 8009238:	602a      	str	r2, [r5, #0]
 800923a:	68a2      	ldr	r2, [r4, #8]
 800923c:	3b01      	subs	r3, #1
 800923e:	3a01      	subs	r2, #1
 8009240:	606b      	str	r3, [r5, #4]
 8009242:	3701      	adds	r7, #1
 8009244:	60a2      	str	r2, [r4, #8]
 8009246:	b142      	cbz	r2, 800925a <_scanf_chars+0x8e>
 8009248:	2b00      	cmp	r3, #0
 800924a:	dcd7      	bgt.n	80091fc <_scanf_chars+0x30>
 800924c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8009250:	4629      	mov	r1, r5
 8009252:	4640      	mov	r0, r8
 8009254:	4798      	blx	r3
 8009256:	2800      	cmp	r0, #0
 8009258:	d0d0      	beq.n	80091fc <_scanf_chars+0x30>
 800925a:	6823      	ldr	r3, [r4, #0]
 800925c:	f013 0310 	ands.w	r3, r3, #16
 8009260:	d105      	bne.n	800926e <_scanf_chars+0xa2>
 8009262:	68e2      	ldr	r2, [r4, #12]
 8009264:	3201      	adds	r2, #1
 8009266:	60e2      	str	r2, [r4, #12]
 8009268:	69a2      	ldr	r2, [r4, #24]
 800926a:	b102      	cbz	r2, 800926e <_scanf_chars+0xa2>
 800926c:	7033      	strb	r3, [r6, #0]
 800926e:	6923      	ldr	r3, [r4, #16]
 8009270:	443b      	add	r3, r7
 8009272:	6123      	str	r3, [r4, #16]
 8009274:	2000      	movs	r0, #0
 8009276:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800927a:	bf00      	nop
 800927c:	0800bb79 	.word	0x0800bb79

08009280 <_scanf_i>:
 8009280:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009284:	4698      	mov	r8, r3
 8009286:	4b76      	ldr	r3, [pc, #472]	; (8009460 <_scanf_i+0x1e0>)
 8009288:	460c      	mov	r4, r1
 800928a:	4682      	mov	sl, r0
 800928c:	4616      	mov	r6, r2
 800928e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8009292:	b087      	sub	sp, #28
 8009294:	ab03      	add	r3, sp, #12
 8009296:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800929a:	4b72      	ldr	r3, [pc, #456]	; (8009464 <_scanf_i+0x1e4>)
 800929c:	69a1      	ldr	r1, [r4, #24]
 800929e:	4a72      	ldr	r2, [pc, #456]	; (8009468 <_scanf_i+0x1e8>)
 80092a0:	2903      	cmp	r1, #3
 80092a2:	bf18      	it	ne
 80092a4:	461a      	movne	r2, r3
 80092a6:	68a3      	ldr	r3, [r4, #8]
 80092a8:	9201      	str	r2, [sp, #4]
 80092aa:	1e5a      	subs	r2, r3, #1
 80092ac:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80092b0:	bf88      	it	hi
 80092b2:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80092b6:	4627      	mov	r7, r4
 80092b8:	bf82      	ittt	hi
 80092ba:	eb03 0905 	addhi.w	r9, r3, r5
 80092be:	f240 135d 	movwhi	r3, #349	; 0x15d
 80092c2:	60a3      	strhi	r3, [r4, #8]
 80092c4:	f857 3b1c 	ldr.w	r3, [r7], #28
 80092c8:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 80092cc:	bf98      	it	ls
 80092ce:	f04f 0900 	movls.w	r9, #0
 80092d2:	6023      	str	r3, [r4, #0]
 80092d4:	463d      	mov	r5, r7
 80092d6:	f04f 0b00 	mov.w	fp, #0
 80092da:	6831      	ldr	r1, [r6, #0]
 80092dc:	ab03      	add	r3, sp, #12
 80092de:	7809      	ldrb	r1, [r1, #0]
 80092e0:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 80092e4:	2202      	movs	r2, #2
 80092e6:	f7f6 ff93 	bl	8000210 <memchr>
 80092ea:	b328      	cbz	r0, 8009338 <_scanf_i+0xb8>
 80092ec:	f1bb 0f01 	cmp.w	fp, #1
 80092f0:	d159      	bne.n	80093a6 <_scanf_i+0x126>
 80092f2:	6862      	ldr	r2, [r4, #4]
 80092f4:	b92a      	cbnz	r2, 8009302 <_scanf_i+0x82>
 80092f6:	6822      	ldr	r2, [r4, #0]
 80092f8:	2308      	movs	r3, #8
 80092fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80092fe:	6063      	str	r3, [r4, #4]
 8009300:	6022      	str	r2, [r4, #0]
 8009302:	6822      	ldr	r2, [r4, #0]
 8009304:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8009308:	6022      	str	r2, [r4, #0]
 800930a:	68a2      	ldr	r2, [r4, #8]
 800930c:	1e51      	subs	r1, r2, #1
 800930e:	60a1      	str	r1, [r4, #8]
 8009310:	b192      	cbz	r2, 8009338 <_scanf_i+0xb8>
 8009312:	6832      	ldr	r2, [r6, #0]
 8009314:	1c51      	adds	r1, r2, #1
 8009316:	6031      	str	r1, [r6, #0]
 8009318:	7812      	ldrb	r2, [r2, #0]
 800931a:	f805 2b01 	strb.w	r2, [r5], #1
 800931e:	6872      	ldr	r2, [r6, #4]
 8009320:	3a01      	subs	r2, #1
 8009322:	2a00      	cmp	r2, #0
 8009324:	6072      	str	r2, [r6, #4]
 8009326:	dc07      	bgt.n	8009338 <_scanf_i+0xb8>
 8009328:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 800932c:	4631      	mov	r1, r6
 800932e:	4650      	mov	r0, sl
 8009330:	4790      	blx	r2
 8009332:	2800      	cmp	r0, #0
 8009334:	f040 8085 	bne.w	8009442 <_scanf_i+0x1c2>
 8009338:	f10b 0b01 	add.w	fp, fp, #1
 800933c:	f1bb 0f03 	cmp.w	fp, #3
 8009340:	d1cb      	bne.n	80092da <_scanf_i+0x5a>
 8009342:	6863      	ldr	r3, [r4, #4]
 8009344:	b90b      	cbnz	r3, 800934a <_scanf_i+0xca>
 8009346:	230a      	movs	r3, #10
 8009348:	6063      	str	r3, [r4, #4]
 800934a:	6863      	ldr	r3, [r4, #4]
 800934c:	4947      	ldr	r1, [pc, #284]	; (800946c <_scanf_i+0x1ec>)
 800934e:	6960      	ldr	r0, [r4, #20]
 8009350:	1ac9      	subs	r1, r1, r3
 8009352:	f000 f8b9 	bl	80094c8 <__sccl>
 8009356:	f04f 0b00 	mov.w	fp, #0
 800935a:	68a3      	ldr	r3, [r4, #8]
 800935c:	6822      	ldr	r2, [r4, #0]
 800935e:	2b00      	cmp	r3, #0
 8009360:	d03d      	beq.n	80093de <_scanf_i+0x15e>
 8009362:	6831      	ldr	r1, [r6, #0]
 8009364:	6960      	ldr	r0, [r4, #20]
 8009366:	f891 c000 	ldrb.w	ip, [r1]
 800936a:	f810 000c 	ldrb.w	r0, [r0, ip]
 800936e:	2800      	cmp	r0, #0
 8009370:	d035      	beq.n	80093de <_scanf_i+0x15e>
 8009372:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8009376:	d124      	bne.n	80093c2 <_scanf_i+0x142>
 8009378:	0510      	lsls	r0, r2, #20
 800937a:	d522      	bpl.n	80093c2 <_scanf_i+0x142>
 800937c:	f10b 0b01 	add.w	fp, fp, #1
 8009380:	f1b9 0f00 	cmp.w	r9, #0
 8009384:	d003      	beq.n	800938e <_scanf_i+0x10e>
 8009386:	3301      	adds	r3, #1
 8009388:	f109 39ff 	add.w	r9, r9, #4294967295
 800938c:	60a3      	str	r3, [r4, #8]
 800938e:	6873      	ldr	r3, [r6, #4]
 8009390:	3b01      	subs	r3, #1
 8009392:	2b00      	cmp	r3, #0
 8009394:	6073      	str	r3, [r6, #4]
 8009396:	dd1b      	ble.n	80093d0 <_scanf_i+0x150>
 8009398:	6833      	ldr	r3, [r6, #0]
 800939a:	3301      	adds	r3, #1
 800939c:	6033      	str	r3, [r6, #0]
 800939e:	68a3      	ldr	r3, [r4, #8]
 80093a0:	3b01      	subs	r3, #1
 80093a2:	60a3      	str	r3, [r4, #8]
 80093a4:	e7d9      	b.n	800935a <_scanf_i+0xda>
 80093a6:	f1bb 0f02 	cmp.w	fp, #2
 80093aa:	d1ae      	bne.n	800930a <_scanf_i+0x8a>
 80093ac:	6822      	ldr	r2, [r4, #0]
 80093ae:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 80093b2:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 80093b6:	d1bf      	bne.n	8009338 <_scanf_i+0xb8>
 80093b8:	2310      	movs	r3, #16
 80093ba:	6063      	str	r3, [r4, #4]
 80093bc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80093c0:	e7a2      	b.n	8009308 <_scanf_i+0x88>
 80093c2:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 80093c6:	6022      	str	r2, [r4, #0]
 80093c8:	780b      	ldrb	r3, [r1, #0]
 80093ca:	f805 3b01 	strb.w	r3, [r5], #1
 80093ce:	e7de      	b.n	800938e <_scanf_i+0x10e>
 80093d0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80093d4:	4631      	mov	r1, r6
 80093d6:	4650      	mov	r0, sl
 80093d8:	4798      	blx	r3
 80093da:	2800      	cmp	r0, #0
 80093dc:	d0df      	beq.n	800939e <_scanf_i+0x11e>
 80093de:	6823      	ldr	r3, [r4, #0]
 80093e0:	05db      	lsls	r3, r3, #23
 80093e2:	d50d      	bpl.n	8009400 <_scanf_i+0x180>
 80093e4:	42bd      	cmp	r5, r7
 80093e6:	d909      	bls.n	80093fc <_scanf_i+0x17c>
 80093e8:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80093ec:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80093f0:	4632      	mov	r2, r6
 80093f2:	4650      	mov	r0, sl
 80093f4:	4798      	blx	r3
 80093f6:	f105 39ff 	add.w	r9, r5, #4294967295
 80093fa:	464d      	mov	r5, r9
 80093fc:	42bd      	cmp	r5, r7
 80093fe:	d02d      	beq.n	800945c <_scanf_i+0x1dc>
 8009400:	6822      	ldr	r2, [r4, #0]
 8009402:	f012 0210 	ands.w	r2, r2, #16
 8009406:	d113      	bne.n	8009430 <_scanf_i+0x1b0>
 8009408:	702a      	strb	r2, [r5, #0]
 800940a:	6863      	ldr	r3, [r4, #4]
 800940c:	9e01      	ldr	r6, [sp, #4]
 800940e:	4639      	mov	r1, r7
 8009410:	4650      	mov	r0, sl
 8009412:	47b0      	blx	r6
 8009414:	6821      	ldr	r1, [r4, #0]
 8009416:	f8d8 3000 	ldr.w	r3, [r8]
 800941a:	f011 0f20 	tst.w	r1, #32
 800941e:	d013      	beq.n	8009448 <_scanf_i+0x1c8>
 8009420:	1d1a      	adds	r2, r3, #4
 8009422:	f8c8 2000 	str.w	r2, [r8]
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	6018      	str	r0, [r3, #0]
 800942a:	68e3      	ldr	r3, [r4, #12]
 800942c:	3301      	adds	r3, #1
 800942e:	60e3      	str	r3, [r4, #12]
 8009430:	1bed      	subs	r5, r5, r7
 8009432:	44ab      	add	fp, r5
 8009434:	6925      	ldr	r5, [r4, #16]
 8009436:	445d      	add	r5, fp
 8009438:	6125      	str	r5, [r4, #16]
 800943a:	2000      	movs	r0, #0
 800943c:	b007      	add	sp, #28
 800943e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009442:	f04f 0b00 	mov.w	fp, #0
 8009446:	e7ca      	b.n	80093de <_scanf_i+0x15e>
 8009448:	1d1a      	adds	r2, r3, #4
 800944a:	f8c8 2000 	str.w	r2, [r8]
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	f011 0f01 	tst.w	r1, #1
 8009454:	bf14      	ite	ne
 8009456:	8018      	strhne	r0, [r3, #0]
 8009458:	6018      	streq	r0, [r3, #0]
 800945a:	e7e6      	b.n	800942a <_scanf_i+0x1aa>
 800945c:	2001      	movs	r0, #1
 800945e:	e7ed      	b.n	800943c <_scanf_i+0x1bc>
 8009460:	0800bae0 	.word	0x0800bae0
 8009464:	08009645 	.word	0x08009645
 8009468:	08006b65 	.word	0x08006b65
 800946c:	0800bf06 	.word	0x0800bf06

08009470 <_read_r>:
 8009470:	b538      	push	{r3, r4, r5, lr}
 8009472:	4d07      	ldr	r5, [pc, #28]	; (8009490 <_read_r+0x20>)
 8009474:	4604      	mov	r4, r0
 8009476:	4608      	mov	r0, r1
 8009478:	4611      	mov	r1, r2
 800947a:	2200      	movs	r2, #0
 800947c:	602a      	str	r2, [r5, #0]
 800947e:	461a      	mov	r2, r3
 8009480:	f7f9 f871 	bl	8002566 <_read>
 8009484:	1c43      	adds	r3, r0, #1
 8009486:	d102      	bne.n	800948e <_read_r+0x1e>
 8009488:	682b      	ldr	r3, [r5, #0]
 800948a:	b103      	cbz	r3, 800948e <_read_r+0x1e>
 800948c:	6023      	str	r3, [r4, #0]
 800948e:	bd38      	pop	{r3, r4, r5, pc}
 8009490:	20000cb4 	.word	0x20000cb4
 8009494:	00000000 	.word	0x00000000

08009498 <nan>:
 8009498:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80094a0 <nan+0x8>
 800949c:	4770      	bx	lr
 800949e:	bf00      	nop
 80094a0:	00000000 	.word	0x00000000
 80094a4:	7ff80000 	.word	0x7ff80000

080094a8 <_sbrk_r>:
 80094a8:	b538      	push	{r3, r4, r5, lr}
 80094aa:	4d06      	ldr	r5, [pc, #24]	; (80094c4 <_sbrk_r+0x1c>)
 80094ac:	2300      	movs	r3, #0
 80094ae:	4604      	mov	r4, r0
 80094b0:	4608      	mov	r0, r1
 80094b2:	602b      	str	r3, [r5, #0]
 80094b4:	f7f9 f8c4 	bl	8002640 <_sbrk>
 80094b8:	1c43      	adds	r3, r0, #1
 80094ba:	d102      	bne.n	80094c2 <_sbrk_r+0x1a>
 80094bc:	682b      	ldr	r3, [r5, #0]
 80094be:	b103      	cbz	r3, 80094c2 <_sbrk_r+0x1a>
 80094c0:	6023      	str	r3, [r4, #0]
 80094c2:	bd38      	pop	{r3, r4, r5, pc}
 80094c4:	20000cb4 	.word	0x20000cb4

080094c8 <__sccl>:
 80094c8:	b570      	push	{r4, r5, r6, lr}
 80094ca:	780b      	ldrb	r3, [r1, #0]
 80094cc:	4604      	mov	r4, r0
 80094ce:	2b5e      	cmp	r3, #94	; 0x5e
 80094d0:	bf0b      	itete	eq
 80094d2:	784b      	ldrbeq	r3, [r1, #1]
 80094d4:	1c48      	addne	r0, r1, #1
 80094d6:	1c88      	addeq	r0, r1, #2
 80094d8:	2200      	movne	r2, #0
 80094da:	bf08      	it	eq
 80094dc:	2201      	moveq	r2, #1
 80094de:	1e61      	subs	r1, r4, #1
 80094e0:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 80094e4:	f801 2f01 	strb.w	r2, [r1, #1]!
 80094e8:	42a9      	cmp	r1, r5
 80094ea:	d1fb      	bne.n	80094e4 <__sccl+0x1c>
 80094ec:	b90b      	cbnz	r3, 80094f2 <__sccl+0x2a>
 80094ee:	3801      	subs	r0, #1
 80094f0:	bd70      	pop	{r4, r5, r6, pc}
 80094f2:	f082 0201 	eor.w	r2, r2, #1
 80094f6:	54e2      	strb	r2, [r4, r3]
 80094f8:	4605      	mov	r5, r0
 80094fa:	4628      	mov	r0, r5
 80094fc:	f810 1b01 	ldrb.w	r1, [r0], #1
 8009500:	292d      	cmp	r1, #45	; 0x2d
 8009502:	d006      	beq.n	8009512 <__sccl+0x4a>
 8009504:	295d      	cmp	r1, #93	; 0x5d
 8009506:	d0f3      	beq.n	80094f0 <__sccl+0x28>
 8009508:	b909      	cbnz	r1, 800950e <__sccl+0x46>
 800950a:	4628      	mov	r0, r5
 800950c:	e7f0      	b.n	80094f0 <__sccl+0x28>
 800950e:	460b      	mov	r3, r1
 8009510:	e7f1      	b.n	80094f6 <__sccl+0x2e>
 8009512:	786e      	ldrb	r6, [r5, #1]
 8009514:	2e5d      	cmp	r6, #93	; 0x5d
 8009516:	d0fa      	beq.n	800950e <__sccl+0x46>
 8009518:	42b3      	cmp	r3, r6
 800951a:	dcf8      	bgt.n	800950e <__sccl+0x46>
 800951c:	3502      	adds	r5, #2
 800951e:	4619      	mov	r1, r3
 8009520:	3101      	adds	r1, #1
 8009522:	428e      	cmp	r6, r1
 8009524:	5462      	strb	r2, [r4, r1]
 8009526:	dcfb      	bgt.n	8009520 <__sccl+0x58>
 8009528:	1af1      	subs	r1, r6, r3
 800952a:	3901      	subs	r1, #1
 800952c:	1c58      	adds	r0, r3, #1
 800952e:	42b3      	cmp	r3, r6
 8009530:	bfa8      	it	ge
 8009532:	2100      	movge	r1, #0
 8009534:	1843      	adds	r3, r0, r1
 8009536:	e7e0      	b.n	80094fa <__sccl+0x32>

08009538 <strncmp>:
 8009538:	b510      	push	{r4, lr}
 800953a:	b17a      	cbz	r2, 800955c <strncmp+0x24>
 800953c:	4603      	mov	r3, r0
 800953e:	3901      	subs	r1, #1
 8009540:	1884      	adds	r4, r0, r2
 8009542:	f813 0b01 	ldrb.w	r0, [r3], #1
 8009546:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800954a:	4290      	cmp	r0, r2
 800954c:	d101      	bne.n	8009552 <strncmp+0x1a>
 800954e:	42a3      	cmp	r3, r4
 8009550:	d101      	bne.n	8009556 <strncmp+0x1e>
 8009552:	1a80      	subs	r0, r0, r2
 8009554:	bd10      	pop	{r4, pc}
 8009556:	2800      	cmp	r0, #0
 8009558:	d1f3      	bne.n	8009542 <strncmp+0xa>
 800955a:	e7fa      	b.n	8009552 <strncmp+0x1a>
 800955c:	4610      	mov	r0, r2
 800955e:	e7f9      	b.n	8009554 <strncmp+0x1c>

08009560 <_strtoul_l.constprop.0>:
 8009560:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009564:	4f36      	ldr	r7, [pc, #216]	; (8009640 <_strtoul_l.constprop.0+0xe0>)
 8009566:	4686      	mov	lr, r0
 8009568:	460d      	mov	r5, r1
 800956a:	4628      	mov	r0, r5
 800956c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009570:	5de6      	ldrb	r6, [r4, r7]
 8009572:	f016 0608 	ands.w	r6, r6, #8
 8009576:	d1f8      	bne.n	800956a <_strtoul_l.constprop.0+0xa>
 8009578:	2c2d      	cmp	r4, #45	; 0x2d
 800957a:	d12f      	bne.n	80095dc <_strtoul_l.constprop.0+0x7c>
 800957c:	782c      	ldrb	r4, [r5, #0]
 800957e:	2601      	movs	r6, #1
 8009580:	1c85      	adds	r5, r0, #2
 8009582:	2b00      	cmp	r3, #0
 8009584:	d057      	beq.n	8009636 <_strtoul_l.constprop.0+0xd6>
 8009586:	2b10      	cmp	r3, #16
 8009588:	d109      	bne.n	800959e <_strtoul_l.constprop.0+0x3e>
 800958a:	2c30      	cmp	r4, #48	; 0x30
 800958c:	d107      	bne.n	800959e <_strtoul_l.constprop.0+0x3e>
 800958e:	7828      	ldrb	r0, [r5, #0]
 8009590:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8009594:	2858      	cmp	r0, #88	; 0x58
 8009596:	d149      	bne.n	800962c <_strtoul_l.constprop.0+0xcc>
 8009598:	786c      	ldrb	r4, [r5, #1]
 800959a:	2310      	movs	r3, #16
 800959c:	3502      	adds	r5, #2
 800959e:	f04f 38ff 	mov.w	r8, #4294967295
 80095a2:	2700      	movs	r7, #0
 80095a4:	fbb8 f8f3 	udiv	r8, r8, r3
 80095a8:	fb03 f908 	mul.w	r9, r3, r8
 80095ac:	ea6f 0909 	mvn.w	r9, r9
 80095b0:	4638      	mov	r0, r7
 80095b2:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 80095b6:	f1bc 0f09 	cmp.w	ip, #9
 80095ba:	d814      	bhi.n	80095e6 <_strtoul_l.constprop.0+0x86>
 80095bc:	4664      	mov	r4, ip
 80095be:	42a3      	cmp	r3, r4
 80095c0:	dd22      	ble.n	8009608 <_strtoul_l.constprop.0+0xa8>
 80095c2:	2f00      	cmp	r7, #0
 80095c4:	db1d      	blt.n	8009602 <_strtoul_l.constprop.0+0xa2>
 80095c6:	4580      	cmp	r8, r0
 80095c8:	d31b      	bcc.n	8009602 <_strtoul_l.constprop.0+0xa2>
 80095ca:	d101      	bne.n	80095d0 <_strtoul_l.constprop.0+0x70>
 80095cc:	45a1      	cmp	r9, r4
 80095ce:	db18      	blt.n	8009602 <_strtoul_l.constprop.0+0xa2>
 80095d0:	fb00 4003 	mla	r0, r0, r3, r4
 80095d4:	2701      	movs	r7, #1
 80095d6:	f815 4b01 	ldrb.w	r4, [r5], #1
 80095da:	e7ea      	b.n	80095b2 <_strtoul_l.constprop.0+0x52>
 80095dc:	2c2b      	cmp	r4, #43	; 0x2b
 80095de:	bf04      	itt	eq
 80095e0:	782c      	ldrbeq	r4, [r5, #0]
 80095e2:	1c85      	addeq	r5, r0, #2
 80095e4:	e7cd      	b.n	8009582 <_strtoul_l.constprop.0+0x22>
 80095e6:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 80095ea:	f1bc 0f19 	cmp.w	ip, #25
 80095ee:	d801      	bhi.n	80095f4 <_strtoul_l.constprop.0+0x94>
 80095f0:	3c37      	subs	r4, #55	; 0x37
 80095f2:	e7e4      	b.n	80095be <_strtoul_l.constprop.0+0x5e>
 80095f4:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 80095f8:	f1bc 0f19 	cmp.w	ip, #25
 80095fc:	d804      	bhi.n	8009608 <_strtoul_l.constprop.0+0xa8>
 80095fe:	3c57      	subs	r4, #87	; 0x57
 8009600:	e7dd      	b.n	80095be <_strtoul_l.constprop.0+0x5e>
 8009602:	f04f 37ff 	mov.w	r7, #4294967295
 8009606:	e7e6      	b.n	80095d6 <_strtoul_l.constprop.0+0x76>
 8009608:	2f00      	cmp	r7, #0
 800960a:	da07      	bge.n	800961c <_strtoul_l.constprop.0+0xbc>
 800960c:	2322      	movs	r3, #34	; 0x22
 800960e:	f8ce 3000 	str.w	r3, [lr]
 8009612:	f04f 30ff 	mov.w	r0, #4294967295
 8009616:	b932      	cbnz	r2, 8009626 <_strtoul_l.constprop.0+0xc6>
 8009618:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800961c:	b106      	cbz	r6, 8009620 <_strtoul_l.constprop.0+0xc0>
 800961e:	4240      	negs	r0, r0
 8009620:	2a00      	cmp	r2, #0
 8009622:	d0f9      	beq.n	8009618 <_strtoul_l.constprop.0+0xb8>
 8009624:	b107      	cbz	r7, 8009628 <_strtoul_l.constprop.0+0xc8>
 8009626:	1e69      	subs	r1, r5, #1
 8009628:	6011      	str	r1, [r2, #0]
 800962a:	e7f5      	b.n	8009618 <_strtoul_l.constprop.0+0xb8>
 800962c:	2430      	movs	r4, #48	; 0x30
 800962e:	2b00      	cmp	r3, #0
 8009630:	d1b5      	bne.n	800959e <_strtoul_l.constprop.0+0x3e>
 8009632:	2308      	movs	r3, #8
 8009634:	e7b3      	b.n	800959e <_strtoul_l.constprop.0+0x3e>
 8009636:	2c30      	cmp	r4, #48	; 0x30
 8009638:	d0a9      	beq.n	800958e <_strtoul_l.constprop.0+0x2e>
 800963a:	230a      	movs	r3, #10
 800963c:	e7af      	b.n	800959e <_strtoul_l.constprop.0+0x3e>
 800963e:	bf00      	nop
 8009640:	0800bb79 	.word	0x0800bb79

08009644 <_strtoul_r>:
 8009644:	f7ff bf8c 	b.w	8009560 <_strtoul_l.constprop.0>

08009648 <__submore>:
 8009648:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800964c:	460c      	mov	r4, r1
 800964e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8009650:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009654:	4299      	cmp	r1, r3
 8009656:	d11d      	bne.n	8009694 <__submore+0x4c>
 8009658:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800965c:	f7ff fa14 	bl	8008a88 <_malloc_r>
 8009660:	b918      	cbnz	r0, 800966a <__submore+0x22>
 8009662:	f04f 30ff 	mov.w	r0, #4294967295
 8009666:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800966a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800966e:	63a3      	str	r3, [r4, #56]	; 0x38
 8009670:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8009674:	6360      	str	r0, [r4, #52]	; 0x34
 8009676:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800967a:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800967e:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8009682:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8009686:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800968a:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800968e:	6020      	str	r0, [r4, #0]
 8009690:	2000      	movs	r0, #0
 8009692:	e7e8      	b.n	8009666 <__submore+0x1e>
 8009694:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8009696:	0077      	lsls	r7, r6, #1
 8009698:	463a      	mov	r2, r7
 800969a:	f000 fa2d 	bl	8009af8 <_realloc_r>
 800969e:	4605      	mov	r5, r0
 80096a0:	2800      	cmp	r0, #0
 80096a2:	d0de      	beq.n	8009662 <__submore+0x1a>
 80096a4:	eb00 0806 	add.w	r8, r0, r6
 80096a8:	4601      	mov	r1, r0
 80096aa:	4632      	mov	r2, r6
 80096ac:	4640      	mov	r0, r8
 80096ae:	f7fe fc99 	bl	8007fe4 <memcpy>
 80096b2:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 80096b6:	f8c4 8000 	str.w	r8, [r4]
 80096ba:	e7e9      	b.n	8009690 <__submore+0x48>

080096bc <__ascii_wctomb>:
 80096bc:	b149      	cbz	r1, 80096d2 <__ascii_wctomb+0x16>
 80096be:	2aff      	cmp	r2, #255	; 0xff
 80096c0:	bf85      	ittet	hi
 80096c2:	238a      	movhi	r3, #138	; 0x8a
 80096c4:	6003      	strhi	r3, [r0, #0]
 80096c6:	700a      	strbls	r2, [r1, #0]
 80096c8:	f04f 30ff 	movhi.w	r0, #4294967295
 80096cc:	bf98      	it	ls
 80096ce:	2001      	movls	r0, #1
 80096d0:	4770      	bx	lr
 80096d2:	4608      	mov	r0, r1
 80096d4:	4770      	bx	lr
	...

080096d8 <__assert_func>:
 80096d8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80096da:	4614      	mov	r4, r2
 80096dc:	461a      	mov	r2, r3
 80096de:	4b09      	ldr	r3, [pc, #36]	; (8009704 <__assert_func+0x2c>)
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	4605      	mov	r5, r0
 80096e4:	68d8      	ldr	r0, [r3, #12]
 80096e6:	b14c      	cbz	r4, 80096fc <__assert_func+0x24>
 80096e8:	4b07      	ldr	r3, [pc, #28]	; (8009708 <__assert_func+0x30>)
 80096ea:	9100      	str	r1, [sp, #0]
 80096ec:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80096f0:	4906      	ldr	r1, [pc, #24]	; (800970c <__assert_func+0x34>)
 80096f2:	462b      	mov	r3, r5
 80096f4:	f000 f9a6 	bl	8009a44 <fiprintf>
 80096f8:	f000 fc46 	bl	8009f88 <abort>
 80096fc:	4b04      	ldr	r3, [pc, #16]	; (8009710 <__assert_func+0x38>)
 80096fe:	461c      	mov	r4, r3
 8009700:	e7f3      	b.n	80096ea <__assert_func+0x12>
 8009702:	bf00      	nop
 8009704:	20000010 	.word	0x20000010
 8009708:	0800bf08 	.word	0x0800bf08
 800970c:	0800bf15 	.word	0x0800bf15
 8009710:	0800bf43 	.word	0x0800bf43

08009714 <__sflush_r>:
 8009714:	898a      	ldrh	r2, [r1, #12]
 8009716:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800971a:	4605      	mov	r5, r0
 800971c:	0710      	lsls	r0, r2, #28
 800971e:	460c      	mov	r4, r1
 8009720:	d458      	bmi.n	80097d4 <__sflush_r+0xc0>
 8009722:	684b      	ldr	r3, [r1, #4]
 8009724:	2b00      	cmp	r3, #0
 8009726:	dc05      	bgt.n	8009734 <__sflush_r+0x20>
 8009728:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800972a:	2b00      	cmp	r3, #0
 800972c:	dc02      	bgt.n	8009734 <__sflush_r+0x20>
 800972e:	2000      	movs	r0, #0
 8009730:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009734:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009736:	2e00      	cmp	r6, #0
 8009738:	d0f9      	beq.n	800972e <__sflush_r+0x1a>
 800973a:	2300      	movs	r3, #0
 800973c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009740:	682f      	ldr	r7, [r5, #0]
 8009742:	602b      	str	r3, [r5, #0]
 8009744:	d032      	beq.n	80097ac <__sflush_r+0x98>
 8009746:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009748:	89a3      	ldrh	r3, [r4, #12]
 800974a:	075a      	lsls	r2, r3, #29
 800974c:	d505      	bpl.n	800975a <__sflush_r+0x46>
 800974e:	6863      	ldr	r3, [r4, #4]
 8009750:	1ac0      	subs	r0, r0, r3
 8009752:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009754:	b10b      	cbz	r3, 800975a <__sflush_r+0x46>
 8009756:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009758:	1ac0      	subs	r0, r0, r3
 800975a:	2300      	movs	r3, #0
 800975c:	4602      	mov	r2, r0
 800975e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009760:	6a21      	ldr	r1, [r4, #32]
 8009762:	4628      	mov	r0, r5
 8009764:	47b0      	blx	r6
 8009766:	1c43      	adds	r3, r0, #1
 8009768:	89a3      	ldrh	r3, [r4, #12]
 800976a:	d106      	bne.n	800977a <__sflush_r+0x66>
 800976c:	6829      	ldr	r1, [r5, #0]
 800976e:	291d      	cmp	r1, #29
 8009770:	d82c      	bhi.n	80097cc <__sflush_r+0xb8>
 8009772:	4a2a      	ldr	r2, [pc, #168]	; (800981c <__sflush_r+0x108>)
 8009774:	40ca      	lsrs	r2, r1
 8009776:	07d6      	lsls	r6, r2, #31
 8009778:	d528      	bpl.n	80097cc <__sflush_r+0xb8>
 800977a:	2200      	movs	r2, #0
 800977c:	6062      	str	r2, [r4, #4]
 800977e:	04d9      	lsls	r1, r3, #19
 8009780:	6922      	ldr	r2, [r4, #16]
 8009782:	6022      	str	r2, [r4, #0]
 8009784:	d504      	bpl.n	8009790 <__sflush_r+0x7c>
 8009786:	1c42      	adds	r2, r0, #1
 8009788:	d101      	bne.n	800978e <__sflush_r+0x7a>
 800978a:	682b      	ldr	r3, [r5, #0]
 800978c:	b903      	cbnz	r3, 8009790 <__sflush_r+0x7c>
 800978e:	6560      	str	r0, [r4, #84]	; 0x54
 8009790:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009792:	602f      	str	r7, [r5, #0]
 8009794:	2900      	cmp	r1, #0
 8009796:	d0ca      	beq.n	800972e <__sflush_r+0x1a>
 8009798:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800979c:	4299      	cmp	r1, r3
 800979e:	d002      	beq.n	80097a6 <__sflush_r+0x92>
 80097a0:	4628      	mov	r0, r5
 80097a2:	f7ff f905 	bl	80089b0 <_free_r>
 80097a6:	2000      	movs	r0, #0
 80097a8:	6360      	str	r0, [r4, #52]	; 0x34
 80097aa:	e7c1      	b.n	8009730 <__sflush_r+0x1c>
 80097ac:	6a21      	ldr	r1, [r4, #32]
 80097ae:	2301      	movs	r3, #1
 80097b0:	4628      	mov	r0, r5
 80097b2:	47b0      	blx	r6
 80097b4:	1c41      	adds	r1, r0, #1
 80097b6:	d1c7      	bne.n	8009748 <__sflush_r+0x34>
 80097b8:	682b      	ldr	r3, [r5, #0]
 80097ba:	2b00      	cmp	r3, #0
 80097bc:	d0c4      	beq.n	8009748 <__sflush_r+0x34>
 80097be:	2b1d      	cmp	r3, #29
 80097c0:	d001      	beq.n	80097c6 <__sflush_r+0xb2>
 80097c2:	2b16      	cmp	r3, #22
 80097c4:	d101      	bne.n	80097ca <__sflush_r+0xb6>
 80097c6:	602f      	str	r7, [r5, #0]
 80097c8:	e7b1      	b.n	800972e <__sflush_r+0x1a>
 80097ca:	89a3      	ldrh	r3, [r4, #12]
 80097cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80097d0:	81a3      	strh	r3, [r4, #12]
 80097d2:	e7ad      	b.n	8009730 <__sflush_r+0x1c>
 80097d4:	690f      	ldr	r7, [r1, #16]
 80097d6:	2f00      	cmp	r7, #0
 80097d8:	d0a9      	beq.n	800972e <__sflush_r+0x1a>
 80097da:	0793      	lsls	r3, r2, #30
 80097dc:	680e      	ldr	r6, [r1, #0]
 80097de:	bf08      	it	eq
 80097e0:	694b      	ldreq	r3, [r1, #20]
 80097e2:	600f      	str	r7, [r1, #0]
 80097e4:	bf18      	it	ne
 80097e6:	2300      	movne	r3, #0
 80097e8:	eba6 0807 	sub.w	r8, r6, r7
 80097ec:	608b      	str	r3, [r1, #8]
 80097ee:	f1b8 0f00 	cmp.w	r8, #0
 80097f2:	dd9c      	ble.n	800972e <__sflush_r+0x1a>
 80097f4:	6a21      	ldr	r1, [r4, #32]
 80097f6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80097f8:	4643      	mov	r3, r8
 80097fa:	463a      	mov	r2, r7
 80097fc:	4628      	mov	r0, r5
 80097fe:	47b0      	blx	r6
 8009800:	2800      	cmp	r0, #0
 8009802:	dc06      	bgt.n	8009812 <__sflush_r+0xfe>
 8009804:	89a3      	ldrh	r3, [r4, #12]
 8009806:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800980a:	81a3      	strh	r3, [r4, #12]
 800980c:	f04f 30ff 	mov.w	r0, #4294967295
 8009810:	e78e      	b.n	8009730 <__sflush_r+0x1c>
 8009812:	4407      	add	r7, r0
 8009814:	eba8 0800 	sub.w	r8, r8, r0
 8009818:	e7e9      	b.n	80097ee <__sflush_r+0xda>
 800981a:	bf00      	nop
 800981c:	20400001 	.word	0x20400001

08009820 <_fflush_r>:
 8009820:	b538      	push	{r3, r4, r5, lr}
 8009822:	690b      	ldr	r3, [r1, #16]
 8009824:	4605      	mov	r5, r0
 8009826:	460c      	mov	r4, r1
 8009828:	b913      	cbnz	r3, 8009830 <_fflush_r+0x10>
 800982a:	2500      	movs	r5, #0
 800982c:	4628      	mov	r0, r5
 800982e:	bd38      	pop	{r3, r4, r5, pc}
 8009830:	b118      	cbz	r0, 800983a <_fflush_r+0x1a>
 8009832:	6983      	ldr	r3, [r0, #24]
 8009834:	b90b      	cbnz	r3, 800983a <_fflush_r+0x1a>
 8009836:	f000 f887 	bl	8009948 <__sinit>
 800983a:	4b14      	ldr	r3, [pc, #80]	; (800988c <_fflush_r+0x6c>)
 800983c:	429c      	cmp	r4, r3
 800983e:	d11b      	bne.n	8009878 <_fflush_r+0x58>
 8009840:	686c      	ldr	r4, [r5, #4]
 8009842:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009846:	2b00      	cmp	r3, #0
 8009848:	d0ef      	beq.n	800982a <_fflush_r+0xa>
 800984a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800984c:	07d0      	lsls	r0, r2, #31
 800984e:	d404      	bmi.n	800985a <_fflush_r+0x3a>
 8009850:	0599      	lsls	r1, r3, #22
 8009852:	d402      	bmi.n	800985a <_fflush_r+0x3a>
 8009854:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009856:	f000 f927 	bl	8009aa8 <__retarget_lock_acquire_recursive>
 800985a:	4628      	mov	r0, r5
 800985c:	4621      	mov	r1, r4
 800985e:	f7ff ff59 	bl	8009714 <__sflush_r>
 8009862:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009864:	07da      	lsls	r2, r3, #31
 8009866:	4605      	mov	r5, r0
 8009868:	d4e0      	bmi.n	800982c <_fflush_r+0xc>
 800986a:	89a3      	ldrh	r3, [r4, #12]
 800986c:	059b      	lsls	r3, r3, #22
 800986e:	d4dd      	bmi.n	800982c <_fflush_r+0xc>
 8009870:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009872:	f000 f91a 	bl	8009aaa <__retarget_lock_release_recursive>
 8009876:	e7d9      	b.n	800982c <_fflush_r+0xc>
 8009878:	4b05      	ldr	r3, [pc, #20]	; (8009890 <_fflush_r+0x70>)
 800987a:	429c      	cmp	r4, r3
 800987c:	d101      	bne.n	8009882 <_fflush_r+0x62>
 800987e:	68ac      	ldr	r4, [r5, #8]
 8009880:	e7df      	b.n	8009842 <_fflush_r+0x22>
 8009882:	4b04      	ldr	r3, [pc, #16]	; (8009894 <_fflush_r+0x74>)
 8009884:	429c      	cmp	r4, r3
 8009886:	bf08      	it	eq
 8009888:	68ec      	ldreq	r4, [r5, #12]
 800988a:	e7da      	b.n	8009842 <_fflush_r+0x22>
 800988c:	0800bf64 	.word	0x0800bf64
 8009890:	0800bf84 	.word	0x0800bf84
 8009894:	0800bf44 	.word	0x0800bf44

08009898 <std>:
 8009898:	2300      	movs	r3, #0
 800989a:	b510      	push	{r4, lr}
 800989c:	4604      	mov	r4, r0
 800989e:	e9c0 3300 	strd	r3, r3, [r0]
 80098a2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80098a6:	6083      	str	r3, [r0, #8]
 80098a8:	8181      	strh	r1, [r0, #12]
 80098aa:	6643      	str	r3, [r0, #100]	; 0x64
 80098ac:	81c2      	strh	r2, [r0, #14]
 80098ae:	6183      	str	r3, [r0, #24]
 80098b0:	4619      	mov	r1, r3
 80098b2:	2208      	movs	r2, #8
 80098b4:	305c      	adds	r0, #92	; 0x5c
 80098b6:	f7fb fb91 	bl	8004fdc <memset>
 80098ba:	4b05      	ldr	r3, [pc, #20]	; (80098d0 <std+0x38>)
 80098bc:	6263      	str	r3, [r4, #36]	; 0x24
 80098be:	4b05      	ldr	r3, [pc, #20]	; (80098d4 <std+0x3c>)
 80098c0:	62a3      	str	r3, [r4, #40]	; 0x28
 80098c2:	4b05      	ldr	r3, [pc, #20]	; (80098d8 <std+0x40>)
 80098c4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80098c6:	4b05      	ldr	r3, [pc, #20]	; (80098dc <std+0x44>)
 80098c8:	6224      	str	r4, [r4, #32]
 80098ca:	6323      	str	r3, [r4, #48]	; 0x30
 80098cc:	bd10      	pop	{r4, pc}
 80098ce:	bf00      	nop
 80098d0:	08005d85 	.word	0x08005d85
 80098d4:	08005dab 	.word	0x08005dab
 80098d8:	08005de3 	.word	0x08005de3
 80098dc:	08005e07 	.word	0x08005e07

080098e0 <_cleanup_r>:
 80098e0:	4901      	ldr	r1, [pc, #4]	; (80098e8 <_cleanup_r+0x8>)
 80098e2:	f000 b8c1 	b.w	8009a68 <_fwalk_reent>
 80098e6:	bf00      	nop
 80098e8:	08009821 	.word	0x08009821

080098ec <__sfmoreglue>:
 80098ec:	b570      	push	{r4, r5, r6, lr}
 80098ee:	2268      	movs	r2, #104	; 0x68
 80098f0:	1e4d      	subs	r5, r1, #1
 80098f2:	4355      	muls	r5, r2
 80098f4:	460e      	mov	r6, r1
 80098f6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80098fa:	f7ff f8c5 	bl	8008a88 <_malloc_r>
 80098fe:	4604      	mov	r4, r0
 8009900:	b140      	cbz	r0, 8009914 <__sfmoreglue+0x28>
 8009902:	2100      	movs	r1, #0
 8009904:	e9c0 1600 	strd	r1, r6, [r0]
 8009908:	300c      	adds	r0, #12
 800990a:	60a0      	str	r0, [r4, #8]
 800990c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009910:	f7fb fb64 	bl	8004fdc <memset>
 8009914:	4620      	mov	r0, r4
 8009916:	bd70      	pop	{r4, r5, r6, pc}

08009918 <__sfp_lock_acquire>:
 8009918:	4801      	ldr	r0, [pc, #4]	; (8009920 <__sfp_lock_acquire+0x8>)
 800991a:	f000 b8c5 	b.w	8009aa8 <__retarget_lock_acquire_recursive>
 800991e:	bf00      	nop
 8009920:	20000cb9 	.word	0x20000cb9

08009924 <__sfp_lock_release>:
 8009924:	4801      	ldr	r0, [pc, #4]	; (800992c <__sfp_lock_release+0x8>)
 8009926:	f000 b8c0 	b.w	8009aaa <__retarget_lock_release_recursive>
 800992a:	bf00      	nop
 800992c:	20000cb9 	.word	0x20000cb9

08009930 <__sinit_lock_acquire>:
 8009930:	4801      	ldr	r0, [pc, #4]	; (8009938 <__sinit_lock_acquire+0x8>)
 8009932:	f000 b8b9 	b.w	8009aa8 <__retarget_lock_acquire_recursive>
 8009936:	bf00      	nop
 8009938:	20000cba 	.word	0x20000cba

0800993c <__sinit_lock_release>:
 800993c:	4801      	ldr	r0, [pc, #4]	; (8009944 <__sinit_lock_release+0x8>)
 800993e:	f000 b8b4 	b.w	8009aaa <__retarget_lock_release_recursive>
 8009942:	bf00      	nop
 8009944:	20000cba 	.word	0x20000cba

08009948 <__sinit>:
 8009948:	b510      	push	{r4, lr}
 800994a:	4604      	mov	r4, r0
 800994c:	f7ff fff0 	bl	8009930 <__sinit_lock_acquire>
 8009950:	69a3      	ldr	r3, [r4, #24]
 8009952:	b11b      	cbz	r3, 800995c <__sinit+0x14>
 8009954:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009958:	f7ff bff0 	b.w	800993c <__sinit_lock_release>
 800995c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009960:	6523      	str	r3, [r4, #80]	; 0x50
 8009962:	4b13      	ldr	r3, [pc, #76]	; (80099b0 <__sinit+0x68>)
 8009964:	4a13      	ldr	r2, [pc, #76]	; (80099b4 <__sinit+0x6c>)
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	62a2      	str	r2, [r4, #40]	; 0x28
 800996a:	42a3      	cmp	r3, r4
 800996c:	bf04      	itt	eq
 800996e:	2301      	moveq	r3, #1
 8009970:	61a3      	streq	r3, [r4, #24]
 8009972:	4620      	mov	r0, r4
 8009974:	f000 f820 	bl	80099b8 <__sfp>
 8009978:	6060      	str	r0, [r4, #4]
 800997a:	4620      	mov	r0, r4
 800997c:	f000 f81c 	bl	80099b8 <__sfp>
 8009980:	60a0      	str	r0, [r4, #8]
 8009982:	4620      	mov	r0, r4
 8009984:	f000 f818 	bl	80099b8 <__sfp>
 8009988:	2200      	movs	r2, #0
 800998a:	60e0      	str	r0, [r4, #12]
 800998c:	2104      	movs	r1, #4
 800998e:	6860      	ldr	r0, [r4, #4]
 8009990:	f7ff ff82 	bl	8009898 <std>
 8009994:	68a0      	ldr	r0, [r4, #8]
 8009996:	2201      	movs	r2, #1
 8009998:	2109      	movs	r1, #9
 800999a:	f7ff ff7d 	bl	8009898 <std>
 800999e:	68e0      	ldr	r0, [r4, #12]
 80099a0:	2202      	movs	r2, #2
 80099a2:	2112      	movs	r1, #18
 80099a4:	f7ff ff78 	bl	8009898 <std>
 80099a8:	2301      	movs	r3, #1
 80099aa:	61a3      	str	r3, [r4, #24]
 80099ac:	e7d2      	b.n	8009954 <__sinit+0xc>
 80099ae:	bf00      	nop
 80099b0:	0800baec 	.word	0x0800baec
 80099b4:	080098e1 	.word	0x080098e1

080099b8 <__sfp>:
 80099b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80099ba:	4607      	mov	r7, r0
 80099bc:	f7ff ffac 	bl	8009918 <__sfp_lock_acquire>
 80099c0:	4b1e      	ldr	r3, [pc, #120]	; (8009a3c <__sfp+0x84>)
 80099c2:	681e      	ldr	r6, [r3, #0]
 80099c4:	69b3      	ldr	r3, [r6, #24]
 80099c6:	b913      	cbnz	r3, 80099ce <__sfp+0x16>
 80099c8:	4630      	mov	r0, r6
 80099ca:	f7ff ffbd 	bl	8009948 <__sinit>
 80099ce:	3648      	adds	r6, #72	; 0x48
 80099d0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80099d4:	3b01      	subs	r3, #1
 80099d6:	d503      	bpl.n	80099e0 <__sfp+0x28>
 80099d8:	6833      	ldr	r3, [r6, #0]
 80099da:	b30b      	cbz	r3, 8009a20 <__sfp+0x68>
 80099dc:	6836      	ldr	r6, [r6, #0]
 80099de:	e7f7      	b.n	80099d0 <__sfp+0x18>
 80099e0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80099e4:	b9d5      	cbnz	r5, 8009a1c <__sfp+0x64>
 80099e6:	4b16      	ldr	r3, [pc, #88]	; (8009a40 <__sfp+0x88>)
 80099e8:	60e3      	str	r3, [r4, #12]
 80099ea:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80099ee:	6665      	str	r5, [r4, #100]	; 0x64
 80099f0:	f000 f859 	bl	8009aa6 <__retarget_lock_init_recursive>
 80099f4:	f7ff ff96 	bl	8009924 <__sfp_lock_release>
 80099f8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80099fc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009a00:	6025      	str	r5, [r4, #0]
 8009a02:	61a5      	str	r5, [r4, #24]
 8009a04:	2208      	movs	r2, #8
 8009a06:	4629      	mov	r1, r5
 8009a08:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009a0c:	f7fb fae6 	bl	8004fdc <memset>
 8009a10:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009a14:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009a18:	4620      	mov	r0, r4
 8009a1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009a1c:	3468      	adds	r4, #104	; 0x68
 8009a1e:	e7d9      	b.n	80099d4 <__sfp+0x1c>
 8009a20:	2104      	movs	r1, #4
 8009a22:	4638      	mov	r0, r7
 8009a24:	f7ff ff62 	bl	80098ec <__sfmoreglue>
 8009a28:	4604      	mov	r4, r0
 8009a2a:	6030      	str	r0, [r6, #0]
 8009a2c:	2800      	cmp	r0, #0
 8009a2e:	d1d5      	bne.n	80099dc <__sfp+0x24>
 8009a30:	f7ff ff78 	bl	8009924 <__sfp_lock_release>
 8009a34:	230c      	movs	r3, #12
 8009a36:	603b      	str	r3, [r7, #0]
 8009a38:	e7ee      	b.n	8009a18 <__sfp+0x60>
 8009a3a:	bf00      	nop
 8009a3c:	0800baec 	.word	0x0800baec
 8009a40:	ffff0001 	.word	0xffff0001

08009a44 <fiprintf>:
 8009a44:	b40e      	push	{r1, r2, r3}
 8009a46:	b503      	push	{r0, r1, lr}
 8009a48:	4601      	mov	r1, r0
 8009a4a:	ab03      	add	r3, sp, #12
 8009a4c:	4805      	ldr	r0, [pc, #20]	; (8009a64 <fiprintf+0x20>)
 8009a4e:	f853 2b04 	ldr.w	r2, [r3], #4
 8009a52:	6800      	ldr	r0, [r0, #0]
 8009a54:	9301      	str	r3, [sp, #4]
 8009a56:	f000 f8a7 	bl	8009ba8 <_vfiprintf_r>
 8009a5a:	b002      	add	sp, #8
 8009a5c:	f85d eb04 	ldr.w	lr, [sp], #4
 8009a60:	b003      	add	sp, #12
 8009a62:	4770      	bx	lr
 8009a64:	20000010 	.word	0x20000010

08009a68 <_fwalk_reent>:
 8009a68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009a6c:	4606      	mov	r6, r0
 8009a6e:	4688      	mov	r8, r1
 8009a70:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009a74:	2700      	movs	r7, #0
 8009a76:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009a7a:	f1b9 0901 	subs.w	r9, r9, #1
 8009a7e:	d505      	bpl.n	8009a8c <_fwalk_reent+0x24>
 8009a80:	6824      	ldr	r4, [r4, #0]
 8009a82:	2c00      	cmp	r4, #0
 8009a84:	d1f7      	bne.n	8009a76 <_fwalk_reent+0xe>
 8009a86:	4638      	mov	r0, r7
 8009a88:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009a8c:	89ab      	ldrh	r3, [r5, #12]
 8009a8e:	2b01      	cmp	r3, #1
 8009a90:	d907      	bls.n	8009aa2 <_fwalk_reent+0x3a>
 8009a92:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009a96:	3301      	adds	r3, #1
 8009a98:	d003      	beq.n	8009aa2 <_fwalk_reent+0x3a>
 8009a9a:	4629      	mov	r1, r5
 8009a9c:	4630      	mov	r0, r6
 8009a9e:	47c0      	blx	r8
 8009aa0:	4307      	orrs	r7, r0
 8009aa2:	3568      	adds	r5, #104	; 0x68
 8009aa4:	e7e9      	b.n	8009a7a <_fwalk_reent+0x12>

08009aa6 <__retarget_lock_init_recursive>:
 8009aa6:	4770      	bx	lr

08009aa8 <__retarget_lock_acquire_recursive>:
 8009aa8:	4770      	bx	lr

08009aaa <__retarget_lock_release_recursive>:
 8009aaa:	4770      	bx	lr

08009aac <memmove>:
 8009aac:	4288      	cmp	r0, r1
 8009aae:	b510      	push	{r4, lr}
 8009ab0:	eb01 0402 	add.w	r4, r1, r2
 8009ab4:	d902      	bls.n	8009abc <memmove+0x10>
 8009ab6:	4284      	cmp	r4, r0
 8009ab8:	4623      	mov	r3, r4
 8009aba:	d807      	bhi.n	8009acc <memmove+0x20>
 8009abc:	1e43      	subs	r3, r0, #1
 8009abe:	42a1      	cmp	r1, r4
 8009ac0:	d008      	beq.n	8009ad4 <memmove+0x28>
 8009ac2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009ac6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009aca:	e7f8      	b.n	8009abe <memmove+0x12>
 8009acc:	4402      	add	r2, r0
 8009ace:	4601      	mov	r1, r0
 8009ad0:	428a      	cmp	r2, r1
 8009ad2:	d100      	bne.n	8009ad6 <memmove+0x2a>
 8009ad4:	bd10      	pop	{r4, pc}
 8009ad6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009ada:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009ade:	e7f7      	b.n	8009ad0 <memmove+0x24>

08009ae0 <__malloc_lock>:
 8009ae0:	4801      	ldr	r0, [pc, #4]	; (8009ae8 <__malloc_lock+0x8>)
 8009ae2:	f7ff bfe1 	b.w	8009aa8 <__retarget_lock_acquire_recursive>
 8009ae6:	bf00      	nop
 8009ae8:	20000cb8 	.word	0x20000cb8

08009aec <__malloc_unlock>:
 8009aec:	4801      	ldr	r0, [pc, #4]	; (8009af4 <__malloc_unlock+0x8>)
 8009aee:	f7ff bfdc 	b.w	8009aaa <__retarget_lock_release_recursive>
 8009af2:	bf00      	nop
 8009af4:	20000cb8 	.word	0x20000cb8

08009af8 <_realloc_r>:
 8009af8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009afc:	4680      	mov	r8, r0
 8009afe:	4614      	mov	r4, r2
 8009b00:	460e      	mov	r6, r1
 8009b02:	b921      	cbnz	r1, 8009b0e <_realloc_r+0x16>
 8009b04:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009b08:	4611      	mov	r1, r2
 8009b0a:	f7fe bfbd 	b.w	8008a88 <_malloc_r>
 8009b0e:	b92a      	cbnz	r2, 8009b1c <_realloc_r+0x24>
 8009b10:	f7fe ff4e 	bl	80089b0 <_free_r>
 8009b14:	4625      	mov	r5, r4
 8009b16:	4628      	mov	r0, r5
 8009b18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009b1c:	f000 faa0 	bl	800a060 <_malloc_usable_size_r>
 8009b20:	4284      	cmp	r4, r0
 8009b22:	4607      	mov	r7, r0
 8009b24:	d802      	bhi.n	8009b2c <_realloc_r+0x34>
 8009b26:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009b2a:	d812      	bhi.n	8009b52 <_realloc_r+0x5a>
 8009b2c:	4621      	mov	r1, r4
 8009b2e:	4640      	mov	r0, r8
 8009b30:	f7fe ffaa 	bl	8008a88 <_malloc_r>
 8009b34:	4605      	mov	r5, r0
 8009b36:	2800      	cmp	r0, #0
 8009b38:	d0ed      	beq.n	8009b16 <_realloc_r+0x1e>
 8009b3a:	42bc      	cmp	r4, r7
 8009b3c:	4622      	mov	r2, r4
 8009b3e:	4631      	mov	r1, r6
 8009b40:	bf28      	it	cs
 8009b42:	463a      	movcs	r2, r7
 8009b44:	f7fe fa4e 	bl	8007fe4 <memcpy>
 8009b48:	4631      	mov	r1, r6
 8009b4a:	4640      	mov	r0, r8
 8009b4c:	f7fe ff30 	bl	80089b0 <_free_r>
 8009b50:	e7e1      	b.n	8009b16 <_realloc_r+0x1e>
 8009b52:	4635      	mov	r5, r6
 8009b54:	e7df      	b.n	8009b16 <_realloc_r+0x1e>

08009b56 <__sfputc_r>:
 8009b56:	6893      	ldr	r3, [r2, #8]
 8009b58:	3b01      	subs	r3, #1
 8009b5a:	2b00      	cmp	r3, #0
 8009b5c:	b410      	push	{r4}
 8009b5e:	6093      	str	r3, [r2, #8]
 8009b60:	da08      	bge.n	8009b74 <__sfputc_r+0x1e>
 8009b62:	6994      	ldr	r4, [r2, #24]
 8009b64:	42a3      	cmp	r3, r4
 8009b66:	db01      	blt.n	8009b6c <__sfputc_r+0x16>
 8009b68:	290a      	cmp	r1, #10
 8009b6a:	d103      	bne.n	8009b74 <__sfputc_r+0x1e>
 8009b6c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009b70:	f000 b94a 	b.w	8009e08 <__swbuf_r>
 8009b74:	6813      	ldr	r3, [r2, #0]
 8009b76:	1c58      	adds	r0, r3, #1
 8009b78:	6010      	str	r0, [r2, #0]
 8009b7a:	7019      	strb	r1, [r3, #0]
 8009b7c:	4608      	mov	r0, r1
 8009b7e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009b82:	4770      	bx	lr

08009b84 <__sfputs_r>:
 8009b84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b86:	4606      	mov	r6, r0
 8009b88:	460f      	mov	r7, r1
 8009b8a:	4614      	mov	r4, r2
 8009b8c:	18d5      	adds	r5, r2, r3
 8009b8e:	42ac      	cmp	r4, r5
 8009b90:	d101      	bne.n	8009b96 <__sfputs_r+0x12>
 8009b92:	2000      	movs	r0, #0
 8009b94:	e007      	b.n	8009ba6 <__sfputs_r+0x22>
 8009b96:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009b9a:	463a      	mov	r2, r7
 8009b9c:	4630      	mov	r0, r6
 8009b9e:	f7ff ffda 	bl	8009b56 <__sfputc_r>
 8009ba2:	1c43      	adds	r3, r0, #1
 8009ba4:	d1f3      	bne.n	8009b8e <__sfputs_r+0xa>
 8009ba6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009ba8 <_vfiprintf_r>:
 8009ba8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009bac:	460d      	mov	r5, r1
 8009bae:	b09d      	sub	sp, #116	; 0x74
 8009bb0:	4614      	mov	r4, r2
 8009bb2:	4698      	mov	r8, r3
 8009bb4:	4606      	mov	r6, r0
 8009bb6:	b118      	cbz	r0, 8009bc0 <_vfiprintf_r+0x18>
 8009bb8:	6983      	ldr	r3, [r0, #24]
 8009bba:	b90b      	cbnz	r3, 8009bc0 <_vfiprintf_r+0x18>
 8009bbc:	f7ff fec4 	bl	8009948 <__sinit>
 8009bc0:	4b89      	ldr	r3, [pc, #548]	; (8009de8 <_vfiprintf_r+0x240>)
 8009bc2:	429d      	cmp	r5, r3
 8009bc4:	d11b      	bne.n	8009bfe <_vfiprintf_r+0x56>
 8009bc6:	6875      	ldr	r5, [r6, #4]
 8009bc8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009bca:	07d9      	lsls	r1, r3, #31
 8009bcc:	d405      	bmi.n	8009bda <_vfiprintf_r+0x32>
 8009bce:	89ab      	ldrh	r3, [r5, #12]
 8009bd0:	059a      	lsls	r2, r3, #22
 8009bd2:	d402      	bmi.n	8009bda <_vfiprintf_r+0x32>
 8009bd4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009bd6:	f7ff ff67 	bl	8009aa8 <__retarget_lock_acquire_recursive>
 8009bda:	89ab      	ldrh	r3, [r5, #12]
 8009bdc:	071b      	lsls	r3, r3, #28
 8009bde:	d501      	bpl.n	8009be4 <_vfiprintf_r+0x3c>
 8009be0:	692b      	ldr	r3, [r5, #16]
 8009be2:	b9eb      	cbnz	r3, 8009c20 <_vfiprintf_r+0x78>
 8009be4:	4629      	mov	r1, r5
 8009be6:	4630      	mov	r0, r6
 8009be8:	f000 f960 	bl	8009eac <__swsetup_r>
 8009bec:	b1c0      	cbz	r0, 8009c20 <_vfiprintf_r+0x78>
 8009bee:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009bf0:	07dc      	lsls	r4, r3, #31
 8009bf2:	d50e      	bpl.n	8009c12 <_vfiprintf_r+0x6a>
 8009bf4:	f04f 30ff 	mov.w	r0, #4294967295
 8009bf8:	b01d      	add	sp, #116	; 0x74
 8009bfa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009bfe:	4b7b      	ldr	r3, [pc, #492]	; (8009dec <_vfiprintf_r+0x244>)
 8009c00:	429d      	cmp	r5, r3
 8009c02:	d101      	bne.n	8009c08 <_vfiprintf_r+0x60>
 8009c04:	68b5      	ldr	r5, [r6, #8]
 8009c06:	e7df      	b.n	8009bc8 <_vfiprintf_r+0x20>
 8009c08:	4b79      	ldr	r3, [pc, #484]	; (8009df0 <_vfiprintf_r+0x248>)
 8009c0a:	429d      	cmp	r5, r3
 8009c0c:	bf08      	it	eq
 8009c0e:	68f5      	ldreq	r5, [r6, #12]
 8009c10:	e7da      	b.n	8009bc8 <_vfiprintf_r+0x20>
 8009c12:	89ab      	ldrh	r3, [r5, #12]
 8009c14:	0598      	lsls	r0, r3, #22
 8009c16:	d4ed      	bmi.n	8009bf4 <_vfiprintf_r+0x4c>
 8009c18:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009c1a:	f7ff ff46 	bl	8009aaa <__retarget_lock_release_recursive>
 8009c1e:	e7e9      	b.n	8009bf4 <_vfiprintf_r+0x4c>
 8009c20:	2300      	movs	r3, #0
 8009c22:	9309      	str	r3, [sp, #36]	; 0x24
 8009c24:	2320      	movs	r3, #32
 8009c26:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009c2a:	f8cd 800c 	str.w	r8, [sp, #12]
 8009c2e:	2330      	movs	r3, #48	; 0x30
 8009c30:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8009df4 <_vfiprintf_r+0x24c>
 8009c34:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009c38:	f04f 0901 	mov.w	r9, #1
 8009c3c:	4623      	mov	r3, r4
 8009c3e:	469a      	mov	sl, r3
 8009c40:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009c44:	b10a      	cbz	r2, 8009c4a <_vfiprintf_r+0xa2>
 8009c46:	2a25      	cmp	r2, #37	; 0x25
 8009c48:	d1f9      	bne.n	8009c3e <_vfiprintf_r+0x96>
 8009c4a:	ebba 0b04 	subs.w	fp, sl, r4
 8009c4e:	d00b      	beq.n	8009c68 <_vfiprintf_r+0xc0>
 8009c50:	465b      	mov	r3, fp
 8009c52:	4622      	mov	r2, r4
 8009c54:	4629      	mov	r1, r5
 8009c56:	4630      	mov	r0, r6
 8009c58:	f7ff ff94 	bl	8009b84 <__sfputs_r>
 8009c5c:	3001      	adds	r0, #1
 8009c5e:	f000 80aa 	beq.w	8009db6 <_vfiprintf_r+0x20e>
 8009c62:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009c64:	445a      	add	r2, fp
 8009c66:	9209      	str	r2, [sp, #36]	; 0x24
 8009c68:	f89a 3000 	ldrb.w	r3, [sl]
 8009c6c:	2b00      	cmp	r3, #0
 8009c6e:	f000 80a2 	beq.w	8009db6 <_vfiprintf_r+0x20e>
 8009c72:	2300      	movs	r3, #0
 8009c74:	f04f 32ff 	mov.w	r2, #4294967295
 8009c78:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009c7c:	f10a 0a01 	add.w	sl, sl, #1
 8009c80:	9304      	str	r3, [sp, #16]
 8009c82:	9307      	str	r3, [sp, #28]
 8009c84:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009c88:	931a      	str	r3, [sp, #104]	; 0x68
 8009c8a:	4654      	mov	r4, sl
 8009c8c:	2205      	movs	r2, #5
 8009c8e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009c92:	4858      	ldr	r0, [pc, #352]	; (8009df4 <_vfiprintf_r+0x24c>)
 8009c94:	f7f6 fabc 	bl	8000210 <memchr>
 8009c98:	9a04      	ldr	r2, [sp, #16]
 8009c9a:	b9d8      	cbnz	r0, 8009cd4 <_vfiprintf_r+0x12c>
 8009c9c:	06d1      	lsls	r1, r2, #27
 8009c9e:	bf44      	itt	mi
 8009ca0:	2320      	movmi	r3, #32
 8009ca2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009ca6:	0713      	lsls	r3, r2, #28
 8009ca8:	bf44      	itt	mi
 8009caa:	232b      	movmi	r3, #43	; 0x2b
 8009cac:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009cb0:	f89a 3000 	ldrb.w	r3, [sl]
 8009cb4:	2b2a      	cmp	r3, #42	; 0x2a
 8009cb6:	d015      	beq.n	8009ce4 <_vfiprintf_r+0x13c>
 8009cb8:	9a07      	ldr	r2, [sp, #28]
 8009cba:	4654      	mov	r4, sl
 8009cbc:	2000      	movs	r0, #0
 8009cbe:	f04f 0c0a 	mov.w	ip, #10
 8009cc2:	4621      	mov	r1, r4
 8009cc4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009cc8:	3b30      	subs	r3, #48	; 0x30
 8009cca:	2b09      	cmp	r3, #9
 8009ccc:	d94e      	bls.n	8009d6c <_vfiprintf_r+0x1c4>
 8009cce:	b1b0      	cbz	r0, 8009cfe <_vfiprintf_r+0x156>
 8009cd0:	9207      	str	r2, [sp, #28]
 8009cd2:	e014      	b.n	8009cfe <_vfiprintf_r+0x156>
 8009cd4:	eba0 0308 	sub.w	r3, r0, r8
 8009cd8:	fa09 f303 	lsl.w	r3, r9, r3
 8009cdc:	4313      	orrs	r3, r2
 8009cde:	9304      	str	r3, [sp, #16]
 8009ce0:	46a2      	mov	sl, r4
 8009ce2:	e7d2      	b.n	8009c8a <_vfiprintf_r+0xe2>
 8009ce4:	9b03      	ldr	r3, [sp, #12]
 8009ce6:	1d19      	adds	r1, r3, #4
 8009ce8:	681b      	ldr	r3, [r3, #0]
 8009cea:	9103      	str	r1, [sp, #12]
 8009cec:	2b00      	cmp	r3, #0
 8009cee:	bfbb      	ittet	lt
 8009cf0:	425b      	neglt	r3, r3
 8009cf2:	f042 0202 	orrlt.w	r2, r2, #2
 8009cf6:	9307      	strge	r3, [sp, #28]
 8009cf8:	9307      	strlt	r3, [sp, #28]
 8009cfa:	bfb8      	it	lt
 8009cfc:	9204      	strlt	r2, [sp, #16]
 8009cfe:	7823      	ldrb	r3, [r4, #0]
 8009d00:	2b2e      	cmp	r3, #46	; 0x2e
 8009d02:	d10c      	bne.n	8009d1e <_vfiprintf_r+0x176>
 8009d04:	7863      	ldrb	r3, [r4, #1]
 8009d06:	2b2a      	cmp	r3, #42	; 0x2a
 8009d08:	d135      	bne.n	8009d76 <_vfiprintf_r+0x1ce>
 8009d0a:	9b03      	ldr	r3, [sp, #12]
 8009d0c:	1d1a      	adds	r2, r3, #4
 8009d0e:	681b      	ldr	r3, [r3, #0]
 8009d10:	9203      	str	r2, [sp, #12]
 8009d12:	2b00      	cmp	r3, #0
 8009d14:	bfb8      	it	lt
 8009d16:	f04f 33ff 	movlt.w	r3, #4294967295
 8009d1a:	3402      	adds	r4, #2
 8009d1c:	9305      	str	r3, [sp, #20]
 8009d1e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009e04 <_vfiprintf_r+0x25c>
 8009d22:	7821      	ldrb	r1, [r4, #0]
 8009d24:	2203      	movs	r2, #3
 8009d26:	4650      	mov	r0, sl
 8009d28:	f7f6 fa72 	bl	8000210 <memchr>
 8009d2c:	b140      	cbz	r0, 8009d40 <_vfiprintf_r+0x198>
 8009d2e:	2340      	movs	r3, #64	; 0x40
 8009d30:	eba0 000a 	sub.w	r0, r0, sl
 8009d34:	fa03 f000 	lsl.w	r0, r3, r0
 8009d38:	9b04      	ldr	r3, [sp, #16]
 8009d3a:	4303      	orrs	r3, r0
 8009d3c:	3401      	adds	r4, #1
 8009d3e:	9304      	str	r3, [sp, #16]
 8009d40:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009d44:	482c      	ldr	r0, [pc, #176]	; (8009df8 <_vfiprintf_r+0x250>)
 8009d46:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009d4a:	2206      	movs	r2, #6
 8009d4c:	f7f6 fa60 	bl	8000210 <memchr>
 8009d50:	2800      	cmp	r0, #0
 8009d52:	d03f      	beq.n	8009dd4 <_vfiprintf_r+0x22c>
 8009d54:	4b29      	ldr	r3, [pc, #164]	; (8009dfc <_vfiprintf_r+0x254>)
 8009d56:	bb1b      	cbnz	r3, 8009da0 <_vfiprintf_r+0x1f8>
 8009d58:	9b03      	ldr	r3, [sp, #12]
 8009d5a:	3307      	adds	r3, #7
 8009d5c:	f023 0307 	bic.w	r3, r3, #7
 8009d60:	3308      	adds	r3, #8
 8009d62:	9303      	str	r3, [sp, #12]
 8009d64:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009d66:	443b      	add	r3, r7
 8009d68:	9309      	str	r3, [sp, #36]	; 0x24
 8009d6a:	e767      	b.n	8009c3c <_vfiprintf_r+0x94>
 8009d6c:	fb0c 3202 	mla	r2, ip, r2, r3
 8009d70:	460c      	mov	r4, r1
 8009d72:	2001      	movs	r0, #1
 8009d74:	e7a5      	b.n	8009cc2 <_vfiprintf_r+0x11a>
 8009d76:	2300      	movs	r3, #0
 8009d78:	3401      	adds	r4, #1
 8009d7a:	9305      	str	r3, [sp, #20]
 8009d7c:	4619      	mov	r1, r3
 8009d7e:	f04f 0c0a 	mov.w	ip, #10
 8009d82:	4620      	mov	r0, r4
 8009d84:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009d88:	3a30      	subs	r2, #48	; 0x30
 8009d8a:	2a09      	cmp	r2, #9
 8009d8c:	d903      	bls.n	8009d96 <_vfiprintf_r+0x1ee>
 8009d8e:	2b00      	cmp	r3, #0
 8009d90:	d0c5      	beq.n	8009d1e <_vfiprintf_r+0x176>
 8009d92:	9105      	str	r1, [sp, #20]
 8009d94:	e7c3      	b.n	8009d1e <_vfiprintf_r+0x176>
 8009d96:	fb0c 2101 	mla	r1, ip, r1, r2
 8009d9a:	4604      	mov	r4, r0
 8009d9c:	2301      	movs	r3, #1
 8009d9e:	e7f0      	b.n	8009d82 <_vfiprintf_r+0x1da>
 8009da0:	ab03      	add	r3, sp, #12
 8009da2:	9300      	str	r3, [sp, #0]
 8009da4:	462a      	mov	r2, r5
 8009da6:	4b16      	ldr	r3, [pc, #88]	; (8009e00 <_vfiprintf_r+0x258>)
 8009da8:	a904      	add	r1, sp, #16
 8009daa:	4630      	mov	r0, r6
 8009dac:	f7fb f9be 	bl	800512c <_printf_float>
 8009db0:	4607      	mov	r7, r0
 8009db2:	1c78      	adds	r0, r7, #1
 8009db4:	d1d6      	bne.n	8009d64 <_vfiprintf_r+0x1bc>
 8009db6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009db8:	07d9      	lsls	r1, r3, #31
 8009dba:	d405      	bmi.n	8009dc8 <_vfiprintf_r+0x220>
 8009dbc:	89ab      	ldrh	r3, [r5, #12]
 8009dbe:	059a      	lsls	r2, r3, #22
 8009dc0:	d402      	bmi.n	8009dc8 <_vfiprintf_r+0x220>
 8009dc2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009dc4:	f7ff fe71 	bl	8009aaa <__retarget_lock_release_recursive>
 8009dc8:	89ab      	ldrh	r3, [r5, #12]
 8009dca:	065b      	lsls	r3, r3, #25
 8009dcc:	f53f af12 	bmi.w	8009bf4 <_vfiprintf_r+0x4c>
 8009dd0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009dd2:	e711      	b.n	8009bf8 <_vfiprintf_r+0x50>
 8009dd4:	ab03      	add	r3, sp, #12
 8009dd6:	9300      	str	r3, [sp, #0]
 8009dd8:	462a      	mov	r2, r5
 8009dda:	4b09      	ldr	r3, [pc, #36]	; (8009e00 <_vfiprintf_r+0x258>)
 8009ddc:	a904      	add	r1, sp, #16
 8009dde:	4630      	mov	r0, r6
 8009de0:	f7fb fc48 	bl	8005674 <_printf_i>
 8009de4:	e7e4      	b.n	8009db0 <_vfiprintf_r+0x208>
 8009de6:	bf00      	nop
 8009de8:	0800bf64 	.word	0x0800bf64
 8009dec:	0800bf84 	.word	0x0800bf84
 8009df0:	0800bf44 	.word	0x0800bf44
 8009df4:	0800bedc 	.word	0x0800bedc
 8009df8:	0800bee6 	.word	0x0800bee6
 8009dfc:	0800512d 	.word	0x0800512d
 8009e00:	08009b85 	.word	0x08009b85
 8009e04:	0800bee2 	.word	0x0800bee2

08009e08 <__swbuf_r>:
 8009e08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e0a:	460e      	mov	r6, r1
 8009e0c:	4614      	mov	r4, r2
 8009e0e:	4605      	mov	r5, r0
 8009e10:	b118      	cbz	r0, 8009e1a <__swbuf_r+0x12>
 8009e12:	6983      	ldr	r3, [r0, #24]
 8009e14:	b90b      	cbnz	r3, 8009e1a <__swbuf_r+0x12>
 8009e16:	f7ff fd97 	bl	8009948 <__sinit>
 8009e1a:	4b21      	ldr	r3, [pc, #132]	; (8009ea0 <__swbuf_r+0x98>)
 8009e1c:	429c      	cmp	r4, r3
 8009e1e:	d12b      	bne.n	8009e78 <__swbuf_r+0x70>
 8009e20:	686c      	ldr	r4, [r5, #4]
 8009e22:	69a3      	ldr	r3, [r4, #24]
 8009e24:	60a3      	str	r3, [r4, #8]
 8009e26:	89a3      	ldrh	r3, [r4, #12]
 8009e28:	071a      	lsls	r2, r3, #28
 8009e2a:	d52f      	bpl.n	8009e8c <__swbuf_r+0x84>
 8009e2c:	6923      	ldr	r3, [r4, #16]
 8009e2e:	b36b      	cbz	r3, 8009e8c <__swbuf_r+0x84>
 8009e30:	6923      	ldr	r3, [r4, #16]
 8009e32:	6820      	ldr	r0, [r4, #0]
 8009e34:	1ac0      	subs	r0, r0, r3
 8009e36:	6963      	ldr	r3, [r4, #20]
 8009e38:	b2f6      	uxtb	r6, r6
 8009e3a:	4283      	cmp	r3, r0
 8009e3c:	4637      	mov	r7, r6
 8009e3e:	dc04      	bgt.n	8009e4a <__swbuf_r+0x42>
 8009e40:	4621      	mov	r1, r4
 8009e42:	4628      	mov	r0, r5
 8009e44:	f7ff fcec 	bl	8009820 <_fflush_r>
 8009e48:	bb30      	cbnz	r0, 8009e98 <__swbuf_r+0x90>
 8009e4a:	68a3      	ldr	r3, [r4, #8]
 8009e4c:	3b01      	subs	r3, #1
 8009e4e:	60a3      	str	r3, [r4, #8]
 8009e50:	6823      	ldr	r3, [r4, #0]
 8009e52:	1c5a      	adds	r2, r3, #1
 8009e54:	6022      	str	r2, [r4, #0]
 8009e56:	701e      	strb	r6, [r3, #0]
 8009e58:	6963      	ldr	r3, [r4, #20]
 8009e5a:	3001      	adds	r0, #1
 8009e5c:	4283      	cmp	r3, r0
 8009e5e:	d004      	beq.n	8009e6a <__swbuf_r+0x62>
 8009e60:	89a3      	ldrh	r3, [r4, #12]
 8009e62:	07db      	lsls	r3, r3, #31
 8009e64:	d506      	bpl.n	8009e74 <__swbuf_r+0x6c>
 8009e66:	2e0a      	cmp	r6, #10
 8009e68:	d104      	bne.n	8009e74 <__swbuf_r+0x6c>
 8009e6a:	4621      	mov	r1, r4
 8009e6c:	4628      	mov	r0, r5
 8009e6e:	f7ff fcd7 	bl	8009820 <_fflush_r>
 8009e72:	b988      	cbnz	r0, 8009e98 <__swbuf_r+0x90>
 8009e74:	4638      	mov	r0, r7
 8009e76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009e78:	4b0a      	ldr	r3, [pc, #40]	; (8009ea4 <__swbuf_r+0x9c>)
 8009e7a:	429c      	cmp	r4, r3
 8009e7c:	d101      	bne.n	8009e82 <__swbuf_r+0x7a>
 8009e7e:	68ac      	ldr	r4, [r5, #8]
 8009e80:	e7cf      	b.n	8009e22 <__swbuf_r+0x1a>
 8009e82:	4b09      	ldr	r3, [pc, #36]	; (8009ea8 <__swbuf_r+0xa0>)
 8009e84:	429c      	cmp	r4, r3
 8009e86:	bf08      	it	eq
 8009e88:	68ec      	ldreq	r4, [r5, #12]
 8009e8a:	e7ca      	b.n	8009e22 <__swbuf_r+0x1a>
 8009e8c:	4621      	mov	r1, r4
 8009e8e:	4628      	mov	r0, r5
 8009e90:	f000 f80c 	bl	8009eac <__swsetup_r>
 8009e94:	2800      	cmp	r0, #0
 8009e96:	d0cb      	beq.n	8009e30 <__swbuf_r+0x28>
 8009e98:	f04f 37ff 	mov.w	r7, #4294967295
 8009e9c:	e7ea      	b.n	8009e74 <__swbuf_r+0x6c>
 8009e9e:	bf00      	nop
 8009ea0:	0800bf64 	.word	0x0800bf64
 8009ea4:	0800bf84 	.word	0x0800bf84
 8009ea8:	0800bf44 	.word	0x0800bf44

08009eac <__swsetup_r>:
 8009eac:	4b32      	ldr	r3, [pc, #200]	; (8009f78 <__swsetup_r+0xcc>)
 8009eae:	b570      	push	{r4, r5, r6, lr}
 8009eb0:	681d      	ldr	r5, [r3, #0]
 8009eb2:	4606      	mov	r6, r0
 8009eb4:	460c      	mov	r4, r1
 8009eb6:	b125      	cbz	r5, 8009ec2 <__swsetup_r+0x16>
 8009eb8:	69ab      	ldr	r3, [r5, #24]
 8009eba:	b913      	cbnz	r3, 8009ec2 <__swsetup_r+0x16>
 8009ebc:	4628      	mov	r0, r5
 8009ebe:	f7ff fd43 	bl	8009948 <__sinit>
 8009ec2:	4b2e      	ldr	r3, [pc, #184]	; (8009f7c <__swsetup_r+0xd0>)
 8009ec4:	429c      	cmp	r4, r3
 8009ec6:	d10f      	bne.n	8009ee8 <__swsetup_r+0x3c>
 8009ec8:	686c      	ldr	r4, [r5, #4]
 8009eca:	89a3      	ldrh	r3, [r4, #12]
 8009ecc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009ed0:	0719      	lsls	r1, r3, #28
 8009ed2:	d42c      	bmi.n	8009f2e <__swsetup_r+0x82>
 8009ed4:	06dd      	lsls	r5, r3, #27
 8009ed6:	d411      	bmi.n	8009efc <__swsetup_r+0x50>
 8009ed8:	2309      	movs	r3, #9
 8009eda:	6033      	str	r3, [r6, #0]
 8009edc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009ee0:	81a3      	strh	r3, [r4, #12]
 8009ee2:	f04f 30ff 	mov.w	r0, #4294967295
 8009ee6:	e03e      	b.n	8009f66 <__swsetup_r+0xba>
 8009ee8:	4b25      	ldr	r3, [pc, #148]	; (8009f80 <__swsetup_r+0xd4>)
 8009eea:	429c      	cmp	r4, r3
 8009eec:	d101      	bne.n	8009ef2 <__swsetup_r+0x46>
 8009eee:	68ac      	ldr	r4, [r5, #8]
 8009ef0:	e7eb      	b.n	8009eca <__swsetup_r+0x1e>
 8009ef2:	4b24      	ldr	r3, [pc, #144]	; (8009f84 <__swsetup_r+0xd8>)
 8009ef4:	429c      	cmp	r4, r3
 8009ef6:	bf08      	it	eq
 8009ef8:	68ec      	ldreq	r4, [r5, #12]
 8009efa:	e7e6      	b.n	8009eca <__swsetup_r+0x1e>
 8009efc:	0758      	lsls	r0, r3, #29
 8009efe:	d512      	bpl.n	8009f26 <__swsetup_r+0x7a>
 8009f00:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009f02:	b141      	cbz	r1, 8009f16 <__swsetup_r+0x6a>
 8009f04:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009f08:	4299      	cmp	r1, r3
 8009f0a:	d002      	beq.n	8009f12 <__swsetup_r+0x66>
 8009f0c:	4630      	mov	r0, r6
 8009f0e:	f7fe fd4f 	bl	80089b0 <_free_r>
 8009f12:	2300      	movs	r3, #0
 8009f14:	6363      	str	r3, [r4, #52]	; 0x34
 8009f16:	89a3      	ldrh	r3, [r4, #12]
 8009f18:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009f1c:	81a3      	strh	r3, [r4, #12]
 8009f1e:	2300      	movs	r3, #0
 8009f20:	6063      	str	r3, [r4, #4]
 8009f22:	6923      	ldr	r3, [r4, #16]
 8009f24:	6023      	str	r3, [r4, #0]
 8009f26:	89a3      	ldrh	r3, [r4, #12]
 8009f28:	f043 0308 	orr.w	r3, r3, #8
 8009f2c:	81a3      	strh	r3, [r4, #12]
 8009f2e:	6923      	ldr	r3, [r4, #16]
 8009f30:	b94b      	cbnz	r3, 8009f46 <__swsetup_r+0x9a>
 8009f32:	89a3      	ldrh	r3, [r4, #12]
 8009f34:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009f38:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009f3c:	d003      	beq.n	8009f46 <__swsetup_r+0x9a>
 8009f3e:	4621      	mov	r1, r4
 8009f40:	4630      	mov	r0, r6
 8009f42:	f000 f84d 	bl	8009fe0 <__smakebuf_r>
 8009f46:	89a0      	ldrh	r0, [r4, #12]
 8009f48:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009f4c:	f010 0301 	ands.w	r3, r0, #1
 8009f50:	d00a      	beq.n	8009f68 <__swsetup_r+0xbc>
 8009f52:	2300      	movs	r3, #0
 8009f54:	60a3      	str	r3, [r4, #8]
 8009f56:	6963      	ldr	r3, [r4, #20]
 8009f58:	425b      	negs	r3, r3
 8009f5a:	61a3      	str	r3, [r4, #24]
 8009f5c:	6923      	ldr	r3, [r4, #16]
 8009f5e:	b943      	cbnz	r3, 8009f72 <__swsetup_r+0xc6>
 8009f60:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009f64:	d1ba      	bne.n	8009edc <__swsetup_r+0x30>
 8009f66:	bd70      	pop	{r4, r5, r6, pc}
 8009f68:	0781      	lsls	r1, r0, #30
 8009f6a:	bf58      	it	pl
 8009f6c:	6963      	ldrpl	r3, [r4, #20]
 8009f6e:	60a3      	str	r3, [r4, #8]
 8009f70:	e7f4      	b.n	8009f5c <__swsetup_r+0xb0>
 8009f72:	2000      	movs	r0, #0
 8009f74:	e7f7      	b.n	8009f66 <__swsetup_r+0xba>
 8009f76:	bf00      	nop
 8009f78:	20000010 	.word	0x20000010
 8009f7c:	0800bf64 	.word	0x0800bf64
 8009f80:	0800bf84 	.word	0x0800bf84
 8009f84:	0800bf44 	.word	0x0800bf44

08009f88 <abort>:
 8009f88:	b508      	push	{r3, lr}
 8009f8a:	2006      	movs	r0, #6
 8009f8c:	f000 f898 	bl	800a0c0 <raise>
 8009f90:	2001      	movs	r0, #1
 8009f92:	f7f8 fade 	bl	8002552 <_exit>

08009f96 <__swhatbuf_r>:
 8009f96:	b570      	push	{r4, r5, r6, lr}
 8009f98:	460e      	mov	r6, r1
 8009f9a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009f9e:	2900      	cmp	r1, #0
 8009fa0:	b096      	sub	sp, #88	; 0x58
 8009fa2:	4614      	mov	r4, r2
 8009fa4:	461d      	mov	r5, r3
 8009fa6:	da08      	bge.n	8009fba <__swhatbuf_r+0x24>
 8009fa8:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8009fac:	2200      	movs	r2, #0
 8009fae:	602a      	str	r2, [r5, #0]
 8009fb0:	061a      	lsls	r2, r3, #24
 8009fb2:	d410      	bmi.n	8009fd6 <__swhatbuf_r+0x40>
 8009fb4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009fb8:	e00e      	b.n	8009fd8 <__swhatbuf_r+0x42>
 8009fba:	466a      	mov	r2, sp
 8009fbc:	f000 f89c 	bl	800a0f8 <_fstat_r>
 8009fc0:	2800      	cmp	r0, #0
 8009fc2:	dbf1      	blt.n	8009fa8 <__swhatbuf_r+0x12>
 8009fc4:	9a01      	ldr	r2, [sp, #4]
 8009fc6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009fca:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009fce:	425a      	negs	r2, r3
 8009fd0:	415a      	adcs	r2, r3
 8009fd2:	602a      	str	r2, [r5, #0]
 8009fd4:	e7ee      	b.n	8009fb4 <__swhatbuf_r+0x1e>
 8009fd6:	2340      	movs	r3, #64	; 0x40
 8009fd8:	2000      	movs	r0, #0
 8009fda:	6023      	str	r3, [r4, #0]
 8009fdc:	b016      	add	sp, #88	; 0x58
 8009fde:	bd70      	pop	{r4, r5, r6, pc}

08009fe0 <__smakebuf_r>:
 8009fe0:	898b      	ldrh	r3, [r1, #12]
 8009fe2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009fe4:	079d      	lsls	r5, r3, #30
 8009fe6:	4606      	mov	r6, r0
 8009fe8:	460c      	mov	r4, r1
 8009fea:	d507      	bpl.n	8009ffc <__smakebuf_r+0x1c>
 8009fec:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009ff0:	6023      	str	r3, [r4, #0]
 8009ff2:	6123      	str	r3, [r4, #16]
 8009ff4:	2301      	movs	r3, #1
 8009ff6:	6163      	str	r3, [r4, #20]
 8009ff8:	b002      	add	sp, #8
 8009ffa:	bd70      	pop	{r4, r5, r6, pc}
 8009ffc:	ab01      	add	r3, sp, #4
 8009ffe:	466a      	mov	r2, sp
 800a000:	f7ff ffc9 	bl	8009f96 <__swhatbuf_r>
 800a004:	9900      	ldr	r1, [sp, #0]
 800a006:	4605      	mov	r5, r0
 800a008:	4630      	mov	r0, r6
 800a00a:	f7fe fd3d 	bl	8008a88 <_malloc_r>
 800a00e:	b948      	cbnz	r0, 800a024 <__smakebuf_r+0x44>
 800a010:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a014:	059a      	lsls	r2, r3, #22
 800a016:	d4ef      	bmi.n	8009ff8 <__smakebuf_r+0x18>
 800a018:	f023 0303 	bic.w	r3, r3, #3
 800a01c:	f043 0302 	orr.w	r3, r3, #2
 800a020:	81a3      	strh	r3, [r4, #12]
 800a022:	e7e3      	b.n	8009fec <__smakebuf_r+0xc>
 800a024:	4b0d      	ldr	r3, [pc, #52]	; (800a05c <__smakebuf_r+0x7c>)
 800a026:	62b3      	str	r3, [r6, #40]	; 0x28
 800a028:	89a3      	ldrh	r3, [r4, #12]
 800a02a:	6020      	str	r0, [r4, #0]
 800a02c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a030:	81a3      	strh	r3, [r4, #12]
 800a032:	9b00      	ldr	r3, [sp, #0]
 800a034:	6163      	str	r3, [r4, #20]
 800a036:	9b01      	ldr	r3, [sp, #4]
 800a038:	6120      	str	r0, [r4, #16]
 800a03a:	b15b      	cbz	r3, 800a054 <__smakebuf_r+0x74>
 800a03c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a040:	4630      	mov	r0, r6
 800a042:	f000 f86b 	bl	800a11c <_isatty_r>
 800a046:	b128      	cbz	r0, 800a054 <__smakebuf_r+0x74>
 800a048:	89a3      	ldrh	r3, [r4, #12]
 800a04a:	f023 0303 	bic.w	r3, r3, #3
 800a04e:	f043 0301 	orr.w	r3, r3, #1
 800a052:	81a3      	strh	r3, [r4, #12]
 800a054:	89a0      	ldrh	r0, [r4, #12]
 800a056:	4305      	orrs	r5, r0
 800a058:	81a5      	strh	r5, [r4, #12]
 800a05a:	e7cd      	b.n	8009ff8 <__smakebuf_r+0x18>
 800a05c:	080098e1 	.word	0x080098e1

0800a060 <_malloc_usable_size_r>:
 800a060:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a064:	1f18      	subs	r0, r3, #4
 800a066:	2b00      	cmp	r3, #0
 800a068:	bfbc      	itt	lt
 800a06a:	580b      	ldrlt	r3, [r1, r0]
 800a06c:	18c0      	addlt	r0, r0, r3
 800a06e:	4770      	bx	lr

0800a070 <_raise_r>:
 800a070:	291f      	cmp	r1, #31
 800a072:	b538      	push	{r3, r4, r5, lr}
 800a074:	4604      	mov	r4, r0
 800a076:	460d      	mov	r5, r1
 800a078:	d904      	bls.n	800a084 <_raise_r+0x14>
 800a07a:	2316      	movs	r3, #22
 800a07c:	6003      	str	r3, [r0, #0]
 800a07e:	f04f 30ff 	mov.w	r0, #4294967295
 800a082:	bd38      	pop	{r3, r4, r5, pc}
 800a084:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800a086:	b112      	cbz	r2, 800a08e <_raise_r+0x1e>
 800a088:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a08c:	b94b      	cbnz	r3, 800a0a2 <_raise_r+0x32>
 800a08e:	4620      	mov	r0, r4
 800a090:	f000 f830 	bl	800a0f4 <_getpid_r>
 800a094:	462a      	mov	r2, r5
 800a096:	4601      	mov	r1, r0
 800a098:	4620      	mov	r0, r4
 800a09a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a09e:	f000 b817 	b.w	800a0d0 <_kill_r>
 800a0a2:	2b01      	cmp	r3, #1
 800a0a4:	d00a      	beq.n	800a0bc <_raise_r+0x4c>
 800a0a6:	1c59      	adds	r1, r3, #1
 800a0a8:	d103      	bne.n	800a0b2 <_raise_r+0x42>
 800a0aa:	2316      	movs	r3, #22
 800a0ac:	6003      	str	r3, [r0, #0]
 800a0ae:	2001      	movs	r0, #1
 800a0b0:	e7e7      	b.n	800a082 <_raise_r+0x12>
 800a0b2:	2400      	movs	r4, #0
 800a0b4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a0b8:	4628      	mov	r0, r5
 800a0ba:	4798      	blx	r3
 800a0bc:	2000      	movs	r0, #0
 800a0be:	e7e0      	b.n	800a082 <_raise_r+0x12>

0800a0c0 <raise>:
 800a0c0:	4b02      	ldr	r3, [pc, #8]	; (800a0cc <raise+0xc>)
 800a0c2:	4601      	mov	r1, r0
 800a0c4:	6818      	ldr	r0, [r3, #0]
 800a0c6:	f7ff bfd3 	b.w	800a070 <_raise_r>
 800a0ca:	bf00      	nop
 800a0cc:	20000010 	.word	0x20000010

0800a0d0 <_kill_r>:
 800a0d0:	b538      	push	{r3, r4, r5, lr}
 800a0d2:	4d07      	ldr	r5, [pc, #28]	; (800a0f0 <_kill_r+0x20>)
 800a0d4:	2300      	movs	r3, #0
 800a0d6:	4604      	mov	r4, r0
 800a0d8:	4608      	mov	r0, r1
 800a0da:	4611      	mov	r1, r2
 800a0dc:	602b      	str	r3, [r5, #0]
 800a0de:	f7f8 fa28 	bl	8002532 <_kill>
 800a0e2:	1c43      	adds	r3, r0, #1
 800a0e4:	d102      	bne.n	800a0ec <_kill_r+0x1c>
 800a0e6:	682b      	ldr	r3, [r5, #0]
 800a0e8:	b103      	cbz	r3, 800a0ec <_kill_r+0x1c>
 800a0ea:	6023      	str	r3, [r4, #0]
 800a0ec:	bd38      	pop	{r3, r4, r5, pc}
 800a0ee:	bf00      	nop
 800a0f0:	20000cb4 	.word	0x20000cb4

0800a0f4 <_getpid_r>:
 800a0f4:	f7f8 ba15 	b.w	8002522 <_getpid>

0800a0f8 <_fstat_r>:
 800a0f8:	b538      	push	{r3, r4, r5, lr}
 800a0fa:	4d07      	ldr	r5, [pc, #28]	; (800a118 <_fstat_r+0x20>)
 800a0fc:	2300      	movs	r3, #0
 800a0fe:	4604      	mov	r4, r0
 800a100:	4608      	mov	r0, r1
 800a102:	4611      	mov	r1, r2
 800a104:	602b      	str	r3, [r5, #0]
 800a106:	f7f8 fa73 	bl	80025f0 <_fstat>
 800a10a:	1c43      	adds	r3, r0, #1
 800a10c:	d102      	bne.n	800a114 <_fstat_r+0x1c>
 800a10e:	682b      	ldr	r3, [r5, #0]
 800a110:	b103      	cbz	r3, 800a114 <_fstat_r+0x1c>
 800a112:	6023      	str	r3, [r4, #0]
 800a114:	bd38      	pop	{r3, r4, r5, pc}
 800a116:	bf00      	nop
 800a118:	20000cb4 	.word	0x20000cb4

0800a11c <_isatty_r>:
 800a11c:	b538      	push	{r3, r4, r5, lr}
 800a11e:	4d06      	ldr	r5, [pc, #24]	; (800a138 <_isatty_r+0x1c>)
 800a120:	2300      	movs	r3, #0
 800a122:	4604      	mov	r4, r0
 800a124:	4608      	mov	r0, r1
 800a126:	602b      	str	r3, [r5, #0]
 800a128:	f7f8 fa72 	bl	8002610 <_isatty>
 800a12c:	1c43      	adds	r3, r0, #1
 800a12e:	d102      	bne.n	800a136 <_isatty_r+0x1a>
 800a130:	682b      	ldr	r3, [r5, #0]
 800a132:	b103      	cbz	r3, 800a136 <_isatty_r+0x1a>
 800a134:	6023      	str	r3, [r4, #0]
 800a136:	bd38      	pop	{r3, r4, r5, pc}
 800a138:	20000cb4 	.word	0x20000cb4
 800a13c:	00000000 	.word	0x00000000

0800a140 <cos>:
 800a140:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a142:	ec53 2b10 	vmov	r2, r3, d0
 800a146:	4826      	ldr	r0, [pc, #152]	; (800a1e0 <cos+0xa0>)
 800a148:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800a14c:	4281      	cmp	r1, r0
 800a14e:	dc06      	bgt.n	800a15e <cos+0x1e>
 800a150:	ed9f 1b21 	vldr	d1, [pc, #132]	; 800a1d8 <cos+0x98>
 800a154:	b005      	add	sp, #20
 800a156:	f85d eb04 	ldr.w	lr, [sp], #4
 800a15a:	f000 bb79 	b.w	800a850 <__kernel_cos>
 800a15e:	4821      	ldr	r0, [pc, #132]	; (800a1e4 <cos+0xa4>)
 800a160:	4281      	cmp	r1, r0
 800a162:	dd09      	ble.n	800a178 <cos+0x38>
 800a164:	ee10 0a10 	vmov	r0, s0
 800a168:	4619      	mov	r1, r3
 800a16a:	f7f6 f8a5 	bl	80002b8 <__aeabi_dsub>
 800a16e:	ec41 0b10 	vmov	d0, r0, r1
 800a172:	b005      	add	sp, #20
 800a174:	f85d fb04 	ldr.w	pc, [sp], #4
 800a178:	4668      	mov	r0, sp
 800a17a:	f000 f95d 	bl	800a438 <__ieee754_rem_pio2>
 800a17e:	f000 0003 	and.w	r0, r0, #3
 800a182:	2801      	cmp	r0, #1
 800a184:	d00b      	beq.n	800a19e <cos+0x5e>
 800a186:	2802      	cmp	r0, #2
 800a188:	d016      	beq.n	800a1b8 <cos+0x78>
 800a18a:	b9e0      	cbnz	r0, 800a1c6 <cos+0x86>
 800a18c:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a190:	ed9d 0b00 	vldr	d0, [sp]
 800a194:	f000 fb5c 	bl	800a850 <__kernel_cos>
 800a198:	ec51 0b10 	vmov	r0, r1, d0
 800a19c:	e7e7      	b.n	800a16e <cos+0x2e>
 800a19e:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a1a2:	ed9d 0b00 	vldr	d0, [sp]
 800a1a6:	f000 ff6b 	bl	800b080 <__kernel_sin>
 800a1aa:	ec53 2b10 	vmov	r2, r3, d0
 800a1ae:	ee10 0a10 	vmov	r0, s0
 800a1b2:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800a1b6:	e7da      	b.n	800a16e <cos+0x2e>
 800a1b8:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a1bc:	ed9d 0b00 	vldr	d0, [sp]
 800a1c0:	f000 fb46 	bl	800a850 <__kernel_cos>
 800a1c4:	e7f1      	b.n	800a1aa <cos+0x6a>
 800a1c6:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a1ca:	ed9d 0b00 	vldr	d0, [sp]
 800a1ce:	2001      	movs	r0, #1
 800a1d0:	f000 ff56 	bl	800b080 <__kernel_sin>
 800a1d4:	e7e0      	b.n	800a198 <cos+0x58>
 800a1d6:	bf00      	nop
	...
 800a1e0:	3fe921fb 	.word	0x3fe921fb
 800a1e4:	7fefffff 	.word	0x7fefffff

0800a1e8 <sin>:
 800a1e8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a1ea:	ec53 2b10 	vmov	r2, r3, d0
 800a1ee:	4828      	ldr	r0, [pc, #160]	; (800a290 <sin+0xa8>)
 800a1f0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800a1f4:	4281      	cmp	r1, r0
 800a1f6:	dc07      	bgt.n	800a208 <sin+0x20>
 800a1f8:	ed9f 1b23 	vldr	d1, [pc, #140]	; 800a288 <sin+0xa0>
 800a1fc:	2000      	movs	r0, #0
 800a1fe:	b005      	add	sp, #20
 800a200:	f85d eb04 	ldr.w	lr, [sp], #4
 800a204:	f000 bf3c 	b.w	800b080 <__kernel_sin>
 800a208:	4822      	ldr	r0, [pc, #136]	; (800a294 <sin+0xac>)
 800a20a:	4281      	cmp	r1, r0
 800a20c:	dd09      	ble.n	800a222 <sin+0x3a>
 800a20e:	ee10 0a10 	vmov	r0, s0
 800a212:	4619      	mov	r1, r3
 800a214:	f7f6 f850 	bl	80002b8 <__aeabi_dsub>
 800a218:	ec41 0b10 	vmov	d0, r0, r1
 800a21c:	b005      	add	sp, #20
 800a21e:	f85d fb04 	ldr.w	pc, [sp], #4
 800a222:	4668      	mov	r0, sp
 800a224:	f000 f908 	bl	800a438 <__ieee754_rem_pio2>
 800a228:	f000 0003 	and.w	r0, r0, #3
 800a22c:	2801      	cmp	r0, #1
 800a22e:	d00c      	beq.n	800a24a <sin+0x62>
 800a230:	2802      	cmp	r0, #2
 800a232:	d011      	beq.n	800a258 <sin+0x70>
 800a234:	b9f0      	cbnz	r0, 800a274 <sin+0x8c>
 800a236:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a23a:	ed9d 0b00 	vldr	d0, [sp]
 800a23e:	2001      	movs	r0, #1
 800a240:	f000 ff1e 	bl	800b080 <__kernel_sin>
 800a244:	ec51 0b10 	vmov	r0, r1, d0
 800a248:	e7e6      	b.n	800a218 <sin+0x30>
 800a24a:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a24e:	ed9d 0b00 	vldr	d0, [sp]
 800a252:	f000 fafd 	bl	800a850 <__kernel_cos>
 800a256:	e7f5      	b.n	800a244 <sin+0x5c>
 800a258:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a25c:	ed9d 0b00 	vldr	d0, [sp]
 800a260:	2001      	movs	r0, #1
 800a262:	f000 ff0d 	bl	800b080 <__kernel_sin>
 800a266:	ec53 2b10 	vmov	r2, r3, d0
 800a26a:	ee10 0a10 	vmov	r0, s0
 800a26e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800a272:	e7d1      	b.n	800a218 <sin+0x30>
 800a274:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a278:	ed9d 0b00 	vldr	d0, [sp]
 800a27c:	f000 fae8 	bl	800a850 <__kernel_cos>
 800a280:	e7f1      	b.n	800a266 <sin+0x7e>
 800a282:	bf00      	nop
 800a284:	f3af 8000 	nop.w
	...
 800a290:	3fe921fb 	.word	0x3fe921fb
 800a294:	7fefffff 	.word	0x7fefffff

0800a298 <atan2>:
 800a298:	f000 b802 	b.w	800a2a0 <__ieee754_atan2>
 800a29c:	0000      	movs	r0, r0
	...

0800a2a0 <__ieee754_atan2>:
 800a2a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a2a4:	ec57 6b11 	vmov	r6, r7, d1
 800a2a8:	4273      	negs	r3, r6
 800a2aa:	f8df e184 	ldr.w	lr, [pc, #388]	; 800a430 <__ieee754_atan2+0x190>
 800a2ae:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 800a2b2:	4333      	orrs	r3, r6
 800a2b4:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800a2b8:	4573      	cmp	r3, lr
 800a2ba:	ec51 0b10 	vmov	r0, r1, d0
 800a2be:	ee11 8a10 	vmov	r8, s2
 800a2c2:	d80a      	bhi.n	800a2da <__ieee754_atan2+0x3a>
 800a2c4:	4244      	negs	r4, r0
 800a2c6:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800a2ca:	4304      	orrs	r4, r0
 800a2cc:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 800a2d0:	4574      	cmp	r4, lr
 800a2d2:	ee10 9a10 	vmov	r9, s0
 800a2d6:	468c      	mov	ip, r1
 800a2d8:	d907      	bls.n	800a2ea <__ieee754_atan2+0x4a>
 800a2da:	4632      	mov	r2, r6
 800a2dc:	463b      	mov	r3, r7
 800a2de:	f7f5 ffed 	bl	80002bc <__adddf3>
 800a2e2:	ec41 0b10 	vmov	d0, r0, r1
 800a2e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a2ea:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 800a2ee:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800a2f2:	4334      	orrs	r4, r6
 800a2f4:	d103      	bne.n	800a2fe <__ieee754_atan2+0x5e>
 800a2f6:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a2fa:	f000 bf81 	b.w	800b200 <atan>
 800a2fe:	17bc      	asrs	r4, r7, #30
 800a300:	f004 0402 	and.w	r4, r4, #2
 800a304:	ea53 0909 	orrs.w	r9, r3, r9
 800a308:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800a30c:	d107      	bne.n	800a31e <__ieee754_atan2+0x7e>
 800a30e:	2c02      	cmp	r4, #2
 800a310:	d060      	beq.n	800a3d4 <__ieee754_atan2+0x134>
 800a312:	2c03      	cmp	r4, #3
 800a314:	d1e5      	bne.n	800a2e2 <__ieee754_atan2+0x42>
 800a316:	a142      	add	r1, pc, #264	; (adr r1, 800a420 <__ieee754_atan2+0x180>)
 800a318:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a31c:	e7e1      	b.n	800a2e2 <__ieee754_atan2+0x42>
 800a31e:	ea52 0808 	orrs.w	r8, r2, r8
 800a322:	d106      	bne.n	800a332 <__ieee754_atan2+0x92>
 800a324:	f1bc 0f00 	cmp.w	ip, #0
 800a328:	da5f      	bge.n	800a3ea <__ieee754_atan2+0x14a>
 800a32a:	a13f      	add	r1, pc, #252	; (adr r1, 800a428 <__ieee754_atan2+0x188>)
 800a32c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a330:	e7d7      	b.n	800a2e2 <__ieee754_atan2+0x42>
 800a332:	4572      	cmp	r2, lr
 800a334:	d10f      	bne.n	800a356 <__ieee754_atan2+0xb6>
 800a336:	4293      	cmp	r3, r2
 800a338:	f104 34ff 	add.w	r4, r4, #4294967295
 800a33c:	d107      	bne.n	800a34e <__ieee754_atan2+0xae>
 800a33e:	2c02      	cmp	r4, #2
 800a340:	d84c      	bhi.n	800a3dc <__ieee754_atan2+0x13c>
 800a342:	4b35      	ldr	r3, [pc, #212]	; (800a418 <__ieee754_atan2+0x178>)
 800a344:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 800a348:	e9d4 0100 	ldrd	r0, r1, [r4]
 800a34c:	e7c9      	b.n	800a2e2 <__ieee754_atan2+0x42>
 800a34e:	2c02      	cmp	r4, #2
 800a350:	d848      	bhi.n	800a3e4 <__ieee754_atan2+0x144>
 800a352:	4b32      	ldr	r3, [pc, #200]	; (800a41c <__ieee754_atan2+0x17c>)
 800a354:	e7f6      	b.n	800a344 <__ieee754_atan2+0xa4>
 800a356:	4573      	cmp	r3, lr
 800a358:	d0e4      	beq.n	800a324 <__ieee754_atan2+0x84>
 800a35a:	1a9b      	subs	r3, r3, r2
 800a35c:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 800a360:	ea4f 5223 	mov.w	r2, r3, asr #20
 800a364:	da1e      	bge.n	800a3a4 <__ieee754_atan2+0x104>
 800a366:	2f00      	cmp	r7, #0
 800a368:	da01      	bge.n	800a36e <__ieee754_atan2+0xce>
 800a36a:	323c      	adds	r2, #60	; 0x3c
 800a36c:	db1e      	blt.n	800a3ac <__ieee754_atan2+0x10c>
 800a36e:	4632      	mov	r2, r6
 800a370:	463b      	mov	r3, r7
 800a372:	f7f6 fa83 	bl	800087c <__aeabi_ddiv>
 800a376:	ec41 0b10 	vmov	d0, r0, r1
 800a37a:	f001 f8e1 	bl	800b540 <fabs>
 800a37e:	f000 ff3f 	bl	800b200 <atan>
 800a382:	ec51 0b10 	vmov	r0, r1, d0
 800a386:	2c01      	cmp	r4, #1
 800a388:	d013      	beq.n	800a3b2 <__ieee754_atan2+0x112>
 800a38a:	2c02      	cmp	r4, #2
 800a38c:	d015      	beq.n	800a3ba <__ieee754_atan2+0x11a>
 800a38e:	2c00      	cmp	r4, #0
 800a390:	d0a7      	beq.n	800a2e2 <__ieee754_atan2+0x42>
 800a392:	a319      	add	r3, pc, #100	; (adr r3, 800a3f8 <__ieee754_atan2+0x158>)
 800a394:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a398:	f7f5 ff8e 	bl	80002b8 <__aeabi_dsub>
 800a39c:	a318      	add	r3, pc, #96	; (adr r3, 800a400 <__ieee754_atan2+0x160>)
 800a39e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3a2:	e014      	b.n	800a3ce <__ieee754_atan2+0x12e>
 800a3a4:	a118      	add	r1, pc, #96	; (adr r1, 800a408 <__ieee754_atan2+0x168>)
 800a3a6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a3aa:	e7ec      	b.n	800a386 <__ieee754_atan2+0xe6>
 800a3ac:	2000      	movs	r0, #0
 800a3ae:	2100      	movs	r1, #0
 800a3b0:	e7e9      	b.n	800a386 <__ieee754_atan2+0xe6>
 800a3b2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a3b6:	4619      	mov	r1, r3
 800a3b8:	e793      	b.n	800a2e2 <__ieee754_atan2+0x42>
 800a3ba:	a30f      	add	r3, pc, #60	; (adr r3, 800a3f8 <__ieee754_atan2+0x158>)
 800a3bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3c0:	f7f5 ff7a 	bl	80002b8 <__aeabi_dsub>
 800a3c4:	4602      	mov	r2, r0
 800a3c6:	460b      	mov	r3, r1
 800a3c8:	a10d      	add	r1, pc, #52	; (adr r1, 800a400 <__ieee754_atan2+0x160>)
 800a3ca:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a3ce:	f7f5 ff73 	bl	80002b8 <__aeabi_dsub>
 800a3d2:	e786      	b.n	800a2e2 <__ieee754_atan2+0x42>
 800a3d4:	a10a      	add	r1, pc, #40	; (adr r1, 800a400 <__ieee754_atan2+0x160>)
 800a3d6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a3da:	e782      	b.n	800a2e2 <__ieee754_atan2+0x42>
 800a3dc:	a10c      	add	r1, pc, #48	; (adr r1, 800a410 <__ieee754_atan2+0x170>)
 800a3de:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a3e2:	e77e      	b.n	800a2e2 <__ieee754_atan2+0x42>
 800a3e4:	2000      	movs	r0, #0
 800a3e6:	2100      	movs	r1, #0
 800a3e8:	e77b      	b.n	800a2e2 <__ieee754_atan2+0x42>
 800a3ea:	a107      	add	r1, pc, #28	; (adr r1, 800a408 <__ieee754_atan2+0x168>)
 800a3ec:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a3f0:	e777      	b.n	800a2e2 <__ieee754_atan2+0x42>
 800a3f2:	bf00      	nop
 800a3f4:	f3af 8000 	nop.w
 800a3f8:	33145c07 	.word	0x33145c07
 800a3fc:	3ca1a626 	.word	0x3ca1a626
 800a400:	54442d18 	.word	0x54442d18
 800a404:	400921fb 	.word	0x400921fb
 800a408:	54442d18 	.word	0x54442d18
 800a40c:	3ff921fb 	.word	0x3ff921fb
 800a410:	54442d18 	.word	0x54442d18
 800a414:	3fe921fb 	.word	0x3fe921fb
 800a418:	0800bfa8 	.word	0x0800bfa8
 800a41c:	0800bfc0 	.word	0x0800bfc0
 800a420:	54442d18 	.word	0x54442d18
 800a424:	c00921fb 	.word	0xc00921fb
 800a428:	54442d18 	.word	0x54442d18
 800a42c:	bff921fb 	.word	0xbff921fb
 800a430:	7ff00000 	.word	0x7ff00000
 800a434:	00000000 	.word	0x00000000

0800a438 <__ieee754_rem_pio2>:
 800a438:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a43c:	ed2d 8b02 	vpush	{d8}
 800a440:	ec55 4b10 	vmov	r4, r5, d0
 800a444:	4bca      	ldr	r3, [pc, #808]	; (800a770 <__ieee754_rem_pio2+0x338>)
 800a446:	b08b      	sub	sp, #44	; 0x2c
 800a448:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800a44c:	4598      	cmp	r8, r3
 800a44e:	4682      	mov	sl, r0
 800a450:	9502      	str	r5, [sp, #8]
 800a452:	dc08      	bgt.n	800a466 <__ieee754_rem_pio2+0x2e>
 800a454:	2200      	movs	r2, #0
 800a456:	2300      	movs	r3, #0
 800a458:	ed80 0b00 	vstr	d0, [r0]
 800a45c:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800a460:	f04f 0b00 	mov.w	fp, #0
 800a464:	e028      	b.n	800a4b8 <__ieee754_rem_pio2+0x80>
 800a466:	4bc3      	ldr	r3, [pc, #780]	; (800a774 <__ieee754_rem_pio2+0x33c>)
 800a468:	4598      	cmp	r8, r3
 800a46a:	dc78      	bgt.n	800a55e <__ieee754_rem_pio2+0x126>
 800a46c:	9b02      	ldr	r3, [sp, #8]
 800a46e:	4ec2      	ldr	r6, [pc, #776]	; (800a778 <__ieee754_rem_pio2+0x340>)
 800a470:	2b00      	cmp	r3, #0
 800a472:	ee10 0a10 	vmov	r0, s0
 800a476:	a3b0      	add	r3, pc, #704	; (adr r3, 800a738 <__ieee754_rem_pio2+0x300>)
 800a478:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a47c:	4629      	mov	r1, r5
 800a47e:	dd39      	ble.n	800a4f4 <__ieee754_rem_pio2+0xbc>
 800a480:	f7f5 ff1a 	bl	80002b8 <__aeabi_dsub>
 800a484:	45b0      	cmp	r8, r6
 800a486:	4604      	mov	r4, r0
 800a488:	460d      	mov	r5, r1
 800a48a:	d01b      	beq.n	800a4c4 <__ieee754_rem_pio2+0x8c>
 800a48c:	a3ac      	add	r3, pc, #688	; (adr r3, 800a740 <__ieee754_rem_pio2+0x308>)
 800a48e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a492:	f7f5 ff11 	bl	80002b8 <__aeabi_dsub>
 800a496:	4602      	mov	r2, r0
 800a498:	460b      	mov	r3, r1
 800a49a:	e9ca 2300 	strd	r2, r3, [sl]
 800a49e:	4620      	mov	r0, r4
 800a4a0:	4629      	mov	r1, r5
 800a4a2:	f7f5 ff09 	bl	80002b8 <__aeabi_dsub>
 800a4a6:	a3a6      	add	r3, pc, #664	; (adr r3, 800a740 <__ieee754_rem_pio2+0x308>)
 800a4a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4ac:	f7f5 ff04 	bl	80002b8 <__aeabi_dsub>
 800a4b0:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800a4b4:	f04f 0b01 	mov.w	fp, #1
 800a4b8:	4658      	mov	r0, fp
 800a4ba:	b00b      	add	sp, #44	; 0x2c
 800a4bc:	ecbd 8b02 	vpop	{d8}
 800a4c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a4c4:	a3a0      	add	r3, pc, #640	; (adr r3, 800a748 <__ieee754_rem_pio2+0x310>)
 800a4c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4ca:	f7f5 fef5 	bl	80002b8 <__aeabi_dsub>
 800a4ce:	a3a0      	add	r3, pc, #640	; (adr r3, 800a750 <__ieee754_rem_pio2+0x318>)
 800a4d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4d4:	4604      	mov	r4, r0
 800a4d6:	460d      	mov	r5, r1
 800a4d8:	f7f5 feee 	bl	80002b8 <__aeabi_dsub>
 800a4dc:	4602      	mov	r2, r0
 800a4de:	460b      	mov	r3, r1
 800a4e0:	e9ca 2300 	strd	r2, r3, [sl]
 800a4e4:	4620      	mov	r0, r4
 800a4e6:	4629      	mov	r1, r5
 800a4e8:	f7f5 fee6 	bl	80002b8 <__aeabi_dsub>
 800a4ec:	a398      	add	r3, pc, #608	; (adr r3, 800a750 <__ieee754_rem_pio2+0x318>)
 800a4ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4f2:	e7db      	b.n	800a4ac <__ieee754_rem_pio2+0x74>
 800a4f4:	f7f5 fee2 	bl	80002bc <__adddf3>
 800a4f8:	45b0      	cmp	r8, r6
 800a4fa:	4604      	mov	r4, r0
 800a4fc:	460d      	mov	r5, r1
 800a4fe:	d016      	beq.n	800a52e <__ieee754_rem_pio2+0xf6>
 800a500:	a38f      	add	r3, pc, #572	; (adr r3, 800a740 <__ieee754_rem_pio2+0x308>)
 800a502:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a506:	f7f5 fed9 	bl	80002bc <__adddf3>
 800a50a:	4602      	mov	r2, r0
 800a50c:	460b      	mov	r3, r1
 800a50e:	e9ca 2300 	strd	r2, r3, [sl]
 800a512:	4620      	mov	r0, r4
 800a514:	4629      	mov	r1, r5
 800a516:	f7f5 fecf 	bl	80002b8 <__aeabi_dsub>
 800a51a:	a389      	add	r3, pc, #548	; (adr r3, 800a740 <__ieee754_rem_pio2+0x308>)
 800a51c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a520:	f7f5 fecc 	bl	80002bc <__adddf3>
 800a524:	f04f 3bff 	mov.w	fp, #4294967295
 800a528:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800a52c:	e7c4      	b.n	800a4b8 <__ieee754_rem_pio2+0x80>
 800a52e:	a386      	add	r3, pc, #536	; (adr r3, 800a748 <__ieee754_rem_pio2+0x310>)
 800a530:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a534:	f7f5 fec2 	bl	80002bc <__adddf3>
 800a538:	a385      	add	r3, pc, #532	; (adr r3, 800a750 <__ieee754_rem_pio2+0x318>)
 800a53a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a53e:	4604      	mov	r4, r0
 800a540:	460d      	mov	r5, r1
 800a542:	f7f5 febb 	bl	80002bc <__adddf3>
 800a546:	4602      	mov	r2, r0
 800a548:	460b      	mov	r3, r1
 800a54a:	e9ca 2300 	strd	r2, r3, [sl]
 800a54e:	4620      	mov	r0, r4
 800a550:	4629      	mov	r1, r5
 800a552:	f7f5 feb1 	bl	80002b8 <__aeabi_dsub>
 800a556:	a37e      	add	r3, pc, #504	; (adr r3, 800a750 <__ieee754_rem_pio2+0x318>)
 800a558:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a55c:	e7e0      	b.n	800a520 <__ieee754_rem_pio2+0xe8>
 800a55e:	4b87      	ldr	r3, [pc, #540]	; (800a77c <__ieee754_rem_pio2+0x344>)
 800a560:	4598      	cmp	r8, r3
 800a562:	f300 80d9 	bgt.w	800a718 <__ieee754_rem_pio2+0x2e0>
 800a566:	f000 ffeb 	bl	800b540 <fabs>
 800a56a:	ec55 4b10 	vmov	r4, r5, d0
 800a56e:	ee10 0a10 	vmov	r0, s0
 800a572:	a379      	add	r3, pc, #484	; (adr r3, 800a758 <__ieee754_rem_pio2+0x320>)
 800a574:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a578:	4629      	mov	r1, r5
 800a57a:	f7f6 f855 	bl	8000628 <__aeabi_dmul>
 800a57e:	4b80      	ldr	r3, [pc, #512]	; (800a780 <__ieee754_rem_pio2+0x348>)
 800a580:	2200      	movs	r2, #0
 800a582:	f7f5 fe9b 	bl	80002bc <__adddf3>
 800a586:	f7f6 faff 	bl	8000b88 <__aeabi_d2iz>
 800a58a:	4683      	mov	fp, r0
 800a58c:	f7f5 ffe2 	bl	8000554 <__aeabi_i2d>
 800a590:	4602      	mov	r2, r0
 800a592:	460b      	mov	r3, r1
 800a594:	ec43 2b18 	vmov	d8, r2, r3
 800a598:	a367      	add	r3, pc, #412	; (adr r3, 800a738 <__ieee754_rem_pio2+0x300>)
 800a59a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a59e:	f7f6 f843 	bl	8000628 <__aeabi_dmul>
 800a5a2:	4602      	mov	r2, r0
 800a5a4:	460b      	mov	r3, r1
 800a5a6:	4620      	mov	r0, r4
 800a5a8:	4629      	mov	r1, r5
 800a5aa:	f7f5 fe85 	bl	80002b8 <__aeabi_dsub>
 800a5ae:	a364      	add	r3, pc, #400	; (adr r3, 800a740 <__ieee754_rem_pio2+0x308>)
 800a5b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5b4:	4606      	mov	r6, r0
 800a5b6:	460f      	mov	r7, r1
 800a5b8:	ec51 0b18 	vmov	r0, r1, d8
 800a5bc:	f7f6 f834 	bl	8000628 <__aeabi_dmul>
 800a5c0:	f1bb 0f1f 	cmp.w	fp, #31
 800a5c4:	4604      	mov	r4, r0
 800a5c6:	460d      	mov	r5, r1
 800a5c8:	dc0d      	bgt.n	800a5e6 <__ieee754_rem_pio2+0x1ae>
 800a5ca:	4b6e      	ldr	r3, [pc, #440]	; (800a784 <__ieee754_rem_pio2+0x34c>)
 800a5cc:	f10b 32ff 	add.w	r2, fp, #4294967295
 800a5d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a5d4:	4543      	cmp	r3, r8
 800a5d6:	d006      	beq.n	800a5e6 <__ieee754_rem_pio2+0x1ae>
 800a5d8:	4622      	mov	r2, r4
 800a5da:	462b      	mov	r3, r5
 800a5dc:	4630      	mov	r0, r6
 800a5de:	4639      	mov	r1, r7
 800a5e0:	f7f5 fe6a 	bl	80002b8 <__aeabi_dsub>
 800a5e4:	e00f      	b.n	800a606 <__ieee754_rem_pio2+0x1ce>
 800a5e6:	462b      	mov	r3, r5
 800a5e8:	4622      	mov	r2, r4
 800a5ea:	4630      	mov	r0, r6
 800a5ec:	4639      	mov	r1, r7
 800a5ee:	f7f5 fe63 	bl	80002b8 <__aeabi_dsub>
 800a5f2:	ea4f 5328 	mov.w	r3, r8, asr #20
 800a5f6:	9303      	str	r3, [sp, #12]
 800a5f8:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800a5fc:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 800a600:	f1b8 0f10 	cmp.w	r8, #16
 800a604:	dc02      	bgt.n	800a60c <__ieee754_rem_pio2+0x1d4>
 800a606:	e9ca 0100 	strd	r0, r1, [sl]
 800a60a:	e039      	b.n	800a680 <__ieee754_rem_pio2+0x248>
 800a60c:	a34e      	add	r3, pc, #312	; (adr r3, 800a748 <__ieee754_rem_pio2+0x310>)
 800a60e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a612:	ec51 0b18 	vmov	r0, r1, d8
 800a616:	f7f6 f807 	bl	8000628 <__aeabi_dmul>
 800a61a:	4604      	mov	r4, r0
 800a61c:	460d      	mov	r5, r1
 800a61e:	4602      	mov	r2, r0
 800a620:	460b      	mov	r3, r1
 800a622:	4630      	mov	r0, r6
 800a624:	4639      	mov	r1, r7
 800a626:	f7f5 fe47 	bl	80002b8 <__aeabi_dsub>
 800a62a:	4602      	mov	r2, r0
 800a62c:	460b      	mov	r3, r1
 800a62e:	4680      	mov	r8, r0
 800a630:	4689      	mov	r9, r1
 800a632:	4630      	mov	r0, r6
 800a634:	4639      	mov	r1, r7
 800a636:	f7f5 fe3f 	bl	80002b8 <__aeabi_dsub>
 800a63a:	4622      	mov	r2, r4
 800a63c:	462b      	mov	r3, r5
 800a63e:	f7f5 fe3b 	bl	80002b8 <__aeabi_dsub>
 800a642:	a343      	add	r3, pc, #268	; (adr r3, 800a750 <__ieee754_rem_pio2+0x318>)
 800a644:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a648:	4604      	mov	r4, r0
 800a64a:	460d      	mov	r5, r1
 800a64c:	ec51 0b18 	vmov	r0, r1, d8
 800a650:	f7f5 ffea 	bl	8000628 <__aeabi_dmul>
 800a654:	4622      	mov	r2, r4
 800a656:	462b      	mov	r3, r5
 800a658:	f7f5 fe2e 	bl	80002b8 <__aeabi_dsub>
 800a65c:	4602      	mov	r2, r0
 800a65e:	460b      	mov	r3, r1
 800a660:	4604      	mov	r4, r0
 800a662:	460d      	mov	r5, r1
 800a664:	4640      	mov	r0, r8
 800a666:	4649      	mov	r1, r9
 800a668:	f7f5 fe26 	bl	80002b8 <__aeabi_dsub>
 800a66c:	9a03      	ldr	r2, [sp, #12]
 800a66e:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800a672:	1ad3      	subs	r3, r2, r3
 800a674:	2b31      	cmp	r3, #49	; 0x31
 800a676:	dc24      	bgt.n	800a6c2 <__ieee754_rem_pio2+0x28a>
 800a678:	e9ca 0100 	strd	r0, r1, [sl]
 800a67c:	4646      	mov	r6, r8
 800a67e:	464f      	mov	r7, r9
 800a680:	e9da 8900 	ldrd	r8, r9, [sl]
 800a684:	4630      	mov	r0, r6
 800a686:	4642      	mov	r2, r8
 800a688:	464b      	mov	r3, r9
 800a68a:	4639      	mov	r1, r7
 800a68c:	f7f5 fe14 	bl	80002b8 <__aeabi_dsub>
 800a690:	462b      	mov	r3, r5
 800a692:	4622      	mov	r2, r4
 800a694:	f7f5 fe10 	bl	80002b8 <__aeabi_dsub>
 800a698:	9b02      	ldr	r3, [sp, #8]
 800a69a:	2b00      	cmp	r3, #0
 800a69c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800a6a0:	f6bf af0a 	bge.w	800a4b8 <__ieee754_rem_pio2+0x80>
 800a6a4:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800a6a8:	f8ca 3004 	str.w	r3, [sl, #4]
 800a6ac:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a6b0:	f8ca 8000 	str.w	r8, [sl]
 800a6b4:	f8ca 0008 	str.w	r0, [sl, #8]
 800a6b8:	f8ca 300c 	str.w	r3, [sl, #12]
 800a6bc:	f1cb 0b00 	rsb	fp, fp, #0
 800a6c0:	e6fa      	b.n	800a4b8 <__ieee754_rem_pio2+0x80>
 800a6c2:	a327      	add	r3, pc, #156	; (adr r3, 800a760 <__ieee754_rem_pio2+0x328>)
 800a6c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6c8:	ec51 0b18 	vmov	r0, r1, d8
 800a6cc:	f7f5 ffac 	bl	8000628 <__aeabi_dmul>
 800a6d0:	4604      	mov	r4, r0
 800a6d2:	460d      	mov	r5, r1
 800a6d4:	4602      	mov	r2, r0
 800a6d6:	460b      	mov	r3, r1
 800a6d8:	4640      	mov	r0, r8
 800a6da:	4649      	mov	r1, r9
 800a6dc:	f7f5 fdec 	bl	80002b8 <__aeabi_dsub>
 800a6e0:	4602      	mov	r2, r0
 800a6e2:	460b      	mov	r3, r1
 800a6e4:	4606      	mov	r6, r0
 800a6e6:	460f      	mov	r7, r1
 800a6e8:	4640      	mov	r0, r8
 800a6ea:	4649      	mov	r1, r9
 800a6ec:	f7f5 fde4 	bl	80002b8 <__aeabi_dsub>
 800a6f0:	4622      	mov	r2, r4
 800a6f2:	462b      	mov	r3, r5
 800a6f4:	f7f5 fde0 	bl	80002b8 <__aeabi_dsub>
 800a6f8:	a31b      	add	r3, pc, #108	; (adr r3, 800a768 <__ieee754_rem_pio2+0x330>)
 800a6fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6fe:	4604      	mov	r4, r0
 800a700:	460d      	mov	r5, r1
 800a702:	ec51 0b18 	vmov	r0, r1, d8
 800a706:	f7f5 ff8f 	bl	8000628 <__aeabi_dmul>
 800a70a:	4622      	mov	r2, r4
 800a70c:	462b      	mov	r3, r5
 800a70e:	f7f5 fdd3 	bl	80002b8 <__aeabi_dsub>
 800a712:	4604      	mov	r4, r0
 800a714:	460d      	mov	r5, r1
 800a716:	e75f      	b.n	800a5d8 <__ieee754_rem_pio2+0x1a0>
 800a718:	4b1b      	ldr	r3, [pc, #108]	; (800a788 <__ieee754_rem_pio2+0x350>)
 800a71a:	4598      	cmp	r8, r3
 800a71c:	dd36      	ble.n	800a78c <__ieee754_rem_pio2+0x354>
 800a71e:	ee10 2a10 	vmov	r2, s0
 800a722:	462b      	mov	r3, r5
 800a724:	4620      	mov	r0, r4
 800a726:	4629      	mov	r1, r5
 800a728:	f7f5 fdc6 	bl	80002b8 <__aeabi_dsub>
 800a72c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800a730:	e9ca 0100 	strd	r0, r1, [sl]
 800a734:	e694      	b.n	800a460 <__ieee754_rem_pio2+0x28>
 800a736:	bf00      	nop
 800a738:	54400000 	.word	0x54400000
 800a73c:	3ff921fb 	.word	0x3ff921fb
 800a740:	1a626331 	.word	0x1a626331
 800a744:	3dd0b461 	.word	0x3dd0b461
 800a748:	1a600000 	.word	0x1a600000
 800a74c:	3dd0b461 	.word	0x3dd0b461
 800a750:	2e037073 	.word	0x2e037073
 800a754:	3ba3198a 	.word	0x3ba3198a
 800a758:	6dc9c883 	.word	0x6dc9c883
 800a75c:	3fe45f30 	.word	0x3fe45f30
 800a760:	2e000000 	.word	0x2e000000
 800a764:	3ba3198a 	.word	0x3ba3198a
 800a768:	252049c1 	.word	0x252049c1
 800a76c:	397b839a 	.word	0x397b839a
 800a770:	3fe921fb 	.word	0x3fe921fb
 800a774:	4002d97b 	.word	0x4002d97b
 800a778:	3ff921fb 	.word	0x3ff921fb
 800a77c:	413921fb 	.word	0x413921fb
 800a780:	3fe00000 	.word	0x3fe00000
 800a784:	0800bfd8 	.word	0x0800bfd8
 800a788:	7fefffff 	.word	0x7fefffff
 800a78c:	ea4f 5428 	mov.w	r4, r8, asr #20
 800a790:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 800a794:	ee10 0a10 	vmov	r0, s0
 800a798:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 800a79c:	ee10 6a10 	vmov	r6, s0
 800a7a0:	460f      	mov	r7, r1
 800a7a2:	f7f6 f9f1 	bl	8000b88 <__aeabi_d2iz>
 800a7a6:	f7f5 fed5 	bl	8000554 <__aeabi_i2d>
 800a7aa:	4602      	mov	r2, r0
 800a7ac:	460b      	mov	r3, r1
 800a7ae:	4630      	mov	r0, r6
 800a7b0:	4639      	mov	r1, r7
 800a7b2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800a7b6:	f7f5 fd7f 	bl	80002b8 <__aeabi_dsub>
 800a7ba:	4b23      	ldr	r3, [pc, #140]	; (800a848 <__ieee754_rem_pio2+0x410>)
 800a7bc:	2200      	movs	r2, #0
 800a7be:	f7f5 ff33 	bl	8000628 <__aeabi_dmul>
 800a7c2:	460f      	mov	r7, r1
 800a7c4:	4606      	mov	r6, r0
 800a7c6:	f7f6 f9df 	bl	8000b88 <__aeabi_d2iz>
 800a7ca:	f7f5 fec3 	bl	8000554 <__aeabi_i2d>
 800a7ce:	4602      	mov	r2, r0
 800a7d0:	460b      	mov	r3, r1
 800a7d2:	4630      	mov	r0, r6
 800a7d4:	4639      	mov	r1, r7
 800a7d6:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800a7da:	f7f5 fd6d 	bl	80002b8 <__aeabi_dsub>
 800a7de:	4b1a      	ldr	r3, [pc, #104]	; (800a848 <__ieee754_rem_pio2+0x410>)
 800a7e0:	2200      	movs	r2, #0
 800a7e2:	f7f5 ff21 	bl	8000628 <__aeabi_dmul>
 800a7e6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800a7ea:	ad04      	add	r5, sp, #16
 800a7ec:	f04f 0803 	mov.w	r8, #3
 800a7f0:	46a9      	mov	r9, r5
 800a7f2:	2600      	movs	r6, #0
 800a7f4:	2700      	movs	r7, #0
 800a7f6:	4632      	mov	r2, r6
 800a7f8:	463b      	mov	r3, r7
 800a7fa:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 800a7fe:	46c3      	mov	fp, r8
 800a800:	3d08      	subs	r5, #8
 800a802:	f108 38ff 	add.w	r8, r8, #4294967295
 800a806:	f7f6 f977 	bl	8000af8 <__aeabi_dcmpeq>
 800a80a:	2800      	cmp	r0, #0
 800a80c:	d1f3      	bne.n	800a7f6 <__ieee754_rem_pio2+0x3be>
 800a80e:	4b0f      	ldr	r3, [pc, #60]	; (800a84c <__ieee754_rem_pio2+0x414>)
 800a810:	9301      	str	r3, [sp, #4]
 800a812:	2302      	movs	r3, #2
 800a814:	9300      	str	r3, [sp, #0]
 800a816:	4622      	mov	r2, r4
 800a818:	465b      	mov	r3, fp
 800a81a:	4651      	mov	r1, sl
 800a81c:	4648      	mov	r0, r9
 800a81e:	f000 f8df 	bl	800a9e0 <__kernel_rem_pio2>
 800a822:	9b02      	ldr	r3, [sp, #8]
 800a824:	2b00      	cmp	r3, #0
 800a826:	4683      	mov	fp, r0
 800a828:	f6bf ae46 	bge.w	800a4b8 <__ieee754_rem_pio2+0x80>
 800a82c:	e9da 2100 	ldrd	r2, r1, [sl]
 800a830:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a834:	e9ca 2300 	strd	r2, r3, [sl]
 800a838:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 800a83c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a840:	e9ca 2302 	strd	r2, r3, [sl, #8]
 800a844:	e73a      	b.n	800a6bc <__ieee754_rem_pio2+0x284>
 800a846:	bf00      	nop
 800a848:	41700000 	.word	0x41700000
 800a84c:	0800c058 	.word	0x0800c058

0800a850 <__kernel_cos>:
 800a850:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a854:	ec57 6b10 	vmov	r6, r7, d0
 800a858:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800a85c:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 800a860:	ed8d 1b00 	vstr	d1, [sp]
 800a864:	da07      	bge.n	800a876 <__kernel_cos+0x26>
 800a866:	ee10 0a10 	vmov	r0, s0
 800a86a:	4639      	mov	r1, r7
 800a86c:	f7f6 f98c 	bl	8000b88 <__aeabi_d2iz>
 800a870:	2800      	cmp	r0, #0
 800a872:	f000 8088 	beq.w	800a986 <__kernel_cos+0x136>
 800a876:	4632      	mov	r2, r6
 800a878:	463b      	mov	r3, r7
 800a87a:	4630      	mov	r0, r6
 800a87c:	4639      	mov	r1, r7
 800a87e:	f7f5 fed3 	bl	8000628 <__aeabi_dmul>
 800a882:	4b51      	ldr	r3, [pc, #324]	; (800a9c8 <__kernel_cos+0x178>)
 800a884:	2200      	movs	r2, #0
 800a886:	4604      	mov	r4, r0
 800a888:	460d      	mov	r5, r1
 800a88a:	f7f5 fecd 	bl	8000628 <__aeabi_dmul>
 800a88e:	a340      	add	r3, pc, #256	; (adr r3, 800a990 <__kernel_cos+0x140>)
 800a890:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a894:	4682      	mov	sl, r0
 800a896:	468b      	mov	fp, r1
 800a898:	4620      	mov	r0, r4
 800a89a:	4629      	mov	r1, r5
 800a89c:	f7f5 fec4 	bl	8000628 <__aeabi_dmul>
 800a8a0:	a33d      	add	r3, pc, #244	; (adr r3, 800a998 <__kernel_cos+0x148>)
 800a8a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8a6:	f7f5 fd09 	bl	80002bc <__adddf3>
 800a8aa:	4622      	mov	r2, r4
 800a8ac:	462b      	mov	r3, r5
 800a8ae:	f7f5 febb 	bl	8000628 <__aeabi_dmul>
 800a8b2:	a33b      	add	r3, pc, #236	; (adr r3, 800a9a0 <__kernel_cos+0x150>)
 800a8b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8b8:	f7f5 fcfe 	bl	80002b8 <__aeabi_dsub>
 800a8bc:	4622      	mov	r2, r4
 800a8be:	462b      	mov	r3, r5
 800a8c0:	f7f5 feb2 	bl	8000628 <__aeabi_dmul>
 800a8c4:	a338      	add	r3, pc, #224	; (adr r3, 800a9a8 <__kernel_cos+0x158>)
 800a8c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8ca:	f7f5 fcf7 	bl	80002bc <__adddf3>
 800a8ce:	4622      	mov	r2, r4
 800a8d0:	462b      	mov	r3, r5
 800a8d2:	f7f5 fea9 	bl	8000628 <__aeabi_dmul>
 800a8d6:	a336      	add	r3, pc, #216	; (adr r3, 800a9b0 <__kernel_cos+0x160>)
 800a8d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8dc:	f7f5 fcec 	bl	80002b8 <__aeabi_dsub>
 800a8e0:	4622      	mov	r2, r4
 800a8e2:	462b      	mov	r3, r5
 800a8e4:	f7f5 fea0 	bl	8000628 <__aeabi_dmul>
 800a8e8:	a333      	add	r3, pc, #204	; (adr r3, 800a9b8 <__kernel_cos+0x168>)
 800a8ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8ee:	f7f5 fce5 	bl	80002bc <__adddf3>
 800a8f2:	4622      	mov	r2, r4
 800a8f4:	462b      	mov	r3, r5
 800a8f6:	f7f5 fe97 	bl	8000628 <__aeabi_dmul>
 800a8fa:	4622      	mov	r2, r4
 800a8fc:	462b      	mov	r3, r5
 800a8fe:	f7f5 fe93 	bl	8000628 <__aeabi_dmul>
 800a902:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a906:	4604      	mov	r4, r0
 800a908:	460d      	mov	r5, r1
 800a90a:	4630      	mov	r0, r6
 800a90c:	4639      	mov	r1, r7
 800a90e:	f7f5 fe8b 	bl	8000628 <__aeabi_dmul>
 800a912:	460b      	mov	r3, r1
 800a914:	4602      	mov	r2, r0
 800a916:	4629      	mov	r1, r5
 800a918:	4620      	mov	r0, r4
 800a91a:	f7f5 fccd 	bl	80002b8 <__aeabi_dsub>
 800a91e:	4b2b      	ldr	r3, [pc, #172]	; (800a9cc <__kernel_cos+0x17c>)
 800a920:	4598      	cmp	r8, r3
 800a922:	4606      	mov	r6, r0
 800a924:	460f      	mov	r7, r1
 800a926:	dc10      	bgt.n	800a94a <__kernel_cos+0xfa>
 800a928:	4602      	mov	r2, r0
 800a92a:	460b      	mov	r3, r1
 800a92c:	4650      	mov	r0, sl
 800a92e:	4659      	mov	r1, fp
 800a930:	f7f5 fcc2 	bl	80002b8 <__aeabi_dsub>
 800a934:	460b      	mov	r3, r1
 800a936:	4926      	ldr	r1, [pc, #152]	; (800a9d0 <__kernel_cos+0x180>)
 800a938:	4602      	mov	r2, r0
 800a93a:	2000      	movs	r0, #0
 800a93c:	f7f5 fcbc 	bl	80002b8 <__aeabi_dsub>
 800a940:	ec41 0b10 	vmov	d0, r0, r1
 800a944:	b003      	add	sp, #12
 800a946:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a94a:	4b22      	ldr	r3, [pc, #136]	; (800a9d4 <__kernel_cos+0x184>)
 800a94c:	4920      	ldr	r1, [pc, #128]	; (800a9d0 <__kernel_cos+0x180>)
 800a94e:	4598      	cmp	r8, r3
 800a950:	bfcc      	ite	gt
 800a952:	4d21      	ldrgt	r5, [pc, #132]	; (800a9d8 <__kernel_cos+0x188>)
 800a954:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 800a958:	2400      	movs	r4, #0
 800a95a:	4622      	mov	r2, r4
 800a95c:	462b      	mov	r3, r5
 800a95e:	2000      	movs	r0, #0
 800a960:	f7f5 fcaa 	bl	80002b8 <__aeabi_dsub>
 800a964:	4622      	mov	r2, r4
 800a966:	4680      	mov	r8, r0
 800a968:	4689      	mov	r9, r1
 800a96a:	462b      	mov	r3, r5
 800a96c:	4650      	mov	r0, sl
 800a96e:	4659      	mov	r1, fp
 800a970:	f7f5 fca2 	bl	80002b8 <__aeabi_dsub>
 800a974:	4632      	mov	r2, r6
 800a976:	463b      	mov	r3, r7
 800a978:	f7f5 fc9e 	bl	80002b8 <__aeabi_dsub>
 800a97c:	4602      	mov	r2, r0
 800a97e:	460b      	mov	r3, r1
 800a980:	4640      	mov	r0, r8
 800a982:	4649      	mov	r1, r9
 800a984:	e7da      	b.n	800a93c <__kernel_cos+0xec>
 800a986:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 800a9c0 <__kernel_cos+0x170>
 800a98a:	e7db      	b.n	800a944 <__kernel_cos+0xf4>
 800a98c:	f3af 8000 	nop.w
 800a990:	be8838d4 	.word	0xbe8838d4
 800a994:	bda8fae9 	.word	0xbda8fae9
 800a998:	bdb4b1c4 	.word	0xbdb4b1c4
 800a99c:	3e21ee9e 	.word	0x3e21ee9e
 800a9a0:	809c52ad 	.word	0x809c52ad
 800a9a4:	3e927e4f 	.word	0x3e927e4f
 800a9a8:	19cb1590 	.word	0x19cb1590
 800a9ac:	3efa01a0 	.word	0x3efa01a0
 800a9b0:	16c15177 	.word	0x16c15177
 800a9b4:	3f56c16c 	.word	0x3f56c16c
 800a9b8:	5555554c 	.word	0x5555554c
 800a9bc:	3fa55555 	.word	0x3fa55555
 800a9c0:	00000000 	.word	0x00000000
 800a9c4:	3ff00000 	.word	0x3ff00000
 800a9c8:	3fe00000 	.word	0x3fe00000
 800a9cc:	3fd33332 	.word	0x3fd33332
 800a9d0:	3ff00000 	.word	0x3ff00000
 800a9d4:	3fe90000 	.word	0x3fe90000
 800a9d8:	3fd20000 	.word	0x3fd20000
 800a9dc:	00000000 	.word	0x00000000

0800a9e0 <__kernel_rem_pio2>:
 800a9e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a9e4:	ed2d 8b02 	vpush	{d8}
 800a9e8:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 800a9ec:	f112 0f14 	cmn.w	r2, #20
 800a9f0:	9308      	str	r3, [sp, #32]
 800a9f2:	9101      	str	r1, [sp, #4]
 800a9f4:	4bc4      	ldr	r3, [pc, #784]	; (800ad08 <__kernel_rem_pio2+0x328>)
 800a9f6:	99a6      	ldr	r1, [sp, #664]	; 0x298
 800a9f8:	900b      	str	r0, [sp, #44]	; 0x2c
 800a9fa:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800a9fe:	9302      	str	r3, [sp, #8]
 800aa00:	9b08      	ldr	r3, [sp, #32]
 800aa02:	f103 33ff 	add.w	r3, r3, #4294967295
 800aa06:	bfa8      	it	ge
 800aa08:	1ed4      	subge	r4, r2, #3
 800aa0a:	9306      	str	r3, [sp, #24]
 800aa0c:	bfb2      	itee	lt
 800aa0e:	2400      	movlt	r4, #0
 800aa10:	2318      	movge	r3, #24
 800aa12:	fb94 f4f3 	sdivge	r4, r4, r3
 800aa16:	f06f 0317 	mvn.w	r3, #23
 800aa1a:	fb04 3303 	mla	r3, r4, r3, r3
 800aa1e:	eb03 0a02 	add.w	sl, r3, r2
 800aa22:	9b02      	ldr	r3, [sp, #8]
 800aa24:	9a06      	ldr	r2, [sp, #24]
 800aa26:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 800acf8 <__kernel_rem_pio2+0x318>
 800aa2a:	eb03 0802 	add.w	r8, r3, r2
 800aa2e:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800aa30:	1aa7      	subs	r7, r4, r2
 800aa32:	ae22      	add	r6, sp, #136	; 0x88
 800aa34:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800aa38:	2500      	movs	r5, #0
 800aa3a:	4545      	cmp	r5, r8
 800aa3c:	dd13      	ble.n	800aa66 <__kernel_rem_pio2+0x86>
 800aa3e:	9b08      	ldr	r3, [sp, #32]
 800aa40:	ed9f 8bad 	vldr	d8, [pc, #692]	; 800acf8 <__kernel_rem_pio2+0x318>
 800aa44:	aa22      	add	r2, sp, #136	; 0x88
 800aa46:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800aa4a:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 800aa4e:	f04f 0800 	mov.w	r8, #0
 800aa52:	9b02      	ldr	r3, [sp, #8]
 800aa54:	4598      	cmp	r8, r3
 800aa56:	dc2f      	bgt.n	800aab8 <__kernel_rem_pio2+0xd8>
 800aa58:	ed8d 8b04 	vstr	d8, [sp, #16]
 800aa5c:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 800aa60:	462f      	mov	r7, r5
 800aa62:	2600      	movs	r6, #0
 800aa64:	e01b      	b.n	800aa9e <__kernel_rem_pio2+0xbe>
 800aa66:	42ef      	cmn	r7, r5
 800aa68:	d407      	bmi.n	800aa7a <__kernel_rem_pio2+0x9a>
 800aa6a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800aa6e:	f7f5 fd71 	bl	8000554 <__aeabi_i2d>
 800aa72:	e8e6 0102 	strd	r0, r1, [r6], #8
 800aa76:	3501      	adds	r5, #1
 800aa78:	e7df      	b.n	800aa3a <__kernel_rem_pio2+0x5a>
 800aa7a:	ec51 0b18 	vmov	r0, r1, d8
 800aa7e:	e7f8      	b.n	800aa72 <__kernel_rem_pio2+0x92>
 800aa80:	e9d7 2300 	ldrd	r2, r3, [r7]
 800aa84:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800aa88:	f7f5 fdce 	bl	8000628 <__aeabi_dmul>
 800aa8c:	4602      	mov	r2, r0
 800aa8e:	460b      	mov	r3, r1
 800aa90:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800aa94:	f7f5 fc12 	bl	80002bc <__adddf3>
 800aa98:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800aa9c:	3601      	adds	r6, #1
 800aa9e:	9b06      	ldr	r3, [sp, #24]
 800aaa0:	429e      	cmp	r6, r3
 800aaa2:	f1a7 0708 	sub.w	r7, r7, #8
 800aaa6:	ddeb      	ble.n	800aa80 <__kernel_rem_pio2+0xa0>
 800aaa8:	ed9d 7b04 	vldr	d7, [sp, #16]
 800aaac:	f108 0801 	add.w	r8, r8, #1
 800aab0:	ecab 7b02 	vstmia	fp!, {d7}
 800aab4:	3508      	adds	r5, #8
 800aab6:	e7cc      	b.n	800aa52 <__kernel_rem_pio2+0x72>
 800aab8:	9b02      	ldr	r3, [sp, #8]
 800aaba:	aa0e      	add	r2, sp, #56	; 0x38
 800aabc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800aac0:	930d      	str	r3, [sp, #52]	; 0x34
 800aac2:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800aac4:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800aac8:	9c02      	ldr	r4, [sp, #8]
 800aaca:	930c      	str	r3, [sp, #48]	; 0x30
 800aacc:	00e3      	lsls	r3, r4, #3
 800aace:	930a      	str	r3, [sp, #40]	; 0x28
 800aad0:	ab9a      	add	r3, sp, #616	; 0x268
 800aad2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800aad6:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 800aada:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 800aade:	ab72      	add	r3, sp, #456	; 0x1c8
 800aae0:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 800aae4:	46c3      	mov	fp, r8
 800aae6:	46a1      	mov	r9, r4
 800aae8:	f1b9 0f00 	cmp.w	r9, #0
 800aaec:	f1a5 0508 	sub.w	r5, r5, #8
 800aaf0:	dc77      	bgt.n	800abe2 <__kernel_rem_pio2+0x202>
 800aaf2:	ec47 6b10 	vmov	d0, r6, r7
 800aaf6:	4650      	mov	r0, sl
 800aaf8:	f000 fdae 	bl	800b658 <scalbn>
 800aafc:	ec57 6b10 	vmov	r6, r7, d0
 800ab00:	2200      	movs	r2, #0
 800ab02:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800ab06:	ee10 0a10 	vmov	r0, s0
 800ab0a:	4639      	mov	r1, r7
 800ab0c:	f7f5 fd8c 	bl	8000628 <__aeabi_dmul>
 800ab10:	ec41 0b10 	vmov	d0, r0, r1
 800ab14:	f000 fd20 	bl	800b558 <floor>
 800ab18:	4b7c      	ldr	r3, [pc, #496]	; (800ad0c <__kernel_rem_pio2+0x32c>)
 800ab1a:	ec51 0b10 	vmov	r0, r1, d0
 800ab1e:	2200      	movs	r2, #0
 800ab20:	f7f5 fd82 	bl	8000628 <__aeabi_dmul>
 800ab24:	4602      	mov	r2, r0
 800ab26:	460b      	mov	r3, r1
 800ab28:	4630      	mov	r0, r6
 800ab2a:	4639      	mov	r1, r7
 800ab2c:	f7f5 fbc4 	bl	80002b8 <__aeabi_dsub>
 800ab30:	460f      	mov	r7, r1
 800ab32:	4606      	mov	r6, r0
 800ab34:	f7f6 f828 	bl	8000b88 <__aeabi_d2iz>
 800ab38:	9004      	str	r0, [sp, #16]
 800ab3a:	f7f5 fd0b 	bl	8000554 <__aeabi_i2d>
 800ab3e:	4602      	mov	r2, r0
 800ab40:	460b      	mov	r3, r1
 800ab42:	4630      	mov	r0, r6
 800ab44:	4639      	mov	r1, r7
 800ab46:	f7f5 fbb7 	bl	80002b8 <__aeabi_dsub>
 800ab4a:	f1ba 0f00 	cmp.w	sl, #0
 800ab4e:	4606      	mov	r6, r0
 800ab50:	460f      	mov	r7, r1
 800ab52:	dd6d      	ble.n	800ac30 <__kernel_rem_pio2+0x250>
 800ab54:	1e62      	subs	r2, r4, #1
 800ab56:	ab0e      	add	r3, sp, #56	; 0x38
 800ab58:	9d04      	ldr	r5, [sp, #16]
 800ab5a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800ab5e:	f1ca 0118 	rsb	r1, sl, #24
 800ab62:	fa40 f301 	asr.w	r3, r0, r1
 800ab66:	441d      	add	r5, r3
 800ab68:	408b      	lsls	r3, r1
 800ab6a:	1ac0      	subs	r0, r0, r3
 800ab6c:	ab0e      	add	r3, sp, #56	; 0x38
 800ab6e:	9504      	str	r5, [sp, #16]
 800ab70:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800ab74:	f1ca 0317 	rsb	r3, sl, #23
 800ab78:	fa40 fb03 	asr.w	fp, r0, r3
 800ab7c:	f1bb 0f00 	cmp.w	fp, #0
 800ab80:	dd65      	ble.n	800ac4e <__kernel_rem_pio2+0x26e>
 800ab82:	9b04      	ldr	r3, [sp, #16]
 800ab84:	2200      	movs	r2, #0
 800ab86:	3301      	adds	r3, #1
 800ab88:	9304      	str	r3, [sp, #16]
 800ab8a:	4615      	mov	r5, r2
 800ab8c:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800ab90:	4294      	cmp	r4, r2
 800ab92:	f300 809c 	bgt.w	800acce <__kernel_rem_pio2+0x2ee>
 800ab96:	f1ba 0f00 	cmp.w	sl, #0
 800ab9a:	dd07      	ble.n	800abac <__kernel_rem_pio2+0x1cc>
 800ab9c:	f1ba 0f01 	cmp.w	sl, #1
 800aba0:	f000 80c0 	beq.w	800ad24 <__kernel_rem_pio2+0x344>
 800aba4:	f1ba 0f02 	cmp.w	sl, #2
 800aba8:	f000 80c6 	beq.w	800ad38 <__kernel_rem_pio2+0x358>
 800abac:	f1bb 0f02 	cmp.w	fp, #2
 800abb0:	d14d      	bne.n	800ac4e <__kernel_rem_pio2+0x26e>
 800abb2:	4632      	mov	r2, r6
 800abb4:	463b      	mov	r3, r7
 800abb6:	4956      	ldr	r1, [pc, #344]	; (800ad10 <__kernel_rem_pio2+0x330>)
 800abb8:	2000      	movs	r0, #0
 800abba:	f7f5 fb7d 	bl	80002b8 <__aeabi_dsub>
 800abbe:	4606      	mov	r6, r0
 800abc0:	460f      	mov	r7, r1
 800abc2:	2d00      	cmp	r5, #0
 800abc4:	d043      	beq.n	800ac4e <__kernel_rem_pio2+0x26e>
 800abc6:	4650      	mov	r0, sl
 800abc8:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 800ad00 <__kernel_rem_pio2+0x320>
 800abcc:	f000 fd44 	bl	800b658 <scalbn>
 800abd0:	4630      	mov	r0, r6
 800abd2:	4639      	mov	r1, r7
 800abd4:	ec53 2b10 	vmov	r2, r3, d0
 800abd8:	f7f5 fb6e 	bl	80002b8 <__aeabi_dsub>
 800abdc:	4606      	mov	r6, r0
 800abde:	460f      	mov	r7, r1
 800abe0:	e035      	b.n	800ac4e <__kernel_rem_pio2+0x26e>
 800abe2:	4b4c      	ldr	r3, [pc, #304]	; (800ad14 <__kernel_rem_pio2+0x334>)
 800abe4:	2200      	movs	r2, #0
 800abe6:	4630      	mov	r0, r6
 800abe8:	4639      	mov	r1, r7
 800abea:	f7f5 fd1d 	bl	8000628 <__aeabi_dmul>
 800abee:	f7f5 ffcb 	bl	8000b88 <__aeabi_d2iz>
 800abf2:	f7f5 fcaf 	bl	8000554 <__aeabi_i2d>
 800abf6:	4602      	mov	r2, r0
 800abf8:	460b      	mov	r3, r1
 800abfa:	ec43 2b18 	vmov	d8, r2, r3
 800abfe:	4b46      	ldr	r3, [pc, #280]	; (800ad18 <__kernel_rem_pio2+0x338>)
 800ac00:	2200      	movs	r2, #0
 800ac02:	f7f5 fd11 	bl	8000628 <__aeabi_dmul>
 800ac06:	4602      	mov	r2, r0
 800ac08:	460b      	mov	r3, r1
 800ac0a:	4630      	mov	r0, r6
 800ac0c:	4639      	mov	r1, r7
 800ac0e:	f7f5 fb53 	bl	80002b8 <__aeabi_dsub>
 800ac12:	f7f5 ffb9 	bl	8000b88 <__aeabi_d2iz>
 800ac16:	e9d5 2300 	ldrd	r2, r3, [r5]
 800ac1a:	f84b 0b04 	str.w	r0, [fp], #4
 800ac1e:	ec51 0b18 	vmov	r0, r1, d8
 800ac22:	f7f5 fb4b 	bl	80002bc <__adddf3>
 800ac26:	f109 39ff 	add.w	r9, r9, #4294967295
 800ac2a:	4606      	mov	r6, r0
 800ac2c:	460f      	mov	r7, r1
 800ac2e:	e75b      	b.n	800aae8 <__kernel_rem_pio2+0x108>
 800ac30:	d106      	bne.n	800ac40 <__kernel_rem_pio2+0x260>
 800ac32:	1e63      	subs	r3, r4, #1
 800ac34:	aa0e      	add	r2, sp, #56	; 0x38
 800ac36:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800ac3a:	ea4f 5be0 	mov.w	fp, r0, asr #23
 800ac3e:	e79d      	b.n	800ab7c <__kernel_rem_pio2+0x19c>
 800ac40:	4b36      	ldr	r3, [pc, #216]	; (800ad1c <__kernel_rem_pio2+0x33c>)
 800ac42:	2200      	movs	r2, #0
 800ac44:	f7f5 ff76 	bl	8000b34 <__aeabi_dcmpge>
 800ac48:	2800      	cmp	r0, #0
 800ac4a:	d13d      	bne.n	800acc8 <__kernel_rem_pio2+0x2e8>
 800ac4c:	4683      	mov	fp, r0
 800ac4e:	2200      	movs	r2, #0
 800ac50:	2300      	movs	r3, #0
 800ac52:	4630      	mov	r0, r6
 800ac54:	4639      	mov	r1, r7
 800ac56:	f7f5 ff4f 	bl	8000af8 <__aeabi_dcmpeq>
 800ac5a:	2800      	cmp	r0, #0
 800ac5c:	f000 80c0 	beq.w	800ade0 <__kernel_rem_pio2+0x400>
 800ac60:	1e65      	subs	r5, r4, #1
 800ac62:	462b      	mov	r3, r5
 800ac64:	2200      	movs	r2, #0
 800ac66:	9902      	ldr	r1, [sp, #8]
 800ac68:	428b      	cmp	r3, r1
 800ac6a:	da6c      	bge.n	800ad46 <__kernel_rem_pio2+0x366>
 800ac6c:	2a00      	cmp	r2, #0
 800ac6e:	f000 8089 	beq.w	800ad84 <__kernel_rem_pio2+0x3a4>
 800ac72:	ab0e      	add	r3, sp, #56	; 0x38
 800ac74:	f1aa 0a18 	sub.w	sl, sl, #24
 800ac78:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800ac7c:	2b00      	cmp	r3, #0
 800ac7e:	f000 80ad 	beq.w	800addc <__kernel_rem_pio2+0x3fc>
 800ac82:	4650      	mov	r0, sl
 800ac84:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 800ad00 <__kernel_rem_pio2+0x320>
 800ac88:	f000 fce6 	bl	800b658 <scalbn>
 800ac8c:	ab9a      	add	r3, sp, #616	; 0x268
 800ac8e:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800ac92:	ec57 6b10 	vmov	r6, r7, d0
 800ac96:	00ec      	lsls	r4, r5, #3
 800ac98:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 800ac9c:	46aa      	mov	sl, r5
 800ac9e:	f1ba 0f00 	cmp.w	sl, #0
 800aca2:	f280 80d6 	bge.w	800ae52 <__kernel_rem_pio2+0x472>
 800aca6:	ed9f 8b14 	vldr	d8, [pc, #80]	; 800acf8 <__kernel_rem_pio2+0x318>
 800acaa:	462e      	mov	r6, r5
 800acac:	2e00      	cmp	r6, #0
 800acae:	f2c0 8104 	blt.w	800aeba <__kernel_rem_pio2+0x4da>
 800acb2:	ab72      	add	r3, sp, #456	; 0x1c8
 800acb4:	ed8d 8b06 	vstr	d8, [sp, #24]
 800acb8:	f8df a064 	ldr.w	sl, [pc, #100]	; 800ad20 <__kernel_rem_pio2+0x340>
 800acbc:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 800acc0:	f04f 0800 	mov.w	r8, #0
 800acc4:	1baf      	subs	r7, r5, r6
 800acc6:	e0ea      	b.n	800ae9e <__kernel_rem_pio2+0x4be>
 800acc8:	f04f 0b02 	mov.w	fp, #2
 800accc:	e759      	b.n	800ab82 <__kernel_rem_pio2+0x1a2>
 800acce:	f8d8 3000 	ldr.w	r3, [r8]
 800acd2:	b955      	cbnz	r5, 800acea <__kernel_rem_pio2+0x30a>
 800acd4:	b123      	cbz	r3, 800ace0 <__kernel_rem_pio2+0x300>
 800acd6:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800acda:	f8c8 3000 	str.w	r3, [r8]
 800acde:	2301      	movs	r3, #1
 800ace0:	3201      	adds	r2, #1
 800ace2:	f108 0804 	add.w	r8, r8, #4
 800ace6:	461d      	mov	r5, r3
 800ace8:	e752      	b.n	800ab90 <__kernel_rem_pio2+0x1b0>
 800acea:	1acb      	subs	r3, r1, r3
 800acec:	f8c8 3000 	str.w	r3, [r8]
 800acf0:	462b      	mov	r3, r5
 800acf2:	e7f5      	b.n	800ace0 <__kernel_rem_pio2+0x300>
 800acf4:	f3af 8000 	nop.w
	...
 800ad04:	3ff00000 	.word	0x3ff00000
 800ad08:	0800c1a0 	.word	0x0800c1a0
 800ad0c:	40200000 	.word	0x40200000
 800ad10:	3ff00000 	.word	0x3ff00000
 800ad14:	3e700000 	.word	0x3e700000
 800ad18:	41700000 	.word	0x41700000
 800ad1c:	3fe00000 	.word	0x3fe00000
 800ad20:	0800c160 	.word	0x0800c160
 800ad24:	1e62      	subs	r2, r4, #1
 800ad26:	ab0e      	add	r3, sp, #56	; 0x38
 800ad28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ad2c:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800ad30:	a90e      	add	r1, sp, #56	; 0x38
 800ad32:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800ad36:	e739      	b.n	800abac <__kernel_rem_pio2+0x1cc>
 800ad38:	1e62      	subs	r2, r4, #1
 800ad3a:	ab0e      	add	r3, sp, #56	; 0x38
 800ad3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ad40:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800ad44:	e7f4      	b.n	800ad30 <__kernel_rem_pio2+0x350>
 800ad46:	a90e      	add	r1, sp, #56	; 0x38
 800ad48:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800ad4c:	3b01      	subs	r3, #1
 800ad4e:	430a      	orrs	r2, r1
 800ad50:	e789      	b.n	800ac66 <__kernel_rem_pio2+0x286>
 800ad52:	3301      	adds	r3, #1
 800ad54:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800ad58:	2900      	cmp	r1, #0
 800ad5a:	d0fa      	beq.n	800ad52 <__kernel_rem_pio2+0x372>
 800ad5c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ad5e:	f502 721a 	add.w	r2, r2, #616	; 0x268
 800ad62:	446a      	add	r2, sp
 800ad64:	3a98      	subs	r2, #152	; 0x98
 800ad66:	920a      	str	r2, [sp, #40]	; 0x28
 800ad68:	9a08      	ldr	r2, [sp, #32]
 800ad6a:	18e3      	adds	r3, r4, r3
 800ad6c:	18a5      	adds	r5, r4, r2
 800ad6e:	aa22      	add	r2, sp, #136	; 0x88
 800ad70:	f104 0801 	add.w	r8, r4, #1
 800ad74:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 800ad78:	9304      	str	r3, [sp, #16]
 800ad7a:	9b04      	ldr	r3, [sp, #16]
 800ad7c:	4543      	cmp	r3, r8
 800ad7e:	da04      	bge.n	800ad8a <__kernel_rem_pio2+0x3aa>
 800ad80:	461c      	mov	r4, r3
 800ad82:	e6a3      	b.n	800aacc <__kernel_rem_pio2+0xec>
 800ad84:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ad86:	2301      	movs	r3, #1
 800ad88:	e7e4      	b.n	800ad54 <__kernel_rem_pio2+0x374>
 800ad8a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ad8c:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800ad90:	f7f5 fbe0 	bl	8000554 <__aeabi_i2d>
 800ad94:	e8e5 0102 	strd	r0, r1, [r5], #8
 800ad98:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ad9a:	46ab      	mov	fp, r5
 800ad9c:	461c      	mov	r4, r3
 800ad9e:	f04f 0900 	mov.w	r9, #0
 800ada2:	2600      	movs	r6, #0
 800ada4:	2700      	movs	r7, #0
 800ada6:	9b06      	ldr	r3, [sp, #24]
 800ada8:	4599      	cmp	r9, r3
 800adaa:	dd06      	ble.n	800adba <__kernel_rem_pio2+0x3da>
 800adac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800adae:	e8e3 6702 	strd	r6, r7, [r3], #8
 800adb2:	f108 0801 	add.w	r8, r8, #1
 800adb6:	930a      	str	r3, [sp, #40]	; 0x28
 800adb8:	e7df      	b.n	800ad7a <__kernel_rem_pio2+0x39a>
 800adba:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800adbe:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800adc2:	f7f5 fc31 	bl	8000628 <__aeabi_dmul>
 800adc6:	4602      	mov	r2, r0
 800adc8:	460b      	mov	r3, r1
 800adca:	4630      	mov	r0, r6
 800adcc:	4639      	mov	r1, r7
 800adce:	f7f5 fa75 	bl	80002bc <__adddf3>
 800add2:	f109 0901 	add.w	r9, r9, #1
 800add6:	4606      	mov	r6, r0
 800add8:	460f      	mov	r7, r1
 800adda:	e7e4      	b.n	800ada6 <__kernel_rem_pio2+0x3c6>
 800addc:	3d01      	subs	r5, #1
 800adde:	e748      	b.n	800ac72 <__kernel_rem_pio2+0x292>
 800ade0:	ec47 6b10 	vmov	d0, r6, r7
 800ade4:	f1ca 0000 	rsb	r0, sl, #0
 800ade8:	f000 fc36 	bl	800b658 <scalbn>
 800adec:	ec57 6b10 	vmov	r6, r7, d0
 800adf0:	4ba0      	ldr	r3, [pc, #640]	; (800b074 <__kernel_rem_pio2+0x694>)
 800adf2:	ee10 0a10 	vmov	r0, s0
 800adf6:	2200      	movs	r2, #0
 800adf8:	4639      	mov	r1, r7
 800adfa:	f7f5 fe9b 	bl	8000b34 <__aeabi_dcmpge>
 800adfe:	b1f8      	cbz	r0, 800ae40 <__kernel_rem_pio2+0x460>
 800ae00:	4b9d      	ldr	r3, [pc, #628]	; (800b078 <__kernel_rem_pio2+0x698>)
 800ae02:	2200      	movs	r2, #0
 800ae04:	4630      	mov	r0, r6
 800ae06:	4639      	mov	r1, r7
 800ae08:	f7f5 fc0e 	bl	8000628 <__aeabi_dmul>
 800ae0c:	f7f5 febc 	bl	8000b88 <__aeabi_d2iz>
 800ae10:	4680      	mov	r8, r0
 800ae12:	f7f5 fb9f 	bl	8000554 <__aeabi_i2d>
 800ae16:	4b97      	ldr	r3, [pc, #604]	; (800b074 <__kernel_rem_pio2+0x694>)
 800ae18:	2200      	movs	r2, #0
 800ae1a:	f7f5 fc05 	bl	8000628 <__aeabi_dmul>
 800ae1e:	460b      	mov	r3, r1
 800ae20:	4602      	mov	r2, r0
 800ae22:	4639      	mov	r1, r7
 800ae24:	4630      	mov	r0, r6
 800ae26:	f7f5 fa47 	bl	80002b8 <__aeabi_dsub>
 800ae2a:	f7f5 fead 	bl	8000b88 <__aeabi_d2iz>
 800ae2e:	1c65      	adds	r5, r4, #1
 800ae30:	ab0e      	add	r3, sp, #56	; 0x38
 800ae32:	f10a 0a18 	add.w	sl, sl, #24
 800ae36:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800ae3a:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 800ae3e:	e720      	b.n	800ac82 <__kernel_rem_pio2+0x2a2>
 800ae40:	4630      	mov	r0, r6
 800ae42:	4639      	mov	r1, r7
 800ae44:	f7f5 fea0 	bl	8000b88 <__aeabi_d2iz>
 800ae48:	ab0e      	add	r3, sp, #56	; 0x38
 800ae4a:	4625      	mov	r5, r4
 800ae4c:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800ae50:	e717      	b.n	800ac82 <__kernel_rem_pio2+0x2a2>
 800ae52:	ab0e      	add	r3, sp, #56	; 0x38
 800ae54:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 800ae58:	f7f5 fb7c 	bl	8000554 <__aeabi_i2d>
 800ae5c:	4632      	mov	r2, r6
 800ae5e:	463b      	mov	r3, r7
 800ae60:	f7f5 fbe2 	bl	8000628 <__aeabi_dmul>
 800ae64:	4b84      	ldr	r3, [pc, #528]	; (800b078 <__kernel_rem_pio2+0x698>)
 800ae66:	e968 0102 	strd	r0, r1, [r8, #-8]!
 800ae6a:	2200      	movs	r2, #0
 800ae6c:	4630      	mov	r0, r6
 800ae6e:	4639      	mov	r1, r7
 800ae70:	f7f5 fbda 	bl	8000628 <__aeabi_dmul>
 800ae74:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ae78:	4606      	mov	r6, r0
 800ae7a:	460f      	mov	r7, r1
 800ae7c:	e70f      	b.n	800ac9e <__kernel_rem_pio2+0x2be>
 800ae7e:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 800ae82:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 800ae86:	f7f5 fbcf 	bl	8000628 <__aeabi_dmul>
 800ae8a:	4602      	mov	r2, r0
 800ae8c:	460b      	mov	r3, r1
 800ae8e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ae92:	f7f5 fa13 	bl	80002bc <__adddf3>
 800ae96:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800ae9a:	f108 0801 	add.w	r8, r8, #1
 800ae9e:	9b02      	ldr	r3, [sp, #8]
 800aea0:	4598      	cmp	r8, r3
 800aea2:	dc01      	bgt.n	800aea8 <__kernel_rem_pio2+0x4c8>
 800aea4:	45b8      	cmp	r8, r7
 800aea6:	ddea      	ble.n	800ae7e <__kernel_rem_pio2+0x49e>
 800aea8:	ed9d 7b06 	vldr	d7, [sp, #24]
 800aeac:	ab4a      	add	r3, sp, #296	; 0x128
 800aeae:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800aeb2:	ed87 7b00 	vstr	d7, [r7]
 800aeb6:	3e01      	subs	r6, #1
 800aeb8:	e6f8      	b.n	800acac <__kernel_rem_pio2+0x2cc>
 800aeba:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800aebc:	2b02      	cmp	r3, #2
 800aebe:	dc0b      	bgt.n	800aed8 <__kernel_rem_pio2+0x4f8>
 800aec0:	2b00      	cmp	r3, #0
 800aec2:	dc35      	bgt.n	800af30 <__kernel_rem_pio2+0x550>
 800aec4:	d059      	beq.n	800af7a <__kernel_rem_pio2+0x59a>
 800aec6:	9b04      	ldr	r3, [sp, #16]
 800aec8:	f003 0007 	and.w	r0, r3, #7
 800aecc:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 800aed0:	ecbd 8b02 	vpop	{d8}
 800aed4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aed8:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800aeda:	2b03      	cmp	r3, #3
 800aedc:	d1f3      	bne.n	800aec6 <__kernel_rem_pio2+0x4e6>
 800aede:	ab4a      	add	r3, sp, #296	; 0x128
 800aee0:	4423      	add	r3, r4
 800aee2:	9306      	str	r3, [sp, #24]
 800aee4:	461c      	mov	r4, r3
 800aee6:	469a      	mov	sl, r3
 800aee8:	9502      	str	r5, [sp, #8]
 800aeea:	9b02      	ldr	r3, [sp, #8]
 800aeec:	2b00      	cmp	r3, #0
 800aeee:	f1aa 0a08 	sub.w	sl, sl, #8
 800aef2:	dc6b      	bgt.n	800afcc <__kernel_rem_pio2+0x5ec>
 800aef4:	46aa      	mov	sl, r5
 800aef6:	f1ba 0f01 	cmp.w	sl, #1
 800aefa:	f1a4 0408 	sub.w	r4, r4, #8
 800aefe:	f300 8085 	bgt.w	800b00c <__kernel_rem_pio2+0x62c>
 800af02:	9c06      	ldr	r4, [sp, #24]
 800af04:	2000      	movs	r0, #0
 800af06:	3408      	adds	r4, #8
 800af08:	2100      	movs	r1, #0
 800af0a:	2d01      	cmp	r5, #1
 800af0c:	f300 809d 	bgt.w	800b04a <__kernel_rem_pio2+0x66a>
 800af10:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 800af14:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 800af18:	f1bb 0f00 	cmp.w	fp, #0
 800af1c:	f040 809b 	bne.w	800b056 <__kernel_rem_pio2+0x676>
 800af20:	9b01      	ldr	r3, [sp, #4]
 800af22:	e9c3 5600 	strd	r5, r6, [r3]
 800af26:	e9c3 7802 	strd	r7, r8, [r3, #8]
 800af2a:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800af2e:	e7ca      	b.n	800aec6 <__kernel_rem_pio2+0x4e6>
 800af30:	3408      	adds	r4, #8
 800af32:	ab4a      	add	r3, sp, #296	; 0x128
 800af34:	441c      	add	r4, r3
 800af36:	462e      	mov	r6, r5
 800af38:	2000      	movs	r0, #0
 800af3a:	2100      	movs	r1, #0
 800af3c:	2e00      	cmp	r6, #0
 800af3e:	da36      	bge.n	800afae <__kernel_rem_pio2+0x5ce>
 800af40:	f1bb 0f00 	cmp.w	fp, #0
 800af44:	d039      	beq.n	800afba <__kernel_rem_pio2+0x5da>
 800af46:	4602      	mov	r2, r0
 800af48:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800af4c:	9c01      	ldr	r4, [sp, #4]
 800af4e:	e9c4 2300 	strd	r2, r3, [r4]
 800af52:	4602      	mov	r2, r0
 800af54:	460b      	mov	r3, r1
 800af56:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 800af5a:	f7f5 f9ad 	bl	80002b8 <__aeabi_dsub>
 800af5e:	ae4c      	add	r6, sp, #304	; 0x130
 800af60:	2401      	movs	r4, #1
 800af62:	42a5      	cmp	r5, r4
 800af64:	da2c      	bge.n	800afc0 <__kernel_rem_pio2+0x5e0>
 800af66:	f1bb 0f00 	cmp.w	fp, #0
 800af6a:	d002      	beq.n	800af72 <__kernel_rem_pio2+0x592>
 800af6c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800af70:	4619      	mov	r1, r3
 800af72:	9b01      	ldr	r3, [sp, #4]
 800af74:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800af78:	e7a5      	b.n	800aec6 <__kernel_rem_pio2+0x4e6>
 800af7a:	f504 731a 	add.w	r3, r4, #616	; 0x268
 800af7e:	eb0d 0403 	add.w	r4, sp, r3
 800af82:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 800af86:	2000      	movs	r0, #0
 800af88:	2100      	movs	r1, #0
 800af8a:	2d00      	cmp	r5, #0
 800af8c:	da09      	bge.n	800afa2 <__kernel_rem_pio2+0x5c2>
 800af8e:	f1bb 0f00 	cmp.w	fp, #0
 800af92:	d002      	beq.n	800af9a <__kernel_rem_pio2+0x5ba>
 800af94:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800af98:	4619      	mov	r1, r3
 800af9a:	9b01      	ldr	r3, [sp, #4]
 800af9c:	e9c3 0100 	strd	r0, r1, [r3]
 800afa0:	e791      	b.n	800aec6 <__kernel_rem_pio2+0x4e6>
 800afa2:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800afa6:	f7f5 f989 	bl	80002bc <__adddf3>
 800afaa:	3d01      	subs	r5, #1
 800afac:	e7ed      	b.n	800af8a <__kernel_rem_pio2+0x5aa>
 800afae:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800afb2:	f7f5 f983 	bl	80002bc <__adddf3>
 800afb6:	3e01      	subs	r6, #1
 800afb8:	e7c0      	b.n	800af3c <__kernel_rem_pio2+0x55c>
 800afba:	4602      	mov	r2, r0
 800afbc:	460b      	mov	r3, r1
 800afbe:	e7c5      	b.n	800af4c <__kernel_rem_pio2+0x56c>
 800afc0:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800afc4:	f7f5 f97a 	bl	80002bc <__adddf3>
 800afc8:	3401      	adds	r4, #1
 800afca:	e7ca      	b.n	800af62 <__kernel_rem_pio2+0x582>
 800afcc:	e9da 8900 	ldrd	r8, r9, [sl]
 800afd0:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 800afd4:	9b02      	ldr	r3, [sp, #8]
 800afd6:	3b01      	subs	r3, #1
 800afd8:	9302      	str	r3, [sp, #8]
 800afda:	4632      	mov	r2, r6
 800afdc:	463b      	mov	r3, r7
 800afde:	4640      	mov	r0, r8
 800afe0:	4649      	mov	r1, r9
 800afe2:	f7f5 f96b 	bl	80002bc <__adddf3>
 800afe6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800afea:	4602      	mov	r2, r0
 800afec:	460b      	mov	r3, r1
 800afee:	4640      	mov	r0, r8
 800aff0:	4649      	mov	r1, r9
 800aff2:	f7f5 f961 	bl	80002b8 <__aeabi_dsub>
 800aff6:	4632      	mov	r2, r6
 800aff8:	463b      	mov	r3, r7
 800affa:	f7f5 f95f 	bl	80002bc <__adddf3>
 800affe:	ed9d 7b08 	vldr	d7, [sp, #32]
 800b002:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800b006:	ed8a 7b00 	vstr	d7, [sl]
 800b00a:	e76e      	b.n	800aeea <__kernel_rem_pio2+0x50a>
 800b00c:	e9d4 8900 	ldrd	r8, r9, [r4]
 800b010:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 800b014:	4640      	mov	r0, r8
 800b016:	4632      	mov	r2, r6
 800b018:	463b      	mov	r3, r7
 800b01a:	4649      	mov	r1, r9
 800b01c:	f7f5 f94e 	bl	80002bc <__adddf3>
 800b020:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b024:	4602      	mov	r2, r0
 800b026:	460b      	mov	r3, r1
 800b028:	4640      	mov	r0, r8
 800b02a:	4649      	mov	r1, r9
 800b02c:	f7f5 f944 	bl	80002b8 <__aeabi_dsub>
 800b030:	4632      	mov	r2, r6
 800b032:	463b      	mov	r3, r7
 800b034:	f7f5 f942 	bl	80002bc <__adddf3>
 800b038:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b03c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800b040:	ed84 7b00 	vstr	d7, [r4]
 800b044:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b048:	e755      	b.n	800aef6 <__kernel_rem_pio2+0x516>
 800b04a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800b04e:	f7f5 f935 	bl	80002bc <__adddf3>
 800b052:	3d01      	subs	r5, #1
 800b054:	e759      	b.n	800af0a <__kernel_rem_pio2+0x52a>
 800b056:	9b01      	ldr	r3, [sp, #4]
 800b058:	9a01      	ldr	r2, [sp, #4]
 800b05a:	601d      	str	r5, [r3, #0]
 800b05c:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 800b060:	605c      	str	r4, [r3, #4]
 800b062:	609f      	str	r7, [r3, #8]
 800b064:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 800b068:	60d3      	str	r3, [r2, #12]
 800b06a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b06e:	6110      	str	r0, [r2, #16]
 800b070:	6153      	str	r3, [r2, #20]
 800b072:	e728      	b.n	800aec6 <__kernel_rem_pio2+0x4e6>
 800b074:	41700000 	.word	0x41700000
 800b078:	3e700000 	.word	0x3e700000
 800b07c:	00000000 	.word	0x00000000

0800b080 <__kernel_sin>:
 800b080:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b084:	ed2d 8b04 	vpush	{d8-d9}
 800b088:	eeb0 8a41 	vmov.f32	s16, s2
 800b08c:	eef0 8a61 	vmov.f32	s17, s3
 800b090:	ec55 4b10 	vmov	r4, r5, d0
 800b094:	b083      	sub	sp, #12
 800b096:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800b09a:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800b09e:	9001      	str	r0, [sp, #4]
 800b0a0:	da06      	bge.n	800b0b0 <__kernel_sin+0x30>
 800b0a2:	ee10 0a10 	vmov	r0, s0
 800b0a6:	4629      	mov	r1, r5
 800b0a8:	f7f5 fd6e 	bl	8000b88 <__aeabi_d2iz>
 800b0ac:	2800      	cmp	r0, #0
 800b0ae:	d051      	beq.n	800b154 <__kernel_sin+0xd4>
 800b0b0:	4622      	mov	r2, r4
 800b0b2:	462b      	mov	r3, r5
 800b0b4:	4620      	mov	r0, r4
 800b0b6:	4629      	mov	r1, r5
 800b0b8:	f7f5 fab6 	bl	8000628 <__aeabi_dmul>
 800b0bc:	4682      	mov	sl, r0
 800b0be:	468b      	mov	fp, r1
 800b0c0:	4602      	mov	r2, r0
 800b0c2:	460b      	mov	r3, r1
 800b0c4:	4620      	mov	r0, r4
 800b0c6:	4629      	mov	r1, r5
 800b0c8:	f7f5 faae 	bl	8000628 <__aeabi_dmul>
 800b0cc:	a341      	add	r3, pc, #260	; (adr r3, 800b1d4 <__kernel_sin+0x154>)
 800b0ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0d2:	4680      	mov	r8, r0
 800b0d4:	4689      	mov	r9, r1
 800b0d6:	4650      	mov	r0, sl
 800b0d8:	4659      	mov	r1, fp
 800b0da:	f7f5 faa5 	bl	8000628 <__aeabi_dmul>
 800b0de:	a33f      	add	r3, pc, #252	; (adr r3, 800b1dc <__kernel_sin+0x15c>)
 800b0e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0e4:	f7f5 f8e8 	bl	80002b8 <__aeabi_dsub>
 800b0e8:	4652      	mov	r2, sl
 800b0ea:	465b      	mov	r3, fp
 800b0ec:	f7f5 fa9c 	bl	8000628 <__aeabi_dmul>
 800b0f0:	a33c      	add	r3, pc, #240	; (adr r3, 800b1e4 <__kernel_sin+0x164>)
 800b0f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0f6:	f7f5 f8e1 	bl	80002bc <__adddf3>
 800b0fa:	4652      	mov	r2, sl
 800b0fc:	465b      	mov	r3, fp
 800b0fe:	f7f5 fa93 	bl	8000628 <__aeabi_dmul>
 800b102:	a33a      	add	r3, pc, #232	; (adr r3, 800b1ec <__kernel_sin+0x16c>)
 800b104:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b108:	f7f5 f8d6 	bl	80002b8 <__aeabi_dsub>
 800b10c:	4652      	mov	r2, sl
 800b10e:	465b      	mov	r3, fp
 800b110:	f7f5 fa8a 	bl	8000628 <__aeabi_dmul>
 800b114:	a337      	add	r3, pc, #220	; (adr r3, 800b1f4 <__kernel_sin+0x174>)
 800b116:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b11a:	f7f5 f8cf 	bl	80002bc <__adddf3>
 800b11e:	9b01      	ldr	r3, [sp, #4]
 800b120:	4606      	mov	r6, r0
 800b122:	460f      	mov	r7, r1
 800b124:	b9eb      	cbnz	r3, 800b162 <__kernel_sin+0xe2>
 800b126:	4602      	mov	r2, r0
 800b128:	460b      	mov	r3, r1
 800b12a:	4650      	mov	r0, sl
 800b12c:	4659      	mov	r1, fp
 800b12e:	f7f5 fa7b 	bl	8000628 <__aeabi_dmul>
 800b132:	a325      	add	r3, pc, #148	; (adr r3, 800b1c8 <__kernel_sin+0x148>)
 800b134:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b138:	f7f5 f8be 	bl	80002b8 <__aeabi_dsub>
 800b13c:	4642      	mov	r2, r8
 800b13e:	464b      	mov	r3, r9
 800b140:	f7f5 fa72 	bl	8000628 <__aeabi_dmul>
 800b144:	4602      	mov	r2, r0
 800b146:	460b      	mov	r3, r1
 800b148:	4620      	mov	r0, r4
 800b14a:	4629      	mov	r1, r5
 800b14c:	f7f5 f8b6 	bl	80002bc <__adddf3>
 800b150:	4604      	mov	r4, r0
 800b152:	460d      	mov	r5, r1
 800b154:	ec45 4b10 	vmov	d0, r4, r5
 800b158:	b003      	add	sp, #12
 800b15a:	ecbd 8b04 	vpop	{d8-d9}
 800b15e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b162:	4b1b      	ldr	r3, [pc, #108]	; (800b1d0 <__kernel_sin+0x150>)
 800b164:	ec51 0b18 	vmov	r0, r1, d8
 800b168:	2200      	movs	r2, #0
 800b16a:	f7f5 fa5d 	bl	8000628 <__aeabi_dmul>
 800b16e:	4632      	mov	r2, r6
 800b170:	ec41 0b19 	vmov	d9, r0, r1
 800b174:	463b      	mov	r3, r7
 800b176:	4640      	mov	r0, r8
 800b178:	4649      	mov	r1, r9
 800b17a:	f7f5 fa55 	bl	8000628 <__aeabi_dmul>
 800b17e:	4602      	mov	r2, r0
 800b180:	460b      	mov	r3, r1
 800b182:	ec51 0b19 	vmov	r0, r1, d9
 800b186:	f7f5 f897 	bl	80002b8 <__aeabi_dsub>
 800b18a:	4652      	mov	r2, sl
 800b18c:	465b      	mov	r3, fp
 800b18e:	f7f5 fa4b 	bl	8000628 <__aeabi_dmul>
 800b192:	ec53 2b18 	vmov	r2, r3, d8
 800b196:	f7f5 f88f 	bl	80002b8 <__aeabi_dsub>
 800b19a:	a30b      	add	r3, pc, #44	; (adr r3, 800b1c8 <__kernel_sin+0x148>)
 800b19c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1a0:	4606      	mov	r6, r0
 800b1a2:	460f      	mov	r7, r1
 800b1a4:	4640      	mov	r0, r8
 800b1a6:	4649      	mov	r1, r9
 800b1a8:	f7f5 fa3e 	bl	8000628 <__aeabi_dmul>
 800b1ac:	4602      	mov	r2, r0
 800b1ae:	460b      	mov	r3, r1
 800b1b0:	4630      	mov	r0, r6
 800b1b2:	4639      	mov	r1, r7
 800b1b4:	f7f5 f882 	bl	80002bc <__adddf3>
 800b1b8:	4602      	mov	r2, r0
 800b1ba:	460b      	mov	r3, r1
 800b1bc:	4620      	mov	r0, r4
 800b1be:	4629      	mov	r1, r5
 800b1c0:	f7f5 f87a 	bl	80002b8 <__aeabi_dsub>
 800b1c4:	e7c4      	b.n	800b150 <__kernel_sin+0xd0>
 800b1c6:	bf00      	nop
 800b1c8:	55555549 	.word	0x55555549
 800b1cc:	3fc55555 	.word	0x3fc55555
 800b1d0:	3fe00000 	.word	0x3fe00000
 800b1d4:	5acfd57c 	.word	0x5acfd57c
 800b1d8:	3de5d93a 	.word	0x3de5d93a
 800b1dc:	8a2b9ceb 	.word	0x8a2b9ceb
 800b1e0:	3e5ae5e6 	.word	0x3e5ae5e6
 800b1e4:	57b1fe7d 	.word	0x57b1fe7d
 800b1e8:	3ec71de3 	.word	0x3ec71de3
 800b1ec:	19c161d5 	.word	0x19c161d5
 800b1f0:	3f2a01a0 	.word	0x3f2a01a0
 800b1f4:	1110f8a6 	.word	0x1110f8a6
 800b1f8:	3f811111 	.word	0x3f811111
 800b1fc:	00000000 	.word	0x00000000

0800b200 <atan>:
 800b200:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b204:	ec55 4b10 	vmov	r4, r5, d0
 800b208:	4bc3      	ldr	r3, [pc, #780]	; (800b518 <atan+0x318>)
 800b20a:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800b20e:	429e      	cmp	r6, r3
 800b210:	46ab      	mov	fp, r5
 800b212:	dd18      	ble.n	800b246 <atan+0x46>
 800b214:	4bc1      	ldr	r3, [pc, #772]	; (800b51c <atan+0x31c>)
 800b216:	429e      	cmp	r6, r3
 800b218:	dc01      	bgt.n	800b21e <atan+0x1e>
 800b21a:	d109      	bne.n	800b230 <atan+0x30>
 800b21c:	b144      	cbz	r4, 800b230 <atan+0x30>
 800b21e:	4622      	mov	r2, r4
 800b220:	462b      	mov	r3, r5
 800b222:	4620      	mov	r0, r4
 800b224:	4629      	mov	r1, r5
 800b226:	f7f5 f849 	bl	80002bc <__adddf3>
 800b22a:	4604      	mov	r4, r0
 800b22c:	460d      	mov	r5, r1
 800b22e:	e006      	b.n	800b23e <atan+0x3e>
 800b230:	f1bb 0f00 	cmp.w	fp, #0
 800b234:	f300 8131 	bgt.w	800b49a <atan+0x29a>
 800b238:	a59b      	add	r5, pc, #620	; (adr r5, 800b4a8 <atan+0x2a8>)
 800b23a:	e9d5 4500 	ldrd	r4, r5, [r5]
 800b23e:	ec45 4b10 	vmov	d0, r4, r5
 800b242:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b246:	4bb6      	ldr	r3, [pc, #728]	; (800b520 <atan+0x320>)
 800b248:	429e      	cmp	r6, r3
 800b24a:	dc14      	bgt.n	800b276 <atan+0x76>
 800b24c:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800b250:	429e      	cmp	r6, r3
 800b252:	dc0d      	bgt.n	800b270 <atan+0x70>
 800b254:	a396      	add	r3, pc, #600	; (adr r3, 800b4b0 <atan+0x2b0>)
 800b256:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b25a:	ee10 0a10 	vmov	r0, s0
 800b25e:	4629      	mov	r1, r5
 800b260:	f7f5 f82c 	bl	80002bc <__adddf3>
 800b264:	4baf      	ldr	r3, [pc, #700]	; (800b524 <atan+0x324>)
 800b266:	2200      	movs	r2, #0
 800b268:	f7f5 fc6e 	bl	8000b48 <__aeabi_dcmpgt>
 800b26c:	2800      	cmp	r0, #0
 800b26e:	d1e6      	bne.n	800b23e <atan+0x3e>
 800b270:	f04f 3aff 	mov.w	sl, #4294967295
 800b274:	e02b      	b.n	800b2ce <atan+0xce>
 800b276:	f000 f963 	bl	800b540 <fabs>
 800b27a:	4bab      	ldr	r3, [pc, #684]	; (800b528 <atan+0x328>)
 800b27c:	429e      	cmp	r6, r3
 800b27e:	ec55 4b10 	vmov	r4, r5, d0
 800b282:	f300 80bf 	bgt.w	800b404 <atan+0x204>
 800b286:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800b28a:	429e      	cmp	r6, r3
 800b28c:	f300 80a0 	bgt.w	800b3d0 <atan+0x1d0>
 800b290:	ee10 2a10 	vmov	r2, s0
 800b294:	ee10 0a10 	vmov	r0, s0
 800b298:	462b      	mov	r3, r5
 800b29a:	4629      	mov	r1, r5
 800b29c:	f7f5 f80e 	bl	80002bc <__adddf3>
 800b2a0:	4ba0      	ldr	r3, [pc, #640]	; (800b524 <atan+0x324>)
 800b2a2:	2200      	movs	r2, #0
 800b2a4:	f7f5 f808 	bl	80002b8 <__aeabi_dsub>
 800b2a8:	2200      	movs	r2, #0
 800b2aa:	4606      	mov	r6, r0
 800b2ac:	460f      	mov	r7, r1
 800b2ae:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b2b2:	4620      	mov	r0, r4
 800b2b4:	4629      	mov	r1, r5
 800b2b6:	f7f5 f801 	bl	80002bc <__adddf3>
 800b2ba:	4602      	mov	r2, r0
 800b2bc:	460b      	mov	r3, r1
 800b2be:	4630      	mov	r0, r6
 800b2c0:	4639      	mov	r1, r7
 800b2c2:	f7f5 fadb 	bl	800087c <__aeabi_ddiv>
 800b2c6:	f04f 0a00 	mov.w	sl, #0
 800b2ca:	4604      	mov	r4, r0
 800b2cc:	460d      	mov	r5, r1
 800b2ce:	4622      	mov	r2, r4
 800b2d0:	462b      	mov	r3, r5
 800b2d2:	4620      	mov	r0, r4
 800b2d4:	4629      	mov	r1, r5
 800b2d6:	f7f5 f9a7 	bl	8000628 <__aeabi_dmul>
 800b2da:	4602      	mov	r2, r0
 800b2dc:	460b      	mov	r3, r1
 800b2de:	4680      	mov	r8, r0
 800b2e0:	4689      	mov	r9, r1
 800b2e2:	f7f5 f9a1 	bl	8000628 <__aeabi_dmul>
 800b2e6:	a374      	add	r3, pc, #464	; (adr r3, 800b4b8 <atan+0x2b8>)
 800b2e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2ec:	4606      	mov	r6, r0
 800b2ee:	460f      	mov	r7, r1
 800b2f0:	f7f5 f99a 	bl	8000628 <__aeabi_dmul>
 800b2f4:	a372      	add	r3, pc, #456	; (adr r3, 800b4c0 <atan+0x2c0>)
 800b2f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2fa:	f7f4 ffdf 	bl	80002bc <__adddf3>
 800b2fe:	4632      	mov	r2, r6
 800b300:	463b      	mov	r3, r7
 800b302:	f7f5 f991 	bl	8000628 <__aeabi_dmul>
 800b306:	a370      	add	r3, pc, #448	; (adr r3, 800b4c8 <atan+0x2c8>)
 800b308:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b30c:	f7f4 ffd6 	bl	80002bc <__adddf3>
 800b310:	4632      	mov	r2, r6
 800b312:	463b      	mov	r3, r7
 800b314:	f7f5 f988 	bl	8000628 <__aeabi_dmul>
 800b318:	a36d      	add	r3, pc, #436	; (adr r3, 800b4d0 <atan+0x2d0>)
 800b31a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b31e:	f7f4 ffcd 	bl	80002bc <__adddf3>
 800b322:	4632      	mov	r2, r6
 800b324:	463b      	mov	r3, r7
 800b326:	f7f5 f97f 	bl	8000628 <__aeabi_dmul>
 800b32a:	a36b      	add	r3, pc, #428	; (adr r3, 800b4d8 <atan+0x2d8>)
 800b32c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b330:	f7f4 ffc4 	bl	80002bc <__adddf3>
 800b334:	4632      	mov	r2, r6
 800b336:	463b      	mov	r3, r7
 800b338:	f7f5 f976 	bl	8000628 <__aeabi_dmul>
 800b33c:	a368      	add	r3, pc, #416	; (adr r3, 800b4e0 <atan+0x2e0>)
 800b33e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b342:	f7f4 ffbb 	bl	80002bc <__adddf3>
 800b346:	4642      	mov	r2, r8
 800b348:	464b      	mov	r3, r9
 800b34a:	f7f5 f96d 	bl	8000628 <__aeabi_dmul>
 800b34e:	a366      	add	r3, pc, #408	; (adr r3, 800b4e8 <atan+0x2e8>)
 800b350:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b354:	4680      	mov	r8, r0
 800b356:	4689      	mov	r9, r1
 800b358:	4630      	mov	r0, r6
 800b35a:	4639      	mov	r1, r7
 800b35c:	f7f5 f964 	bl	8000628 <__aeabi_dmul>
 800b360:	a363      	add	r3, pc, #396	; (adr r3, 800b4f0 <atan+0x2f0>)
 800b362:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b366:	f7f4 ffa7 	bl	80002b8 <__aeabi_dsub>
 800b36a:	4632      	mov	r2, r6
 800b36c:	463b      	mov	r3, r7
 800b36e:	f7f5 f95b 	bl	8000628 <__aeabi_dmul>
 800b372:	a361      	add	r3, pc, #388	; (adr r3, 800b4f8 <atan+0x2f8>)
 800b374:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b378:	f7f4 ff9e 	bl	80002b8 <__aeabi_dsub>
 800b37c:	4632      	mov	r2, r6
 800b37e:	463b      	mov	r3, r7
 800b380:	f7f5 f952 	bl	8000628 <__aeabi_dmul>
 800b384:	a35e      	add	r3, pc, #376	; (adr r3, 800b500 <atan+0x300>)
 800b386:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b38a:	f7f4 ff95 	bl	80002b8 <__aeabi_dsub>
 800b38e:	4632      	mov	r2, r6
 800b390:	463b      	mov	r3, r7
 800b392:	f7f5 f949 	bl	8000628 <__aeabi_dmul>
 800b396:	a35c      	add	r3, pc, #368	; (adr r3, 800b508 <atan+0x308>)
 800b398:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b39c:	f7f4 ff8c 	bl	80002b8 <__aeabi_dsub>
 800b3a0:	4632      	mov	r2, r6
 800b3a2:	463b      	mov	r3, r7
 800b3a4:	f7f5 f940 	bl	8000628 <__aeabi_dmul>
 800b3a8:	4602      	mov	r2, r0
 800b3aa:	460b      	mov	r3, r1
 800b3ac:	4640      	mov	r0, r8
 800b3ae:	4649      	mov	r1, r9
 800b3b0:	f7f4 ff84 	bl	80002bc <__adddf3>
 800b3b4:	4622      	mov	r2, r4
 800b3b6:	462b      	mov	r3, r5
 800b3b8:	f7f5 f936 	bl	8000628 <__aeabi_dmul>
 800b3bc:	f1ba 3fff 	cmp.w	sl, #4294967295
 800b3c0:	4602      	mov	r2, r0
 800b3c2:	460b      	mov	r3, r1
 800b3c4:	d14b      	bne.n	800b45e <atan+0x25e>
 800b3c6:	4620      	mov	r0, r4
 800b3c8:	4629      	mov	r1, r5
 800b3ca:	f7f4 ff75 	bl	80002b8 <__aeabi_dsub>
 800b3ce:	e72c      	b.n	800b22a <atan+0x2a>
 800b3d0:	ee10 0a10 	vmov	r0, s0
 800b3d4:	4b53      	ldr	r3, [pc, #332]	; (800b524 <atan+0x324>)
 800b3d6:	2200      	movs	r2, #0
 800b3d8:	4629      	mov	r1, r5
 800b3da:	f7f4 ff6d 	bl	80002b8 <__aeabi_dsub>
 800b3de:	4b51      	ldr	r3, [pc, #324]	; (800b524 <atan+0x324>)
 800b3e0:	4606      	mov	r6, r0
 800b3e2:	460f      	mov	r7, r1
 800b3e4:	2200      	movs	r2, #0
 800b3e6:	4620      	mov	r0, r4
 800b3e8:	4629      	mov	r1, r5
 800b3ea:	f7f4 ff67 	bl	80002bc <__adddf3>
 800b3ee:	4602      	mov	r2, r0
 800b3f0:	460b      	mov	r3, r1
 800b3f2:	4630      	mov	r0, r6
 800b3f4:	4639      	mov	r1, r7
 800b3f6:	f7f5 fa41 	bl	800087c <__aeabi_ddiv>
 800b3fa:	f04f 0a01 	mov.w	sl, #1
 800b3fe:	4604      	mov	r4, r0
 800b400:	460d      	mov	r5, r1
 800b402:	e764      	b.n	800b2ce <atan+0xce>
 800b404:	4b49      	ldr	r3, [pc, #292]	; (800b52c <atan+0x32c>)
 800b406:	429e      	cmp	r6, r3
 800b408:	da1d      	bge.n	800b446 <atan+0x246>
 800b40a:	ee10 0a10 	vmov	r0, s0
 800b40e:	4b48      	ldr	r3, [pc, #288]	; (800b530 <atan+0x330>)
 800b410:	2200      	movs	r2, #0
 800b412:	4629      	mov	r1, r5
 800b414:	f7f4 ff50 	bl	80002b8 <__aeabi_dsub>
 800b418:	4b45      	ldr	r3, [pc, #276]	; (800b530 <atan+0x330>)
 800b41a:	4606      	mov	r6, r0
 800b41c:	460f      	mov	r7, r1
 800b41e:	2200      	movs	r2, #0
 800b420:	4620      	mov	r0, r4
 800b422:	4629      	mov	r1, r5
 800b424:	f7f5 f900 	bl	8000628 <__aeabi_dmul>
 800b428:	4b3e      	ldr	r3, [pc, #248]	; (800b524 <atan+0x324>)
 800b42a:	2200      	movs	r2, #0
 800b42c:	f7f4 ff46 	bl	80002bc <__adddf3>
 800b430:	4602      	mov	r2, r0
 800b432:	460b      	mov	r3, r1
 800b434:	4630      	mov	r0, r6
 800b436:	4639      	mov	r1, r7
 800b438:	f7f5 fa20 	bl	800087c <__aeabi_ddiv>
 800b43c:	f04f 0a02 	mov.w	sl, #2
 800b440:	4604      	mov	r4, r0
 800b442:	460d      	mov	r5, r1
 800b444:	e743      	b.n	800b2ce <atan+0xce>
 800b446:	462b      	mov	r3, r5
 800b448:	ee10 2a10 	vmov	r2, s0
 800b44c:	4939      	ldr	r1, [pc, #228]	; (800b534 <atan+0x334>)
 800b44e:	2000      	movs	r0, #0
 800b450:	f7f5 fa14 	bl	800087c <__aeabi_ddiv>
 800b454:	f04f 0a03 	mov.w	sl, #3
 800b458:	4604      	mov	r4, r0
 800b45a:	460d      	mov	r5, r1
 800b45c:	e737      	b.n	800b2ce <atan+0xce>
 800b45e:	4b36      	ldr	r3, [pc, #216]	; (800b538 <atan+0x338>)
 800b460:	4e36      	ldr	r6, [pc, #216]	; (800b53c <atan+0x33c>)
 800b462:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800b466:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 800b46a:	e9da 2300 	ldrd	r2, r3, [sl]
 800b46e:	f7f4 ff23 	bl	80002b8 <__aeabi_dsub>
 800b472:	4622      	mov	r2, r4
 800b474:	462b      	mov	r3, r5
 800b476:	f7f4 ff1f 	bl	80002b8 <__aeabi_dsub>
 800b47a:	4602      	mov	r2, r0
 800b47c:	460b      	mov	r3, r1
 800b47e:	e9d6 0100 	ldrd	r0, r1, [r6]
 800b482:	f7f4 ff19 	bl	80002b8 <__aeabi_dsub>
 800b486:	f1bb 0f00 	cmp.w	fp, #0
 800b48a:	4604      	mov	r4, r0
 800b48c:	460d      	mov	r5, r1
 800b48e:	f6bf aed6 	bge.w	800b23e <atan+0x3e>
 800b492:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b496:	461d      	mov	r5, r3
 800b498:	e6d1      	b.n	800b23e <atan+0x3e>
 800b49a:	a51d      	add	r5, pc, #116	; (adr r5, 800b510 <atan+0x310>)
 800b49c:	e9d5 4500 	ldrd	r4, r5, [r5]
 800b4a0:	e6cd      	b.n	800b23e <atan+0x3e>
 800b4a2:	bf00      	nop
 800b4a4:	f3af 8000 	nop.w
 800b4a8:	54442d18 	.word	0x54442d18
 800b4ac:	bff921fb 	.word	0xbff921fb
 800b4b0:	8800759c 	.word	0x8800759c
 800b4b4:	7e37e43c 	.word	0x7e37e43c
 800b4b8:	e322da11 	.word	0xe322da11
 800b4bc:	3f90ad3a 	.word	0x3f90ad3a
 800b4c0:	24760deb 	.word	0x24760deb
 800b4c4:	3fa97b4b 	.word	0x3fa97b4b
 800b4c8:	a0d03d51 	.word	0xa0d03d51
 800b4cc:	3fb10d66 	.word	0x3fb10d66
 800b4d0:	c54c206e 	.word	0xc54c206e
 800b4d4:	3fb745cd 	.word	0x3fb745cd
 800b4d8:	920083ff 	.word	0x920083ff
 800b4dc:	3fc24924 	.word	0x3fc24924
 800b4e0:	5555550d 	.word	0x5555550d
 800b4e4:	3fd55555 	.word	0x3fd55555
 800b4e8:	2c6a6c2f 	.word	0x2c6a6c2f
 800b4ec:	bfa2b444 	.word	0xbfa2b444
 800b4f0:	52defd9a 	.word	0x52defd9a
 800b4f4:	3fadde2d 	.word	0x3fadde2d
 800b4f8:	af749a6d 	.word	0xaf749a6d
 800b4fc:	3fb3b0f2 	.word	0x3fb3b0f2
 800b500:	fe231671 	.word	0xfe231671
 800b504:	3fbc71c6 	.word	0x3fbc71c6
 800b508:	9998ebc4 	.word	0x9998ebc4
 800b50c:	3fc99999 	.word	0x3fc99999
 800b510:	54442d18 	.word	0x54442d18
 800b514:	3ff921fb 	.word	0x3ff921fb
 800b518:	440fffff 	.word	0x440fffff
 800b51c:	7ff00000 	.word	0x7ff00000
 800b520:	3fdbffff 	.word	0x3fdbffff
 800b524:	3ff00000 	.word	0x3ff00000
 800b528:	3ff2ffff 	.word	0x3ff2ffff
 800b52c:	40038000 	.word	0x40038000
 800b530:	3ff80000 	.word	0x3ff80000
 800b534:	bff00000 	.word	0xbff00000
 800b538:	0800c1d0 	.word	0x0800c1d0
 800b53c:	0800c1b0 	.word	0x0800c1b0

0800b540 <fabs>:
 800b540:	ec51 0b10 	vmov	r0, r1, d0
 800b544:	ee10 2a10 	vmov	r2, s0
 800b548:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800b54c:	ec43 2b10 	vmov	d0, r2, r3
 800b550:	4770      	bx	lr
 800b552:	0000      	movs	r0, r0
 800b554:	0000      	movs	r0, r0
	...

0800b558 <floor>:
 800b558:	ec51 0b10 	vmov	r0, r1, d0
 800b55c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b560:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800b564:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800b568:	2e13      	cmp	r6, #19
 800b56a:	ee10 5a10 	vmov	r5, s0
 800b56e:	ee10 8a10 	vmov	r8, s0
 800b572:	460c      	mov	r4, r1
 800b574:	dc32      	bgt.n	800b5dc <floor+0x84>
 800b576:	2e00      	cmp	r6, #0
 800b578:	da14      	bge.n	800b5a4 <floor+0x4c>
 800b57a:	a333      	add	r3, pc, #204	; (adr r3, 800b648 <floor+0xf0>)
 800b57c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b580:	f7f4 fe9c 	bl	80002bc <__adddf3>
 800b584:	2200      	movs	r2, #0
 800b586:	2300      	movs	r3, #0
 800b588:	f7f5 fade 	bl	8000b48 <__aeabi_dcmpgt>
 800b58c:	b138      	cbz	r0, 800b59e <floor+0x46>
 800b58e:	2c00      	cmp	r4, #0
 800b590:	da57      	bge.n	800b642 <floor+0xea>
 800b592:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800b596:	431d      	orrs	r5, r3
 800b598:	d001      	beq.n	800b59e <floor+0x46>
 800b59a:	4c2d      	ldr	r4, [pc, #180]	; (800b650 <floor+0xf8>)
 800b59c:	2500      	movs	r5, #0
 800b59e:	4621      	mov	r1, r4
 800b5a0:	4628      	mov	r0, r5
 800b5a2:	e025      	b.n	800b5f0 <floor+0x98>
 800b5a4:	4f2b      	ldr	r7, [pc, #172]	; (800b654 <floor+0xfc>)
 800b5a6:	4137      	asrs	r7, r6
 800b5a8:	ea01 0307 	and.w	r3, r1, r7
 800b5ac:	4303      	orrs	r3, r0
 800b5ae:	d01f      	beq.n	800b5f0 <floor+0x98>
 800b5b0:	a325      	add	r3, pc, #148	; (adr r3, 800b648 <floor+0xf0>)
 800b5b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5b6:	f7f4 fe81 	bl	80002bc <__adddf3>
 800b5ba:	2200      	movs	r2, #0
 800b5bc:	2300      	movs	r3, #0
 800b5be:	f7f5 fac3 	bl	8000b48 <__aeabi_dcmpgt>
 800b5c2:	2800      	cmp	r0, #0
 800b5c4:	d0eb      	beq.n	800b59e <floor+0x46>
 800b5c6:	2c00      	cmp	r4, #0
 800b5c8:	bfbe      	ittt	lt
 800b5ca:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800b5ce:	fa43 f606 	asrlt.w	r6, r3, r6
 800b5d2:	19a4      	addlt	r4, r4, r6
 800b5d4:	ea24 0407 	bic.w	r4, r4, r7
 800b5d8:	2500      	movs	r5, #0
 800b5da:	e7e0      	b.n	800b59e <floor+0x46>
 800b5dc:	2e33      	cmp	r6, #51	; 0x33
 800b5de:	dd0b      	ble.n	800b5f8 <floor+0xa0>
 800b5e0:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800b5e4:	d104      	bne.n	800b5f0 <floor+0x98>
 800b5e6:	ee10 2a10 	vmov	r2, s0
 800b5ea:	460b      	mov	r3, r1
 800b5ec:	f7f4 fe66 	bl	80002bc <__adddf3>
 800b5f0:	ec41 0b10 	vmov	d0, r0, r1
 800b5f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b5f8:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800b5fc:	f04f 33ff 	mov.w	r3, #4294967295
 800b600:	fa23 f707 	lsr.w	r7, r3, r7
 800b604:	4207      	tst	r7, r0
 800b606:	d0f3      	beq.n	800b5f0 <floor+0x98>
 800b608:	a30f      	add	r3, pc, #60	; (adr r3, 800b648 <floor+0xf0>)
 800b60a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b60e:	f7f4 fe55 	bl	80002bc <__adddf3>
 800b612:	2200      	movs	r2, #0
 800b614:	2300      	movs	r3, #0
 800b616:	f7f5 fa97 	bl	8000b48 <__aeabi_dcmpgt>
 800b61a:	2800      	cmp	r0, #0
 800b61c:	d0bf      	beq.n	800b59e <floor+0x46>
 800b61e:	2c00      	cmp	r4, #0
 800b620:	da02      	bge.n	800b628 <floor+0xd0>
 800b622:	2e14      	cmp	r6, #20
 800b624:	d103      	bne.n	800b62e <floor+0xd6>
 800b626:	3401      	adds	r4, #1
 800b628:	ea25 0507 	bic.w	r5, r5, r7
 800b62c:	e7b7      	b.n	800b59e <floor+0x46>
 800b62e:	2301      	movs	r3, #1
 800b630:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800b634:	fa03 f606 	lsl.w	r6, r3, r6
 800b638:	4435      	add	r5, r6
 800b63a:	4545      	cmp	r5, r8
 800b63c:	bf38      	it	cc
 800b63e:	18e4      	addcc	r4, r4, r3
 800b640:	e7f2      	b.n	800b628 <floor+0xd0>
 800b642:	2500      	movs	r5, #0
 800b644:	462c      	mov	r4, r5
 800b646:	e7aa      	b.n	800b59e <floor+0x46>
 800b648:	8800759c 	.word	0x8800759c
 800b64c:	7e37e43c 	.word	0x7e37e43c
 800b650:	bff00000 	.word	0xbff00000
 800b654:	000fffff 	.word	0x000fffff

0800b658 <scalbn>:
 800b658:	b570      	push	{r4, r5, r6, lr}
 800b65a:	ec55 4b10 	vmov	r4, r5, d0
 800b65e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800b662:	4606      	mov	r6, r0
 800b664:	462b      	mov	r3, r5
 800b666:	b99a      	cbnz	r2, 800b690 <scalbn+0x38>
 800b668:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800b66c:	4323      	orrs	r3, r4
 800b66e:	d036      	beq.n	800b6de <scalbn+0x86>
 800b670:	4b39      	ldr	r3, [pc, #228]	; (800b758 <scalbn+0x100>)
 800b672:	4629      	mov	r1, r5
 800b674:	ee10 0a10 	vmov	r0, s0
 800b678:	2200      	movs	r2, #0
 800b67a:	f7f4 ffd5 	bl	8000628 <__aeabi_dmul>
 800b67e:	4b37      	ldr	r3, [pc, #220]	; (800b75c <scalbn+0x104>)
 800b680:	429e      	cmp	r6, r3
 800b682:	4604      	mov	r4, r0
 800b684:	460d      	mov	r5, r1
 800b686:	da10      	bge.n	800b6aa <scalbn+0x52>
 800b688:	a32b      	add	r3, pc, #172	; (adr r3, 800b738 <scalbn+0xe0>)
 800b68a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b68e:	e03a      	b.n	800b706 <scalbn+0xae>
 800b690:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800b694:	428a      	cmp	r2, r1
 800b696:	d10c      	bne.n	800b6b2 <scalbn+0x5a>
 800b698:	ee10 2a10 	vmov	r2, s0
 800b69c:	4620      	mov	r0, r4
 800b69e:	4629      	mov	r1, r5
 800b6a0:	f7f4 fe0c 	bl	80002bc <__adddf3>
 800b6a4:	4604      	mov	r4, r0
 800b6a6:	460d      	mov	r5, r1
 800b6a8:	e019      	b.n	800b6de <scalbn+0x86>
 800b6aa:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800b6ae:	460b      	mov	r3, r1
 800b6b0:	3a36      	subs	r2, #54	; 0x36
 800b6b2:	4432      	add	r2, r6
 800b6b4:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800b6b8:	428a      	cmp	r2, r1
 800b6ba:	dd08      	ble.n	800b6ce <scalbn+0x76>
 800b6bc:	2d00      	cmp	r5, #0
 800b6be:	a120      	add	r1, pc, #128	; (adr r1, 800b740 <scalbn+0xe8>)
 800b6c0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b6c4:	da1c      	bge.n	800b700 <scalbn+0xa8>
 800b6c6:	a120      	add	r1, pc, #128	; (adr r1, 800b748 <scalbn+0xf0>)
 800b6c8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b6cc:	e018      	b.n	800b700 <scalbn+0xa8>
 800b6ce:	2a00      	cmp	r2, #0
 800b6d0:	dd08      	ble.n	800b6e4 <scalbn+0x8c>
 800b6d2:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800b6d6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800b6da:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800b6de:	ec45 4b10 	vmov	d0, r4, r5
 800b6e2:	bd70      	pop	{r4, r5, r6, pc}
 800b6e4:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800b6e8:	da19      	bge.n	800b71e <scalbn+0xc6>
 800b6ea:	f24c 3350 	movw	r3, #50000	; 0xc350
 800b6ee:	429e      	cmp	r6, r3
 800b6f0:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800b6f4:	dd0a      	ble.n	800b70c <scalbn+0xb4>
 800b6f6:	a112      	add	r1, pc, #72	; (adr r1, 800b740 <scalbn+0xe8>)
 800b6f8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b6fc:	2b00      	cmp	r3, #0
 800b6fe:	d1e2      	bne.n	800b6c6 <scalbn+0x6e>
 800b700:	a30f      	add	r3, pc, #60	; (adr r3, 800b740 <scalbn+0xe8>)
 800b702:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b706:	f7f4 ff8f 	bl	8000628 <__aeabi_dmul>
 800b70a:	e7cb      	b.n	800b6a4 <scalbn+0x4c>
 800b70c:	a10a      	add	r1, pc, #40	; (adr r1, 800b738 <scalbn+0xe0>)
 800b70e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b712:	2b00      	cmp	r3, #0
 800b714:	d0b8      	beq.n	800b688 <scalbn+0x30>
 800b716:	a10e      	add	r1, pc, #56	; (adr r1, 800b750 <scalbn+0xf8>)
 800b718:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b71c:	e7b4      	b.n	800b688 <scalbn+0x30>
 800b71e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800b722:	3236      	adds	r2, #54	; 0x36
 800b724:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800b728:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800b72c:	4620      	mov	r0, r4
 800b72e:	4b0c      	ldr	r3, [pc, #48]	; (800b760 <scalbn+0x108>)
 800b730:	2200      	movs	r2, #0
 800b732:	e7e8      	b.n	800b706 <scalbn+0xae>
 800b734:	f3af 8000 	nop.w
 800b738:	c2f8f359 	.word	0xc2f8f359
 800b73c:	01a56e1f 	.word	0x01a56e1f
 800b740:	8800759c 	.word	0x8800759c
 800b744:	7e37e43c 	.word	0x7e37e43c
 800b748:	8800759c 	.word	0x8800759c
 800b74c:	fe37e43c 	.word	0xfe37e43c
 800b750:	c2f8f359 	.word	0xc2f8f359
 800b754:	81a56e1f 	.word	0x81a56e1f
 800b758:	43500000 	.word	0x43500000
 800b75c:	ffff3cb0 	.word	0xffff3cb0
 800b760:	3c900000 	.word	0x3c900000

0800b764 <_init>:
 800b764:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b766:	bf00      	nop
 800b768:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b76a:	bc08      	pop	{r3}
 800b76c:	469e      	mov	lr, r3
 800b76e:	4770      	bx	lr

0800b770 <_fini>:
 800b770:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b772:	bf00      	nop
 800b774:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b776:	bc08      	pop	{r3}
 800b778:	469e      	mov	lr, r3
 800b77a:	4770      	bx	lr
