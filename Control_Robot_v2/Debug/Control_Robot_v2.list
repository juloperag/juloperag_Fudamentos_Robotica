
Control_Robot_v2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009a64  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007ac  08009c08  08009c08  00019c08  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a3b4  0800a3b4  000201f0  2**0
                  CONTENTS
  4 .ARM          00000008  0800a3b4  0800a3b4  0001a3b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a3bc  0800a3bc  000201f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a3bc  0800a3bc  0001a3bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a3c0  0800a3c0  0001a3c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f0  20000000  0800a3c4  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000a68  200001f0  0800a5b4  000201f0  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000c58  0800a5b4  00020c58  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   000052a5  00000000  00000000  00020220  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001343  00000000  00000000  000254c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000004c8  00000000  00000000  00026808  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000410  00000000  00000000  00026cd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001108f  00000000  00000000  000270e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00006e85  00000000  00000000  0003816f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0005874f  00000000  00000000  0003eff4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00097743  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002964  00000000  00000000  00097794  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001f0 	.word	0x200001f0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08009bec 	.word	0x08009bec

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001f4 	.word	0x200001f4
 80001dc:	08009bec 	.word	0x08009bec

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2uiz>:
 8000bd8:	004a      	lsls	r2, r1, #1
 8000bda:	d211      	bcs.n	8000c00 <__aeabi_d2uiz+0x28>
 8000bdc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000be0:	d211      	bcs.n	8000c06 <__aeabi_d2uiz+0x2e>
 8000be2:	d50d      	bpl.n	8000c00 <__aeabi_d2uiz+0x28>
 8000be4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bec:	d40e      	bmi.n	8000c0c <__aeabi_d2uiz+0x34>
 8000bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_d2uiz+0x3a>
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_d2f>:
 8000c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c20:	bf24      	itt	cs
 8000c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c2a:	d90d      	bls.n	8000c48 <__aeabi_d2f+0x30>
 8000c2c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c38:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c40:	bf08      	it	eq
 8000c42:	f020 0001 	biceq.w	r0, r0, #1
 8000c46:	4770      	bx	lr
 8000c48:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c4c:	d121      	bne.n	8000c92 <__aeabi_d2f+0x7a>
 8000c4e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c52:	bfbc      	itt	lt
 8000c54:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c58:	4770      	bxlt	lr
 8000c5a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c62:	f1c2 0218 	rsb	r2, r2, #24
 8000c66:	f1c2 0c20 	rsb	ip, r2, #32
 8000c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c72:	bf18      	it	ne
 8000c74:	f040 0001 	orrne.w	r0, r0, #1
 8000c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c84:	ea40 000c 	orr.w	r0, r0, ip
 8000c88:	fa23 f302 	lsr.w	r3, r3, r2
 8000c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c90:	e7cc      	b.n	8000c2c <__aeabi_d2f+0x14>
 8000c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c96:	d107      	bne.n	8000ca8 <__aeabi_d2f+0x90>
 8000c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c9c:	bf1e      	ittt	ne
 8000c9e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ca2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ca6:	4770      	bxne	lr
 8000ca8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cb0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_ldivmod>:
 8000cb8:	b97b      	cbnz	r3, 8000cda <__aeabi_ldivmod+0x22>
 8000cba:	b972      	cbnz	r2, 8000cda <__aeabi_ldivmod+0x22>
 8000cbc:	2900      	cmp	r1, #0
 8000cbe:	bfbe      	ittt	lt
 8000cc0:	2000      	movlt	r0, #0
 8000cc2:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000cc6:	e006      	blt.n	8000cd6 <__aeabi_ldivmod+0x1e>
 8000cc8:	bf08      	it	eq
 8000cca:	2800      	cmpeq	r0, #0
 8000ccc:	bf1c      	itt	ne
 8000cce:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000cd2:	f04f 30ff 	movne.w	r0, #4294967295
 8000cd6:	f000 b9dd 	b.w	8001094 <__aeabi_idiv0>
 8000cda:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cde:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce2:	2900      	cmp	r1, #0
 8000ce4:	db09      	blt.n	8000cfa <__aeabi_ldivmod+0x42>
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	db1a      	blt.n	8000d20 <__aeabi_ldivmod+0x68>
 8000cea:	f000 f86b 	bl	8000dc4 <__udivmoddi4>
 8000cee:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf6:	b004      	add	sp, #16
 8000cf8:	4770      	bx	lr
 8000cfa:	4240      	negs	r0, r0
 8000cfc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	db1b      	blt.n	8000d3c <__aeabi_ldivmod+0x84>
 8000d04:	f000 f85e 	bl	8000dc4 <__udivmoddi4>
 8000d08:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d0c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d10:	b004      	add	sp, #16
 8000d12:	4240      	negs	r0, r0
 8000d14:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d18:	4252      	negs	r2, r2
 8000d1a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d1e:	4770      	bx	lr
 8000d20:	4252      	negs	r2, r2
 8000d22:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d26:	f000 f84d 	bl	8000dc4 <__udivmoddi4>
 8000d2a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d2e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d32:	b004      	add	sp, #16
 8000d34:	4240      	negs	r0, r0
 8000d36:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d3a:	4770      	bx	lr
 8000d3c:	4252      	negs	r2, r2
 8000d3e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d42:	f000 f83f 	bl	8000dc4 <__udivmoddi4>
 8000d46:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d4a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d4e:	b004      	add	sp, #16
 8000d50:	4252      	negs	r2, r2
 8000d52:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d56:	4770      	bx	lr

08000d58 <__aeabi_d2lz>:
 8000d58:	b538      	push	{r3, r4, r5, lr}
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	4604      	mov	r4, r0
 8000d60:	460d      	mov	r5, r1
 8000d62:	f7ff fed3 	bl	8000b0c <__aeabi_dcmplt>
 8000d66:	b928      	cbnz	r0, 8000d74 <__aeabi_d2lz+0x1c>
 8000d68:	4620      	mov	r0, r4
 8000d6a:	4629      	mov	r1, r5
 8000d6c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d70:	f000 b80a 	b.w	8000d88 <__aeabi_d2ulz>
 8000d74:	4620      	mov	r0, r4
 8000d76:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d7a:	f000 f805 	bl	8000d88 <__aeabi_d2ulz>
 8000d7e:	4240      	negs	r0, r0
 8000d80:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d84:	bd38      	pop	{r3, r4, r5, pc}
 8000d86:	bf00      	nop

08000d88 <__aeabi_d2ulz>:
 8000d88:	b5d0      	push	{r4, r6, r7, lr}
 8000d8a:	4b0c      	ldr	r3, [pc, #48]	; (8000dbc <__aeabi_d2ulz+0x34>)
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	4606      	mov	r6, r0
 8000d90:	460f      	mov	r7, r1
 8000d92:	f7ff fc49 	bl	8000628 <__aeabi_dmul>
 8000d96:	f7ff ff1f 	bl	8000bd8 <__aeabi_d2uiz>
 8000d9a:	4604      	mov	r4, r0
 8000d9c:	f7ff fbca 	bl	8000534 <__aeabi_ui2d>
 8000da0:	4b07      	ldr	r3, [pc, #28]	; (8000dc0 <__aeabi_d2ulz+0x38>)
 8000da2:	2200      	movs	r2, #0
 8000da4:	f7ff fc40 	bl	8000628 <__aeabi_dmul>
 8000da8:	4602      	mov	r2, r0
 8000daa:	460b      	mov	r3, r1
 8000dac:	4630      	mov	r0, r6
 8000dae:	4639      	mov	r1, r7
 8000db0:	f7ff fa82 	bl	80002b8 <__aeabi_dsub>
 8000db4:	f7ff ff10 	bl	8000bd8 <__aeabi_d2uiz>
 8000db8:	4621      	mov	r1, r4
 8000dba:	bdd0      	pop	{r4, r6, r7, pc}
 8000dbc:	3df00000 	.word	0x3df00000
 8000dc0:	41f00000 	.word	0x41f00000

08000dc4 <__udivmoddi4>:
 8000dc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000dc8:	9d08      	ldr	r5, [sp, #32]
 8000dca:	4604      	mov	r4, r0
 8000dcc:	468e      	mov	lr, r1
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d14d      	bne.n	8000e6e <__udivmoddi4+0xaa>
 8000dd2:	428a      	cmp	r2, r1
 8000dd4:	4694      	mov	ip, r2
 8000dd6:	d969      	bls.n	8000eac <__udivmoddi4+0xe8>
 8000dd8:	fab2 f282 	clz	r2, r2
 8000ddc:	b152      	cbz	r2, 8000df4 <__udivmoddi4+0x30>
 8000dde:	fa01 f302 	lsl.w	r3, r1, r2
 8000de2:	f1c2 0120 	rsb	r1, r2, #32
 8000de6:	fa20 f101 	lsr.w	r1, r0, r1
 8000dea:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dee:	ea41 0e03 	orr.w	lr, r1, r3
 8000df2:	4094      	lsls	r4, r2
 8000df4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000df8:	0c21      	lsrs	r1, r4, #16
 8000dfa:	fbbe f6f8 	udiv	r6, lr, r8
 8000dfe:	fa1f f78c 	uxth.w	r7, ip
 8000e02:	fb08 e316 	mls	r3, r8, r6, lr
 8000e06:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000e0a:	fb06 f107 	mul.w	r1, r6, r7
 8000e0e:	4299      	cmp	r1, r3
 8000e10:	d90a      	bls.n	8000e28 <__udivmoddi4+0x64>
 8000e12:	eb1c 0303 	adds.w	r3, ip, r3
 8000e16:	f106 30ff 	add.w	r0, r6, #4294967295
 8000e1a:	f080 811f 	bcs.w	800105c <__udivmoddi4+0x298>
 8000e1e:	4299      	cmp	r1, r3
 8000e20:	f240 811c 	bls.w	800105c <__udivmoddi4+0x298>
 8000e24:	3e02      	subs	r6, #2
 8000e26:	4463      	add	r3, ip
 8000e28:	1a5b      	subs	r3, r3, r1
 8000e2a:	b2a4      	uxth	r4, r4
 8000e2c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e30:	fb08 3310 	mls	r3, r8, r0, r3
 8000e34:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e38:	fb00 f707 	mul.w	r7, r0, r7
 8000e3c:	42a7      	cmp	r7, r4
 8000e3e:	d90a      	bls.n	8000e56 <__udivmoddi4+0x92>
 8000e40:	eb1c 0404 	adds.w	r4, ip, r4
 8000e44:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e48:	f080 810a 	bcs.w	8001060 <__udivmoddi4+0x29c>
 8000e4c:	42a7      	cmp	r7, r4
 8000e4e:	f240 8107 	bls.w	8001060 <__udivmoddi4+0x29c>
 8000e52:	4464      	add	r4, ip
 8000e54:	3802      	subs	r0, #2
 8000e56:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e5a:	1be4      	subs	r4, r4, r7
 8000e5c:	2600      	movs	r6, #0
 8000e5e:	b11d      	cbz	r5, 8000e68 <__udivmoddi4+0xa4>
 8000e60:	40d4      	lsrs	r4, r2
 8000e62:	2300      	movs	r3, #0
 8000e64:	e9c5 4300 	strd	r4, r3, [r5]
 8000e68:	4631      	mov	r1, r6
 8000e6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e6e:	428b      	cmp	r3, r1
 8000e70:	d909      	bls.n	8000e86 <__udivmoddi4+0xc2>
 8000e72:	2d00      	cmp	r5, #0
 8000e74:	f000 80ef 	beq.w	8001056 <__udivmoddi4+0x292>
 8000e78:	2600      	movs	r6, #0
 8000e7a:	e9c5 0100 	strd	r0, r1, [r5]
 8000e7e:	4630      	mov	r0, r6
 8000e80:	4631      	mov	r1, r6
 8000e82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e86:	fab3 f683 	clz	r6, r3
 8000e8a:	2e00      	cmp	r6, #0
 8000e8c:	d14a      	bne.n	8000f24 <__udivmoddi4+0x160>
 8000e8e:	428b      	cmp	r3, r1
 8000e90:	d302      	bcc.n	8000e98 <__udivmoddi4+0xd4>
 8000e92:	4282      	cmp	r2, r0
 8000e94:	f200 80f9 	bhi.w	800108a <__udivmoddi4+0x2c6>
 8000e98:	1a84      	subs	r4, r0, r2
 8000e9a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e9e:	2001      	movs	r0, #1
 8000ea0:	469e      	mov	lr, r3
 8000ea2:	2d00      	cmp	r5, #0
 8000ea4:	d0e0      	beq.n	8000e68 <__udivmoddi4+0xa4>
 8000ea6:	e9c5 4e00 	strd	r4, lr, [r5]
 8000eaa:	e7dd      	b.n	8000e68 <__udivmoddi4+0xa4>
 8000eac:	b902      	cbnz	r2, 8000eb0 <__udivmoddi4+0xec>
 8000eae:	deff      	udf	#255	; 0xff
 8000eb0:	fab2 f282 	clz	r2, r2
 8000eb4:	2a00      	cmp	r2, #0
 8000eb6:	f040 8092 	bne.w	8000fde <__udivmoddi4+0x21a>
 8000eba:	eba1 010c 	sub.w	r1, r1, ip
 8000ebe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ec2:	fa1f fe8c 	uxth.w	lr, ip
 8000ec6:	2601      	movs	r6, #1
 8000ec8:	0c20      	lsrs	r0, r4, #16
 8000eca:	fbb1 f3f7 	udiv	r3, r1, r7
 8000ece:	fb07 1113 	mls	r1, r7, r3, r1
 8000ed2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ed6:	fb0e f003 	mul.w	r0, lr, r3
 8000eda:	4288      	cmp	r0, r1
 8000edc:	d908      	bls.n	8000ef0 <__udivmoddi4+0x12c>
 8000ede:	eb1c 0101 	adds.w	r1, ip, r1
 8000ee2:	f103 38ff 	add.w	r8, r3, #4294967295
 8000ee6:	d202      	bcs.n	8000eee <__udivmoddi4+0x12a>
 8000ee8:	4288      	cmp	r0, r1
 8000eea:	f200 80cb 	bhi.w	8001084 <__udivmoddi4+0x2c0>
 8000eee:	4643      	mov	r3, r8
 8000ef0:	1a09      	subs	r1, r1, r0
 8000ef2:	b2a4      	uxth	r4, r4
 8000ef4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ef8:	fb07 1110 	mls	r1, r7, r0, r1
 8000efc:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000f00:	fb0e fe00 	mul.w	lr, lr, r0
 8000f04:	45a6      	cmp	lr, r4
 8000f06:	d908      	bls.n	8000f1a <__udivmoddi4+0x156>
 8000f08:	eb1c 0404 	adds.w	r4, ip, r4
 8000f0c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f10:	d202      	bcs.n	8000f18 <__udivmoddi4+0x154>
 8000f12:	45a6      	cmp	lr, r4
 8000f14:	f200 80bb 	bhi.w	800108e <__udivmoddi4+0x2ca>
 8000f18:	4608      	mov	r0, r1
 8000f1a:	eba4 040e 	sub.w	r4, r4, lr
 8000f1e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000f22:	e79c      	b.n	8000e5e <__udivmoddi4+0x9a>
 8000f24:	f1c6 0720 	rsb	r7, r6, #32
 8000f28:	40b3      	lsls	r3, r6
 8000f2a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000f2e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000f32:	fa20 f407 	lsr.w	r4, r0, r7
 8000f36:	fa01 f306 	lsl.w	r3, r1, r6
 8000f3a:	431c      	orrs	r4, r3
 8000f3c:	40f9      	lsrs	r1, r7
 8000f3e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000f42:	fa00 f306 	lsl.w	r3, r0, r6
 8000f46:	fbb1 f8f9 	udiv	r8, r1, r9
 8000f4a:	0c20      	lsrs	r0, r4, #16
 8000f4c:	fa1f fe8c 	uxth.w	lr, ip
 8000f50:	fb09 1118 	mls	r1, r9, r8, r1
 8000f54:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000f58:	fb08 f00e 	mul.w	r0, r8, lr
 8000f5c:	4288      	cmp	r0, r1
 8000f5e:	fa02 f206 	lsl.w	r2, r2, r6
 8000f62:	d90b      	bls.n	8000f7c <__udivmoddi4+0x1b8>
 8000f64:	eb1c 0101 	adds.w	r1, ip, r1
 8000f68:	f108 3aff 	add.w	sl, r8, #4294967295
 8000f6c:	f080 8088 	bcs.w	8001080 <__udivmoddi4+0x2bc>
 8000f70:	4288      	cmp	r0, r1
 8000f72:	f240 8085 	bls.w	8001080 <__udivmoddi4+0x2bc>
 8000f76:	f1a8 0802 	sub.w	r8, r8, #2
 8000f7a:	4461      	add	r1, ip
 8000f7c:	1a09      	subs	r1, r1, r0
 8000f7e:	b2a4      	uxth	r4, r4
 8000f80:	fbb1 f0f9 	udiv	r0, r1, r9
 8000f84:	fb09 1110 	mls	r1, r9, r0, r1
 8000f88:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000f8c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f90:	458e      	cmp	lr, r1
 8000f92:	d908      	bls.n	8000fa6 <__udivmoddi4+0x1e2>
 8000f94:	eb1c 0101 	adds.w	r1, ip, r1
 8000f98:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f9c:	d26c      	bcs.n	8001078 <__udivmoddi4+0x2b4>
 8000f9e:	458e      	cmp	lr, r1
 8000fa0:	d96a      	bls.n	8001078 <__udivmoddi4+0x2b4>
 8000fa2:	3802      	subs	r0, #2
 8000fa4:	4461      	add	r1, ip
 8000fa6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000faa:	fba0 9402 	umull	r9, r4, r0, r2
 8000fae:	eba1 010e 	sub.w	r1, r1, lr
 8000fb2:	42a1      	cmp	r1, r4
 8000fb4:	46c8      	mov	r8, r9
 8000fb6:	46a6      	mov	lr, r4
 8000fb8:	d356      	bcc.n	8001068 <__udivmoddi4+0x2a4>
 8000fba:	d053      	beq.n	8001064 <__udivmoddi4+0x2a0>
 8000fbc:	b15d      	cbz	r5, 8000fd6 <__udivmoddi4+0x212>
 8000fbe:	ebb3 0208 	subs.w	r2, r3, r8
 8000fc2:	eb61 010e 	sbc.w	r1, r1, lr
 8000fc6:	fa01 f707 	lsl.w	r7, r1, r7
 8000fca:	fa22 f306 	lsr.w	r3, r2, r6
 8000fce:	40f1      	lsrs	r1, r6
 8000fd0:	431f      	orrs	r7, r3
 8000fd2:	e9c5 7100 	strd	r7, r1, [r5]
 8000fd6:	2600      	movs	r6, #0
 8000fd8:	4631      	mov	r1, r6
 8000fda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fde:	f1c2 0320 	rsb	r3, r2, #32
 8000fe2:	40d8      	lsrs	r0, r3
 8000fe4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000fe8:	fa21 f303 	lsr.w	r3, r1, r3
 8000fec:	4091      	lsls	r1, r2
 8000fee:	4301      	orrs	r1, r0
 8000ff0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ff4:	fa1f fe8c 	uxth.w	lr, ip
 8000ff8:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ffc:	fb07 3610 	mls	r6, r7, r0, r3
 8001000:	0c0b      	lsrs	r3, r1, #16
 8001002:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8001006:	fb00 f60e 	mul.w	r6, r0, lr
 800100a:	429e      	cmp	r6, r3
 800100c:	fa04 f402 	lsl.w	r4, r4, r2
 8001010:	d908      	bls.n	8001024 <__udivmoddi4+0x260>
 8001012:	eb1c 0303 	adds.w	r3, ip, r3
 8001016:	f100 38ff 	add.w	r8, r0, #4294967295
 800101a:	d22f      	bcs.n	800107c <__udivmoddi4+0x2b8>
 800101c:	429e      	cmp	r6, r3
 800101e:	d92d      	bls.n	800107c <__udivmoddi4+0x2b8>
 8001020:	3802      	subs	r0, #2
 8001022:	4463      	add	r3, ip
 8001024:	1b9b      	subs	r3, r3, r6
 8001026:	b289      	uxth	r1, r1
 8001028:	fbb3 f6f7 	udiv	r6, r3, r7
 800102c:	fb07 3316 	mls	r3, r7, r6, r3
 8001030:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8001034:	fb06 f30e 	mul.w	r3, r6, lr
 8001038:	428b      	cmp	r3, r1
 800103a:	d908      	bls.n	800104e <__udivmoddi4+0x28a>
 800103c:	eb1c 0101 	adds.w	r1, ip, r1
 8001040:	f106 38ff 	add.w	r8, r6, #4294967295
 8001044:	d216      	bcs.n	8001074 <__udivmoddi4+0x2b0>
 8001046:	428b      	cmp	r3, r1
 8001048:	d914      	bls.n	8001074 <__udivmoddi4+0x2b0>
 800104a:	3e02      	subs	r6, #2
 800104c:	4461      	add	r1, ip
 800104e:	1ac9      	subs	r1, r1, r3
 8001050:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8001054:	e738      	b.n	8000ec8 <__udivmoddi4+0x104>
 8001056:	462e      	mov	r6, r5
 8001058:	4628      	mov	r0, r5
 800105a:	e705      	b.n	8000e68 <__udivmoddi4+0xa4>
 800105c:	4606      	mov	r6, r0
 800105e:	e6e3      	b.n	8000e28 <__udivmoddi4+0x64>
 8001060:	4618      	mov	r0, r3
 8001062:	e6f8      	b.n	8000e56 <__udivmoddi4+0x92>
 8001064:	454b      	cmp	r3, r9
 8001066:	d2a9      	bcs.n	8000fbc <__udivmoddi4+0x1f8>
 8001068:	ebb9 0802 	subs.w	r8, r9, r2
 800106c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8001070:	3801      	subs	r0, #1
 8001072:	e7a3      	b.n	8000fbc <__udivmoddi4+0x1f8>
 8001074:	4646      	mov	r6, r8
 8001076:	e7ea      	b.n	800104e <__udivmoddi4+0x28a>
 8001078:	4620      	mov	r0, r4
 800107a:	e794      	b.n	8000fa6 <__udivmoddi4+0x1e2>
 800107c:	4640      	mov	r0, r8
 800107e:	e7d1      	b.n	8001024 <__udivmoddi4+0x260>
 8001080:	46d0      	mov	r8, sl
 8001082:	e77b      	b.n	8000f7c <__udivmoddi4+0x1b8>
 8001084:	3b02      	subs	r3, #2
 8001086:	4461      	add	r1, ip
 8001088:	e732      	b.n	8000ef0 <__udivmoddi4+0x12c>
 800108a:	4630      	mov	r0, r6
 800108c:	e709      	b.n	8000ea2 <__udivmoddi4+0xde>
 800108e:	4464      	add	r4, ip
 8001090:	3802      	subs	r0, #2
 8001092:	e742      	b.n	8000f1a <__udivmoddi4+0x156>

08001094 <__aeabi_idiv0>:
 8001094:	4770      	bx	lr
 8001096:	bf00      	nop

08001098 <updateDuttyMotor>:
#include <MotorDriver.h>


//Funcion para actualizar el dutty del pwm
void updateDuttyMotor(Motor_Handler_t *ptrMotorHandler,  float newValue)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b082      	sub	sp, #8
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
 80010a0:	ed87 0a00 	vstr	s0, [r7]
		//Guardar valor del dutty
		ptrMotorHandler->configMotor.dutty = newValue;
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	683a      	ldr	r2, [r7, #0]
 80010a8:	605a      	str	r2, [r3, #4]
		//Actualizamos el valor del dutty
		updateDuttyCyclePercentageFloat(ptrMotorHandler->phandlerPWM, ptrMotorHandler->configMotor.dutty);
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	699a      	ldr	r2, [r3, #24]
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	edd3 7a01 	vldr	s15, [r3, #4]
 80010b4:	eeb0 0a67 	vmov.f32	s0, s15
 80010b8:	4610      	mov	r0, r2
 80010ba:	f002 ff4b 	bl	8003f54 <updateDuttyCyclePercentageFloat>
}
 80010be:	bf00      	nop
 80010c0:	3708      	adds	r7, #8
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bd80      	pop	{r7, pc}

080010c6 <updateDirMotor>:
		updateFrequencyTimer(ptrBTimerHandler, *(ptrMotorHandler->configMotor.frecuency));
		updateDuttyCyclePercentageFloat(ptrMotorHandler->phandlerPWM, ptrMotorHandler->configMotor.dutty);
}

void updateDirMotor(Motor_Handler_t *ptrMotorHandler)
{
 80010c6:	b580      	push	{r7, lr}
 80010c8:	b082      	sub	sp, #8
 80010ca:	af00      	add	r7, sp, #0
 80010cc:	6078      	str	r0, [r7, #4]
		//Cambiar el valor de la direccion
		ptrMotorHandler->configMotor.dir = (~ptrMotorHandler->configMotor.dir)&(0x01);
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	7a1b      	ldrb	r3, [r3, #8]
 80010d2:	f003 0301 	and.w	r3, r3, #1
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	bf0c      	ite	eq
 80010da:	2301      	moveq	r3, #1
 80010dc:	2300      	movne	r3, #0
 80010de:	b2db      	uxtb	r3, r3
 80010e0:	461a      	mov	r2, r3
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	721a      	strb	r2, [r3, #8]
		//Cambiamos la direccion del motor
		GPIO_writePin(ptrMotorHandler->phandlerGPIOIN, ptrMotorHandler->configMotor.dir&SET);
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	691a      	ldr	r2, [r3, #16]
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	7a1b      	ldrb	r3, [r3, #8]
 80010ee:	f003 0301 	and.w	r3, r3, #1
 80010f2:	b2db      	uxtb	r3, r3
 80010f4:	4619      	mov	r1, r3
 80010f6:	4610      	mov	r0, r2
 80010f8:	f002 fb04 	bl	8003704 <GPIO_writePin>
		statusPolarityPWM(ptrMotorHandler->phandlerPWM, ptrMotorHandler->configMotor.dir&SET);
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	699a      	ldr	r2, [r3, #24]
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	7a1b      	ldrb	r3, [r3, #8]
 8001104:	f003 0301 	and.w	r3, r3, #1
 8001108:	b2db      	uxtb	r3, r3
 800110a:	4619      	mov	r1, r3
 800110c:	4610      	mov	r0, r2
 800110e:	f002 fe5b 	bl	8003dc8 <statusPolarityPWM>
}
 8001112:	bf00      	nop
 8001114:	3708      	adds	r7, #8
 8001116:	46bd      	mov	sp, r7
 8001118:	bd80      	pop	{r7, pc}
	...

0800111c <main>:
uint8_t commandComplete = 1;           //Bandera que indica si el comando esta completo
uint8_t counterRecepcion = 0;          //Variable para la posicion del arrelgo
char bufferRecepcion[64] = {0};        //Arreglo que almacena el comando ingresado

int main(void)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b082      	sub	sp, #8
 8001120:	af00      	add	r7, sp, #0
	//-----------------------Configuracion inicial del sistema---------------------------------
	//Incrementamos la velocidad de reloj del sistema
	uint8_t clock = CLOCK_SPEED_100MHZ;    //Velocidad de reloj entre 25 o 100 MHz
 8001122:	2364      	movs	r3, #100	; 0x64
 8001124:	71fb      	strb	r3, [r7, #7]
	configPLL(clock);
 8001126:	79fb      	ldrb	r3, [r7, #7]
 8001128:	4618      	mov	r0, r3
 800112a:	f002 fb2d 	bl	8003788 <configPLL>
	//Realizamos la configuracuion inicial
	int_Hardware();
 800112e:	f000 f84f 	bl	80011d0 <int_Hardware>
	//Activamos el SysTick
	config_SysTick_us();
 8001132:	f002 ff53 	bl	8003fdc <config_SysTick_us>
	//Activamos el punto flotante por medio del registro especifico
	SCB->CPACR |= 0xF <<20;
 8001136:	4b19      	ldr	r3, [pc, #100]	; (800119c <main+0x80>)
 8001138:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800113c:	4a17      	ldr	r2, [pc, #92]	; (800119c <main+0x80>)
 800113e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001142:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
	//Definimos la configuracion inicail del MCO1
	 int_MCO2();
 8001146:	f000 f9d1 	bl	80014ec <int_MCO2>

	//-----------------------Configuracion inicial de los Motores---------------------------------
	//Cargar configuracion de los motores
	int_Config_Motor();
 800114a:	f000 f9d9 	bl	8001500 <int_Config_Motor>
	GPIO_writePin (&handler_GPIO_MotorR_IN, SET);
 800114e:	2101      	movs	r1, #1
 8001150:	4813      	ldr	r0, [pc, #76]	; (80011a0 <main+0x84>)
 8001152:	f002 fad7 	bl	8003704 <GPIO_writePin>
	GPIO_writePin (&handler_GPIO_MotorL_IN, SET);
 8001156:	2101      	movs	r1, #1
 8001158:	4812      	ldr	r0, [pc, #72]	; (80011a4 <main+0x88>)
 800115a:	f002 fad3 	bl	8003704 <GPIO_writePin>
	GPIO_writePin (&handler_GPIO_MotorR_EN, SET);
 800115e:	2101      	movs	r1, #1
 8001160:	4811      	ldr	r0, [pc, #68]	; (80011a8 <main+0x8c>)
 8001162:	f002 facf 	bl	8003704 <GPIO_writePin>
	GPIO_writePin (&handler_GPIO_MotorL_EN, SET);
 8001166:	2101      	movs	r1, #1
 8001168:	4810      	ldr	r0, [pc, #64]	; (80011ac <main+0x90>)
 800116a:	f002 facb 	bl	8003704 <GPIO_writePin>
	//Definimos el motor derecho para ser ejecutado
	handler_Motor_Execute = &handler_Motor_R;
 800116e:	4b10      	ldr	r3, [pc, #64]	; (80011b0 <main+0x94>)
 8001170:	4a10      	ldr	r2, [pc, #64]	; (80011b4 <main+0x98>)
 8001172:	601a      	str	r2, [r3, #0]
	//Calculo inicial de parametro
	cm_L = ((PI*DL)/(100*Ce));  //[mm/cuentas]
 8001174:	4b10      	ldr	r3, [pc, #64]	; (80011b8 <main+0x9c>)
 8001176:	4a11      	ldr	r2, [pc, #68]	; (80011bc <main+0xa0>)
 8001178:	601a      	str	r2, [r3, #0]
	cm_R =	((PI*DR)/(100*Ce));  //[mm/cuentas]
 800117a:	4b11      	ldr	r3, [pc, #68]	; (80011c0 <main+0xa4>)
 800117c:	4a11      	ldr	r2, [pc, #68]	; (80011c4 <main+0xa8>)
 800117e:	601a      	str	r2, [r3, #0]

	while(1)
	{
		///Verificamos para ejecuta el comando ingresando
		if(commandComplete==1)
 8001180:	4b11      	ldr	r3, [pc, #68]	; (80011c8 <main+0xac>)
 8001182:	781b      	ldrb	r3, [r3, #0]
 8001184:	2b01      	cmp	r3, #1
 8001186:	d106      	bne.n	8001196 <main+0x7a>
		{
			runCommand(bufferRecepcion);
 8001188:	4810      	ldr	r0, [pc, #64]	; (80011cc <main+0xb0>)
 800118a:	f000 fbbb 	bl	8001904 <runCommand>
			//Reniciamos la variable
			commandComplete=0;
 800118e:	4b0e      	ldr	r3, [pc, #56]	; (80011c8 <main+0xac>)
 8001190:	2200      	movs	r2, #0
 8001192:	701a      	strb	r2, [r3, #0]
 8001194:	e7f4      	b.n	8001180 <main+0x64>
		}
		else
		{
			__NOP();
 8001196:	bf00      	nop
		if(commandComplete==1)
 8001198:	e7f2      	b.n	8001180 <main+0x64>
 800119a:	bf00      	nop
 800119c:	e000ed00 	.word	0xe000ed00
 80011a0:	200002cc 	.word	0x200002cc
 80011a4:	20000318 	.word	0x20000318
 80011a8:	200002d8 	.word	0x200002d8
 80011ac:	20000324 	.word	0x20000324
 80011b0:	20000380 	.word	0x20000380
 80011b4:	200002f0 	.word	0x200002f0
 80011b8:	20000394 	.word	0x20000394
 80011bc:	40105fa7 	.word	0x40105fa7
 80011c0:	20000398 	.word	0x20000398
 80011c4:	400facee 	.word	0x400facee
 80011c8:	20000018 	.word	0x20000018
 80011cc:	200003a0 	.word	0x200003a0

080011d0 <int_Hardware>:



//------------------------------Inicio Configuracion del microcontrolador------------------------------------------
void int_Hardware(void)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b082      	sub	sp, #8
 80011d4:	af02      	add	r7, sp, #8
	//-------------------------PIN_MCO2--------------------------------
	//---------------PIN: PC9----------------
	//------------AF0: MCO_2----------------
	//Definimos el periferico GPIOx a usar.
	handler_GPIO_MCO2.pGPIOx = GPIOC;
 80011d6:	4bab      	ldr	r3, [pc, #684]	; (8001484 <int_Hardware+0x2b4>)
 80011d8:	4aab      	ldr	r2, [pc, #684]	; (8001488 <int_Hardware+0x2b8>)
 80011da:	609a      	str	r2, [r3, #8]
	//Definimos el pin a utilizar
	handler_GPIO_MCO2.GPIO_PinConfig.GPIO_PinNumber = PIN_9; 						//PIN_x, 0-15
 80011dc:	4ba9      	ldr	r3, [pc, #676]	; (8001484 <int_Hardware+0x2b4>)
 80011de:	2209      	movs	r2, #9
 80011e0:	701a      	strb	r2, [r3, #0]
	//Definimos la configuracion de los registro para el pin seleccionado
	// Orden de elementos: (Struct, Mode, Otyper, Ospeedr, Pupdr, AF)
	GPIO_PIN_Config(&handler_GPIO_MCO2, GPIO_MODE_ALTFN, GPIO_OTYPER_PUSHPULL, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDR_NOTHING, AF0);
 80011e2:	2300      	movs	r3, #0
 80011e4:	9301      	str	r3, [sp, #4]
 80011e6:	2300      	movs	r3, #0
 80011e8:	9300      	str	r3, [sp, #0]
 80011ea:	2301      	movs	r3, #1
 80011ec:	2200      	movs	r2, #0
 80011ee:	2102      	movs	r1, #2
 80011f0:	48a4      	ldr	r0, [pc, #656]	; (8001484 <int_Hardware+0x2b4>)
 80011f2:	f002 f93b 	bl	800346c <GPIO_PIN_Config>
	/*Opciones: GPIO_Tipo_x, donde x--->||IN, OUT, ALTFN, ANALOG ||| PUSHPULL, OPENDRAIN |||
	 * ||| LOW, MEDIUM, FAST, HIGH ||| NOTHING, PULLUP, PULLDOWN, RESERVED |||  AFx, 0-15 |||*/
	//Cargamos la configuracion del PIN especifico
	GPIO_Config(&handler_GPIO_MCO2);
 80011f6:	48a3      	ldr	r0, [pc, #652]	; (8001484 <int_Hardware+0x2b4>)
 80011f8:	f002 f95a 	bl	80034b0 <GPIO_Config>
	//-------------------Inicio de Configuracion GPIOx-----------------------

	//---------------------------BlinkyLed--------------------------------
	//---------------PIN: PA5----------------
	//Definimos el periferico GPIOx a usar.
	handler_BlinkyPin.pGPIOx = GPIOA;
 80011fc:	4ba3      	ldr	r3, [pc, #652]	; (800148c <int_Hardware+0x2bc>)
 80011fe:	4aa4      	ldr	r2, [pc, #656]	; (8001490 <int_Hardware+0x2c0>)
 8001200:	609a      	str	r2, [r3, #8]
	//Definimos el pin a utilizar
	handler_BlinkyPin.GPIO_PinConfig.GPIO_PinNumber = PIN_5; 						//PIN_x, 0-15
 8001202:	4ba2      	ldr	r3, [pc, #648]	; (800148c <int_Hardware+0x2bc>)
 8001204:	2205      	movs	r2, #5
 8001206:	701a      	strb	r2, [r3, #0]
	//Definimos la configuracion de los registro para el pin seleccionado
	// Orden de elementos: (Struct, Mode, Otyper, Ospeedr, Pupdr, AF)
	GPIO_PIN_Config(&handler_BlinkyPin, GPIO_MODE_OUT, GPIO_OTYPER_PUSHPULL, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDR_NOTHING, AF0);
 8001208:	2300      	movs	r3, #0
 800120a:	9301      	str	r3, [sp, #4]
 800120c:	2300      	movs	r3, #0
 800120e:	9300      	str	r3, [sp, #0]
 8001210:	2301      	movs	r3, #1
 8001212:	2200      	movs	r2, #0
 8001214:	2101      	movs	r1, #1
 8001216:	489d      	ldr	r0, [pc, #628]	; (800148c <int_Hardware+0x2bc>)
 8001218:	f002 f928 	bl	800346c <GPIO_PIN_Config>
	/*Opciones: GPIO_Tipo_x, donde x--->||IN, OUT, ALTFN, ANALOG ||| PUSHPULL, OPENDRAIN |||
	 * ||| LOW, MEDIUM, FAST, HIGH ||| NOTHING, PULLUP, PULLDOWN, RESERVED |||  AFx, 0-15 |||*/
	//Cargamos la configuracion del PIN especifico
	GPIO_Config(&handler_BlinkyPin);
 800121c:	489b      	ldr	r0, [pc, #620]	; (800148c <int_Hardware+0x2bc>)
 800121e:	f002 f947 	bl	80034b0 <GPIO_Config>

	//---------------------------USART--------------------------------
	//---------------PIN: PA9----------------
	//------------AF7: USART1_TX----------------
	//Definimos el periferico GPIOx a usar.
	handler_GPIO_USB_TX.pGPIOx = GPIOA;
 8001222:	4b9c      	ldr	r3, [pc, #624]	; (8001494 <int_Hardware+0x2c4>)
 8001224:	4a9a      	ldr	r2, [pc, #616]	; (8001490 <int_Hardware+0x2c0>)
 8001226:	609a      	str	r2, [r3, #8]
	//Definimos el pin a utilizar
	handler_GPIO_USB_TX.GPIO_PinConfig.GPIO_PinNumber = PIN_2; 						//PIN_x, 0-15
 8001228:	4b9a      	ldr	r3, [pc, #616]	; (8001494 <int_Hardware+0x2c4>)
 800122a:	2202      	movs	r2, #2
 800122c:	701a      	strb	r2, [r3, #0]
	//Definimos la configuracion de los registro para el pin seleccionado
	// Orden de elementos: (Struct, Mode, Otyper, Ospeedr, Pupdr, AF)
	GPIO_PIN_Config(&handler_GPIO_USB_TX, GPIO_MODE_ALTFN, GPIO_OTYPER_PUSHPULL, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDR_NOTHING, AF7);
 800122e:	2307      	movs	r3, #7
 8001230:	9301      	str	r3, [sp, #4]
 8001232:	2300      	movs	r3, #0
 8001234:	9300      	str	r3, [sp, #0]
 8001236:	2301      	movs	r3, #1
 8001238:	2200      	movs	r2, #0
 800123a:	2102      	movs	r1, #2
 800123c:	4895      	ldr	r0, [pc, #596]	; (8001494 <int_Hardware+0x2c4>)
 800123e:	f002 f915 	bl	800346c <GPIO_PIN_Config>
	/*Opciones: GPIO_Tipo_x, donde x--->||IN, OUT, ALTFN, ANALOG ||| PUSHPULL, OPENDRAIN |||
	 * ||| LOW, MEDIUM, FAST, HIGH ||| NOTHING, PULLUP, PULLDOWN, RESERVED |||  AFx, 0-15 |||*/
	//Cargamos la configuracion del PIN especifico
	GPIO_Config(&handler_GPIO_USB_TX);
 8001242:	4894      	ldr	r0, [pc, #592]	; (8001494 <int_Hardware+0x2c4>)
 8001244:	f002 f934 	bl	80034b0 <GPIO_Config>

	//---------------PIN: PA10----------------
	//------------AF7: USART1_RX----------------
	//Definimos el periferico GPIOx a usar.
	handler_GPIO_USB_RX.pGPIOx = GPIOA;
 8001248:	4b93      	ldr	r3, [pc, #588]	; (8001498 <int_Hardware+0x2c8>)
 800124a:	4a91      	ldr	r2, [pc, #580]	; (8001490 <int_Hardware+0x2c0>)
 800124c:	609a      	str	r2, [r3, #8]
	//Definimos el pin a utiliza
	handler_GPIO_USB_RX.GPIO_PinConfig.GPIO_PinNumber = PIN_3; 						//PIN_x, 0-15
 800124e:	4b92      	ldr	r3, [pc, #584]	; (8001498 <int_Hardware+0x2c8>)
 8001250:	2203      	movs	r2, #3
 8001252:	701a      	strb	r2, [r3, #0]
	//Definimos la configuracion de los registro para el pin seleccionado
	// Orden de elementos: (Struct, Mode, Otyper, Ospeedr, Pupdr, AF)
	GPIO_PIN_Config(&handler_GPIO_USB_RX, GPIO_MODE_ALTFN, GPIO_OTYPER_PUSHPULL, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDR_NOTHING, AF7);
 8001254:	2307      	movs	r3, #7
 8001256:	9301      	str	r3, [sp, #4]
 8001258:	2300      	movs	r3, #0
 800125a:	9300      	str	r3, [sp, #0]
 800125c:	2301      	movs	r3, #1
 800125e:	2200      	movs	r2, #0
 8001260:	2102      	movs	r1, #2
 8001262:	488d      	ldr	r0, [pc, #564]	; (8001498 <int_Hardware+0x2c8>)
 8001264:	f002 f902 	bl	800346c <GPIO_PIN_Config>
	/*Opciones: GPIO_Tipo_x, donde x--->||IN, OUT, ALTFN, ANALOG ||| PUSHPULL, OPENDRAIN |||
	 * ||| LOW, MEDIUM, FAST, HIGH ||| NOTHING, PULLUP, PULLDOWN, RESERVED |||  AFx, 0-15 |||*/
	//Cargamos la configuracion del PIN especifico
	GPIO_Config(&handler_GPIO_USB_RX);
 8001268:	488b      	ldr	r0, [pc, #556]	; (8001498 <int_Hardware+0x2c8>)
 800126a:	f002 f921 	bl	80034b0 <GPIO_Config>
	//---------------------------Motor Derecho--------------------------------
	//----------------------PWM--------------------
	//---------------PIN: PA0----------------
	//------------AF2: TIM5_CH1----------------
	//Definimos el periferico GPIOx a usar.
	handler_GPIO_MotorR.pGPIOx = GPIOA;
 800126e:	4b8b      	ldr	r3, [pc, #556]	; (800149c <int_Hardware+0x2cc>)
 8001270:	4a87      	ldr	r2, [pc, #540]	; (8001490 <int_Hardware+0x2c0>)
 8001272:	609a      	str	r2, [r3, #8]
	//Definimos el pin a utilizar
	handler_GPIO_MotorR.GPIO_PinConfig.GPIO_PinNumber = PIN_0; 						//PIN_x, 0-15
 8001274:	4b89      	ldr	r3, [pc, #548]	; (800149c <int_Hardware+0x2cc>)
 8001276:	2200      	movs	r2, #0
 8001278:	701a      	strb	r2, [r3, #0]
	//Definimos la configuracion de los registro para el pin seleccionado
	// Orden de elementos: (Struct, Mode, Otyper, Ospeedr, Pupdr, AF)
	GPIO_PIN_Config(&handler_GPIO_MotorR, GPIO_MODE_ALTFN, GPIO_OTYPER_PUSHPULL, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDR_NOTHING, AF2);
 800127a:	2302      	movs	r3, #2
 800127c:	9301      	str	r3, [sp, #4]
 800127e:	2300      	movs	r3, #0
 8001280:	9300      	str	r3, [sp, #0]
 8001282:	2301      	movs	r3, #1
 8001284:	2200      	movs	r2, #0
 8001286:	2102      	movs	r1, #2
 8001288:	4884      	ldr	r0, [pc, #528]	; (800149c <int_Hardware+0x2cc>)
 800128a:	f002 f8ef 	bl	800346c <GPIO_PIN_Config>
	/*Opciones: GPIO_Tipo_x, donde x--->||IN, OUT, ALTFN, ANALOG ||| PUSHPULL, OPENDRAIN |||
	 * ||| LOW, MEDIUM, FAST, HIGH ||| NOTHING, PULLUP, PULLDOWN, RESERVED |||  AFx, 0-15 |||*/
	//Cargamos la configuracion del PIN especifico
	GPIO_Config(&handler_GPIO_MotorR);
 800128e:	4883      	ldr	r0, [pc, #524]	; (800149c <int_Hardware+0x2cc>)
 8001290:	f002 f90e 	bl	80034b0 <GPIO_Config>
	//---------------Direccion--------------------
	//---------------PIN: PC12----------------
	//Definimos el periferico GPIOx a usar.
	handler_GPIO_MotorR_IN.pGPIOx = GPIOC;
 8001294:	4b82      	ldr	r3, [pc, #520]	; (80014a0 <int_Hardware+0x2d0>)
 8001296:	4a7c      	ldr	r2, [pc, #496]	; (8001488 <int_Hardware+0x2b8>)
 8001298:	609a      	str	r2, [r3, #8]
	//Definimos el pin a utilizar
	handler_GPIO_MotorR_IN.GPIO_PinConfig.GPIO_PinNumber = PIN_12; 						//PIN_x, 0-15
 800129a:	4b81      	ldr	r3, [pc, #516]	; (80014a0 <int_Hardware+0x2d0>)
 800129c:	220c      	movs	r2, #12
 800129e:	701a      	strb	r2, [r3, #0]
	//Definimos la configuracion de los registro para el pin seleccionado
	// Orden de elementos: (Struct, Mode, Otyper, Ospeedr, Pupdr, AF)
	GPIO_PIN_Config(&handler_GPIO_MotorR_IN, GPIO_MODE_OUT, GPIO_OTYPER_PUSHPULL, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDR_NOTHING, AF0);
 80012a0:	2300      	movs	r3, #0
 80012a2:	9301      	str	r3, [sp, #4]
 80012a4:	2300      	movs	r3, #0
 80012a6:	9300      	str	r3, [sp, #0]
 80012a8:	2301      	movs	r3, #1
 80012aa:	2200      	movs	r2, #0
 80012ac:	2101      	movs	r1, #1
 80012ae:	487c      	ldr	r0, [pc, #496]	; (80014a0 <int_Hardware+0x2d0>)
 80012b0:	f002 f8dc 	bl	800346c <GPIO_PIN_Config>
	/*Opciones: GPIO_Tipo_x, donde x--->||IN, OUT, ALTFN, ANALOG ||| PUSHPULL, OPENDRAIN |||
	 * ||| LOW, MEDIUM, FAST, HIGH ||| NOTHING, PULLUP, PULLDOWN, RESERVED |||  AFx, 0-15 |||*/
	//Cargamos la configuracion del PIN especifico
	GPIO_Config(&handler_GPIO_MotorR_IN);
 80012b4:	487a      	ldr	r0, [pc, #488]	; (80014a0 <int_Hardware+0x2d0>)
 80012b6:	f002 f8fb 	bl	80034b0 <GPIO_Config>
	//------------Enable------------------------
	//---------------PIN: PC10----------------
	//Definimos el periferico GPIOx a usar.
	handler_GPIO_MotorR_EN.pGPIOx = GPIOC;
 80012ba:	4b7a      	ldr	r3, [pc, #488]	; (80014a4 <int_Hardware+0x2d4>)
 80012bc:	4a72      	ldr	r2, [pc, #456]	; (8001488 <int_Hardware+0x2b8>)
 80012be:	609a      	str	r2, [r3, #8]
	//Definimos el pin a utilizar
	handler_GPIO_MotorR_EN.GPIO_PinConfig.GPIO_PinNumber = PIN_10; 						//PIN_x, 0-15
 80012c0:	4b78      	ldr	r3, [pc, #480]	; (80014a4 <int_Hardware+0x2d4>)
 80012c2:	220a      	movs	r2, #10
 80012c4:	701a      	strb	r2, [r3, #0]
	//Definimos la configuracion de los registro para el pin seleccionado
	// Orden de elementos: (Struct, Mode, Otyper, Ospeedr, Pupdr, AF)
	GPIO_PIN_Config(&handler_GPIO_MotorR_EN, GPIO_MODE_OUT, GPIO_OTYPER_PUSHPULL, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDR_NOTHING, AF0);
 80012c6:	2300      	movs	r3, #0
 80012c8:	9301      	str	r3, [sp, #4]
 80012ca:	2300      	movs	r3, #0
 80012cc:	9300      	str	r3, [sp, #0]
 80012ce:	2301      	movs	r3, #1
 80012d0:	2200      	movs	r2, #0
 80012d2:	2101      	movs	r1, #1
 80012d4:	4873      	ldr	r0, [pc, #460]	; (80014a4 <int_Hardware+0x2d4>)
 80012d6:	f002 f8c9 	bl	800346c <GPIO_PIN_Config>
	/*Opciones: GPIO_Tipo_x, donde x--->||IN, OUT, ALTFN, ANALOG ||| PUSHPULL, OPENDRAIN |||
	 * ||| LOW, MEDIUM, FAST, HIGH ||| NOTHING, PULLUP, PULLDOWN, RESERVED |||  AFx, 0-15 |||*/
	//Cargamos la configuracion del PIN especifico
	GPIO_Config(&handler_GPIO_MotorR_EN);
 80012da:	4872      	ldr	r0, [pc, #456]	; (80014a4 <int_Hardware+0x2d4>)
 80012dc:	f002 f8e8 	bl	80034b0 <GPIO_Config>
	//---------------------------Motor Izquierdo--------------------------------
	//----------------------PWM--------------------
	//---------------PIN: PA1----------------
	//------------AF2: TIM5_CH2----------------
	//Definimos el periferico GPIOx a usar.
	handler_GPIO_MotorL.pGPIOx = GPIOA;
 80012e0:	4b71      	ldr	r3, [pc, #452]	; (80014a8 <int_Hardware+0x2d8>)
 80012e2:	4a6b      	ldr	r2, [pc, #428]	; (8001490 <int_Hardware+0x2c0>)
 80012e4:	609a      	str	r2, [r3, #8]
	//Definimos el pin a utilizar
	handler_GPIO_MotorL.GPIO_PinConfig.GPIO_PinNumber = PIN_1; 						//PIN_x, 0-15
 80012e6:	4b70      	ldr	r3, [pc, #448]	; (80014a8 <int_Hardware+0x2d8>)
 80012e8:	2201      	movs	r2, #1
 80012ea:	701a      	strb	r2, [r3, #0]
	//Definimos la configuracion de los registro para el pin seleccionado
	// Orden de elementos: (Struct, Mode, Otyper, Ospeedr, Pupdr, AF)
	GPIO_PIN_Config(&handler_GPIO_MotorL, GPIO_MODE_ALTFN, GPIO_OTYPER_PUSHPULL, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDR_NOTHING, AF2);
 80012ec:	2302      	movs	r3, #2
 80012ee:	9301      	str	r3, [sp, #4]
 80012f0:	2300      	movs	r3, #0
 80012f2:	9300      	str	r3, [sp, #0]
 80012f4:	2301      	movs	r3, #1
 80012f6:	2200      	movs	r2, #0
 80012f8:	2102      	movs	r1, #2
 80012fa:	486b      	ldr	r0, [pc, #428]	; (80014a8 <int_Hardware+0x2d8>)
 80012fc:	f002 f8b6 	bl	800346c <GPIO_PIN_Config>
	/*Opciones: GPIO_Tipo_x, donde x--->||IN, OUT, ALTFN, ANALOG ||| PUSHPULL, OPENDRAIN |||
	 * ||| LOW, MEDIUM, FAST, HIGH ||| NOTHING, PULLUP, PULLDOWN, RESERVED |||  AFx, 0-15 |||*/
	//Cargamos la configuracion del PIN especifico
	GPIO_Config(&handler_GPIO_MotorL);
 8001300:	4869      	ldr	r0, [pc, #420]	; (80014a8 <int_Hardware+0x2d8>)
 8001302:	f002 f8d5 	bl	80034b0 <GPIO_Config>
	//---------------Direccion--------------------
	//---------------PIN: PD2----------------
	//Definimos el periferico GPIOx a usar.
	handler_GPIO_MotorL_IN.pGPIOx = GPIOD;
 8001306:	4b69      	ldr	r3, [pc, #420]	; (80014ac <int_Hardware+0x2dc>)
 8001308:	4a69      	ldr	r2, [pc, #420]	; (80014b0 <int_Hardware+0x2e0>)
 800130a:	609a      	str	r2, [r3, #8]
	//Definimos el pin a utilizar
	handler_GPIO_MotorL_IN.GPIO_PinConfig.GPIO_PinNumber = PIN_2; 						//PIN_x, 0-15
 800130c:	4b67      	ldr	r3, [pc, #412]	; (80014ac <int_Hardware+0x2dc>)
 800130e:	2202      	movs	r2, #2
 8001310:	701a      	strb	r2, [r3, #0]
	//Definimos la configuracion de los registro para el pin seleccionado
	// Orden de elementos: (Struct, Mode, Otyper, Ospeedr, Pupdr, AF)
	GPIO_PIN_Config(&handler_GPIO_MotorL_IN, GPIO_MODE_OUT, GPIO_OTYPER_PUSHPULL, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDR_NOTHING, AF0);
 8001312:	2300      	movs	r3, #0
 8001314:	9301      	str	r3, [sp, #4]
 8001316:	2300      	movs	r3, #0
 8001318:	9300      	str	r3, [sp, #0]
 800131a:	2301      	movs	r3, #1
 800131c:	2200      	movs	r2, #0
 800131e:	2101      	movs	r1, #1
 8001320:	4862      	ldr	r0, [pc, #392]	; (80014ac <int_Hardware+0x2dc>)
 8001322:	f002 f8a3 	bl	800346c <GPIO_PIN_Config>
	/*Opciones: GPIO_Tipo_x, donde x--->||IN, OUT, ALTFN, ANALOG ||| PUSHPULL, OPENDRAIN |||
	 * ||| LOW, MEDIUM, FAST, HIGH ||| NOTHING, PULLUP, PULLDOWN, RESERVED |||  AFx, 0-15 |||*/
	//Cargamos la configuracion del PIN especifico
	GPIO_Config(&handler_GPIO_MotorL_IN);
 8001326:	4861      	ldr	r0, [pc, #388]	; (80014ac <int_Hardware+0x2dc>)
 8001328:	f002 f8c2 	bl	80034b0 <GPIO_Config>
	//------------Enable------------------------
	//---------------PIN: PC11----------------
	//Definimos el periferico GPIOx a usar.
	handler_GPIO_MotorL_EN.pGPIOx = GPIOC;
 800132c:	4b61      	ldr	r3, [pc, #388]	; (80014b4 <int_Hardware+0x2e4>)
 800132e:	4a56      	ldr	r2, [pc, #344]	; (8001488 <int_Hardware+0x2b8>)
 8001330:	609a      	str	r2, [r3, #8]
	//Definimos el pin a utilizar
	handler_GPIO_MotorL_EN.GPIO_PinConfig.GPIO_PinNumber = PIN_11; 						//PIN_x, 0-15
 8001332:	4b60      	ldr	r3, [pc, #384]	; (80014b4 <int_Hardware+0x2e4>)
 8001334:	220b      	movs	r2, #11
 8001336:	701a      	strb	r2, [r3, #0]
	//Definimos la configuracion de los registro para el pin seleccionado
	// Orden de elementos: (Struct, Mode, Otyper, Ospeedr, Pupdr, AF)
	GPIO_PIN_Config(&handler_GPIO_MotorL_EN, GPIO_MODE_OUT, GPIO_OTYPER_PUSHPULL, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDR_NOTHING, AF0);
 8001338:	2300      	movs	r3, #0
 800133a:	9301      	str	r3, [sp, #4]
 800133c:	2300      	movs	r3, #0
 800133e:	9300      	str	r3, [sp, #0]
 8001340:	2301      	movs	r3, #1
 8001342:	2200      	movs	r2, #0
 8001344:	2101      	movs	r1, #1
 8001346:	485b      	ldr	r0, [pc, #364]	; (80014b4 <int_Hardware+0x2e4>)
 8001348:	f002 f890 	bl	800346c <GPIO_PIN_Config>
	/*Opciones: GPIO_Tipo_x, donde x--->||IN, OUT, ALTFN, ANALOG ||| PUSHPULL, OPENDRAIN |||
	 * ||| LOW, MEDIUM, FAST, HIGH ||| NOTHING, PULLUP, PULLDOWN, RESERVED |||  AFx, 0-15 |||*/
	//Cargamos la configuracion del PIN especifico
	GPIO_Config(&handler_GPIO_MotorL_EN);
 800134c:	4859      	ldr	r0, [pc, #356]	; (80014b4 <int_Hardware+0x2e4>)
 800134e:	f002 f8af 	bl	80034b0 <GPIO_Config>

	//-------------------Inicio de Configuracion USARTx-----------------------

	//---------------USART1----------------
	//Definimos el periferico USARTx a utilizar
	handler_USART_USB.ptrUSARTx = USART2;
 8001352:	4b59      	ldr	r3, [pc, #356]	; (80014b8 <int_Hardware+0x2e8>)
 8001354:	4a59      	ldr	r2, [pc, #356]	; (80014bc <int_Hardware+0x2ec>)
 8001356:	609a      	str	r2, [r3, #8]
	//Definimos la configuracion del USART seleccionado
	handler_USART_USB.USART_Config.USART_mode = USART_MODE_RXTX ;           //USART_MODE_x  x-> TX, RX, RXTX, DISABLE
 8001358:	4b57      	ldr	r3, [pc, #348]	; (80014b8 <int_Hardware+0x2e8>)
 800135a:	2202      	movs	r2, #2
 800135c:	701a      	strb	r2, [r3, #0]
	handler_USART_USB.USART_Config.USART_baudrate = USART_BAUDRATE_19200;  //USART_BAUDRATE_x  x->9600, 19200, 115200
 800135e:	4b56      	ldr	r3, [pc, #344]	; (80014b8 <int_Hardware+0x2e8>)
 8001360:	2201      	movs	r2, #1
 8001362:	705a      	strb	r2, [r3, #1]
	handler_USART_USB.USART_Config.USART_parity= USART_PARITY_NONE;       //USART_PARITY_x   x->NONE, ODD, EVEN
 8001364:	4b54      	ldr	r3, [pc, #336]	; (80014b8 <int_Hardware+0x2e8>)
 8001366:	2200      	movs	r2, #0
 8001368:	709a      	strb	r2, [r3, #2]
	handler_USART_USB.USART_Config.USART_stopbits=USART_STOPBIT_1;         //USART_STOPBIT_x  x->1, 0_5, 2, 1_5
 800136a:	4b53      	ldr	r3, [pc, #332]	; (80014b8 <int_Hardware+0x2e8>)
 800136c:	2200      	movs	r2, #0
 800136e:	70da      	strb	r2, [r3, #3]
	handler_USART_USB.USART_Config.USART_enableIntRX = USART_RX_INTERRUP_ENABLE;   //USART_RX_INTERRUP_x  x-> DISABLE, ENABLE
 8001370:	4b51      	ldr	r3, [pc, #324]	; (80014b8 <int_Hardware+0x2e8>)
 8001372:	2201      	movs	r2, #1
 8001374:	711a      	strb	r2, [r3, #4]
	handler_USART_USB.USART_Config.USART_enableIntTX = USART_TX_INTERRUP_ENABLE;   //USART_TX_INTERRUP_x  x-> DISABLE, ENABLE
 8001376:	4b50      	ldr	r3, [pc, #320]	; (80014b8 <int_Hardware+0x2e8>)
 8001378:	2201      	movs	r2, #1
 800137a:	715a      	strb	r2, [r3, #5]
	//Cargamos la configuracion del USART especifico
	USART_Config(&handler_USART_USB);
 800137c:	484e      	ldr	r0, [pc, #312]	; (80014b8 <int_Hardware+0x2e8>)
 800137e:	f002 feaf 	bl	80040e0 <USART_Config>

	//-------------------Inicio de Configuracion TIMx-----------------------

	//---------------TIM2----------------
	//Definimos el TIMx a usar
	handler_BlinkyTimer.ptrTIMx = TIM2;
 8001382:	4b4f      	ldr	r3, [pc, #316]	; (80014c0 <int_Hardware+0x2f0>)
 8001384:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001388:	60da      	str	r2, [r3, #12]
	//Definimos la configuracion del TIMER seleccionado
	handler_BlinkyTimer.TIMx_Config.TIMx_periodcnt = BTIMER_PCNT_1ms; //BTIMER_PCNT_xus x->10,100/ BTIMER_PCNT_1ms
 800138a:	4b4d      	ldr	r3, [pc, #308]	; (80014c0 <int_Hardware+0x2f0>)
 800138c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001390:	805a      	strh	r2, [r3, #2]
	handler_BlinkyTimer.TIMx_Config.TIMx_mode = BTIMER_MODE_UP; // BTIMER_MODE_x x->UP, DOWN
 8001392:	4b4b      	ldr	r3, [pc, #300]	; (80014c0 <int_Hardware+0x2f0>)
 8001394:	2200      	movs	r2, #0
 8001396:	701a      	strb	r2, [r3, #0]
	handler_BlinkyTimer.TIMx_Config.TIMX_period = 250;//Al definir 10us,100us el valor un multiplo de ellos, si es 1ms el valor es en ms
 8001398:	4b49      	ldr	r3, [pc, #292]	; (80014c0 <int_Hardware+0x2f0>)
 800139a:	22fa      	movs	r2, #250	; 0xfa
 800139c:	605a      	str	r2, [r3, #4]
	handler_BlinkyTimer.TIMx_Config.TIMx_interruptEnable = INTERRUPTION_ENABLE; //INTERRUPTION_x  x->DISABLE, ENABLE
 800139e:	4b48      	ldr	r3, [pc, #288]	; (80014c0 <int_Hardware+0x2f0>)
 80013a0:	2201      	movs	r2, #1
 80013a2:	721a      	strb	r2, [r3, #8]
	//Cargamos la configuracion del TIMER especifico
	BasicTimer_Config(&handler_BlinkyTimer);
 80013a4:	4846      	ldr	r0, [pc, #280]	; (80014c0 <int_Hardware+0x2f0>)
 80013a6:	f000 fe3d 	bl	8002024 <BasicTimer_Config>

	//---------------TIM3----------------
	//Definimos el TIMx a usar
	handler_TIMER_Count.ptrTIMx = TIM3;
 80013aa:	4b46      	ldr	r3, [pc, #280]	; (80014c4 <int_Hardware+0x2f4>)
 80013ac:	4a46      	ldr	r2, [pc, #280]	; (80014c8 <int_Hardware+0x2f8>)
 80013ae:	60da      	str	r2, [r3, #12]
	//Definimos la configuracion del TIMER seleccionado
	handler_TIMER_Count.TIMx_Config.TIMx_periodcnt = BTIMER_PCNT_1ms; //BTIMER_PCNT_xus x->10,100/ BTIMER_PCNT_1ms
 80013b0:	4b44      	ldr	r3, [pc, #272]	; (80014c4 <int_Hardware+0x2f4>)
 80013b2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80013b6:	805a      	strh	r2, [r3, #2]
	handler_TIMER_Count.TIMx_Config.TIMx_mode = BTIMER_MODE_UP; // BTIMER_MODE_x x->UP, DOWN
 80013b8:	4b42      	ldr	r3, [pc, #264]	; (80014c4 <int_Hardware+0x2f4>)
 80013ba:	2200      	movs	r2, #0
 80013bc:	701a      	strb	r2, [r3, #0]
	handler_TIMER_Count.TIMx_Config.TIMX_period = 2000;//Al definir 10us,100us el valor un multiplo de ellos, si es 1ms el valor es en ms
 80013be:	4b41      	ldr	r3, [pc, #260]	; (80014c4 <int_Hardware+0x2f4>)
 80013c0:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80013c4:	605a      	str	r2, [r3, #4]
	handler_TIMER_Count.TIMx_Config.TIMx_interruptEnable = INTERRUPTION_DISABLE; //INTERRUPTION_x  x->DISABLE, ENABLE
 80013c6:	4b3f      	ldr	r3, [pc, #252]	; (80014c4 <int_Hardware+0x2f4>)
 80013c8:	2200      	movs	r2, #0
 80013ca:	721a      	strb	r2, [r3, #8]
	//Cargamos la configuracion del TIMER especifico
	BasicTimer_Config(&handler_TIMER_Count);
 80013cc:	483d      	ldr	r0, [pc, #244]	; (80014c4 <int_Hardware+0x2f4>)
 80013ce:	f000 fe29 	bl	8002024 <BasicTimer_Config>

	//---------------TIM5----------------
	//Definimos el TIMx a usar
	handler_TIMER_Motor.ptrTIMx = TIM5;
 80013d2:	4b3e      	ldr	r3, [pc, #248]	; (80014cc <int_Hardware+0x2fc>)
 80013d4:	4a3e      	ldr	r2, [pc, #248]	; (80014d0 <int_Hardware+0x300>)
 80013d6:	60da      	str	r2, [r3, #12]
	//Definimos la configuracion del TIMER seleccionado
	handler_TIMER_Motor.TIMx_Config.TIMx_periodcnt = BTIMER_PCNT_10us; //BTIMER_PCNT_xus x->10,100/ BTIMER_PCNT_1ms
 80013d8:	4b3c      	ldr	r3, [pc, #240]	; (80014cc <int_Hardware+0x2fc>)
 80013da:	220a      	movs	r2, #10
 80013dc:	805a      	strh	r2, [r3, #2]
	handler_TIMER_Motor.TIMx_Config.TIMx_mode = BTIMER_MODE_UP; // BTIMER_MODE_x x->UP, DOWN
 80013de:	4b3b      	ldr	r3, [pc, #236]	; (80014cc <int_Hardware+0x2fc>)
 80013e0:	2200      	movs	r2, #0
 80013e2:	701a      	strb	r2, [r3, #0]
	handler_TIMER_Motor.TIMx_Config.TIMX_period = 100;//Al definir 10us,100us el valor un multiplo de ellos, si es 1ms el valor es en ms
 80013e4:	4b39      	ldr	r3, [pc, #228]	; (80014cc <int_Hardware+0x2fc>)
 80013e6:	2264      	movs	r2, #100	; 0x64
 80013e8:	605a      	str	r2, [r3, #4]
	handler_TIMER_Motor.TIMx_Config.TIMx_interruptEnable = INTERRUPTION_DISABLE; //INTERRUPTION_x  x->DISABLE, ENABLE
 80013ea:	4b38      	ldr	r3, [pc, #224]	; (80014cc <int_Hardware+0x2fc>)
 80013ec:	2200      	movs	r2, #0
 80013ee:	721a      	strb	r2, [r3, #8]
	//Cargamos la configuracion del TIMER especifico
	BasicTimer_Config(&handler_TIMER_Motor);
 80013f0:	4836      	ldr	r0, [pc, #216]	; (80014cc <int_Hardware+0x2fc>)
 80013f2:	f000 fe17 	bl	8002024 <BasicTimer_Config>

	//-------------------Inicio de Configuracion EXTIx -----------------------

	//---------------PIN: PC1----------------
	//Definimos el periferico GPIOx a usar.
	handler_GPIO_FotoR.pGPIOx = GPIOC;
 80013f6:	4b37      	ldr	r3, [pc, #220]	; (80014d4 <int_Hardware+0x304>)
 80013f8:	4a23      	ldr	r2, [pc, #140]	; (8001488 <int_Hardware+0x2b8>)
 80013fa:	609a      	str	r2, [r3, #8]
	//Definimos el pin a utilizar
	handler_GPIO_FotoR.GPIO_PinConfig.GPIO_PinNumber = PIN_1;
 80013fc:	4b35      	ldr	r3, [pc, #212]	; (80014d4 <int_Hardware+0x304>)
 80013fe:	2201      	movs	r2, #1
 8001400:	701a      	strb	r2, [r3, #0]
	//Definimos la posicion del elemento pGIOHandler.
	 handler_EXTI_FotoR.pGPIOHandler = &handler_GPIO_FotoR;
 8001402:	4b35      	ldr	r3, [pc, #212]	; (80014d8 <int_Hardware+0x308>)
 8001404:	4a33      	ldr	r2, [pc, #204]	; (80014d4 <int_Hardware+0x304>)
 8001406:	601a      	str	r2, [r3, #0]
	//Definimos el tipo de flanco
	 handler_EXTI_FotoR.edgeType = EXTERNAL_INTERRUPP_RISING_FALLING_EDGE;
 8001408:	4b33      	ldr	r3, [pc, #204]	; (80014d8 <int_Hardware+0x308>)
 800140a:	2202      	movs	r2, #2
 800140c:	711a      	strb	r2, [r3, #4]
	//Cargamos la configuracion del EXTIx
	extInt_Config(& handler_EXTI_FotoR);
 800140e:	4832      	ldr	r0, [pc, #200]	; (80014d8 <int_Hardware+0x308>)
 8001410:	f000 ff8c 	bl	800232c <extInt_Config>

	//---------------PIN: PC3----------------
	//Definimos el periferico GPIOx a usar.
	handler_GPIO_FotoL.pGPIOx = GPIOC;
 8001414:	4b31      	ldr	r3, [pc, #196]	; (80014dc <int_Hardware+0x30c>)
 8001416:	4a1c      	ldr	r2, [pc, #112]	; (8001488 <int_Hardware+0x2b8>)
 8001418:	609a      	str	r2, [r3, #8]
	//Definimos el pin a utilizar
	handler_GPIO_FotoL.GPIO_PinConfig.GPIO_PinNumber = PIN_3;
 800141a:	4b30      	ldr	r3, [pc, #192]	; (80014dc <int_Hardware+0x30c>)
 800141c:	2203      	movs	r2, #3
 800141e:	701a      	strb	r2, [r3, #0]
	//Definimos la posicion del elemento pGIOHandler.
	 handler_EXTI_FotoL.pGPIOHandler = &handler_GPIO_FotoL;
 8001420:	4b2f      	ldr	r3, [pc, #188]	; (80014e0 <int_Hardware+0x310>)
 8001422:	4a2e      	ldr	r2, [pc, #184]	; (80014dc <int_Hardware+0x30c>)
 8001424:	601a      	str	r2, [r3, #0]
	//Definimos el tipo de flanco
	 handler_EXTI_FotoL.edgeType = EXTERNAL_INTERRUPP_RISING_FALLING_EDGE;
 8001426:	4b2e      	ldr	r3, [pc, #184]	; (80014e0 <int_Hardware+0x310>)
 8001428:	2202      	movs	r2, #2
 800142a:	711a      	strb	r2, [r3, #4]
	//Cargamos la configuracion del EXTIx
	extInt_Config(& handler_EXTI_FotoL);
 800142c:	482c      	ldr	r0, [pc, #176]	; (80014e0 <int_Hardware+0x310>)
 800142e:	f000 ff7d 	bl	800232c <extInt_Config>

	//-------------------Inicio de Configuracion PWM_Channelx----------------------

	//---------------TIM5_Channel_1----------------
	//Definimos el TIMx a usar
	handler_PWM_MotorR.ptrTIMx = TIM5;
 8001432:	4b2c      	ldr	r3, [pc, #176]	; (80014e4 <int_Hardware+0x314>)
 8001434:	4a26      	ldr	r2, [pc, #152]	; (80014d0 <int_Hardware+0x300>)
 8001436:	609a      	str	r2, [r3, #8]
	//Definimos la configuracion para el PWM
	handler_PWM_MotorR.config.channel = PWM_CHANNEL_1;     //PWM_CHANNEL_x x->1,2,3,4
 8001438:	4b2a      	ldr	r3, [pc, #168]	; (80014e4 <int_Hardware+0x314>)
 800143a:	2200      	movs	r2, #0
 800143c:	701a      	strb	r2, [r3, #0]
	handler_PWM_MotorR.config.duttyCicle = 10;             //Valor del Dutty como multiplo del periodo del CNT
 800143e:	4b29      	ldr	r3, [pc, #164]	; (80014e4 <int_Hardware+0x314>)
 8001440:	220a      	movs	r2, #10
 8001442:	805a      	strh	r2, [r3, #2]
	handler_PWM_MotorR.config.polarity = POLARITY_LOW;    //POLARITY_x x-> HIGH, LOW
 8001444:	4b27      	ldr	r3, [pc, #156]	; (80014e4 <int_Hardware+0x314>)
 8001446:	2201      	movs	r2, #1
 8001448:	711a      	strb	r2, [r3, #4]
	//Cargamos la configuracion
	pwm_Config(&handler_PWM_MotorR);
 800144a:	4826      	ldr	r0, [pc, #152]	; (80014e4 <int_Hardware+0x314>)
 800144c:	f002 faca 	bl	80039e4 <pwm_Config>
	//Activamos el PWM
	statusInOutPWM(&handler_PWM_MotorR, CHANNEL_ENABLE);
 8001450:	2101      	movs	r1, #1
 8001452:	4824      	ldr	r0, [pc, #144]	; (80014e4 <int_Hardware+0x314>)
 8001454:	f002 fc26 	bl	8003ca4 <statusInOutPWM>

	//---------------TIM5_Channel_2----------------
	//Definimos el TIMx a usar
	handler_PWM_MotorL.ptrTIMx = TIM5;
 8001458:	4b23      	ldr	r3, [pc, #140]	; (80014e8 <int_Hardware+0x318>)
 800145a:	4a1d      	ldr	r2, [pc, #116]	; (80014d0 <int_Hardware+0x300>)
 800145c:	609a      	str	r2, [r3, #8]
	//Definimos la configuracion para el PWM
	handler_PWM_MotorL.config.channel = PWM_CHANNEL_2;     //PWM_CHANNEL_x x->1,2,3,4
 800145e:	4b22      	ldr	r3, [pc, #136]	; (80014e8 <int_Hardware+0x318>)
 8001460:	2201      	movs	r2, #1
 8001462:	701a      	strb	r2, [r3, #0]
	handler_PWM_MotorL.config.duttyCicle = 10;             //Valor del Dutty como multiplo del periodo del CNT
 8001464:	4b20      	ldr	r3, [pc, #128]	; (80014e8 <int_Hardware+0x318>)
 8001466:	220a      	movs	r2, #10
 8001468:	805a      	strh	r2, [r3, #2]
	handler_PWM_MotorL.config.polarity = POLARITY_LOW;    //POLARITY_x x-> HIGH, LOW
 800146a:	4b1f      	ldr	r3, [pc, #124]	; (80014e8 <int_Hardware+0x318>)
 800146c:	2201      	movs	r2, #1
 800146e:	711a      	strb	r2, [r3, #4]
	//Cargamos la configuracion
	pwm_Config(&handler_PWM_MotorL);
 8001470:	481d      	ldr	r0, [pc, #116]	; (80014e8 <int_Hardware+0x318>)
 8001472:	f002 fab7 	bl	80039e4 <pwm_Config>
	//Activamos el PWM
	statusInOutPWM(&handler_PWM_MotorL, CHANNEL_ENABLE);
 8001476:	2101      	movs	r1, #1
 8001478:	481b      	ldr	r0, [pc, #108]	; (80014e8 <int_Hardware+0x318>)
 800147a:	f002 fc13 	bl	8003ca4 <statusInOutPWM>

	//---------------------Fin de Configuracion PWM_Channelx-----------------------


}
 800147e:	bf00      	nop
 8001480:	46bd      	mov	sp, r7
 8001482:	bd80      	pop	{r7, pc}
 8001484:	20000228 	.word	0x20000228
 8001488:	40020800 	.word	0x40020800
 800148c:	2000020c 	.word	0x2000020c
 8001490:	40020000 	.word	0x40020000
 8001494:	2000025c 	.word	0x2000025c
 8001498:	20000268 	.word	0x20000268
 800149c:	200002c0 	.word	0x200002c0
 80014a0:	200002cc 	.word	0x200002cc
 80014a4:	200002d8 	.word	0x200002d8
 80014a8:	2000030c 	.word	0x2000030c
 80014ac:	20000318 	.word	0x20000318
 80014b0:	40020c00 	.word	0x40020c00
 80014b4:	20000324 	.word	0x20000324
 80014b8:	20000274 	.word	0x20000274
 80014bc:	40004400 	.word	0x40004400
 80014c0:	20000218 	.word	0x20000218
 80014c4:	20000368 	.word	0x20000368
 80014c8:	40000400 	.word	0x40000400
 80014cc:	20000358 	.word	0x20000358
 80014d0:	40000c00 	.word	0x40000c00
 80014d4:	20000234 	.word	0x20000234
 80014d8:	20000240 	.word	0x20000240
 80014dc:	20000248 	.word	0x20000248
 80014e0:	20000254 	.word	0x20000254
 80014e4:	200002e4 	.word	0x200002e4
 80014e8:	20000330 	.word	0x20000330

080014ec <int_MCO2>:

//-----------------------------Inicio configuracion MCO1------------------------------------------

//Funcion para la configuracion inicial del MCO1
void int_MCO2(void)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	af00      	add	r7, sp, #0
	//Configuracion inicial del MCO2
	configMCO2(0);
 80014f0:	2000      	movs	r0, #0
 80014f2:	f002 f9fb 	bl	80038ec <configMCO2>
	configMCO2PRE(4);
 80014f6:	2004      	movs	r0, #4
 80014f8:	f002 fa14 	bl	8003924 <configMCO2PRE>
}
 80014fc:	bf00      	nop
 80014fe:	bd80      	pop	{r7, pc}

08001500 <int_Config_Motor>:
//------------------------------Fin configuracion MCO1------------------------------------------


//------------------------------Inicio configuracion de lso motores------------------------------------------
void int_Config_Motor(void)
{
 8001500:	b480      	push	{r7}
 8001502:	af00      	add	r7, sp, #0
	//---------------Motor Derecho----------------
	//Parametro de la señal del dutty
	handler_Motor_R.configMotor.dutty =  20;
 8001504:	4b17      	ldr	r3, [pc, #92]	; (8001564 <int_Config_Motor+0x64>)
 8001506:	4a18      	ldr	r2, [pc, #96]	; (8001568 <int_Config_Motor+0x68>)
 8001508:	605a      	str	r2, [r3, #4]
	handler_Motor_R.configMotor.frecuency = &value_period;
 800150a:	4b16      	ldr	r3, [pc, #88]	; (8001564 <int_Config_Motor+0x64>)
 800150c:	4a17      	ldr	r2, [pc, #92]	; (800156c <int_Config_Motor+0x6c>)
 800150e:	601a      	str	r2, [r3, #0]
	handler_Motor_R.configMotor.dir = SET;
 8001510:	4b14      	ldr	r3, [pc, #80]	; (8001564 <int_Config_Motor+0x64>)
 8001512:	2201      	movs	r2, #1
 8001514:	721a      	strb	r2, [r3, #8]
	//handler de los perifericos
	handler_Motor_R.phandlerGPIOEN = &handler_GPIO_MotorR_EN;
 8001516:	4b13      	ldr	r3, [pc, #76]	; (8001564 <int_Config_Motor+0x64>)
 8001518:	4a15      	ldr	r2, [pc, #84]	; (8001570 <int_Config_Motor+0x70>)
 800151a:	615a      	str	r2, [r3, #20]
	handler_Motor_R.phandlerGPIOIN = &handler_GPIO_MotorR_IN;
 800151c:	4b11      	ldr	r3, [pc, #68]	; (8001564 <int_Config_Motor+0x64>)
 800151e:	4a15      	ldr	r2, [pc, #84]	; (8001574 <int_Config_Motor+0x74>)
 8001520:	611a      	str	r2, [r3, #16]
	handler_Motor_R.phandlerPWM = &handler_PWM_MotorR;
 8001522:	4b10      	ldr	r3, [pc, #64]	; (8001564 <int_Config_Motor+0x64>)
 8001524:	4a14      	ldr	r2, [pc, #80]	; (8001578 <int_Config_Motor+0x78>)
 8001526:	619a      	str	r2, [r3, #24]
	//Tiempo de conteo
	handler_Motor_R.configMotor.timeCount = 1;
 8001528:	4b0e      	ldr	r3, [pc, #56]	; (8001564 <int_Config_Motor+0x64>)
 800152a:	2201      	movs	r2, #1
 800152c:	60da      	str	r2, [r3, #12]

	//---------------Motor Izquierdo----------------
	//Parametro de la señal del dutty
	handler_Motor_L.configMotor.dutty =  20;
 800152e:	4b13      	ldr	r3, [pc, #76]	; (800157c <int_Config_Motor+0x7c>)
 8001530:	4a0d      	ldr	r2, [pc, #52]	; (8001568 <int_Config_Motor+0x68>)
 8001532:	605a      	str	r2, [r3, #4]
	handler_Motor_L.configMotor.frecuency = &value_period;
 8001534:	4b11      	ldr	r3, [pc, #68]	; (800157c <int_Config_Motor+0x7c>)
 8001536:	4a0d      	ldr	r2, [pc, #52]	; (800156c <int_Config_Motor+0x6c>)
 8001538:	601a      	str	r2, [r3, #0]
	handler_Motor_L.configMotor.dir = SET;
 800153a:	4b10      	ldr	r3, [pc, #64]	; (800157c <int_Config_Motor+0x7c>)
 800153c:	2201      	movs	r2, #1
 800153e:	721a      	strb	r2, [r3, #8]
	//handler de los perifericos
	handler_Motor_L.phandlerGPIOEN = &handler_GPIO_MotorL_EN;
 8001540:	4b0e      	ldr	r3, [pc, #56]	; (800157c <int_Config_Motor+0x7c>)
 8001542:	4a0f      	ldr	r2, [pc, #60]	; (8001580 <int_Config_Motor+0x80>)
 8001544:	615a      	str	r2, [r3, #20]
	handler_Motor_L.phandlerGPIOIN = &handler_GPIO_MotorL_IN;
 8001546:	4b0d      	ldr	r3, [pc, #52]	; (800157c <int_Config_Motor+0x7c>)
 8001548:	4a0e      	ldr	r2, [pc, #56]	; (8001584 <int_Config_Motor+0x84>)
 800154a:	611a      	str	r2, [r3, #16]
	handler_Motor_L.phandlerPWM = &handler_PWM_MotorL;
 800154c:	4b0b      	ldr	r3, [pc, #44]	; (800157c <int_Config_Motor+0x7c>)
 800154e:	4a0e      	ldr	r2, [pc, #56]	; (8001588 <int_Config_Motor+0x88>)
 8001550:	619a      	str	r2, [r3, #24]
	//Tiempo de conteo
	handler_Motor_L.configMotor.timeCount = 1;
 8001552:	4b0a      	ldr	r3, [pc, #40]	; (800157c <int_Config_Motor+0x7c>)
 8001554:	2201      	movs	r2, #1
 8001556:	60da      	str	r2, [r3, #12]

};
 8001558:	bf00      	nop
 800155a:	46bd      	mov	sp, r7
 800155c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001560:	4770      	bx	lr
 8001562:	bf00      	nop
 8001564:	200002f0 	.word	0x200002f0
 8001568:	41a00000 	.word	0x41a00000
 800156c:	20000002 	.word	0x20000002
 8001570:	200002d8 	.word	0x200002d8
 8001574:	200002cc 	.word	0x200002cc
 8001578:	200002e4 	.word	0x200002e4
 800157c:	2000033c 	.word	0x2000033c
 8001580:	20000324 	.word	0x20000324
 8001584:	20000318 	.word	0x20000318
 8001588:	20000330 	.word	0x20000330

0800158c <BasicTimer2_Callback>:
//----------------------------Inicio de la definicion de las funciones ISR---------------------------------------

//-------------------------BlinkyLed--------------------------------
//Definimos la funcion que se desea ejecutar cuando se genera la interrupcion por el TIM2
void BasicTimer2_Callback(void)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	af00      	add	r7, sp, #0
	GPIOxTooglePin(&handler_BlinkyPin);
 8001590:	4802      	ldr	r0, [pc, #8]	; (800159c <BasicTimer2_Callback+0x10>)
 8001592:	f002 f8e2 	bl	800375a <GPIOxTooglePin>
}
 8001596:	bf00      	nop
 8001598:	bd80      	pop	{r7, pc}
 800159a:	bf00      	nop
 800159c:	2000020c 	.word	0x2000020c

080015a0 <BasicTimer3_Callback>:

//-------------------------study--------------------------------
//Definimos la funcion que se desea ejecutar cuando se genera la interrupcion por el TIM2
void BasicTimer3_Callback(void)
{
 80015a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80015a2:	b085      	sub	sp, #20
 80015a4:	af04      	add	r7, sp, #16
	if(flag_motor==1)
 80015a6:	4b69      	ldr	r3, [pc, #420]	; (800174c <BasicTimer3_Callback+0x1ac>)
 80015a8:	781b      	ldrb	r3, [r3, #0]
 80015aa:	2b01      	cmp	r3, #1
 80015ac:	d150      	bne.n	8001650 <BasicTimer3_Callback+0xb0>
	{
		//Calculamos la velocidad
		velocity_L = (cm_L*1000)/handler_Motor_L.configMotor.timeCount;   //[m/s]
 80015ae:	4b68      	ldr	r3, [pc, #416]	; (8001750 <BasicTimer3_Callback+0x1b0>)
 80015b0:	edd3 7a00 	vldr	s15, [r3]
 80015b4:	ed9f 7a67 	vldr	s14, [pc, #412]	; 8001754 <BasicTimer3_Callback+0x1b4>
 80015b8:	ee67 6a87 	vmul.f32	s13, s15, s14
 80015bc:	4b66      	ldr	r3, [pc, #408]	; (8001758 <BasicTimer3_Callback+0x1b8>)
 80015be:	68db      	ldr	r3, [r3, #12]
 80015c0:	ee07 3a90 	vmov	s15, r3
 80015c4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80015c8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80015cc:	4b63      	ldr	r3, [pc, #396]	; (800175c <BasicTimer3_Callback+0x1bc>)
 80015ce:	edc3 7a00 	vstr	s15, [r3]
		velocity_R = (cm_R*1000)/handler_Motor_R.configMotor.timeCount;   //[m/s]
 80015d2:	4b63      	ldr	r3, [pc, #396]	; (8001760 <BasicTimer3_Callback+0x1c0>)
 80015d4:	edd3 7a00 	vldr	s15, [r3]
 80015d8:	ed9f 7a5e 	vldr	s14, [pc, #376]	; 8001754 <BasicTimer3_Callback+0x1b4>
 80015dc:	ee67 6a87 	vmul.f32	s13, s15, s14
 80015e0:	4b60      	ldr	r3, [pc, #384]	; (8001764 <BasicTimer3_Callback+0x1c4>)
 80015e2:	68db      	ldr	r3, [r3, #12]
 80015e4:	ee07 3a90 	vmov	s15, r3
 80015e8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80015ec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80015f0:	4b5d      	ldr	r3, [pc, #372]	; (8001768 <BasicTimer3_Callback+0x1c8>)
 80015f2:	edc3 7a00 	vstr	s15, [r3]
		//Aumentamos el contador de tiempo
		count_time = count_time + periodo_TIMER_Count;       //Tiempo en ms
 80015f6:	4b5d      	ldr	r3, [pc, #372]	; (800176c <BasicTimer3_Callback+0x1cc>)
 80015f8:	881a      	ldrh	r2, [r3, #0]
 80015fa:	4b5d      	ldr	r3, [pc, #372]	; (8001770 <BasicTimer3_Callback+0x1d0>)
 80015fc:	881b      	ldrh	r3, [r3, #0]
 80015fe:	4413      	add	r3, r2
 8001600:	b29a      	uxth	r2, r3
 8001602:	4b5a      	ldr	r3, [pc, #360]	; (800176c <BasicTimer3_Callback+0x1cc>)
 8001604:	801a      	strh	r2, [r3, #0]
		//Convertimos el valor y imprimemos
		sprintf(bufferMsg,"%u\t%#.4f\t%#.4f\n", count_time, velocity_L , velocity_R);
 8001606:	4b59      	ldr	r3, [pc, #356]	; (800176c <BasicTimer3_Callback+0x1cc>)
 8001608:	881b      	ldrh	r3, [r3, #0]
 800160a:	461e      	mov	r6, r3
 800160c:	4b53      	ldr	r3, [pc, #332]	; (800175c <BasicTimer3_Callback+0x1bc>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	4618      	mov	r0, r3
 8001612:	f7fe ffb1 	bl	8000578 <__aeabi_f2d>
 8001616:	4604      	mov	r4, r0
 8001618:	460d      	mov	r5, r1
 800161a:	4b53      	ldr	r3, [pc, #332]	; (8001768 <BasicTimer3_Callback+0x1c8>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	4618      	mov	r0, r3
 8001620:	f7fe ffaa 	bl	8000578 <__aeabi_f2d>
 8001624:	4602      	mov	r2, r0
 8001626:	460b      	mov	r3, r1
 8001628:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800162c:	e9cd 4500 	strd	r4, r5, [sp]
 8001630:	4632      	mov	r2, r6
 8001632:	4950      	ldr	r1, [pc, #320]	; (8001774 <BasicTimer3_Callback+0x1d4>)
 8001634:	4850      	ldr	r0, [pc, #320]	; (8001778 <BasicTimer3_Callback+0x1d8>)
 8001636:	f004 f8b1 	bl	800579c <siprintf>
		writeMsgForTXE(&handler_USART_USB, bufferMsg);
 800163a:	494f      	ldr	r1, [pc, #316]	; (8001778 <BasicTimer3_Callback+0x1d8>)
 800163c:	484f      	ldr	r0, [pc, #316]	; (800177c <BasicTimer3_Callback+0x1dc>)
 800163e:	f002 fff3 	bl	8004628 <writeMsgForTXE>
		//Reiniciamos el numero de conteos
		handler_Motor_R.configMotor.count = 0;
 8001642:	4b48      	ldr	r3, [pc, #288]	; (8001764 <BasicTimer3_Callback+0x1c4>)
 8001644:	2200      	movs	r2, #0
 8001646:	815a      	strh	r2, [r3, #10]
		handler_Motor_L.configMotor.count = 0;
 8001648:	4b43      	ldr	r3, [pc, #268]	; (8001758 <BasicTimer3_Callback+0x1b8>)
 800164a:	2200      	movs	r2, #0
 800164c:	815a      	strh	r2, [r3, #10]
		//Reiniciamos el numero de conteos
		handler_Motor_R.configMotor.count = 0;
		handler_Motor_L.configMotor.count = 0;
	}

}
 800164e:	e078      	b.n	8001742 <BasicTimer3_Callback+0x1a2>
	else if(flag_motor==3)
 8001650:	4b3e      	ldr	r3, [pc, #248]	; (800174c <BasicTimer3_Callback+0x1ac>)
 8001652:	781b      	ldrb	r3, [r3, #0]
 8001654:	2b03      	cmp	r3, #3
 8001656:	d120      	bne.n	800169a <BasicTimer3_Callback+0xfa>
		count_time = count_time + periodo_TIMER_Count;       //Tiempo en ms
 8001658:	4b44      	ldr	r3, [pc, #272]	; (800176c <BasicTimer3_Callback+0x1cc>)
 800165a:	881a      	ldrh	r2, [r3, #0]
 800165c:	4b44      	ldr	r3, [pc, #272]	; (8001770 <BasicTimer3_Callback+0x1d0>)
 800165e:	881b      	ldrh	r3, [r3, #0]
 8001660:	4413      	add	r3, r2
 8001662:	b29a      	uxth	r2, r3
 8001664:	4b41      	ldr	r3, [pc, #260]	; (800176c <BasicTimer3_Callback+0x1cc>)
 8001666:	801a      	strh	r2, [r3, #0]
		sprintf(bufferMsg,"%u\t%u\t%u\n", count_time,(handler_Motor_R.configMotor.count), (handler_Motor_L.configMotor.count));
 8001668:	4b40      	ldr	r3, [pc, #256]	; (800176c <BasicTimer3_Callback+0x1cc>)
 800166a:	881b      	ldrh	r3, [r3, #0]
 800166c:	461a      	mov	r2, r3
 800166e:	4b3d      	ldr	r3, [pc, #244]	; (8001764 <BasicTimer3_Callback+0x1c4>)
 8001670:	895b      	ldrh	r3, [r3, #10]
 8001672:	4619      	mov	r1, r3
 8001674:	4b38      	ldr	r3, [pc, #224]	; (8001758 <BasicTimer3_Callback+0x1b8>)
 8001676:	895b      	ldrh	r3, [r3, #10]
 8001678:	9300      	str	r3, [sp, #0]
 800167a:	460b      	mov	r3, r1
 800167c:	4940      	ldr	r1, [pc, #256]	; (8001780 <BasicTimer3_Callback+0x1e0>)
 800167e:	483e      	ldr	r0, [pc, #248]	; (8001778 <BasicTimer3_Callback+0x1d8>)
 8001680:	f004 f88c 	bl	800579c <siprintf>
		writeMsgForTXE(&handler_USART_USB, bufferMsg);
 8001684:	493c      	ldr	r1, [pc, #240]	; (8001778 <BasicTimer3_Callback+0x1d8>)
 8001686:	483d      	ldr	r0, [pc, #244]	; (800177c <BasicTimer3_Callback+0x1dc>)
 8001688:	f002 ffce 	bl	8004628 <writeMsgForTXE>
		handler_Motor_R.configMotor.count = 0;
 800168c:	4b35      	ldr	r3, [pc, #212]	; (8001764 <BasicTimer3_Callback+0x1c4>)
 800168e:	2200      	movs	r2, #0
 8001690:	815a      	strh	r2, [r3, #10]
		handler_Motor_L.configMotor.count = 0;
 8001692:	4b31      	ldr	r3, [pc, #196]	; (8001758 <BasicTimer3_Callback+0x1b8>)
 8001694:	2200      	movs	r2, #0
 8001696:	815a      	strh	r2, [r3, #10]
}
 8001698:	e053      	b.n	8001742 <BasicTimer3_Callback+0x1a2>
	else if(flag_motor==4)
 800169a:	4b2c      	ldr	r3, [pc, #176]	; (800174c <BasicTimer3_Callback+0x1ac>)
 800169c:	781b      	ldrb	r3, [r3, #0]
 800169e:	2b04      	cmp	r3, #4
 80016a0:	d14f      	bne.n	8001742 <BasicTimer3_Callback+0x1a2>
		velocity_L = (cm_L*1000)/handler_Motor_L.configMotor.timeCount;   //[m/s]
 80016a2:	4b2b      	ldr	r3, [pc, #172]	; (8001750 <BasicTimer3_Callback+0x1b0>)
 80016a4:	edd3 7a00 	vldr	s15, [r3]
 80016a8:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8001754 <BasicTimer3_Callback+0x1b4>
 80016ac:	ee67 6a87 	vmul.f32	s13, s15, s14
 80016b0:	4b29      	ldr	r3, [pc, #164]	; (8001758 <BasicTimer3_Callback+0x1b8>)
 80016b2:	68db      	ldr	r3, [r3, #12]
 80016b4:	ee07 3a90 	vmov	s15, r3
 80016b8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80016bc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80016c0:	4b26      	ldr	r3, [pc, #152]	; (800175c <BasicTimer3_Callback+0x1bc>)
 80016c2:	edc3 7a00 	vstr	s15, [r3]
		velocity_R = (cm_R*1000)/handler_Motor_R.configMotor.timeCount;   //[m/s]
 80016c6:	4b26      	ldr	r3, [pc, #152]	; (8001760 <BasicTimer3_Callback+0x1c0>)
 80016c8:	edd3 7a00 	vldr	s15, [r3]
 80016cc:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8001754 <BasicTimer3_Callback+0x1b4>
 80016d0:	ee67 6a87 	vmul.f32	s13, s15, s14
 80016d4:	4b23      	ldr	r3, [pc, #140]	; (8001764 <BasicTimer3_Callback+0x1c4>)
 80016d6:	68db      	ldr	r3, [r3, #12]
 80016d8:	ee07 3a90 	vmov	s15, r3
 80016dc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80016e0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80016e4:	4b20      	ldr	r3, [pc, #128]	; (8001768 <BasicTimer3_Callback+0x1c8>)
 80016e6:	edc3 7a00 	vstr	s15, [r3]
		count_time = count_time + periodo_TIMER_Count;       //Tiempo en ms
 80016ea:	4b20      	ldr	r3, [pc, #128]	; (800176c <BasicTimer3_Callback+0x1cc>)
 80016ec:	881a      	ldrh	r2, [r3, #0]
 80016ee:	4b20      	ldr	r3, [pc, #128]	; (8001770 <BasicTimer3_Callback+0x1d0>)
 80016f0:	881b      	ldrh	r3, [r3, #0]
 80016f2:	4413      	add	r3, r2
 80016f4:	b29a      	uxth	r2, r3
 80016f6:	4b1d      	ldr	r3, [pc, #116]	; (800176c <BasicTimer3_Callback+0x1cc>)
 80016f8:	801a      	strh	r2, [r3, #0]
		sprintf(bufferMsg,"%u\t%#.4f\t%#.4f\n", count_time, velocity_L , velocity_R);
 80016fa:	4b1c      	ldr	r3, [pc, #112]	; (800176c <BasicTimer3_Callback+0x1cc>)
 80016fc:	881b      	ldrh	r3, [r3, #0]
 80016fe:	461e      	mov	r6, r3
 8001700:	4b16      	ldr	r3, [pc, #88]	; (800175c <BasicTimer3_Callback+0x1bc>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	4618      	mov	r0, r3
 8001706:	f7fe ff37 	bl	8000578 <__aeabi_f2d>
 800170a:	4604      	mov	r4, r0
 800170c:	460d      	mov	r5, r1
 800170e:	4b16      	ldr	r3, [pc, #88]	; (8001768 <BasicTimer3_Callback+0x1c8>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	4618      	mov	r0, r3
 8001714:	f7fe ff30 	bl	8000578 <__aeabi_f2d>
 8001718:	4602      	mov	r2, r0
 800171a:	460b      	mov	r3, r1
 800171c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001720:	e9cd 4500 	strd	r4, r5, [sp]
 8001724:	4632      	mov	r2, r6
 8001726:	4913      	ldr	r1, [pc, #76]	; (8001774 <BasicTimer3_Callback+0x1d4>)
 8001728:	4813      	ldr	r0, [pc, #76]	; (8001778 <BasicTimer3_Callback+0x1d8>)
 800172a:	f004 f837 	bl	800579c <siprintf>
		writeMsgForTXE(&handler_USART_USB, bufferMsg);
 800172e:	4912      	ldr	r1, [pc, #72]	; (8001778 <BasicTimer3_Callback+0x1d8>)
 8001730:	4812      	ldr	r0, [pc, #72]	; (800177c <BasicTimer3_Callback+0x1dc>)
 8001732:	f002 ff79 	bl	8004628 <writeMsgForTXE>
		handler_Motor_R.configMotor.count = 0;
 8001736:	4b0b      	ldr	r3, [pc, #44]	; (8001764 <BasicTimer3_Callback+0x1c4>)
 8001738:	2200      	movs	r2, #0
 800173a:	815a      	strh	r2, [r3, #10]
		handler_Motor_L.configMotor.count = 0;
 800173c:	4b06      	ldr	r3, [pc, #24]	; (8001758 <BasicTimer3_Callback+0x1b8>)
 800173e:	2200      	movs	r2, #0
 8001740:	815a      	strh	r2, [r3, #10]
}
 8001742:	bf00      	nop
 8001744:	3704      	adds	r7, #4
 8001746:	46bd      	mov	sp, r7
 8001748:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800174a:	bf00      	nop
 800174c:	20000384 	.word	0x20000384
 8001750:	20000394 	.word	0x20000394
 8001754:	447a0000 	.word	0x447a0000
 8001758:	2000033c 	.word	0x2000033c
 800175c:	2000038c 	.word	0x2000038c
 8001760:	20000398 	.word	0x20000398
 8001764:	200002f0 	.word	0x200002f0
 8001768:	20000390 	.word	0x20000390
 800176c:	20000386 	.word	0x20000386
 8001770:	20000004 	.word	0x20000004
 8001774:	08009c08 	.word	0x08009c08
 8001778:	20000280 	.word	0x20000280
 800177c:	20000274 	.word	0x20000274
 8001780:	08009c18 	.word	0x08009c18

08001784 <BasicUSART2_Callback>:

//-------------------------USARTRX--------------------------------
//Definimos la funcion que se desea ejecutar cuando se genera la interrupcion por el USART2
void BasicUSART2_Callback(void)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	af00      	add	r7, sp, #0
	//Guardamos el caracter recibido
	charRead = getRxData();
 8001788:	f002 ff8c 	bl	80046a4 <getRxData>
 800178c:	4603      	mov	r3, r0
 800178e:	461a      	mov	r2, r3
 8001790:	4b02      	ldr	r3, [pc, #8]	; (800179c <BasicUSART2_Callback+0x18>)
 8001792:	701a      	strb	r2, [r3, #0]
	//Funcion que almacena los caracteres del comando recibido
	recepcionCommand();
 8001794:	f000 f888 	bl	80018a8 <recepcionCommand>
}
 8001798:	bf00      	nop
 800179a:	bd80      	pop	{r7, pc}
 800179c:	20000000 	.word	0x20000000

080017a0 <callback_extInt1>:


//-------------------------Fotocompuerta--------------------------------
//Definimos la funcion que se desea ejecutar cuando se genera la interrupcion por el EXTI13 y EXTI13
void callback_extInt1(void)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b082      	sub	sp, #8
 80017a4:	af00      	add	r7, sp, #0
	handler_Motor_R.configMotor.count++;
 80017a6:	4b19      	ldr	r3, [pc, #100]	; (800180c <callback_extInt1+0x6c>)
 80017a8:	895b      	ldrh	r3, [r3, #10]
 80017aa:	3301      	adds	r3, #1
 80017ac:	b29a      	uxth	r2, r3
 80017ae:	4b17      	ldr	r3, [pc, #92]	; (800180c <callback_extInt1+0x6c>)
 80017b0:	815a      	strh	r2, [r3, #10]
	//calculo del tiempo entre interrupcion
	uint64_t timeNow = getTicksUs();
 80017b2:	f002 fc49 	bl	8004048 <getTicksUs>
 80017b6:	e9c7 0100 	strd	r0, r1, [r7]
	handler_Motor_R.configMotor.timeCount = timeNow-timeBackR;
 80017ba:	6839      	ldr	r1, [r7, #0]
 80017bc:	4b14      	ldr	r3, [pc, #80]	; (8001810 <callback_extInt1+0x70>)
 80017be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017c2:	4613      	mov	r3, r2
 80017c4:	1acb      	subs	r3, r1, r3
 80017c6:	4a11      	ldr	r2, [pc, #68]	; (800180c <callback_extInt1+0x6c>)
 80017c8:	60d3      	str	r3, [r2, #12]
	timeBackR = timeNow;
 80017ca:	4911      	ldr	r1, [pc, #68]	; (8001810 <callback_extInt1+0x70>)
 80017cc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80017d0:	e9c1 2300 	strd	r2, r3, [r1]
	//Verificamos que la bandera este arriba
	if(flag_motor==1 && flag_turn==1 && (limit_count_turn-2)<(handler_Motor_R.configMotor.count))
 80017d4:	4b0f      	ldr	r3, [pc, #60]	; (8001814 <callback_extInt1+0x74>)
 80017d6:	781b      	ldrb	r3, [r3, #0]
 80017d8:	2b01      	cmp	r3, #1
 80017da:	d112      	bne.n	8001802 <callback_extInt1+0x62>
 80017dc:	4b0e      	ldr	r3, [pc, #56]	; (8001818 <callback_extInt1+0x78>)
 80017de:	781b      	ldrb	r3, [r3, #0]
 80017e0:	2b01      	cmp	r3, #1
 80017e2:	d10e      	bne.n	8001802 <callback_extInt1+0x62>
 80017e4:	4b0d      	ldr	r3, [pc, #52]	; (800181c <callback_extInt1+0x7c>)
 80017e6:	881b      	ldrh	r3, [r3, #0]
 80017e8:	3b01      	subs	r3, #1
 80017ea:	4a08      	ldr	r2, [pc, #32]	; (800180c <callback_extInt1+0x6c>)
 80017ec:	8952      	ldrh	r2, [r2, #10]
 80017ee:	4293      	cmp	r3, r2
 80017f0:	dc07      	bgt.n	8001802 <callback_extInt1+0x62>
	{
		//Desactivamos los motores
		status_motor(RESET);
 80017f2:	2000      	movs	r0, #0
 80017f4:	f000 fa32 	bl	8001c5c <status_motor>
		//Actualizamos la direccion del motor
		updateDirMotor(handler_Motor_Execute);
 80017f8:	4b09      	ldr	r3, [pc, #36]	; (8001820 <callback_extInt1+0x80>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	4618      	mov	r0, r3
 80017fe:	f7ff fc62 	bl	80010c6 <updateDirMotor>
	}

}
 8001802:	bf00      	nop
 8001804:	3708      	adds	r7, #8
 8001806:	46bd      	mov	sp, r7
 8001808:	bd80      	pop	{r7, pc}
 800180a:	bf00      	nop
 800180c:	200002f0 	.word	0x200002f0
 8001810:	20000010 	.word	0x20000010
 8001814:	20000384 	.word	0x20000384
 8001818:	20000385 	.word	0x20000385
 800181c:	20000388 	.word	0x20000388
 8001820:	20000380 	.word	0x20000380

08001824 <callback_extInt3>:
void callback_extInt3(void)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b082      	sub	sp, #8
 8001828:	af00      	add	r7, sp, #0
	handler_Motor_L.configMotor.count++;
 800182a:	4b19      	ldr	r3, [pc, #100]	; (8001890 <callback_extInt3+0x6c>)
 800182c:	895b      	ldrh	r3, [r3, #10]
 800182e:	3301      	adds	r3, #1
 8001830:	b29a      	uxth	r2, r3
 8001832:	4b17      	ldr	r3, [pc, #92]	; (8001890 <callback_extInt3+0x6c>)
 8001834:	815a      	strh	r2, [r3, #10]
	//calculo del tiempo entre interrupcion
	uint64_t timeNow = getTicksUs();
 8001836:	f002 fc07 	bl	8004048 <getTicksUs>
 800183a:	e9c7 0100 	strd	r0, r1, [r7]
	handler_Motor_L.configMotor.timeCount = timeNow-timeBackL;
 800183e:	6839      	ldr	r1, [r7, #0]
 8001840:	4b14      	ldr	r3, [pc, #80]	; (8001894 <callback_extInt3+0x70>)
 8001842:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001846:	4613      	mov	r3, r2
 8001848:	1acb      	subs	r3, r1, r3
 800184a:	4a11      	ldr	r2, [pc, #68]	; (8001890 <callback_extInt3+0x6c>)
 800184c:	60d3      	str	r3, [r2, #12]
	timeBackL = timeNow;
 800184e:	4911      	ldr	r1, [pc, #68]	; (8001894 <callback_extInt3+0x70>)
 8001850:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001854:	e9c1 2300 	strd	r2, r3, [r1]
	//Verificamos que la bandera este arriba
	if(flag_motor==1 && flag_turn==2 && (limit_count_turn-2)<(handler_Motor_L.configMotor.count))
 8001858:	4b0f      	ldr	r3, [pc, #60]	; (8001898 <callback_extInt3+0x74>)
 800185a:	781b      	ldrb	r3, [r3, #0]
 800185c:	2b01      	cmp	r3, #1
 800185e:	d112      	bne.n	8001886 <callback_extInt3+0x62>
 8001860:	4b0e      	ldr	r3, [pc, #56]	; (800189c <callback_extInt3+0x78>)
 8001862:	781b      	ldrb	r3, [r3, #0]
 8001864:	2b02      	cmp	r3, #2
 8001866:	d10e      	bne.n	8001886 <callback_extInt3+0x62>
 8001868:	4b0d      	ldr	r3, [pc, #52]	; (80018a0 <callback_extInt3+0x7c>)
 800186a:	881b      	ldrh	r3, [r3, #0]
 800186c:	3b01      	subs	r3, #1
 800186e:	4a08      	ldr	r2, [pc, #32]	; (8001890 <callback_extInt3+0x6c>)
 8001870:	8952      	ldrh	r2, [r2, #10]
 8001872:	4293      	cmp	r3, r2
 8001874:	dc07      	bgt.n	8001886 <callback_extInt3+0x62>
	{
		//Desactivamos los motores
		status_motor(RESET);
 8001876:	2000      	movs	r0, #0
 8001878:	f000 f9f0 	bl	8001c5c <status_motor>
		//Actualizamos la direccion del motor
		updateDirMotor(handler_Motor_Execute);
 800187c:	4b09      	ldr	r3, [pc, #36]	; (80018a4 <callback_extInt3+0x80>)
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	4618      	mov	r0, r3
 8001882:	f7ff fc20 	bl	80010c6 <updateDirMotor>
	}
}
 8001886:	bf00      	nop
 8001888:	3708      	adds	r7, #8
 800188a:	46bd      	mov	sp, r7
 800188c:	bd80      	pop	{r7, pc}
 800188e:	bf00      	nop
 8001890:	2000033c 	.word	0x2000033c
 8001894:	20000008 	.word	0x20000008
 8001898:	20000384 	.word	0x20000384
 800189c:	20000385 	.word	0x20000385
 80018a0:	20000388 	.word	0x20000388
 80018a4:	20000380 	.word	0x20000380

080018a8 <recepcionCommand>:

//----------------------------Inicio de la definicion de las funciones de los comandos----------------------------------------

//Funcion que recibe los caracteres del comando recibido
void recepcionCommand(void)
{
 80018a8:	b480      	push	{r7}
 80018aa:	af00      	add	r7, sp, #0
	if(charRead == '@')
 80018ac:	4b11      	ldr	r3, [pc, #68]	; (80018f4 <recepcionCommand+0x4c>)
 80018ae:	781b      	ldrb	r3, [r3, #0]
 80018b0:	2b40      	cmp	r3, #64	; 0x40
 80018b2:	d10c      	bne.n	80018ce <recepcionCommand+0x26>
	{
		//Almacenamos el elemento nulo
		bufferRecepcion[counterRecepcion] = '\0';
 80018b4:	4b10      	ldr	r3, [pc, #64]	; (80018f8 <recepcionCommand+0x50>)
 80018b6:	781b      	ldrb	r3, [r3, #0]
 80018b8:	461a      	mov	r2, r3
 80018ba:	4b10      	ldr	r3, [pc, #64]	; (80018fc <recepcionCommand+0x54>)
 80018bc:	2100      	movs	r1, #0
 80018be:	5499      	strb	r1, [r3, r2]
		//Establecemos la bandera como alta
		commandComplete = 1;
 80018c0:	4b0f      	ldr	r3, [pc, #60]	; (8001900 <recepcionCommand+0x58>)
 80018c2:	2201      	movs	r2, #1
 80018c4:	701a      	strb	r2, [r3, #0]
		//Reiniciamos la variable
		counterRecepcion = 0;
 80018c6:	4b0c      	ldr	r3, [pc, #48]	; (80018f8 <recepcionCommand+0x50>)
 80018c8:	2200      	movs	r2, #0
 80018ca:	701a      	strb	r2, [r3, #0]
		//Aumentamos en uno la posicion del arreglo
		counterRecepcion++;
		//Reiniciamos la variable
	}

}
 80018cc:	e00c      	b.n	80018e8 <recepcionCommand+0x40>
		bufferRecepcion[counterRecepcion] = charRead;
 80018ce:	4b0a      	ldr	r3, [pc, #40]	; (80018f8 <recepcionCommand+0x50>)
 80018d0:	781b      	ldrb	r3, [r3, #0]
 80018d2:	461a      	mov	r2, r3
 80018d4:	4b07      	ldr	r3, [pc, #28]	; (80018f4 <recepcionCommand+0x4c>)
 80018d6:	7819      	ldrb	r1, [r3, #0]
 80018d8:	4b08      	ldr	r3, [pc, #32]	; (80018fc <recepcionCommand+0x54>)
 80018da:	5499      	strb	r1, [r3, r2]
		counterRecepcion++;
 80018dc:	4b06      	ldr	r3, [pc, #24]	; (80018f8 <recepcionCommand+0x50>)
 80018de:	781b      	ldrb	r3, [r3, #0]
 80018e0:	3301      	adds	r3, #1
 80018e2:	b2da      	uxtb	r2, r3
 80018e4:	4b04      	ldr	r3, [pc, #16]	; (80018f8 <recepcionCommand+0x50>)
 80018e6:	701a      	strb	r2, [r3, #0]
}
 80018e8:	bf00      	nop
 80018ea:	46bd      	mov	sp, r7
 80018ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f0:	4770      	bx	lr
 80018f2:	bf00      	nop
 80018f4:	20000000 	.word	0x20000000
 80018f8:	2000039c 	.word	0x2000039c
 80018fc:	200003a0 	.word	0x200003a0
 8001900:	20000018 	.word	0x20000018

08001904 <runCommand>:

//Funcion que ejecuta el comando ingresando
void runCommand(char *prtcommand)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	b09a      	sub	sp, #104	; 0x68
 8001908:	af04      	add	r7, sp, #16
 800190a:	6078      	str	r0, [r7, #4]
	//Variables para almacenar los elmentos que entrega el comando luego de ser divididos por la funcion sscanf
	char cmd[64]= {0};
 800190c:	2300      	movs	r3, #0
 800190e:	61bb      	str	r3, [r7, #24]
 8001910:	f107 031c 	add.w	r3, r7, #28
 8001914:	223c      	movs	r2, #60	; 0x3c
 8001916:	2100      	movs	r1, #0
 8001918:	4618      	mov	r0, r3
 800191a:	f003 f8b7 	bl	8004a8c <memset>
	int firtsParameter = 0;
 800191e:	2300      	movs	r3, #0
 8001920:	617b      	str	r3, [r7, #20]
	int secondParameter = 0;
 8001922:	2300      	movs	r3, #0
 8001924:	613b      	str	r3, [r7, #16]
	int thirdParameter = 0;
 8001926:	2300      	movs	r3, #0
 8001928:	60fb      	str	r3, [r7, #12]
	int forthParameter = 0;
 800192a:	2300      	movs	r3, #0
 800192c:	60bb      	str	r3, [r7, #8]
	//char bufferMsg[64]= {0};

	//Funcion que lee la cadena de caracteres y la divide en los elementos definidos
	sscanf(prtcommand, "%s %u %u %u %u", cmd, &firtsParameter, &secondParameter, &thirdParameter, &forthParameter);
 800192e:	f107 0114 	add.w	r1, r7, #20
 8001932:	f107 0218 	add.w	r2, r7, #24
 8001936:	f107 0308 	add.w	r3, r7, #8
 800193a:	9302      	str	r3, [sp, #8]
 800193c:	f107 030c 	add.w	r3, r7, #12
 8001940:	9301      	str	r3, [sp, #4]
 8001942:	f107 0310 	add.w	r3, r7, #16
 8001946:	9300      	str	r3, [sp, #0]
 8001948:	460b      	mov	r3, r1
 800194a:	49a4      	ldr	r1, [pc, #656]	; (8001bdc <runCommand+0x2d8>)
 800194c:	6878      	ldr	r0, [r7, #4]
 800194e:	f003 ff45 	bl	80057dc <siscanf>

	//Imprime lista que muestra los comandos que tiene el dispositivo
	if(strcmp(cmd, "help")==0)
 8001952:	f107 0318 	add.w	r3, r7, #24
 8001956:	49a2      	ldr	r1, [pc, #648]	; (8001be0 <runCommand+0x2dc>)
 8001958:	4618      	mov	r0, r3
 800195a:	f7fe fc41 	bl	80001e0 <strcmp>
 800195e:	4603      	mov	r3, r0
 8001960:	2b00      	cmp	r3, #0
 8001962:	d120      	bne.n	80019a6 <runCommand+0xa2>
	{
		writeMsgForTXE(&handler_USART_USB, "Help Menu: \n");
 8001964:	499f      	ldr	r1, [pc, #636]	; (8001be4 <runCommand+0x2e0>)
 8001966:	48a0      	ldr	r0, [pc, #640]	; (8001be8 <runCommand+0x2e4>)
 8001968:	f002 fe5e 	bl	8004628 <writeMsgForTXE>
		writeMsgForTXE(&handler_USART_USB, "1) help  ---Imprime lista de comandos. \n");
 800196c:	499f      	ldr	r1, [pc, #636]	; (8001bec <runCommand+0x2e8>)
 800196e:	489e      	ldr	r0, [pc, #632]	; (8001be8 <runCommand+0x2e4>)
 8001970:	f002 fe5a 	bl	8004628 <writeMsgForTXE>
		writeMsgForTXE(&handler_USART_USB, "2) frequency # --- Cambiar el valor de la frecuenencia de las pruebas, [HZ] \n");
 8001974:	499e      	ldr	r1, [pc, #632]	; (8001bf0 <runCommand+0x2ec>)
 8001976:	489c      	ldr	r0, [pc, #624]	; (8001be8 <runCommand+0x2e4>)
 8001978:	f002 fe56 	bl	8004628 <writeMsgForTXE>
		writeMsgForTXE(&handler_USART_USB, "3) line # # ---Inicia Linea recta, #: dist [mm], #: vel [m/s] tal forma: 10.23-->1023 \n");
 800197c:	499d      	ldr	r1, [pc, #628]	; (8001bf4 <runCommand+0x2f0>)
 800197e:	489a      	ldr	r0, [pc, #616]	; (8001be8 <runCommand+0x2e4>)
 8001980:	f002 fe52 	bl	8004628 <writeMsgForTXE>
		writeMsgForTXE(&handler_USART_USB, "4) turn # # # # ---Iniciamos el giro del robot #: ang #:dir #:dutty_L #:dutty_R \n");
 8001984:	499c      	ldr	r1, [pc, #624]	; (8001bf8 <runCommand+0x2f4>)
 8001986:	4898      	ldr	r0, [pc, #608]	; (8001be8 <runCommand+0x2e4>)
 8001988:	f002 fe4e 	bl	8004628 <writeMsgForTXE>
		writeMsgForTXE(&handler_USART_USB, "5) start # # # # ---Inicia movimiento, #: perTC [ms], #: dutty_L, #dutty_R, #: freqTP [Hz] \n");
 800198c:	499b      	ldr	r1, [pc, #620]	; (8001bfc <runCommand+0x2f8>)
 800198e:	4896      	ldr	r0, [pc, #600]	; (8001be8 <runCommand+0x2e4>)
 8001990:	f002 fe4a 	bl	8004628 <writeMsgForTXE>
		writeMsgForTXE(&handler_USART_USB, "6) reaction # # # ---Inicia Curva de reaccion,#: perTC [ms], #: dutty_L y dutty_R, #: freqTP [Hz] \n");
 8001994:	499a      	ldr	r1, [pc, #616]	; (8001c00 <runCommand+0x2fc>)
 8001996:	4894      	ldr	r0, [pc, #592]	; (8001be8 <runCommand+0x2e4>)
 8001998:	f002 fe46 	bl	8004628 <writeMsgForTXE>
		writeMsgForTXE(&handler_USART_USB, "7) stop ---Para el estudio en medio de la ejecucion \n");
 800199c:	4999      	ldr	r1, [pc, #612]	; (8001c04 <runCommand+0x300>)
 800199e:	4892      	ldr	r0, [pc, #584]	; (8001be8 <runCommand+0x2e4>)
 80019a0:	f002 fe42 	bl	8004628 <writeMsgForTXE>
		//Se imprime que el comando no fue valido
		writeMsgForTXE(&handler_USART_USB, "Comando no correcto \n");
	}


}
 80019a4:	e115      	b.n	8001bd2 <runCommand+0x2ce>
	else if (strcmp(cmd, "frequency") == 0)
 80019a6:	f107 0318 	add.w	r3, r7, #24
 80019aa:	4997      	ldr	r1, [pc, #604]	; (8001c08 <runCommand+0x304>)
 80019ac:	4618      	mov	r0, r3
 80019ae:	f7fe fc17 	bl	80001e0 <strcmp>
 80019b2:	4603      	mov	r3, r0
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d107      	bne.n	80019c8 <runCommand+0xc4>
		frequency_PWM_Motor = 100000/firtsParameter;
 80019b8:	697b      	ldr	r3, [r7, #20]
 80019ba:	4a94      	ldr	r2, [pc, #592]	; (8001c0c <runCommand+0x308>)
 80019bc:	fb92 f3f3 	sdiv	r3, r2, r3
 80019c0:	b29a      	uxth	r2, r3
 80019c2:	4b93      	ldr	r3, [pc, #588]	; (8001c10 <runCommand+0x30c>)
 80019c4:	801a      	strh	r2, [r3, #0]
}
 80019c6:	e104      	b.n	8001bd2 <runCommand+0x2ce>
	else if (strcmp(cmd, "line") == 0)
 80019c8:	f107 0318 	add.w	r3, r7, #24
 80019cc:	4991      	ldr	r1, [pc, #580]	; (8001c14 <runCommand+0x310>)
 80019ce:	4618      	mov	r0, r3
 80019d0:	f7fe fc06 	bl	80001e0 <strcmp>
 80019d4:	4603      	mov	r3, r0
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d120      	bne.n	8001a1c <runCommand+0x118>
		periodo_TIMER_Count = 200;
 80019da:	4b8f      	ldr	r3, [pc, #572]	; (8001c18 <runCommand+0x314>)
 80019dc:	22c8      	movs	r2, #200	; 0xc8
 80019de:	801a      	strh	r2, [r3, #0]
		distance = firtsParameter;
 80019e0:	697b      	ldr	r3, [r7, #20]
 80019e2:	b29a      	uxth	r2, r3
 80019e4:	4b8d      	ldr	r3, [pc, #564]	; (8001c1c <runCommand+0x318>)
 80019e6:	801a      	strh	r2, [r3, #0]
		setpoint = secondParameter/100;
 80019e8:	693b      	ldr	r3, [r7, #16]
 80019ea:	4a8d      	ldr	r2, [pc, #564]	; (8001c20 <runCommand+0x31c>)
 80019ec:	fb82 1203 	smull	r1, r2, r2, r3
 80019f0:	1152      	asrs	r2, r2, #5
 80019f2:	17db      	asrs	r3, r3, #31
 80019f4:	1ad3      	subs	r3, r2, r3
 80019f6:	ee07 3a90 	vmov	s15, r3
 80019fa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80019fe:	4b89      	ldr	r3, [pc, #548]	; (8001c24 <runCommand+0x320>)
 8001a00:	edc3 7a00 	vstr	s15, [r3]
		config_motor(1, periodo_TIMER_Count,  30, 30, 30);//Tipo de Estudio, periodo [ms], por dutty L, por dutty R, fre pwm [hz]
 8001a04:	4b84      	ldr	r3, [pc, #528]	; (8001c18 <runCommand+0x314>)
 8001a06:	881b      	ldrh	r3, [r3, #0]
 8001a08:	221e      	movs	r2, #30
 8001a0a:	eef3 0a0e 	vmov.f32	s1, #62	; 0x41f00000  30.0
 8001a0e:	eeb3 0a0e 	vmov.f32	s0, #62	; 0x41f00000  30.0
 8001a12:	4619      	mov	r1, r3
 8001a14:	2001      	movs	r0, #1
 8001a16:	f000 f9a3 	bl	8001d60 <config_motor>
}
 8001a1a:	e0da      	b.n	8001bd2 <runCommand+0x2ce>
	else if (strcmp(cmd, "turn") == 0)
 8001a1c:	f107 0318 	add.w	r3, r7, #24
 8001a20:	4981      	ldr	r1, [pc, #516]	; (8001c28 <runCommand+0x324>)
 8001a22:	4618      	mov	r0, r3
 8001a24:	f7fe fbdc 	bl	80001e0 <strcmp>
 8001a28:	4603      	mov	r3, r0
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d154      	bne.n	8001ad8 <runCommand+0x1d4>
		flag_turn = secondParameter;
 8001a2e:	693b      	ldr	r3, [r7, #16]
 8001a30:	b2da      	uxtb	r2, r3
 8001a32:	4b7e      	ldr	r3, [pc, #504]	; (8001c2c <runCommand+0x328>)
 8001a34:	701a      	strb	r2, [r3, #0]
		if(flag_turn==1)
 8001a36:	4b7d      	ldr	r3, [pc, #500]	; (8001c2c <runCommand+0x328>)
 8001a38:	781b      	ldrb	r3, [r3, #0]
 8001a3a:	2b01      	cmp	r3, #1
 8001a3c:	d114      	bne.n	8001a68 <runCommand+0x164>
			limit_count_turn = (b/DR)*((Ce*firtsParameter)/(2*180));
 8001a3e:	697b      	ldr	r3, [r7, #20]
 8001a40:	4a7b      	ldr	r2, [pc, #492]	; (8001c30 <runCommand+0x32c>)
 8001a42:	fb82 1203 	smull	r1, r2, r2, r3
 8001a46:	1052      	asrs	r2, r2, #1
 8001a48:	17db      	asrs	r3, r3, #31
 8001a4a:	1ad3      	subs	r3, r2, r3
 8001a4c:	b29b      	uxth	r3, r3
 8001a4e:	005b      	lsls	r3, r3, #1
 8001a50:	b29a      	uxth	r2, r3
 8001a52:	4b78      	ldr	r3, [pc, #480]	; (8001c34 <runCommand+0x330>)
 8001a54:	801a      	strh	r2, [r3, #0]
			handler_Motor_Execute = &handler_Motor_R;
 8001a56:	4b78      	ldr	r3, [pc, #480]	; (8001c38 <runCommand+0x334>)
 8001a58:	4a78      	ldr	r2, [pc, #480]	; (8001c3c <runCommand+0x338>)
 8001a5a:	601a      	str	r2, [r3, #0]
			updateDirMotor(handler_Motor_Execute);
 8001a5c:	4b76      	ldr	r3, [pc, #472]	; (8001c38 <runCommand+0x334>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	4618      	mov	r0, r3
 8001a62:	f7ff fb30 	bl	80010c6 <updateDirMotor>
 8001a66:	e013      	b.n	8001a90 <runCommand+0x18c>
			limit_count_turn = (b/DL)*((Ce*firtsParameter)/(2*180));
 8001a68:	697b      	ldr	r3, [r7, #20]
 8001a6a:	4a71      	ldr	r2, [pc, #452]	; (8001c30 <runCommand+0x32c>)
 8001a6c:	fb82 1203 	smull	r1, r2, r2, r3
 8001a70:	1052      	asrs	r2, r2, #1
 8001a72:	17db      	asrs	r3, r3, #31
 8001a74:	1ad3      	subs	r3, r2, r3
 8001a76:	b29b      	uxth	r3, r3
 8001a78:	005b      	lsls	r3, r3, #1
 8001a7a:	b29a      	uxth	r2, r3
 8001a7c:	4b6d      	ldr	r3, [pc, #436]	; (8001c34 <runCommand+0x330>)
 8001a7e:	801a      	strh	r2, [r3, #0]
			handler_Motor_Execute = &handler_Motor_L;
 8001a80:	4b6d      	ldr	r3, [pc, #436]	; (8001c38 <runCommand+0x334>)
 8001a82:	4a6f      	ldr	r2, [pc, #444]	; (8001c40 <runCommand+0x33c>)
 8001a84:	601a      	str	r2, [r3, #0]
			updateDirMotor(handler_Motor_Execute);
 8001a86:	4b6c      	ldr	r3, [pc, #432]	; (8001c38 <runCommand+0x334>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	f7ff fb1b 	bl	80010c6 <updateDirMotor>
		config_motor(2, periodo_TIMER_Count, (thirdParameter/100), (forthParameter/100), frequency_PWM_Motor);//Tipo de Estudio, periodo [ms], por dutty L, por dutty R, fre pwm [hz]
 8001a90:	4b61      	ldr	r3, [pc, #388]	; (8001c18 <runCommand+0x314>)
 8001a92:	881b      	ldrh	r3, [r3, #0]
 8001a94:	4619      	mov	r1, r3
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	4a61      	ldr	r2, [pc, #388]	; (8001c20 <runCommand+0x31c>)
 8001a9a:	fb82 0203 	smull	r0, r2, r2, r3
 8001a9e:	1152      	asrs	r2, r2, #5
 8001aa0:	17db      	asrs	r3, r3, #31
 8001aa2:	1ad3      	subs	r3, r2, r3
 8001aa4:	ee07 3a90 	vmov	s15, r3
 8001aa8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001aac:	68bb      	ldr	r3, [r7, #8]
 8001aae:	4a5c      	ldr	r2, [pc, #368]	; (8001c20 <runCommand+0x31c>)
 8001ab0:	fb82 0203 	smull	r0, r2, r2, r3
 8001ab4:	1152      	asrs	r2, r2, #5
 8001ab6:	17db      	asrs	r3, r3, #31
 8001ab8:	1ad3      	subs	r3, r2, r3
 8001aba:	ee07 3a10 	vmov	s14, r3
 8001abe:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001ac2:	4b53      	ldr	r3, [pc, #332]	; (8001c10 <runCommand+0x30c>)
 8001ac4:	881b      	ldrh	r3, [r3, #0]
 8001ac6:	461a      	mov	r2, r3
 8001ac8:	eef0 0a47 	vmov.f32	s1, s14
 8001acc:	eeb0 0a67 	vmov.f32	s0, s15
 8001ad0:	2002      	movs	r0, #2
 8001ad2:	f000 f945 	bl	8001d60 <config_motor>
}
 8001ad6:	e07c      	b.n	8001bd2 <runCommand+0x2ce>
	else if (strcmp(cmd, "start") == 0)
 8001ad8:	f107 0318 	add.w	r3, r7, #24
 8001adc:	4959      	ldr	r1, [pc, #356]	; (8001c44 <runCommand+0x340>)
 8001ade:	4618      	mov	r0, r3
 8001ae0:	f7fe fb7e 	bl	80001e0 <strcmp>
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d12a      	bne.n	8001b40 <runCommand+0x23c>
		periodo_TIMER_Count = firtsParameter;
 8001aea:	697b      	ldr	r3, [r7, #20]
 8001aec:	b29a      	uxth	r2, r3
 8001aee:	4b4a      	ldr	r3, [pc, #296]	; (8001c18 <runCommand+0x314>)
 8001af0:	801a      	strh	r2, [r3, #0]
		config_motor(3, periodo_TIMER_Count,  (secondParameter/100), (thirdParameter/100), forthParameter);//Tipo de Estudio, periodo [ms], por dutty L, por dutty R, fre pwm [hz]
 8001af2:	4b49      	ldr	r3, [pc, #292]	; (8001c18 <runCommand+0x314>)
 8001af4:	881b      	ldrh	r3, [r3, #0]
 8001af6:	4619      	mov	r1, r3
 8001af8:	693b      	ldr	r3, [r7, #16]
 8001afa:	4a49      	ldr	r2, [pc, #292]	; (8001c20 <runCommand+0x31c>)
 8001afc:	fb82 0203 	smull	r0, r2, r2, r3
 8001b00:	1152      	asrs	r2, r2, #5
 8001b02:	17db      	asrs	r3, r3, #31
 8001b04:	1ad3      	subs	r3, r2, r3
 8001b06:	ee07 3a90 	vmov	s15, r3
 8001b0a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	4a43      	ldr	r2, [pc, #268]	; (8001c20 <runCommand+0x31c>)
 8001b12:	fb82 0203 	smull	r0, r2, r2, r3
 8001b16:	1152      	asrs	r2, r2, #5
 8001b18:	17db      	asrs	r3, r3, #31
 8001b1a:	1ad3      	subs	r3, r2, r3
 8001b1c:	ee07 3a10 	vmov	s14, r3
 8001b20:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001b24:	68bb      	ldr	r3, [r7, #8]
 8001b26:	461a      	mov	r2, r3
 8001b28:	eef0 0a47 	vmov.f32	s1, s14
 8001b2c:	eeb0 0a67 	vmov.f32	s0, s15
 8001b30:	2003      	movs	r0, #3
 8001b32:	f000 f915 	bl	8001d60 <config_motor>
		writeMsg(&handler_USART_USB, "Inicio conteo... \n");
 8001b36:	4944      	ldr	r1, [pc, #272]	; (8001c48 <runCommand+0x344>)
 8001b38:	482b      	ldr	r0, [pc, #172]	; (8001be8 <runCommand+0x2e4>)
 8001b3a:	f002 fd56 	bl	80045ea <writeMsg>
}
 8001b3e:	e048      	b.n	8001bd2 <runCommand+0x2ce>
	else if (strcmp(cmd, "reaction") == 0)
 8001b40:	f107 0318 	add.w	r3, r7, #24
 8001b44:	4941      	ldr	r1, [pc, #260]	; (8001c4c <runCommand+0x348>)
 8001b46:	4618      	mov	r0, r3
 8001b48:	f7fe fb4a 	bl	80001e0 <strcmp>
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d12a      	bne.n	8001ba8 <runCommand+0x2a4>
		periodo_TIMER_Count = firtsParameter;
 8001b52:	697b      	ldr	r3, [r7, #20]
 8001b54:	b29a      	uxth	r2, r3
 8001b56:	4b30      	ldr	r3, [pc, #192]	; (8001c18 <runCommand+0x314>)
 8001b58:	801a      	strh	r2, [r3, #0]
		config_motor(4, periodo_TIMER_Count, (secondParameter/100), (secondParameter/100), thirdParameter);//Tipo de Estudio, periodo [ms], por dutty L, por dutty R, fre pwm [hz]
 8001b5a:	4b2f      	ldr	r3, [pc, #188]	; (8001c18 <runCommand+0x314>)
 8001b5c:	881b      	ldrh	r3, [r3, #0]
 8001b5e:	4619      	mov	r1, r3
 8001b60:	693b      	ldr	r3, [r7, #16]
 8001b62:	4a2f      	ldr	r2, [pc, #188]	; (8001c20 <runCommand+0x31c>)
 8001b64:	fb82 0203 	smull	r0, r2, r2, r3
 8001b68:	1152      	asrs	r2, r2, #5
 8001b6a:	17db      	asrs	r3, r3, #31
 8001b6c:	1ad3      	subs	r3, r2, r3
 8001b6e:	ee07 3a90 	vmov	s15, r3
 8001b72:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b76:	693b      	ldr	r3, [r7, #16]
 8001b78:	4a29      	ldr	r2, [pc, #164]	; (8001c20 <runCommand+0x31c>)
 8001b7a:	fb82 0203 	smull	r0, r2, r2, r3
 8001b7e:	1152      	asrs	r2, r2, #5
 8001b80:	17db      	asrs	r3, r3, #31
 8001b82:	1ad3      	subs	r3, r2, r3
 8001b84:	ee07 3a10 	vmov	s14, r3
 8001b88:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	461a      	mov	r2, r3
 8001b90:	eef0 0a47 	vmov.f32	s1, s14
 8001b94:	eeb0 0a67 	vmov.f32	s0, s15
 8001b98:	2004      	movs	r0, #4
 8001b9a:	f000 f8e1 	bl	8001d60 <config_motor>
		writeMsg(&handler_USART_USB, "Inicio conteo... \n");
 8001b9e:	492a      	ldr	r1, [pc, #168]	; (8001c48 <runCommand+0x344>)
 8001ba0:	4811      	ldr	r0, [pc, #68]	; (8001be8 <runCommand+0x2e4>)
 8001ba2:	f002 fd22 	bl	80045ea <writeMsg>
}
 8001ba6:	e014      	b.n	8001bd2 <runCommand+0x2ce>
	else if (strcmp(cmd, "stop") == 0)
 8001ba8:	f107 0318 	add.w	r3, r7, #24
 8001bac:	4928      	ldr	r1, [pc, #160]	; (8001c50 <runCommand+0x34c>)
 8001bae:	4618      	mov	r0, r3
 8001bb0:	f7fe fb16 	bl	80001e0 <strcmp>
 8001bb4:	4603      	mov	r3, r0
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d107      	bne.n	8001bca <runCommand+0x2c6>
		status_motor(RESET);
 8001bba:	2000      	movs	r0, #0
 8001bbc:	f000 f84e 	bl	8001c5c <status_motor>
		writeMsgForTXE(&handler_USART_USB, "Estudio finalizado \n");
 8001bc0:	4924      	ldr	r1, [pc, #144]	; (8001c54 <runCommand+0x350>)
 8001bc2:	4809      	ldr	r0, [pc, #36]	; (8001be8 <runCommand+0x2e4>)
 8001bc4:	f002 fd30 	bl	8004628 <writeMsgForTXE>
}
 8001bc8:	e003      	b.n	8001bd2 <runCommand+0x2ce>
		writeMsgForTXE(&handler_USART_USB, "Comando no correcto \n");
 8001bca:	4923      	ldr	r1, [pc, #140]	; (8001c58 <runCommand+0x354>)
 8001bcc:	4806      	ldr	r0, [pc, #24]	; (8001be8 <runCommand+0x2e4>)
 8001bce:	f002 fd2b 	bl	8004628 <writeMsgForTXE>
}
 8001bd2:	bf00      	nop
 8001bd4:	3758      	adds	r7, #88	; 0x58
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	bd80      	pop	{r7, pc}
 8001bda:	bf00      	nop
 8001bdc:	08009c24 	.word	0x08009c24
 8001be0:	08009c34 	.word	0x08009c34
 8001be4:	08009c3c 	.word	0x08009c3c
 8001be8:	20000274 	.word	0x20000274
 8001bec:	08009c4c 	.word	0x08009c4c
 8001bf0:	08009c78 	.word	0x08009c78
 8001bf4:	08009cc8 	.word	0x08009cc8
 8001bf8:	08009d20 	.word	0x08009d20
 8001bfc:	08009d74 	.word	0x08009d74
 8001c00:	08009dd4 	.word	0x08009dd4
 8001c04:	08009e38 	.word	0x08009e38
 8001c08:	08009e70 	.word	0x08009e70
 8001c0c:	000186a0 	.word	0x000186a0
 8001c10:	20000006 	.word	0x20000006
 8001c14:	08009e7c 	.word	0x08009e7c
 8001c18:	20000004 	.word	0x20000004
 8001c1c:	20000378 	.word	0x20000378
 8001c20:	51eb851f 	.word	0x51eb851f
 8001c24:	2000037c 	.word	0x2000037c
 8001c28:	08009e84 	.word	0x08009e84
 8001c2c:	20000385 	.word	0x20000385
 8001c30:	66666667 	.word	0x66666667
 8001c34:	20000388 	.word	0x20000388
 8001c38:	20000380 	.word	0x20000380
 8001c3c:	200002f0 	.word	0x200002f0
 8001c40:	2000033c 	.word	0x2000033c
 8001c44:	08009e8c 	.word	0x08009e8c
 8001c48:	08009e94 	.word	0x08009e94
 8001c4c:	08009ea8 	.word	0x08009ea8
 8001c50:	08009eb4 	.word	0x08009eb4
 8001c54:	08009ebc 	.word	0x08009ebc
 8001c58:	08009ed4 	.word	0x08009ed4

08001c5c <status_motor>:
     //Actualizamoe el valor del dutty
     updateDuttyMotor(ptrMotorHandler, u);
}

void status_motor(uint8_t status)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b082      	sub	sp, #8
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	4603      	mov	r3, r0
 8001c64:	71fb      	strb	r3, [r7, #7]
	if(status == 1)
 8001c66:	79fb      	ldrb	r3, [r7, #7]
 8001c68:	2b01      	cmp	r3, #1
 8001c6a:	d13a      	bne.n	8001ce2 <status_motor+0x86>
	{
		//Activamos la interrupcion
		if(flag_motor==3 || flag_motor==4)
 8001c6c:	4b38      	ldr	r3, [pc, #224]	; (8001d50 <status_motor+0xf4>)
 8001c6e:	781b      	ldrb	r3, [r3, #0]
 8001c70:	2b03      	cmp	r3, #3
 8001c72:	d003      	beq.n	8001c7c <status_motor+0x20>
 8001c74:	4b36      	ldr	r3, [pc, #216]	; (8001d50 <status_motor+0xf4>)
 8001c76:	781b      	ldrb	r3, [r3, #0]
 8001c78:	2b04      	cmp	r3, #4
 8001c7a:	d103      	bne.n	8001c84 <status_motor+0x28>
		{
			statusiInterruptionTimer(&handler_TIMER_Count, INTERRUPTION_ENABLE);
 8001c7c:	2101      	movs	r1, #1
 8001c7e:	4835      	ldr	r0, [pc, #212]	; (8001d54 <status_motor+0xf8>)
 8001c80:	f000 fafe 	bl	8002280 <statusiInterruptionTimer>
		}
		//Activamos el motor
		statusInOutPWM(handler_Motor_L.phandlerPWM, CHANNEL_ENABLE);
 8001c84:	4b34      	ldr	r3, [pc, #208]	; (8001d58 <status_motor+0xfc>)
 8001c86:	699b      	ldr	r3, [r3, #24]
 8001c88:	2101      	movs	r1, #1
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	f002 f80a 	bl	8003ca4 <statusInOutPWM>
		statusInOutPWM(handler_Motor_R.phandlerPWM, CHANNEL_ENABLE);
 8001c90:	4b32      	ldr	r3, [pc, #200]	; (8001d5c <status_motor+0x100>)
 8001c92:	699b      	ldr	r3, [r3, #24]
 8001c94:	2101      	movs	r1, #1
 8001c96:	4618      	mov	r0, r3
 8001c98:	f002 f804 	bl	8003ca4 <statusInOutPWM>
		GPIO_writePin(handler_Motor_L.phandlerGPIOIN, (handler_Motor_L.configMotor.dir)&SET);
 8001c9c:	4b2e      	ldr	r3, [pc, #184]	; (8001d58 <status_motor+0xfc>)
 8001c9e:	691a      	ldr	r2, [r3, #16]
 8001ca0:	4b2d      	ldr	r3, [pc, #180]	; (8001d58 <status_motor+0xfc>)
 8001ca2:	7a1b      	ldrb	r3, [r3, #8]
 8001ca4:	f003 0301 	and.w	r3, r3, #1
 8001ca8:	b2db      	uxtb	r3, r3
 8001caa:	4619      	mov	r1, r3
 8001cac:	4610      	mov	r0, r2
 8001cae:	f001 fd29 	bl	8003704 <GPIO_writePin>
		GPIO_writePin(handler_Motor_R.phandlerGPIOIN, (handler_Motor_R.configMotor.dir)&SET);
 8001cb2:	4b2a      	ldr	r3, [pc, #168]	; (8001d5c <status_motor+0x100>)
 8001cb4:	691a      	ldr	r2, [r3, #16]
 8001cb6:	4b29      	ldr	r3, [pc, #164]	; (8001d5c <status_motor+0x100>)
 8001cb8:	7a1b      	ldrb	r3, [r3, #8]
 8001cba:	f003 0301 	and.w	r3, r3, #1
 8001cbe:	b2db      	uxtb	r3, r3
 8001cc0:	4619      	mov	r1, r3
 8001cc2:	4610      	mov	r0, r2
 8001cc4:	f001 fd1e 	bl	8003704 <GPIO_writePin>
		GPIO_writePin(handler_Motor_L.phandlerGPIOEN, RESET);
 8001cc8:	4b23      	ldr	r3, [pc, #140]	; (8001d58 <status_motor+0xfc>)
 8001cca:	695b      	ldr	r3, [r3, #20]
 8001ccc:	2100      	movs	r1, #0
 8001cce:	4618      	mov	r0, r3
 8001cd0:	f001 fd18 	bl	8003704 <GPIO_writePin>
		GPIO_writePin(handler_Motor_R.phandlerGPIOEN, RESET);
 8001cd4:	4b21      	ldr	r3, [pc, #132]	; (8001d5c <status_motor+0x100>)
 8001cd6:	695b      	ldr	r3, [r3, #20]
 8001cd8:	2100      	movs	r1, #0
 8001cda:	4618      	mov	r0, r3
 8001cdc:	f001 fd12 	bl	8003704 <GPIO_writePin>
		GPIO_writePin(handler_Motor_L.phandlerGPIOEN, SET);
		GPIO_writePin(handler_Motor_R.phandlerGPIOEN, SET);
		//Reiniciamos Bandera
		flag_motor = 0;
	}
}
 8001ce0:	e032      	b.n	8001d48 <status_motor+0xec>
		if(flag_motor==3 || flag_motor==4)
 8001ce2:	4b1b      	ldr	r3, [pc, #108]	; (8001d50 <status_motor+0xf4>)
 8001ce4:	781b      	ldrb	r3, [r3, #0]
 8001ce6:	2b03      	cmp	r3, #3
 8001ce8:	d003      	beq.n	8001cf2 <status_motor+0x96>
 8001cea:	4b19      	ldr	r3, [pc, #100]	; (8001d50 <status_motor+0xf4>)
 8001cec:	781b      	ldrb	r3, [r3, #0]
 8001cee:	2b04      	cmp	r3, #4
 8001cf0:	d103      	bne.n	8001cfa <status_motor+0x9e>
			statusiInterruptionTimer(&handler_TIMER_Count, INTERRUPTION_DISABLE);
 8001cf2:	2100      	movs	r1, #0
 8001cf4:	4817      	ldr	r0, [pc, #92]	; (8001d54 <status_motor+0xf8>)
 8001cf6:	f000 fac3 	bl	8002280 <statusiInterruptionTimer>
		statusInOutPWM(handler_Motor_L.phandlerPWM, CHANNEL_DISABLE);
 8001cfa:	4b17      	ldr	r3, [pc, #92]	; (8001d58 <status_motor+0xfc>)
 8001cfc:	699b      	ldr	r3, [r3, #24]
 8001cfe:	2100      	movs	r1, #0
 8001d00:	4618      	mov	r0, r3
 8001d02:	f001 ffcf 	bl	8003ca4 <statusInOutPWM>
		statusInOutPWM(handler_Motor_R.phandlerPWM, CHANNEL_DISABLE);
 8001d06:	4b15      	ldr	r3, [pc, #84]	; (8001d5c <status_motor+0x100>)
 8001d08:	699b      	ldr	r3, [r3, #24]
 8001d0a:	2100      	movs	r1, #0
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	f001 ffc9 	bl	8003ca4 <statusInOutPWM>
		GPIO_writePin(handler_Motor_L.phandlerGPIOIN, (handler_Motor_L.configMotor.dir)&RESET);
 8001d12:	4b11      	ldr	r3, [pc, #68]	; (8001d58 <status_motor+0xfc>)
 8001d14:	691b      	ldr	r3, [r3, #16]
 8001d16:	2100      	movs	r1, #0
 8001d18:	4618      	mov	r0, r3
 8001d1a:	f001 fcf3 	bl	8003704 <GPIO_writePin>
		GPIO_writePin(handler_Motor_R.phandlerGPIOIN, (handler_Motor_R.configMotor.dir)&RESET);
 8001d1e:	4b0f      	ldr	r3, [pc, #60]	; (8001d5c <status_motor+0x100>)
 8001d20:	691b      	ldr	r3, [r3, #16]
 8001d22:	2100      	movs	r1, #0
 8001d24:	4618      	mov	r0, r3
 8001d26:	f001 fced 	bl	8003704 <GPIO_writePin>
		GPIO_writePin(handler_Motor_L.phandlerGPIOEN, SET);
 8001d2a:	4b0b      	ldr	r3, [pc, #44]	; (8001d58 <status_motor+0xfc>)
 8001d2c:	695b      	ldr	r3, [r3, #20]
 8001d2e:	2101      	movs	r1, #1
 8001d30:	4618      	mov	r0, r3
 8001d32:	f001 fce7 	bl	8003704 <GPIO_writePin>
		GPIO_writePin(handler_Motor_R.phandlerGPIOEN, SET);
 8001d36:	4b09      	ldr	r3, [pc, #36]	; (8001d5c <status_motor+0x100>)
 8001d38:	695b      	ldr	r3, [r3, #20]
 8001d3a:	2101      	movs	r1, #1
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	f001 fce1 	bl	8003704 <GPIO_writePin>
		flag_motor = 0;
 8001d42:	4b03      	ldr	r3, [pc, #12]	; (8001d50 <status_motor+0xf4>)
 8001d44:	2200      	movs	r2, #0
 8001d46:	701a      	strb	r2, [r3, #0]
}
 8001d48:	bf00      	nop
 8001d4a:	3708      	adds	r7, #8
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	bd80      	pop	{r7, pc}
 8001d50:	20000384 	.word	0x20000384
 8001d54:	20000368 	.word	0x20000368
 8001d58:	2000033c 	.word	0x2000033c
 8001d5c:	200002f0 	.word	0x200002f0

08001d60 <config_motor>:

//Funcion para al configuracion de los motores
void config_motor(uint8_t status, int firth, float second, float third, int forth)  //Tipo de Estudio, periodo [ms], por dutty L, por dutty R, fre pwm [hz]
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b086      	sub	sp, #24
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	4603      	mov	r3, r0
 8001d68:	6139      	str	r1, [r7, #16]
 8001d6a:	ed87 0a03 	vstr	s0, [r7, #12]
 8001d6e:	edc7 0a02 	vstr	s1, [r7, #8]
 8001d72:	607a      	str	r2, [r7, #4]
 8001d74:	75fb      	strb	r3, [r7, #23]
	//Actualizacion de la frecuencia del timer
	updateFrequencyTimer(&handler_TIMER_Count, firth);
 8001d76:	693b      	ldr	r3, [r7, #16]
 8001d78:	b29b      	uxth	r3, r3
 8001d7a:	4619      	mov	r1, r3
 8001d7c:	481a      	ldr	r0, [pc, #104]	; (8001de8 <config_motor+0x88>)
 8001d7e:	f000 fa9f 	bl	80022c0 <updateFrequencyTimer>
	//Establecer valores
	handler_Motor_R.configMotor.count=0;
 8001d82:	4b1a      	ldr	r3, [pc, #104]	; (8001dec <config_motor+0x8c>)
 8001d84:	2200      	movs	r2, #0
 8001d86:	815a      	strh	r2, [r3, #10]
	handler_Motor_L.configMotor.count=0;
 8001d88:	4b19      	ldr	r3, [pc, #100]	; (8001df0 <config_motor+0x90>)
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	815a      	strh	r2, [r3, #10]
	//Establecemos valroes iniciales
	timeBackR = timeBackL = getTicksUs();
 8001d8e:	f002 f95b 	bl	8004048 <getTicksUs>
 8001d92:	4602      	mov	r2, r0
 8001d94:	460b      	mov	r3, r1
 8001d96:	4917      	ldr	r1, [pc, #92]	; (8001df4 <config_motor+0x94>)
 8001d98:	e9c1 2300 	strd	r2, r3, [r1]
 8001d9c:	4b15      	ldr	r3, [pc, #84]	; (8001df4 <config_motor+0x94>)
 8001d9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001da2:	4915      	ldr	r1, [pc, #84]	; (8001df8 <config_motor+0x98>)
 8001da4:	e9c1 2300 	strd	r2, r3, [r1]
	count_time = 0;
 8001da8:	4b14      	ldr	r3, [pc, #80]	; (8001dfc <config_motor+0x9c>)
 8001daa:	2200      	movs	r2, #0
 8001dac:	801a      	strh	r2, [r3, #0]
	//Actualizamos el valor del dutty y frecuencia
	updateFrequencyTimer(&handler_TIMER_Motor, 100000/forth);
 8001dae:	4a14      	ldr	r2, [pc, #80]	; (8001e00 <config_motor+0xa0>)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	fb92 f3f3 	sdiv	r3, r2, r3
 8001db6:	b29b      	uxth	r3, r3
 8001db8:	4619      	mov	r1, r3
 8001dba:	4812      	ldr	r0, [pc, #72]	; (8001e04 <config_motor+0xa4>)
 8001dbc:	f000 fa80 	bl	80022c0 <updateFrequencyTimer>
	updateDuttyMotor(&handler_Motor_R, third);
 8001dc0:	ed97 0a02 	vldr	s0, [r7, #8]
 8001dc4:	4809      	ldr	r0, [pc, #36]	; (8001dec <config_motor+0x8c>)
 8001dc6:	f7ff f967 	bl	8001098 <updateDuttyMotor>
	updateDuttyMotor(&handler_Motor_L, second);
 8001dca:	ed97 0a03 	vldr	s0, [r7, #12]
 8001dce:	4808      	ldr	r0, [pc, #32]	; (8001df0 <config_motor+0x90>)
 8001dd0:	f7ff f962 	bl	8001098 <updateDuttyMotor>
	//Cambio valor bandera
	flag_motor=status;
 8001dd4:	4a0c      	ldr	r2, [pc, #48]	; (8001e08 <config_motor+0xa8>)
 8001dd6:	7dfb      	ldrb	r3, [r7, #23]
 8001dd8:	7013      	strb	r3, [r2, #0]
	//Iniciamos el study
	status_motor(SET);
 8001dda:	2001      	movs	r0, #1
 8001ddc:	f7ff ff3e 	bl	8001c5c <status_motor>
}
 8001de0:	bf00      	nop
 8001de2:	3718      	adds	r7, #24
 8001de4:	46bd      	mov	sp, r7
 8001de6:	bd80      	pop	{r7, pc}
 8001de8:	20000368 	.word	0x20000368
 8001dec:	200002f0 	.word	0x200002f0
 8001df0:	2000033c 	.word	0x2000033c
 8001df4:	20000008 	.word	0x20000008
 8001df8:	20000010 	.word	0x20000010
 8001dfc:	20000386 	.word	0x20000386
 8001e00:	000186a0 	.word	0x000186a0
 8001e04:	20000358 	.word	0x20000358
 8001e08:	20000384 	.word	0x20000384

08001e0c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001e0c:	480d      	ldr	r0, [pc, #52]	; (8001e44 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001e0e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001e10:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001e14:	480c      	ldr	r0, [pc, #48]	; (8001e48 <LoopForever+0x6>)
  ldr r1, =_edata
 8001e16:	490d      	ldr	r1, [pc, #52]	; (8001e4c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001e18:	4a0d      	ldr	r2, [pc, #52]	; (8001e50 <LoopForever+0xe>)
  movs r3, #0
 8001e1a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e1c:	e002      	b.n	8001e24 <LoopCopyDataInit>

08001e1e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e1e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e20:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e22:	3304      	adds	r3, #4

08001e24 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e24:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e26:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e28:	d3f9      	bcc.n	8001e1e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e2a:	4a0a      	ldr	r2, [pc, #40]	; (8001e54 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001e2c:	4c0a      	ldr	r4, [pc, #40]	; (8001e58 <LoopForever+0x16>)
  movs r3, #0
 8001e2e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e30:	e001      	b.n	8001e36 <LoopFillZerobss>

08001e32 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e32:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e34:	3204      	adds	r2, #4

08001e36 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e36:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e38:	d3fb      	bcc.n	8001e32 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001e3a:	f002 fe03 	bl	8004a44 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001e3e:	f7ff f96d 	bl	800111c <main>

08001e42 <LoopForever>:

LoopForever:
    b LoopForever
 8001e42:	e7fe      	b.n	8001e42 <LoopForever>
  ldr   r0, =_estack
 8001e44:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001e48:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e4c:	200001f0 	.word	0x200001f0
  ldr r2, =_sidata
 8001e50:	0800a3c4 	.word	0x0800a3c4
  ldr r2, =_sbss
 8001e54:	200001f0 	.word	0x200001f0
  ldr r4, =_ebss
 8001e58:	20000c58 	.word	0x20000c58

08001e5c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001e5c:	e7fe      	b.n	8001e5c <ADC_IRQHandler>

08001e5e <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001e5e:	b480      	push	{r7}
 8001e60:	af00      	add	r7, sp, #0
	return 1;
 8001e62:	2301      	movs	r3, #1
}
 8001e64:	4618      	mov	r0, r3
 8001e66:	46bd      	mov	sp, r7
 8001e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6c:	4770      	bx	lr

08001e6e <_kill>:

int _kill(int pid, int sig)
{
 8001e6e:	b580      	push	{r7, lr}
 8001e70:	b082      	sub	sp, #8
 8001e72:	af00      	add	r7, sp, #0
 8001e74:	6078      	str	r0, [r7, #4]
 8001e76:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001e78:	f002 fdde 	bl	8004a38 <__errno>
 8001e7c:	4603      	mov	r3, r0
 8001e7e:	2216      	movs	r2, #22
 8001e80:	601a      	str	r2, [r3, #0]
	return -1;
 8001e82:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001e86:	4618      	mov	r0, r3
 8001e88:	3708      	adds	r7, #8
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	bd80      	pop	{r7, pc}

08001e8e <_exit>:

void _exit (int status)
{
 8001e8e:	b580      	push	{r7, lr}
 8001e90:	b082      	sub	sp, #8
 8001e92:	af00      	add	r7, sp, #0
 8001e94:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001e96:	f04f 31ff 	mov.w	r1, #4294967295
 8001e9a:	6878      	ldr	r0, [r7, #4]
 8001e9c:	f7ff ffe7 	bl	8001e6e <_kill>
	while (1) {}		/* Make sure we hang here */
 8001ea0:	e7fe      	b.n	8001ea0 <_exit+0x12>

08001ea2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001ea2:	b580      	push	{r7, lr}
 8001ea4:	b086      	sub	sp, #24
 8001ea6:	af00      	add	r7, sp, #0
 8001ea8:	60f8      	str	r0, [r7, #12]
 8001eaa:	60b9      	str	r1, [r7, #8]
 8001eac:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001eae:	2300      	movs	r3, #0
 8001eb0:	617b      	str	r3, [r7, #20]
 8001eb2:	e00a      	b.n	8001eca <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001eb4:	f3af 8000 	nop.w
 8001eb8:	4601      	mov	r1, r0
 8001eba:	68bb      	ldr	r3, [r7, #8]
 8001ebc:	1c5a      	adds	r2, r3, #1
 8001ebe:	60ba      	str	r2, [r7, #8]
 8001ec0:	b2ca      	uxtb	r2, r1
 8001ec2:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ec4:	697b      	ldr	r3, [r7, #20]
 8001ec6:	3301      	adds	r3, #1
 8001ec8:	617b      	str	r3, [r7, #20]
 8001eca:	697a      	ldr	r2, [r7, #20]
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	429a      	cmp	r2, r3
 8001ed0:	dbf0      	blt.n	8001eb4 <_read+0x12>
	}

return len;
 8001ed2:	687b      	ldr	r3, [r7, #4]
}
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	3718      	adds	r7, #24
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	bd80      	pop	{r7, pc}

08001edc <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b086      	sub	sp, #24
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	60f8      	str	r0, [r7, #12]
 8001ee4:	60b9      	str	r1, [r7, #8]
 8001ee6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ee8:	2300      	movs	r3, #0
 8001eea:	617b      	str	r3, [r7, #20]
 8001eec:	e009      	b.n	8001f02 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001eee:	68bb      	ldr	r3, [r7, #8]
 8001ef0:	1c5a      	adds	r2, r3, #1
 8001ef2:	60ba      	str	r2, [r7, #8]
 8001ef4:	781b      	ldrb	r3, [r3, #0]
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001efc:	697b      	ldr	r3, [r7, #20]
 8001efe:	3301      	adds	r3, #1
 8001f00:	617b      	str	r3, [r7, #20]
 8001f02:	697a      	ldr	r2, [r7, #20]
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	429a      	cmp	r2, r3
 8001f08:	dbf1      	blt.n	8001eee <_write+0x12>
	}
	return len;
 8001f0a:	687b      	ldr	r3, [r7, #4]
}
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	3718      	adds	r7, #24
 8001f10:	46bd      	mov	sp, r7
 8001f12:	bd80      	pop	{r7, pc}

08001f14 <_close>:

int _close(int file)
{
 8001f14:	b480      	push	{r7}
 8001f16:	b083      	sub	sp, #12
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
	return -1;
 8001f1c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001f20:	4618      	mov	r0, r3
 8001f22:	370c      	adds	r7, #12
 8001f24:	46bd      	mov	sp, r7
 8001f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2a:	4770      	bx	lr

08001f2c <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	b083      	sub	sp, #12
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
 8001f34:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001f36:	683b      	ldr	r3, [r7, #0]
 8001f38:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001f3c:	605a      	str	r2, [r3, #4]
	return 0;
 8001f3e:	2300      	movs	r3, #0
}
 8001f40:	4618      	mov	r0, r3
 8001f42:	370c      	adds	r7, #12
 8001f44:	46bd      	mov	sp, r7
 8001f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4a:	4770      	bx	lr

08001f4c <_isatty>:

int _isatty(int file)
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	b083      	sub	sp, #12
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
	return 1;
 8001f54:	2301      	movs	r3, #1
}
 8001f56:	4618      	mov	r0, r3
 8001f58:	370c      	adds	r7, #12
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f60:	4770      	bx	lr

08001f62 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001f62:	b480      	push	{r7}
 8001f64:	b085      	sub	sp, #20
 8001f66:	af00      	add	r7, sp, #0
 8001f68:	60f8      	str	r0, [r7, #12]
 8001f6a:	60b9      	str	r1, [r7, #8]
 8001f6c:	607a      	str	r2, [r7, #4]
	return 0;
 8001f6e:	2300      	movs	r3, #0
}
 8001f70:	4618      	mov	r0, r3
 8001f72:	3714      	adds	r7, #20
 8001f74:	46bd      	mov	sp, r7
 8001f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7a:	4770      	bx	lr

08001f7c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b086      	sub	sp, #24
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001f84:	4a14      	ldr	r2, [pc, #80]	; (8001fd8 <_sbrk+0x5c>)
 8001f86:	4b15      	ldr	r3, [pc, #84]	; (8001fdc <_sbrk+0x60>)
 8001f88:	1ad3      	subs	r3, r2, r3
 8001f8a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001f8c:	697b      	ldr	r3, [r7, #20]
 8001f8e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001f90:	4b13      	ldr	r3, [pc, #76]	; (8001fe0 <_sbrk+0x64>)
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d102      	bne.n	8001f9e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001f98:	4b11      	ldr	r3, [pc, #68]	; (8001fe0 <_sbrk+0x64>)
 8001f9a:	4a12      	ldr	r2, [pc, #72]	; (8001fe4 <_sbrk+0x68>)
 8001f9c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001f9e:	4b10      	ldr	r3, [pc, #64]	; (8001fe0 <_sbrk+0x64>)
 8001fa0:	681a      	ldr	r2, [r3, #0]
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	4413      	add	r3, r2
 8001fa6:	693a      	ldr	r2, [r7, #16]
 8001fa8:	429a      	cmp	r2, r3
 8001faa:	d207      	bcs.n	8001fbc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001fac:	f002 fd44 	bl	8004a38 <__errno>
 8001fb0:	4603      	mov	r3, r0
 8001fb2:	220c      	movs	r2, #12
 8001fb4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001fb6:	f04f 33ff 	mov.w	r3, #4294967295
 8001fba:	e009      	b.n	8001fd0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001fbc:	4b08      	ldr	r3, [pc, #32]	; (8001fe0 <_sbrk+0x64>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001fc2:	4b07      	ldr	r3, [pc, #28]	; (8001fe0 <_sbrk+0x64>)
 8001fc4:	681a      	ldr	r2, [r3, #0]
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	4413      	add	r3, r2
 8001fca:	4a05      	ldr	r2, [pc, #20]	; (8001fe0 <_sbrk+0x64>)
 8001fcc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001fce:	68fb      	ldr	r3, [r7, #12]
}
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	3718      	adds	r7, #24
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	bd80      	pop	{r7, pc}
 8001fd8:	20020000 	.word	0x20020000
 8001fdc:	00000400 	.word	0x00000400
 8001fe0:	200003e0 	.word	0x200003e0
 8001fe4:	20000c58 	.word	0x20000c58

08001fe8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	b083      	sub	sp, #12
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	4603      	mov	r3, r0
 8001ff0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ff2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	db0b      	blt.n	8002012 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ffa:	79fb      	ldrb	r3, [r7, #7]
 8001ffc:	f003 021f 	and.w	r2, r3, #31
 8002000:	4907      	ldr	r1, [pc, #28]	; (8002020 <__NVIC_EnableIRQ+0x38>)
 8002002:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002006:	095b      	lsrs	r3, r3, #5
 8002008:	2001      	movs	r0, #1
 800200a:	fa00 f202 	lsl.w	r2, r0, r2
 800200e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002012:	bf00      	nop
 8002014:	370c      	adds	r7, #12
 8002016:	46bd      	mov	sp, r7
 8002018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201c:	4770      	bx	lr
 800201e:	bf00      	nop
 8002020:	e000e100 	.word	0xe000e100

08002024 <BasicTimer_Config>:
TIM_TypeDef *ptrTimer4Used;
TIM_TypeDef *ptrTimer5Used;

//Funcion para cargar la configuracion del Timer
void BasicTimer_Config(BasicTimer_Handler_t *ptrBTimerHandler)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	b084      	sub	sp, #16
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]

	//---------------------------------1) Activamos el periferico------------------------------------------
	//Registro: APB1ENR

	//Verificamos para TIM2
	if(ptrBTimerHandler->ptrTIMx==TIM2)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	68db      	ldr	r3, [r3, #12]
 8002030:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002034:	d10a      	bne.n	800204c <BasicTimer_Config+0x28>
	{
		/*Activamos el periferico escribiendo un 1 deacuerdo a la posicion
		 * del periferico en el registro*/
		RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 8002036:	4b62      	ldr	r3, [pc, #392]	; (80021c0 <BasicTimer_Config+0x19c>)
 8002038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800203a:	4a61      	ldr	r2, [pc, #388]	; (80021c0 <BasicTimer_Config+0x19c>)
 800203c:	f043 0301 	orr.w	r3, r3, #1
 8002040:	6413      	str	r3, [r2, #64]	; 0x40

		//Guardamos una referencia al periferico que estamos utilizando
		ptrTimer2Used = ptrBTimerHandler->ptrTIMx;
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	68db      	ldr	r3, [r3, #12]
 8002046:	4a5f      	ldr	r2, [pc, #380]	; (80021c4 <BasicTimer_Config+0x1a0>)
 8002048:	6013      	str	r3, [r2, #0]
 800204a:	e02e      	b.n	80020aa <BasicTimer_Config+0x86>

	}
	//Verificamos para TIM3
	else if(ptrBTimerHandler->ptrTIMx==TIM3)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	68db      	ldr	r3, [r3, #12]
 8002050:	4a5d      	ldr	r2, [pc, #372]	; (80021c8 <BasicTimer_Config+0x1a4>)
 8002052:	4293      	cmp	r3, r2
 8002054:	d10a      	bne.n	800206c <BasicTimer_Config+0x48>
	{
		/*Activamos el periferico escribiendo un 1 deacuerdo a la posicion
		 * del periferico en el registro*/
		RCC->APB1ENR |= RCC_APB1ENR_TIM3EN;
 8002056:	4b5a      	ldr	r3, [pc, #360]	; (80021c0 <BasicTimer_Config+0x19c>)
 8002058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800205a:	4a59      	ldr	r2, [pc, #356]	; (80021c0 <BasicTimer_Config+0x19c>)
 800205c:	f043 0302 	orr.w	r3, r3, #2
 8002060:	6413      	str	r3, [r2, #64]	; 0x40

		//Guardamos una referencia al periferico que estamos utilizando
		ptrTimer3Used = ptrBTimerHandler->ptrTIMx;
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	68db      	ldr	r3, [r3, #12]
 8002066:	4a59      	ldr	r2, [pc, #356]	; (80021cc <BasicTimer_Config+0x1a8>)
 8002068:	6013      	str	r3, [r2, #0]
 800206a:	e01e      	b.n	80020aa <BasicTimer_Config+0x86>
	}
	//Verificamos para TIM4
	else if(ptrBTimerHandler->ptrTIMx==TIM4)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	68db      	ldr	r3, [r3, #12]
 8002070:	4a57      	ldr	r2, [pc, #348]	; (80021d0 <BasicTimer_Config+0x1ac>)
 8002072:	4293      	cmp	r3, r2
 8002074:	d10a      	bne.n	800208c <BasicTimer_Config+0x68>
	{
		/*Activamos el periferico escribiendo un 1 deacuerdo a la posicion
		 * del periferico en el registro*/
		RCC->APB1ENR |= RCC_APB1ENR_TIM4EN;
 8002076:	4b52      	ldr	r3, [pc, #328]	; (80021c0 <BasicTimer_Config+0x19c>)
 8002078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800207a:	4a51      	ldr	r2, [pc, #324]	; (80021c0 <BasicTimer_Config+0x19c>)
 800207c:	f043 0304 	orr.w	r3, r3, #4
 8002080:	6413      	str	r3, [r2, #64]	; 0x40

		//Guardamos una referencia al periferico que estamos utilizando
		ptrTimer4Used = ptrBTimerHandler->ptrTIMx;
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	68db      	ldr	r3, [r3, #12]
 8002086:	4a53      	ldr	r2, [pc, #332]	; (80021d4 <BasicTimer_Config+0x1b0>)
 8002088:	6013      	str	r3, [r2, #0]
 800208a:	e00e      	b.n	80020aa <BasicTimer_Config+0x86>
	}
	//Verificamos para TIM5
	else if(ptrBTimerHandler->ptrTIMx==TIM5)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	68db      	ldr	r3, [r3, #12]
 8002090:	4a51      	ldr	r2, [pc, #324]	; (80021d8 <BasicTimer_Config+0x1b4>)
 8002092:	4293      	cmp	r3, r2
 8002094:	d109      	bne.n	80020aa <BasicTimer_Config+0x86>
	{
		/*Activamos el periferico escribiendo un 1 deacuerdo a la posicion
		 * del periferico en el registro*/
		RCC->APB1ENR |= RCC_APB1ENR_TIM5EN;
 8002096:	4b4a      	ldr	r3, [pc, #296]	; (80021c0 <BasicTimer_Config+0x19c>)
 8002098:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800209a:	4a49      	ldr	r2, [pc, #292]	; (80021c0 <BasicTimer_Config+0x19c>)
 800209c:	f043 0308 	orr.w	r3, r3, #8
 80020a0:	6413      	str	r3, [r2, #64]	; 0x40

		//Guardamos una referencia al periferico que estamos utilizando
		ptrTimer5Used = ptrBTimerHandler->ptrTIMx;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	68db      	ldr	r3, [r3, #12]
 80020a6:	4a4d      	ldr	r2, [pc, #308]	; (80021dc <BasicTimer_Config+0x1b8>)
 80020a8:	6013      	str	r3, [r2, #0]
	}
	//------------------------------2) Configurando el pre-escaler-----------------------------------------
	//Registro:TIMx_PSC		//Es un valor de 32 bit

	uint8_t clockSystem = getConfigPLL();          //Guardamos la velocidad de reloj entregada al bus APB1
 80020aa:	f001 fbeb 	bl	8003884 <getConfigPLL>
 80020ae:	4603      	mov	r3, r0
 80020b0:	73bb      	strb	r3, [r7, #14]
	uint8_t clock = getClockAPB1();          //Guardamos la velocidad de reloj entregada al bus APB1
 80020b2:	f001 fc03 	bl	80038bc <getClockAPB1>
 80020b6:	4603      	mov	r3, r0
 80020b8:	73fb      	strb	r3, [r7, #15]

	//Verificamos si el multiplicador del Timer esta activado por el preescaler
	if(clockSystem>=50)
 80020ba:	7bbb      	ldrb	r3, [r7, #14]
 80020bc:	2b31      	cmp	r3, #49	; 0x31
 80020be:	d903      	bls.n	80020c8 <BasicTimer_Config+0xa4>
	{
		clock = clock*2;
 80020c0:	7bfb      	ldrb	r3, [r7, #15]
 80020c2:	005b      	lsls	r3, r3, #1
 80020c4:	73fb      	strb	r3, [r7, #15]
 80020c6:	e000      	b.n	80020ca <BasicTimer_Config+0xa6>
	}
	else
	{
		__NOP();
 80020c8:	bf00      	nop
	}

	/*La frecuencia de reloj contador CK_CNT es igual a fck_psc/(psc[15:0]+1)
	 * por tanto define la velocidad a la que incrementa el counter*/
	ptrBTimerHandler->ptrTIMx->PSC = (clock)*(ptrBTimerHandler->TIMx_Config.TIMx_periodcnt)-1; //(min:0, max:65536)
 80020ca:	7bfb      	ldrb	r3, [r7, #15]
 80020cc:	687a      	ldr	r2, [r7, #4]
 80020ce:	8852      	ldrh	r2, [r2, #2]
 80020d0:	fb02 f303 	mul.w	r3, r2, r3
 80020d4:	1e5a      	subs	r2, r3, #1
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	68db      	ldr	r3, [r3, #12]
 80020da:	629a      	str	r2, [r3, #40]	; 0x28
	//Registro:TIMx_CR1		Es un registro de configuracion del TIMx
	//Registro:TIMx_ARR		Es un valor de 32 bit
	//Registro:TIMx_CNT/	Es un valor de 32 bit

	//verificamos si el timer se configuro como up o dowm
	if(ptrBTimerHandler->TIMx_Config.TIMx_mode==BTIMER_MODE_UP)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	781b      	ldrb	r3, [r3, #0]
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d112      	bne.n	800210a <BasicTimer_Config+0xe6>
	{
		//-------a)Definimos la direccion para el conteo-------------
		ptrBTimerHandler->ptrTIMx->CR1 &= ~(0b1<<4);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	68db      	ldr	r3, [r3, #12]
 80020e8:	681a      	ldr	r2, [r3, #0]
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	68db      	ldr	r3, [r3, #12]
 80020ee:	f022 0210 	bic.w	r2, r2, #16
 80020f2:	601a      	str	r2, [r3, #0]
		//-------b)Configuracion del Auto-Reload---------------------
		ptrBTimerHandler->ptrTIMx->ARR = ptrBTimerHandler->TIMx_Config.TIMX_period+1;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	685a      	ldr	r2, [r3, #4]
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	68db      	ldr	r3, [r3, #12]
 80020fc:	3201      	adds	r2, #1
 80020fe:	62da      	str	r2, [r3, #44]	; 0x2c
		//-------c)Reinicio del registro counter----------------------
		ptrBTimerHandler->ptrTIMx->CNT = 0;
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	68db      	ldr	r3, [r3, #12]
 8002104:	2200      	movs	r2, #0
 8002106:	625a      	str	r2, [r3, #36]	; 0x24
 8002108:	e018      	b.n	800213c <BasicTimer_Config+0x118>
	}
	else
	{
		//-------a)Definimos la direccion para el conteo-------------
		ptrBTimerHandler->ptrTIMx->CR1 &= ~(0b1<<4); //limpiamos
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	68db      	ldr	r3, [r3, #12]
 800210e:	681a      	ldr	r2, [r3, #0]
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	68db      	ldr	r3, [r3, #12]
 8002114:	f022 0210 	bic.w	r2, r2, #16
 8002118:	601a      	str	r2, [r3, #0]
		ptrBTimerHandler->ptrTIMx->CR1 |= (0b1<<4);
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	68db      	ldr	r3, [r3, #12]
 800211e:	681a      	ldr	r2, [r3, #0]
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	68db      	ldr	r3, [r3, #12]
 8002124:	f042 0210 	orr.w	r2, r2, #16
 8002128:	601a      	str	r2, [r3, #0]
		//-------b)Configuracion del Auto-Reload---------------------
		ptrBTimerHandler->ptrTIMx->ARR = 0;
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	68db      	ldr	r3, [r3, #12]
 800212e:	2200      	movs	r2, #0
 8002130:	62da      	str	r2, [r3, #44]	; 0x2c
		//-------c)Reinicio del registro counter----------------------
		ptrBTimerHandler->ptrTIMx->CNT = ptrBTimerHandler->TIMx_Config.TIMX_period;
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	68db      	ldr	r3, [r3, #12]
 8002136:	687a      	ldr	r2, [r7, #4]
 8002138:	6852      	ldr	r2, [r2, #4]
 800213a:	625a      	str	r2, [r3, #36]	; 0x24
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800213c:	b672      	cpsid	i
}
 800213e:	bf00      	nop

	//Desactivamos las interrupciones Globales
	__disable_irq();

	//Matriculamos la interrupcion en el NVCI
	if(ptrBTimerHandler->ptrTIMx==TIM2)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	68db      	ldr	r3, [r3, #12]
 8002144:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002148:	d103      	bne.n	8002152 <BasicTimer_Config+0x12e>
	{
		//Activamos el NVIC para la interrupcion del TIM2
		NVIC_EnableIRQ(TIM2_IRQn);
 800214a:	201c      	movs	r0, #28
 800214c:	f7ff ff4c 	bl	8001fe8 <__NVIC_EnableIRQ>
 8002150:	e019      	b.n	8002186 <BasicTimer_Config+0x162>
	}
	else if(ptrBTimerHandler->ptrTIMx==TIM3)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	68db      	ldr	r3, [r3, #12]
 8002156:	4a1c      	ldr	r2, [pc, #112]	; (80021c8 <BasicTimer_Config+0x1a4>)
 8002158:	4293      	cmp	r3, r2
 800215a:	d103      	bne.n	8002164 <BasicTimer_Config+0x140>
	{
		//Activamos el NVIC para la interrupcion del TIM3
		NVIC_EnableIRQ(TIM3_IRQn);
 800215c:	201d      	movs	r0, #29
 800215e:	f7ff ff43 	bl	8001fe8 <__NVIC_EnableIRQ>
 8002162:	e010      	b.n	8002186 <BasicTimer_Config+0x162>
	}
	else if(ptrBTimerHandler->ptrTIMx==TIM4)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	68db      	ldr	r3, [r3, #12]
 8002168:	4a19      	ldr	r2, [pc, #100]	; (80021d0 <BasicTimer_Config+0x1ac>)
 800216a:	4293      	cmp	r3, r2
 800216c:	d103      	bne.n	8002176 <BasicTimer_Config+0x152>
	{
		//Activamos el NVIC para la interrupcion del TIM4
		NVIC_EnableIRQ(TIM4_IRQn);
 800216e:	201e      	movs	r0, #30
 8002170:	f7ff ff3a 	bl	8001fe8 <__NVIC_EnableIRQ>
 8002174:	e007      	b.n	8002186 <BasicTimer_Config+0x162>
	}
	else if(ptrBTimerHandler->ptrTIMx==TIM5)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	68db      	ldr	r3, [r3, #12]
 800217a:	4a17      	ldr	r2, [pc, #92]	; (80021d8 <BasicTimer_Config+0x1b4>)
 800217c:	4293      	cmp	r3, r2
 800217e:	d102      	bne.n	8002186 <BasicTimer_Config+0x162>
	{
		//Activamos el NVIC para la interrupcion del TIM5
		NVIC_EnableIRQ(TIM5_IRQn);
 8002180:	2032      	movs	r0, #50	; 0x32
 8002182:	f7ff ff31 	bl	8001fe8 <__NVIC_EnableIRQ>
  __ASM volatile ("cpsie i" : : : "memory");
 8002186:	b662      	cpsie	i
}
 8002188:	bf00      	nop
	//Activo las interrupciones Globales
	__enable_irq();

	//----------------------5)Definimos el estado de la interrupcion---------------------------------

	statusiInterruptionTimer(ptrBTimerHandler, (ptrBTimerHandler->TIMx_Config.TIMx_interruptEnable));
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	7a1b      	ldrb	r3, [r3, #8]
 800218e:	4619      	mov	r1, r3
 8002190:	6878      	ldr	r0, [r7, #4]
 8002192:	f000 f875 	bl	8002280 <statusiInterruptionTimer>

	//----------------------6) Activamos el Timer---------------------------------
	//Registro:TIMx_CR1

	ptrBTimerHandler->ptrTIMx->CR1 &= ~TIM_CR1_CEN;
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	68db      	ldr	r3, [r3, #12]
 800219a:	681a      	ldr	r2, [r3, #0]
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	68db      	ldr	r3, [r3, #12]
 80021a0:	f022 0201 	bic.w	r2, r2, #1
 80021a4:	601a      	str	r2, [r3, #0]
	ptrBTimerHandler->ptrTIMx->CR1 |= TIM_CR1_CEN;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	68db      	ldr	r3, [r3, #12]
 80021aa:	681a      	ldr	r2, [r3, #0]
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	68db      	ldr	r3, [r3, #12]
 80021b0:	f042 0201 	orr.w	r2, r2, #1
 80021b4:	601a      	str	r2, [r3, #0]
}
 80021b6:	bf00      	nop
 80021b8:	3710      	adds	r7, #16
 80021ba:	46bd      	mov	sp, r7
 80021bc:	bd80      	pop	{r7, pc}
 80021be:	bf00      	nop
 80021c0:	40023800 	.word	0x40023800
 80021c4:	200003e4 	.word	0x200003e4
 80021c8:	40000400 	.word	0x40000400
 80021cc:	200003e8 	.word	0x200003e8
 80021d0:	40000800 	.word	0x40000800
 80021d4:	200003ec 	.word	0x200003ec
 80021d8:	40000c00 	.word	0x40000c00
 80021dc:	200003f0 	.word	0x200003f0

080021e0 <BasicTimer4_Callback>:
{
	__NOP();
}

__attribute__((weak)) void BasicTimer4_Callback(void)
{
 80021e0:	b480      	push	{r7}
 80021e2:	af00      	add	r7, sp, #0
	__NOP();
 80021e4:	bf00      	nop
}
 80021e6:	bf00      	nop
 80021e8:	46bd      	mov	sp, r7
 80021ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ee:	4770      	bx	lr

080021f0 <BasicTimer5_Callback>:

__attribute__((weak)) void BasicTimer5_Callback(void)
{
 80021f0:	b480      	push	{r7}
 80021f2:	af00      	add	r7, sp, #0
	__NOP();
 80021f4:	bf00      	nop
}
 80021f6:	bf00      	nop
 80021f8:	46bd      	mov	sp, r7
 80021fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fe:	4770      	bx	lr

08002200 <TIM2_IRQHandler>:

/* Cuando se produce una interrupcion en el NVIC debido a uno de los TIMER apuntara a una de
 * estas funciones en el vector de interrupciones respectivamente
 */
void TIM2_IRQHandler(void)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	af00      	add	r7, sp, #0
	//Registro:TIMx_SR    Es un registro de almacenamiento del TIMx
	//limpiamos la bandera que indica que la interrupcion se a generado
	ptrTimer2Used->SR &= ~TIM_SR_UIF;
 8002204:	4b05      	ldr	r3, [pc, #20]	; (800221c <TIM2_IRQHandler+0x1c>)
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	691a      	ldr	r2, [r3, #16]
 800220a:	4b04      	ldr	r3, [pc, #16]	; (800221c <TIM2_IRQHandler+0x1c>)
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f022 0201 	bic.w	r2, r2, #1
 8002212:	611a      	str	r2, [r3, #16]

	//Ejecute la funcion correspondiente a la interupccion
	BasicTimer2_Callback();
 8002214:	f7ff f9ba 	bl	800158c <BasicTimer2_Callback>

}
 8002218:	bf00      	nop
 800221a:	bd80      	pop	{r7, pc}
 800221c:	200003e4 	.word	0x200003e4

08002220 <TIM3_IRQHandler>:

void TIM3_IRQHandler(void)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	af00      	add	r7, sp, #0
	//Registro:TIMx_SR    Es un registro de almacenamiento del TIMx
	//limpiamos la bandera que indica que la interrupcion se a generado
	ptrTimer3Used->SR &= ~TIM_SR_UIF;
 8002224:	4b05      	ldr	r3, [pc, #20]	; (800223c <TIM3_IRQHandler+0x1c>)
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	691a      	ldr	r2, [r3, #16]
 800222a:	4b04      	ldr	r3, [pc, #16]	; (800223c <TIM3_IRQHandler+0x1c>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f022 0201 	bic.w	r2, r2, #1
 8002232:	611a      	str	r2, [r3, #16]

	//Ejecute la funcion correspondiente a la interupccion
	BasicTimer3_Callback();
 8002234:	f7ff f9b4 	bl	80015a0 <BasicTimer3_Callback>

}
 8002238:	bf00      	nop
 800223a:	bd80      	pop	{r7, pc}
 800223c:	200003e8 	.word	0x200003e8

08002240 <TIM4_IRQHandler>:

void TIM4_IRQHandler(void)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	af00      	add	r7, sp, #0
	//Registro:TIMx_SR    Es un registro de almacenamiento del TIMx
	//limpiamos la bandera que indica que la interrupcion se a generado
	ptrTimer4Used->SR &= ~TIM_SR_UIF;
 8002244:	4b05      	ldr	r3, [pc, #20]	; (800225c <TIM4_IRQHandler+0x1c>)
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	691a      	ldr	r2, [r3, #16]
 800224a:	4b04      	ldr	r3, [pc, #16]	; (800225c <TIM4_IRQHandler+0x1c>)
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f022 0201 	bic.w	r2, r2, #1
 8002252:	611a      	str	r2, [r3, #16]

	//Ejecute la funcion correspondiente a la interupccion
	BasicTimer4_Callback();
 8002254:	f7ff ffc4 	bl	80021e0 <BasicTimer4_Callback>

}
 8002258:	bf00      	nop
 800225a:	bd80      	pop	{r7, pc}
 800225c:	200003ec 	.word	0x200003ec

08002260 <TIM5_IRQHandler>:

void TIM5_IRQHandler(void)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	af00      	add	r7, sp, #0
	//Registro:TIMx_SR    Es un registro de almacenamiento del TIMx
	//limpiamos la bandera que indica que la interrupcion se a generado
	ptrTimer5Used->SR &= ~TIM_SR_UIF;
 8002264:	4b05      	ldr	r3, [pc, #20]	; (800227c <TIM5_IRQHandler+0x1c>)
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	691a      	ldr	r2, [r3, #16]
 800226a:	4b04      	ldr	r3, [pc, #16]	; (800227c <TIM5_IRQHandler+0x1c>)
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f022 0201 	bic.w	r2, r2, #1
 8002272:	611a      	str	r2, [r3, #16]

	//Ejecute la funcion correspondiente a la interupccion
	BasicTimer5_Callback();
 8002274:	f7ff ffbc 	bl	80021f0 <BasicTimer5_Callback>

}
 8002278:	bf00      	nop
 800227a:	bd80      	pop	{r7, pc}
 800227c:	200003f0 	.word	0x200003f0

08002280 <statusiInterruptionTimer>:


//Definir la interrupcion por el timer
void statusiInterruptionTimer(BasicTimer_Handler_t *ptrBTimerHandler, uint8_t status)
{
 8002280:	b480      	push	{r7}
 8002282:	b083      	sub	sp, #12
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
 8002288:	460b      	mov	r3, r1
 800228a:	70fb      	strb	r3, [r7, #3]
	//Verificar el estado que se desea con definir
	if(status == INTERRUPTION_ENABLE)
 800228c:	78fb      	ldrb	r3, [r7, #3]
 800228e:	2b01      	cmp	r3, #1
 8002290:	d108      	bne.n	80022a4 <statusiInterruptionTimer+0x24>
	{
		//Activamos las interrupciones
		ptrBTimerHandler->ptrTIMx->DIER |=TIM_DIER_UIE;
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	68db      	ldr	r3, [r3, #12]
 8002296:	68da      	ldr	r2, [r3, #12]
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	68db      	ldr	r3, [r3, #12]
 800229c:	f042 0201 	orr.w	r2, r2, #1
 80022a0:	60da      	str	r2, [r3, #12]
	else
	{
		//Desactivamos las interrupciones
		ptrBTimerHandler->ptrTIMx->DIER &= ~TIM_DIER_UIE;
	}
}
 80022a2:	e007      	b.n	80022b4 <statusiInterruptionTimer+0x34>
		ptrBTimerHandler->ptrTIMx->DIER &= ~TIM_DIER_UIE;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	68db      	ldr	r3, [r3, #12]
 80022a8:	68da      	ldr	r2, [r3, #12]
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	68db      	ldr	r3, [r3, #12]
 80022ae:	f022 0201 	bic.w	r2, r2, #1
 80022b2:	60da      	str	r2, [r3, #12]
}
 80022b4:	bf00      	nop
 80022b6:	370c      	adds	r7, #12
 80022b8:	46bd      	mov	sp, r7
 80022ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022be:	4770      	bx	lr

080022c0 <updateFrequencyTimer>:


//Actualizamos la frecuencia del TIMER
void updateFrequencyTimer(BasicTimer_Handler_t *ptrBTimerHandler, uint16_t newPer)
{
 80022c0:	b480      	push	{r7}
 80022c2:	b083      	sub	sp, #12
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
 80022c8:	460b      	mov	r3, r1
 80022ca:	807b      	strh	r3, [r7, #2]
	//Establecemos el nuevo valor del periodo en la configuracion del PWM
	ptrBTimerHandler->TIMx_Config.TIMX_period = newPer;
 80022cc:	887a      	ldrh	r2, [r7, #2]
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	605a      	str	r2, [r3, #4]
	//Reiniamos el contador
	ptrBTimerHandler->ptrTIMx->CNT = 0;
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	68db      	ldr	r3, [r3, #12]
 80022d6:	2200      	movs	r2, #0
 80022d8:	625a      	str	r2, [r3, #36]	; 0x24
	/*Cargamos el valor del ARR el cual es e limite de incrementos del TIMER
	 */
	ptrBTimerHandler->ptrTIMx->ARR = ptrBTimerHandler->TIMx_Config.TIMX_period;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	68db      	ldr	r3, [r3, #12]
 80022de:	687a      	ldr	r2, [r7, #4]
 80022e0:	6852      	ldr	r2, [r2, #4]
 80022e2:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80022e4:	bf00      	nop
 80022e6:	370c      	adds	r7, #12
 80022e8:	46bd      	mov	sp, r7
 80022ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ee:	4770      	bx	lr

080022f0 <__NVIC_EnableIRQ>:
{
 80022f0:	b480      	push	{r7}
 80022f2:	b083      	sub	sp, #12
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	4603      	mov	r3, r0
 80022f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022fe:	2b00      	cmp	r3, #0
 8002300:	db0b      	blt.n	800231a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002302:	79fb      	ldrb	r3, [r7, #7]
 8002304:	f003 021f 	and.w	r2, r3, #31
 8002308:	4907      	ldr	r1, [pc, #28]	; (8002328 <__NVIC_EnableIRQ+0x38>)
 800230a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800230e:	095b      	lsrs	r3, r3, #5
 8002310:	2001      	movs	r0, #1
 8002312:	fa00 f202 	lsl.w	r2, r0, r2
 8002316:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800231a:	bf00      	nop
 800231c:	370c      	adds	r7, #12
 800231e:	46bd      	mov	sp, r7
 8002320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002324:	4770      	bx	lr
 8002326:	bf00      	nop
 8002328:	e000e100 	.word	0xe000e100

0800232c <extInt_Config>:
#include <ExtiDriver.h>
#include <GPIOxDriver.h>

//Configuracion EXTI
void extInt_Config(EXTI_Config_t *extiConfig) // *extiConfig = &handlerEXTI
{
 800232c:	b580      	push	{r7, lr}
 800232e:	b084      	sub	sp, #16
 8002330:	af02      	add	r7, sp, #8
 8002332:	6078      	str	r0, [r7, #4]
	//----------------------1) Configuramos el PINx como entrada ------------------------
	//Definimos la configuracion EXTI para el pin selecionado
	GPIO_PIN_Config(extiConfig->pGPIOHandler, GPIO_MODE_IN, GPIO_OTYPER_PUSHPULL, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDR_NOTHING, AF0);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	6818      	ldr	r0, [r3, #0]
 8002338:	2300      	movs	r3, #0
 800233a:	9301      	str	r3, [sp, #4]
 800233c:	2300      	movs	r3, #0
 800233e:	9300      	str	r3, [sp, #0]
 8002340:	2301      	movs	r3, #1
 8002342:	2200      	movs	r2, #0
 8002344:	2100      	movs	r1, #0
 8002346:	f001 f891 	bl	800346c <GPIO_PIN_Config>

	//Cargamos la configuracion del PIN especifico
	GPIO_Config(extiConfig->pGPIOHandler);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	4618      	mov	r0, r3
 8002350:	f001 f8ae 	bl	80034b0 <GPIO_Config>
	//-----------2) Configuracion de las lineas de conexion del EXTI-----------------------
	//Registro: APB1ENR  En el pefirefico RCC
	//Registro: EXTICR 	 En el periferico SYSCFG

	//-------a) Activamos la señal de reloj al SYSCFG-------------
	RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 8002354:	4b97      	ldr	r3, [pc, #604]	; (80025b4 <extInt_Config+0x288>)
 8002356:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002358:	4a96      	ldr	r2, [pc, #600]	; (80025b4 <extInt_Config+0x288>)
 800235a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800235e:	6453      	str	r3, [r2, #68]	; 0x44

	//-------b)Asignamos el canal del EXTI que corresponde al pin a usa-------------
	//Deacuerdo al PIN_X y GPIO_X, seleccionamos la conexion del EXTIx
	switch(extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	781b      	ldrb	r3, [r3, #0]
 8002366:	2b0f      	cmp	r3, #15
 8002368:	f200 85cf 	bhi.w	8002f0a <extInt_Config+0xbde>
 800236c:	a201      	add	r2, pc, #4	; (adr r2, 8002374 <extInt_Config+0x48>)
 800236e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002372:	bf00      	nop
 8002374:	080023b5 	.word	0x080023b5
 8002378:	0800246b 	.word	0x0800246b
 800237c:	08002521 	.word	0x08002521
 8002380:	080025f7 	.word	0x080025f7
 8002384:	080026ad 	.word	0x080026ad
 8002388:	0800275b 	.word	0x0800275b
 800238c:	08002821 	.word	0x08002821
 8002390:	080028c9 	.word	0x080028c9
 8002394:	08002971 	.word	0x08002971
 8002398:	08002a19 	.word	0x08002a19
 800239c:	08002adf 	.word	0x08002adf
 80023a0:	08002b87 	.word	0x08002b87
 80023a4:	08002c2f 	.word	0x08002c2f
 80023a8:	08002cf5 	.word	0x08002cf5
 80023ac:	08002d9d 	.word	0x08002d9d
 80023b0:	08002e45 	.word	0x08002e45
	//----------------Configuracion EXTI0-----------------
	case 0:
	{
		/*Limpiamos la posicion correspondiente a la configuracion del PIN_0
		en el EXTICR*/
		SYSCFG->EXTICR[0] &= ~(0xF<<SYSCFG_EXTICR1_EXTI0_Pos);
 80023b4:	4b80      	ldr	r3, [pc, #512]	; (80025b8 <extInt_Config+0x28c>)
 80023b6:	689b      	ldr	r3, [r3, #8]
 80023b8:	4a7f      	ldr	r2, [pc, #508]	; (80025b8 <extInt_Config+0x28c>)
 80023ba:	f023 030f 	bic.w	r3, r3, #15
 80023be:	6093      	str	r3, [r2, #8]

		//Seleccionamos el valor a cargar deacuerdo al puerto establecido
		if(extiConfig->pGPIOHandler->pGPIOx == GPIOA)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	689b      	ldr	r3, [r3, #8]
 80023c6:	4a7d      	ldr	r2, [pc, #500]	; (80025bc <extInt_Config+0x290>)
 80023c8:	4293      	cmp	r3, r2
 80023ca:	d105      	bne.n	80023d8 <extInt_Config+0xac>
		{
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI0_PA);
 80023cc:	4b7a      	ldr	r3, [pc, #488]	; (80025b8 <extInt_Config+0x28c>)
 80023ce:	4a7a      	ldr	r2, [pc, #488]	; (80025b8 <extInt_Config+0x28c>)
 80023d0:	689b      	ldr	r3, [r3, #8]
 80023d2:	6093      	str	r3, [r2, #8]
		}
		else
		{
			__NOP();
		}
		break;
 80023d4:	f000 bd9b 	b.w	8002f0e <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOB)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	689b      	ldr	r3, [r3, #8]
 80023de:	4a78      	ldr	r2, [pc, #480]	; (80025c0 <extInt_Config+0x294>)
 80023e0:	4293      	cmp	r3, r2
 80023e2:	d107      	bne.n	80023f4 <extInt_Config+0xc8>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI0_PB);
 80023e4:	4b74      	ldr	r3, [pc, #464]	; (80025b8 <extInt_Config+0x28c>)
 80023e6:	689b      	ldr	r3, [r3, #8]
 80023e8:	4a73      	ldr	r2, [pc, #460]	; (80025b8 <extInt_Config+0x28c>)
 80023ea:	f043 0301 	orr.w	r3, r3, #1
 80023ee:	6093      	str	r3, [r2, #8]
		break;
 80023f0:	f000 bd8d 	b.w	8002f0e <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOC)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	689b      	ldr	r3, [r3, #8]
 80023fa:	4a72      	ldr	r2, [pc, #456]	; (80025c4 <extInt_Config+0x298>)
 80023fc:	4293      	cmp	r3, r2
 80023fe:	d107      	bne.n	8002410 <extInt_Config+0xe4>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI0_PC);
 8002400:	4b6d      	ldr	r3, [pc, #436]	; (80025b8 <extInt_Config+0x28c>)
 8002402:	689b      	ldr	r3, [r3, #8]
 8002404:	4a6c      	ldr	r2, [pc, #432]	; (80025b8 <extInt_Config+0x28c>)
 8002406:	f043 0302 	orr.w	r3, r3, #2
 800240a:	6093      	str	r3, [r2, #8]
		break;
 800240c:	f000 bd7f 	b.w	8002f0e <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOD)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	689b      	ldr	r3, [r3, #8]
 8002416:	4a6c      	ldr	r2, [pc, #432]	; (80025c8 <extInt_Config+0x29c>)
 8002418:	4293      	cmp	r3, r2
 800241a:	d107      	bne.n	800242c <extInt_Config+0x100>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI0_PD);
 800241c:	4b66      	ldr	r3, [pc, #408]	; (80025b8 <extInt_Config+0x28c>)
 800241e:	689b      	ldr	r3, [r3, #8]
 8002420:	4a65      	ldr	r2, [pc, #404]	; (80025b8 <extInt_Config+0x28c>)
 8002422:	f043 0303 	orr.w	r3, r3, #3
 8002426:	6093      	str	r3, [r2, #8]
		break;
 8002428:	f000 bd71 	b.w	8002f0e <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOE)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	689b      	ldr	r3, [r3, #8]
 8002432:	4a66      	ldr	r2, [pc, #408]	; (80025cc <extInt_Config+0x2a0>)
 8002434:	4293      	cmp	r3, r2
 8002436:	d107      	bne.n	8002448 <extInt_Config+0x11c>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI0_PE);
 8002438:	4b5f      	ldr	r3, [pc, #380]	; (80025b8 <extInt_Config+0x28c>)
 800243a:	689b      	ldr	r3, [r3, #8]
 800243c:	4a5e      	ldr	r2, [pc, #376]	; (80025b8 <extInt_Config+0x28c>)
 800243e:	f043 0304 	orr.w	r3, r3, #4
 8002442:	6093      	str	r3, [r2, #8]
		break;
 8002444:	f000 bd63 	b.w	8002f0e <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOH)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	689b      	ldr	r3, [r3, #8]
 800244e:	4a60      	ldr	r2, [pc, #384]	; (80025d0 <extInt_Config+0x2a4>)
 8002450:	4293      	cmp	r3, r2
 8002452:	d107      	bne.n	8002464 <extInt_Config+0x138>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI0_PH);
 8002454:	4b58      	ldr	r3, [pc, #352]	; (80025b8 <extInt_Config+0x28c>)
 8002456:	689b      	ldr	r3, [r3, #8]
 8002458:	4a57      	ldr	r2, [pc, #348]	; (80025b8 <extInt_Config+0x28c>)
 800245a:	f043 0307 	orr.w	r3, r3, #7
 800245e:	6093      	str	r3, [r2, #8]
		break;
 8002460:	f000 bd55 	b.w	8002f0e <extInt_Config+0xbe2>
			__NOP();
 8002464:	bf00      	nop
		break;
 8002466:	f000 bd52 	b.w	8002f0e <extInt_Config+0xbe2>
	//----------------Configuracion EXTI1-----------------
	case 1:
	{
		/*Limpiamos la posicion correspondiente a la configuracion del PIN_1
		en el EXTICR*/
		SYSCFG->EXTICR[0] &= ~(0xF<<SYSCFG_EXTICR1_EXTI1_Pos);
 800246a:	4b53      	ldr	r3, [pc, #332]	; (80025b8 <extInt_Config+0x28c>)
 800246c:	689b      	ldr	r3, [r3, #8]
 800246e:	4a52      	ldr	r2, [pc, #328]	; (80025b8 <extInt_Config+0x28c>)
 8002470:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002474:	6093      	str	r3, [r2, #8]

		//Seleccionamos el valor a cargar deacuerdo al puerto establecido
		if(extiConfig->pGPIOHandler->pGPIOx == GPIOA)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	689b      	ldr	r3, [r3, #8]
 800247c:	4a4f      	ldr	r2, [pc, #316]	; (80025bc <extInt_Config+0x290>)
 800247e:	4293      	cmp	r3, r2
 8002480:	d105      	bne.n	800248e <extInt_Config+0x162>
		{
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI1_PA);
 8002482:	4b4d      	ldr	r3, [pc, #308]	; (80025b8 <extInt_Config+0x28c>)
 8002484:	4a4c      	ldr	r2, [pc, #304]	; (80025b8 <extInt_Config+0x28c>)
 8002486:	689b      	ldr	r3, [r3, #8]
 8002488:	6093      	str	r3, [r2, #8]
		}
		else
		{
			__NOP();
		}
		break;
 800248a:	f000 bd40 	b.w	8002f0e <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOB)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	689b      	ldr	r3, [r3, #8]
 8002494:	4a4a      	ldr	r2, [pc, #296]	; (80025c0 <extInt_Config+0x294>)
 8002496:	4293      	cmp	r3, r2
 8002498:	d107      	bne.n	80024aa <extInt_Config+0x17e>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI1_PB);
 800249a:	4b47      	ldr	r3, [pc, #284]	; (80025b8 <extInt_Config+0x28c>)
 800249c:	689b      	ldr	r3, [r3, #8]
 800249e:	4a46      	ldr	r2, [pc, #280]	; (80025b8 <extInt_Config+0x28c>)
 80024a0:	f043 0310 	orr.w	r3, r3, #16
 80024a4:	6093      	str	r3, [r2, #8]
		break;
 80024a6:	f000 bd32 	b.w	8002f0e <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOC)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	689b      	ldr	r3, [r3, #8]
 80024b0:	4a44      	ldr	r2, [pc, #272]	; (80025c4 <extInt_Config+0x298>)
 80024b2:	4293      	cmp	r3, r2
 80024b4:	d107      	bne.n	80024c6 <extInt_Config+0x19a>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI1_PC);
 80024b6:	4b40      	ldr	r3, [pc, #256]	; (80025b8 <extInt_Config+0x28c>)
 80024b8:	689b      	ldr	r3, [r3, #8]
 80024ba:	4a3f      	ldr	r2, [pc, #252]	; (80025b8 <extInt_Config+0x28c>)
 80024bc:	f043 0320 	orr.w	r3, r3, #32
 80024c0:	6093      	str	r3, [r2, #8]
		break;
 80024c2:	f000 bd24 	b.w	8002f0e <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOD)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	689b      	ldr	r3, [r3, #8]
 80024cc:	4a3e      	ldr	r2, [pc, #248]	; (80025c8 <extInt_Config+0x29c>)
 80024ce:	4293      	cmp	r3, r2
 80024d0:	d107      	bne.n	80024e2 <extInt_Config+0x1b6>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI1_PD);
 80024d2:	4b39      	ldr	r3, [pc, #228]	; (80025b8 <extInt_Config+0x28c>)
 80024d4:	689b      	ldr	r3, [r3, #8]
 80024d6:	4a38      	ldr	r2, [pc, #224]	; (80025b8 <extInt_Config+0x28c>)
 80024d8:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 80024dc:	6093      	str	r3, [r2, #8]
		break;
 80024de:	f000 bd16 	b.w	8002f0e <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOE)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	689b      	ldr	r3, [r3, #8]
 80024e8:	4a38      	ldr	r2, [pc, #224]	; (80025cc <extInt_Config+0x2a0>)
 80024ea:	4293      	cmp	r3, r2
 80024ec:	d107      	bne.n	80024fe <extInt_Config+0x1d2>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI1_PE);
 80024ee:	4b32      	ldr	r3, [pc, #200]	; (80025b8 <extInt_Config+0x28c>)
 80024f0:	689b      	ldr	r3, [r3, #8]
 80024f2:	4a31      	ldr	r2, [pc, #196]	; (80025b8 <extInt_Config+0x28c>)
 80024f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80024f8:	6093      	str	r3, [r2, #8]
		break;
 80024fa:	f000 bd08 	b.w	8002f0e <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOH)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	689b      	ldr	r3, [r3, #8]
 8002504:	4a32      	ldr	r2, [pc, #200]	; (80025d0 <extInt_Config+0x2a4>)
 8002506:	4293      	cmp	r3, r2
 8002508:	d107      	bne.n	800251a <extInt_Config+0x1ee>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI1_PH);
 800250a:	4b2b      	ldr	r3, [pc, #172]	; (80025b8 <extInt_Config+0x28c>)
 800250c:	689b      	ldr	r3, [r3, #8]
 800250e:	4a2a      	ldr	r2, [pc, #168]	; (80025b8 <extInt_Config+0x28c>)
 8002510:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8002514:	6093      	str	r3, [r2, #8]
		break;
 8002516:	f000 bcfa 	b.w	8002f0e <extInt_Config+0xbe2>
			__NOP();
 800251a:	bf00      	nop
		break;
 800251c:	f000 bcf7 	b.w	8002f0e <extInt_Config+0xbe2>
	//----------------Configuracion EXTI2-----------------
	case 2:
	{
		/*Limpiamos la posicion correspondiente a la configuracion del PIN_2
		en el EXTICR*/
		SYSCFG->EXTICR[0] &= ~(0xF<<SYSCFG_EXTICR1_EXTI2_Pos);
 8002520:	4b25      	ldr	r3, [pc, #148]	; (80025b8 <extInt_Config+0x28c>)
 8002522:	689b      	ldr	r3, [r3, #8]
 8002524:	4a24      	ldr	r2, [pc, #144]	; (80025b8 <extInt_Config+0x28c>)
 8002526:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800252a:	6093      	str	r3, [r2, #8]

		//Seleccionamos el valor a cargar deacuerdo al puerto establecido
		if(extiConfig->pGPIOHandler->pGPIOx == GPIOA)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	689b      	ldr	r3, [r3, #8]
 8002532:	4a22      	ldr	r2, [pc, #136]	; (80025bc <extInt_Config+0x290>)
 8002534:	4293      	cmp	r3, r2
 8002536:	d105      	bne.n	8002544 <extInt_Config+0x218>
		{
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI2_PA);
 8002538:	4b1f      	ldr	r3, [pc, #124]	; (80025b8 <extInt_Config+0x28c>)
 800253a:	4a1f      	ldr	r2, [pc, #124]	; (80025b8 <extInt_Config+0x28c>)
 800253c:	689b      	ldr	r3, [r3, #8]
 800253e:	6093      	str	r3, [r2, #8]
		}
		else
		{
			__NOP();
		}
		break;
 8002540:	f000 bce5 	b.w	8002f0e <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOB)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	689b      	ldr	r3, [r3, #8]
 800254a:	4a1d      	ldr	r2, [pc, #116]	; (80025c0 <extInt_Config+0x294>)
 800254c:	4293      	cmp	r3, r2
 800254e:	d107      	bne.n	8002560 <extInt_Config+0x234>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI2_PB);
 8002550:	4b19      	ldr	r3, [pc, #100]	; (80025b8 <extInt_Config+0x28c>)
 8002552:	689b      	ldr	r3, [r3, #8]
 8002554:	4a18      	ldr	r2, [pc, #96]	; (80025b8 <extInt_Config+0x28c>)
 8002556:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800255a:	6093      	str	r3, [r2, #8]
		break;
 800255c:	f000 bcd7 	b.w	8002f0e <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOC)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	689b      	ldr	r3, [r3, #8]
 8002566:	4a17      	ldr	r2, [pc, #92]	; (80025c4 <extInt_Config+0x298>)
 8002568:	4293      	cmp	r3, r2
 800256a:	d107      	bne.n	800257c <extInt_Config+0x250>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI2_PC);
 800256c:	4b12      	ldr	r3, [pc, #72]	; (80025b8 <extInt_Config+0x28c>)
 800256e:	689b      	ldr	r3, [r3, #8]
 8002570:	4a11      	ldr	r2, [pc, #68]	; (80025b8 <extInt_Config+0x28c>)
 8002572:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002576:	6093      	str	r3, [r2, #8]
		break;
 8002578:	f000 bcc9 	b.w	8002f0e <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOD)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	689b      	ldr	r3, [r3, #8]
 8002582:	4a11      	ldr	r2, [pc, #68]	; (80025c8 <extInt_Config+0x29c>)
 8002584:	4293      	cmp	r3, r2
 8002586:	d107      	bne.n	8002598 <extInt_Config+0x26c>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI2_PD);
 8002588:	4b0b      	ldr	r3, [pc, #44]	; (80025b8 <extInt_Config+0x28c>)
 800258a:	689b      	ldr	r3, [r3, #8]
 800258c:	4a0a      	ldr	r2, [pc, #40]	; (80025b8 <extInt_Config+0x28c>)
 800258e:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8002592:	6093      	str	r3, [r2, #8]
		break;
 8002594:	f000 bcbb 	b.w	8002f0e <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOE)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	689b      	ldr	r3, [r3, #8]
 800259e:	4a0b      	ldr	r2, [pc, #44]	; (80025cc <extInt_Config+0x2a0>)
 80025a0:	4293      	cmp	r3, r2
 80025a2:	d117      	bne.n	80025d4 <extInt_Config+0x2a8>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI2_PE);
 80025a4:	4b04      	ldr	r3, [pc, #16]	; (80025b8 <extInt_Config+0x28c>)
 80025a6:	689b      	ldr	r3, [r3, #8]
 80025a8:	4a03      	ldr	r2, [pc, #12]	; (80025b8 <extInt_Config+0x28c>)
 80025aa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80025ae:	6093      	str	r3, [r2, #8]
		break;
 80025b0:	f000 bcad 	b.w	8002f0e <extInt_Config+0xbe2>
 80025b4:	40023800 	.word	0x40023800
 80025b8:	40013800 	.word	0x40013800
 80025bc:	40020000 	.word	0x40020000
 80025c0:	40020400 	.word	0x40020400
 80025c4:	40020800 	.word	0x40020800
 80025c8:	40020c00 	.word	0x40020c00
 80025cc:	40021000 	.word	0x40021000
 80025d0:	40021c00 	.word	0x40021c00
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOH)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	689b      	ldr	r3, [r3, #8]
 80025da:	4a8a      	ldr	r2, [pc, #552]	; (8002804 <extInt_Config+0x4d8>)
 80025dc:	4293      	cmp	r3, r2
 80025de:	d107      	bne.n	80025f0 <extInt_Config+0x2c4>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI2_PH);
 80025e0:	4b89      	ldr	r3, [pc, #548]	; (8002808 <extInt_Config+0x4dc>)
 80025e2:	689b      	ldr	r3, [r3, #8]
 80025e4:	4a88      	ldr	r2, [pc, #544]	; (8002808 <extInt_Config+0x4dc>)
 80025e6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80025ea:	6093      	str	r3, [r2, #8]
		break;
 80025ec:	f000 bc8f 	b.w	8002f0e <extInt_Config+0xbe2>
			__NOP();
 80025f0:	bf00      	nop
		break;
 80025f2:	f000 bc8c 	b.w	8002f0e <extInt_Config+0xbe2>
	//----------------Configuracion EXTI3-----------------
	case 3:
	{
		/*Limpiamos la posicion correspondiente a la configuracion del PIN_3
		en el EXTICR*/
		SYSCFG->EXTICR[0] &= ~(0xF<<SYSCFG_EXTICR1_EXTI3_Pos);
 80025f6:	4b84      	ldr	r3, [pc, #528]	; (8002808 <extInt_Config+0x4dc>)
 80025f8:	689b      	ldr	r3, [r3, #8]
 80025fa:	4a83      	ldr	r2, [pc, #524]	; (8002808 <extInt_Config+0x4dc>)
 80025fc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002600:	6093      	str	r3, [r2, #8]

		//Seleccionamos el valor a cargar deacuerdo al puerto establecido
		if(extiConfig->pGPIOHandler->pGPIOx == GPIOA)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	689b      	ldr	r3, [r3, #8]
 8002608:	4a80      	ldr	r2, [pc, #512]	; (800280c <extInt_Config+0x4e0>)
 800260a:	4293      	cmp	r3, r2
 800260c:	d105      	bne.n	800261a <extInt_Config+0x2ee>
		{
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI3_PA);
 800260e:	4b7e      	ldr	r3, [pc, #504]	; (8002808 <extInt_Config+0x4dc>)
 8002610:	4a7d      	ldr	r2, [pc, #500]	; (8002808 <extInt_Config+0x4dc>)
 8002612:	689b      	ldr	r3, [r3, #8]
 8002614:	6093      	str	r3, [r2, #8]
		}
		else
		{
			__NOP();
		}
		break;
 8002616:	f000 bc7a 	b.w	8002f0e <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOB)
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	689b      	ldr	r3, [r3, #8]
 8002620:	4a7b      	ldr	r2, [pc, #492]	; (8002810 <extInt_Config+0x4e4>)
 8002622:	4293      	cmp	r3, r2
 8002624:	d107      	bne.n	8002636 <extInt_Config+0x30a>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI3_PB);
 8002626:	4b78      	ldr	r3, [pc, #480]	; (8002808 <extInt_Config+0x4dc>)
 8002628:	689b      	ldr	r3, [r3, #8]
 800262a:	4a77      	ldr	r2, [pc, #476]	; (8002808 <extInt_Config+0x4dc>)
 800262c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002630:	6093      	str	r3, [r2, #8]
		break;
 8002632:	f000 bc6c 	b.w	8002f0e <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOC)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	689b      	ldr	r3, [r3, #8]
 800263c:	4a75      	ldr	r2, [pc, #468]	; (8002814 <extInt_Config+0x4e8>)
 800263e:	4293      	cmp	r3, r2
 8002640:	d107      	bne.n	8002652 <extInt_Config+0x326>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI3_PC);
 8002642:	4b71      	ldr	r3, [pc, #452]	; (8002808 <extInt_Config+0x4dc>)
 8002644:	689b      	ldr	r3, [r3, #8]
 8002646:	4a70      	ldr	r2, [pc, #448]	; (8002808 <extInt_Config+0x4dc>)
 8002648:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800264c:	6093      	str	r3, [r2, #8]
		break;
 800264e:	f000 bc5e 	b.w	8002f0e <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOD)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	689b      	ldr	r3, [r3, #8]
 8002658:	4a6f      	ldr	r2, [pc, #444]	; (8002818 <extInt_Config+0x4ec>)
 800265a:	4293      	cmp	r3, r2
 800265c:	d107      	bne.n	800266e <extInt_Config+0x342>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI3_PD);
 800265e:	4b6a      	ldr	r3, [pc, #424]	; (8002808 <extInt_Config+0x4dc>)
 8002660:	689b      	ldr	r3, [r3, #8]
 8002662:	4a69      	ldr	r2, [pc, #420]	; (8002808 <extInt_Config+0x4dc>)
 8002664:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 8002668:	6093      	str	r3, [r2, #8]
		break;
 800266a:	f000 bc50 	b.w	8002f0e <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOE)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	689b      	ldr	r3, [r3, #8]
 8002674:	4a69      	ldr	r2, [pc, #420]	; (800281c <extInt_Config+0x4f0>)
 8002676:	4293      	cmp	r3, r2
 8002678:	d107      	bne.n	800268a <extInt_Config+0x35e>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI3_PE);
 800267a:	4b63      	ldr	r3, [pc, #396]	; (8002808 <extInt_Config+0x4dc>)
 800267c:	689b      	ldr	r3, [r3, #8]
 800267e:	4a62      	ldr	r2, [pc, #392]	; (8002808 <extInt_Config+0x4dc>)
 8002680:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002684:	6093      	str	r3, [r2, #8]
		break;
 8002686:	f000 bc42 	b.w	8002f0e <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOH)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	689b      	ldr	r3, [r3, #8]
 8002690:	4a5c      	ldr	r2, [pc, #368]	; (8002804 <extInt_Config+0x4d8>)
 8002692:	4293      	cmp	r3, r2
 8002694:	d107      	bne.n	80026a6 <extInt_Config+0x37a>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI3_PH);
 8002696:	4b5c      	ldr	r3, [pc, #368]	; (8002808 <extInt_Config+0x4dc>)
 8002698:	689b      	ldr	r3, [r3, #8]
 800269a:	4a5b      	ldr	r2, [pc, #364]	; (8002808 <extInt_Config+0x4dc>)
 800269c:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 80026a0:	6093      	str	r3, [r2, #8]
		break;
 80026a2:	f000 bc34 	b.w	8002f0e <extInt_Config+0xbe2>
			__NOP();
 80026a6:	bf00      	nop
		break;
 80026a8:	f000 bc31 	b.w	8002f0e <extInt_Config+0xbe2>
	//----------------Configuracion EXTI4-----------------
	case 4:
	{
		/*Limpiamos la posicion correspondiente a la configuracion del PIN_4
		en el EXTICR*/
		SYSCFG->EXTICR[1] &= ~(0xF<<SYSCFG_EXTICR2_EXTI4_Pos);
 80026ac:	4b56      	ldr	r3, [pc, #344]	; (8002808 <extInt_Config+0x4dc>)
 80026ae:	68db      	ldr	r3, [r3, #12]
 80026b0:	4a55      	ldr	r2, [pc, #340]	; (8002808 <extInt_Config+0x4dc>)
 80026b2:	f023 030f 	bic.w	r3, r3, #15
 80026b6:	60d3      	str	r3, [r2, #12]

		//Seleccionamos el valor a cargar deacuerdo al puerto establecido
		if(extiConfig->pGPIOHandler->pGPIOx == GPIOA)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	689b      	ldr	r3, [r3, #8]
 80026be:	4a53      	ldr	r2, [pc, #332]	; (800280c <extInt_Config+0x4e0>)
 80026c0:	4293      	cmp	r3, r2
 80026c2:	d105      	bne.n	80026d0 <extInt_Config+0x3a4>
		{
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI4_PA);
 80026c4:	4b50      	ldr	r3, [pc, #320]	; (8002808 <extInt_Config+0x4dc>)
 80026c6:	4a50      	ldr	r2, [pc, #320]	; (8002808 <extInt_Config+0x4dc>)
 80026c8:	68db      	ldr	r3, [r3, #12]
 80026ca:	60d3      	str	r3, [r2, #12]
		}
		else
		{
			__NOP();
		}
		break;
 80026cc:	f000 bc1f 	b.w	8002f0e <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOB)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	689b      	ldr	r3, [r3, #8]
 80026d6:	4a4e      	ldr	r2, [pc, #312]	; (8002810 <extInt_Config+0x4e4>)
 80026d8:	4293      	cmp	r3, r2
 80026da:	d107      	bne.n	80026ec <extInt_Config+0x3c0>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI4_PB);
 80026dc:	4b4a      	ldr	r3, [pc, #296]	; (8002808 <extInt_Config+0x4dc>)
 80026de:	68db      	ldr	r3, [r3, #12]
 80026e0:	4a49      	ldr	r2, [pc, #292]	; (8002808 <extInt_Config+0x4dc>)
 80026e2:	f043 0301 	orr.w	r3, r3, #1
 80026e6:	60d3      	str	r3, [r2, #12]
		break;
 80026e8:	f000 bc11 	b.w	8002f0e <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOC)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	689b      	ldr	r3, [r3, #8]
 80026f2:	4a48      	ldr	r2, [pc, #288]	; (8002814 <extInt_Config+0x4e8>)
 80026f4:	4293      	cmp	r3, r2
 80026f6:	d107      	bne.n	8002708 <extInt_Config+0x3dc>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI4_PC);
 80026f8:	4b43      	ldr	r3, [pc, #268]	; (8002808 <extInt_Config+0x4dc>)
 80026fa:	68db      	ldr	r3, [r3, #12]
 80026fc:	4a42      	ldr	r2, [pc, #264]	; (8002808 <extInt_Config+0x4dc>)
 80026fe:	f043 0302 	orr.w	r3, r3, #2
 8002702:	60d3      	str	r3, [r2, #12]
		break;
 8002704:	f000 bc03 	b.w	8002f0e <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOD)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	689b      	ldr	r3, [r3, #8]
 800270e:	4a42      	ldr	r2, [pc, #264]	; (8002818 <extInt_Config+0x4ec>)
 8002710:	4293      	cmp	r3, r2
 8002712:	d106      	bne.n	8002722 <extInt_Config+0x3f6>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI4_PD);
 8002714:	4b3c      	ldr	r3, [pc, #240]	; (8002808 <extInt_Config+0x4dc>)
 8002716:	68db      	ldr	r3, [r3, #12]
 8002718:	4a3b      	ldr	r2, [pc, #236]	; (8002808 <extInt_Config+0x4dc>)
 800271a:	f043 0303 	orr.w	r3, r3, #3
 800271e:	60d3      	str	r3, [r2, #12]
		break;
 8002720:	e3f5      	b.n	8002f0e <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOE)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	689b      	ldr	r3, [r3, #8]
 8002728:	4a3c      	ldr	r2, [pc, #240]	; (800281c <extInt_Config+0x4f0>)
 800272a:	4293      	cmp	r3, r2
 800272c:	d106      	bne.n	800273c <extInt_Config+0x410>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI4_PE);
 800272e:	4b36      	ldr	r3, [pc, #216]	; (8002808 <extInt_Config+0x4dc>)
 8002730:	68db      	ldr	r3, [r3, #12]
 8002732:	4a35      	ldr	r2, [pc, #212]	; (8002808 <extInt_Config+0x4dc>)
 8002734:	f043 0304 	orr.w	r3, r3, #4
 8002738:	60d3      	str	r3, [r2, #12]
		break;
 800273a:	e3e8      	b.n	8002f0e <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOH)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	689b      	ldr	r3, [r3, #8]
 8002742:	4a30      	ldr	r2, [pc, #192]	; (8002804 <extInt_Config+0x4d8>)
 8002744:	4293      	cmp	r3, r2
 8002746:	d106      	bne.n	8002756 <extInt_Config+0x42a>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI4_PH);
 8002748:	4b2f      	ldr	r3, [pc, #188]	; (8002808 <extInt_Config+0x4dc>)
 800274a:	68db      	ldr	r3, [r3, #12]
 800274c:	4a2e      	ldr	r2, [pc, #184]	; (8002808 <extInt_Config+0x4dc>)
 800274e:	f043 0307 	orr.w	r3, r3, #7
 8002752:	60d3      	str	r3, [r2, #12]
		break;
 8002754:	e3db      	b.n	8002f0e <extInt_Config+0xbe2>
			__NOP();
 8002756:	bf00      	nop
		break;
 8002758:	e3d9      	b.n	8002f0e <extInt_Config+0xbe2>
	//----------------Configuracion EXTI5-----------------
	case 5:
	{
		/*Limpiamos la posicion correspondiente a la configuracion del PIN_5
		en el EXTICR*/
		SYSCFG->EXTICR[1] &= ~(0xF<<SYSCFG_EXTICR2_EXTI5_Pos);
 800275a:	4b2b      	ldr	r3, [pc, #172]	; (8002808 <extInt_Config+0x4dc>)
 800275c:	68db      	ldr	r3, [r3, #12]
 800275e:	4a2a      	ldr	r2, [pc, #168]	; (8002808 <extInt_Config+0x4dc>)
 8002760:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002764:	60d3      	str	r3, [r2, #12]

		//Seleccionamos el valor a cargar deacuerdo al puerto establecido
		if(extiConfig->pGPIOHandler->pGPIOx == GPIOA)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	689b      	ldr	r3, [r3, #8]
 800276c:	4a27      	ldr	r2, [pc, #156]	; (800280c <extInt_Config+0x4e0>)
 800276e:	4293      	cmp	r3, r2
 8002770:	d104      	bne.n	800277c <extInt_Config+0x450>
		{
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI5_PA);
 8002772:	4b25      	ldr	r3, [pc, #148]	; (8002808 <extInt_Config+0x4dc>)
 8002774:	4a24      	ldr	r2, [pc, #144]	; (8002808 <extInt_Config+0x4dc>)
 8002776:	68db      	ldr	r3, [r3, #12]
 8002778:	60d3      	str	r3, [r2, #12]
		}
		else
		{
			__NOP();
		}
		break;
 800277a:	e3c8      	b.n	8002f0e <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOB)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	689b      	ldr	r3, [r3, #8]
 8002782:	4a23      	ldr	r2, [pc, #140]	; (8002810 <extInt_Config+0x4e4>)
 8002784:	4293      	cmp	r3, r2
 8002786:	d106      	bne.n	8002796 <extInt_Config+0x46a>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI5_PB);
 8002788:	4b1f      	ldr	r3, [pc, #124]	; (8002808 <extInt_Config+0x4dc>)
 800278a:	68db      	ldr	r3, [r3, #12]
 800278c:	4a1e      	ldr	r2, [pc, #120]	; (8002808 <extInt_Config+0x4dc>)
 800278e:	f043 0310 	orr.w	r3, r3, #16
 8002792:	60d3      	str	r3, [r2, #12]
		break;
 8002794:	e3bb      	b.n	8002f0e <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOC)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	689b      	ldr	r3, [r3, #8]
 800279c:	4a1d      	ldr	r2, [pc, #116]	; (8002814 <extInt_Config+0x4e8>)
 800279e:	4293      	cmp	r3, r2
 80027a0:	d106      	bne.n	80027b0 <extInt_Config+0x484>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI5_PC);
 80027a2:	4b19      	ldr	r3, [pc, #100]	; (8002808 <extInt_Config+0x4dc>)
 80027a4:	68db      	ldr	r3, [r3, #12]
 80027a6:	4a18      	ldr	r2, [pc, #96]	; (8002808 <extInt_Config+0x4dc>)
 80027a8:	f043 0320 	orr.w	r3, r3, #32
 80027ac:	60d3      	str	r3, [r2, #12]
		break;
 80027ae:	e3ae      	b.n	8002f0e <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOD)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	689b      	ldr	r3, [r3, #8]
 80027b6:	4a18      	ldr	r2, [pc, #96]	; (8002818 <extInt_Config+0x4ec>)
 80027b8:	4293      	cmp	r3, r2
 80027ba:	d106      	bne.n	80027ca <extInt_Config+0x49e>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI5_PD);
 80027bc:	4b12      	ldr	r3, [pc, #72]	; (8002808 <extInt_Config+0x4dc>)
 80027be:	68db      	ldr	r3, [r3, #12]
 80027c0:	4a11      	ldr	r2, [pc, #68]	; (8002808 <extInt_Config+0x4dc>)
 80027c2:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 80027c6:	60d3      	str	r3, [r2, #12]
		break;
 80027c8:	e3a1      	b.n	8002f0e <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOE)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	689b      	ldr	r3, [r3, #8]
 80027d0:	4a12      	ldr	r2, [pc, #72]	; (800281c <extInt_Config+0x4f0>)
 80027d2:	4293      	cmp	r3, r2
 80027d4:	d106      	bne.n	80027e4 <extInt_Config+0x4b8>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI5_PE);
 80027d6:	4b0c      	ldr	r3, [pc, #48]	; (8002808 <extInt_Config+0x4dc>)
 80027d8:	68db      	ldr	r3, [r3, #12]
 80027da:	4a0b      	ldr	r2, [pc, #44]	; (8002808 <extInt_Config+0x4dc>)
 80027dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80027e0:	60d3      	str	r3, [r2, #12]
		break;
 80027e2:	e394      	b.n	8002f0e <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOH)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	689b      	ldr	r3, [r3, #8]
 80027ea:	4a06      	ldr	r2, [pc, #24]	; (8002804 <extInt_Config+0x4d8>)
 80027ec:	4293      	cmp	r3, r2
 80027ee:	d106      	bne.n	80027fe <extInt_Config+0x4d2>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI5_PH);
 80027f0:	4b05      	ldr	r3, [pc, #20]	; (8002808 <extInt_Config+0x4dc>)
 80027f2:	68db      	ldr	r3, [r3, #12]
 80027f4:	4a04      	ldr	r2, [pc, #16]	; (8002808 <extInt_Config+0x4dc>)
 80027f6:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 80027fa:	60d3      	str	r3, [r2, #12]
		break;
 80027fc:	e387      	b.n	8002f0e <extInt_Config+0xbe2>
			__NOP();
 80027fe:	bf00      	nop
		break;
 8002800:	e385      	b.n	8002f0e <extInt_Config+0xbe2>
 8002802:	bf00      	nop
 8002804:	40021c00 	.word	0x40021c00
 8002808:	40013800 	.word	0x40013800
 800280c:	40020000 	.word	0x40020000
 8002810:	40020400 	.word	0x40020400
 8002814:	40020800 	.word	0x40020800
 8002818:	40020c00 	.word	0x40020c00
 800281c:	40021000 	.word	0x40021000
	//----------------Configuracion EXTI6-----------------
	case 6:
	{
		/*Limpiamos la posicion correspondiente a la configuracion del PIN_6
		en el EXTICR*/
		SYSCFG->EXTICR[1] &= ~(0xF<<SYSCFG_EXTICR2_EXTI6_Pos);
 8002820:	4b86      	ldr	r3, [pc, #536]	; (8002a3c <extInt_Config+0x710>)
 8002822:	68db      	ldr	r3, [r3, #12]
 8002824:	4a85      	ldr	r2, [pc, #532]	; (8002a3c <extInt_Config+0x710>)
 8002826:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800282a:	60d3      	str	r3, [r2, #12]

		//Seleccionamos el valor a cargar deacuerdo al puerto establecido
		if(extiConfig->pGPIOHandler->pGPIOx == GPIOA)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	689b      	ldr	r3, [r3, #8]
 8002832:	4a83      	ldr	r2, [pc, #524]	; (8002a40 <extInt_Config+0x714>)
 8002834:	4293      	cmp	r3, r2
 8002836:	d104      	bne.n	8002842 <extInt_Config+0x516>
		{
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI6_PA);
 8002838:	4b80      	ldr	r3, [pc, #512]	; (8002a3c <extInt_Config+0x710>)
 800283a:	4a80      	ldr	r2, [pc, #512]	; (8002a3c <extInt_Config+0x710>)
 800283c:	68db      	ldr	r3, [r3, #12]
 800283e:	60d3      	str	r3, [r2, #12]
		}
		else
		{
			__NOP();
		}
		break;
 8002840:	e365      	b.n	8002f0e <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOB)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	689b      	ldr	r3, [r3, #8]
 8002848:	4a7e      	ldr	r2, [pc, #504]	; (8002a44 <extInt_Config+0x718>)
 800284a:	4293      	cmp	r3, r2
 800284c:	d106      	bne.n	800285c <extInt_Config+0x530>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI6_PB);
 800284e:	4b7b      	ldr	r3, [pc, #492]	; (8002a3c <extInt_Config+0x710>)
 8002850:	68db      	ldr	r3, [r3, #12]
 8002852:	4a7a      	ldr	r2, [pc, #488]	; (8002a3c <extInt_Config+0x710>)
 8002854:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002858:	60d3      	str	r3, [r2, #12]
		break;
 800285a:	e358      	b.n	8002f0e <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOC)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	689b      	ldr	r3, [r3, #8]
 8002862:	4a79      	ldr	r2, [pc, #484]	; (8002a48 <extInt_Config+0x71c>)
 8002864:	4293      	cmp	r3, r2
 8002866:	d106      	bne.n	8002876 <extInt_Config+0x54a>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI6_PC);
 8002868:	4b74      	ldr	r3, [pc, #464]	; (8002a3c <extInt_Config+0x710>)
 800286a:	68db      	ldr	r3, [r3, #12]
 800286c:	4a73      	ldr	r2, [pc, #460]	; (8002a3c <extInt_Config+0x710>)
 800286e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002872:	60d3      	str	r3, [r2, #12]
		break;
 8002874:	e34b      	b.n	8002f0e <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOD)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	689b      	ldr	r3, [r3, #8]
 800287c:	4a73      	ldr	r2, [pc, #460]	; (8002a4c <extInt_Config+0x720>)
 800287e:	4293      	cmp	r3, r2
 8002880:	d106      	bne.n	8002890 <extInt_Config+0x564>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI6_PD);
 8002882:	4b6e      	ldr	r3, [pc, #440]	; (8002a3c <extInt_Config+0x710>)
 8002884:	68db      	ldr	r3, [r3, #12]
 8002886:	4a6d      	ldr	r2, [pc, #436]	; (8002a3c <extInt_Config+0x710>)
 8002888:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800288c:	60d3      	str	r3, [r2, #12]
		break;
 800288e:	e33e      	b.n	8002f0e <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOE)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	689b      	ldr	r3, [r3, #8]
 8002896:	4a6e      	ldr	r2, [pc, #440]	; (8002a50 <extInt_Config+0x724>)
 8002898:	4293      	cmp	r3, r2
 800289a:	d106      	bne.n	80028aa <extInt_Config+0x57e>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI6_PE);
 800289c:	4b67      	ldr	r3, [pc, #412]	; (8002a3c <extInt_Config+0x710>)
 800289e:	68db      	ldr	r3, [r3, #12]
 80028a0:	4a66      	ldr	r2, [pc, #408]	; (8002a3c <extInt_Config+0x710>)
 80028a2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80028a6:	60d3      	str	r3, [r2, #12]
		break;
 80028a8:	e331      	b.n	8002f0e <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOH)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	689b      	ldr	r3, [r3, #8]
 80028b0:	4a68      	ldr	r2, [pc, #416]	; (8002a54 <extInt_Config+0x728>)
 80028b2:	4293      	cmp	r3, r2
 80028b4:	d106      	bne.n	80028c4 <extInt_Config+0x598>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI6_PH);
 80028b6:	4b61      	ldr	r3, [pc, #388]	; (8002a3c <extInt_Config+0x710>)
 80028b8:	68db      	ldr	r3, [r3, #12]
 80028ba:	4a60      	ldr	r2, [pc, #384]	; (8002a3c <extInt_Config+0x710>)
 80028bc:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80028c0:	60d3      	str	r3, [r2, #12]
		break;
 80028c2:	e324      	b.n	8002f0e <extInt_Config+0xbe2>
			__NOP();
 80028c4:	bf00      	nop
		break;
 80028c6:	e322      	b.n	8002f0e <extInt_Config+0xbe2>
	//----------------Configuracion EXTI7-----------------
	case 7:
	{
		/*Limpiamos la posicion correspondiente a la configuracion del PIN_7
		en el EXTICR*/
		SYSCFG->EXTICR[1] &= ~(0xF<<SYSCFG_EXTICR2_EXTI7_Pos);
 80028c8:	4b5c      	ldr	r3, [pc, #368]	; (8002a3c <extInt_Config+0x710>)
 80028ca:	68db      	ldr	r3, [r3, #12]
 80028cc:	4a5b      	ldr	r2, [pc, #364]	; (8002a3c <extInt_Config+0x710>)
 80028ce:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80028d2:	60d3      	str	r3, [r2, #12]

		//Seleccionamos el valor a cargar deacuerdo al puerto establecido
		if(extiConfig->pGPIOHandler->pGPIOx == GPIOA)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	689b      	ldr	r3, [r3, #8]
 80028da:	4a59      	ldr	r2, [pc, #356]	; (8002a40 <extInt_Config+0x714>)
 80028dc:	4293      	cmp	r3, r2
 80028de:	d104      	bne.n	80028ea <extInt_Config+0x5be>
		{
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI7_PA);
 80028e0:	4b56      	ldr	r3, [pc, #344]	; (8002a3c <extInt_Config+0x710>)
 80028e2:	4a56      	ldr	r2, [pc, #344]	; (8002a3c <extInt_Config+0x710>)
 80028e4:	68db      	ldr	r3, [r3, #12]
 80028e6:	60d3      	str	r3, [r2, #12]
		}
		else
		{
			__NOP();
		}
		break;
 80028e8:	e311      	b.n	8002f0e <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOB)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	689b      	ldr	r3, [r3, #8]
 80028f0:	4a54      	ldr	r2, [pc, #336]	; (8002a44 <extInt_Config+0x718>)
 80028f2:	4293      	cmp	r3, r2
 80028f4:	d106      	bne.n	8002904 <extInt_Config+0x5d8>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI7_PB);
 80028f6:	4b51      	ldr	r3, [pc, #324]	; (8002a3c <extInt_Config+0x710>)
 80028f8:	68db      	ldr	r3, [r3, #12]
 80028fa:	4a50      	ldr	r2, [pc, #320]	; (8002a3c <extInt_Config+0x710>)
 80028fc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002900:	60d3      	str	r3, [r2, #12]
		break;
 8002902:	e304      	b.n	8002f0e <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOC)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	689b      	ldr	r3, [r3, #8]
 800290a:	4a4f      	ldr	r2, [pc, #316]	; (8002a48 <extInt_Config+0x71c>)
 800290c:	4293      	cmp	r3, r2
 800290e:	d106      	bne.n	800291e <extInt_Config+0x5f2>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI7_PC);
 8002910:	4b4a      	ldr	r3, [pc, #296]	; (8002a3c <extInt_Config+0x710>)
 8002912:	68db      	ldr	r3, [r3, #12]
 8002914:	4a49      	ldr	r2, [pc, #292]	; (8002a3c <extInt_Config+0x710>)
 8002916:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800291a:	60d3      	str	r3, [r2, #12]
		break;
 800291c:	e2f7      	b.n	8002f0e <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOD)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	689b      	ldr	r3, [r3, #8]
 8002924:	4a49      	ldr	r2, [pc, #292]	; (8002a4c <extInt_Config+0x720>)
 8002926:	4293      	cmp	r3, r2
 8002928:	d106      	bne.n	8002938 <extInt_Config+0x60c>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI7_PD);
 800292a:	4b44      	ldr	r3, [pc, #272]	; (8002a3c <extInt_Config+0x710>)
 800292c:	68db      	ldr	r3, [r3, #12]
 800292e:	4a43      	ldr	r2, [pc, #268]	; (8002a3c <extInt_Config+0x710>)
 8002930:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 8002934:	60d3      	str	r3, [r2, #12]
		break;
 8002936:	e2ea      	b.n	8002f0e <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOE)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	689b      	ldr	r3, [r3, #8]
 800293e:	4a44      	ldr	r2, [pc, #272]	; (8002a50 <extInt_Config+0x724>)
 8002940:	4293      	cmp	r3, r2
 8002942:	d106      	bne.n	8002952 <extInt_Config+0x626>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI7_PE);
 8002944:	4b3d      	ldr	r3, [pc, #244]	; (8002a3c <extInt_Config+0x710>)
 8002946:	68db      	ldr	r3, [r3, #12]
 8002948:	4a3c      	ldr	r2, [pc, #240]	; (8002a3c <extInt_Config+0x710>)
 800294a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800294e:	60d3      	str	r3, [r2, #12]
		break;
 8002950:	e2dd      	b.n	8002f0e <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOH)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	689b      	ldr	r3, [r3, #8]
 8002958:	4a3e      	ldr	r2, [pc, #248]	; (8002a54 <extInt_Config+0x728>)
 800295a:	4293      	cmp	r3, r2
 800295c:	d106      	bne.n	800296c <extInt_Config+0x640>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI7_PH);
 800295e:	4b37      	ldr	r3, [pc, #220]	; (8002a3c <extInt_Config+0x710>)
 8002960:	68db      	ldr	r3, [r3, #12]
 8002962:	4a36      	ldr	r2, [pc, #216]	; (8002a3c <extInt_Config+0x710>)
 8002964:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 8002968:	60d3      	str	r3, [r2, #12]
		break;
 800296a:	e2d0      	b.n	8002f0e <extInt_Config+0xbe2>
			__NOP();
 800296c:	bf00      	nop
		break;
 800296e:	e2ce      	b.n	8002f0e <extInt_Config+0xbe2>
	//----------------Configuracion EXTI8-----------------
	case 8:
	{
		/*Limpiamos la posicion correspondiente a la configuracion del PIN_8
		en el EXTICR*/
		SYSCFG->EXTICR[2] &= ~(0xF<<SYSCFG_EXTICR3_EXTI8_Pos);
 8002970:	4b32      	ldr	r3, [pc, #200]	; (8002a3c <extInt_Config+0x710>)
 8002972:	691b      	ldr	r3, [r3, #16]
 8002974:	4a31      	ldr	r2, [pc, #196]	; (8002a3c <extInt_Config+0x710>)
 8002976:	f023 030f 	bic.w	r3, r3, #15
 800297a:	6113      	str	r3, [r2, #16]

		//Seleccionamos el valor a cargar deacuerdo al puerto establecido
		if(extiConfig->pGPIOHandler->pGPIOx == GPIOA)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	689b      	ldr	r3, [r3, #8]
 8002982:	4a2f      	ldr	r2, [pc, #188]	; (8002a40 <extInt_Config+0x714>)
 8002984:	4293      	cmp	r3, r2
 8002986:	d104      	bne.n	8002992 <extInt_Config+0x666>
		{
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI8_PA);
 8002988:	4b2c      	ldr	r3, [pc, #176]	; (8002a3c <extInt_Config+0x710>)
 800298a:	4a2c      	ldr	r2, [pc, #176]	; (8002a3c <extInt_Config+0x710>)
 800298c:	691b      	ldr	r3, [r3, #16]
 800298e:	6113      	str	r3, [r2, #16]
		}
		else
		{
			__NOP();
		}
		break;
 8002990:	e2bd      	b.n	8002f0e <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOB)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	689b      	ldr	r3, [r3, #8]
 8002998:	4a2a      	ldr	r2, [pc, #168]	; (8002a44 <extInt_Config+0x718>)
 800299a:	4293      	cmp	r3, r2
 800299c:	d106      	bne.n	80029ac <extInt_Config+0x680>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI8_PB);
 800299e:	4b27      	ldr	r3, [pc, #156]	; (8002a3c <extInt_Config+0x710>)
 80029a0:	691b      	ldr	r3, [r3, #16]
 80029a2:	4a26      	ldr	r2, [pc, #152]	; (8002a3c <extInt_Config+0x710>)
 80029a4:	f043 0301 	orr.w	r3, r3, #1
 80029a8:	6113      	str	r3, [r2, #16]
		break;
 80029aa:	e2b0      	b.n	8002f0e <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOC)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	689b      	ldr	r3, [r3, #8]
 80029b2:	4a25      	ldr	r2, [pc, #148]	; (8002a48 <extInt_Config+0x71c>)
 80029b4:	4293      	cmp	r3, r2
 80029b6:	d106      	bne.n	80029c6 <extInt_Config+0x69a>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI8_PC);
 80029b8:	4b20      	ldr	r3, [pc, #128]	; (8002a3c <extInt_Config+0x710>)
 80029ba:	691b      	ldr	r3, [r3, #16]
 80029bc:	4a1f      	ldr	r2, [pc, #124]	; (8002a3c <extInt_Config+0x710>)
 80029be:	f043 0302 	orr.w	r3, r3, #2
 80029c2:	6113      	str	r3, [r2, #16]
		break;
 80029c4:	e2a3      	b.n	8002f0e <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOD)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	689b      	ldr	r3, [r3, #8]
 80029cc:	4a1f      	ldr	r2, [pc, #124]	; (8002a4c <extInt_Config+0x720>)
 80029ce:	4293      	cmp	r3, r2
 80029d0:	d106      	bne.n	80029e0 <extInt_Config+0x6b4>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI8_PD);
 80029d2:	4b1a      	ldr	r3, [pc, #104]	; (8002a3c <extInt_Config+0x710>)
 80029d4:	691b      	ldr	r3, [r3, #16]
 80029d6:	4a19      	ldr	r2, [pc, #100]	; (8002a3c <extInt_Config+0x710>)
 80029d8:	f043 0303 	orr.w	r3, r3, #3
 80029dc:	6113      	str	r3, [r2, #16]
		break;
 80029de:	e296      	b.n	8002f0e <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOE)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	689b      	ldr	r3, [r3, #8]
 80029e6:	4a1a      	ldr	r2, [pc, #104]	; (8002a50 <extInt_Config+0x724>)
 80029e8:	4293      	cmp	r3, r2
 80029ea:	d106      	bne.n	80029fa <extInt_Config+0x6ce>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI8_PE);
 80029ec:	4b13      	ldr	r3, [pc, #76]	; (8002a3c <extInt_Config+0x710>)
 80029ee:	691b      	ldr	r3, [r3, #16]
 80029f0:	4a12      	ldr	r2, [pc, #72]	; (8002a3c <extInt_Config+0x710>)
 80029f2:	f043 0304 	orr.w	r3, r3, #4
 80029f6:	6113      	str	r3, [r2, #16]
		break;
 80029f8:	e289      	b.n	8002f0e <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOH)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	689b      	ldr	r3, [r3, #8]
 8002a00:	4a14      	ldr	r2, [pc, #80]	; (8002a54 <extInt_Config+0x728>)
 8002a02:	4293      	cmp	r3, r2
 8002a04:	d106      	bne.n	8002a14 <extInt_Config+0x6e8>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI8_PH);
 8002a06:	4b0d      	ldr	r3, [pc, #52]	; (8002a3c <extInt_Config+0x710>)
 8002a08:	691b      	ldr	r3, [r3, #16]
 8002a0a:	4a0c      	ldr	r2, [pc, #48]	; (8002a3c <extInt_Config+0x710>)
 8002a0c:	f043 0307 	orr.w	r3, r3, #7
 8002a10:	6113      	str	r3, [r2, #16]
		break;
 8002a12:	e27c      	b.n	8002f0e <extInt_Config+0xbe2>
			__NOP();
 8002a14:	bf00      	nop
		break;
 8002a16:	e27a      	b.n	8002f0e <extInt_Config+0xbe2>
	//----------------Configuracion EXTI9------------------
	case 9:
	{
		/*Limpiamos la posicion correspondiente a la configuracion del PIN_9
		en el EXTICR*/
		SYSCFG->EXTICR[2] &= ~(0xF<<SYSCFG_EXTICR3_EXTI9_Pos);
 8002a18:	4b08      	ldr	r3, [pc, #32]	; (8002a3c <extInt_Config+0x710>)
 8002a1a:	691b      	ldr	r3, [r3, #16]
 8002a1c:	4a07      	ldr	r2, [pc, #28]	; (8002a3c <extInt_Config+0x710>)
 8002a1e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002a22:	6113      	str	r3, [r2, #16]

		//Seleccionamos el valor a cargar deacuerdo al puerto establecido
		if(extiConfig->pGPIOHandler->pGPIOx == GPIOA)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	689b      	ldr	r3, [r3, #8]
 8002a2a:	4a05      	ldr	r2, [pc, #20]	; (8002a40 <extInt_Config+0x714>)
 8002a2c:	4293      	cmp	r3, r2
 8002a2e:	d113      	bne.n	8002a58 <extInt_Config+0x72c>
		{
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI9_PA);
 8002a30:	4b02      	ldr	r3, [pc, #8]	; (8002a3c <extInt_Config+0x710>)
 8002a32:	4a02      	ldr	r2, [pc, #8]	; (8002a3c <extInt_Config+0x710>)
 8002a34:	691b      	ldr	r3, [r3, #16]
 8002a36:	6113      	str	r3, [r2, #16]
		}
		else
		{
			__NOP();
		}
		break;
 8002a38:	e269      	b.n	8002f0e <extInt_Config+0xbe2>
 8002a3a:	bf00      	nop
 8002a3c:	40013800 	.word	0x40013800
 8002a40:	40020000 	.word	0x40020000
 8002a44:	40020400 	.word	0x40020400
 8002a48:	40020800 	.word	0x40020800
 8002a4c:	40020c00 	.word	0x40020c00
 8002a50:	40021000 	.word	0x40021000
 8002a54:	40021c00 	.word	0x40021c00
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOB)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	689b      	ldr	r3, [r3, #8]
 8002a5e:	4a83      	ldr	r2, [pc, #524]	; (8002c6c <extInt_Config+0x940>)
 8002a60:	4293      	cmp	r3, r2
 8002a62:	d106      	bne.n	8002a72 <extInt_Config+0x746>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI9_PB);
 8002a64:	4b82      	ldr	r3, [pc, #520]	; (8002c70 <extInt_Config+0x944>)
 8002a66:	691b      	ldr	r3, [r3, #16]
 8002a68:	4a81      	ldr	r2, [pc, #516]	; (8002c70 <extInt_Config+0x944>)
 8002a6a:	f043 0310 	orr.w	r3, r3, #16
 8002a6e:	6113      	str	r3, [r2, #16]
		break;
 8002a70:	e24d      	b.n	8002f0e <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOC)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	689b      	ldr	r3, [r3, #8]
 8002a78:	4a7e      	ldr	r2, [pc, #504]	; (8002c74 <extInt_Config+0x948>)
 8002a7a:	4293      	cmp	r3, r2
 8002a7c:	d106      	bne.n	8002a8c <extInt_Config+0x760>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI9_PC);
 8002a7e:	4b7c      	ldr	r3, [pc, #496]	; (8002c70 <extInt_Config+0x944>)
 8002a80:	691b      	ldr	r3, [r3, #16]
 8002a82:	4a7b      	ldr	r2, [pc, #492]	; (8002c70 <extInt_Config+0x944>)
 8002a84:	f043 0320 	orr.w	r3, r3, #32
 8002a88:	6113      	str	r3, [r2, #16]
		break;
 8002a8a:	e240      	b.n	8002f0e <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOD)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	689b      	ldr	r3, [r3, #8]
 8002a92:	4a79      	ldr	r2, [pc, #484]	; (8002c78 <extInt_Config+0x94c>)
 8002a94:	4293      	cmp	r3, r2
 8002a96:	d106      	bne.n	8002aa6 <extInt_Config+0x77a>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI9_PD);
 8002a98:	4b75      	ldr	r3, [pc, #468]	; (8002c70 <extInt_Config+0x944>)
 8002a9a:	691b      	ldr	r3, [r3, #16]
 8002a9c:	4a74      	ldr	r2, [pc, #464]	; (8002c70 <extInt_Config+0x944>)
 8002a9e:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8002aa2:	6113      	str	r3, [r2, #16]
		break;
 8002aa4:	e233      	b.n	8002f0e <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOE)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	689b      	ldr	r3, [r3, #8]
 8002aac:	4a73      	ldr	r2, [pc, #460]	; (8002c7c <extInt_Config+0x950>)
 8002aae:	4293      	cmp	r3, r2
 8002ab0:	d106      	bne.n	8002ac0 <extInt_Config+0x794>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI9_PE);
 8002ab2:	4b6f      	ldr	r3, [pc, #444]	; (8002c70 <extInt_Config+0x944>)
 8002ab4:	691b      	ldr	r3, [r3, #16]
 8002ab6:	4a6e      	ldr	r2, [pc, #440]	; (8002c70 <extInt_Config+0x944>)
 8002ab8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002abc:	6113      	str	r3, [r2, #16]
		break;
 8002abe:	e226      	b.n	8002f0e <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOH)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	689b      	ldr	r3, [r3, #8]
 8002ac6:	4a6e      	ldr	r2, [pc, #440]	; (8002c80 <extInt_Config+0x954>)
 8002ac8:	4293      	cmp	r3, r2
 8002aca:	d106      	bne.n	8002ada <extInt_Config+0x7ae>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI9_PH);
 8002acc:	4b68      	ldr	r3, [pc, #416]	; (8002c70 <extInt_Config+0x944>)
 8002ace:	691b      	ldr	r3, [r3, #16]
 8002ad0:	4a67      	ldr	r2, [pc, #412]	; (8002c70 <extInt_Config+0x944>)
 8002ad2:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8002ad6:	6113      	str	r3, [r2, #16]
		break;
 8002ad8:	e219      	b.n	8002f0e <extInt_Config+0xbe2>
			__NOP();
 8002ada:	bf00      	nop
		break;
 8002adc:	e217      	b.n	8002f0e <extInt_Config+0xbe2>
	//----------------Configuracion EXTI10-----------------
	case 10:
	{
		/*Limpiamos la posicion correspondiente a la configuracion del PIN_10
		en el EXTICR*/
		SYSCFG->EXTICR[2] &= ~(0xF<<SYSCFG_EXTICR3_EXTI10_Pos);
 8002ade:	4b64      	ldr	r3, [pc, #400]	; (8002c70 <extInt_Config+0x944>)
 8002ae0:	691b      	ldr	r3, [r3, #16]
 8002ae2:	4a63      	ldr	r2, [pc, #396]	; (8002c70 <extInt_Config+0x944>)
 8002ae4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002ae8:	6113      	str	r3, [r2, #16]

		//Seleccionamos el valor a cargar deacuerdo al puerto establecido
		if(extiConfig->pGPIOHandler->pGPIOx == GPIOA)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	689b      	ldr	r3, [r3, #8]
 8002af0:	4a64      	ldr	r2, [pc, #400]	; (8002c84 <extInt_Config+0x958>)
 8002af2:	4293      	cmp	r3, r2
 8002af4:	d104      	bne.n	8002b00 <extInt_Config+0x7d4>
		{
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI10_PA);
 8002af6:	4b5e      	ldr	r3, [pc, #376]	; (8002c70 <extInt_Config+0x944>)
 8002af8:	4a5d      	ldr	r2, [pc, #372]	; (8002c70 <extInt_Config+0x944>)
 8002afa:	691b      	ldr	r3, [r3, #16]
 8002afc:	6113      	str	r3, [r2, #16]
		}
		else
		{
			__NOP();
		}
		break;
 8002afe:	e206      	b.n	8002f0e <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOB)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	689b      	ldr	r3, [r3, #8]
 8002b06:	4a59      	ldr	r2, [pc, #356]	; (8002c6c <extInt_Config+0x940>)
 8002b08:	4293      	cmp	r3, r2
 8002b0a:	d106      	bne.n	8002b1a <extInt_Config+0x7ee>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI10_PB);
 8002b0c:	4b58      	ldr	r3, [pc, #352]	; (8002c70 <extInt_Config+0x944>)
 8002b0e:	691b      	ldr	r3, [r3, #16]
 8002b10:	4a57      	ldr	r2, [pc, #348]	; (8002c70 <extInt_Config+0x944>)
 8002b12:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b16:	6113      	str	r3, [r2, #16]
		break;
 8002b18:	e1f9      	b.n	8002f0e <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOC)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	689b      	ldr	r3, [r3, #8]
 8002b20:	4a54      	ldr	r2, [pc, #336]	; (8002c74 <extInt_Config+0x948>)
 8002b22:	4293      	cmp	r3, r2
 8002b24:	d106      	bne.n	8002b34 <extInt_Config+0x808>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI10_PC);
 8002b26:	4b52      	ldr	r3, [pc, #328]	; (8002c70 <extInt_Config+0x944>)
 8002b28:	691b      	ldr	r3, [r3, #16]
 8002b2a:	4a51      	ldr	r2, [pc, #324]	; (8002c70 <extInt_Config+0x944>)
 8002b2c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002b30:	6113      	str	r3, [r2, #16]
		break;
 8002b32:	e1ec      	b.n	8002f0e <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOD)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	689b      	ldr	r3, [r3, #8]
 8002b3a:	4a4f      	ldr	r2, [pc, #316]	; (8002c78 <extInt_Config+0x94c>)
 8002b3c:	4293      	cmp	r3, r2
 8002b3e:	d106      	bne.n	8002b4e <extInt_Config+0x822>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI10_PD);
 8002b40:	4b4b      	ldr	r3, [pc, #300]	; (8002c70 <extInt_Config+0x944>)
 8002b42:	691b      	ldr	r3, [r3, #16]
 8002b44:	4a4a      	ldr	r2, [pc, #296]	; (8002c70 <extInt_Config+0x944>)
 8002b46:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8002b4a:	6113      	str	r3, [r2, #16]
		break;
 8002b4c:	e1df      	b.n	8002f0e <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOE)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	689b      	ldr	r3, [r3, #8]
 8002b54:	4a49      	ldr	r2, [pc, #292]	; (8002c7c <extInt_Config+0x950>)
 8002b56:	4293      	cmp	r3, r2
 8002b58:	d106      	bne.n	8002b68 <extInt_Config+0x83c>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI10_PE);
 8002b5a:	4b45      	ldr	r3, [pc, #276]	; (8002c70 <extInt_Config+0x944>)
 8002b5c:	691b      	ldr	r3, [r3, #16]
 8002b5e:	4a44      	ldr	r2, [pc, #272]	; (8002c70 <extInt_Config+0x944>)
 8002b60:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002b64:	6113      	str	r3, [r2, #16]
		break;
 8002b66:	e1d2      	b.n	8002f0e <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOH)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	689b      	ldr	r3, [r3, #8]
 8002b6e:	4a44      	ldr	r2, [pc, #272]	; (8002c80 <extInt_Config+0x954>)
 8002b70:	4293      	cmp	r3, r2
 8002b72:	d106      	bne.n	8002b82 <extInt_Config+0x856>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI10_PH);
 8002b74:	4b3e      	ldr	r3, [pc, #248]	; (8002c70 <extInt_Config+0x944>)
 8002b76:	691b      	ldr	r3, [r3, #16]
 8002b78:	4a3d      	ldr	r2, [pc, #244]	; (8002c70 <extInt_Config+0x944>)
 8002b7a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002b7e:	6113      	str	r3, [r2, #16]
		break;
 8002b80:	e1c5      	b.n	8002f0e <extInt_Config+0xbe2>
			__NOP();
 8002b82:	bf00      	nop
		break;
 8002b84:	e1c3      	b.n	8002f0e <extInt_Config+0xbe2>
	//----------------Configuracion EXTI11-----------------
	case 11:
	{
		/*Limpiamos la posicion correspondiente a la configuracion del PIN_11
		en el EXTICR*/
		SYSCFG->EXTICR[2] &= ~(0xF<<SYSCFG_EXTICR3_EXTI11_Pos);
 8002b86:	4b3a      	ldr	r3, [pc, #232]	; (8002c70 <extInt_Config+0x944>)
 8002b88:	691b      	ldr	r3, [r3, #16]
 8002b8a:	4a39      	ldr	r2, [pc, #228]	; (8002c70 <extInt_Config+0x944>)
 8002b8c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002b90:	6113      	str	r3, [r2, #16]

		//Seleccionamos el valor a cargar deacuerdo al puerto establecido
		if(extiConfig->pGPIOHandler->pGPIOx == GPIOA)
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	689b      	ldr	r3, [r3, #8]
 8002b98:	4a3a      	ldr	r2, [pc, #232]	; (8002c84 <extInt_Config+0x958>)
 8002b9a:	4293      	cmp	r3, r2
 8002b9c:	d104      	bne.n	8002ba8 <extInt_Config+0x87c>
		{
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI11_PA);
 8002b9e:	4b34      	ldr	r3, [pc, #208]	; (8002c70 <extInt_Config+0x944>)
 8002ba0:	4a33      	ldr	r2, [pc, #204]	; (8002c70 <extInt_Config+0x944>)
 8002ba2:	691b      	ldr	r3, [r3, #16]
 8002ba4:	6113      	str	r3, [r2, #16]
		}
		else
		{
			__NOP();
		}
		break;
 8002ba6:	e1b2      	b.n	8002f0e <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOB)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	689b      	ldr	r3, [r3, #8]
 8002bae:	4a2f      	ldr	r2, [pc, #188]	; (8002c6c <extInt_Config+0x940>)
 8002bb0:	4293      	cmp	r3, r2
 8002bb2:	d106      	bne.n	8002bc2 <extInt_Config+0x896>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI11_PB);
 8002bb4:	4b2e      	ldr	r3, [pc, #184]	; (8002c70 <extInt_Config+0x944>)
 8002bb6:	691b      	ldr	r3, [r3, #16]
 8002bb8:	4a2d      	ldr	r2, [pc, #180]	; (8002c70 <extInt_Config+0x944>)
 8002bba:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002bbe:	6113      	str	r3, [r2, #16]
		break;
 8002bc0:	e1a5      	b.n	8002f0e <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOC)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	689b      	ldr	r3, [r3, #8]
 8002bc8:	4a2a      	ldr	r2, [pc, #168]	; (8002c74 <extInt_Config+0x948>)
 8002bca:	4293      	cmp	r3, r2
 8002bcc:	d106      	bne.n	8002bdc <extInt_Config+0x8b0>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI11_PC);
 8002bce:	4b28      	ldr	r3, [pc, #160]	; (8002c70 <extInt_Config+0x944>)
 8002bd0:	691b      	ldr	r3, [r3, #16]
 8002bd2:	4a27      	ldr	r2, [pc, #156]	; (8002c70 <extInt_Config+0x944>)
 8002bd4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002bd8:	6113      	str	r3, [r2, #16]
		break;
 8002bda:	e198      	b.n	8002f0e <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOD)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	689b      	ldr	r3, [r3, #8]
 8002be2:	4a25      	ldr	r2, [pc, #148]	; (8002c78 <extInt_Config+0x94c>)
 8002be4:	4293      	cmp	r3, r2
 8002be6:	d106      	bne.n	8002bf6 <extInt_Config+0x8ca>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI11_PD);
 8002be8:	4b21      	ldr	r3, [pc, #132]	; (8002c70 <extInt_Config+0x944>)
 8002bea:	691b      	ldr	r3, [r3, #16]
 8002bec:	4a20      	ldr	r2, [pc, #128]	; (8002c70 <extInt_Config+0x944>)
 8002bee:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 8002bf2:	6113      	str	r3, [r2, #16]
		break;
 8002bf4:	e18b      	b.n	8002f0e <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOE)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	689b      	ldr	r3, [r3, #8]
 8002bfc:	4a1f      	ldr	r2, [pc, #124]	; (8002c7c <extInt_Config+0x950>)
 8002bfe:	4293      	cmp	r3, r2
 8002c00:	d106      	bne.n	8002c10 <extInt_Config+0x8e4>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI11_PE);
 8002c02:	4b1b      	ldr	r3, [pc, #108]	; (8002c70 <extInt_Config+0x944>)
 8002c04:	691b      	ldr	r3, [r3, #16]
 8002c06:	4a1a      	ldr	r2, [pc, #104]	; (8002c70 <extInt_Config+0x944>)
 8002c08:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002c0c:	6113      	str	r3, [r2, #16]
		break;
 8002c0e:	e17e      	b.n	8002f0e <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOH)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	689b      	ldr	r3, [r3, #8]
 8002c16:	4a1a      	ldr	r2, [pc, #104]	; (8002c80 <extInt_Config+0x954>)
 8002c18:	4293      	cmp	r3, r2
 8002c1a:	d106      	bne.n	8002c2a <extInt_Config+0x8fe>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI11_PH);
 8002c1c:	4b14      	ldr	r3, [pc, #80]	; (8002c70 <extInt_Config+0x944>)
 8002c1e:	691b      	ldr	r3, [r3, #16]
 8002c20:	4a13      	ldr	r2, [pc, #76]	; (8002c70 <extInt_Config+0x944>)
 8002c22:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 8002c26:	6113      	str	r3, [r2, #16]
		break;
 8002c28:	e171      	b.n	8002f0e <extInt_Config+0xbe2>
			__NOP();
 8002c2a:	bf00      	nop
		break;
 8002c2c:	e16f      	b.n	8002f0e <extInt_Config+0xbe2>
	//----------------Configuracion EXTI12-----------------
	case 12:
	{
		/*Limpiamos la posicion correspondiente a la configuracion del PIN_12
		en el EXTICR*/
		SYSCFG->EXTICR[3] &= ~(0xF<<SYSCFG_EXTICR4_EXTI12_Pos);
 8002c2e:	4b10      	ldr	r3, [pc, #64]	; (8002c70 <extInt_Config+0x944>)
 8002c30:	695b      	ldr	r3, [r3, #20]
 8002c32:	4a0f      	ldr	r2, [pc, #60]	; (8002c70 <extInt_Config+0x944>)
 8002c34:	f023 030f 	bic.w	r3, r3, #15
 8002c38:	6153      	str	r3, [r2, #20]

		//Seleccionamos el valor a cargar deacuerdo al puerto establecido
		if(extiConfig->pGPIOHandler->pGPIOx == GPIOA)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	689b      	ldr	r3, [r3, #8]
 8002c40:	4a10      	ldr	r2, [pc, #64]	; (8002c84 <extInt_Config+0x958>)
 8002c42:	4293      	cmp	r3, r2
 8002c44:	d104      	bne.n	8002c50 <extInt_Config+0x924>
		{
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI12_PA);
 8002c46:	4b0a      	ldr	r3, [pc, #40]	; (8002c70 <extInt_Config+0x944>)
 8002c48:	4a09      	ldr	r2, [pc, #36]	; (8002c70 <extInt_Config+0x944>)
 8002c4a:	695b      	ldr	r3, [r3, #20]
 8002c4c:	6153      	str	r3, [r2, #20]
		}
		else
		{
			__NOP();
		}
		break;
 8002c4e:	e15e      	b.n	8002f0e <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOB)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	689b      	ldr	r3, [r3, #8]
 8002c56:	4a05      	ldr	r2, [pc, #20]	; (8002c6c <extInt_Config+0x940>)
 8002c58:	4293      	cmp	r3, r2
 8002c5a:	d115      	bne.n	8002c88 <extInt_Config+0x95c>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI12_PB);
 8002c5c:	4b04      	ldr	r3, [pc, #16]	; (8002c70 <extInt_Config+0x944>)
 8002c5e:	695b      	ldr	r3, [r3, #20]
 8002c60:	4a03      	ldr	r2, [pc, #12]	; (8002c70 <extInt_Config+0x944>)
 8002c62:	f043 0301 	orr.w	r3, r3, #1
 8002c66:	6153      	str	r3, [r2, #20]
		break;
 8002c68:	e151      	b.n	8002f0e <extInt_Config+0xbe2>
 8002c6a:	bf00      	nop
 8002c6c:	40020400 	.word	0x40020400
 8002c70:	40013800 	.word	0x40013800
 8002c74:	40020800 	.word	0x40020800
 8002c78:	40020c00 	.word	0x40020c00
 8002c7c:	40021000 	.word	0x40021000
 8002c80:	40021c00 	.word	0x40021c00
 8002c84:	40020000 	.word	0x40020000
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOC)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	689b      	ldr	r3, [r3, #8]
 8002c8e:	4a83      	ldr	r2, [pc, #524]	; (8002e9c <extInt_Config+0xb70>)
 8002c90:	4293      	cmp	r3, r2
 8002c92:	d106      	bne.n	8002ca2 <extInt_Config+0x976>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI12_PC);
 8002c94:	4b82      	ldr	r3, [pc, #520]	; (8002ea0 <extInt_Config+0xb74>)
 8002c96:	695b      	ldr	r3, [r3, #20]
 8002c98:	4a81      	ldr	r2, [pc, #516]	; (8002ea0 <extInt_Config+0xb74>)
 8002c9a:	f043 0302 	orr.w	r3, r3, #2
 8002c9e:	6153      	str	r3, [r2, #20]
		break;
 8002ca0:	e135      	b.n	8002f0e <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOD)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	689b      	ldr	r3, [r3, #8]
 8002ca8:	4a7e      	ldr	r2, [pc, #504]	; (8002ea4 <extInt_Config+0xb78>)
 8002caa:	4293      	cmp	r3, r2
 8002cac:	d106      	bne.n	8002cbc <extInt_Config+0x990>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI12_PD);
 8002cae:	4b7c      	ldr	r3, [pc, #496]	; (8002ea0 <extInt_Config+0xb74>)
 8002cb0:	695b      	ldr	r3, [r3, #20]
 8002cb2:	4a7b      	ldr	r2, [pc, #492]	; (8002ea0 <extInt_Config+0xb74>)
 8002cb4:	f043 0303 	orr.w	r3, r3, #3
 8002cb8:	6153      	str	r3, [r2, #20]
		break;
 8002cba:	e128      	b.n	8002f0e <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOE)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	689b      	ldr	r3, [r3, #8]
 8002cc2:	4a79      	ldr	r2, [pc, #484]	; (8002ea8 <extInt_Config+0xb7c>)
 8002cc4:	4293      	cmp	r3, r2
 8002cc6:	d106      	bne.n	8002cd6 <extInt_Config+0x9aa>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI12_PE);
 8002cc8:	4b75      	ldr	r3, [pc, #468]	; (8002ea0 <extInt_Config+0xb74>)
 8002cca:	695b      	ldr	r3, [r3, #20]
 8002ccc:	4a74      	ldr	r2, [pc, #464]	; (8002ea0 <extInt_Config+0xb74>)
 8002cce:	f043 0304 	orr.w	r3, r3, #4
 8002cd2:	6153      	str	r3, [r2, #20]
		break;
 8002cd4:	e11b      	b.n	8002f0e <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOH)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	689b      	ldr	r3, [r3, #8]
 8002cdc:	4a73      	ldr	r2, [pc, #460]	; (8002eac <extInt_Config+0xb80>)
 8002cde:	4293      	cmp	r3, r2
 8002ce0:	d106      	bne.n	8002cf0 <extInt_Config+0x9c4>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI12_PH);
 8002ce2:	4b6f      	ldr	r3, [pc, #444]	; (8002ea0 <extInt_Config+0xb74>)
 8002ce4:	695b      	ldr	r3, [r3, #20]
 8002ce6:	4a6e      	ldr	r2, [pc, #440]	; (8002ea0 <extInt_Config+0xb74>)
 8002ce8:	f043 0307 	orr.w	r3, r3, #7
 8002cec:	6153      	str	r3, [r2, #20]
		break;
 8002cee:	e10e      	b.n	8002f0e <extInt_Config+0xbe2>
			__NOP();
 8002cf0:	bf00      	nop
		break;
 8002cf2:	e10c      	b.n	8002f0e <extInt_Config+0xbe2>
	//----------------Configuracion EXTI13-----------------
	case 13:
	{
		/*Limpiamos la posicion correspondiente a la configuracion del PIN_13
		en el EXTICR*/
		SYSCFG->EXTICR[3] &= ~(0xF<<SYSCFG_EXTICR4_EXTI13_Pos);
 8002cf4:	4b6a      	ldr	r3, [pc, #424]	; (8002ea0 <extInt_Config+0xb74>)
 8002cf6:	695b      	ldr	r3, [r3, #20]
 8002cf8:	4a69      	ldr	r2, [pc, #420]	; (8002ea0 <extInt_Config+0xb74>)
 8002cfa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002cfe:	6153      	str	r3, [r2, #20]

		//Seleccionamos el valor a cargar deacuerdo al puerto establecido
		if(extiConfig->pGPIOHandler->pGPIOx == GPIOA)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	689b      	ldr	r3, [r3, #8]
 8002d06:	4a6a      	ldr	r2, [pc, #424]	; (8002eb0 <extInt_Config+0xb84>)
 8002d08:	4293      	cmp	r3, r2
 8002d0a:	d104      	bne.n	8002d16 <extInt_Config+0x9ea>
		{
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI13_PA);
 8002d0c:	4b64      	ldr	r3, [pc, #400]	; (8002ea0 <extInt_Config+0xb74>)
 8002d0e:	4a64      	ldr	r2, [pc, #400]	; (8002ea0 <extInt_Config+0xb74>)
 8002d10:	695b      	ldr	r3, [r3, #20]
 8002d12:	6153      	str	r3, [r2, #20]
		}
		else
		{
			__NOP();
		}
		break;
 8002d14:	e0fb      	b.n	8002f0e <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOB)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	689b      	ldr	r3, [r3, #8]
 8002d1c:	4a65      	ldr	r2, [pc, #404]	; (8002eb4 <extInt_Config+0xb88>)
 8002d1e:	4293      	cmp	r3, r2
 8002d20:	d106      	bne.n	8002d30 <extInt_Config+0xa04>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI13_PB);
 8002d22:	4b5f      	ldr	r3, [pc, #380]	; (8002ea0 <extInt_Config+0xb74>)
 8002d24:	695b      	ldr	r3, [r3, #20]
 8002d26:	4a5e      	ldr	r2, [pc, #376]	; (8002ea0 <extInt_Config+0xb74>)
 8002d28:	f043 0310 	orr.w	r3, r3, #16
 8002d2c:	6153      	str	r3, [r2, #20]
		break;
 8002d2e:	e0ee      	b.n	8002f0e <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOC)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	689b      	ldr	r3, [r3, #8]
 8002d36:	4a59      	ldr	r2, [pc, #356]	; (8002e9c <extInt_Config+0xb70>)
 8002d38:	4293      	cmp	r3, r2
 8002d3a:	d106      	bne.n	8002d4a <extInt_Config+0xa1e>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI13_PC);
 8002d3c:	4b58      	ldr	r3, [pc, #352]	; (8002ea0 <extInt_Config+0xb74>)
 8002d3e:	695b      	ldr	r3, [r3, #20]
 8002d40:	4a57      	ldr	r2, [pc, #348]	; (8002ea0 <extInt_Config+0xb74>)
 8002d42:	f043 0320 	orr.w	r3, r3, #32
 8002d46:	6153      	str	r3, [r2, #20]
		break;
 8002d48:	e0e1      	b.n	8002f0e <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOD)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	689b      	ldr	r3, [r3, #8]
 8002d50:	4a54      	ldr	r2, [pc, #336]	; (8002ea4 <extInt_Config+0xb78>)
 8002d52:	4293      	cmp	r3, r2
 8002d54:	d106      	bne.n	8002d64 <extInt_Config+0xa38>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI13_PD);
 8002d56:	4b52      	ldr	r3, [pc, #328]	; (8002ea0 <extInt_Config+0xb74>)
 8002d58:	695b      	ldr	r3, [r3, #20]
 8002d5a:	4a51      	ldr	r2, [pc, #324]	; (8002ea0 <extInt_Config+0xb74>)
 8002d5c:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8002d60:	6153      	str	r3, [r2, #20]
		break;
 8002d62:	e0d4      	b.n	8002f0e <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOE)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	689b      	ldr	r3, [r3, #8]
 8002d6a:	4a4f      	ldr	r2, [pc, #316]	; (8002ea8 <extInt_Config+0xb7c>)
 8002d6c:	4293      	cmp	r3, r2
 8002d6e:	d106      	bne.n	8002d7e <extInt_Config+0xa52>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI13_PE);
 8002d70:	4b4b      	ldr	r3, [pc, #300]	; (8002ea0 <extInt_Config+0xb74>)
 8002d72:	695b      	ldr	r3, [r3, #20]
 8002d74:	4a4a      	ldr	r2, [pc, #296]	; (8002ea0 <extInt_Config+0xb74>)
 8002d76:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002d7a:	6153      	str	r3, [r2, #20]
		break;
 8002d7c:	e0c7      	b.n	8002f0e <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOH)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	689b      	ldr	r3, [r3, #8]
 8002d84:	4a49      	ldr	r2, [pc, #292]	; (8002eac <extInt_Config+0xb80>)
 8002d86:	4293      	cmp	r3, r2
 8002d88:	d106      	bne.n	8002d98 <extInt_Config+0xa6c>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI13_PH);
 8002d8a:	4b45      	ldr	r3, [pc, #276]	; (8002ea0 <extInt_Config+0xb74>)
 8002d8c:	695b      	ldr	r3, [r3, #20]
 8002d8e:	4a44      	ldr	r2, [pc, #272]	; (8002ea0 <extInt_Config+0xb74>)
 8002d90:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8002d94:	6153      	str	r3, [r2, #20]
		break;
 8002d96:	e0ba      	b.n	8002f0e <extInt_Config+0xbe2>
			__NOP();
 8002d98:	bf00      	nop
		break;
 8002d9a:	e0b8      	b.n	8002f0e <extInt_Config+0xbe2>
	//----------------Configuracion EXTI14-----------------
	case 14:
	{
		/*Limpiamos la posicion correspondiente a la configuracion del PIN_14
		en el EXTICR*/
		SYSCFG->EXTICR[3] &= ~(0xF<<SYSCFG_EXTICR4_EXTI14_Pos);
 8002d9c:	4b40      	ldr	r3, [pc, #256]	; (8002ea0 <extInt_Config+0xb74>)
 8002d9e:	695b      	ldr	r3, [r3, #20]
 8002da0:	4a3f      	ldr	r2, [pc, #252]	; (8002ea0 <extInt_Config+0xb74>)
 8002da2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002da6:	6153      	str	r3, [r2, #20]

		//Seleccionamos el valor a cargar deacuerdo al puerto establecido
		if(extiConfig->pGPIOHandler->pGPIOx == GPIOA)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	689b      	ldr	r3, [r3, #8]
 8002dae:	4a40      	ldr	r2, [pc, #256]	; (8002eb0 <extInt_Config+0xb84>)
 8002db0:	4293      	cmp	r3, r2
 8002db2:	d104      	bne.n	8002dbe <extInt_Config+0xa92>
		{
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI14_PA);
 8002db4:	4b3a      	ldr	r3, [pc, #232]	; (8002ea0 <extInt_Config+0xb74>)
 8002db6:	4a3a      	ldr	r2, [pc, #232]	; (8002ea0 <extInt_Config+0xb74>)
 8002db8:	695b      	ldr	r3, [r3, #20]
 8002dba:	6153      	str	r3, [r2, #20]
		}
		else
		{
			__NOP();
		}
		break;
 8002dbc:	e0a7      	b.n	8002f0e <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOB)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	689b      	ldr	r3, [r3, #8]
 8002dc4:	4a3b      	ldr	r2, [pc, #236]	; (8002eb4 <extInt_Config+0xb88>)
 8002dc6:	4293      	cmp	r3, r2
 8002dc8:	d106      	bne.n	8002dd8 <extInt_Config+0xaac>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI14_PB);
 8002dca:	4b35      	ldr	r3, [pc, #212]	; (8002ea0 <extInt_Config+0xb74>)
 8002dcc:	695b      	ldr	r3, [r3, #20]
 8002dce:	4a34      	ldr	r2, [pc, #208]	; (8002ea0 <extInt_Config+0xb74>)
 8002dd0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002dd4:	6153      	str	r3, [r2, #20]
		break;
 8002dd6:	e09a      	b.n	8002f0e <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOC)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	689b      	ldr	r3, [r3, #8]
 8002dde:	4a2f      	ldr	r2, [pc, #188]	; (8002e9c <extInt_Config+0xb70>)
 8002de0:	4293      	cmp	r3, r2
 8002de2:	d106      	bne.n	8002df2 <extInt_Config+0xac6>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI14_PC);
 8002de4:	4b2e      	ldr	r3, [pc, #184]	; (8002ea0 <extInt_Config+0xb74>)
 8002de6:	695b      	ldr	r3, [r3, #20]
 8002de8:	4a2d      	ldr	r2, [pc, #180]	; (8002ea0 <extInt_Config+0xb74>)
 8002dea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002dee:	6153      	str	r3, [r2, #20]
		break;
 8002df0:	e08d      	b.n	8002f0e <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOD)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	689b      	ldr	r3, [r3, #8]
 8002df8:	4a2a      	ldr	r2, [pc, #168]	; (8002ea4 <extInt_Config+0xb78>)
 8002dfa:	4293      	cmp	r3, r2
 8002dfc:	d106      	bne.n	8002e0c <extInt_Config+0xae0>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI14_PD);
 8002dfe:	4b28      	ldr	r3, [pc, #160]	; (8002ea0 <extInt_Config+0xb74>)
 8002e00:	695b      	ldr	r3, [r3, #20]
 8002e02:	4a27      	ldr	r2, [pc, #156]	; (8002ea0 <extInt_Config+0xb74>)
 8002e04:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8002e08:	6153      	str	r3, [r2, #20]
		break;
 8002e0a:	e080      	b.n	8002f0e <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOE)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	689b      	ldr	r3, [r3, #8]
 8002e12:	4a25      	ldr	r2, [pc, #148]	; (8002ea8 <extInt_Config+0xb7c>)
 8002e14:	4293      	cmp	r3, r2
 8002e16:	d106      	bne.n	8002e26 <extInt_Config+0xafa>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI14_PE);
 8002e18:	4b21      	ldr	r3, [pc, #132]	; (8002ea0 <extInt_Config+0xb74>)
 8002e1a:	695b      	ldr	r3, [r3, #20]
 8002e1c:	4a20      	ldr	r2, [pc, #128]	; (8002ea0 <extInt_Config+0xb74>)
 8002e1e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002e22:	6153      	str	r3, [r2, #20]
		break;
 8002e24:	e073      	b.n	8002f0e <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOH)
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	689b      	ldr	r3, [r3, #8]
 8002e2c:	4a1f      	ldr	r2, [pc, #124]	; (8002eac <extInt_Config+0xb80>)
 8002e2e:	4293      	cmp	r3, r2
 8002e30:	d106      	bne.n	8002e40 <extInt_Config+0xb14>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI14_PH);
 8002e32:	4b1b      	ldr	r3, [pc, #108]	; (8002ea0 <extInt_Config+0xb74>)
 8002e34:	695b      	ldr	r3, [r3, #20]
 8002e36:	4a1a      	ldr	r2, [pc, #104]	; (8002ea0 <extInt_Config+0xb74>)
 8002e38:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002e3c:	6153      	str	r3, [r2, #20]
		break;
 8002e3e:	e066      	b.n	8002f0e <extInt_Config+0xbe2>
			__NOP();
 8002e40:	bf00      	nop
		break;
 8002e42:	e064      	b.n	8002f0e <extInt_Config+0xbe2>
	//----------------Configuracion EXTI15-----------------
	case 15:
	{
		/*Limpiamos la posicion correspondiente a la configuracion del PIN_15
		en el EXTICR*/
		SYSCFG->EXTICR[3] &= ~(0xF<<SYSCFG_EXTICR4_EXTI15_Pos);
 8002e44:	4b16      	ldr	r3, [pc, #88]	; (8002ea0 <extInt_Config+0xb74>)
 8002e46:	695b      	ldr	r3, [r3, #20]
 8002e48:	4a15      	ldr	r2, [pc, #84]	; (8002ea0 <extInt_Config+0xb74>)
 8002e4a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002e4e:	6153      	str	r3, [r2, #20]

		//Seleccionamos el valor a cargar deacuerdo al puerto establecido
		if(extiConfig->pGPIOHandler->pGPIOx == GPIOA)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	689b      	ldr	r3, [r3, #8]
 8002e56:	4a16      	ldr	r2, [pc, #88]	; (8002eb0 <extInt_Config+0xb84>)
 8002e58:	4293      	cmp	r3, r2
 8002e5a:	d104      	bne.n	8002e66 <extInt_Config+0xb3a>
		{
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI15_PA);
 8002e5c:	4b10      	ldr	r3, [pc, #64]	; (8002ea0 <extInt_Config+0xb74>)
 8002e5e:	4a10      	ldr	r2, [pc, #64]	; (8002ea0 <extInt_Config+0xb74>)
 8002e60:	695b      	ldr	r3, [r3, #20]
 8002e62:	6153      	str	r3, [r2, #20]
		}
		else
		{
			__NOP();
		}
		break;
 8002e64:	e053      	b.n	8002f0e <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOB)
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	689b      	ldr	r3, [r3, #8]
 8002e6c:	4a11      	ldr	r2, [pc, #68]	; (8002eb4 <extInt_Config+0xb88>)
 8002e6e:	4293      	cmp	r3, r2
 8002e70:	d106      	bne.n	8002e80 <extInt_Config+0xb54>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI15_PB);
 8002e72:	4b0b      	ldr	r3, [pc, #44]	; (8002ea0 <extInt_Config+0xb74>)
 8002e74:	695b      	ldr	r3, [r3, #20]
 8002e76:	4a0a      	ldr	r2, [pc, #40]	; (8002ea0 <extInt_Config+0xb74>)
 8002e78:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002e7c:	6153      	str	r3, [r2, #20]
		break;
 8002e7e:	e046      	b.n	8002f0e <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOC)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	689b      	ldr	r3, [r3, #8]
 8002e86:	4a05      	ldr	r2, [pc, #20]	; (8002e9c <extInt_Config+0xb70>)
 8002e88:	4293      	cmp	r3, r2
 8002e8a:	d115      	bne.n	8002eb8 <extInt_Config+0xb8c>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI15_PC);
 8002e8c:	4b04      	ldr	r3, [pc, #16]	; (8002ea0 <extInt_Config+0xb74>)
 8002e8e:	695b      	ldr	r3, [r3, #20]
 8002e90:	4a03      	ldr	r2, [pc, #12]	; (8002ea0 <extInt_Config+0xb74>)
 8002e92:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002e96:	6153      	str	r3, [r2, #20]
		break;
 8002e98:	e039      	b.n	8002f0e <extInt_Config+0xbe2>
 8002e9a:	bf00      	nop
 8002e9c:	40020800 	.word	0x40020800
 8002ea0:	40013800 	.word	0x40013800
 8002ea4:	40020c00 	.word	0x40020c00
 8002ea8:	40021000 	.word	0x40021000
 8002eac:	40021c00 	.word	0x40021c00
 8002eb0:	40020000 	.word	0x40020000
 8002eb4:	40020400 	.word	0x40020400
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOD)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	689b      	ldr	r3, [r3, #8]
 8002ebe:	4a9d      	ldr	r2, [pc, #628]	; (8003134 <extInt_Config+0xe08>)
 8002ec0:	4293      	cmp	r3, r2
 8002ec2:	d106      	bne.n	8002ed2 <extInt_Config+0xba6>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI15_PD);
 8002ec4:	4b9c      	ldr	r3, [pc, #624]	; (8003138 <extInt_Config+0xe0c>)
 8002ec6:	695b      	ldr	r3, [r3, #20]
 8002ec8:	4a9b      	ldr	r2, [pc, #620]	; (8003138 <extInt_Config+0xe0c>)
 8002eca:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 8002ece:	6153      	str	r3, [r2, #20]
		break;
 8002ed0:	e01d      	b.n	8002f0e <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOE)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	689b      	ldr	r3, [r3, #8]
 8002ed8:	4a98      	ldr	r2, [pc, #608]	; (800313c <extInt_Config+0xe10>)
 8002eda:	4293      	cmp	r3, r2
 8002edc:	d106      	bne.n	8002eec <extInt_Config+0xbc0>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI15_PE);
 8002ede:	4b96      	ldr	r3, [pc, #600]	; (8003138 <extInt_Config+0xe0c>)
 8002ee0:	695b      	ldr	r3, [r3, #20]
 8002ee2:	4a95      	ldr	r2, [pc, #596]	; (8003138 <extInt_Config+0xe0c>)
 8002ee4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002ee8:	6153      	str	r3, [r2, #20]
		break;
 8002eea:	e010      	b.n	8002f0e <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOH)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	689b      	ldr	r3, [r3, #8]
 8002ef2:	4a93      	ldr	r2, [pc, #588]	; (8003140 <extInt_Config+0xe14>)
 8002ef4:	4293      	cmp	r3, r2
 8002ef6:	d106      	bne.n	8002f06 <extInt_Config+0xbda>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI15_PH);
 8002ef8:	4b8f      	ldr	r3, [pc, #572]	; (8003138 <extInt_Config+0xe0c>)
 8002efa:	695b      	ldr	r3, [r3, #20]
 8002efc:	4a8e      	ldr	r2, [pc, #568]	; (8003138 <extInt_Config+0xe0c>)
 8002efe:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 8002f02:	6153      	str	r3, [r2, #20]
		break;
 8002f04:	e003      	b.n	8002f0e <extInt_Config+0xbe2>
			__NOP();
 8002f06:	bf00      	nop
		break;
 8002f08:	e001      	b.n	8002f0e <extInt_Config+0xbe2>
	}

	default: {
		__NOP();
 8002f0a:	bf00      	nop
		break;
 8002f0c:	bf00      	nop
	//Registro: EXTI_RTSR		 Registros donde los primeros 16 bit corresponden a los
	//Registro: EXTI_FTSR        16 EXTIx
	//Registro: EXTI_IMR

	//-------a)Selecionamos el tipo de flanco---------
	if(extiConfig->edgeType == EXTERNAL_INTERRUPP_RISING_EDGE)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	791b      	ldrb	r3, [r3, #4]
 8002f12:	2b01      	cmp	r3, #1
 8002f14:	d126      	bne.n	8002f64 <extInt_Config+0xc38>
	{
		EXTI->FTSR &= ~(0b1<<extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8002f16:	4b8b      	ldr	r3, [pc, #556]	; (8003144 <extInt_Config+0xe18>)
 8002f18:	68db      	ldr	r3, [r3, #12]
 8002f1a:	687a      	ldr	r2, [r7, #4]
 8002f1c:	6812      	ldr	r2, [r2, #0]
 8002f1e:	7812      	ldrb	r2, [r2, #0]
 8002f20:	4611      	mov	r1, r2
 8002f22:	2201      	movs	r2, #1
 8002f24:	408a      	lsls	r2, r1
 8002f26:	43d2      	mvns	r2, r2
 8002f28:	4611      	mov	r1, r2
 8002f2a:	4a86      	ldr	r2, [pc, #536]	; (8003144 <extInt_Config+0xe18>)
 8002f2c:	400b      	ands	r3, r1
 8002f2e:	60d3      	str	r3, [r2, #12]
		EXTI->RTSR &= ~(0b1<<extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8002f30:	4b84      	ldr	r3, [pc, #528]	; (8003144 <extInt_Config+0xe18>)
 8002f32:	689b      	ldr	r3, [r3, #8]
 8002f34:	687a      	ldr	r2, [r7, #4]
 8002f36:	6812      	ldr	r2, [r2, #0]
 8002f38:	7812      	ldrb	r2, [r2, #0]
 8002f3a:	4611      	mov	r1, r2
 8002f3c:	2201      	movs	r2, #1
 8002f3e:	408a      	lsls	r2, r1
 8002f40:	43d2      	mvns	r2, r2
 8002f42:	4611      	mov	r1, r2
 8002f44:	4a7f      	ldr	r2, [pc, #508]	; (8003144 <extInt_Config+0xe18>)
 8002f46:	400b      	ands	r3, r1
 8002f48:	6093      	str	r3, [r2, #8]
		EXTI->RTSR |= (0b1<<extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8002f4a:	4b7e      	ldr	r3, [pc, #504]	; (8003144 <extInt_Config+0xe18>)
 8002f4c:	689b      	ldr	r3, [r3, #8]
 8002f4e:	687a      	ldr	r2, [r7, #4]
 8002f50:	6812      	ldr	r2, [r2, #0]
 8002f52:	7812      	ldrb	r2, [r2, #0]
 8002f54:	4611      	mov	r1, r2
 8002f56:	2201      	movs	r2, #1
 8002f58:	408a      	lsls	r2, r1
 8002f5a:	4611      	mov	r1, r2
 8002f5c:	4a79      	ldr	r2, [pc, #484]	; (8003144 <extInt_Config+0xe18>)
 8002f5e:	430b      	orrs	r3, r1
 8002f60:	6093      	str	r3, [r2, #8]
 8002f62:	e05c      	b.n	800301e <extInt_Config+0xcf2>
	}
	else if (extiConfig->edgeType == EXTERNAL_INTERRUPP_FALLING_EDGE)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	791b      	ldrb	r3, [r3, #4]
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d126      	bne.n	8002fba <extInt_Config+0xc8e>
	{
		EXTI->FTSR &= ~(0b1<<extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8002f6c:	4b75      	ldr	r3, [pc, #468]	; (8003144 <extInt_Config+0xe18>)
 8002f6e:	68db      	ldr	r3, [r3, #12]
 8002f70:	687a      	ldr	r2, [r7, #4]
 8002f72:	6812      	ldr	r2, [r2, #0]
 8002f74:	7812      	ldrb	r2, [r2, #0]
 8002f76:	4611      	mov	r1, r2
 8002f78:	2201      	movs	r2, #1
 8002f7a:	408a      	lsls	r2, r1
 8002f7c:	43d2      	mvns	r2, r2
 8002f7e:	4611      	mov	r1, r2
 8002f80:	4a70      	ldr	r2, [pc, #448]	; (8003144 <extInt_Config+0xe18>)
 8002f82:	400b      	ands	r3, r1
 8002f84:	60d3      	str	r3, [r2, #12]
		EXTI->RTSR &= ~(0b1<<extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8002f86:	4b6f      	ldr	r3, [pc, #444]	; (8003144 <extInt_Config+0xe18>)
 8002f88:	689b      	ldr	r3, [r3, #8]
 8002f8a:	687a      	ldr	r2, [r7, #4]
 8002f8c:	6812      	ldr	r2, [r2, #0]
 8002f8e:	7812      	ldrb	r2, [r2, #0]
 8002f90:	4611      	mov	r1, r2
 8002f92:	2201      	movs	r2, #1
 8002f94:	408a      	lsls	r2, r1
 8002f96:	43d2      	mvns	r2, r2
 8002f98:	4611      	mov	r1, r2
 8002f9a:	4a6a      	ldr	r2, [pc, #424]	; (8003144 <extInt_Config+0xe18>)
 8002f9c:	400b      	ands	r3, r1
 8002f9e:	6093      	str	r3, [r2, #8]
		EXTI->FTSR |= (0b1<<extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8002fa0:	4b68      	ldr	r3, [pc, #416]	; (8003144 <extInt_Config+0xe18>)
 8002fa2:	68db      	ldr	r3, [r3, #12]
 8002fa4:	687a      	ldr	r2, [r7, #4]
 8002fa6:	6812      	ldr	r2, [r2, #0]
 8002fa8:	7812      	ldrb	r2, [r2, #0]
 8002faa:	4611      	mov	r1, r2
 8002fac:	2201      	movs	r2, #1
 8002fae:	408a      	lsls	r2, r1
 8002fb0:	4611      	mov	r1, r2
 8002fb2:	4a64      	ldr	r2, [pc, #400]	; (8003144 <extInt_Config+0xe18>)
 8002fb4:	430b      	orrs	r3, r1
 8002fb6:	60d3      	str	r3, [r2, #12]
 8002fb8:	e031      	b.n	800301e <extInt_Config+0xcf2>

	}
	else
	{
		EXTI->FTSR &= ~(0b1<<extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8002fba:	4b62      	ldr	r3, [pc, #392]	; (8003144 <extInt_Config+0xe18>)
 8002fbc:	68db      	ldr	r3, [r3, #12]
 8002fbe:	687a      	ldr	r2, [r7, #4]
 8002fc0:	6812      	ldr	r2, [r2, #0]
 8002fc2:	7812      	ldrb	r2, [r2, #0]
 8002fc4:	4611      	mov	r1, r2
 8002fc6:	2201      	movs	r2, #1
 8002fc8:	408a      	lsls	r2, r1
 8002fca:	43d2      	mvns	r2, r2
 8002fcc:	4611      	mov	r1, r2
 8002fce:	4a5d      	ldr	r2, [pc, #372]	; (8003144 <extInt_Config+0xe18>)
 8002fd0:	400b      	ands	r3, r1
 8002fd2:	60d3      	str	r3, [r2, #12]
		EXTI->RTSR &= ~(0b1<<extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8002fd4:	4b5b      	ldr	r3, [pc, #364]	; (8003144 <extInt_Config+0xe18>)
 8002fd6:	689b      	ldr	r3, [r3, #8]
 8002fd8:	687a      	ldr	r2, [r7, #4]
 8002fda:	6812      	ldr	r2, [r2, #0]
 8002fdc:	7812      	ldrb	r2, [r2, #0]
 8002fde:	4611      	mov	r1, r2
 8002fe0:	2201      	movs	r2, #1
 8002fe2:	408a      	lsls	r2, r1
 8002fe4:	43d2      	mvns	r2, r2
 8002fe6:	4611      	mov	r1, r2
 8002fe8:	4a56      	ldr	r2, [pc, #344]	; (8003144 <extInt_Config+0xe18>)
 8002fea:	400b      	ands	r3, r1
 8002fec:	6093      	str	r3, [r2, #8]
		EXTI->FTSR |= (0b1<<extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8002fee:	4b55      	ldr	r3, [pc, #340]	; (8003144 <extInt_Config+0xe18>)
 8002ff0:	68db      	ldr	r3, [r3, #12]
 8002ff2:	687a      	ldr	r2, [r7, #4]
 8002ff4:	6812      	ldr	r2, [r2, #0]
 8002ff6:	7812      	ldrb	r2, [r2, #0]
 8002ff8:	4611      	mov	r1, r2
 8002ffa:	2201      	movs	r2, #1
 8002ffc:	408a      	lsls	r2, r1
 8002ffe:	4611      	mov	r1, r2
 8003000:	4a50      	ldr	r2, [pc, #320]	; (8003144 <extInt_Config+0xe18>)
 8003002:	430b      	orrs	r3, r1
 8003004:	60d3      	str	r3, [r2, #12]
		EXTI->RTSR |= (0b1<<extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8003006:	4b4f      	ldr	r3, [pc, #316]	; (8003144 <extInt_Config+0xe18>)
 8003008:	689b      	ldr	r3, [r3, #8]
 800300a:	687a      	ldr	r2, [r7, #4]
 800300c:	6812      	ldr	r2, [r2, #0]
 800300e:	7812      	ldrb	r2, [r2, #0]
 8003010:	4611      	mov	r1, r2
 8003012:	2201      	movs	r2, #1
 8003014:	408a      	lsls	r2, r1
 8003016:	4611      	mov	r1, r2
 8003018:	4a4a      	ldr	r2, [pc, #296]	; (8003144 <extInt_Config+0xe18>)
 800301a:	430b      	orrs	r3, r1
 800301c:	6093      	str	r3, [r2, #8]
	}
	//-------b)Activamos la interrupcion del EXTIx---------
	EXTI->IMR &= ~(0b1<<extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 800301e:	4b49      	ldr	r3, [pc, #292]	; (8003144 <extInt_Config+0xe18>)
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	687a      	ldr	r2, [r7, #4]
 8003024:	6812      	ldr	r2, [r2, #0]
 8003026:	7812      	ldrb	r2, [r2, #0]
 8003028:	4611      	mov	r1, r2
 800302a:	2201      	movs	r2, #1
 800302c:	408a      	lsls	r2, r1
 800302e:	43d2      	mvns	r2, r2
 8003030:	4611      	mov	r1, r2
 8003032:	4a44      	ldr	r2, [pc, #272]	; (8003144 <extInt_Config+0xe18>)
 8003034:	400b      	ands	r3, r1
 8003036:	6013      	str	r3, [r2, #0]
	EXTI->IMR |= (0b1<<extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8003038:	4b42      	ldr	r3, [pc, #264]	; (8003144 <extInt_Config+0xe18>)
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	687a      	ldr	r2, [r7, #4]
 800303e:	6812      	ldr	r2, [r2, #0]
 8003040:	7812      	ldrb	r2, [r2, #0]
 8003042:	4611      	mov	r1, r2
 8003044:	2201      	movs	r2, #1
 8003046:	408a      	lsls	r2, r1
 8003048:	4611      	mov	r1, r2
 800304a:	4a3e      	ldr	r2, [pc, #248]	; (8003144 <extInt_Config+0xe18>)
 800304c:	430b      	orrs	r3, r1
 800304e:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003050:	b672      	cpsid	i
}
 8003052:	bf00      	nop
	//------------4)Activamos el canal del sistema NVIC para indicar la interrupcion--------------------------

	//4.a Desabilitamos las interrupciones globales
	__disable_irq();
	//4.b Activamos el canal del NVIC para la interrupcion del EXTIx seleccionado
	switch(extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	781b      	ldrb	r3, [r3, #0]
 800305a:	2b0f      	cmp	r3, #15
 800305c:	d862      	bhi.n	8003124 <extInt_Config+0xdf8>
 800305e:	a201      	add	r2, pc, #4	; (adr r2, 8003064 <extInt_Config+0xd38>)
 8003060:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003064:	080030a5 	.word	0x080030a5
 8003068:	080030ad 	.word	0x080030ad
 800306c:	080030b5 	.word	0x080030b5
 8003070:	080030bd 	.word	0x080030bd
 8003074:	080030c5 	.word	0x080030c5
 8003078:	080030cd 	.word	0x080030cd
 800307c:	080030d5 	.word	0x080030d5
 8003080:	080030dd 	.word	0x080030dd
 8003084:	080030e5 	.word	0x080030e5
 8003088:	080030ed 	.word	0x080030ed
 800308c:	080030f5 	.word	0x080030f5
 8003090:	080030fd 	.word	0x080030fd
 8003094:	08003105 	.word	0x08003105
 8003098:	0800310d 	.word	0x0800310d
 800309c:	08003115 	.word	0x08003115
 80030a0:	0800311d 	.word	0x0800311d
	{

	case 0:
	{
		NVIC_EnableIRQ(EXTI0_IRQn);
 80030a4:	2006      	movs	r0, #6
 80030a6:	f7ff f923 	bl	80022f0 <__NVIC_EnableIRQ>
		break;
 80030aa:	e03c      	b.n	8003126 <extInt_Config+0xdfa>
	}

	case 1:
	{
		NVIC_EnableIRQ(EXTI1_IRQn);
 80030ac:	2007      	movs	r0, #7
 80030ae:	f7ff f91f 	bl	80022f0 <__NVIC_EnableIRQ>
		break;
 80030b2:	e038      	b.n	8003126 <extInt_Config+0xdfa>
	}

	case 2:
	{
		NVIC_EnableIRQ(EXTI2_IRQn);
 80030b4:	2008      	movs	r0, #8
 80030b6:	f7ff f91b 	bl	80022f0 <__NVIC_EnableIRQ>
		break;
 80030ba:	e034      	b.n	8003126 <extInt_Config+0xdfa>
	}

	case 3:
	{
		NVIC_EnableIRQ(EXTI3_IRQn);
 80030bc:	2009      	movs	r0, #9
 80030be:	f7ff f917 	bl	80022f0 <__NVIC_EnableIRQ>
		break;
 80030c2:	e030      	b.n	8003126 <extInt_Config+0xdfa>
	}

	case 4:
	{
		NVIC_EnableIRQ(EXTI4_IRQn);
 80030c4:	200a      	movs	r0, #10
 80030c6:	f7ff f913 	bl	80022f0 <__NVIC_EnableIRQ>
		break;
 80030ca:	e02c      	b.n	8003126 <extInt_Config+0xdfa>
	}

	case 5:
	{
		NVIC_EnableIRQ(EXTI9_5_IRQn);
 80030cc:	2017      	movs	r0, #23
 80030ce:	f7ff f90f 	bl	80022f0 <__NVIC_EnableIRQ>
		break;
 80030d2:	e028      	b.n	8003126 <extInt_Config+0xdfa>
	}

	case 6:
	{
		NVIC_EnableIRQ(EXTI9_5_IRQn);
 80030d4:	2017      	movs	r0, #23
 80030d6:	f7ff f90b 	bl	80022f0 <__NVIC_EnableIRQ>
		break;
 80030da:	e024      	b.n	8003126 <extInt_Config+0xdfa>
	}

	case 7:
	{
		NVIC_EnableIRQ(EXTI9_5_IRQn);
 80030dc:	2017      	movs	r0, #23
 80030de:	f7ff f907 	bl	80022f0 <__NVIC_EnableIRQ>
		break;
 80030e2:	e020      	b.n	8003126 <extInt_Config+0xdfa>
	}

	case 8:
	{
		NVIC_EnableIRQ(EXTI9_5_IRQn);
 80030e4:	2017      	movs	r0, #23
 80030e6:	f7ff f903 	bl	80022f0 <__NVIC_EnableIRQ>
		break;
 80030ea:	e01c      	b.n	8003126 <extInt_Config+0xdfa>
	}

	case 9:
	{
		NVIC_EnableIRQ(EXTI9_5_IRQn);
 80030ec:	2017      	movs	r0, #23
 80030ee:	f7ff f8ff 	bl	80022f0 <__NVIC_EnableIRQ>
		break;
 80030f2:	e018      	b.n	8003126 <extInt_Config+0xdfa>
	}

	case 10:
	{
		NVIC_EnableIRQ(EXTI15_10_IRQn);
 80030f4:	2028      	movs	r0, #40	; 0x28
 80030f6:	f7ff f8fb 	bl	80022f0 <__NVIC_EnableIRQ>
		break;
 80030fa:	e014      	b.n	8003126 <extInt_Config+0xdfa>
	}

	case 11:
	{
		NVIC_EnableIRQ(EXTI15_10_IRQn);
 80030fc:	2028      	movs	r0, #40	; 0x28
 80030fe:	f7ff f8f7 	bl	80022f0 <__NVIC_EnableIRQ>
		break;
 8003102:	e010      	b.n	8003126 <extInt_Config+0xdfa>
	}

	case 12:
	{
		NVIC_EnableIRQ(EXTI15_10_IRQn);
 8003104:	2028      	movs	r0, #40	; 0x28
 8003106:	f7ff f8f3 	bl	80022f0 <__NVIC_EnableIRQ>
		break;
 800310a:	e00c      	b.n	8003126 <extInt_Config+0xdfa>
	}

	case 13:
	{
		NVIC_EnableIRQ(EXTI15_10_IRQn);
 800310c:	2028      	movs	r0, #40	; 0x28
 800310e:	f7ff f8ef 	bl	80022f0 <__NVIC_EnableIRQ>
		break;
 8003112:	e008      	b.n	8003126 <extInt_Config+0xdfa>
	}

	case 14:
	{
		NVIC_EnableIRQ(EXTI15_10_IRQn);
 8003114:	2028      	movs	r0, #40	; 0x28
 8003116:	f7ff f8eb 	bl	80022f0 <__NVIC_EnableIRQ>
		break;
 800311a:	e004      	b.n	8003126 <extInt_Config+0xdfa>
	}

	case 15:
	{
		NVIC_EnableIRQ(EXTI15_10_IRQn);
 800311c:	2028      	movs	r0, #40	; 0x28
 800311e:	f7ff f8e7 	bl	80022f0 <__NVIC_EnableIRQ>
		break;
 8003122:	e000      	b.n	8003126 <extInt_Config+0xdfa>
	}

	default: {
		break;
 8003124:	bf00      	nop
  __ASM volatile ("cpsie i" : : : "memory");
 8003126:	b662      	cpsie	i
}
 8003128:	bf00      	nop
	}
	}
	//4.c Activamos las interrupciones globales
	__enable_irq();
}
 800312a:	bf00      	nop
 800312c:	3708      	adds	r7, #8
 800312e:	46bd      	mov	sp, r7
 8003130:	bd80      	pop	{r7, pc}
 8003132:	bf00      	nop
 8003134:	40020c00 	.word	0x40020c00
 8003138:	40013800 	.word	0x40013800
 800313c:	40021000 	.word	0x40021000
 8003140:	40021c00 	.word	0x40021c00
 8003144:	40013c00 	.word	0x40013c00

08003148 <callback_extInt0>:



//Definimos las funciones para cuando se genera una interrupcion del EXTIx, 0-15
__attribute__ ((weak)) void callback_extInt0(void){
 8003148:	b480      	push	{r7}
 800314a:	af00      	add	r7, sp, #0
	__NOP();
 800314c:	bf00      	nop
}
 800314e:	bf00      	nop
 8003150:	46bd      	mov	sp, r7
 8003152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003156:	4770      	bx	lr

08003158 <callback_extInt2>:

__attribute__ ((weak)) void callback_extInt1(void){
	__NOP();
}

__attribute__ ((weak)) void callback_extInt2(void){
 8003158:	b480      	push	{r7}
 800315a:	af00      	add	r7, sp, #0
	__NOP();
 800315c:	bf00      	nop
}
 800315e:	bf00      	nop
 8003160:	46bd      	mov	sp, r7
 8003162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003166:	4770      	bx	lr

08003168 <callback_extInt4>:

__attribute__ ((weak)) void callback_extInt3(void){
	__NOP();
}

__attribute__ ((weak)) void callback_extInt4(void){
 8003168:	b480      	push	{r7}
 800316a:	af00      	add	r7, sp, #0
	__NOP();
 800316c:	bf00      	nop
}
 800316e:	bf00      	nop
 8003170:	46bd      	mov	sp, r7
 8003172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003176:	4770      	bx	lr

08003178 <callback_extInt5>:

__attribute__ ((weak)) void callback_extInt5(void){
 8003178:	b480      	push	{r7}
 800317a:	af00      	add	r7, sp, #0
	__NOP();
 800317c:	bf00      	nop
}
 800317e:	bf00      	nop
 8003180:	46bd      	mov	sp, r7
 8003182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003186:	4770      	bx	lr

08003188 <callback_extInt6>:

__attribute__ ((weak)) void callback_extInt6(void){
 8003188:	b480      	push	{r7}
 800318a:	af00      	add	r7, sp, #0
	__NOP();
 800318c:	bf00      	nop
}
 800318e:	bf00      	nop
 8003190:	46bd      	mov	sp, r7
 8003192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003196:	4770      	bx	lr

08003198 <callback_extInt7>:

__attribute__ ((weak)) void callback_extInt7(void){
 8003198:	b480      	push	{r7}
 800319a:	af00      	add	r7, sp, #0
	__NOP();
 800319c:	bf00      	nop
}
 800319e:	bf00      	nop
 80031a0:	46bd      	mov	sp, r7
 80031a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a6:	4770      	bx	lr

080031a8 <callback_extInt8>:

__attribute__ ((weak)) void callback_extInt8(void){
 80031a8:	b480      	push	{r7}
 80031aa:	af00      	add	r7, sp, #0
	__NOP();
 80031ac:	bf00      	nop
}
 80031ae:	bf00      	nop
 80031b0:	46bd      	mov	sp, r7
 80031b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b6:	4770      	bx	lr

080031b8 <callback_extInt9>:

__attribute__ ((weak)) void callback_extInt9(void){
 80031b8:	b480      	push	{r7}
 80031ba:	af00      	add	r7, sp, #0
	__NOP();
 80031bc:	bf00      	nop
}
 80031be:	bf00      	nop
 80031c0:	46bd      	mov	sp, r7
 80031c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c6:	4770      	bx	lr

080031c8 <callback_extInt10>:

__attribute__ ((weak)) void callback_extInt10(void){
 80031c8:	b480      	push	{r7}
 80031ca:	af00      	add	r7, sp, #0
	__NOP();
 80031cc:	bf00      	nop
}
 80031ce:	bf00      	nop
 80031d0:	46bd      	mov	sp, r7
 80031d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d6:	4770      	bx	lr

080031d8 <callback_extInt11>:

__attribute__ ((weak)) void callback_extInt11(void){
 80031d8:	b480      	push	{r7}
 80031da:	af00      	add	r7, sp, #0
	__NOP();
 80031dc:	bf00      	nop
}
 80031de:	bf00      	nop
 80031e0:	46bd      	mov	sp, r7
 80031e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e6:	4770      	bx	lr

080031e8 <callback_extInt12>:

__attribute__ ((weak)) void callback_extInt12(void){
 80031e8:	b480      	push	{r7}
 80031ea:	af00      	add	r7, sp, #0
	__NOP();
 80031ec:	bf00      	nop
}
 80031ee:	bf00      	nop
 80031f0:	46bd      	mov	sp, r7
 80031f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f6:	4770      	bx	lr

080031f8 <callback_extInt13>:

__attribute__ ((weak)) void callback_extInt13(void){
 80031f8:	b480      	push	{r7}
 80031fa:	af00      	add	r7, sp, #0
	__NOP();
 80031fc:	bf00      	nop
}
 80031fe:	bf00      	nop
 8003200:	46bd      	mov	sp, r7
 8003202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003206:	4770      	bx	lr

08003208 <callback_extInt14>:

__attribute__ ((weak)) void callback_extInt14(void){
 8003208:	b480      	push	{r7}
 800320a:	af00      	add	r7, sp, #0
	__NOP();
 800320c:	bf00      	nop
}
 800320e:	bf00      	nop
 8003210:	46bd      	mov	sp, r7
 8003212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003216:	4770      	bx	lr

08003218 <callback_extInt15>:

__attribute__ ((weak)) void callback_extInt15(void){
 8003218:	b480      	push	{r7}
 800321a:	af00      	add	r7, sp, #0
	__NOP();
 800321c:	bf00      	nop
}
 800321e:	bf00      	nop
 8003220:	46bd      	mov	sp, r7
 8003222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003226:	4770      	bx	lr

08003228 <EXTI0_IRQHandler>:
 */
//Registro: PR    Registro donde los primeros 16 bit corresponden a los 16 EXTIx

//--------------a) EXTI0, EXTI1, EXTI2, EXTI3, EXTI4 --------------
void EXTI0_IRQHandler(void)
{
 8003228:	b580      	push	{r7, lr}
 800322a:	af00      	add	r7, sp, #0
	//Evaluamos si la interrupcion que se lanza corresponde al EXTI0
	if (EXTI->PR & EXTI_PR_PR0)
 800322c:	4b08      	ldr	r3, [pc, #32]	; (8003250 <EXTI0_IRQHandler+0x28>)
 800322e:	695b      	ldr	r3, [r3, #20]
 8003230:	f003 0301 	and.w	r3, r3, #1
 8003234:	2b00      	cmp	r3, #0
 8003236:	d008      	beq.n	800324a <EXTI0_IRQHandler+0x22>
	{
		EXTI->PR |= (EXTI_PR_PR0); //Limpiamos la bandera
 8003238:	4b05      	ldr	r3, [pc, #20]	; (8003250 <EXTI0_IRQHandler+0x28>)
 800323a:	695b      	ldr	r3, [r3, #20]
 800323c:	4a04      	ldr	r2, [pc, #16]	; (8003250 <EXTI0_IRQHandler+0x28>)
 800323e:	f043 0301 	orr.w	r3, r3, #1
 8003242:	6153      	str	r3, [r2, #20]
		callback_extInt0();			//Ejecutamos la ISR
 8003244:	f7ff ff80 	bl	8003148 <callback_extInt0>
	}
	else
	{
		__NOP();
	}
}
 8003248:	e000      	b.n	800324c <EXTI0_IRQHandler+0x24>
		__NOP();
 800324a:	bf00      	nop
}
 800324c:	bf00      	nop
 800324e:	bd80      	pop	{r7, pc}
 8003250:	40013c00 	.word	0x40013c00

08003254 <EXTI1_IRQHandler>:

void EXTI1_IRQHandler(void)
{
 8003254:	b580      	push	{r7, lr}
 8003256:	af00      	add	r7, sp, #0
	//Evaluamos si la interrupcion que se lanza corresponde al EXTI1
	if (EXTI->PR & EXTI_PR_PR1)
 8003258:	4b08      	ldr	r3, [pc, #32]	; (800327c <EXTI1_IRQHandler+0x28>)
 800325a:	695b      	ldr	r3, [r3, #20]
 800325c:	f003 0302 	and.w	r3, r3, #2
 8003260:	2b00      	cmp	r3, #0
 8003262:	d008      	beq.n	8003276 <EXTI1_IRQHandler+0x22>
	{
		EXTI->PR |= (EXTI_PR_PR1); //Limpiamos la bandera
 8003264:	4b05      	ldr	r3, [pc, #20]	; (800327c <EXTI1_IRQHandler+0x28>)
 8003266:	695b      	ldr	r3, [r3, #20]
 8003268:	4a04      	ldr	r2, [pc, #16]	; (800327c <EXTI1_IRQHandler+0x28>)
 800326a:	f043 0302 	orr.w	r3, r3, #2
 800326e:	6153      	str	r3, [r2, #20]
		callback_extInt1();			//Ejecutamos la ISR
 8003270:	f7fe fa96 	bl	80017a0 <callback_extInt1>
	}
	else
	{
		__NOP();
	}
}
 8003274:	e000      	b.n	8003278 <EXTI1_IRQHandler+0x24>
		__NOP();
 8003276:	bf00      	nop
}
 8003278:	bf00      	nop
 800327a:	bd80      	pop	{r7, pc}
 800327c:	40013c00 	.word	0x40013c00

08003280 <EXTI2_IRQHandler>:

void EXTI2_IRQHandler(void)
{
 8003280:	b580      	push	{r7, lr}
 8003282:	af00      	add	r7, sp, #0
	//Evaluamos si la interrupcion que se lanza corresponde al EXTI2
	if (EXTI->PR & EXTI_PR_PR2)
 8003284:	4b08      	ldr	r3, [pc, #32]	; (80032a8 <EXTI2_IRQHandler+0x28>)
 8003286:	695b      	ldr	r3, [r3, #20]
 8003288:	f003 0304 	and.w	r3, r3, #4
 800328c:	2b00      	cmp	r3, #0
 800328e:	d008      	beq.n	80032a2 <EXTI2_IRQHandler+0x22>
	{
		EXTI->PR |= (EXTI_PR_PR2); //Limpiamos la bandera
 8003290:	4b05      	ldr	r3, [pc, #20]	; (80032a8 <EXTI2_IRQHandler+0x28>)
 8003292:	695b      	ldr	r3, [r3, #20]
 8003294:	4a04      	ldr	r2, [pc, #16]	; (80032a8 <EXTI2_IRQHandler+0x28>)
 8003296:	f043 0304 	orr.w	r3, r3, #4
 800329a:	6153      	str	r3, [r2, #20]
		callback_extInt2();			//Ejecutamos la ISR
 800329c:	f7ff ff5c 	bl	8003158 <callback_extInt2>
	}
	else
	{
		__NOP();
	}
}
 80032a0:	e000      	b.n	80032a4 <EXTI2_IRQHandler+0x24>
		__NOP();
 80032a2:	bf00      	nop
}
 80032a4:	bf00      	nop
 80032a6:	bd80      	pop	{r7, pc}
 80032a8:	40013c00 	.word	0x40013c00

080032ac <EXTI3_IRQHandler>:

void EXTI3_IRQHandler(void)
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	af00      	add	r7, sp, #0
	//Evaluamos si la interrupcion que se lanza corresponde al EXTI3
	if (EXTI->PR & EXTI_PR_PR3)
 80032b0:	4b08      	ldr	r3, [pc, #32]	; (80032d4 <EXTI3_IRQHandler+0x28>)
 80032b2:	695b      	ldr	r3, [r3, #20]
 80032b4:	f003 0308 	and.w	r3, r3, #8
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d008      	beq.n	80032ce <EXTI3_IRQHandler+0x22>
	{
		EXTI->PR |= (EXTI_PR_PR3); //Limpiamos la bandera
 80032bc:	4b05      	ldr	r3, [pc, #20]	; (80032d4 <EXTI3_IRQHandler+0x28>)
 80032be:	695b      	ldr	r3, [r3, #20]
 80032c0:	4a04      	ldr	r2, [pc, #16]	; (80032d4 <EXTI3_IRQHandler+0x28>)
 80032c2:	f043 0308 	orr.w	r3, r3, #8
 80032c6:	6153      	str	r3, [r2, #20]
		callback_extInt3();			//Ejecutamos la ISR
 80032c8:	f7fe faac 	bl	8001824 <callback_extInt3>
	}
	else
	{
		__NOP();
	}
}
 80032cc:	e000      	b.n	80032d0 <EXTI3_IRQHandler+0x24>
		__NOP();
 80032ce:	bf00      	nop
}
 80032d0:	bf00      	nop
 80032d2:	bd80      	pop	{r7, pc}
 80032d4:	40013c00 	.word	0x40013c00

080032d8 <EXTI4_IRQHandler>:

void EXTI4_IRQHandler(void)
{
 80032d8:	b580      	push	{r7, lr}
 80032da:	af00      	add	r7, sp, #0
	//Evaluamos si la interrupcion que se lanza corresponde al EXTI4
	if (EXTI->PR & EXTI_PR_PR4)
 80032dc:	4b08      	ldr	r3, [pc, #32]	; (8003300 <EXTI4_IRQHandler+0x28>)
 80032de:	695b      	ldr	r3, [r3, #20]
 80032e0:	f003 0310 	and.w	r3, r3, #16
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d008      	beq.n	80032fa <EXTI4_IRQHandler+0x22>
	{
		EXTI->PR |= (EXTI_PR_PR4); //Limpiamos la bandera
 80032e8:	4b05      	ldr	r3, [pc, #20]	; (8003300 <EXTI4_IRQHandler+0x28>)
 80032ea:	695b      	ldr	r3, [r3, #20]
 80032ec:	4a04      	ldr	r2, [pc, #16]	; (8003300 <EXTI4_IRQHandler+0x28>)
 80032ee:	f043 0310 	orr.w	r3, r3, #16
 80032f2:	6153      	str	r3, [r2, #20]
		callback_extInt4();			//Ejecutamos la ISR
 80032f4:	f7ff ff38 	bl	8003168 <callback_extInt4>
	}
	else
	{
		__NOP();
	}
}
 80032f8:	e000      	b.n	80032fc <EXTI4_IRQHandler+0x24>
		__NOP();
 80032fa:	bf00      	nop
}
 80032fc:	bf00      	nop
 80032fe:	bd80      	pop	{r7, pc}
 8003300:	40013c00 	.word	0x40013c00

08003304 <EXTI9_5_IRQHandler>:

//--------------b) EXTI9-5--------------
void EXTI9_5_IRQHandler(void)
{
 8003304:	b580      	push	{r7, lr}
 8003306:	af00      	add	r7, sp, #0
	//Evaluamos si la interrupcion que se lanza corresponde al EXTI5
	if (EXTI->PR & EXTI_PR_PR5)
 8003308:	4b26      	ldr	r3, [pc, #152]	; (80033a4 <EXTI9_5_IRQHandler+0xa0>)
 800330a:	695b      	ldr	r3, [r3, #20]
 800330c:	f003 0320 	and.w	r3, r3, #32
 8003310:	2b00      	cmp	r3, #0
 8003312:	d008      	beq.n	8003326 <EXTI9_5_IRQHandler+0x22>
	{
		EXTI->PR |= (EXTI_PR_PR5); //Limpiamos la bandera
 8003314:	4b23      	ldr	r3, [pc, #140]	; (80033a4 <EXTI9_5_IRQHandler+0xa0>)
 8003316:	695b      	ldr	r3, [r3, #20]
 8003318:	4a22      	ldr	r2, [pc, #136]	; (80033a4 <EXTI9_5_IRQHandler+0xa0>)
 800331a:	f043 0320 	orr.w	r3, r3, #32
 800331e:	6153      	str	r3, [r2, #20]
		callback_extInt5();			//Ejecutamos la ISR
 8003320:	f7ff ff2a 	bl	8003178 <callback_extInt5>
	}
	else
	{
		__NOP();
	}
}
 8003324:	e03c      	b.n	80033a0 <EXTI9_5_IRQHandler+0x9c>
	else if(EXTI->PR & EXTI_PR_PR6)
 8003326:	4b1f      	ldr	r3, [pc, #124]	; (80033a4 <EXTI9_5_IRQHandler+0xa0>)
 8003328:	695b      	ldr	r3, [r3, #20]
 800332a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800332e:	2b00      	cmp	r3, #0
 8003330:	d008      	beq.n	8003344 <EXTI9_5_IRQHandler+0x40>
		EXTI->PR |= (EXTI_PR_PR6); //Limpiamos la bandera
 8003332:	4b1c      	ldr	r3, [pc, #112]	; (80033a4 <EXTI9_5_IRQHandler+0xa0>)
 8003334:	695b      	ldr	r3, [r3, #20]
 8003336:	4a1b      	ldr	r2, [pc, #108]	; (80033a4 <EXTI9_5_IRQHandler+0xa0>)
 8003338:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800333c:	6153      	str	r3, [r2, #20]
		callback_extInt6();			//Ejecutamos la ISR
 800333e:	f7ff ff23 	bl	8003188 <callback_extInt6>
}
 8003342:	e02d      	b.n	80033a0 <EXTI9_5_IRQHandler+0x9c>
	else if(EXTI->PR & EXTI_PR_PR7)
 8003344:	4b17      	ldr	r3, [pc, #92]	; (80033a4 <EXTI9_5_IRQHandler+0xa0>)
 8003346:	695b      	ldr	r3, [r3, #20]
 8003348:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800334c:	2b00      	cmp	r3, #0
 800334e:	d008      	beq.n	8003362 <EXTI9_5_IRQHandler+0x5e>
		EXTI->PR |= (EXTI_PR_PR7); //Limpiamos la bandera
 8003350:	4b14      	ldr	r3, [pc, #80]	; (80033a4 <EXTI9_5_IRQHandler+0xa0>)
 8003352:	695b      	ldr	r3, [r3, #20]
 8003354:	4a13      	ldr	r2, [pc, #76]	; (80033a4 <EXTI9_5_IRQHandler+0xa0>)
 8003356:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800335a:	6153      	str	r3, [r2, #20]
		callback_extInt7();			//Ejecutamos la ISR
 800335c:	f7ff ff1c 	bl	8003198 <callback_extInt7>
}
 8003360:	e01e      	b.n	80033a0 <EXTI9_5_IRQHandler+0x9c>
	else if(EXTI->PR & EXTI_PR_PR8)
 8003362:	4b10      	ldr	r3, [pc, #64]	; (80033a4 <EXTI9_5_IRQHandler+0xa0>)
 8003364:	695b      	ldr	r3, [r3, #20]
 8003366:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800336a:	2b00      	cmp	r3, #0
 800336c:	d008      	beq.n	8003380 <EXTI9_5_IRQHandler+0x7c>
		EXTI->PR |= (EXTI_PR_PR8); //Limpiamos la bandera
 800336e:	4b0d      	ldr	r3, [pc, #52]	; (80033a4 <EXTI9_5_IRQHandler+0xa0>)
 8003370:	695b      	ldr	r3, [r3, #20]
 8003372:	4a0c      	ldr	r2, [pc, #48]	; (80033a4 <EXTI9_5_IRQHandler+0xa0>)
 8003374:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003378:	6153      	str	r3, [r2, #20]
		callback_extInt8();			//Ejecutamos la ISR
 800337a:	f7ff ff15 	bl	80031a8 <callback_extInt8>
}
 800337e:	e00f      	b.n	80033a0 <EXTI9_5_IRQHandler+0x9c>
	else if(EXTI->PR & EXTI_PR_PR9)
 8003380:	4b08      	ldr	r3, [pc, #32]	; (80033a4 <EXTI9_5_IRQHandler+0xa0>)
 8003382:	695b      	ldr	r3, [r3, #20]
 8003384:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003388:	2b00      	cmp	r3, #0
 800338a:	d008      	beq.n	800339e <EXTI9_5_IRQHandler+0x9a>
		EXTI->PR |= (EXTI_PR_PR9); //Limpiamos la bandera
 800338c:	4b05      	ldr	r3, [pc, #20]	; (80033a4 <EXTI9_5_IRQHandler+0xa0>)
 800338e:	695b      	ldr	r3, [r3, #20]
 8003390:	4a04      	ldr	r2, [pc, #16]	; (80033a4 <EXTI9_5_IRQHandler+0xa0>)
 8003392:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003396:	6153      	str	r3, [r2, #20]
		callback_extInt9();			//Ejecutamos la ISR
 8003398:	f7ff ff0e 	bl	80031b8 <callback_extInt9>
}
 800339c:	e000      	b.n	80033a0 <EXTI9_5_IRQHandler+0x9c>
		__NOP();
 800339e:	bf00      	nop
}
 80033a0:	bf00      	nop
 80033a2:	bd80      	pop	{r7, pc}
 80033a4:	40013c00 	.word	0x40013c00

080033a8 <EXTI15_10_IRQHandler>:

//--------------b) EXTI15-10--------------
void EXTI15_10_IRQHandler(void)
{
 80033a8:	b580      	push	{r7, lr}
 80033aa:	af00      	add	r7, sp, #0
	//Evaluamos si la interrupcion que se lanza corresponde al EXTI10
	if (EXTI->PR & EXTI_PR_PR10)
 80033ac:	4b2e      	ldr	r3, [pc, #184]	; (8003468 <EXTI15_10_IRQHandler+0xc0>)
 80033ae:	695b      	ldr	r3, [r3, #20]
 80033b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d008      	beq.n	80033ca <EXTI15_10_IRQHandler+0x22>
	{
		EXTI->PR |= (EXTI_PR_PR10); //Limpiamos la bandera
 80033b8:	4b2b      	ldr	r3, [pc, #172]	; (8003468 <EXTI15_10_IRQHandler+0xc0>)
 80033ba:	695b      	ldr	r3, [r3, #20]
 80033bc:	4a2a      	ldr	r2, [pc, #168]	; (8003468 <EXTI15_10_IRQHandler+0xc0>)
 80033be:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80033c2:	6153      	str	r3, [r2, #20]
		callback_extInt10();			//Ejecutamos la ISR
 80033c4:	f7ff ff00 	bl	80031c8 <callback_extInt10>
	}
	else
	{
		__NOP();
	}
}
 80033c8:	e04b      	b.n	8003462 <EXTI15_10_IRQHandler+0xba>
	else if(EXTI->PR & EXTI_PR_PR11)
 80033ca:	4b27      	ldr	r3, [pc, #156]	; (8003468 <EXTI15_10_IRQHandler+0xc0>)
 80033cc:	695b      	ldr	r3, [r3, #20]
 80033ce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d008      	beq.n	80033e8 <EXTI15_10_IRQHandler+0x40>
		EXTI->PR |= (EXTI_PR_PR11); //Limpiamos la bandera
 80033d6:	4b24      	ldr	r3, [pc, #144]	; (8003468 <EXTI15_10_IRQHandler+0xc0>)
 80033d8:	695b      	ldr	r3, [r3, #20]
 80033da:	4a23      	ldr	r2, [pc, #140]	; (8003468 <EXTI15_10_IRQHandler+0xc0>)
 80033dc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80033e0:	6153      	str	r3, [r2, #20]
		callback_extInt11();			//Ejecutamos la ISR
 80033e2:	f7ff fef9 	bl	80031d8 <callback_extInt11>
}
 80033e6:	e03c      	b.n	8003462 <EXTI15_10_IRQHandler+0xba>
	else if(EXTI->PR & EXTI_PR_PR12)
 80033e8:	4b1f      	ldr	r3, [pc, #124]	; (8003468 <EXTI15_10_IRQHandler+0xc0>)
 80033ea:	695b      	ldr	r3, [r3, #20]
 80033ec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d008      	beq.n	8003406 <EXTI15_10_IRQHandler+0x5e>
		EXTI->PR |= (EXTI_PR_PR12); //Limpiamos la bandera
 80033f4:	4b1c      	ldr	r3, [pc, #112]	; (8003468 <EXTI15_10_IRQHandler+0xc0>)
 80033f6:	695b      	ldr	r3, [r3, #20]
 80033f8:	4a1b      	ldr	r2, [pc, #108]	; (8003468 <EXTI15_10_IRQHandler+0xc0>)
 80033fa:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80033fe:	6153      	str	r3, [r2, #20]
		callback_extInt12();			//Ejecutamos la ISR
 8003400:	f7ff fef2 	bl	80031e8 <callback_extInt12>
}
 8003404:	e02d      	b.n	8003462 <EXTI15_10_IRQHandler+0xba>
	else if(EXTI->PR & EXTI_PR_PR13)
 8003406:	4b18      	ldr	r3, [pc, #96]	; (8003468 <EXTI15_10_IRQHandler+0xc0>)
 8003408:	695b      	ldr	r3, [r3, #20]
 800340a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800340e:	2b00      	cmp	r3, #0
 8003410:	d008      	beq.n	8003424 <EXTI15_10_IRQHandler+0x7c>
		EXTI->PR |= (EXTI_PR_PR13); //Limpiamos la bandera
 8003412:	4b15      	ldr	r3, [pc, #84]	; (8003468 <EXTI15_10_IRQHandler+0xc0>)
 8003414:	695b      	ldr	r3, [r3, #20]
 8003416:	4a14      	ldr	r2, [pc, #80]	; (8003468 <EXTI15_10_IRQHandler+0xc0>)
 8003418:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800341c:	6153      	str	r3, [r2, #20]
		callback_extInt13();			//Ejecutamos la ISR
 800341e:	f7ff feeb 	bl	80031f8 <callback_extInt13>
}
 8003422:	e01e      	b.n	8003462 <EXTI15_10_IRQHandler+0xba>
	else if(EXTI->PR & EXTI_PR_PR14)
 8003424:	4b10      	ldr	r3, [pc, #64]	; (8003468 <EXTI15_10_IRQHandler+0xc0>)
 8003426:	695b      	ldr	r3, [r3, #20]
 8003428:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800342c:	2b00      	cmp	r3, #0
 800342e:	d008      	beq.n	8003442 <EXTI15_10_IRQHandler+0x9a>
		EXTI->PR |= (EXTI_PR_PR14); //Limpiamos la bandera
 8003430:	4b0d      	ldr	r3, [pc, #52]	; (8003468 <EXTI15_10_IRQHandler+0xc0>)
 8003432:	695b      	ldr	r3, [r3, #20]
 8003434:	4a0c      	ldr	r2, [pc, #48]	; (8003468 <EXTI15_10_IRQHandler+0xc0>)
 8003436:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800343a:	6153      	str	r3, [r2, #20]
		callback_extInt14();			//Ejecutamos la ISR
 800343c:	f7ff fee4 	bl	8003208 <callback_extInt14>
}
 8003440:	e00f      	b.n	8003462 <EXTI15_10_IRQHandler+0xba>
	else if(EXTI->PR & EXTI_PR_PR15)
 8003442:	4b09      	ldr	r3, [pc, #36]	; (8003468 <EXTI15_10_IRQHandler+0xc0>)
 8003444:	695b      	ldr	r3, [r3, #20]
 8003446:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800344a:	2b00      	cmp	r3, #0
 800344c:	d008      	beq.n	8003460 <EXTI15_10_IRQHandler+0xb8>
		EXTI->PR |= (EXTI_PR_PR15); //Limpiamos la bandera
 800344e:	4b06      	ldr	r3, [pc, #24]	; (8003468 <EXTI15_10_IRQHandler+0xc0>)
 8003450:	695b      	ldr	r3, [r3, #20]
 8003452:	4a05      	ldr	r2, [pc, #20]	; (8003468 <EXTI15_10_IRQHandler+0xc0>)
 8003454:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003458:	6153      	str	r3, [r2, #20]
		callback_extInt15();			//Ejecutamos la ISR
 800345a:	f7ff fedd 	bl	8003218 <callback_extInt15>
}
 800345e:	e000      	b.n	8003462 <EXTI15_10_IRQHandler+0xba>
		__NOP();
 8003460:	bf00      	nop
}
 8003462:	bf00      	nop
 8003464:	bd80      	pop	{r7, pc}
 8003466:	bf00      	nop
 8003468:	40013c00 	.word	0x40013c00

0800346c <GPIO_PIN_Config>:

#include <GPIOxDriver.h>

//Configuracion de los registros para un pin
void GPIO_PIN_Config(GPIO_Handler_t *configuracion, uint8_t mode, uint8_t otyper, uint8_t ospeedr,uint8_t pupdr,uint8_t af)
{
 800346c:	b480      	push	{r7}
 800346e:	b083      	sub	sp, #12
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
 8003474:	4608      	mov	r0, r1
 8003476:	4611      	mov	r1, r2
 8003478:	461a      	mov	r2, r3
 800347a:	4603      	mov	r3, r0
 800347c:	70fb      	strb	r3, [r7, #3]
 800347e:	460b      	mov	r3, r1
 8003480:	70bb      	strb	r3, [r7, #2]
 8003482:	4613      	mov	r3, r2
 8003484:	707b      	strb	r3, [r7, #1]
	configuracion->GPIO_PinConfig.GPIO_PinModer       = mode; 		// = GPIO_MODE_x->IN-0, OUT-2, ALTFN-3, ANALOG-4
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	78fa      	ldrb	r2, [r7, #3]
 800348a:	705a      	strb	r2, [r3, #1]
	configuracion->GPIO_PinConfig.GPIO_PinOTPype	  = otyper;		// = GPIO_OTYPER_x-> PUSHPULL-0, OPENDRAIN-1
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	78ba      	ldrb	r2, [r7, #2]
 8003490:	709a      	strb	r2, [r3, #2]
	configuracion->GPIO_PinConfig.GPIO_PinSpeed	      = ospeedr;	// = GPIO_OSPEEDR_x-> LOW-0, MEDIUM-1, FAST-2, HIGH-3
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	787a      	ldrb	r2, [r7, #1]
 8003496:	70da      	strb	r2, [r3, #3]
	configuracion->GPIO_PinConfig.GPIO_PinPUPdControl = pupdr; 		// = GPIO_PUPDR_x -> NOTHING-0, PULLUP-1, PULLDOWN-2, RESERVED-3
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	7c3a      	ldrb	r2, [r7, #16]
 800349c:	711a      	strb	r2, [r3, #4]
	configuracion->GPIO_PinConfig.GPIO_PinAltFunMode  = af;			// = AFx, 0-15
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	7d3a      	ldrb	r2, [r7, #20]
 80034a2:	715a      	strb	r2, [r3, #5]
}
 80034a4:	bf00      	nop
 80034a6:	370c      	adds	r7, #12
 80034a8:	46bd      	mov	sp, r7
 80034aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ae:	4770      	bx	lr

080034b0 <GPIO_Config>:

//Activacion de la señal de reloj de un elemento en especifico

void GPIO_Config (GPIO_Handler_t *pGPIOHandler)
{
 80034b0:	b480      	push	{r7}
 80034b2:	b085      	sub	sp, #20
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
	//variables para hacer todo paso a paso
	uint32_t auxConfig = 0;
 80034b8:	2300      	movs	r3, #0
 80034ba:	60fb      	str	r3, [r7, #12]
	uint32_t auxPosition = 0;
 80034bc:	2300      	movs	r3, #0
 80034be:	60bb      	str	r3, [r7, #8]

	//----------------------1) Activamos el periferico-----------------------------

	//Verificamos para GIOPA
	if (pGPIOHandler->pGPIOx == GPIOA)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	689b      	ldr	r3, [r3, #8]
 80034c4:	4a88      	ldr	r2, [pc, #544]	; (80036e8 <GPIO_Config+0x238>)
 80034c6:	4293      	cmp	r3, r2
 80034c8:	d106      	bne.n	80034d8 <GPIO_Config+0x28>
	{
		//Escribimos 1 (SET) en la posicion correspondiente al GPIOA
		RCC->AHB1ENR |= (RCC_AHB1ENR_GPIOAEN);  //(SET << RCC_AHB1ENR_GPIOA_EN);
 80034ca:	4b88      	ldr	r3, [pc, #544]	; (80036ec <GPIO_Config+0x23c>)
 80034cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034ce:	4a87      	ldr	r2, [pc, #540]	; (80036ec <GPIO_Config+0x23c>)
 80034d0:	f043 0301 	orr.w	r3, r3, #1
 80034d4:	6313      	str	r3, [r2, #48]	; 0x30
 80034d6:	e03a      	b.n	800354e <GPIO_Config+0x9e>
		/*Modificamos el registro AHB1ENR(32 bit)presente en periferico RCC, vease el 6.3.9 RCC_AHB1ENR---AHB1
		peripheral clock enable register*/
	}

	//Verificamos para GIOPB
	else if (pGPIOHandler->pGPIOx == GPIOB)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	689b      	ldr	r3, [r3, #8]
 80034dc:	4a84      	ldr	r2, [pc, #528]	; (80036f0 <GPIO_Config+0x240>)
 80034de:	4293      	cmp	r3, r2
 80034e0:	d106      	bne.n	80034f0 <GPIO_Config+0x40>
	{
		//Escribimos 1 (SET) en la posicion correspondiente al GPIOB
		RCC->AHB1ENR |= (RCC_AHB1ENR_GPIOBEN);  //(SET << RCC_AHB1ENR_GPIOB_EN);
 80034e2:	4b82      	ldr	r3, [pc, #520]	; (80036ec <GPIO_Config+0x23c>)
 80034e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034e6:	4a81      	ldr	r2, [pc, #516]	; (80036ec <GPIO_Config+0x23c>)
 80034e8:	f043 0302 	orr.w	r3, r3, #2
 80034ec:	6313      	str	r3, [r2, #48]	; 0x30
 80034ee:	e02e      	b.n	800354e <GPIO_Config+0x9e>
		/*Modificamos el registro AHB1ENR(32 bit)presente en periferico RCC, vease el 6.3.9 RCC_AHB1ENR---AHB1
		peripheral clock enable register*/
	}

	//Verificamos para GIOPC
	else if (pGPIOHandler->pGPIOx == GPIOC)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	689b      	ldr	r3, [r3, #8]
 80034f4:	4a7f      	ldr	r2, [pc, #508]	; (80036f4 <GPIO_Config+0x244>)
 80034f6:	4293      	cmp	r3, r2
 80034f8:	d106      	bne.n	8003508 <GPIO_Config+0x58>
	{
		//Escribimos 1 (SET) en la posicion correspondiente al GPIOC
		RCC->AHB1ENR |= (RCC_AHB1ENR_GPIOCEN);  //(SET << RCC_AHB1ENR_GPIOC_EN);
 80034fa:	4b7c      	ldr	r3, [pc, #496]	; (80036ec <GPIO_Config+0x23c>)
 80034fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034fe:	4a7b      	ldr	r2, [pc, #492]	; (80036ec <GPIO_Config+0x23c>)
 8003500:	f043 0304 	orr.w	r3, r3, #4
 8003504:	6313      	str	r3, [r2, #48]	; 0x30
 8003506:	e022      	b.n	800354e <GPIO_Config+0x9e>
		/*Modificamos el registro AHB1ENR(32 bit)presente en periferico RCC, vease el 6.3.9 RCC_AHB1ENR---AHB1
		peripheral clock enable register*/
	}

	//Verificamos para GIOPD
	else if (pGPIOHandler->pGPIOx == GPIOD)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	689b      	ldr	r3, [r3, #8]
 800350c:	4a7a      	ldr	r2, [pc, #488]	; (80036f8 <GPIO_Config+0x248>)
 800350e:	4293      	cmp	r3, r2
 8003510:	d106      	bne.n	8003520 <GPIO_Config+0x70>
	{
		//Escribimos 1 (SET) en la posicion correspondiente al GPIOD
		RCC->AHB1ENR |= (RCC_AHB1ENR_GPIODEN);  //(SET << RCC_AHB1ENR_GPIOD_EN);
 8003512:	4b76      	ldr	r3, [pc, #472]	; (80036ec <GPIO_Config+0x23c>)
 8003514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003516:	4a75      	ldr	r2, [pc, #468]	; (80036ec <GPIO_Config+0x23c>)
 8003518:	f043 0308 	orr.w	r3, r3, #8
 800351c:	6313      	str	r3, [r2, #48]	; 0x30
 800351e:	e016      	b.n	800354e <GPIO_Config+0x9e>
		/*Modificamos el registro AHB1ENR(32 bit)presente en periferico RCC, vease el 6.3.9 RCC_AHB1ENR---AHB1
		peripheral clock enable register*/
	}

	//Verificamos para GIOPE
	else if (pGPIOHandler->pGPIOx == GPIOE)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	689b      	ldr	r3, [r3, #8]
 8003524:	4a75      	ldr	r2, [pc, #468]	; (80036fc <GPIO_Config+0x24c>)
 8003526:	4293      	cmp	r3, r2
 8003528:	d106      	bne.n	8003538 <GPIO_Config+0x88>
	{
		//Escribimos 1 (SET) en la posicion correspondiente al GPIOE
		RCC->AHB1ENR |= (RCC_AHB1ENR_GPIOEEN);  //(SET << RCC_AHB1ENR_GPIOE_EN);
 800352a:	4b70      	ldr	r3, [pc, #448]	; (80036ec <GPIO_Config+0x23c>)
 800352c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800352e:	4a6f      	ldr	r2, [pc, #444]	; (80036ec <GPIO_Config+0x23c>)
 8003530:	f043 0310 	orr.w	r3, r3, #16
 8003534:	6313      	str	r3, [r2, #48]	; 0x30
 8003536:	e00a      	b.n	800354e <GPIO_Config+0x9e>
		/*Modificamos el registro AHB1ENR(32 bit)presente en periferico RCC, vease el 6.3.9 RCC_AHB1ENR---AHB1
		peripheral clock enable register*/
	}

	//Verificamos para GIOPH
	else if (pGPIOHandler->pGPIOx == GPIOH)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	689b      	ldr	r3, [r3, #8]
 800353c:	4a70      	ldr	r2, [pc, #448]	; (8003700 <GPIO_Config+0x250>)
 800353e:	4293      	cmp	r3, r2
 8003540:	d105      	bne.n	800354e <GPIO_Config+0x9e>
	{
		//Escribimos 1 (SET) en la posicion correspondiente al GPIOH
		RCC->AHB1ENR |= (RCC_AHB1ENR_GPIOHEN);  //(SET << RCC_AHB1ENR_GPIOH_EN);
 8003542:	4b6a      	ldr	r3, [pc, #424]	; (80036ec <GPIO_Config+0x23c>)
 8003544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003546:	4a69      	ldr	r2, [pc, #420]	; (80036ec <GPIO_Config+0x23c>)
 8003548:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800354c:	6313      	str	r3, [r2, #48]	; 0x30

	//----------------2) Configurando el registro GPIOx_MODER----------------------
	//SE ENTIENDE

	//Leemos el PinNumber para mover una cantidad de veces  el pinModer
	auxConfig = (pGPIOHandler->GPIO_PinConfig.GPIO_PinModer << 2*pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	785b      	ldrb	r3, [r3, #1]
 8003552:	461a      	mov	r2, r3
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	781b      	ldrb	r3, [r3, #0]
 8003558:	005b      	lsls	r3, r3, #1
 800355a:	fa02 f303 	lsl.w	r3, r2, r3
 800355e:	60fb      	str	r3, [r7, #12]

	//Cargamos auxConfig en el registro MODER
	pGPIOHandler->pGPIOx->MODER &= ~(0b11 << 2*pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	689b      	ldr	r3, [r3, #8]
 8003564:	681a      	ldr	r2, [r3, #0]
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	781b      	ldrb	r3, [r3, #0]
 800356a:	005b      	lsls	r3, r3, #1
 800356c:	2103      	movs	r1, #3
 800356e:	fa01 f303 	lsl.w	r3, r1, r3
 8003572:	43db      	mvns	r3, r3
 8003574:	4619      	mov	r1, r3
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	689b      	ldr	r3, [r3, #8]
 800357a:	400a      	ands	r2, r1
 800357c:	601a      	str	r2, [r3, #0]
	pGPIOHandler->pGPIOx->MODER |= auxConfig;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	689b      	ldr	r3, [r3, #8]
 8003582:	6819      	ldr	r1, [r3, #0]
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	689b      	ldr	r3, [r3, #8]
 8003588:	68fa      	ldr	r2, [r7, #12]
 800358a:	430a      	orrs	r2, r1
 800358c:	601a      	str	r2, [r3, #0]

	//----------------3) Configurando el registro GPIOx_OTYPER----------------------
	//SE ENTIENDE

	//Leemos el PinNumber para mover una cantidad de veces el pinOTPype
	auxConfig = (pGPIOHandler->GPIO_PinConfig.GPIO_PinOTPype << pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	789b      	ldrb	r3, [r3, #2]
 8003592:	461a      	mov	r2, r3
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	781b      	ldrb	r3, [r3, #0]
 8003598:	fa02 f303 	lsl.w	r3, r2, r3
 800359c:	60fb      	str	r3, [r7, #12]

	//Cargamos  auxConfig en el registro OTYPER
	pGPIOHandler->pGPIOx->OTYPER &= ~(SET << pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	689b      	ldr	r3, [r3, #8]
 80035a2:	685a      	ldr	r2, [r3, #4]
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	781b      	ldrb	r3, [r3, #0]
 80035a8:	4619      	mov	r1, r3
 80035aa:	2301      	movs	r3, #1
 80035ac:	408b      	lsls	r3, r1
 80035ae:	43db      	mvns	r3, r3
 80035b0:	4619      	mov	r1, r3
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	689b      	ldr	r3, [r3, #8]
 80035b6:	400a      	ands	r2, r1
 80035b8:	605a      	str	r2, [r3, #4]
	pGPIOHandler->pGPIOx->OTYPER |= auxConfig;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	689b      	ldr	r3, [r3, #8]
 80035be:	6859      	ldr	r1, [r3, #4]
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	689b      	ldr	r3, [r3, #8]
 80035c4:	68fa      	ldr	r2, [r7, #12]
 80035c6:	430a      	orrs	r2, r1
 80035c8:	605a      	str	r2, [r3, #4]

	//----------------4) Configurando el registro GPIOx_OSPEEDR----------------------
	//SE ENTIENDE

	//Leemos el PinNumber para mover una cantidad de veces el pinSpeed
	auxConfig = (pGPIOHandler->GPIO_PinConfig.GPIO_PinSpeed << 2*pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	78db      	ldrb	r3, [r3, #3]
 80035ce:	461a      	mov	r2, r3
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	781b      	ldrb	r3, [r3, #0]
 80035d4:	005b      	lsls	r3, r3, #1
 80035d6:	fa02 f303 	lsl.w	r3, r2, r3
 80035da:	60fb      	str	r3, [r7, #12]

	//Cargamos  auxConfig en el registro OSPEEDR
	pGPIOHandler->pGPIOx->OSPEEDR &= ~(0b11 << 2*pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	689b      	ldr	r3, [r3, #8]
 80035e0:	689a      	ldr	r2, [r3, #8]
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	781b      	ldrb	r3, [r3, #0]
 80035e6:	005b      	lsls	r3, r3, #1
 80035e8:	2103      	movs	r1, #3
 80035ea:	fa01 f303 	lsl.w	r3, r1, r3
 80035ee:	43db      	mvns	r3, r3
 80035f0:	4619      	mov	r1, r3
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	689b      	ldr	r3, [r3, #8]
 80035f6:	400a      	ands	r2, r1
 80035f8:	609a      	str	r2, [r3, #8]
	pGPIOHandler->pGPIOx->OSPEEDR |= auxConfig;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	689b      	ldr	r3, [r3, #8]
 80035fe:	6899      	ldr	r1, [r3, #8]
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	689b      	ldr	r3, [r3, #8]
 8003604:	68fa      	ldr	r2, [r7, #12]
 8003606:	430a      	orrs	r2, r1
 8003608:	609a      	str	r2, [r3, #8]

	//----------------5) Configurando el registro GPIOx_PUPDR----------------------
	//SE ENTIENDE

	//Leemos el PinNumber para mover una cantidad de veces el pinSpeed
	auxConfig = (pGPIOHandler->GPIO_PinConfig.GPIO_PinPUPdControl << 2*pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	791b      	ldrb	r3, [r3, #4]
 800360e:	461a      	mov	r2, r3
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	781b      	ldrb	r3, [r3, #0]
 8003614:	005b      	lsls	r3, r3, #1
 8003616:	fa02 f303 	lsl.w	r3, r2, r3
 800361a:	60fb      	str	r3, [r7, #12]

	//Cargamos  auxConfig en el registro PUPDR
	pGPIOHandler->pGPIOx->PUPDR &= ~(0b11 << 2*pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	689b      	ldr	r3, [r3, #8]
 8003620:	68da      	ldr	r2, [r3, #12]
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	781b      	ldrb	r3, [r3, #0]
 8003626:	005b      	lsls	r3, r3, #1
 8003628:	2103      	movs	r1, #3
 800362a:	fa01 f303 	lsl.w	r3, r1, r3
 800362e:	43db      	mvns	r3, r3
 8003630:	4619      	mov	r1, r3
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	689b      	ldr	r3, [r3, #8]
 8003636:	400a      	ands	r2, r1
 8003638:	60da      	str	r2, [r3, #12]
	pGPIOHandler->pGPIOx->PUPDR|= auxConfig;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	689b      	ldr	r3, [r3, #8]
 800363e:	68d9      	ldr	r1, [r3, #12]
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	689b      	ldr	r3, [r3, #8]
 8003644:	68fa      	ldr	r2, [r7, #12]
 8003646:	430a      	orrs	r2, r1
 8003648:	60da      	str	r2, [r3, #12]

	//---------------- MODER: Configurando funciones alternativas----------------------

	//si el Modo de configuracion escogido es GPIO_MODE_ALTFN, entonces activamos el AF
	if(pGPIOHandler->GPIO_PinConfig.GPIO_PinModer == GPIO_MODE_ALTFN)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	785b      	ldrb	r3, [r3, #1]
 800364e:	2b02      	cmp	r3, #2
 8003650:	d143      	bne.n	80036da <GPIO_Config+0x22a>
	{
		//Para los pines 0 a 8 escogemos el AFRL
		if (pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber < 8)
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	781b      	ldrb	r3, [r3, #0]
 8003656:	2b07      	cmp	r3, #7
 8003658:	d81f      	bhi.n	800369a <GPIO_Config+0x1ea>
		{
			auxPosition = 4*pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	781b      	ldrb	r3, [r3, #0]
 800365e:	009b      	lsls	r3, r3, #2
 8003660:	60bb      	str	r3, [r7, #8]

			//Cargamos auxPosition en el registro AFRL
			pGPIOHandler->pGPIOx->AFR[0] &= ~(0b1111 << auxPosition);
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	689b      	ldr	r3, [r3, #8]
 8003666:	6a1a      	ldr	r2, [r3, #32]
 8003668:	210f      	movs	r1, #15
 800366a:	68bb      	ldr	r3, [r7, #8]
 800366c:	fa01 f303 	lsl.w	r3, r1, r3
 8003670:	43db      	mvns	r3, r3
 8003672:	4619      	mov	r1, r3
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	689b      	ldr	r3, [r3, #8]
 8003678:	400a      	ands	r2, r1
 800367a:	621a      	str	r2, [r3, #32]
			pGPIOHandler->pGPIOx->AFR[0] |= (pGPIOHandler->GPIO_PinConfig.GPIO_PinAltFunMode << auxPosition);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	689b      	ldr	r3, [r3, #8]
 8003680:	6a1a      	ldr	r2, [r3, #32]
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	795b      	ldrb	r3, [r3, #5]
 8003686:	4619      	mov	r1, r3
 8003688:	68bb      	ldr	r3, [r7, #8]
 800368a:	fa01 f303 	lsl.w	r3, r1, r3
 800368e:	4619      	mov	r1, r3
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	689b      	ldr	r3, [r3, #8]
 8003694:	430a      	orrs	r2, r1
 8003696:	621a      	str	r2, [r3, #32]
			//Cargamos auxPosition en el registro AFRL
			pGPIOHandler->pGPIOx->AFR[1] &= ~(0b1111 << auxPosition);
			pGPIOHandler->pGPIOx->AFR[1] |= (pGPIOHandler->GPIO_PinConfig.GPIO_PinAltFunMode << auxPosition);
		}
	}
}
 8003698:	e01f      	b.n	80036da <GPIO_Config+0x22a>
			auxPosition = 4*(pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber-8);
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	781b      	ldrb	r3, [r3, #0]
 800369e:	3b08      	subs	r3, #8
 80036a0:	009b      	lsls	r3, r3, #2
 80036a2:	60bb      	str	r3, [r7, #8]
			pGPIOHandler->pGPIOx->AFR[1] &= ~(0b1111 << auxPosition);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	689b      	ldr	r3, [r3, #8]
 80036a8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80036aa:	210f      	movs	r1, #15
 80036ac:	68bb      	ldr	r3, [r7, #8]
 80036ae:	fa01 f303 	lsl.w	r3, r1, r3
 80036b2:	43db      	mvns	r3, r3
 80036b4:	4619      	mov	r1, r3
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	689b      	ldr	r3, [r3, #8]
 80036ba:	400a      	ands	r2, r1
 80036bc:	625a      	str	r2, [r3, #36]	; 0x24
			pGPIOHandler->pGPIOx->AFR[1] |= (pGPIOHandler->GPIO_PinConfig.GPIO_PinAltFunMode << auxPosition);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	689b      	ldr	r3, [r3, #8]
 80036c2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	795b      	ldrb	r3, [r3, #5]
 80036c8:	4619      	mov	r1, r3
 80036ca:	68bb      	ldr	r3, [r7, #8]
 80036cc:	fa01 f303 	lsl.w	r3, r1, r3
 80036d0:	4619      	mov	r1, r3
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	689b      	ldr	r3, [r3, #8]
 80036d6:	430a      	orrs	r2, r1
 80036d8:	625a      	str	r2, [r3, #36]	; 0x24
}
 80036da:	bf00      	nop
 80036dc:	3714      	adds	r7, #20
 80036de:	46bd      	mov	sp, r7
 80036e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e4:	4770      	bx	lr
 80036e6:	bf00      	nop
 80036e8:	40020000 	.word	0x40020000
 80036ec:	40023800 	.word	0x40023800
 80036f0:	40020400 	.word	0x40020400
 80036f4:	40020800 	.word	0x40020800
 80036f8:	40020c00 	.word	0x40020c00
 80036fc:	40021000 	.word	0x40021000
 8003700:	40021c00 	.word	0x40021c00

08003704 <GPIO_writePin>:

//---------------- MODER: Configurando Output: Registro BSRR----------------------

void GPIO_writePin (GPIO_Handler_t *pPinHandler, uint8_t newState)
{
 8003704:	b480      	push	{r7}
 8003706:	b083      	sub	sp, #12
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]
 800370c:	460b      	mov	r3, r1
 800370e:	70fb      	strb	r3, [r7, #3]
	//Limpiamos la posicion que deseamos
	//pPinHandler->pGPIOx->ODR &= ~(SET << pPinHandler->GPIO_PinConfig.GPIO_PinNumber);
	if (newState == SET)
 8003710:	78fb      	ldrb	r3, [r7, #3]
 8003712:	2b01      	cmp	r3, #1
 8003714:	d10d      	bne.n	8003732 <GPIO_writePin+0x2e>
	{
		//Trabajamos con la parte baja del registro
		pPinHandler->pGPIOx->BSRR |= (SET<<pPinHandler->GPIO_PinConfig.GPIO_PinNumber);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	689b      	ldr	r3, [r3, #8]
 800371a:	699a      	ldr	r2, [r3, #24]
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	781b      	ldrb	r3, [r3, #0]
 8003720:	4619      	mov	r1, r3
 8003722:	2301      	movs	r3, #1
 8003724:	408b      	lsls	r3, r1
 8003726:	4619      	mov	r1, r3
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	689b      	ldr	r3, [r3, #8]
 800372c:	430a      	orrs	r2, r1
 800372e:	619a      	str	r2, [r3, #24]
	else
	{
		//Trabajamos con la parte alta del registro
		pPinHandler->pGPIOx->BSRR |= (SET<<(pPinHandler->GPIO_PinConfig.GPIO_PinNumber+16));
	}
}
 8003730:	e00d      	b.n	800374e <GPIO_writePin+0x4a>
		pPinHandler->pGPIOx->BSRR |= (SET<<(pPinHandler->GPIO_PinConfig.GPIO_PinNumber+16));
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	689b      	ldr	r3, [r3, #8]
 8003736:	699a      	ldr	r2, [r3, #24]
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	781b      	ldrb	r3, [r3, #0]
 800373c:	3310      	adds	r3, #16
 800373e:	2101      	movs	r1, #1
 8003740:	fa01 f303 	lsl.w	r3, r1, r3
 8003744:	4619      	mov	r1, r3
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	689b      	ldr	r3, [r3, #8]
 800374a:	430a      	orrs	r2, r1
 800374c:	619a      	str	r2, [r3, #24]
}
 800374e:	bf00      	nop
 8003750:	370c      	adds	r7, #12
 8003752:	46bd      	mov	sp, r7
 8003754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003758:	4770      	bx	lr

0800375a <GPIOxTooglePin>:
}


//---------------- Toogle ---------------------
void GPIOxTooglePin(GPIO_Handler_t *pPinHandler)
{
 800375a:	b480      	push	{r7}
 800375c:	b083      	sub	sp, #12
 800375e:	af00      	add	r7, sp, #0
 8003760:	6078      	str	r0, [r7, #4]
	pPinHandler->pGPIOx->ODR  ^= (SET << pPinHandler->GPIO_PinConfig.GPIO_PinNumber);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	689b      	ldr	r3, [r3, #8]
 8003766:	695a      	ldr	r2, [r3, #20]
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	781b      	ldrb	r3, [r3, #0]
 800376c:	4619      	mov	r1, r3
 800376e:	2301      	movs	r3, #1
 8003770:	408b      	lsls	r3, r1
 8003772:	4619      	mov	r1, r3
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	689b      	ldr	r3, [r3, #8]
 8003778:	404a      	eors	r2, r1
 800377a:	615a      	str	r2, [r3, #20]
}
 800377c:	bf00      	nop
 800377e:	370c      	adds	r7, #12
 8003780:	46bd      	mov	sp, r7
 8003782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003786:	4770      	bx	lr

08003788 <configPLL>:
#include <PLLDriver.h>

uint8_t auxValue = 0;

void configPLL(uint8_t clockSpeed)
{
 8003788:	b480      	push	{r7}
 800378a:	b083      	sub	sp, #12
 800378c:	af00      	add	r7, sp, #0
 800378e:	4603      	mov	r3, r0
 8003790:	71fb      	strb	r3, [r7, #7]
	//Guardamos en una variable auxiliar la velocidad del reloj
	auxValue = clockSpeed;
 8003792:	4a39      	ldr	r2, [pc, #228]	; (8003878 <configPLL+0xf0>)
 8003794:	79fb      	ldrb	r3, [r7, #7]
 8003796:	7013      	strb	r3, [r2, #0]
	//Registro: CFGR

	/*El limite de la fuente de reloj para el bus APB1 es 50 Mhz, por tanto si la velocidad de reloj
	 * especificada es mayor a dicho se activa un preescaler de 4 para dicho bus
	*/
	if(clockSpeed<50)
 8003798:	79fb      	ldrb	r3, [r7, #7]
 800379a:	2b31      	cmp	r3, #49	; 0x31
 800379c:	d804      	bhi.n	80037a8 <configPLL+0x20>
	{
		RCC->CFGR |= RCC_CFGR_PPRE1_DIV1;
 800379e:	4b37      	ldr	r3, [pc, #220]	; (800387c <configPLL+0xf4>)
 80037a0:	4a36      	ldr	r2, [pc, #216]	; (800387c <configPLL+0xf4>)
 80037a2:	689b      	ldr	r3, [r3, #8]
 80037a4:	6093      	str	r3, [r2, #8]
 80037a6:	e005      	b.n	80037b4 <configPLL+0x2c>
	}
	else
	{
		RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 80037a8:	4b34      	ldr	r3, [pc, #208]	; (800387c <configPLL+0xf4>)
 80037aa:	689b      	ldr	r3, [r3, #8]
 80037ac:	4a33      	ldr	r2, [pc, #204]	; (800387c <configPLL+0xf4>)
 80037ae:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 80037b2:	6093      	str	r3, [r2, #8]

	//adjustHSI();

	//-------------2) Seleccion del HSI como la fuente de reloj para el PLL---------------
	//Registro: PLLCFGR
	RCC->PLLCFGR &= ~(0b1<<RCC_PLLCFGR_PLLSRC_Pos);
 80037b4:	4b31      	ldr	r3, [pc, #196]	; (800387c <configPLL+0xf4>)
 80037b6:	685b      	ldr	r3, [r3, #4]
 80037b8:	4a30      	ldr	r2, [pc, #192]	; (800387c <configPLL+0xf4>)
 80037ba:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80037be:	6053      	str	r3, [r2, #4]

	//----a) Modificacion del factor divisor M---------
	     //Señal de entrada al VCO entre 1 MHz y 2 MHz
	//De acuerdo al Manual de usuario se especifica un valor de 8 para que la señal de entrada al VCO sea de 2 Mhz; pero funciona bien con 1Mhz
	//Para el caso de 100Mhz, eston valores cambian para tener la presicion que se requiere
	RCC->PLLCFGR |= (18<<RCC_PLLCFGR_PLLM_Pos);  //16
 80037c0:	4b2e      	ldr	r3, [pc, #184]	; (800387c <configPLL+0xf4>)
 80037c2:	685b      	ldr	r3, [r3, #4]
 80037c4:	4a2d      	ldr	r2, [pc, #180]	; (800387c <configPLL+0xf4>)
 80037c6:	f043 0312 	orr.w	r3, r3, #18
 80037ca:	6053      	str	r3, [r2, #4]
         //Señal de salida al VCO entre 100 MHz y 438 MHz
		 //El valor de N sera entre de 50 y 100   ------> M=8
		 //El valor de N sera entre de 100 y 400  ------> M=16
	//De acuerdo al Manual de usuario y los calculos realizados el valor de N sera entre 100 y 400, para un valor de P de 4.
	//Para el caso de 100Mhz, eston valores cambian para tener la presicion que se requiere
	RCC->PLLCFGR |= ((clockSpeed*4-14)<<RCC_PLLCFGR_PLLN_Pos); //-14
 80037cc:	4b2b      	ldr	r3, [pc, #172]	; (800387c <configPLL+0xf4>)
 80037ce:	685b      	ldr	r3, [r3, #4]
 80037d0:	79fa      	ldrb	r2, [r7, #7]
 80037d2:	0092      	lsls	r2, r2, #2
 80037d4:	3a0e      	subs	r2, #14
 80037d6:	0192      	lsls	r2, r2, #6
 80037d8:	4611      	mov	r1, r2
 80037da:	4a28      	ldr	r2, [pc, #160]	; (800387c <configPLL+0xf4>)
 80037dc:	430b      	orrs	r3, r1
 80037de:	6053      	str	r3, [r2, #4]

	//----c) Modificacion del factor divisor P-----
	     //Señal de salida del PLL entre 25 MHz y 100 MHz
	RCC->PLLCFGR |= (0b01<<RCC_PLLCFGR_PLLP_Pos);   //El valor establecido es 4
 80037e0:	4b26      	ldr	r3, [pc, #152]	; (800387c <configPLL+0xf4>)
 80037e2:	685b      	ldr	r3, [r3, #4]
 80037e4:	4a25      	ldr	r2, [pc, #148]	; (800387c <configPLL+0xf4>)
 80037e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037ea:	6053      	str	r3, [r2, #4]

	//---------------------------3) Activacion PLL----------------------------------
	//Registro: CR

	RCC->CR |= RCC_CR_PLLON;  //Escribimos un valor alto en el bit PLLON para su habilitacion
 80037ec:	4b23      	ldr	r3, [pc, #140]	; (800387c <configPLL+0xf4>)
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	4a22      	ldr	r2, [pc, #136]	; (800387c <configPLL+0xf4>)
 80037f2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80037f6:	6013      	str	r3, [r2, #0]

	//Espera de la activacion del PLL
	while(!(RCC->CR & RCC_CR_PLLRDY))
 80037f8:	e000      	b.n	80037fc <configPLL+0x74>
	{
		__NOP();
 80037fa:	bf00      	nop
	while(!(RCC->CR & RCC_CR_PLLRDY))
 80037fc:	4b1f      	ldr	r3, [pc, #124]	; (800387c <configPLL+0xf4>)
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003804:	2b00      	cmp	r3, #0
 8003806:	d0f8      	beq.n	80037fa <configPLL+0x72>

	//---------------------------4) Valor de Latencia----------------------------------
	//Registro: ACR

	//Se define el valor de la latencia de acuerdo a la velocidad de reloj establecida
	if (90<clockSpeed && clockSpeed<=100)
 8003808:	79fb      	ldrb	r3, [r7, #7]
 800380a:	2b5a      	cmp	r3, #90	; 0x5a
 800380c:	d909      	bls.n	8003822 <configPLL+0x9a>
 800380e:	79fb      	ldrb	r3, [r7, #7]
 8003810:	2b64      	cmp	r3, #100	; 0x64
 8003812:	d806      	bhi.n	8003822 <configPLL+0x9a>
	{
		FLASH->ACR |= FLASH_ACR_LATENCY_3WS;
 8003814:	4b1a      	ldr	r3, [pc, #104]	; (8003880 <configPLL+0xf8>)
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	4a19      	ldr	r2, [pc, #100]	; (8003880 <configPLL+0xf8>)
 800381a:	f043 0303 	orr.w	r3, r3, #3
 800381e:	6013      	str	r3, [r2, #0]
 8003820:	e01d      	b.n	800385e <configPLL+0xd6>
	}
	else if (64<clockSpeed && clockSpeed<=90)
 8003822:	79fb      	ldrb	r3, [r7, #7]
 8003824:	2b40      	cmp	r3, #64	; 0x40
 8003826:	d909      	bls.n	800383c <configPLL+0xb4>
 8003828:	79fb      	ldrb	r3, [r7, #7]
 800382a:	2b5a      	cmp	r3, #90	; 0x5a
 800382c:	d806      	bhi.n	800383c <configPLL+0xb4>
	{
		FLASH->ACR |= FLASH_ACR_LATENCY_2WS;
 800382e:	4b14      	ldr	r3, [pc, #80]	; (8003880 <configPLL+0xf8>)
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	4a13      	ldr	r2, [pc, #76]	; (8003880 <configPLL+0xf8>)
 8003834:	f043 0302 	orr.w	r3, r3, #2
 8003838:	6013      	str	r3, [r2, #0]
 800383a:	e010      	b.n	800385e <configPLL+0xd6>
	}
	else if (30<clockSpeed && clockSpeed<=64)
 800383c:	79fb      	ldrb	r3, [r7, #7]
 800383e:	2b1e      	cmp	r3, #30
 8003840:	d909      	bls.n	8003856 <configPLL+0xce>
 8003842:	79fb      	ldrb	r3, [r7, #7]
 8003844:	2b40      	cmp	r3, #64	; 0x40
 8003846:	d806      	bhi.n	8003856 <configPLL+0xce>
	{
		FLASH->ACR |= FLASH_ACR_LATENCY_1WS;
 8003848:	4b0d      	ldr	r3, [pc, #52]	; (8003880 <configPLL+0xf8>)
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	4a0c      	ldr	r2, [pc, #48]	; (8003880 <configPLL+0xf8>)
 800384e:	f043 0301 	orr.w	r3, r3, #1
 8003852:	6013      	str	r3, [r2, #0]
 8003854:	e003      	b.n	800385e <configPLL+0xd6>
	}
	else
	{
		FLASH->ACR |= FLASH_ACR_LATENCY_0WS;
 8003856:	4b0a      	ldr	r3, [pc, #40]	; (8003880 <configPLL+0xf8>)
 8003858:	4a09      	ldr	r2, [pc, #36]	; (8003880 <configPLL+0xf8>)
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	6013      	str	r3, [r2, #0]
	}

	//------------------5) Seleccion del PLL como la fuente de reloj del sistema----------------------------
	//Registro: CFGR

	RCC->CFGR |= (0b10<<RCC_CFGR_SW_Pos);
 800385e:	4b07      	ldr	r3, [pc, #28]	; (800387c <configPLL+0xf4>)
 8003860:	689b      	ldr	r3, [r3, #8]
 8003862:	4a06      	ldr	r2, [pc, #24]	; (800387c <configPLL+0xf4>)
 8003864:	f043 0302 	orr.w	r3, r3, #2
 8003868:	6093      	str	r3, [r2, #8]

}
 800386a:	bf00      	nop
 800386c:	370c      	adds	r7, #12
 800386e:	46bd      	mov	sp, r7
 8003870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003874:	4770      	bx	lr
 8003876:	bf00      	nop
 8003878:	200003f4 	.word	0x200003f4
 800387c:	40023800 	.word	0x40023800
 8003880:	40023c00 	.word	0x40023c00

08003884 <getConfigPLL>:
	RCC->CR |= hsiTrimValue<<RCC_CR_HSITRIM_Pos;            //Cargamos la calibracion
}

//Funcion que retorna la velocidad de reloj entregado por el PLL o por el HSI en MHz
uint8_t getConfigPLL(void)
{
 8003884:	b480      	push	{r7}
 8003886:	b083      	sub	sp, #12
 8003888:	af00      	add	r7, sp, #0
	uint8_t clockSpeed = 0;
 800388a:	2300      	movs	r3, #0
 800388c:	71fb      	strb	r3, [r7, #7]
	//Verifica si el PLL esta activo
	if((RCC->CFGR & 0b11) == 0b10)
 800388e:	4b09      	ldr	r3, [pc, #36]	; (80038b4 <getConfigPLL+0x30>)
 8003890:	689b      	ldr	r3, [r3, #8]
 8003892:	f003 0303 	and.w	r3, r3, #3
 8003896:	2b02      	cmp	r3, #2
 8003898:	d103      	bne.n	80038a2 <getConfigPLL+0x1e>
	{
		clockSpeed = auxValue;
 800389a:	4b07      	ldr	r3, [pc, #28]	; (80038b8 <getConfigPLL+0x34>)
 800389c:	781b      	ldrb	r3, [r3, #0]
 800389e:	71fb      	strb	r3, [r7, #7]
 80038a0:	e001      	b.n	80038a6 <getConfigPLL+0x22>
	}
	else
	{
		clockSpeed = CLOCK_SPEED_16MHZ;
 80038a2:	2310      	movs	r3, #16
 80038a4:	71fb      	strb	r3, [r7, #7]
	}
	return clockSpeed;
 80038a6:	79fb      	ldrb	r3, [r7, #7]
}
 80038a8:	4618      	mov	r0, r3
 80038aa:	370c      	adds	r7, #12
 80038ac:	46bd      	mov	sp, r7
 80038ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b2:	4770      	bx	lr
 80038b4:	40023800 	.word	0x40023800
 80038b8:	200003f4 	.word	0x200003f4

080038bc <getClockAPB1>:

//Funcion que retorna la velocidad de reloj entregada al bus APB1
uint8_t getClockAPB1(void)
{
 80038bc:	b580      	push	{r7, lr}
 80038be:	b082      	sub	sp, #8
 80038c0:	af00      	add	r7, sp, #0
	uint8_t clock = getConfigPLL();  	     //Obtenemos la velocidad de reloj del sistema
 80038c2:	f7ff ffdf 	bl	8003884 <getConfigPLL>
 80038c6:	4603      	mov	r3, r0
 80038c8:	71bb      	strb	r3, [r7, #6]
	uint8_t clockAPB1 = 0;                   //Variable que guarda la velocidad de reloj entrante al bus APB1
 80038ca:	2300      	movs	r3, #0
 80038cc:	71fb      	strb	r3, [r7, #7]

	//verificamos si el preescaler de 4 estara activado deacuerdo a la frecuencia max del bus
	if(clock<50)
 80038ce:	79bb      	ldrb	r3, [r7, #6]
 80038d0:	2b31      	cmp	r3, #49	; 0x31
 80038d2:	d802      	bhi.n	80038da <getClockAPB1+0x1e>
	{
		clockAPB1 = clock;
 80038d4:	79bb      	ldrb	r3, [r7, #6]
 80038d6:	71fb      	strb	r3, [r7, #7]
 80038d8:	e002      	b.n	80038e0 <getClockAPB1+0x24>
	}
	else
	{
		clockAPB1 = clock/4;
 80038da:	79bb      	ldrb	r3, [r7, #6]
 80038dc:	089b      	lsrs	r3, r3, #2
 80038de:	71fb      	strb	r3, [r7, #7]
	}
	return clockAPB1;
 80038e0:	79fb      	ldrb	r3, [r7, #7]
}
 80038e2:	4618      	mov	r0, r3
 80038e4:	3708      	adds	r7, #8
 80038e6:	46bd      	mov	sp, r7
 80038e8:	bd80      	pop	{r7, pc}
	...

080038ec <configMCO2>:

//Funcion que selecciona la señal de reloj saliente del pin MCO1
void configMCO2(uint8_t value)
{
 80038ec:	b480      	push	{r7}
 80038ee:	b083      	sub	sp, #12
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	4603      	mov	r3, r0
 80038f4:	71fb      	strb	r3, [r7, #7]
	RCC->CFGR &= ~(0b11<<RCC_CFGR_MCO2_Pos);
 80038f6:	4b0a      	ldr	r3, [pc, #40]	; (8003920 <configMCO2+0x34>)
 80038f8:	689b      	ldr	r3, [r3, #8]
 80038fa:	4a09      	ldr	r2, [pc, #36]	; (8003920 <configMCO2+0x34>)
 80038fc:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8003900:	6093      	str	r3, [r2, #8]
	RCC->CFGR |= (value<<RCC_CFGR_MCO2_Pos);
 8003902:	4b07      	ldr	r3, [pc, #28]	; (8003920 <configMCO2+0x34>)
 8003904:	689b      	ldr	r3, [r3, #8]
 8003906:	79fa      	ldrb	r2, [r7, #7]
 8003908:	0792      	lsls	r2, r2, #30
 800390a:	4611      	mov	r1, r2
 800390c:	4a04      	ldr	r2, [pc, #16]	; (8003920 <configMCO2+0x34>)
 800390e:	430b      	orrs	r3, r1
 8003910:	6093      	str	r3, [r2, #8]
}
 8003912:	bf00      	nop
 8003914:	370c      	adds	r7, #12
 8003916:	46bd      	mov	sp, r7
 8003918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391c:	4770      	bx	lr
 800391e:	bf00      	nop
 8003920:	40023800 	.word	0x40023800

08003924 <configMCO2PRE>:

//Funcion que selecciona la señal de reloj saliente del pin MCO1
void configMCO2PRE(uint8_t value)
{
 8003924:	b480      	push	{r7}
 8003926:	b083      	sub	sp, #12
 8003928:	af00      	add	r7, sp, #0
 800392a:	4603      	mov	r3, r0
 800392c:	71fb      	strb	r3, [r7, #7]
	//Selecionamos el prescaler de acuerdo al valor definido
	switch (value){
 800392e:	79fb      	ldrb	r3, [r7, #7]
 8003930:	3b01      	subs	r3, #1
 8003932:	2b04      	cmp	r3, #4
 8003934:	d84b      	bhi.n	80039ce <configMCO2PRE+0xaa>
 8003936:	a201      	add	r2, pc, #4	; (adr r2, 800393c <configMCO2PRE+0x18>)
 8003938:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800393c:	08003951 	.word	0x08003951
 8003940:	08003967 	.word	0x08003967
 8003944:	08003981 	.word	0x08003981
 8003948:	0800399b 	.word	0x0800399b
 800394c:	080039b5 	.word	0x080039b5
		case 1:
		{
			RCC->CFGR &= ~(0b111<<RCC_CFGR_MCO2PRE_Pos);
 8003950:	4b23      	ldr	r3, [pc, #140]	; (80039e0 <configMCO2PRE+0xbc>)
 8003952:	689b      	ldr	r3, [r3, #8]
 8003954:	4a22      	ldr	r2, [pc, #136]	; (80039e0 <configMCO2PRE+0xbc>)
 8003956:	f023 5360 	bic.w	r3, r3, #939524096	; 0x38000000
 800395a:	6093      	str	r3, [r2, #8]
			RCC->CFGR |= (0b000<<RCC_CFGR_MCO2PRE_Pos);
 800395c:	4b20      	ldr	r3, [pc, #128]	; (80039e0 <configMCO2PRE+0xbc>)
 800395e:	4a20      	ldr	r2, [pc, #128]	; (80039e0 <configMCO2PRE+0xbc>)
 8003960:	689b      	ldr	r3, [r3, #8]
 8003962:	6093      	str	r3, [r2, #8]
			break;
 8003964:	e035      	b.n	80039d2 <configMCO2PRE+0xae>
		}
		case 2:
		{
			RCC->CFGR &= ~(0b111<<RCC_CFGR_MCO2PRE_Pos);
 8003966:	4b1e      	ldr	r3, [pc, #120]	; (80039e0 <configMCO2PRE+0xbc>)
 8003968:	689b      	ldr	r3, [r3, #8]
 800396a:	4a1d      	ldr	r2, [pc, #116]	; (80039e0 <configMCO2PRE+0xbc>)
 800396c:	f023 5360 	bic.w	r3, r3, #939524096	; 0x38000000
 8003970:	6093      	str	r3, [r2, #8]
			RCC->CFGR |= (0b100<<RCC_CFGR_MCO2PRE_Pos);
 8003972:	4b1b      	ldr	r3, [pc, #108]	; (80039e0 <configMCO2PRE+0xbc>)
 8003974:	689b      	ldr	r3, [r3, #8]
 8003976:	4a1a      	ldr	r2, [pc, #104]	; (80039e0 <configMCO2PRE+0xbc>)
 8003978:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800397c:	6093      	str	r3, [r2, #8]
			break;
 800397e:	e028      	b.n	80039d2 <configMCO2PRE+0xae>
		}
		case 3:
		{
			RCC->CFGR &= ~(0b111<<RCC_CFGR_MCO2PRE_Pos);
 8003980:	4b17      	ldr	r3, [pc, #92]	; (80039e0 <configMCO2PRE+0xbc>)
 8003982:	689b      	ldr	r3, [r3, #8]
 8003984:	4a16      	ldr	r2, [pc, #88]	; (80039e0 <configMCO2PRE+0xbc>)
 8003986:	f023 5360 	bic.w	r3, r3, #939524096	; 0x38000000
 800398a:	6093      	str	r3, [r2, #8]
			RCC->CFGR |= (0b101<<RCC_CFGR_MCO2PRE_Pos);
 800398c:	4b14      	ldr	r3, [pc, #80]	; (80039e0 <configMCO2PRE+0xbc>)
 800398e:	689b      	ldr	r3, [r3, #8]
 8003990:	4a13      	ldr	r2, [pc, #76]	; (80039e0 <configMCO2PRE+0xbc>)
 8003992:	f043 5320 	orr.w	r3, r3, #671088640	; 0x28000000
 8003996:	6093      	str	r3, [r2, #8]
			break;
 8003998:	e01b      	b.n	80039d2 <configMCO2PRE+0xae>
		}
		case 4:
		{
			RCC->CFGR &= ~(0b111<<RCC_CFGR_MCO2PRE_Pos);
 800399a:	4b11      	ldr	r3, [pc, #68]	; (80039e0 <configMCO2PRE+0xbc>)
 800399c:	689b      	ldr	r3, [r3, #8]
 800399e:	4a10      	ldr	r2, [pc, #64]	; (80039e0 <configMCO2PRE+0xbc>)
 80039a0:	f023 5360 	bic.w	r3, r3, #939524096	; 0x38000000
 80039a4:	6093      	str	r3, [r2, #8]
			RCC->CFGR |= (0b110<<RCC_CFGR_MCO2PRE_Pos);
 80039a6:	4b0e      	ldr	r3, [pc, #56]	; (80039e0 <configMCO2PRE+0xbc>)
 80039a8:	689b      	ldr	r3, [r3, #8]
 80039aa:	4a0d      	ldr	r2, [pc, #52]	; (80039e0 <configMCO2PRE+0xbc>)
 80039ac:	f043 5340 	orr.w	r3, r3, #805306368	; 0x30000000
 80039b0:	6093      	str	r3, [r2, #8]
			break;
 80039b2:	e00e      	b.n	80039d2 <configMCO2PRE+0xae>
		}
		case 5:
		{
			RCC->CFGR &= ~(0b111<<RCC_CFGR_MCO2PRE_Pos);
 80039b4:	4b0a      	ldr	r3, [pc, #40]	; (80039e0 <configMCO2PRE+0xbc>)
 80039b6:	689b      	ldr	r3, [r3, #8]
 80039b8:	4a09      	ldr	r2, [pc, #36]	; (80039e0 <configMCO2PRE+0xbc>)
 80039ba:	f023 5360 	bic.w	r3, r3, #939524096	; 0x38000000
 80039be:	6093      	str	r3, [r2, #8]
			RCC->CFGR |= (0b111<<RCC_CFGR_MCO2PRE_Pos);
 80039c0:	4b07      	ldr	r3, [pc, #28]	; (80039e0 <configMCO2PRE+0xbc>)
 80039c2:	689b      	ldr	r3, [r3, #8]
 80039c4:	4a06      	ldr	r2, [pc, #24]	; (80039e0 <configMCO2PRE+0xbc>)
 80039c6:	f043 5360 	orr.w	r3, r3, #939524096	; 0x38000000
 80039ca:	6093      	str	r3, [r2, #8]
			break;
 80039cc:	e001      	b.n	80039d2 <configMCO2PRE+0xae>
		}
		default:
		{
			__NOP();
 80039ce:	bf00      	nop
			break;
 80039d0:	bf00      	nop
		}
	}

}
 80039d2:	bf00      	nop
 80039d4:	370c      	adds	r7, #12
 80039d6:	46bd      	mov	sp, r7
 80039d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039dc:	4770      	bx	lr
 80039de:	bf00      	nop
 80039e0:	40023800 	.word	0x40023800

080039e4 <pwm_Config>:

#include <PwmDriver.h>
#include <PLLDriver.h>

void pwm_Config(PWM_Handler_t *prtPwmHandler)
{
 80039e4:	b580      	push	{r7, lr}
 80039e6:	b082      	sub	sp, #8
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	6078      	str	r0, [r7, #4]
	//---------------------------1) Activamos la señal de reloj al periferico----------------------------------
	//Registro: APB1ENR

	//Verificamos para TIM2
	if(prtPwmHandler->ptrTIMx==TIM2)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	689b      	ldr	r3, [r3, #8]
 80039f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039f4:	d106      	bne.n	8003a04 <pwm_Config+0x20>
	{
		/*Activamos el periferico escribiendo un 1 deacuerdo a la posicion
		* del periferico en el registro*/
		RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 80039f6:	4b81      	ldr	r3, [pc, #516]	; (8003bfc <pwm_Config+0x218>)
 80039f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039fa:	4a80      	ldr	r2, [pc, #512]	; (8003bfc <pwm_Config+0x218>)
 80039fc:	f043 0301 	orr.w	r3, r3, #1
 8003a00:	6413      	str	r3, [r2, #64]	; 0x40
 8003a02:	e024      	b.n	8003a4e <pwm_Config+0x6a>

	}
	//Verificamos para TIM3
	else if(prtPwmHandler->ptrTIMx==TIM3)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	689b      	ldr	r3, [r3, #8]
 8003a08:	4a7d      	ldr	r2, [pc, #500]	; (8003c00 <pwm_Config+0x21c>)
 8003a0a:	4293      	cmp	r3, r2
 8003a0c:	d106      	bne.n	8003a1c <pwm_Config+0x38>
	{
		/*Activamos el periferico escribiendo un 1 deacuerdo a la posicion
		 * del periferico en el registro*/
		RCC->APB1ENR |= RCC_APB1ENR_TIM3EN;
 8003a0e:	4b7b      	ldr	r3, [pc, #492]	; (8003bfc <pwm_Config+0x218>)
 8003a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a12:	4a7a      	ldr	r2, [pc, #488]	; (8003bfc <pwm_Config+0x218>)
 8003a14:	f043 0302 	orr.w	r3, r3, #2
 8003a18:	6413      	str	r3, [r2, #64]	; 0x40
 8003a1a:	e018      	b.n	8003a4e <pwm_Config+0x6a>

	}
	//Verificamos para TIM4
	else if(prtPwmHandler->ptrTIMx==TIM4)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	689b      	ldr	r3, [r3, #8]
 8003a20:	4a78      	ldr	r2, [pc, #480]	; (8003c04 <pwm_Config+0x220>)
 8003a22:	4293      	cmp	r3, r2
 8003a24:	d106      	bne.n	8003a34 <pwm_Config+0x50>
	{
		/*Activamos el periferico escribiendo un 1 deacuerdo a la posicion
		 * del periferico en el registro*/
		RCC->APB1ENR |= RCC_APB1ENR_TIM4EN;
 8003a26:	4b75      	ldr	r3, [pc, #468]	; (8003bfc <pwm_Config+0x218>)
 8003a28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a2a:	4a74      	ldr	r2, [pc, #464]	; (8003bfc <pwm_Config+0x218>)
 8003a2c:	f043 0304 	orr.w	r3, r3, #4
 8003a30:	6413      	str	r3, [r2, #64]	; 0x40
 8003a32:	e00c      	b.n	8003a4e <pwm_Config+0x6a>

	}
	//Verificamos para TIM5
	else if(prtPwmHandler->ptrTIMx==TIM5)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	689b      	ldr	r3, [r3, #8]
 8003a38:	4a73      	ldr	r2, [pc, #460]	; (8003c08 <pwm_Config+0x224>)
 8003a3a:	4293      	cmp	r3, r2
 8003a3c:	d106      	bne.n	8003a4c <pwm_Config+0x68>
	{
		/*Activamos el periferico escribiendo un 1 deacuerdo a la posicion
		 * del periferico en el registro*/
		RCC->APB1ENR |= RCC_APB1ENR_TIM5EN;
 8003a3e:	4b6f      	ldr	r3, [pc, #444]	; (8003bfc <pwm_Config+0x218>)
 8003a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a42:	4a6e      	ldr	r2, [pc, #440]	; (8003bfc <pwm_Config+0x218>)
 8003a44:	f043 0308 	orr.w	r3, r3, #8
 8003a48:	6413      	str	r3, [r2, #64]	; 0x40
 8003a4a:	e000      	b.n	8003a4e <pwm_Config+0x6a>

	}
	else
	{
		__NOP();
 8003a4c:	bf00      	nop
	}

	//---------------------------2) Cargamos el valor del dutty------------------------------------
	//Registro: CCRx

	setDuttyCycle(prtPwmHandler);
 8003a4e:	6878      	ldr	r0, [r7, #4]
 8003a50:	f000 fa4c 	bl	8003eec <setDuttyCycle>

	//---------------------------3) Configuracion del CCMRx------------------------------------------
	//Registro: CCMRx

	switch(prtPwmHandler->config.channel)
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	781b      	ldrb	r3, [r3, #0]
 8003a58:	2b03      	cmp	r3, #3
 8003a5a:	f200 8118 	bhi.w	8003c8e <pwm_Config+0x2aa>
 8003a5e:	a201      	add	r2, pc, #4	; (adr r2, 8003a64 <pwm_Config+0x80>)
 8003a60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a64:	08003a75 	.word	0x08003a75
 8003a68:	08003af7 	.word	0x08003af7
 8003a6c:	08003b79 	.word	0x08003b79
 8003a70:	08003c0d 	.word	0x08003c0d
	{
	//Configuracion del CCMR1_Channel 1
	case PWM_CHANNEL_1:
	{
		//Selecionamos el canal como salida
		prtPwmHandler->ptrTIMx->CCMR1 &= ~TIM_CCMR1_CC1S;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	689b      	ldr	r3, [r3, #8]
 8003a78:	699a      	ldr	r2, [r3, #24]
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	689b      	ldr	r3, [r3, #8]
 8003a7e:	f022 0203 	bic.w	r2, r2, #3
 8003a82:	619a      	str	r2, [r3, #24]
		//configuramos el canal como PWM
		prtPwmHandler->ptrTIMx->CCMR1 &= ~(0b111<<TIM_CCMR1_OC1M_Pos);
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	689b      	ldr	r3, [r3, #8]
 8003a88:	699a      	ldr	r2, [r3, #24]
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	689b      	ldr	r3, [r3, #8]
 8003a8e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003a92:	619a      	str	r2, [r3, #24]
		prtPwmHandler->ptrTIMx->CCMR1 |= (0b110<<TIM_CCMR1_OC1M_Pos);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	689b      	ldr	r3, [r3, #8]
 8003a98:	699a      	ldr	r2, [r3, #24]
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	689b      	ldr	r3, [r3, #8]
 8003a9e:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8003aa2:	619a      	str	r2, [r3, #24]
		//Activamos la funcionalidad de pre-load
		prtPwmHandler->ptrTIMx->CCMR1 &= ~TIM_CCMR1_OC1PE;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	689b      	ldr	r3, [r3, #8]
 8003aa8:	699a      	ldr	r2, [r3, #24]
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	689b      	ldr	r3, [r3, #8]
 8003aae:	f022 0208 	bic.w	r2, r2, #8
 8003ab2:	619a      	str	r2, [r3, #24]
		prtPwmHandler->ptrTIMx->CCMR1 |= TIM_CCMR1_OC1PE;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	689b      	ldr	r3, [r3, #8]
 8003ab8:	699a      	ldr	r2, [r3, #24]
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	689b      	ldr	r3, [r3, #8]
 8003abe:	f042 0208 	orr.w	r2, r2, #8
 8003ac2:	619a      	str	r2, [r3, #24]
		//Configuracion adicional
		prtPwmHandler->ptrTIMx->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	689b      	ldr	r3, [r3, #8]
 8003ac8:	699a      	ldr	r2, [r3, #24]
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	689b      	ldr	r3, [r3, #8]
 8003ace:	f022 0204 	bic.w	r2, r2, #4
 8003ad2:	619a      	str	r2, [r3, #24]
		prtPwmHandler->ptrTIMx->CCMR1 |= TIM_CCMR1_OC1FE;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	689b      	ldr	r3, [r3, #8]
 8003ad8:	699a      	ldr	r2, [r3, #24]
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	689b      	ldr	r3, [r3, #8]
 8003ade:	f042 0204 	orr.w	r2, r2, #4
 8003ae2:	619a      	str	r2, [r3, #24]
		prtPwmHandler->ptrTIMx->CCMR1 &= ~TIM_CCMR1_OC1CE;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	689b      	ldr	r3, [r3, #8]
 8003ae8:	699a      	ldr	r2, [r3, #24]
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	689b      	ldr	r3, [r3, #8]
 8003aee:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003af2:	619a      	str	r2, [r3, #24]

		break;
 8003af4:	e0cc      	b.n	8003c90 <pwm_Config+0x2ac>
	}
	//Configuracion del CCMR1_Channel 2
	case PWM_CHANNEL_2:
	{
		//Selecionamos el canal como salida
		prtPwmHandler->ptrTIMx->CCMR1 &= ~TIM_CCMR1_CC1S;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	689b      	ldr	r3, [r3, #8]
 8003afa:	699a      	ldr	r2, [r3, #24]
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	689b      	ldr	r3, [r3, #8]
 8003b00:	f022 0203 	bic.w	r2, r2, #3
 8003b04:	619a      	str	r2, [r3, #24]
		//configuramos el canal como PWM
		prtPwmHandler->ptrTIMx->CCMR1 &= ~(0b111<<TIM_CCMR1_OC2M_Pos);
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	689b      	ldr	r3, [r3, #8]
 8003b0a:	699a      	ldr	r2, [r3, #24]
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	689b      	ldr	r3, [r3, #8]
 8003b10:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8003b14:	619a      	str	r2, [r3, #24]
		prtPwmHandler->ptrTIMx->CCMR1 |= (0b110<<TIM_CCMR1_OC2M_Pos);
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	689b      	ldr	r3, [r3, #8]
 8003b1a:	699a      	ldr	r2, [r3, #24]
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	689b      	ldr	r3, [r3, #8]
 8003b20:	f442 42c0 	orr.w	r2, r2, #24576	; 0x6000
 8003b24:	619a      	str	r2, [r3, #24]
		//Activamos la funcionalidad de pre-load
		prtPwmHandler->ptrTIMx->CCMR1 &= ~TIM_CCMR1_OC2PE;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	689b      	ldr	r3, [r3, #8]
 8003b2a:	699a      	ldr	r2, [r3, #24]
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	689b      	ldr	r3, [r3, #8]
 8003b30:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003b34:	619a      	str	r2, [r3, #24]
		prtPwmHandler->ptrTIMx->CCMR1 |= TIM_CCMR1_OC2PE;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	689b      	ldr	r3, [r3, #8]
 8003b3a:	699a      	ldr	r2, [r3, #24]
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	689b      	ldr	r3, [r3, #8]
 8003b40:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003b44:	619a      	str	r2, [r3, #24]
		//Configuracion adicional
		prtPwmHandler->ptrTIMx->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	689b      	ldr	r3, [r3, #8]
 8003b4a:	699a      	ldr	r2, [r3, #24]
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	689b      	ldr	r3, [r3, #8]
 8003b50:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b54:	619a      	str	r2, [r3, #24]
		prtPwmHandler->ptrTIMx->CCMR1 |= TIM_CCMR1_OC2FE;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	689b      	ldr	r3, [r3, #8]
 8003b5a:	699a      	ldr	r2, [r3, #24]
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	689b      	ldr	r3, [r3, #8]
 8003b60:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003b64:	619a      	str	r2, [r3, #24]
		prtPwmHandler->ptrTIMx->CCMR1 &= ~TIM_CCMR1_OC2CE;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	689b      	ldr	r3, [r3, #8]
 8003b6a:	699a      	ldr	r2, [r3, #24]
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	689b      	ldr	r3, [r3, #8]
 8003b70:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003b74:	619a      	str	r2, [r3, #24]

		break;
 8003b76:	e08b      	b.n	8003c90 <pwm_Config+0x2ac>
	}
	//Configuracion del CCMR2_Channel 3
	case PWM_CHANNEL_3:
	{
		//Selecionamos el canal como salida
		prtPwmHandler->ptrTIMx->CCMR2 &= ~TIM_CCMR2_CC3S;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	689b      	ldr	r3, [r3, #8]
 8003b7c:	69da      	ldr	r2, [r3, #28]
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	689b      	ldr	r3, [r3, #8]
 8003b82:	f022 0203 	bic.w	r2, r2, #3
 8003b86:	61da      	str	r2, [r3, #28]
		//configuramos el canal como PWM
		prtPwmHandler->ptrTIMx->CCMR2 &= ~(0b111<<TIM_CCMR2_OC3M_Pos);
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	689b      	ldr	r3, [r3, #8]
 8003b8c:	69da      	ldr	r2, [r3, #28]
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	689b      	ldr	r3, [r3, #8]
 8003b92:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003b96:	61da      	str	r2, [r3, #28]
		prtPwmHandler->ptrTIMx->CCMR2 |= (0b110<<TIM_CCMR2_OC3M_Pos);
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	689b      	ldr	r3, [r3, #8]
 8003b9c:	69da      	ldr	r2, [r3, #28]
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	689b      	ldr	r3, [r3, #8]
 8003ba2:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8003ba6:	61da      	str	r2, [r3, #28]
		//Activamos la funcionalidad de pre-load
		prtPwmHandler->ptrTIMx->CCMR2 &= ~TIM_CCMR2_OC3PE;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	689b      	ldr	r3, [r3, #8]
 8003bac:	69da      	ldr	r2, [r3, #28]
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	689b      	ldr	r3, [r3, #8]
 8003bb2:	f022 0208 	bic.w	r2, r2, #8
 8003bb6:	61da      	str	r2, [r3, #28]
		prtPwmHandler->ptrTIMx->CCMR2 |= TIM_CCMR2_OC3PE;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	689b      	ldr	r3, [r3, #8]
 8003bbc:	69da      	ldr	r2, [r3, #28]
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	689b      	ldr	r3, [r3, #8]
 8003bc2:	f042 0208 	orr.w	r2, r2, #8
 8003bc6:	61da      	str	r2, [r3, #28]
		//Configuracion adicional
		prtPwmHandler->ptrTIMx->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	689b      	ldr	r3, [r3, #8]
 8003bcc:	69da      	ldr	r2, [r3, #28]
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	689b      	ldr	r3, [r3, #8]
 8003bd2:	f022 0204 	bic.w	r2, r2, #4
 8003bd6:	61da      	str	r2, [r3, #28]
		prtPwmHandler->ptrTIMx->CCMR2 |= TIM_CCMR2_OC3FE;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	689b      	ldr	r3, [r3, #8]
 8003bdc:	69da      	ldr	r2, [r3, #28]
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	689b      	ldr	r3, [r3, #8]
 8003be2:	f042 0204 	orr.w	r2, r2, #4
 8003be6:	61da      	str	r2, [r3, #28]
		prtPwmHandler->ptrTIMx->CCMR2 &= ~TIM_CCMR2_OC3CE;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	689b      	ldr	r3, [r3, #8]
 8003bec:	69da      	ldr	r2, [r3, #28]
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	689b      	ldr	r3, [r3, #8]
 8003bf2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003bf6:	61da      	str	r2, [r3, #28]

		break;
 8003bf8:	e04a      	b.n	8003c90 <pwm_Config+0x2ac>
 8003bfa:	bf00      	nop
 8003bfc:	40023800 	.word	0x40023800
 8003c00:	40000400 	.word	0x40000400
 8003c04:	40000800 	.word	0x40000800
 8003c08:	40000c00 	.word	0x40000c00
	}
	//Configuracion del CCMR2_Channel 4
	case PWM_CHANNEL_4:
	{
		//Selecionamos el canal como salida
		prtPwmHandler->ptrTIMx->CCMR2 &= ~TIM_CCMR2_CC4S;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	689b      	ldr	r3, [r3, #8]
 8003c10:	69da      	ldr	r2, [r3, #28]
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	689b      	ldr	r3, [r3, #8]
 8003c16:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003c1a:	61da      	str	r2, [r3, #28]
		//configuramos el canal como PWM
		prtPwmHandler->ptrTIMx->CCMR2 &= ~(0b111<<TIM_CCMR2_OC4M_Pos);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	689b      	ldr	r3, [r3, #8]
 8003c20:	69da      	ldr	r2, [r3, #28]
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	689b      	ldr	r3, [r3, #8]
 8003c26:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8003c2a:	61da      	str	r2, [r3, #28]
		prtPwmHandler->ptrTIMx->CCMR2 |= (0b110<<TIM_CCMR2_OC4M_Pos);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	689b      	ldr	r3, [r3, #8]
 8003c30:	69da      	ldr	r2, [r3, #28]
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	689b      	ldr	r3, [r3, #8]
 8003c36:	f442 42c0 	orr.w	r2, r2, #24576	; 0x6000
 8003c3a:	61da      	str	r2, [r3, #28]
		//Activamos la funcionalidad de pre-load
		prtPwmHandler->ptrTIMx->CCMR2 &= ~TIM_CCMR2_OC4PE;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	689b      	ldr	r3, [r3, #8]
 8003c40:	69da      	ldr	r2, [r3, #28]
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	689b      	ldr	r3, [r3, #8]
 8003c46:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003c4a:	61da      	str	r2, [r3, #28]
		prtPwmHandler->ptrTIMx->CCMR2 |= TIM_CCMR2_OC4PE;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	689b      	ldr	r3, [r3, #8]
 8003c50:	69da      	ldr	r2, [r3, #28]
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	689b      	ldr	r3, [r3, #8]
 8003c56:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003c5a:	61da      	str	r2, [r3, #28]
		//Configuracion adicional
		prtPwmHandler->ptrTIMx->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	689b      	ldr	r3, [r3, #8]
 8003c60:	69da      	ldr	r2, [r3, #28]
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	689b      	ldr	r3, [r3, #8]
 8003c66:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c6a:	61da      	str	r2, [r3, #28]
		prtPwmHandler->ptrTIMx->CCMR2 |= TIM_CCMR2_OC4FE;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	689b      	ldr	r3, [r3, #8]
 8003c70:	69da      	ldr	r2, [r3, #28]
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	689b      	ldr	r3, [r3, #8]
 8003c76:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003c7a:	61da      	str	r2, [r3, #28]
		prtPwmHandler->ptrTIMx->CCMR2 &= ~TIM_CCMR2_OC4CE;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	689b      	ldr	r3, [r3, #8]
 8003c80:	69da      	ldr	r2, [r3, #28]
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	689b      	ldr	r3, [r3, #8]
 8003c86:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003c8a:	61da      	str	r2, [r3, #28]

		break;
 8003c8c:	e000      	b.n	8003c90 <pwm_Config+0x2ac>
	}
	default:
	{
		break;
 8003c8e:	bf00      	nop
	}

	//---------------------------4) Definicion de la polaridad------------------------------------------
	//Registro: CCER

	statusPolarityPWM(prtPwmHandler, prtPwmHandler->config.polarity);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	791b      	ldrb	r3, [r3, #4]
 8003c94:	4619      	mov	r1, r3
 8003c96:	6878      	ldr	r0, [r7, #4]
 8003c98:	f000 f896 	bl	8003dc8 <statusPolarityPWM>

}
 8003c9c:	bf00      	nop
 8003c9e:	3708      	adds	r7, #8
 8003ca0:	46bd      	mov	sp, r7
 8003ca2:	bd80      	pop	{r7, pc}

08003ca4 <statusInOutPWM>:

//Activamos o desactivamos la señal PWM
void statusInOutPWM(PWM_Handler_t *prtPwmHandler, uint8_t status)
{
 8003ca4:	b480      	push	{r7}
 8003ca6:	b083      	sub	sp, #12
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6078      	str	r0, [r7, #4]
 8003cac:	460b      	mov	r3, r1
 8003cae:	70fb      	strb	r3, [r7, #3]
	switch(prtPwmHandler->config.channel)
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	781b      	ldrb	r3, [r3, #0]
 8003cb4:	2b03      	cmp	r3, #3
 8003cb6:	d87f      	bhi.n	8003db8 <statusInOutPWM+0x114>
 8003cb8:	a201      	add	r2, pc, #4	; (adr r2, 8003cc0 <statusInOutPWM+0x1c>)
 8003cba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cbe:	bf00      	nop
 8003cc0:	08003cd1 	.word	0x08003cd1
 8003cc4:	08003d0b 	.word	0x08003d0b
 8003cc8:	08003d45 	.word	0x08003d45
 8003ccc:	08003d7f 	.word	0x08003d7f
	{
	//Activamos el Canal 1
	case PWM_CHANNEL_1:
	{
		if (status==CHANNEL_ENABLE)
 8003cd0:	78fb      	ldrb	r3, [r7, #3]
 8003cd2:	2b01      	cmp	r3, #1
 8003cd4:	d110      	bne.n	8003cf8 <statusInOutPWM+0x54>
		{
			//Activamos el canal 1
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC1E;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	689b      	ldr	r3, [r3, #8]
 8003cda:	6a1a      	ldr	r2, [r3, #32]
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	689b      	ldr	r3, [r3, #8]
 8003ce0:	f022 0201 	bic.w	r2, r2, #1
 8003ce4:	621a      	str	r2, [r3, #32]
			prtPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC1E;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	689b      	ldr	r3, [r3, #8]
 8003cea:	6a1a      	ldr	r2, [r3, #32]
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	689b      	ldr	r3, [r3, #8]
 8003cf0:	f042 0201 	orr.w	r2, r2, #1
 8003cf4:	621a      	str	r2, [r3, #32]
		else
		{
			//Desactivamos el canal 1
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC1E;
		}
		break;
 8003cf6:	e060      	b.n	8003dba <statusInOutPWM+0x116>
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC1E;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	689b      	ldr	r3, [r3, #8]
 8003cfc:	6a1a      	ldr	r2, [r3, #32]
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	689b      	ldr	r3, [r3, #8]
 8003d02:	f022 0201 	bic.w	r2, r2, #1
 8003d06:	621a      	str	r2, [r3, #32]
		break;
 8003d08:	e057      	b.n	8003dba <statusInOutPWM+0x116>
	}
	//Activamos el Canal 2
	case PWM_CHANNEL_2:
	{
		if (status==CHANNEL_ENABLE)
 8003d0a:	78fb      	ldrb	r3, [r7, #3]
 8003d0c:	2b01      	cmp	r3, #1
 8003d0e:	d110      	bne.n	8003d32 <statusInOutPWM+0x8e>
		{
			//Activamos el canal 2
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC2E;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	689b      	ldr	r3, [r3, #8]
 8003d14:	6a1a      	ldr	r2, [r3, #32]
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	689b      	ldr	r3, [r3, #8]
 8003d1a:	f022 0210 	bic.w	r2, r2, #16
 8003d1e:	621a      	str	r2, [r3, #32]
			prtPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC2E;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	689b      	ldr	r3, [r3, #8]
 8003d24:	6a1a      	ldr	r2, [r3, #32]
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	689b      	ldr	r3, [r3, #8]
 8003d2a:	f042 0210 	orr.w	r2, r2, #16
 8003d2e:	621a      	str	r2, [r3, #32]
		else
		{
			//Desactivamos el canal 2
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC2E;
		}
		break;
 8003d30:	e043      	b.n	8003dba <statusInOutPWM+0x116>
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC2E;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	689b      	ldr	r3, [r3, #8]
 8003d36:	6a1a      	ldr	r2, [r3, #32]
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	689b      	ldr	r3, [r3, #8]
 8003d3c:	f022 0210 	bic.w	r2, r2, #16
 8003d40:	621a      	str	r2, [r3, #32]
		break;
 8003d42:	e03a      	b.n	8003dba <statusInOutPWM+0x116>
	}
	//Activamos el Canal 3
	case PWM_CHANNEL_3:
	{
		if (status==CHANNEL_ENABLE)
 8003d44:	78fb      	ldrb	r3, [r7, #3]
 8003d46:	2b01      	cmp	r3, #1
 8003d48:	d110      	bne.n	8003d6c <statusInOutPWM+0xc8>
		{
			//Activamos el canal 3
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC3E;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	689b      	ldr	r3, [r3, #8]
 8003d4e:	6a1a      	ldr	r2, [r3, #32]
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	689b      	ldr	r3, [r3, #8]
 8003d54:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003d58:	621a      	str	r2, [r3, #32]
			prtPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC3E;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	689b      	ldr	r3, [r3, #8]
 8003d5e:	6a1a      	ldr	r2, [r3, #32]
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	689b      	ldr	r3, [r3, #8]
 8003d64:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003d68:	621a      	str	r2, [r3, #32]
		else
		{
			//Desactivamos el canal 3
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC3E;
		}
		break;
 8003d6a:	e026      	b.n	8003dba <statusInOutPWM+0x116>
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC3E;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	689b      	ldr	r3, [r3, #8]
 8003d70:	6a1a      	ldr	r2, [r3, #32]
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	689b      	ldr	r3, [r3, #8]
 8003d76:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003d7a:	621a      	str	r2, [r3, #32]
		break;
 8003d7c:	e01d      	b.n	8003dba <statusInOutPWM+0x116>
	}
	//Activamos el Canal 4
	case PWM_CHANNEL_4:
	{
		if (status==CHANNEL_ENABLE)
 8003d7e:	78fb      	ldrb	r3, [r7, #3]
 8003d80:	2b01      	cmp	r3, #1
 8003d82:	d110      	bne.n	8003da6 <statusInOutPWM+0x102>
		{
			//Activamos el canal 4
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC4E;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	689b      	ldr	r3, [r3, #8]
 8003d88:	6a1a      	ldr	r2, [r3, #32]
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	689b      	ldr	r3, [r3, #8]
 8003d8e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003d92:	621a      	str	r2, [r3, #32]
			prtPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC4E;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	689b      	ldr	r3, [r3, #8]
 8003d98:	6a1a      	ldr	r2, [r3, #32]
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	689b      	ldr	r3, [r3, #8]
 8003d9e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003da2:	621a      	str	r2, [r3, #32]
		else
		{
			//Desactivamos el canal 4
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC4E;
		}
		break;
 8003da4:	e009      	b.n	8003dba <statusInOutPWM+0x116>
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC4E;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	689b      	ldr	r3, [r3, #8]
 8003daa:	6a1a      	ldr	r2, [r3, #32]
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	689b      	ldr	r3, [r3, #8]
 8003db0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003db4:	621a      	str	r2, [r3, #32]
		break;
 8003db6:	e000      	b.n	8003dba <statusInOutPWM+0x116>
	}
	default:
	{
		break;
 8003db8:	bf00      	nop
	}
	}
}
 8003dba:	bf00      	nop
 8003dbc:	370c      	adds	r7, #12
 8003dbe:	46bd      	mov	sp, r7
 8003dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc4:	4770      	bx	lr
 8003dc6:	bf00      	nop

08003dc8 <statusPolarityPWM>:


void statusPolarityPWM(PWM_Handler_t *prtPwmHandler, uint8_t status)
{
 8003dc8:	b480      	push	{r7}
 8003dca:	b083      	sub	sp, #12
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	6078      	str	r0, [r7, #4]
 8003dd0:	460b      	mov	r3, r1
 8003dd2:	70fb      	strb	r3, [r7, #3]
	switch(prtPwmHandler->config.channel)
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	781b      	ldrb	r3, [r3, #0]
 8003dd8:	2b03      	cmp	r3, #3
 8003dda:	d87f      	bhi.n	8003edc <statusPolarityPWM+0x114>
 8003ddc:	a201      	add	r2, pc, #4	; (adr r2, 8003de4 <statusPolarityPWM+0x1c>)
 8003dde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003de2:	bf00      	nop
 8003de4:	08003df5 	.word	0x08003df5
 8003de8:	08003e2f 	.word	0x08003e2f
 8003dec:	08003e69 	.word	0x08003e69
 8003df0:	08003ea3 	.word	0x08003ea3
	{
	//Definimos la polaridad del Canal 1
	case PWM_CHANNEL_1:
	{
		if (status==POLARITY_LOW)
 8003df4:	78fb      	ldrb	r3, [r7, #3]
 8003df6:	2b01      	cmp	r3, #1
 8003df8:	d110      	bne.n	8003e1c <statusPolarityPWM+0x54>
		{
			//Polaridad low del canal 1
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC1P;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	689b      	ldr	r3, [r3, #8]
 8003dfe:	6a1a      	ldr	r2, [r3, #32]
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	689b      	ldr	r3, [r3, #8]
 8003e04:	f022 0202 	bic.w	r2, r2, #2
 8003e08:	621a      	str	r2, [r3, #32]
			prtPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC1P;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	689b      	ldr	r3, [r3, #8]
 8003e0e:	6a1a      	ldr	r2, [r3, #32]
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	689b      	ldr	r3, [r3, #8]
 8003e14:	f042 0202 	orr.w	r2, r2, #2
 8003e18:	621a      	str	r2, [r3, #32]
		else
		{
			//Polaridad high del canal 1
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC1P;
		}
		break;
 8003e1a:	e060      	b.n	8003ede <statusPolarityPWM+0x116>
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC1P;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	689b      	ldr	r3, [r3, #8]
 8003e20:	6a1a      	ldr	r2, [r3, #32]
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	689b      	ldr	r3, [r3, #8]
 8003e26:	f022 0202 	bic.w	r2, r2, #2
 8003e2a:	621a      	str	r2, [r3, #32]
		break;
 8003e2c:	e057      	b.n	8003ede <statusPolarityPWM+0x116>
	}
	//Definimos la polaridad del Canal 2
	case PWM_CHANNEL_2:
	{
		if (status==POLARITY_LOW)
 8003e2e:	78fb      	ldrb	r3, [r7, #3]
 8003e30:	2b01      	cmp	r3, #1
 8003e32:	d110      	bne.n	8003e56 <statusPolarityPWM+0x8e>
		{
			//Polaridad low del canal 2
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC2P;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	689b      	ldr	r3, [r3, #8]
 8003e38:	6a1a      	ldr	r2, [r3, #32]
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	689b      	ldr	r3, [r3, #8]
 8003e3e:	f022 0220 	bic.w	r2, r2, #32
 8003e42:	621a      	str	r2, [r3, #32]
			prtPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC2P;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	689b      	ldr	r3, [r3, #8]
 8003e48:	6a1a      	ldr	r2, [r3, #32]
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	689b      	ldr	r3, [r3, #8]
 8003e4e:	f042 0220 	orr.w	r2, r2, #32
 8003e52:	621a      	str	r2, [r3, #32]
		else
		{
			//Polaridad high del canal 2
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC2P;
		}
		break;
 8003e54:	e043      	b.n	8003ede <statusPolarityPWM+0x116>
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC2P;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	689b      	ldr	r3, [r3, #8]
 8003e5a:	6a1a      	ldr	r2, [r3, #32]
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	689b      	ldr	r3, [r3, #8]
 8003e60:	f022 0220 	bic.w	r2, r2, #32
 8003e64:	621a      	str	r2, [r3, #32]
		break;
 8003e66:	e03a      	b.n	8003ede <statusPolarityPWM+0x116>
	}
	//Definimos la polaridad del Canal 3
	case PWM_CHANNEL_3:
	{
		if (status==POLARITY_LOW)
 8003e68:	78fb      	ldrb	r3, [r7, #3]
 8003e6a:	2b01      	cmp	r3, #1
 8003e6c:	d110      	bne.n	8003e90 <statusPolarityPWM+0xc8>
		{
			//Polaridad low del canal 3
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC3P;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	689b      	ldr	r3, [r3, #8]
 8003e72:	6a1a      	ldr	r2, [r3, #32]
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	689b      	ldr	r3, [r3, #8]
 8003e78:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003e7c:	621a      	str	r2, [r3, #32]
			prtPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC3P;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	689b      	ldr	r3, [r3, #8]
 8003e82:	6a1a      	ldr	r2, [r3, #32]
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	689b      	ldr	r3, [r3, #8]
 8003e88:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e8c:	621a      	str	r2, [r3, #32]
		else
		{
			//Polaridad high del canal 3
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC3P;
		}
		break;
 8003e8e:	e026      	b.n	8003ede <statusPolarityPWM+0x116>
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC3P;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	689b      	ldr	r3, [r3, #8]
 8003e94:	6a1a      	ldr	r2, [r3, #32]
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	689b      	ldr	r3, [r3, #8]
 8003e9a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003e9e:	621a      	str	r2, [r3, #32]
		break;
 8003ea0:	e01d      	b.n	8003ede <statusPolarityPWM+0x116>
	}
	//Definimos la polaridad del Canal 4
	case PWM_CHANNEL_4:
	{
		if (status==POLARITY_LOW)
 8003ea2:	78fb      	ldrb	r3, [r7, #3]
 8003ea4:	2b01      	cmp	r3, #1
 8003ea6:	d110      	bne.n	8003eca <statusPolarityPWM+0x102>
		{
			//Polaridad low del canal 4
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC4P;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	689b      	ldr	r3, [r3, #8]
 8003eac:	6a1a      	ldr	r2, [r3, #32]
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	689b      	ldr	r3, [r3, #8]
 8003eb2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003eb6:	621a      	str	r2, [r3, #32]
			prtPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC4P;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	689b      	ldr	r3, [r3, #8]
 8003ebc:	6a1a      	ldr	r2, [r3, #32]
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	689b      	ldr	r3, [r3, #8]
 8003ec2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003ec6:	621a      	str	r2, [r3, #32]
		else
		{
			//Polaridad high del canal 4
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC4P;
		}
		break;
 8003ec8:	e009      	b.n	8003ede <statusPolarityPWM+0x116>
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC4P;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	689b      	ldr	r3, [r3, #8]
 8003ece:	6a1a      	ldr	r2, [r3, #32]
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	689b      	ldr	r3, [r3, #8]
 8003ed4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003ed8:	621a      	str	r2, [r3, #32]
		break;
 8003eda:	e000      	b.n	8003ede <statusPolarityPWM+0x116>
	}
	default:
	{
		break;
 8003edc:	bf00      	nop
	}
	}

}
 8003ede:	bf00      	nop
 8003ee0:	370c      	adds	r7, #12
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee8:	4770      	bx	lr
 8003eea:	bf00      	nop

08003eec <setDuttyCycle>:

//Configuracion del DuttyCicle
void setDuttyCycle(PWM_Handler_t *prtPwmHandler)
{
 8003eec:	b480      	push	{r7}
 8003eee:	b083      	sub	sp, #12
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	6078      	str	r0, [r7, #4]
	//Selecionamos el canal para configurar el dutty
	switch(prtPwmHandler->config.channel)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	781b      	ldrb	r3, [r3, #0]
 8003ef8:	2b03      	cmp	r3, #3
 8003efa:	d823      	bhi.n	8003f44 <setDuttyCycle+0x58>
 8003efc:	a201      	add	r2, pc, #4	; (adr r2, 8003f04 <setDuttyCycle+0x18>)
 8003efe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f02:	bf00      	nop
 8003f04:	08003f15 	.word	0x08003f15
 8003f08:	08003f21 	.word	0x08003f21
 8003f0c:	08003f2d 	.word	0x08003f2d
 8003f10:	08003f39 	.word	0x08003f39
	{

	case PWM_CHANNEL_1:
	{
		prtPwmHandler->ptrTIMx->CCR1 = prtPwmHandler->config.duttyCicle;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	885a      	ldrh	r2, [r3, #2]
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	689b      	ldr	r3, [r3, #8]
 8003f1c:	635a      	str	r2, [r3, #52]	; 0x34
		break;
 8003f1e:	e012      	b.n	8003f46 <setDuttyCycle+0x5a>
	}
	case PWM_CHANNEL_2:
	{
		prtPwmHandler->ptrTIMx->CCR2 = prtPwmHandler->config.duttyCicle;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	885a      	ldrh	r2, [r3, #2]
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	689b      	ldr	r3, [r3, #8]
 8003f28:	639a      	str	r2, [r3, #56]	; 0x38
		break;
 8003f2a:	e00c      	b.n	8003f46 <setDuttyCycle+0x5a>
	}
	case PWM_CHANNEL_3:
	{
		prtPwmHandler->ptrTIMx->CCR3 = prtPwmHandler->config.duttyCicle;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	885a      	ldrh	r2, [r3, #2]
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	689b      	ldr	r3, [r3, #8]
 8003f34:	63da      	str	r2, [r3, #60]	; 0x3c
		break;
 8003f36:	e006      	b.n	8003f46 <setDuttyCycle+0x5a>
	}
	case PWM_CHANNEL_4:
	{
		prtPwmHandler->ptrTIMx->CCR4 = prtPwmHandler->config.duttyCicle;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	885a      	ldrh	r2, [r3, #2]
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	689b      	ldr	r3, [r3, #8]
 8003f40:	641a      	str	r2, [r3, #64]	; 0x40
		break;
 8003f42:	e000      	b.n	8003f46 <setDuttyCycle+0x5a>
	}
	default:
	{
		break;
 8003f44:	bf00      	nop
	}
	}

}
 8003f46:	bf00      	nop
 8003f48:	370c      	adds	r7, #12
 8003f4a:	46bd      	mov	sp, r7
 8003f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f50:	4770      	bx	lr
 8003f52:	bf00      	nop

08003f54 <updateDuttyCyclePercentageFloat>:
	setDuttyCycle(prtPwmHandler);
}

//Actualizacion del Dutty con porcentaje decimal
void updateDuttyCyclePercentageFloat(PWM_Handler_t *prtPwmHandler, float newDuttyPercentage)
{
 8003f54:	b580      	push	{r7, lr}
 8003f56:	b082      	sub	sp, #8
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	6078      	str	r0, [r7, #4]
 8003f5c:	ed87 0a00 	vstr	s0, [r7]
	//Establecemos el nuevo valor del duttycicle en la configuracion del PWM
	prtPwmHandler->config.duttyCicle = (uint16_t) ((prtPwmHandler->ptrTIMx->ARR)/100)*(newDuttyPercentage);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	689b      	ldr	r3, [r3, #8]
 8003f64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f66:	4a0d      	ldr	r2, [pc, #52]	; (8003f9c <updateDuttyCyclePercentageFloat+0x48>)
 8003f68:	fba2 2303 	umull	r2, r3, r2, r3
 8003f6c:	095b      	lsrs	r3, r3, #5
 8003f6e:	b29b      	uxth	r3, r3
 8003f70:	ee07 3a90 	vmov	s15, r3
 8003f74:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003f78:	edd7 7a00 	vldr	s15, [r7]
 8003f7c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f80:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003f84:	ee17 3a90 	vmov	r3, s15
 8003f88:	b29a      	uxth	r2, r3
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	805a      	strh	r2, [r3, #2]
	//Cargamos la nueva configuracion
	setDuttyCycle(prtPwmHandler);
 8003f8e:	6878      	ldr	r0, [r7, #4]
 8003f90:	f7ff ffac 	bl	8003eec <setDuttyCycle>
}
 8003f94:	bf00      	nop
 8003f96:	3708      	adds	r7, #8
 8003f98:	46bd      	mov	sp, r7
 8003f9a:	bd80      	pop	{r7, pc}
 8003f9c:	51eb851f 	.word	0x51eb851f

08003fa0 <__NVIC_EnableIRQ>:
{
 8003fa0:	b480      	push	{r7}
 8003fa2:	b083      	sub	sp, #12
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	4603      	mov	r3, r0
 8003fa8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003faa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	db0b      	blt.n	8003fca <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003fb2:	79fb      	ldrb	r3, [r7, #7]
 8003fb4:	f003 021f 	and.w	r2, r3, #31
 8003fb8:	4907      	ldr	r1, [pc, #28]	; (8003fd8 <__NVIC_EnableIRQ+0x38>)
 8003fba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003fbe:	095b      	lsrs	r3, r3, #5
 8003fc0:	2001      	movs	r0, #1
 8003fc2:	fa00 f202 	lsl.w	r2, r0, r2
 8003fc6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003fca:	bf00      	nop
 8003fcc:	370c      	adds	r7, #12
 8003fce:	46bd      	mov	sp, r7
 8003fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd4:	4770      	bx	lr
 8003fd6:	bf00      	nop
 8003fd8:	e000e100 	.word	0xe000e100

08003fdc <config_SysTick_us>:
 * funcion en el vector de interrupciones
 */

//Funcion para la configurar del Systick
void config_SysTick_us(void)
{
 8003fdc:	b580      	push	{r7, lr}
 8003fde:	b082      	sub	sp, #8
 8003fe0:	af00      	add	r7, sp, #0
	//Reiniciamos el valor de la variable que cuenta el tiempo
	ticks = 0;
 8003fe2:	4917      	ldr	r1, [pc, #92]	; (8004040 <config_SysTick_us+0x64>)
 8003fe4:	f04f 0200 	mov.w	r2, #0
 8003fe8:	f04f 0300 	mov.w	r3, #0
 8003fec:	e9c1 2300 	strd	r2, r3, [r1]

	/*Cargamos el valor del limite de incrementos que representa 1us
	 * Depende de la señal de reloj interno del MCU
	 */

	uint8_t clock = getConfigPLL();  	     //Obtenemos la velocidad de reloj del sistema
 8003ff0:	f7ff fc48 	bl	8003884 <getConfigPLL>
 8003ff4:	4603      	mov	r3, r0
 8003ff6:	71fb      	strb	r3, [r7, #7]
	SysTick->LOAD = clock;                  //Cargamos el valor correspondiente a 1 us
 8003ff8:	4a12      	ldr	r2, [pc, #72]	; (8004044 <config_SysTick_us+0x68>)
 8003ffa:	79fb      	ldrb	r3, [r7, #7]
 8003ffc:	6053      	str	r3, [r2, #4]

	//Limpiamos el valor actual del Systick
	SysTick->VAL = 0;
 8003ffe:	4b11      	ldr	r3, [pc, #68]	; (8004044 <config_SysTick_us+0x68>)
 8004000:	2200      	movs	r2, #0
 8004002:	609a      	str	r2, [r3, #8]

	//Configuramos el relog interno como el reloj para el timer
	SysTick->CTRL |= SysTick_CTRL_CLKSOURCE_Msk;
 8004004:	4b0f      	ldr	r3, [pc, #60]	; (8004044 <config_SysTick_us+0x68>)
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	4a0e      	ldr	r2, [pc, #56]	; (8004044 <config_SysTick_us+0x68>)
 800400a:	f043 0304 	orr.w	r3, r3, #4
 800400e:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004010:	b672      	cpsid	i
}
 8004012:	bf00      	nop
	//Desactivamos las interrupciones globales

	__disable_irq();

	//Matriculamos la interrupcion en el NVIC
	NVIC_EnableIRQ(SysTick_IRQn);
 8004014:	f04f 30ff 	mov.w	r0, #4294967295
 8004018:	f7ff ffc2 	bl	8003fa0 <__NVIC_EnableIRQ>
	//Activamos la interrupcion debido al conteo a cero del SysTick
	SysTick->CTRL |= SysTick_CTRL_TICKINT_Msk;
 800401c:	4b09      	ldr	r3, [pc, #36]	; (8004044 <config_SysTick_us+0x68>)
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	4a08      	ldr	r2, [pc, #32]	; (8004044 <config_SysTick_us+0x68>)
 8004022:	f043 0302 	orr.w	r3, r3, #2
 8004026:	6013      	str	r3, [r2, #0]
	//Actimos el timer
	SysTick->CTRL |= SysTick_CTRL_ENABLE_Msk;
 8004028:	4b06      	ldr	r3, [pc, #24]	; (8004044 <config_SysTick_us+0x68>)
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	4a05      	ldr	r2, [pc, #20]	; (8004044 <config_SysTick_us+0x68>)
 800402e:	f043 0301 	orr.w	r3, r3, #1
 8004032:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8004034:	b662      	cpsie	i
}
 8004036:	bf00      	nop
	//Activamos las interrupciones globales
	__enable_irq();

}
 8004038:	bf00      	nop
 800403a:	3708      	adds	r7, #8
 800403c:	46bd      	mov	sp, r7
 800403e:	bd80      	pop	{r7, pc}
 8004040:	200003f8 	.word	0x200003f8
 8004044:	e000e010 	.word	0xe000e010

08004048 <getTicksUs>:

//Funcion que retorna el tiempo en ms transcurrido desde que que inicio el SysTick
uint64_t getTicksUs(void)
{
 8004048:	b480      	push	{r7}
 800404a:	af00      	add	r7, sp, #0
	return ticks;
 800404c:	4b04      	ldr	r3, [pc, #16]	; (8004060 <getTicksUs+0x18>)
 800404e:	e9d3 2300 	ldrd	r2, r3, [r3]
}
 8004052:	4610      	mov	r0, r2
 8004054:	4619      	mov	r1, r3
 8004056:	46bd      	mov	sp, r7
 8004058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800405c:	4770      	bx	lr
 800405e:	bf00      	nop
 8004060:	200003f8 	.word	0x200003f8

08004064 <SysTick_Handler>:

/* Cuando se produce una interrupcion en el NVIC debido SysTick, apuntara a esta
 * funcion en el vector de interrupciones
 */
void SysTick_Handler(void)
{
 8004064:	b480      	push	{r7}
 8004066:	af00      	add	r7, sp, #0
	//Verificamos que la interrupcion se lance
	if(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)
 8004068:	4b0c      	ldr	r3, [pc, #48]	; (800409c <SysTick_Handler+0x38>)
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004070:	2b00      	cmp	r3, #0
 8004072:	d00e      	beq.n	8004092 <SysTick_Handler+0x2e>
	{
		//Limpiamos la bandera
		SysTick->CTRL &= ~ SysTick_CTRL_COUNTFLAG_Msk;
 8004074:	4b09      	ldr	r3, [pc, #36]	; (800409c <SysTick_Handler+0x38>)
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	4a08      	ldr	r2, [pc, #32]	; (800409c <SysTick_Handler+0x38>)
 800407a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800407e:	6013      	str	r3, [r2, #0]

		//Incrementamos en 1 el contador
		ticks++;
 8004080:	4b07      	ldr	r3, [pc, #28]	; (80040a0 <SysTick_Handler+0x3c>)
 8004082:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004086:	1c50      	adds	r0, r2, #1
 8004088:	f143 0100 	adc.w	r1, r3, #0
 800408c:	4b04      	ldr	r3, [pc, #16]	; (80040a0 <SysTick_Handler+0x3c>)
 800408e:	e9c3 0100 	strd	r0, r1, [r3]
	}
}
 8004092:	bf00      	nop
 8004094:	46bd      	mov	sp, r7
 8004096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409a:	4770      	bx	lr
 800409c:	e000e010 	.word	0xe000e010
 80040a0:	200003f8 	.word	0x200003f8

080040a4 <__NVIC_EnableIRQ>:
{
 80040a4:	b480      	push	{r7}
 80040a6:	b083      	sub	sp, #12
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	4603      	mov	r3, r0
 80040ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80040ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	db0b      	blt.n	80040ce <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80040b6:	79fb      	ldrb	r3, [r7, #7]
 80040b8:	f003 021f 	and.w	r2, r3, #31
 80040bc:	4907      	ldr	r1, [pc, #28]	; (80040dc <__NVIC_EnableIRQ+0x38>)
 80040be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040c2:	095b      	lsrs	r3, r3, #5
 80040c4:	2001      	movs	r0, #1
 80040c6:	fa00 f202 	lsl.w	r2, r0, r2
 80040ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80040ce:	bf00      	nop
 80040d0:	370c      	adds	r7, #12
 80040d2:	46bd      	mov	sp, r7
 80040d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d8:	4770      	bx	lr
 80040da:	bf00      	nop
 80040dc:	e000e100 	.word	0xe000e100

080040e0 <USART_Config>:
uint8_t posChar = 0;                                 //Variable para recorrer el String
uint8_t typeWriteTXE = 0;                            //Variable que selecciona el tipo entre string y caracter

//Funcion para cargar la configuracion del periferico USART
void USART_Config(USART_Handler_t *ptrUsartHandler)
{
 80040e0:	b580      	push	{r7, lr}
 80040e2:	b084      	sub	sp, #16
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	6078      	str	r0, [r7, #4]
	//---------------------------------1) Activamos el periferico------------------------------------------
	//Registro: APB1ENR
	//Registro: APB2ENR

	if(ptrUsartHandler->ptrUSARTx == USART1)
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	689b      	ldr	r3, [r3, #8]
 80040ec:	4a8f      	ldr	r2, [pc, #572]	; (800432c <USART_Config+0x24c>)
 80040ee:	4293      	cmp	r3, r2
 80040f0:	d107      	bne.n	8004102 <USART_Config+0x22>
	{
		/*Activamos el periferico escribiendo un 1 deacuerdo a la posicion
		 * del periferico en el registro*/
		RCC->APB2ENR = RCC_APB2ENR_USART1EN;
 80040f2:	4b8f      	ldr	r3, [pc, #572]	; (8004330 <USART_Config+0x250>)
 80040f4:	2210      	movs	r2, #16
 80040f6:	645a      	str	r2, [r3, #68]	; 0x44
		//Guardamos una referencia al periferico que estamos utilizando
		ptrUSART1Used = ptrUsartHandler->ptrUSARTx;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	689b      	ldr	r3, [r3, #8]
 80040fc:	4a8d      	ldr	r2, [pc, #564]	; (8004334 <USART_Config+0x254>)
 80040fe:	6013      	str	r3, [r2, #0]
 8004100:	e019      	b.n	8004136 <USART_Config+0x56>
	}

	else if(ptrUsartHandler->ptrUSARTx == USART2)
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	689b      	ldr	r3, [r3, #8]
 8004106:	4a8c      	ldr	r2, [pc, #560]	; (8004338 <USART_Config+0x258>)
 8004108:	4293      	cmp	r3, r2
 800410a:	d108      	bne.n	800411e <USART_Config+0x3e>
	{
		/*Activamos el periferico escribiendo un 1 deacuerdo a la posicion
		 * del periferico en el registro*/
		RCC->APB1ENR = RCC_APB1ENR_USART2EN;
 800410c:	4b88      	ldr	r3, [pc, #544]	; (8004330 <USART_Config+0x250>)
 800410e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004112:	641a      	str	r2, [r3, #64]	; 0x40
		//Guardamos una referencia al periferico que estamos utilizando
		ptrUSART2Used = ptrUsartHandler->ptrUSARTx;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	689b      	ldr	r3, [r3, #8]
 8004118:	4a88      	ldr	r2, [pc, #544]	; (800433c <USART_Config+0x25c>)
 800411a:	6013      	str	r3, [r2, #0]
 800411c:	e00b      	b.n	8004136 <USART_Config+0x56>
	}

	else if(ptrUsartHandler->ptrUSARTx == USART6)
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	689b      	ldr	r3, [r3, #8]
 8004122:	4a87      	ldr	r2, [pc, #540]	; (8004340 <USART_Config+0x260>)
 8004124:	4293      	cmp	r3, r2
 8004126:	d106      	bne.n	8004136 <USART_Config+0x56>
	{
		/*Activamos el periferico escribiendo un 1 deacuerdo a la posicion
		 * del periferico en el registro*/
		RCC->APB2ENR = RCC_APB2ENR_USART6EN;
 8004128:	4b81      	ldr	r3, [pc, #516]	; (8004330 <USART_Config+0x250>)
 800412a:	2220      	movs	r2, #32
 800412c:	645a      	str	r2, [r3, #68]	; 0x44
		//Guardamos una referencia al periferico que estamos utilizando
		ptrUSART6Used = ptrUsartHandler->ptrUSARTx;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	689b      	ldr	r3, [r3, #8]
 8004132:	4a84      	ldr	r2, [pc, #528]	; (8004344 <USART_Config+0x264>)
 8004134:	6013      	str	r3, [r2, #0]

	//-------------------------------2) Limpieza de registros ------------------------------------------
	//Registro: CR1
	//Registro: CR2

	ptrUsartHandler->ptrUSARTx->CR1 = 0;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	689b      	ldr	r3, [r3, #8]
 800413a:	2200      	movs	r2, #0
 800413c:	60da      	str	r2, [r3, #12]
	ptrUsartHandler->ptrUSARTx->CR2 = 0;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	689b      	ldr	r3, [r3, #8]
 8004142:	2200      	movs	r2, #0
 8004144:	611a      	str	r2, [r3, #16]

	//-------------------------3) Configuracion del parity y tamaño de dato ------------------------------
	//Registro: CR1

	//Verificamos si la paridad esta activada
	if(ptrUsartHandler->USART_Config.USART_parity != USART_PARITY_NONE)
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	789b      	ldrb	r3, [r3, #2]
 800414a:	2b00      	cmp	r3, #0
 800414c:	d03d      	beq.n	80041ca <USART_Config+0xea>
	{
		//Activamos Parity control Enable PCE
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_PCE;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	689b      	ldr	r3, [r3, #8]
 8004152:	68da      	ldr	r2, [r3, #12]
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	689b      	ldr	r3, [r3, #8]
 8004158:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800415c:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_PCE;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	689b      	ldr	r3, [r3, #8]
 8004162:	68da      	ldr	r2, [r3, #12]
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	689b      	ldr	r3, [r3, #8]
 8004168:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800416c:	60da      	str	r2, [r3, #12]

		//Definimos un tamaño de datos de 9 bits M = 1
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_M;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	689b      	ldr	r3, [r3, #8]
 8004172:	68da      	ldr	r2, [r3, #12]
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	689b      	ldr	r3, [r3, #8]
 8004178:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800417c:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_M;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	689b      	ldr	r3, [r3, #8]
 8004182:	68da      	ldr	r2, [r3, #12]
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	689b      	ldr	r3, [r3, #8]
 8004188:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800418c:	60da      	str	r2, [r3, #12]

		//Verificamos si se selecciona ODD o EVEN
		if(ptrUsartHandler->USART_Config.USART_parity == USART_PARITY_ODD)
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	789b      	ldrb	r3, [r3, #2]
 8004192:	2b01      	cmp	r3, #1
 8004194:	d110      	bne.n	80041b8 <USART_Config+0xd8>
		{
			ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_PS;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	689b      	ldr	r3, [r3, #8]
 800419a:	68da      	ldr	r2, [r3, #12]
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	689b      	ldr	r3, [r3, #8]
 80041a0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80041a4:	60da      	str	r2, [r3, #12]
			ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_PS;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	689b      	ldr	r3, [r3, #8]
 80041aa:	68da      	ldr	r2, [r3, #12]
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	689b      	ldr	r3, [r3, #8]
 80041b0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80041b4:	60da      	str	r2, [r3, #12]
 80041b6:	e018      	b.n	80041ea <USART_Config+0x10a>
		}
		else
		{
			ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_PS;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	689b      	ldr	r3, [r3, #8]
 80041bc:	68da      	ldr	r2, [r3, #12]
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	689b      	ldr	r3, [r3, #8]
 80041c2:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80041c6:	60da      	str	r2, [r3, #12]
 80041c8:	e00f      	b.n	80041ea <USART_Config+0x10a>

	}
	else
	{
		//Desactivamos la Parity control Enable PCE
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_PCE;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	689b      	ldr	r3, [r3, #8]
 80041ce:	68da      	ldr	r2, [r3, #12]
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	689b      	ldr	r3, [r3, #8]
 80041d4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80041d8:	60da      	str	r2, [r3, #12]
		//Definimos un tamaño de datos de 8 bits M = 0
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_M;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	689b      	ldr	r3, [r3, #8]
 80041de:	68da      	ldr	r2, [r3, #12]
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	689b      	ldr	r3, [r3, #8]
 80041e4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80041e8:	60da      	str	r2, [r3, #12]

	//--------------------------------4) Configuracion del Stop bits--------------------------------------
	//Registro: CR2

	//Se verifica que stop bits se selecciono
	switch(ptrUsartHandler->USART_Config.USART_stopbits)
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	78db      	ldrb	r3, [r3, #3]
 80041ee:	2b03      	cmp	r3, #3
 80041f0:	d84c      	bhi.n	800428c <USART_Config+0x1ac>
 80041f2:	a201      	add	r2, pc, #4	; (adr r2, 80041f8 <USART_Config+0x118>)
 80041f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041f8:	08004209 	.word	0x08004209
 80041fc:	08004227 	.word	0x08004227
 8004200:	08004249 	.word	0x08004249
 8004204:	0800426b 	.word	0x0800426b
	{
	//Para el 1 Stop bit se escribe 00
	case USART_STOPBIT_1:
	{
		ptrUsartHandler->ptrUSARTx->CR2 &= ~(0b11<<USART_CR2_STOP_Pos);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	689b      	ldr	r3, [r3, #8]
 800420c:	691a      	ldr	r2, [r3, #16]
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	689b      	ldr	r3, [r3, #8]
 8004212:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8004216:	611a      	str	r2, [r3, #16]
		ptrUsartHandler->ptrUSARTx->CR2 |= (0b00<<USART_CR2_STOP_Pos);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	689a      	ldr	r2, [r3, #8]
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	689b      	ldr	r3, [r3, #8]
 8004220:	6912      	ldr	r2, [r2, #16]
 8004222:	611a      	str	r2, [r3, #16]
		break;
 8004224:	e041      	b.n	80042aa <USART_Config+0x1ca>
	}
	//Para el 0.5 Stop bit se escribe 01
	case USART_STOPBIT_0_5:
	{
		ptrUsartHandler->ptrUSARTx->CR2 &= ~(0b11<<USART_CR2_STOP_Pos);
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	689b      	ldr	r3, [r3, #8]
 800422a:	691a      	ldr	r2, [r3, #16]
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	689b      	ldr	r3, [r3, #8]
 8004230:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8004234:	611a      	str	r2, [r3, #16]
		ptrUsartHandler->ptrUSARTx->CR2 |= (0b01<<USART_CR2_STOP_Pos);
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	689b      	ldr	r3, [r3, #8]
 800423a:	691a      	ldr	r2, [r3, #16]
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	689b      	ldr	r3, [r3, #8]
 8004240:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004244:	611a      	str	r2, [r3, #16]
		break;
 8004246:	e030      	b.n	80042aa <USART_Config+0x1ca>
	}
	//Para el 2 Stop bit se escribe 10
	case USART_STOPBIT_2:
	{
		ptrUsartHandler->ptrUSARTx->CR2 &= ~(0b11<<USART_CR2_STOP_Pos);
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	689b      	ldr	r3, [r3, #8]
 800424c:	691a      	ldr	r2, [r3, #16]
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	689b      	ldr	r3, [r3, #8]
 8004252:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8004256:	611a      	str	r2, [r3, #16]
		ptrUsartHandler->ptrUSARTx->CR2 |= (0b10<<USART_CR2_STOP_Pos);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	689b      	ldr	r3, [r3, #8]
 800425c:	691a      	ldr	r2, [r3, #16]
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	689b      	ldr	r3, [r3, #8]
 8004262:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004266:	611a      	str	r2, [r3, #16]
		break;
 8004268:	e01f      	b.n	80042aa <USART_Config+0x1ca>
	}
	//Para el 1.5 Stop bit se escribe 11
	case USART_STOPBIT_1_5:
	{
		ptrUsartHandler->ptrUSARTx->CR2 &= ~(0b11<<USART_CR2_STOP_Pos);
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	689b      	ldr	r3, [r3, #8]
 800426e:	691a      	ldr	r2, [r3, #16]
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	689b      	ldr	r3, [r3, #8]
 8004274:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8004278:	611a      	str	r2, [r3, #16]
		ptrUsartHandler->ptrUSARTx->CR2 |= (0b11<<USART_CR2_STOP_Pos);
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	689b      	ldr	r3, [r3, #8]
 800427e:	691a      	ldr	r2, [r3, #16]
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	689b      	ldr	r3, [r3, #8]
 8004284:	f442 5240 	orr.w	r2, r2, #12288	; 0x3000
 8004288:	611a      	str	r2, [r3, #16]
		break;
 800428a:	e00e      	b.n	80042aa <USART_Config+0x1ca>
	}
	//En caso por defecto selsccionamos un bit de paraba
	default:
	{
		ptrUsartHandler->ptrUSARTx->CR2 &= ~(0b11<<USART_CR2_STOP_Pos);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	689b      	ldr	r3, [r3, #8]
 8004290:	691a      	ldr	r2, [r3, #16]
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	689b      	ldr	r3, [r3, #8]
 8004296:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 800429a:	611a      	str	r2, [r3, #16]
		ptrUsartHandler->ptrUSARTx->CR2 |= (0b00<<USART_CR2_STOP_Pos);
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	689a      	ldr	r2, [r3, #8]
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	689b      	ldr	r3, [r3, #8]
 80042a4:	6912      	ldr	r2, [r2, #16]
 80042a6:	611a      	str	r2, [r3, #16]
		break;
 80042a8:	bf00      	nop
	}

	//-------------------5) Configuracion del Baudrate(Velocidad de Trans o Rec)-------------------------
	//Registro: BRR       //Numero de 32 bits

	uint8_t clock = 0;
 80042aa:	2300      	movs	r3, #0
 80042ac:	73fb      	strb	r3, [r7, #15]

	if(ptrUsartHandler->ptrUSARTx == USART2)
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	689b      	ldr	r3, [r3, #8]
 80042b2:	4a21      	ldr	r2, [pc, #132]	; (8004338 <USART_Config+0x258>)
 80042b4:	4293      	cmp	r3, r2
 80042b6:	d104      	bne.n	80042c2 <USART_Config+0x1e2>
	{
		clock = getClockAPB1();          //Guardamos la velocidad de reloj entregada al bus APB1
 80042b8:	f7ff fb00 	bl	80038bc <getClockAPB1>
 80042bc:	4603      	mov	r3, r0
 80042be:	73fb      	strb	r3, [r7, #15]
 80042c0:	e003      	b.n	80042ca <USART_Config+0x1ea>
	}
	else
	{
		clock = getConfigPLL();	         //Guardamos la velocidad de reloj del sistema
 80042c2:	f7ff fadf 	bl	8003884 <getConfigPLL>
 80042c6:	4603      	mov	r3, r0
 80042c8:	73fb      	strb	r3, [r7, #15]
	}

	//Verificamos el Baud Rate selecionado
	if(ptrUsartHandler->USART_Config.USART_baudrate == USART_BAUDRATE_9600)
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	785b      	ldrb	r3, [r3, #1]
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d10b      	bne.n	80042ea <USART_Config+0x20a>
	{
		//Se carga el valor de la velocidad en el registro
		ptrUsartHandler->ptrUSARTx->BRR = getValueBaudRate(clock, 9600);
 80042d2:	7bfb      	ldrb	r3, [r7, #15]
 80042d4:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 80042d8:	4618      	mov	r0, r3
 80042da:	f000 f91f 	bl	800451c <getValueBaudRate>
 80042de:	4603      	mov	r3, r0
 80042e0:	461a      	mov	r2, r3
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	689b      	ldr	r3, [r3, #8]
 80042e6:	609a      	str	r2, [r3, #8]
 80042e8:	e02f      	b.n	800434a <USART_Config+0x26a>
	}
	else if(ptrUsartHandler->USART_Config.USART_baudrate == USART_BAUDRATE_19200)
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	785b      	ldrb	r3, [r3, #1]
 80042ee:	2b01      	cmp	r3, #1
 80042f0:	d10b      	bne.n	800430a <USART_Config+0x22a>
	{
		//Se carga el valor de la velocidad en el registro
		ptrUsartHandler->ptrUSARTx->BRR = getValueBaudRate(clock, 19200);
 80042f2:	7bfb      	ldrb	r3, [r7, #15]
 80042f4:	f44f 4196 	mov.w	r1, #19200	; 0x4b00
 80042f8:	4618      	mov	r0, r3
 80042fa:	f000 f90f 	bl	800451c <getValueBaudRate>
 80042fe:	4603      	mov	r3, r0
 8004300:	461a      	mov	r2, r3
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	689b      	ldr	r3, [r3, #8]
 8004306:	609a      	str	r2, [r3, #8]
 8004308:	e01f      	b.n	800434a <USART_Config+0x26a>
	}
	else if(ptrUsartHandler->USART_Config.USART_baudrate == USART_BAUDRATE_115200)
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	785b      	ldrb	r3, [r3, #1]
 800430e:	2b02      	cmp	r3, #2
 8004310:	d11a      	bne.n	8004348 <USART_Config+0x268>
		{
		//Se carga el valor de la velocidad en el registro
		ptrUsartHandler->ptrUSARTx->BRR = getValueBaudRate(clock, 115200);
 8004312:	7bfb      	ldrb	r3, [r7, #15]
 8004314:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 8004318:	4618      	mov	r0, r3
 800431a:	f000 f8ff 	bl	800451c <getValueBaudRate>
 800431e:	4603      	mov	r3, r0
 8004320:	461a      	mov	r2, r3
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	689b      	ldr	r3, [r3, #8]
 8004326:	609a      	str	r2, [r3, #8]
 8004328:	e00f      	b.n	800434a <USART_Config+0x26a>
 800432a:	bf00      	nop
 800432c:	40011000 	.word	0x40011000
 8004330:	40023800 	.word	0x40023800
 8004334:	20000400 	.word	0x20000400
 8004338:	40004400 	.word	0x40004400
 800433c:	20000404 	.word	0x20000404
 8004340:	40011400 	.word	0x40011400
 8004344:	20000408 	.word	0x20000408
	}
	else
	{
		__NOP();
 8004348:	bf00      	nop
	//-------------------6) Configuramos el MODO-------------------------
	//Registro: CR1

	//MODOS: TX only, RX only, RXTX, disable

	switch(ptrUsartHandler->USART_Config.USART_mode)
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	781b      	ldrb	r3, [r3, #0]
 800434e:	2b03      	cmp	r3, #3
 8004350:	d866      	bhi.n	8004420 <USART_Config+0x340>
 8004352:	a201      	add	r2, pc, #4	; (adr r2, 8004358 <USART_Config+0x278>)
 8004354:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004358:	08004369 	.word	0x08004369
 800435c:	0800438b 	.word	0x0800438b
 8004360:	080043ad 	.word	0x080043ad
 8004364:	080043ef 	.word	0x080043ef
	{
	//Activamos la parte del sistema encargada de enviar
	case USART_MODE_TX :
	{
		//Activamos el Baud rate clock para la transmision
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_TE;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	689b      	ldr	r3, [r3, #8]
 800436c:	68da      	ldr	r2, [r3, #12]
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	689b      	ldr	r3, [r3, #8]
 8004372:	f022 0208 	bic.w	r2, r2, #8
 8004376:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_TE;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	689b      	ldr	r3, [r3, #8]
 800437c:	68da      	ldr	r2, [r3, #12]
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	689b      	ldr	r3, [r3, #8]
 8004382:	f042 0208 	orr.w	r2, r2, #8
 8004386:	60da      	str	r2, [r3, #12]

		break;
 8004388:	e063      	b.n	8004452 <USART_Config+0x372>
	}
	//Activamos la parte del sistema encargada de recibir
	case USART_MODE_RX:
	{
		//Activamos el Baud rate clock para la recepcion
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_RE;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	689b      	ldr	r3, [r3, #8]
 800438e:	68da      	ldr	r2, [r3, #12]
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	689b      	ldr	r3, [r3, #8]
 8004394:	f022 0204 	bic.w	r2, r2, #4
 8004398:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_RE;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	689b      	ldr	r3, [r3, #8]
 800439e:	68da      	ldr	r2, [r3, #12]
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	689b      	ldr	r3, [r3, #8]
 80043a4:	f042 0204 	orr.w	r2, r2, #4
 80043a8:	60da      	str	r2, [r3, #12]

		break;
 80043aa:	e052      	b.n	8004452 <USART_Config+0x372>
	}
	//Activamos ambas  parte del sistema encargadas de enviar y recibir
	case USART_MODE_RXTX:
	{
		//Activamos el Baud rate clock para la transmision
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_TE;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	689b      	ldr	r3, [r3, #8]
 80043b0:	68da      	ldr	r2, [r3, #12]
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	689b      	ldr	r3, [r3, #8]
 80043b6:	f022 0208 	bic.w	r2, r2, #8
 80043ba:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_TE;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	689b      	ldr	r3, [r3, #8]
 80043c0:	68da      	ldr	r2, [r3, #12]
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	689b      	ldr	r3, [r3, #8]
 80043c6:	f042 0208 	orr.w	r2, r2, #8
 80043ca:	60da      	str	r2, [r3, #12]
		//Activamos el Baud rate clock para la recepcion
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_RE;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	689b      	ldr	r3, [r3, #8]
 80043d0:	68da      	ldr	r2, [r3, #12]
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	689b      	ldr	r3, [r3, #8]
 80043d6:	f022 0204 	bic.w	r2, r2, #4
 80043da:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_RE;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	689b      	ldr	r3, [r3, #8]
 80043e0:	68da      	ldr	r2, [r3, #12]
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	689b      	ldr	r3, [r3, #8]
 80043e6:	f042 0204 	orr.w	r2, r2, #4
 80043ea:	60da      	str	r2, [r3, #12]


		break;
 80043ec:	e031      	b.n	8004452 <USART_Config+0x372>
	}
	//Desativamos ambos canales
	case USART_MODE_DISABLE:
	{
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_UE;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	689b      	ldr	r3, [r3, #8]
 80043f2:	68da      	ldr	r2, [r3, #12]
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	689b      	ldr	r3, [r3, #8]
 80043f8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80043fc:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_TE;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	689b      	ldr	r3, [r3, #8]
 8004402:	68da      	ldr	r2, [r3, #12]
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	689b      	ldr	r3, [r3, #8]
 8004408:	f022 0208 	bic.w	r2, r2, #8
 800440c:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_RE;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	689b      	ldr	r3, [r3, #8]
 8004412:	68da      	ldr	r2, [r3, #12]
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	689b      	ldr	r3, [r3, #8]
 8004418:	f022 0204 	bic.w	r2, r2, #4
 800441c:	60da      	str	r2, [r3, #12]
		break;
 800441e:	e018      	b.n	8004452 <USART_Config+0x372>
	}
	default:
	{
		//Actuando por defecto, desactivamos ambos canales
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_UE;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	689b      	ldr	r3, [r3, #8]
 8004424:	68da      	ldr	r2, [r3, #12]
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	689b      	ldr	r3, [r3, #8]
 800442a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800442e:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_TE;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	689b      	ldr	r3, [r3, #8]
 8004434:	68da      	ldr	r2, [r3, #12]
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	689b      	ldr	r3, [r3, #8]
 800443a:	f022 0208 	bic.w	r2, r2, #8
 800443e:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_RE;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	689b      	ldr	r3, [r3, #8]
 8004444:	68da      	ldr	r2, [r3, #12]
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	689b      	ldr	r3, [r3, #8]
 800444a:	f022 0204 	bic.w	r2, r2, #4
 800444e:	60da      	str	r2, [r3, #12]
		break;
 8004450:	bf00      	nop
  __ASM volatile ("cpsid i" : : : "memory");
 8004452:	b672      	cpsid	i
}
 8004454:	bf00      	nop

	//Desactivamos las interupciones globales
	__disable_irq();

	//Se selecciono la interrupcion para RX
	if(ptrUsartHandler->USART_Config.USART_enableIntRX ==  USART_RX_INTERRUP_ENABLE)
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	791b      	ldrb	r3, [r3, #4]
 800445a:	2b01      	cmp	r3, #1
 800445c:	d110      	bne.n	8004480 <USART_Config+0x3a0>
	{
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_RXNEIE;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	689b      	ldr	r3, [r3, #8]
 8004462:	68da      	ldr	r2, [r3, #12]
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	689b      	ldr	r3, [r3, #8]
 8004468:	f022 0220 	bic.w	r2, r2, #32
 800446c:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_RXNEIE;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	689b      	ldr	r3, [r3, #8]
 8004472:	68da      	ldr	r2, [r3, #12]
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	689b      	ldr	r3, [r3, #8]
 8004478:	f042 0220 	orr.w	r2, r2, #32
 800447c:	60da      	str	r2, [r3, #12]
 800447e:	e007      	b.n	8004490 <USART_Config+0x3b0>
	}
	else
	{
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_RXNEIE;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	689b      	ldr	r3, [r3, #8]
 8004484:	68da      	ldr	r2, [r3, #12]
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	689b      	ldr	r3, [r3, #8]
 800448a:	f022 0220 	bic.w	r2, r2, #32
 800448e:	60da      	str	r2, [r3, #12]
	}

	//Verificamos si se selecciono alguna interrupcion
	if(ptrUsartHandler->USART_Config.USART_enableIntRX ==  USART_RX_INTERRUP_ENABLE || ptrUsartHandler->USART_Config.USART_enableIntTX ==  USART_TX_INTERRUP_ENABLE)
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	791b      	ldrb	r3, [r3, #4]
 8004494:	2b01      	cmp	r3, #1
 8004496:	d003      	beq.n	80044a0 <USART_Config+0x3c0>
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	795b      	ldrb	r3, [r3, #5]
 800449c:	2b01      	cmp	r3, #1
 800449e:	d11a      	bne.n	80044d6 <USART_Config+0x3f6>
	{
		//Matriculamos la interrupcion en el NVIC
		if(ptrUsartHandler->ptrUSARTx == USART1)
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	689b      	ldr	r3, [r3, #8]
 80044a4:	4a1a      	ldr	r2, [pc, #104]	; (8004510 <USART_Config+0x430>)
 80044a6:	4293      	cmp	r3, r2
 80044a8:	d103      	bne.n	80044b2 <USART_Config+0x3d2>
		{
			NVIC_EnableIRQ(USART1_IRQn);
 80044aa:	2025      	movs	r0, #37	; 0x25
 80044ac:	f7ff fdfa 	bl	80040a4 <__NVIC_EnableIRQ>
		if(ptrUsartHandler->ptrUSARTx == USART1)
 80044b0:	e013      	b.n	80044da <USART_Config+0x3fa>
		}
		else if(ptrUsartHandler->ptrUSARTx == USART2)
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	689b      	ldr	r3, [r3, #8]
 80044b6:	4a17      	ldr	r2, [pc, #92]	; (8004514 <USART_Config+0x434>)
 80044b8:	4293      	cmp	r3, r2
 80044ba:	d103      	bne.n	80044c4 <USART_Config+0x3e4>
		{
			NVIC_EnableIRQ(USART2_IRQn);
 80044bc:	2026      	movs	r0, #38	; 0x26
 80044be:	f7ff fdf1 	bl	80040a4 <__NVIC_EnableIRQ>
		if(ptrUsartHandler->ptrUSARTx == USART1)
 80044c2:	e00a      	b.n	80044da <USART_Config+0x3fa>
		}
		else if(ptrUsartHandler->ptrUSARTx == USART6)
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	689b      	ldr	r3, [r3, #8]
 80044c8:	4a13      	ldr	r2, [pc, #76]	; (8004518 <USART_Config+0x438>)
 80044ca:	4293      	cmp	r3, r2
 80044cc:	d105      	bne.n	80044da <USART_Config+0x3fa>
		{
			NVIC_EnableIRQ(USART6_IRQn);
 80044ce:	2047      	movs	r0, #71	; 0x47
 80044d0:	f7ff fde8 	bl	80040a4 <__NVIC_EnableIRQ>
		if(ptrUsartHandler->ptrUSARTx == USART1)
 80044d4:	e001      	b.n	80044da <USART_Config+0x3fa>
		}
	}
	else
	{
		__NOP();
 80044d6:	bf00      	nop
 80044d8:	e000      	b.n	80044dc <USART_Config+0x3fc>
		if(ptrUsartHandler->ptrUSARTx == USART1)
 80044da:	bf00      	nop
  __ASM volatile ("cpsie i" : : : "memory");
 80044dc:	b662      	cpsie	i
}
 80044de:	bf00      	nop
	__enable_irq();

	//-------------------7) Activacion del modulo Serial------------------------
	//Registro: CR1

	if(ptrUsartHandler->USART_Config.USART_mode != USART_MODE_DISABLE)
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	781b      	ldrb	r3, [r3, #0]
 80044e4:	2b03      	cmp	r3, #3
 80044e6:	d00f      	beq.n	8004508 <USART_Config+0x428>
	{
		//Activamos el modulo Serial
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_UE;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	689b      	ldr	r3, [r3, #8]
 80044ec:	68da      	ldr	r2, [r3, #12]
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	689b      	ldr	r3, [r3, #8]
 80044f2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80044f6:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_UE;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	689b      	ldr	r3, [r3, #8]
 80044fc:	68da      	ldr	r2, [r3, #12]
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	689b      	ldr	r3, [r3, #8]
 8004502:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004506:	60da      	str	r2, [r3, #12]
	}
}
 8004508:	bf00      	nop
 800450a:	3710      	adds	r7, #16
 800450c:	46bd      	mov	sp, r7
 800450e:	bd80      	pop	{r7, pc}
 8004510:	40011000 	.word	0x40011000
 8004514:	40004400 	.word	0x40004400
 8004518:	40011400 	.word	0x40011400

0800451c <getValueBaudRate>:

//---------------Funcion para calcular el valor correspondiente a ingresar en el BRR----------
uint16_t getValueBaudRate(uint8_t fck, uint32_t baudRate)
{
 800451c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004520:	b086      	sub	sp, #24
 8004522:	af00      	add	r7, sp, #0
 8004524:	6039      	str	r1, [r7, #0]
 8004526:	4601      	mov	r1, r0
 8004528:	71f9      	strb	r1, [r7, #7]
    uint32_t usartDiv = (fck*10000000000)/(16*baudRate);
 800452a:	79f9      	ldrb	r1, [r7, #7]
 800452c:	2000      	movs	r0, #0
 800452e:	460a      	mov	r2, r1
 8004530:	4603      	mov	r3, r0
 8004532:	491f      	ldr	r1, [pc, #124]	; (80045b0 <getValueBaudRate+0x94>)
 8004534:	fb01 f003 	mul.w	r0, r1, r3
 8004538:	2102      	movs	r1, #2
 800453a:	fb02 f101 	mul.w	r1, r2, r1
 800453e:	4401      	add	r1, r0
 8004540:	481b      	ldr	r0, [pc, #108]	; (80045b0 <getValueBaudRate+0x94>)
 8004542:	fba2 4500 	umull	r4, r5, r2, r0
 8004546:	194b      	adds	r3, r1, r5
 8004548:	461d      	mov	r5, r3
 800454a:	683b      	ldr	r3, [r7, #0]
 800454c:	011b      	lsls	r3, r3, #4
 800454e:	2200      	movs	r2, #0
 8004550:	4698      	mov	r8, r3
 8004552:	4691      	mov	r9, r2
 8004554:	4642      	mov	r2, r8
 8004556:	464b      	mov	r3, r9
 8004558:	4620      	mov	r0, r4
 800455a:	4629      	mov	r1, r5
 800455c:	f7fc fbac 	bl	8000cb8 <__aeabi_ldivmod>
 8004560:	4602      	mov	r2, r0
 8004562:	460b      	mov	r3, r1
 8004564:	4613      	mov	r3, r2
 8004566:	617b      	str	r3, [r7, #20]
    uint32_t mantiza = usartDiv/10000;
 8004568:	697b      	ldr	r3, [r7, #20]
 800456a:	4a12      	ldr	r2, [pc, #72]	; (80045b4 <getValueBaudRate+0x98>)
 800456c:	fba2 2303 	umull	r2, r3, r2, r3
 8004570:	0b5b      	lsrs	r3, r3, #13
 8004572:	613b      	str	r3, [r7, #16]
    uint32_t decimal = usartDiv-mantiza*10000;
 8004574:	693b      	ldr	r3, [r7, #16]
 8004576:	f242 7210 	movw	r2, #10000	; 0x2710
 800457a:	fb02 f303 	mul.w	r3, r2, r3
 800457e:	697a      	ldr	r2, [r7, #20]
 8004580:	1ad3      	subs	r3, r2, r3
 8004582:	60fb      	str	r3, [r7, #12]
    uint8_t div_Fraction = (decimal-1000)/625;  //1000
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 800458a:	4a0a      	ldr	r2, [pc, #40]	; (80045b4 <getValueBaudRate+0x98>)
 800458c:	fba2 2303 	umull	r2, r3, r2, r3
 8004590:	0a5b      	lsrs	r3, r3, #9
 8004592:	72fb      	strb	r3, [r7, #11]
    uint16_t value  = mantiza<<USART_BRR_DIV_Mantissa_Pos | div_Fraction;
 8004594:	693b      	ldr	r3, [r7, #16]
 8004596:	b29b      	uxth	r3, r3
 8004598:	011b      	lsls	r3, r3, #4
 800459a:	b29a      	uxth	r2, r3
 800459c:	7afb      	ldrb	r3, [r7, #11]
 800459e:	b29b      	uxth	r3, r3
 80045a0:	4313      	orrs	r3, r2
 80045a2:	813b      	strh	r3, [r7, #8]

    return value;
 80045a4:	893b      	ldrh	r3, [r7, #8]
}
 80045a6:	4618      	mov	r0, r3
 80045a8:	3718      	adds	r7, #24
 80045aa:	46bd      	mov	sp, r7
 80045ac:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80045b0:	540be400 	.word	0x540be400
 80045b4:	d1b71759 	.word	0xd1b71759

080045b8 <writeChar>:

//---------------Funciones para la transmision de datos------------------------------
//Funcion para escribir un solo char
void writeChar(USART_Handler_t *ptrUsartHandler, uint8_t datatoSend)
{
 80045b8:	b480      	push	{r7}
 80045ba:	b083      	sub	sp, #12
 80045bc:	af00      	add	r7, sp, #0
 80045be:	6078      	str	r0, [r7, #4]
 80045c0:	460b      	mov	r3, r1
 80045c2:	70fb      	strb	r3, [r7, #3]
	//Verificamos que no se este enviando un mensaje
	while(!(ptrUsartHandler->ptrUSARTx->SR & USART_SR_TXE))
 80045c4:	e000      	b.n	80045c8 <writeChar+0x10>
	{
		__NOP();
 80045c6:	bf00      	nop
	while(!(ptrUsartHandler->ptrUSARTx->SR & USART_SR_TXE))
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	689b      	ldr	r3, [r3, #8]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d0f7      	beq.n	80045c6 <writeChar+0xe>
	}
	//Almacenamos un elemento char en el registro USART_DR
	ptrUsartHandler->ptrUSARTx->DR = datatoSend;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	689b      	ldr	r3, [r3, #8]
 80045da:	78fa      	ldrb	r2, [r7, #3]
 80045dc:	605a      	str	r2, [r3, #4]

}
 80045de:	bf00      	nop
 80045e0:	370c      	adds	r7, #12
 80045e2:	46bd      	mov	sp, r7
 80045e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e8:	4770      	bx	lr

080045ea <writeMsg>:

//Funcion para escribir un string
void writeMsg(USART_Handler_t *ptrUsartHandlerString, char *MsgtoSend)
{
 80045ea:	b580      	push	{r7, lr}
 80045ec:	b084      	sub	sp, #16
 80045ee:	af00      	add	r7, sp, #0
 80045f0:	6078      	str	r0, [r7, #4]
 80045f2:	6039      	str	r1, [r7, #0]
	uint8_t i = 0;
 80045f4:	2300      	movs	r3, #0
 80045f6:	73fb      	strb	r3, [r7, #15]

	while(MsgtoSend[i] != '\0')
 80045f8:	e00a      	b.n	8004610 <writeMsg+0x26>
	{
		writeChar(ptrUsartHandlerString, MsgtoSend[i]);
 80045fa:	7bfb      	ldrb	r3, [r7, #15]
 80045fc:	683a      	ldr	r2, [r7, #0]
 80045fe:	4413      	add	r3, r2
 8004600:	781b      	ldrb	r3, [r3, #0]
 8004602:	4619      	mov	r1, r3
 8004604:	6878      	ldr	r0, [r7, #4]
 8004606:	f7ff ffd7 	bl	80045b8 <writeChar>
		i++;
 800460a:	7bfb      	ldrb	r3, [r7, #15]
 800460c:	3301      	adds	r3, #1
 800460e:	73fb      	strb	r3, [r7, #15]
	while(MsgtoSend[i] != '\0')
 8004610:	7bfb      	ldrb	r3, [r7, #15]
 8004612:	683a      	ldr	r2, [r7, #0]
 8004614:	4413      	add	r3, r2
 8004616:	781b      	ldrb	r3, [r3, #0]
 8004618:	2b00      	cmp	r3, #0
 800461a:	d1ee      	bne.n	80045fa <writeMsg+0x10>
	}
}
 800461c:	bf00      	nop
 800461e:	bf00      	nop
 8004620:	3710      	adds	r7, #16
 8004622:	46bd      	mov	sp, r7
 8004624:	bd80      	pop	{r7, pc}
	...

08004628 <writeMsgForTXE>:
	}
}

//Funcion para escribir un string
void writeMsgForTXE(USART_Handler_t *ptrUsartHandlerString, char *MsgtoSend)
{
 8004628:	b580      	push	{r7, lr}
 800462a:	b082      	sub	sp, #8
 800462c:	af00      	add	r7, sp, #0
 800462e:	6078      	str	r0, [r7, #4]
 8004630:	6039      	str	r1, [r7, #0]
	if (posChar == 0 && inLineTxe == 0)
 8004632:	4b16      	ldr	r3, [pc, #88]	; (800468c <writeMsgForTXE+0x64>)
 8004634:	781b      	ldrb	r3, [r3, #0]
 8004636:	2b00      	cmp	r3, #0
 8004638:	d111      	bne.n	800465e <writeMsgForTXE+0x36>
 800463a:	4b15      	ldr	r3, [pc, #84]	; (8004690 <writeMsgForTXE+0x68>)
 800463c:	781b      	ldrb	r3, [r3, #0]
 800463e:	2b00      	cmp	r3, #0
 8004640:	d10d      	bne.n	800465e <writeMsgForTXE+0x36>
	{
		//Guardamos el string que se desea enviar en un arreglo
		sprintf(bufferMsgForTXE, MsgtoSend);
 8004642:	6839      	ldr	r1, [r7, #0]
 8004644:	4813      	ldr	r0, [pc, #76]	; (8004694 <writeMsgForTXE+0x6c>)
 8004646:	f001 f8a9 	bl	800579c <siprintf>
		//cambiamos el tipo
		typeWriteTXE = 1;
 800464a:	4b13      	ldr	r3, [pc, #76]	; (8004698 <writeMsgForTXE+0x70>)
 800464c:	2201      	movs	r2, #1
 800464e:	701a      	strb	r2, [r3, #0]
		//Activo la interrupcion
		interruptionTX(ptrUsartHandlerString->ptrUSARTx, USART_TX_INTERRUP_ENABLE);
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	689b      	ldr	r3, [r3, #8]
 8004654:	2101      	movs	r1, #1
 8004656:	4618      	mov	r0, r3
 8004658:	f000 f830 	bl	80046bc <interruptionTX>
 800465c:	e012      	b.n	8004684 <writeMsgForTXE+0x5c>
	}
	else
	{
		sprintf(bufferMsgForTXE_inLine[inLine], MsgtoSend);
 800465e:	4b0f      	ldr	r3, [pc, #60]	; (800469c <writeMsgForTXE+0x74>)
 8004660:	781b      	ldrb	r3, [r3, #0]
 8004662:	461a      	mov	r2, r3
 8004664:	2364      	movs	r3, #100	; 0x64
 8004666:	fb02 f303 	mul.w	r3, r2, r3
 800466a:	4a0d      	ldr	r2, [pc, #52]	; (80046a0 <writeMsgForTXE+0x78>)
 800466c:	4413      	add	r3, r2
 800466e:	6839      	ldr	r1, [r7, #0]
 8004670:	4618      	mov	r0, r3
 8004672:	f001 f893 	bl	800579c <siprintf>
		inLine++;
 8004676:	4b09      	ldr	r3, [pc, #36]	; (800469c <writeMsgForTXE+0x74>)
 8004678:	781b      	ldrb	r3, [r3, #0]
 800467a:	3301      	adds	r3, #1
 800467c:	b2da      	uxtb	r2, r3
 800467e:	4b07      	ldr	r3, [pc, #28]	; (800469c <writeMsgForTXE+0x74>)
 8004680:	701a      	strb	r2, [r3, #0]
	}
}
 8004682:	bf00      	nop
 8004684:	bf00      	nop
 8004686:	3708      	adds	r7, #8
 8004688:	46bd      	mov	sp, r7
 800468a:	bd80      	pop	{r7, pc}
 800468c:	20000c46 	.word	0x20000c46
 8004690:	20000c45 	.word	0x20000c45
 8004694:	20000410 	.word	0x20000410
 8004698:	20000c47 	.word	0x20000c47
 800469c:	20000c44 	.word	0x20000c44
 80046a0:	20000474 	.word	0x20000474

080046a4 <getRxData>:

//Funcion para leer un char
uint8_t getRxData(void)
{
 80046a4:	b480      	push	{r7}
 80046a6:	af00      	add	r7, sp, #0
	return auxRxData;
 80046a8:	4b03      	ldr	r3, [pc, #12]	; (80046b8 <getRxData+0x14>)
 80046aa:	781b      	ldrb	r3, [r3, #0]
}
 80046ac:	4618      	mov	r0, r3
 80046ae:	46bd      	mov	sp, r7
 80046b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b4:	4770      	bx	lr
 80046b6:	bf00      	nop
 80046b8:	2000040c 	.word	0x2000040c

080046bc <interruptionTX>:

//Funcion para desactivar o activar las interrupciones por  TX
void interruptionTX(USART_TypeDef *ptrUSARTxUsed, uint8_t interrupEnable)
{
 80046bc:	b480      	push	{r7}
 80046be:	b083      	sub	sp, #12
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	6078      	str	r0, [r7, #4]
 80046c4:	460b      	mov	r3, r1
 80046c6:	70fb      	strb	r3, [r7, #3]
	//Se selecciono la interrupcion para TX
	if(interrupEnable ==  USART_TX_INTERRUP_ENABLE)
 80046c8:	78fb      	ldrb	r3, [r7, #3]
 80046ca:	2b01      	cmp	r3, #1
 80046cc:	d10c      	bne.n	80046e8 <interruptionTX+0x2c>
	{
		ptrUSARTxUsed->CR1 &= ~USART_CR1_TXEIE;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	68db      	ldr	r3, [r3, #12]
 80046d2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	60da      	str	r2, [r3, #12]
		ptrUSARTxUsed->CR1 |= USART_CR1_TXEIE;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	68db      	ldr	r3, [r3, #12]
 80046de:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	60da      	str	r2, [r3, #12]
	}
	else
	{
		ptrUSARTxUsed->CR1  &= ~USART_CR1_TXEIE;
	}
}
 80046e6:	e005      	b.n	80046f4 <interruptionTX+0x38>
		ptrUSARTxUsed->CR1  &= ~USART_CR1_TXEIE;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	68db      	ldr	r3, [r3, #12]
 80046ec:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	60da      	str	r2, [r3, #12]
}
 80046f4:	bf00      	nop
 80046f6:	370c      	adds	r7, #12
 80046f8:	46bd      	mov	sp, r7
 80046fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046fe:	4770      	bx	lr

08004700 <BasicUSART1_Callback>:


//Definimos las funciones para cuando se genera una interrupcion del USART1-2 y 6
__attribute__((weak)) void BasicUSART1_Callback()
{
 8004700:	b480      	push	{r7}
 8004702:	af00      	add	r7, sp, #0
	__NOP();
 8004704:	bf00      	nop
}
 8004706:	bf00      	nop
 8004708:	46bd      	mov	sp, r7
 800470a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800470e:	4770      	bx	lr

08004710 <BasicUSART6_Callback>:
	__NOP();
}


__attribute__((weak)) void BasicUSART6_Callback()
{
 8004710:	b480      	push	{r7}
 8004712:	af00      	add	r7, sp, #0
	__NOP();
 8004714:	bf00      	nop
}
 8004716:	bf00      	nop
 8004718:	46bd      	mov	sp, r7
 800471a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800471e:	4770      	bx	lr

08004720 <USART1_IRQHandler>:
 * estas funciones en el vector de interrupciones respectivamente.
 * Con ello Guardamos el elemento char recibido
 */

void USART1_IRQHandler(void)
{
 8004720:	b580      	push	{r7, lr}
 8004722:	af00      	add	r7, sp, #0
	//Confirmamos que el registro RXNE esta activo
	if(ptrUSART1Used->SR & USART_SR_RXNE)
 8004724:	4b37      	ldr	r3, [pc, #220]	; (8004804 <USART1_IRQHandler+0xe4>)
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f003 0320 	and.w	r3, r3, #32
 800472e:	2b00      	cmp	r3, #0
 8004730:	d008      	beq.n	8004744 <USART1_IRQHandler+0x24>
	{
		//Leemos el registro DR del respectivo USART
		auxRxData = (uint8_t) ptrUSART1Used->DR;
 8004732:	4b34      	ldr	r3, [pc, #208]	; (8004804 <USART1_IRQHandler+0xe4>)
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	685b      	ldr	r3, [r3, #4]
 8004738:	b2da      	uxtb	r2, r3
 800473a:	4b33      	ldr	r3, [pc, #204]	; (8004808 <USART1_IRQHandler+0xe8>)
 800473c:	701a      	strb	r2, [r3, #0]
		//Llamanos a la funcion de interrupcion
		BasicUSART1_Callback();
 800473e:	f7ff ffdf 	bl	8004700 <BasicUSART1_Callback>
	}
	else
	{
		__NOP();
	}
}
 8004742:	e05d      	b.n	8004800 <USART1_IRQHandler+0xe0>
	else if (ptrUSART1Used->SR & USART_SR_TXE)
 8004744:	4b2f      	ldr	r3, [pc, #188]	; (8004804 <USART1_IRQHandler+0xe4>)
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800474e:	2b00      	cmp	r3, #0
 8004750:	d055      	beq.n	80047fe <USART1_IRQHandler+0xde>
		if(typeWriteTXE == 0)
 8004752:	4b2e      	ldr	r3, [pc, #184]	; (800480c <USART1_IRQHandler+0xec>)
 8004754:	781b      	ldrb	r3, [r3, #0]
 8004756:	2b00      	cmp	r3, #0
 8004758:	d10b      	bne.n	8004772 <USART1_IRQHandler+0x52>
			ptrUSART1Used->DR = datatoSendForTXE;
 800475a:	4b2d      	ldr	r3, [pc, #180]	; (8004810 <USART1_IRQHandler+0xf0>)
 800475c:	781a      	ldrb	r2, [r3, #0]
 800475e:	4b29      	ldr	r3, [pc, #164]	; (8004804 <USART1_IRQHandler+0xe4>)
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	605a      	str	r2, [r3, #4]
			interruptionTX(ptrUSART1Used, USART_TX_INTERRUP_DISABLE);
 8004764:	4b27      	ldr	r3, [pc, #156]	; (8004804 <USART1_IRQHandler+0xe4>)
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	2100      	movs	r1, #0
 800476a:	4618      	mov	r0, r3
 800476c:	f7ff ffa6 	bl	80046bc <interruptionTX>
}
 8004770:	e046      	b.n	8004800 <USART1_IRQHandler+0xe0>
		else if(typeWriteTXE == 1)
 8004772:	4b26      	ldr	r3, [pc, #152]	; (800480c <USART1_IRQHandler+0xec>)
 8004774:	781b      	ldrb	r3, [r3, #0]
 8004776:	2b01      	cmp	r3, #1
 8004778:	d142      	bne.n	8004800 <USART1_IRQHandler+0xe0>
			if (bufferMsgForTXE[posChar] != '\0')
 800477a:	4b26      	ldr	r3, [pc, #152]	; (8004814 <USART1_IRQHandler+0xf4>)
 800477c:	781b      	ldrb	r3, [r3, #0]
 800477e:	461a      	mov	r2, r3
 8004780:	4b25      	ldr	r3, [pc, #148]	; (8004818 <USART1_IRQHandler+0xf8>)
 8004782:	5c9b      	ldrb	r3, [r3, r2]
 8004784:	2b00      	cmp	r3, #0
 8004786:	d00e      	beq.n	80047a6 <USART1_IRQHandler+0x86>
				ptrUSART1Used->DR = bufferMsgForTXE[posChar];
 8004788:	4b22      	ldr	r3, [pc, #136]	; (8004814 <USART1_IRQHandler+0xf4>)
 800478a:	781b      	ldrb	r3, [r3, #0]
 800478c:	461a      	mov	r2, r3
 800478e:	4b22      	ldr	r3, [pc, #136]	; (8004818 <USART1_IRQHandler+0xf8>)
 8004790:	5c9a      	ldrb	r2, [r3, r2]
 8004792:	4b1c      	ldr	r3, [pc, #112]	; (8004804 <USART1_IRQHandler+0xe4>)
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	605a      	str	r2, [r3, #4]
				posChar++;
 8004798:	4b1e      	ldr	r3, [pc, #120]	; (8004814 <USART1_IRQHandler+0xf4>)
 800479a:	781b      	ldrb	r3, [r3, #0]
 800479c:	3301      	adds	r3, #1
 800479e:	b2da      	uxtb	r2, r3
 80047a0:	4b1c      	ldr	r3, [pc, #112]	; (8004814 <USART1_IRQHandler+0xf4>)
 80047a2:	701a      	strb	r2, [r3, #0]
}
 80047a4:	e02c      	b.n	8004800 <USART1_IRQHandler+0xe0>
				if (inLineTxe<inLine)
 80047a6:	4b1d      	ldr	r3, [pc, #116]	; (800481c <USART1_IRQHandler+0xfc>)
 80047a8:	781a      	ldrb	r2, [r3, #0]
 80047aa:	4b1d      	ldr	r3, [pc, #116]	; (8004820 <USART1_IRQHandler+0x100>)
 80047ac:	781b      	ldrb	r3, [r3, #0]
 80047ae:	429a      	cmp	r2, r3
 80047b0:	d215      	bcs.n	80047de <USART1_IRQHandler+0xbe>
					sprintf(bufferMsgForTXE, bufferMsgForTXE_inLine[inLineTxe]);
 80047b2:	4b1a      	ldr	r3, [pc, #104]	; (800481c <USART1_IRQHandler+0xfc>)
 80047b4:	781b      	ldrb	r3, [r3, #0]
 80047b6:	461a      	mov	r2, r3
 80047b8:	2364      	movs	r3, #100	; 0x64
 80047ba:	fb02 f303 	mul.w	r3, r2, r3
 80047be:	4a19      	ldr	r2, [pc, #100]	; (8004824 <USART1_IRQHandler+0x104>)
 80047c0:	4413      	add	r3, r2
 80047c2:	4619      	mov	r1, r3
 80047c4:	4814      	ldr	r0, [pc, #80]	; (8004818 <USART1_IRQHandler+0xf8>)
 80047c6:	f000 ffe9 	bl	800579c <siprintf>
					posChar = 0;
 80047ca:	4b12      	ldr	r3, [pc, #72]	; (8004814 <USART1_IRQHandler+0xf4>)
 80047cc:	2200      	movs	r2, #0
 80047ce:	701a      	strb	r2, [r3, #0]
					inLineTxe++;
 80047d0:	4b12      	ldr	r3, [pc, #72]	; (800481c <USART1_IRQHandler+0xfc>)
 80047d2:	781b      	ldrb	r3, [r3, #0]
 80047d4:	3301      	adds	r3, #1
 80047d6:	b2da      	uxtb	r2, r3
 80047d8:	4b10      	ldr	r3, [pc, #64]	; (800481c <USART1_IRQHandler+0xfc>)
 80047da:	701a      	strb	r2, [r3, #0]
}
 80047dc:	e010      	b.n	8004800 <USART1_IRQHandler+0xe0>
					interruptionTX(ptrUSART1Used, USART_TX_INTERRUP_DISABLE);
 80047de:	4b09      	ldr	r3, [pc, #36]	; (8004804 <USART1_IRQHandler+0xe4>)
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	2100      	movs	r1, #0
 80047e4:	4618      	mov	r0, r3
 80047e6:	f7ff ff69 	bl	80046bc <interruptionTX>
					posChar = 0;
 80047ea:	4b0a      	ldr	r3, [pc, #40]	; (8004814 <USART1_IRQHandler+0xf4>)
 80047ec:	2200      	movs	r2, #0
 80047ee:	701a      	strb	r2, [r3, #0]
					inLineTxe = 0;
 80047f0:	4b0a      	ldr	r3, [pc, #40]	; (800481c <USART1_IRQHandler+0xfc>)
 80047f2:	2200      	movs	r2, #0
 80047f4:	701a      	strb	r2, [r3, #0]
					inLine = 0;
 80047f6:	4b0a      	ldr	r3, [pc, #40]	; (8004820 <USART1_IRQHandler+0x100>)
 80047f8:	2200      	movs	r2, #0
 80047fa:	701a      	strb	r2, [r3, #0]
}
 80047fc:	e000      	b.n	8004800 <USART1_IRQHandler+0xe0>
		__NOP();
 80047fe:	bf00      	nop
}
 8004800:	bf00      	nop
 8004802:	bd80      	pop	{r7, pc}
 8004804:	20000400 	.word	0x20000400
 8004808:	2000040c 	.word	0x2000040c
 800480c:	20000c47 	.word	0x20000c47
 8004810:	2000040d 	.word	0x2000040d
 8004814:	20000c46 	.word	0x20000c46
 8004818:	20000410 	.word	0x20000410
 800481c:	20000c45 	.word	0x20000c45
 8004820:	20000c44 	.word	0x20000c44
 8004824:	20000474 	.word	0x20000474

08004828 <USART2_IRQHandler>:

void USART2_IRQHandler(void)
{
 8004828:	b580      	push	{r7, lr}
 800482a:	af00      	add	r7, sp, #0
	//Confirmamos que el registro RXNE esta activo
	if(ptrUSART2Used->SR & USART_SR_RXNE)
 800482c:	4b37      	ldr	r3, [pc, #220]	; (800490c <USART2_IRQHandler+0xe4>)
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f003 0320 	and.w	r3, r3, #32
 8004836:	2b00      	cmp	r3, #0
 8004838:	d008      	beq.n	800484c <USART2_IRQHandler+0x24>
	{
		//Leemos el registro DR del respectivo USART
		auxRxData = (uint8_t) ptrUSART2Used->DR;
 800483a:	4b34      	ldr	r3, [pc, #208]	; (800490c <USART2_IRQHandler+0xe4>)
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	685b      	ldr	r3, [r3, #4]
 8004840:	b2da      	uxtb	r2, r3
 8004842:	4b33      	ldr	r3, [pc, #204]	; (8004910 <USART2_IRQHandler+0xe8>)
 8004844:	701a      	strb	r2, [r3, #0]
		//Llamanos a la funcion de interrupcion
		BasicUSART2_Callback();
 8004846:	f7fc ff9d 	bl	8001784 <BasicUSART2_Callback>
	}
	else
	{
		__NOP();
	}
}
 800484a:	e05d      	b.n	8004908 <USART2_IRQHandler+0xe0>
	else if (ptrUSART2Used->SR & USART_SR_TXE)
 800484c:	4b2f      	ldr	r3, [pc, #188]	; (800490c <USART2_IRQHandler+0xe4>)
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004856:	2b00      	cmp	r3, #0
 8004858:	d055      	beq.n	8004906 <USART2_IRQHandler+0xde>
		if(typeWriteTXE == 0)
 800485a:	4b2e      	ldr	r3, [pc, #184]	; (8004914 <USART2_IRQHandler+0xec>)
 800485c:	781b      	ldrb	r3, [r3, #0]
 800485e:	2b00      	cmp	r3, #0
 8004860:	d10b      	bne.n	800487a <USART2_IRQHandler+0x52>
			ptrUSART2Used->DR = datatoSendForTXE;
 8004862:	4b2d      	ldr	r3, [pc, #180]	; (8004918 <USART2_IRQHandler+0xf0>)
 8004864:	781a      	ldrb	r2, [r3, #0]
 8004866:	4b29      	ldr	r3, [pc, #164]	; (800490c <USART2_IRQHandler+0xe4>)
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	605a      	str	r2, [r3, #4]
			interruptionTX(ptrUSART2Used, USART_TX_INTERRUP_DISABLE);
 800486c:	4b27      	ldr	r3, [pc, #156]	; (800490c <USART2_IRQHandler+0xe4>)
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	2100      	movs	r1, #0
 8004872:	4618      	mov	r0, r3
 8004874:	f7ff ff22 	bl	80046bc <interruptionTX>
}
 8004878:	e046      	b.n	8004908 <USART2_IRQHandler+0xe0>
		else if(typeWriteTXE == 1)
 800487a:	4b26      	ldr	r3, [pc, #152]	; (8004914 <USART2_IRQHandler+0xec>)
 800487c:	781b      	ldrb	r3, [r3, #0]
 800487e:	2b01      	cmp	r3, #1
 8004880:	d142      	bne.n	8004908 <USART2_IRQHandler+0xe0>
			if (bufferMsgForTXE[posChar] != '\0')
 8004882:	4b26      	ldr	r3, [pc, #152]	; (800491c <USART2_IRQHandler+0xf4>)
 8004884:	781b      	ldrb	r3, [r3, #0]
 8004886:	461a      	mov	r2, r3
 8004888:	4b25      	ldr	r3, [pc, #148]	; (8004920 <USART2_IRQHandler+0xf8>)
 800488a:	5c9b      	ldrb	r3, [r3, r2]
 800488c:	2b00      	cmp	r3, #0
 800488e:	d00e      	beq.n	80048ae <USART2_IRQHandler+0x86>
				ptrUSART2Used->DR = bufferMsgForTXE[posChar];
 8004890:	4b22      	ldr	r3, [pc, #136]	; (800491c <USART2_IRQHandler+0xf4>)
 8004892:	781b      	ldrb	r3, [r3, #0]
 8004894:	461a      	mov	r2, r3
 8004896:	4b22      	ldr	r3, [pc, #136]	; (8004920 <USART2_IRQHandler+0xf8>)
 8004898:	5c9a      	ldrb	r2, [r3, r2]
 800489a:	4b1c      	ldr	r3, [pc, #112]	; (800490c <USART2_IRQHandler+0xe4>)
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	605a      	str	r2, [r3, #4]
				posChar++;
 80048a0:	4b1e      	ldr	r3, [pc, #120]	; (800491c <USART2_IRQHandler+0xf4>)
 80048a2:	781b      	ldrb	r3, [r3, #0]
 80048a4:	3301      	adds	r3, #1
 80048a6:	b2da      	uxtb	r2, r3
 80048a8:	4b1c      	ldr	r3, [pc, #112]	; (800491c <USART2_IRQHandler+0xf4>)
 80048aa:	701a      	strb	r2, [r3, #0]
}
 80048ac:	e02c      	b.n	8004908 <USART2_IRQHandler+0xe0>
				if (inLineTxe<inLine)
 80048ae:	4b1d      	ldr	r3, [pc, #116]	; (8004924 <USART2_IRQHandler+0xfc>)
 80048b0:	781a      	ldrb	r2, [r3, #0]
 80048b2:	4b1d      	ldr	r3, [pc, #116]	; (8004928 <USART2_IRQHandler+0x100>)
 80048b4:	781b      	ldrb	r3, [r3, #0]
 80048b6:	429a      	cmp	r2, r3
 80048b8:	d215      	bcs.n	80048e6 <USART2_IRQHandler+0xbe>
					sprintf(bufferMsgForTXE, bufferMsgForTXE_inLine[inLineTxe]);
 80048ba:	4b1a      	ldr	r3, [pc, #104]	; (8004924 <USART2_IRQHandler+0xfc>)
 80048bc:	781b      	ldrb	r3, [r3, #0]
 80048be:	461a      	mov	r2, r3
 80048c0:	2364      	movs	r3, #100	; 0x64
 80048c2:	fb02 f303 	mul.w	r3, r2, r3
 80048c6:	4a19      	ldr	r2, [pc, #100]	; (800492c <USART2_IRQHandler+0x104>)
 80048c8:	4413      	add	r3, r2
 80048ca:	4619      	mov	r1, r3
 80048cc:	4814      	ldr	r0, [pc, #80]	; (8004920 <USART2_IRQHandler+0xf8>)
 80048ce:	f000 ff65 	bl	800579c <siprintf>
					posChar = 0;
 80048d2:	4b12      	ldr	r3, [pc, #72]	; (800491c <USART2_IRQHandler+0xf4>)
 80048d4:	2200      	movs	r2, #0
 80048d6:	701a      	strb	r2, [r3, #0]
					inLineTxe++;
 80048d8:	4b12      	ldr	r3, [pc, #72]	; (8004924 <USART2_IRQHandler+0xfc>)
 80048da:	781b      	ldrb	r3, [r3, #0]
 80048dc:	3301      	adds	r3, #1
 80048de:	b2da      	uxtb	r2, r3
 80048e0:	4b10      	ldr	r3, [pc, #64]	; (8004924 <USART2_IRQHandler+0xfc>)
 80048e2:	701a      	strb	r2, [r3, #0]
}
 80048e4:	e010      	b.n	8004908 <USART2_IRQHandler+0xe0>
					interruptionTX(ptrUSART2Used, USART_TX_INTERRUP_DISABLE);
 80048e6:	4b09      	ldr	r3, [pc, #36]	; (800490c <USART2_IRQHandler+0xe4>)
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	2100      	movs	r1, #0
 80048ec:	4618      	mov	r0, r3
 80048ee:	f7ff fee5 	bl	80046bc <interruptionTX>
					posChar = 0;
 80048f2:	4b0a      	ldr	r3, [pc, #40]	; (800491c <USART2_IRQHandler+0xf4>)
 80048f4:	2200      	movs	r2, #0
 80048f6:	701a      	strb	r2, [r3, #0]
					inLineTxe = 0;
 80048f8:	4b0a      	ldr	r3, [pc, #40]	; (8004924 <USART2_IRQHandler+0xfc>)
 80048fa:	2200      	movs	r2, #0
 80048fc:	701a      	strb	r2, [r3, #0]
					inLine = 0;
 80048fe:	4b0a      	ldr	r3, [pc, #40]	; (8004928 <USART2_IRQHandler+0x100>)
 8004900:	2200      	movs	r2, #0
 8004902:	701a      	strb	r2, [r3, #0]
}
 8004904:	e000      	b.n	8004908 <USART2_IRQHandler+0xe0>
		__NOP();
 8004906:	bf00      	nop
}
 8004908:	bf00      	nop
 800490a:	bd80      	pop	{r7, pc}
 800490c:	20000404 	.word	0x20000404
 8004910:	2000040c 	.word	0x2000040c
 8004914:	20000c47 	.word	0x20000c47
 8004918:	2000040d 	.word	0x2000040d
 800491c:	20000c46 	.word	0x20000c46
 8004920:	20000410 	.word	0x20000410
 8004924:	20000c45 	.word	0x20000c45
 8004928:	20000c44 	.word	0x20000c44
 800492c:	20000474 	.word	0x20000474

08004930 <USART6_IRQHandler>:

void USART6_IRQHandler(void)
{
 8004930:	b580      	push	{r7, lr}
 8004932:	af00      	add	r7, sp, #0
	//Confirmamos que el registro RXNE esta activo
	if(ptrUSART6Used->SR & USART_SR_RXNE)
 8004934:	4b37      	ldr	r3, [pc, #220]	; (8004a14 <USART6_IRQHandler+0xe4>)
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f003 0320 	and.w	r3, r3, #32
 800493e:	2b00      	cmp	r3, #0
 8004940:	d008      	beq.n	8004954 <USART6_IRQHandler+0x24>
	{
		//Leemos el registro DR del respectivo USART
		auxRxData = (uint8_t) ptrUSART6Used->DR;
 8004942:	4b34      	ldr	r3, [pc, #208]	; (8004a14 <USART6_IRQHandler+0xe4>)
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	685b      	ldr	r3, [r3, #4]
 8004948:	b2da      	uxtb	r2, r3
 800494a:	4b33      	ldr	r3, [pc, #204]	; (8004a18 <USART6_IRQHandler+0xe8>)
 800494c:	701a      	strb	r2, [r3, #0]
		//Llamanos a la funcion de interrupcion
		BasicUSART6_Callback();
 800494e:	f7ff fedf 	bl	8004710 <BasicUSART6_Callback>
	}
	else
	{
		__NOP();
	}
}
 8004952:	e05d      	b.n	8004a10 <USART6_IRQHandler+0xe0>
	else if (ptrUSART6Used->SR & USART_SR_TXE)
 8004954:	4b2f      	ldr	r3, [pc, #188]	; (8004a14 <USART6_IRQHandler+0xe4>)
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800495e:	2b00      	cmp	r3, #0
 8004960:	d055      	beq.n	8004a0e <USART6_IRQHandler+0xde>
		if(typeWriteTXE == 0)
 8004962:	4b2e      	ldr	r3, [pc, #184]	; (8004a1c <USART6_IRQHandler+0xec>)
 8004964:	781b      	ldrb	r3, [r3, #0]
 8004966:	2b00      	cmp	r3, #0
 8004968:	d10b      	bne.n	8004982 <USART6_IRQHandler+0x52>
			ptrUSART6Used->DR = datatoSendForTXE;
 800496a:	4b2d      	ldr	r3, [pc, #180]	; (8004a20 <USART6_IRQHandler+0xf0>)
 800496c:	781a      	ldrb	r2, [r3, #0]
 800496e:	4b29      	ldr	r3, [pc, #164]	; (8004a14 <USART6_IRQHandler+0xe4>)
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	605a      	str	r2, [r3, #4]
			interruptionTX(ptrUSART6Used, USART_TX_INTERRUP_DISABLE);
 8004974:	4b27      	ldr	r3, [pc, #156]	; (8004a14 <USART6_IRQHandler+0xe4>)
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	2100      	movs	r1, #0
 800497a:	4618      	mov	r0, r3
 800497c:	f7ff fe9e 	bl	80046bc <interruptionTX>
}
 8004980:	e046      	b.n	8004a10 <USART6_IRQHandler+0xe0>
		else if(typeWriteTXE == 1)
 8004982:	4b26      	ldr	r3, [pc, #152]	; (8004a1c <USART6_IRQHandler+0xec>)
 8004984:	781b      	ldrb	r3, [r3, #0]
 8004986:	2b01      	cmp	r3, #1
 8004988:	d142      	bne.n	8004a10 <USART6_IRQHandler+0xe0>
			if (bufferMsgForTXE[posChar] != '\0')
 800498a:	4b26      	ldr	r3, [pc, #152]	; (8004a24 <USART6_IRQHandler+0xf4>)
 800498c:	781b      	ldrb	r3, [r3, #0]
 800498e:	461a      	mov	r2, r3
 8004990:	4b25      	ldr	r3, [pc, #148]	; (8004a28 <USART6_IRQHandler+0xf8>)
 8004992:	5c9b      	ldrb	r3, [r3, r2]
 8004994:	2b00      	cmp	r3, #0
 8004996:	d00e      	beq.n	80049b6 <USART6_IRQHandler+0x86>
				ptrUSART6Used->DR = bufferMsgForTXE[posChar];
 8004998:	4b22      	ldr	r3, [pc, #136]	; (8004a24 <USART6_IRQHandler+0xf4>)
 800499a:	781b      	ldrb	r3, [r3, #0]
 800499c:	461a      	mov	r2, r3
 800499e:	4b22      	ldr	r3, [pc, #136]	; (8004a28 <USART6_IRQHandler+0xf8>)
 80049a0:	5c9a      	ldrb	r2, [r3, r2]
 80049a2:	4b1c      	ldr	r3, [pc, #112]	; (8004a14 <USART6_IRQHandler+0xe4>)
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	605a      	str	r2, [r3, #4]
				posChar++;
 80049a8:	4b1e      	ldr	r3, [pc, #120]	; (8004a24 <USART6_IRQHandler+0xf4>)
 80049aa:	781b      	ldrb	r3, [r3, #0]
 80049ac:	3301      	adds	r3, #1
 80049ae:	b2da      	uxtb	r2, r3
 80049b0:	4b1c      	ldr	r3, [pc, #112]	; (8004a24 <USART6_IRQHandler+0xf4>)
 80049b2:	701a      	strb	r2, [r3, #0]
}
 80049b4:	e02c      	b.n	8004a10 <USART6_IRQHandler+0xe0>
				if (inLineTxe<inLine)
 80049b6:	4b1d      	ldr	r3, [pc, #116]	; (8004a2c <USART6_IRQHandler+0xfc>)
 80049b8:	781a      	ldrb	r2, [r3, #0]
 80049ba:	4b1d      	ldr	r3, [pc, #116]	; (8004a30 <USART6_IRQHandler+0x100>)
 80049bc:	781b      	ldrb	r3, [r3, #0]
 80049be:	429a      	cmp	r2, r3
 80049c0:	d215      	bcs.n	80049ee <USART6_IRQHandler+0xbe>
					sprintf(bufferMsgForTXE, bufferMsgForTXE_inLine[inLineTxe]);
 80049c2:	4b1a      	ldr	r3, [pc, #104]	; (8004a2c <USART6_IRQHandler+0xfc>)
 80049c4:	781b      	ldrb	r3, [r3, #0]
 80049c6:	461a      	mov	r2, r3
 80049c8:	2364      	movs	r3, #100	; 0x64
 80049ca:	fb02 f303 	mul.w	r3, r2, r3
 80049ce:	4a19      	ldr	r2, [pc, #100]	; (8004a34 <USART6_IRQHandler+0x104>)
 80049d0:	4413      	add	r3, r2
 80049d2:	4619      	mov	r1, r3
 80049d4:	4814      	ldr	r0, [pc, #80]	; (8004a28 <USART6_IRQHandler+0xf8>)
 80049d6:	f000 fee1 	bl	800579c <siprintf>
					posChar = 0;
 80049da:	4b12      	ldr	r3, [pc, #72]	; (8004a24 <USART6_IRQHandler+0xf4>)
 80049dc:	2200      	movs	r2, #0
 80049de:	701a      	strb	r2, [r3, #0]
					inLineTxe++;
 80049e0:	4b12      	ldr	r3, [pc, #72]	; (8004a2c <USART6_IRQHandler+0xfc>)
 80049e2:	781b      	ldrb	r3, [r3, #0]
 80049e4:	3301      	adds	r3, #1
 80049e6:	b2da      	uxtb	r2, r3
 80049e8:	4b10      	ldr	r3, [pc, #64]	; (8004a2c <USART6_IRQHandler+0xfc>)
 80049ea:	701a      	strb	r2, [r3, #0]
}
 80049ec:	e010      	b.n	8004a10 <USART6_IRQHandler+0xe0>
					interruptionTX(ptrUSART6Used, USART_TX_INTERRUP_DISABLE);
 80049ee:	4b09      	ldr	r3, [pc, #36]	; (8004a14 <USART6_IRQHandler+0xe4>)
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	2100      	movs	r1, #0
 80049f4:	4618      	mov	r0, r3
 80049f6:	f7ff fe61 	bl	80046bc <interruptionTX>
					posChar = 0;
 80049fa:	4b0a      	ldr	r3, [pc, #40]	; (8004a24 <USART6_IRQHandler+0xf4>)
 80049fc:	2200      	movs	r2, #0
 80049fe:	701a      	strb	r2, [r3, #0]
					inLineTxe = 0;
 8004a00:	4b0a      	ldr	r3, [pc, #40]	; (8004a2c <USART6_IRQHandler+0xfc>)
 8004a02:	2200      	movs	r2, #0
 8004a04:	701a      	strb	r2, [r3, #0]
					inLine = 0;
 8004a06:	4b0a      	ldr	r3, [pc, #40]	; (8004a30 <USART6_IRQHandler+0x100>)
 8004a08:	2200      	movs	r2, #0
 8004a0a:	701a      	strb	r2, [r3, #0]
}
 8004a0c:	e000      	b.n	8004a10 <USART6_IRQHandler+0xe0>
		__NOP();
 8004a0e:	bf00      	nop
}
 8004a10:	bf00      	nop
 8004a12:	bd80      	pop	{r7, pc}
 8004a14:	20000408 	.word	0x20000408
 8004a18:	2000040c 	.word	0x2000040c
 8004a1c:	20000c47 	.word	0x20000c47
 8004a20:	2000040d 	.word	0x2000040d
 8004a24:	20000c46 	.word	0x20000c46
 8004a28:	20000410 	.word	0x20000410
 8004a2c:	20000c45 	.word	0x20000c45
 8004a30:	20000c44 	.word	0x20000c44
 8004a34:	20000474 	.word	0x20000474

08004a38 <__errno>:
 8004a38:	4b01      	ldr	r3, [pc, #4]	; (8004a40 <__errno+0x8>)
 8004a3a:	6818      	ldr	r0, [r3, #0]
 8004a3c:	4770      	bx	lr
 8004a3e:	bf00      	nop
 8004a40:	2000001c 	.word	0x2000001c

08004a44 <__libc_init_array>:
 8004a44:	b570      	push	{r4, r5, r6, lr}
 8004a46:	4d0d      	ldr	r5, [pc, #52]	; (8004a7c <__libc_init_array+0x38>)
 8004a48:	4c0d      	ldr	r4, [pc, #52]	; (8004a80 <__libc_init_array+0x3c>)
 8004a4a:	1b64      	subs	r4, r4, r5
 8004a4c:	10a4      	asrs	r4, r4, #2
 8004a4e:	2600      	movs	r6, #0
 8004a50:	42a6      	cmp	r6, r4
 8004a52:	d109      	bne.n	8004a68 <__libc_init_array+0x24>
 8004a54:	4d0b      	ldr	r5, [pc, #44]	; (8004a84 <__libc_init_array+0x40>)
 8004a56:	4c0c      	ldr	r4, [pc, #48]	; (8004a88 <__libc_init_array+0x44>)
 8004a58:	f005 f8c8 	bl	8009bec <_init>
 8004a5c:	1b64      	subs	r4, r4, r5
 8004a5e:	10a4      	asrs	r4, r4, #2
 8004a60:	2600      	movs	r6, #0
 8004a62:	42a6      	cmp	r6, r4
 8004a64:	d105      	bne.n	8004a72 <__libc_init_array+0x2e>
 8004a66:	bd70      	pop	{r4, r5, r6, pc}
 8004a68:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a6c:	4798      	blx	r3
 8004a6e:	3601      	adds	r6, #1
 8004a70:	e7ee      	b.n	8004a50 <__libc_init_array+0xc>
 8004a72:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a76:	4798      	blx	r3
 8004a78:	3601      	adds	r6, #1
 8004a7a:	e7f2      	b.n	8004a62 <__libc_init_array+0x1e>
 8004a7c:	0800a3bc 	.word	0x0800a3bc
 8004a80:	0800a3bc 	.word	0x0800a3bc
 8004a84:	0800a3bc 	.word	0x0800a3bc
 8004a88:	0800a3c0 	.word	0x0800a3c0

08004a8c <memset>:
 8004a8c:	4402      	add	r2, r0
 8004a8e:	4603      	mov	r3, r0
 8004a90:	4293      	cmp	r3, r2
 8004a92:	d100      	bne.n	8004a96 <memset+0xa>
 8004a94:	4770      	bx	lr
 8004a96:	f803 1b01 	strb.w	r1, [r3], #1
 8004a9a:	e7f9      	b.n	8004a90 <memset+0x4>

08004a9c <__cvt>:
 8004a9c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004aa0:	ec55 4b10 	vmov	r4, r5, d0
 8004aa4:	2d00      	cmp	r5, #0
 8004aa6:	460e      	mov	r6, r1
 8004aa8:	4619      	mov	r1, r3
 8004aaa:	462b      	mov	r3, r5
 8004aac:	bfbb      	ittet	lt
 8004aae:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8004ab2:	461d      	movlt	r5, r3
 8004ab4:	2300      	movge	r3, #0
 8004ab6:	232d      	movlt	r3, #45	; 0x2d
 8004ab8:	700b      	strb	r3, [r1, #0]
 8004aba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004abc:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8004ac0:	4691      	mov	r9, r2
 8004ac2:	f023 0820 	bic.w	r8, r3, #32
 8004ac6:	bfbc      	itt	lt
 8004ac8:	4622      	movlt	r2, r4
 8004aca:	4614      	movlt	r4, r2
 8004acc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004ad0:	d005      	beq.n	8004ade <__cvt+0x42>
 8004ad2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8004ad6:	d100      	bne.n	8004ada <__cvt+0x3e>
 8004ad8:	3601      	adds	r6, #1
 8004ada:	2102      	movs	r1, #2
 8004adc:	e000      	b.n	8004ae0 <__cvt+0x44>
 8004ade:	2103      	movs	r1, #3
 8004ae0:	ab03      	add	r3, sp, #12
 8004ae2:	9301      	str	r3, [sp, #4]
 8004ae4:	ab02      	add	r3, sp, #8
 8004ae6:	9300      	str	r3, [sp, #0]
 8004ae8:	ec45 4b10 	vmov	d0, r4, r5
 8004aec:	4653      	mov	r3, sl
 8004aee:	4632      	mov	r2, r6
 8004af0:	f001 fe42 	bl	8006778 <_dtoa_r>
 8004af4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004af8:	4607      	mov	r7, r0
 8004afa:	d102      	bne.n	8004b02 <__cvt+0x66>
 8004afc:	f019 0f01 	tst.w	r9, #1
 8004b00:	d022      	beq.n	8004b48 <__cvt+0xac>
 8004b02:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004b06:	eb07 0906 	add.w	r9, r7, r6
 8004b0a:	d110      	bne.n	8004b2e <__cvt+0x92>
 8004b0c:	783b      	ldrb	r3, [r7, #0]
 8004b0e:	2b30      	cmp	r3, #48	; 0x30
 8004b10:	d10a      	bne.n	8004b28 <__cvt+0x8c>
 8004b12:	2200      	movs	r2, #0
 8004b14:	2300      	movs	r3, #0
 8004b16:	4620      	mov	r0, r4
 8004b18:	4629      	mov	r1, r5
 8004b1a:	f7fb ffed 	bl	8000af8 <__aeabi_dcmpeq>
 8004b1e:	b918      	cbnz	r0, 8004b28 <__cvt+0x8c>
 8004b20:	f1c6 0601 	rsb	r6, r6, #1
 8004b24:	f8ca 6000 	str.w	r6, [sl]
 8004b28:	f8da 3000 	ldr.w	r3, [sl]
 8004b2c:	4499      	add	r9, r3
 8004b2e:	2200      	movs	r2, #0
 8004b30:	2300      	movs	r3, #0
 8004b32:	4620      	mov	r0, r4
 8004b34:	4629      	mov	r1, r5
 8004b36:	f7fb ffdf 	bl	8000af8 <__aeabi_dcmpeq>
 8004b3a:	b108      	cbz	r0, 8004b40 <__cvt+0xa4>
 8004b3c:	f8cd 900c 	str.w	r9, [sp, #12]
 8004b40:	2230      	movs	r2, #48	; 0x30
 8004b42:	9b03      	ldr	r3, [sp, #12]
 8004b44:	454b      	cmp	r3, r9
 8004b46:	d307      	bcc.n	8004b58 <__cvt+0xbc>
 8004b48:	9b03      	ldr	r3, [sp, #12]
 8004b4a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004b4c:	1bdb      	subs	r3, r3, r7
 8004b4e:	4638      	mov	r0, r7
 8004b50:	6013      	str	r3, [r2, #0]
 8004b52:	b004      	add	sp, #16
 8004b54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b58:	1c59      	adds	r1, r3, #1
 8004b5a:	9103      	str	r1, [sp, #12]
 8004b5c:	701a      	strb	r2, [r3, #0]
 8004b5e:	e7f0      	b.n	8004b42 <__cvt+0xa6>

08004b60 <__exponent>:
 8004b60:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004b62:	4603      	mov	r3, r0
 8004b64:	2900      	cmp	r1, #0
 8004b66:	bfb8      	it	lt
 8004b68:	4249      	neglt	r1, r1
 8004b6a:	f803 2b02 	strb.w	r2, [r3], #2
 8004b6e:	bfb4      	ite	lt
 8004b70:	222d      	movlt	r2, #45	; 0x2d
 8004b72:	222b      	movge	r2, #43	; 0x2b
 8004b74:	2909      	cmp	r1, #9
 8004b76:	7042      	strb	r2, [r0, #1]
 8004b78:	dd2a      	ble.n	8004bd0 <__exponent+0x70>
 8004b7a:	f10d 0407 	add.w	r4, sp, #7
 8004b7e:	46a4      	mov	ip, r4
 8004b80:	270a      	movs	r7, #10
 8004b82:	46a6      	mov	lr, r4
 8004b84:	460a      	mov	r2, r1
 8004b86:	fb91 f6f7 	sdiv	r6, r1, r7
 8004b8a:	fb07 1516 	mls	r5, r7, r6, r1
 8004b8e:	3530      	adds	r5, #48	; 0x30
 8004b90:	2a63      	cmp	r2, #99	; 0x63
 8004b92:	f104 34ff 	add.w	r4, r4, #4294967295
 8004b96:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8004b9a:	4631      	mov	r1, r6
 8004b9c:	dcf1      	bgt.n	8004b82 <__exponent+0x22>
 8004b9e:	3130      	adds	r1, #48	; 0x30
 8004ba0:	f1ae 0502 	sub.w	r5, lr, #2
 8004ba4:	f804 1c01 	strb.w	r1, [r4, #-1]
 8004ba8:	1c44      	adds	r4, r0, #1
 8004baa:	4629      	mov	r1, r5
 8004bac:	4561      	cmp	r1, ip
 8004bae:	d30a      	bcc.n	8004bc6 <__exponent+0x66>
 8004bb0:	f10d 0209 	add.w	r2, sp, #9
 8004bb4:	eba2 020e 	sub.w	r2, r2, lr
 8004bb8:	4565      	cmp	r5, ip
 8004bba:	bf88      	it	hi
 8004bbc:	2200      	movhi	r2, #0
 8004bbe:	4413      	add	r3, r2
 8004bc0:	1a18      	subs	r0, r3, r0
 8004bc2:	b003      	add	sp, #12
 8004bc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004bc6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004bca:	f804 2f01 	strb.w	r2, [r4, #1]!
 8004bce:	e7ed      	b.n	8004bac <__exponent+0x4c>
 8004bd0:	2330      	movs	r3, #48	; 0x30
 8004bd2:	3130      	adds	r1, #48	; 0x30
 8004bd4:	7083      	strb	r3, [r0, #2]
 8004bd6:	70c1      	strb	r1, [r0, #3]
 8004bd8:	1d03      	adds	r3, r0, #4
 8004bda:	e7f1      	b.n	8004bc0 <__exponent+0x60>

08004bdc <_printf_float>:
 8004bdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004be0:	ed2d 8b02 	vpush	{d8}
 8004be4:	b08d      	sub	sp, #52	; 0x34
 8004be6:	460c      	mov	r4, r1
 8004be8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8004bec:	4616      	mov	r6, r2
 8004bee:	461f      	mov	r7, r3
 8004bf0:	4605      	mov	r5, r0
 8004bf2:	f002 ff1f 	bl	8007a34 <_localeconv_r>
 8004bf6:	f8d0 a000 	ldr.w	sl, [r0]
 8004bfa:	4650      	mov	r0, sl
 8004bfc:	f7fb fafa 	bl	80001f4 <strlen>
 8004c00:	2300      	movs	r3, #0
 8004c02:	930a      	str	r3, [sp, #40]	; 0x28
 8004c04:	6823      	ldr	r3, [r4, #0]
 8004c06:	9305      	str	r3, [sp, #20]
 8004c08:	f8d8 3000 	ldr.w	r3, [r8]
 8004c0c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8004c10:	3307      	adds	r3, #7
 8004c12:	f023 0307 	bic.w	r3, r3, #7
 8004c16:	f103 0208 	add.w	r2, r3, #8
 8004c1a:	f8c8 2000 	str.w	r2, [r8]
 8004c1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c22:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8004c26:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8004c2a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8004c2e:	9307      	str	r3, [sp, #28]
 8004c30:	f8cd 8018 	str.w	r8, [sp, #24]
 8004c34:	ee08 0a10 	vmov	s16, r0
 8004c38:	4b9f      	ldr	r3, [pc, #636]	; (8004eb8 <_printf_float+0x2dc>)
 8004c3a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004c3e:	f04f 32ff 	mov.w	r2, #4294967295
 8004c42:	f7fb ff8b 	bl	8000b5c <__aeabi_dcmpun>
 8004c46:	bb88      	cbnz	r0, 8004cac <_printf_float+0xd0>
 8004c48:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004c4c:	4b9a      	ldr	r3, [pc, #616]	; (8004eb8 <_printf_float+0x2dc>)
 8004c4e:	f04f 32ff 	mov.w	r2, #4294967295
 8004c52:	f7fb ff65 	bl	8000b20 <__aeabi_dcmple>
 8004c56:	bb48      	cbnz	r0, 8004cac <_printf_float+0xd0>
 8004c58:	2200      	movs	r2, #0
 8004c5a:	2300      	movs	r3, #0
 8004c5c:	4640      	mov	r0, r8
 8004c5e:	4649      	mov	r1, r9
 8004c60:	f7fb ff54 	bl	8000b0c <__aeabi_dcmplt>
 8004c64:	b110      	cbz	r0, 8004c6c <_printf_float+0x90>
 8004c66:	232d      	movs	r3, #45	; 0x2d
 8004c68:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004c6c:	4b93      	ldr	r3, [pc, #588]	; (8004ebc <_printf_float+0x2e0>)
 8004c6e:	4894      	ldr	r0, [pc, #592]	; (8004ec0 <_printf_float+0x2e4>)
 8004c70:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8004c74:	bf94      	ite	ls
 8004c76:	4698      	movls	r8, r3
 8004c78:	4680      	movhi	r8, r0
 8004c7a:	2303      	movs	r3, #3
 8004c7c:	6123      	str	r3, [r4, #16]
 8004c7e:	9b05      	ldr	r3, [sp, #20]
 8004c80:	f023 0204 	bic.w	r2, r3, #4
 8004c84:	6022      	str	r2, [r4, #0]
 8004c86:	f04f 0900 	mov.w	r9, #0
 8004c8a:	9700      	str	r7, [sp, #0]
 8004c8c:	4633      	mov	r3, r6
 8004c8e:	aa0b      	add	r2, sp, #44	; 0x2c
 8004c90:	4621      	mov	r1, r4
 8004c92:	4628      	mov	r0, r5
 8004c94:	f000 f9d8 	bl	8005048 <_printf_common>
 8004c98:	3001      	adds	r0, #1
 8004c9a:	f040 8090 	bne.w	8004dbe <_printf_float+0x1e2>
 8004c9e:	f04f 30ff 	mov.w	r0, #4294967295
 8004ca2:	b00d      	add	sp, #52	; 0x34
 8004ca4:	ecbd 8b02 	vpop	{d8}
 8004ca8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004cac:	4642      	mov	r2, r8
 8004cae:	464b      	mov	r3, r9
 8004cb0:	4640      	mov	r0, r8
 8004cb2:	4649      	mov	r1, r9
 8004cb4:	f7fb ff52 	bl	8000b5c <__aeabi_dcmpun>
 8004cb8:	b140      	cbz	r0, 8004ccc <_printf_float+0xf0>
 8004cba:	464b      	mov	r3, r9
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	bfbc      	itt	lt
 8004cc0:	232d      	movlt	r3, #45	; 0x2d
 8004cc2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8004cc6:	487f      	ldr	r0, [pc, #508]	; (8004ec4 <_printf_float+0x2e8>)
 8004cc8:	4b7f      	ldr	r3, [pc, #508]	; (8004ec8 <_printf_float+0x2ec>)
 8004cca:	e7d1      	b.n	8004c70 <_printf_float+0x94>
 8004ccc:	6863      	ldr	r3, [r4, #4]
 8004cce:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8004cd2:	9206      	str	r2, [sp, #24]
 8004cd4:	1c5a      	adds	r2, r3, #1
 8004cd6:	d13f      	bne.n	8004d58 <_printf_float+0x17c>
 8004cd8:	2306      	movs	r3, #6
 8004cda:	6063      	str	r3, [r4, #4]
 8004cdc:	9b05      	ldr	r3, [sp, #20]
 8004cde:	6861      	ldr	r1, [r4, #4]
 8004ce0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8004ce4:	2300      	movs	r3, #0
 8004ce6:	9303      	str	r3, [sp, #12]
 8004ce8:	ab0a      	add	r3, sp, #40	; 0x28
 8004cea:	e9cd b301 	strd	fp, r3, [sp, #4]
 8004cee:	ab09      	add	r3, sp, #36	; 0x24
 8004cf0:	ec49 8b10 	vmov	d0, r8, r9
 8004cf4:	9300      	str	r3, [sp, #0]
 8004cf6:	6022      	str	r2, [r4, #0]
 8004cf8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8004cfc:	4628      	mov	r0, r5
 8004cfe:	f7ff fecd 	bl	8004a9c <__cvt>
 8004d02:	9b06      	ldr	r3, [sp, #24]
 8004d04:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004d06:	2b47      	cmp	r3, #71	; 0x47
 8004d08:	4680      	mov	r8, r0
 8004d0a:	d108      	bne.n	8004d1e <_printf_float+0x142>
 8004d0c:	1cc8      	adds	r0, r1, #3
 8004d0e:	db02      	blt.n	8004d16 <_printf_float+0x13a>
 8004d10:	6863      	ldr	r3, [r4, #4]
 8004d12:	4299      	cmp	r1, r3
 8004d14:	dd41      	ble.n	8004d9a <_printf_float+0x1be>
 8004d16:	f1ab 0b02 	sub.w	fp, fp, #2
 8004d1a:	fa5f fb8b 	uxtb.w	fp, fp
 8004d1e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8004d22:	d820      	bhi.n	8004d66 <_printf_float+0x18a>
 8004d24:	3901      	subs	r1, #1
 8004d26:	465a      	mov	r2, fp
 8004d28:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004d2c:	9109      	str	r1, [sp, #36]	; 0x24
 8004d2e:	f7ff ff17 	bl	8004b60 <__exponent>
 8004d32:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004d34:	1813      	adds	r3, r2, r0
 8004d36:	2a01      	cmp	r2, #1
 8004d38:	4681      	mov	r9, r0
 8004d3a:	6123      	str	r3, [r4, #16]
 8004d3c:	dc02      	bgt.n	8004d44 <_printf_float+0x168>
 8004d3e:	6822      	ldr	r2, [r4, #0]
 8004d40:	07d2      	lsls	r2, r2, #31
 8004d42:	d501      	bpl.n	8004d48 <_printf_float+0x16c>
 8004d44:	3301      	adds	r3, #1
 8004d46:	6123      	str	r3, [r4, #16]
 8004d48:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d09c      	beq.n	8004c8a <_printf_float+0xae>
 8004d50:	232d      	movs	r3, #45	; 0x2d
 8004d52:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004d56:	e798      	b.n	8004c8a <_printf_float+0xae>
 8004d58:	9a06      	ldr	r2, [sp, #24]
 8004d5a:	2a47      	cmp	r2, #71	; 0x47
 8004d5c:	d1be      	bne.n	8004cdc <_printf_float+0x100>
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d1bc      	bne.n	8004cdc <_printf_float+0x100>
 8004d62:	2301      	movs	r3, #1
 8004d64:	e7b9      	b.n	8004cda <_printf_float+0xfe>
 8004d66:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8004d6a:	d118      	bne.n	8004d9e <_printf_float+0x1c2>
 8004d6c:	2900      	cmp	r1, #0
 8004d6e:	6863      	ldr	r3, [r4, #4]
 8004d70:	dd0b      	ble.n	8004d8a <_printf_float+0x1ae>
 8004d72:	6121      	str	r1, [r4, #16]
 8004d74:	b913      	cbnz	r3, 8004d7c <_printf_float+0x1a0>
 8004d76:	6822      	ldr	r2, [r4, #0]
 8004d78:	07d0      	lsls	r0, r2, #31
 8004d7a:	d502      	bpl.n	8004d82 <_printf_float+0x1a6>
 8004d7c:	3301      	adds	r3, #1
 8004d7e:	440b      	add	r3, r1
 8004d80:	6123      	str	r3, [r4, #16]
 8004d82:	65a1      	str	r1, [r4, #88]	; 0x58
 8004d84:	f04f 0900 	mov.w	r9, #0
 8004d88:	e7de      	b.n	8004d48 <_printf_float+0x16c>
 8004d8a:	b913      	cbnz	r3, 8004d92 <_printf_float+0x1b6>
 8004d8c:	6822      	ldr	r2, [r4, #0]
 8004d8e:	07d2      	lsls	r2, r2, #31
 8004d90:	d501      	bpl.n	8004d96 <_printf_float+0x1ba>
 8004d92:	3302      	adds	r3, #2
 8004d94:	e7f4      	b.n	8004d80 <_printf_float+0x1a4>
 8004d96:	2301      	movs	r3, #1
 8004d98:	e7f2      	b.n	8004d80 <_printf_float+0x1a4>
 8004d9a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8004d9e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004da0:	4299      	cmp	r1, r3
 8004da2:	db05      	blt.n	8004db0 <_printf_float+0x1d4>
 8004da4:	6823      	ldr	r3, [r4, #0]
 8004da6:	6121      	str	r1, [r4, #16]
 8004da8:	07d8      	lsls	r0, r3, #31
 8004daa:	d5ea      	bpl.n	8004d82 <_printf_float+0x1a6>
 8004dac:	1c4b      	adds	r3, r1, #1
 8004dae:	e7e7      	b.n	8004d80 <_printf_float+0x1a4>
 8004db0:	2900      	cmp	r1, #0
 8004db2:	bfd4      	ite	le
 8004db4:	f1c1 0202 	rsble	r2, r1, #2
 8004db8:	2201      	movgt	r2, #1
 8004dba:	4413      	add	r3, r2
 8004dbc:	e7e0      	b.n	8004d80 <_printf_float+0x1a4>
 8004dbe:	6823      	ldr	r3, [r4, #0]
 8004dc0:	055a      	lsls	r2, r3, #21
 8004dc2:	d407      	bmi.n	8004dd4 <_printf_float+0x1f8>
 8004dc4:	6923      	ldr	r3, [r4, #16]
 8004dc6:	4642      	mov	r2, r8
 8004dc8:	4631      	mov	r1, r6
 8004dca:	4628      	mov	r0, r5
 8004dcc:	47b8      	blx	r7
 8004dce:	3001      	adds	r0, #1
 8004dd0:	d12c      	bne.n	8004e2c <_printf_float+0x250>
 8004dd2:	e764      	b.n	8004c9e <_printf_float+0xc2>
 8004dd4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8004dd8:	f240 80e0 	bls.w	8004f9c <_printf_float+0x3c0>
 8004ddc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004de0:	2200      	movs	r2, #0
 8004de2:	2300      	movs	r3, #0
 8004de4:	f7fb fe88 	bl	8000af8 <__aeabi_dcmpeq>
 8004de8:	2800      	cmp	r0, #0
 8004dea:	d034      	beq.n	8004e56 <_printf_float+0x27a>
 8004dec:	4a37      	ldr	r2, [pc, #220]	; (8004ecc <_printf_float+0x2f0>)
 8004dee:	2301      	movs	r3, #1
 8004df0:	4631      	mov	r1, r6
 8004df2:	4628      	mov	r0, r5
 8004df4:	47b8      	blx	r7
 8004df6:	3001      	adds	r0, #1
 8004df8:	f43f af51 	beq.w	8004c9e <_printf_float+0xc2>
 8004dfc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004e00:	429a      	cmp	r2, r3
 8004e02:	db02      	blt.n	8004e0a <_printf_float+0x22e>
 8004e04:	6823      	ldr	r3, [r4, #0]
 8004e06:	07d8      	lsls	r0, r3, #31
 8004e08:	d510      	bpl.n	8004e2c <_printf_float+0x250>
 8004e0a:	ee18 3a10 	vmov	r3, s16
 8004e0e:	4652      	mov	r2, sl
 8004e10:	4631      	mov	r1, r6
 8004e12:	4628      	mov	r0, r5
 8004e14:	47b8      	blx	r7
 8004e16:	3001      	adds	r0, #1
 8004e18:	f43f af41 	beq.w	8004c9e <_printf_float+0xc2>
 8004e1c:	f04f 0800 	mov.w	r8, #0
 8004e20:	f104 091a 	add.w	r9, r4, #26
 8004e24:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004e26:	3b01      	subs	r3, #1
 8004e28:	4543      	cmp	r3, r8
 8004e2a:	dc09      	bgt.n	8004e40 <_printf_float+0x264>
 8004e2c:	6823      	ldr	r3, [r4, #0]
 8004e2e:	079b      	lsls	r3, r3, #30
 8004e30:	f100 8105 	bmi.w	800503e <_printf_float+0x462>
 8004e34:	68e0      	ldr	r0, [r4, #12]
 8004e36:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004e38:	4298      	cmp	r0, r3
 8004e3a:	bfb8      	it	lt
 8004e3c:	4618      	movlt	r0, r3
 8004e3e:	e730      	b.n	8004ca2 <_printf_float+0xc6>
 8004e40:	2301      	movs	r3, #1
 8004e42:	464a      	mov	r2, r9
 8004e44:	4631      	mov	r1, r6
 8004e46:	4628      	mov	r0, r5
 8004e48:	47b8      	blx	r7
 8004e4a:	3001      	adds	r0, #1
 8004e4c:	f43f af27 	beq.w	8004c9e <_printf_float+0xc2>
 8004e50:	f108 0801 	add.w	r8, r8, #1
 8004e54:	e7e6      	b.n	8004e24 <_printf_float+0x248>
 8004e56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	dc39      	bgt.n	8004ed0 <_printf_float+0x2f4>
 8004e5c:	4a1b      	ldr	r2, [pc, #108]	; (8004ecc <_printf_float+0x2f0>)
 8004e5e:	2301      	movs	r3, #1
 8004e60:	4631      	mov	r1, r6
 8004e62:	4628      	mov	r0, r5
 8004e64:	47b8      	blx	r7
 8004e66:	3001      	adds	r0, #1
 8004e68:	f43f af19 	beq.w	8004c9e <_printf_float+0xc2>
 8004e6c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004e70:	4313      	orrs	r3, r2
 8004e72:	d102      	bne.n	8004e7a <_printf_float+0x29e>
 8004e74:	6823      	ldr	r3, [r4, #0]
 8004e76:	07d9      	lsls	r1, r3, #31
 8004e78:	d5d8      	bpl.n	8004e2c <_printf_float+0x250>
 8004e7a:	ee18 3a10 	vmov	r3, s16
 8004e7e:	4652      	mov	r2, sl
 8004e80:	4631      	mov	r1, r6
 8004e82:	4628      	mov	r0, r5
 8004e84:	47b8      	blx	r7
 8004e86:	3001      	adds	r0, #1
 8004e88:	f43f af09 	beq.w	8004c9e <_printf_float+0xc2>
 8004e8c:	f04f 0900 	mov.w	r9, #0
 8004e90:	f104 0a1a 	add.w	sl, r4, #26
 8004e94:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004e96:	425b      	negs	r3, r3
 8004e98:	454b      	cmp	r3, r9
 8004e9a:	dc01      	bgt.n	8004ea0 <_printf_float+0x2c4>
 8004e9c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004e9e:	e792      	b.n	8004dc6 <_printf_float+0x1ea>
 8004ea0:	2301      	movs	r3, #1
 8004ea2:	4652      	mov	r2, sl
 8004ea4:	4631      	mov	r1, r6
 8004ea6:	4628      	mov	r0, r5
 8004ea8:	47b8      	blx	r7
 8004eaa:	3001      	adds	r0, #1
 8004eac:	f43f aef7 	beq.w	8004c9e <_printf_float+0xc2>
 8004eb0:	f109 0901 	add.w	r9, r9, #1
 8004eb4:	e7ee      	b.n	8004e94 <_printf_float+0x2b8>
 8004eb6:	bf00      	nop
 8004eb8:	7fefffff 	.word	0x7fefffff
 8004ebc:	08009efc 	.word	0x08009efc
 8004ec0:	08009f00 	.word	0x08009f00
 8004ec4:	08009f08 	.word	0x08009f08
 8004ec8:	08009f04 	.word	0x08009f04
 8004ecc:	0800a301 	.word	0x0800a301
 8004ed0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004ed2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004ed4:	429a      	cmp	r2, r3
 8004ed6:	bfa8      	it	ge
 8004ed8:	461a      	movge	r2, r3
 8004eda:	2a00      	cmp	r2, #0
 8004edc:	4691      	mov	r9, r2
 8004ede:	dc37      	bgt.n	8004f50 <_printf_float+0x374>
 8004ee0:	f04f 0b00 	mov.w	fp, #0
 8004ee4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004ee8:	f104 021a 	add.w	r2, r4, #26
 8004eec:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004eee:	9305      	str	r3, [sp, #20]
 8004ef0:	eba3 0309 	sub.w	r3, r3, r9
 8004ef4:	455b      	cmp	r3, fp
 8004ef6:	dc33      	bgt.n	8004f60 <_printf_float+0x384>
 8004ef8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004efc:	429a      	cmp	r2, r3
 8004efe:	db3b      	blt.n	8004f78 <_printf_float+0x39c>
 8004f00:	6823      	ldr	r3, [r4, #0]
 8004f02:	07da      	lsls	r2, r3, #31
 8004f04:	d438      	bmi.n	8004f78 <_printf_float+0x39c>
 8004f06:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004f08:	9a05      	ldr	r2, [sp, #20]
 8004f0a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004f0c:	1a9a      	subs	r2, r3, r2
 8004f0e:	eba3 0901 	sub.w	r9, r3, r1
 8004f12:	4591      	cmp	r9, r2
 8004f14:	bfa8      	it	ge
 8004f16:	4691      	movge	r9, r2
 8004f18:	f1b9 0f00 	cmp.w	r9, #0
 8004f1c:	dc35      	bgt.n	8004f8a <_printf_float+0x3ae>
 8004f1e:	f04f 0800 	mov.w	r8, #0
 8004f22:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004f26:	f104 0a1a 	add.w	sl, r4, #26
 8004f2a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004f2e:	1a9b      	subs	r3, r3, r2
 8004f30:	eba3 0309 	sub.w	r3, r3, r9
 8004f34:	4543      	cmp	r3, r8
 8004f36:	f77f af79 	ble.w	8004e2c <_printf_float+0x250>
 8004f3a:	2301      	movs	r3, #1
 8004f3c:	4652      	mov	r2, sl
 8004f3e:	4631      	mov	r1, r6
 8004f40:	4628      	mov	r0, r5
 8004f42:	47b8      	blx	r7
 8004f44:	3001      	adds	r0, #1
 8004f46:	f43f aeaa 	beq.w	8004c9e <_printf_float+0xc2>
 8004f4a:	f108 0801 	add.w	r8, r8, #1
 8004f4e:	e7ec      	b.n	8004f2a <_printf_float+0x34e>
 8004f50:	4613      	mov	r3, r2
 8004f52:	4631      	mov	r1, r6
 8004f54:	4642      	mov	r2, r8
 8004f56:	4628      	mov	r0, r5
 8004f58:	47b8      	blx	r7
 8004f5a:	3001      	adds	r0, #1
 8004f5c:	d1c0      	bne.n	8004ee0 <_printf_float+0x304>
 8004f5e:	e69e      	b.n	8004c9e <_printf_float+0xc2>
 8004f60:	2301      	movs	r3, #1
 8004f62:	4631      	mov	r1, r6
 8004f64:	4628      	mov	r0, r5
 8004f66:	9205      	str	r2, [sp, #20]
 8004f68:	47b8      	blx	r7
 8004f6a:	3001      	adds	r0, #1
 8004f6c:	f43f ae97 	beq.w	8004c9e <_printf_float+0xc2>
 8004f70:	9a05      	ldr	r2, [sp, #20]
 8004f72:	f10b 0b01 	add.w	fp, fp, #1
 8004f76:	e7b9      	b.n	8004eec <_printf_float+0x310>
 8004f78:	ee18 3a10 	vmov	r3, s16
 8004f7c:	4652      	mov	r2, sl
 8004f7e:	4631      	mov	r1, r6
 8004f80:	4628      	mov	r0, r5
 8004f82:	47b8      	blx	r7
 8004f84:	3001      	adds	r0, #1
 8004f86:	d1be      	bne.n	8004f06 <_printf_float+0x32a>
 8004f88:	e689      	b.n	8004c9e <_printf_float+0xc2>
 8004f8a:	9a05      	ldr	r2, [sp, #20]
 8004f8c:	464b      	mov	r3, r9
 8004f8e:	4442      	add	r2, r8
 8004f90:	4631      	mov	r1, r6
 8004f92:	4628      	mov	r0, r5
 8004f94:	47b8      	blx	r7
 8004f96:	3001      	adds	r0, #1
 8004f98:	d1c1      	bne.n	8004f1e <_printf_float+0x342>
 8004f9a:	e680      	b.n	8004c9e <_printf_float+0xc2>
 8004f9c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004f9e:	2a01      	cmp	r2, #1
 8004fa0:	dc01      	bgt.n	8004fa6 <_printf_float+0x3ca>
 8004fa2:	07db      	lsls	r3, r3, #31
 8004fa4:	d538      	bpl.n	8005018 <_printf_float+0x43c>
 8004fa6:	2301      	movs	r3, #1
 8004fa8:	4642      	mov	r2, r8
 8004faa:	4631      	mov	r1, r6
 8004fac:	4628      	mov	r0, r5
 8004fae:	47b8      	blx	r7
 8004fb0:	3001      	adds	r0, #1
 8004fb2:	f43f ae74 	beq.w	8004c9e <_printf_float+0xc2>
 8004fb6:	ee18 3a10 	vmov	r3, s16
 8004fba:	4652      	mov	r2, sl
 8004fbc:	4631      	mov	r1, r6
 8004fbe:	4628      	mov	r0, r5
 8004fc0:	47b8      	blx	r7
 8004fc2:	3001      	adds	r0, #1
 8004fc4:	f43f ae6b 	beq.w	8004c9e <_printf_float+0xc2>
 8004fc8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004fcc:	2200      	movs	r2, #0
 8004fce:	2300      	movs	r3, #0
 8004fd0:	f7fb fd92 	bl	8000af8 <__aeabi_dcmpeq>
 8004fd4:	b9d8      	cbnz	r0, 800500e <_printf_float+0x432>
 8004fd6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004fd8:	f108 0201 	add.w	r2, r8, #1
 8004fdc:	3b01      	subs	r3, #1
 8004fde:	4631      	mov	r1, r6
 8004fe0:	4628      	mov	r0, r5
 8004fe2:	47b8      	blx	r7
 8004fe4:	3001      	adds	r0, #1
 8004fe6:	d10e      	bne.n	8005006 <_printf_float+0x42a>
 8004fe8:	e659      	b.n	8004c9e <_printf_float+0xc2>
 8004fea:	2301      	movs	r3, #1
 8004fec:	4652      	mov	r2, sl
 8004fee:	4631      	mov	r1, r6
 8004ff0:	4628      	mov	r0, r5
 8004ff2:	47b8      	blx	r7
 8004ff4:	3001      	adds	r0, #1
 8004ff6:	f43f ae52 	beq.w	8004c9e <_printf_float+0xc2>
 8004ffa:	f108 0801 	add.w	r8, r8, #1
 8004ffe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005000:	3b01      	subs	r3, #1
 8005002:	4543      	cmp	r3, r8
 8005004:	dcf1      	bgt.n	8004fea <_printf_float+0x40e>
 8005006:	464b      	mov	r3, r9
 8005008:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800500c:	e6dc      	b.n	8004dc8 <_printf_float+0x1ec>
 800500e:	f04f 0800 	mov.w	r8, #0
 8005012:	f104 0a1a 	add.w	sl, r4, #26
 8005016:	e7f2      	b.n	8004ffe <_printf_float+0x422>
 8005018:	2301      	movs	r3, #1
 800501a:	4642      	mov	r2, r8
 800501c:	e7df      	b.n	8004fde <_printf_float+0x402>
 800501e:	2301      	movs	r3, #1
 8005020:	464a      	mov	r2, r9
 8005022:	4631      	mov	r1, r6
 8005024:	4628      	mov	r0, r5
 8005026:	47b8      	blx	r7
 8005028:	3001      	adds	r0, #1
 800502a:	f43f ae38 	beq.w	8004c9e <_printf_float+0xc2>
 800502e:	f108 0801 	add.w	r8, r8, #1
 8005032:	68e3      	ldr	r3, [r4, #12]
 8005034:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005036:	1a5b      	subs	r3, r3, r1
 8005038:	4543      	cmp	r3, r8
 800503a:	dcf0      	bgt.n	800501e <_printf_float+0x442>
 800503c:	e6fa      	b.n	8004e34 <_printf_float+0x258>
 800503e:	f04f 0800 	mov.w	r8, #0
 8005042:	f104 0919 	add.w	r9, r4, #25
 8005046:	e7f4      	b.n	8005032 <_printf_float+0x456>

08005048 <_printf_common>:
 8005048:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800504c:	4616      	mov	r6, r2
 800504e:	4699      	mov	r9, r3
 8005050:	688a      	ldr	r2, [r1, #8]
 8005052:	690b      	ldr	r3, [r1, #16]
 8005054:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005058:	4293      	cmp	r3, r2
 800505a:	bfb8      	it	lt
 800505c:	4613      	movlt	r3, r2
 800505e:	6033      	str	r3, [r6, #0]
 8005060:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005064:	4607      	mov	r7, r0
 8005066:	460c      	mov	r4, r1
 8005068:	b10a      	cbz	r2, 800506e <_printf_common+0x26>
 800506a:	3301      	adds	r3, #1
 800506c:	6033      	str	r3, [r6, #0]
 800506e:	6823      	ldr	r3, [r4, #0]
 8005070:	0699      	lsls	r1, r3, #26
 8005072:	bf42      	ittt	mi
 8005074:	6833      	ldrmi	r3, [r6, #0]
 8005076:	3302      	addmi	r3, #2
 8005078:	6033      	strmi	r3, [r6, #0]
 800507a:	6825      	ldr	r5, [r4, #0]
 800507c:	f015 0506 	ands.w	r5, r5, #6
 8005080:	d106      	bne.n	8005090 <_printf_common+0x48>
 8005082:	f104 0a19 	add.w	sl, r4, #25
 8005086:	68e3      	ldr	r3, [r4, #12]
 8005088:	6832      	ldr	r2, [r6, #0]
 800508a:	1a9b      	subs	r3, r3, r2
 800508c:	42ab      	cmp	r3, r5
 800508e:	dc26      	bgt.n	80050de <_printf_common+0x96>
 8005090:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005094:	1e13      	subs	r3, r2, #0
 8005096:	6822      	ldr	r2, [r4, #0]
 8005098:	bf18      	it	ne
 800509a:	2301      	movne	r3, #1
 800509c:	0692      	lsls	r2, r2, #26
 800509e:	d42b      	bmi.n	80050f8 <_printf_common+0xb0>
 80050a0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80050a4:	4649      	mov	r1, r9
 80050a6:	4638      	mov	r0, r7
 80050a8:	47c0      	blx	r8
 80050aa:	3001      	adds	r0, #1
 80050ac:	d01e      	beq.n	80050ec <_printf_common+0xa4>
 80050ae:	6823      	ldr	r3, [r4, #0]
 80050b0:	68e5      	ldr	r5, [r4, #12]
 80050b2:	6832      	ldr	r2, [r6, #0]
 80050b4:	f003 0306 	and.w	r3, r3, #6
 80050b8:	2b04      	cmp	r3, #4
 80050ba:	bf08      	it	eq
 80050bc:	1aad      	subeq	r5, r5, r2
 80050be:	68a3      	ldr	r3, [r4, #8]
 80050c0:	6922      	ldr	r2, [r4, #16]
 80050c2:	bf0c      	ite	eq
 80050c4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80050c8:	2500      	movne	r5, #0
 80050ca:	4293      	cmp	r3, r2
 80050cc:	bfc4      	itt	gt
 80050ce:	1a9b      	subgt	r3, r3, r2
 80050d0:	18ed      	addgt	r5, r5, r3
 80050d2:	2600      	movs	r6, #0
 80050d4:	341a      	adds	r4, #26
 80050d6:	42b5      	cmp	r5, r6
 80050d8:	d11a      	bne.n	8005110 <_printf_common+0xc8>
 80050da:	2000      	movs	r0, #0
 80050dc:	e008      	b.n	80050f0 <_printf_common+0xa8>
 80050de:	2301      	movs	r3, #1
 80050e0:	4652      	mov	r2, sl
 80050e2:	4649      	mov	r1, r9
 80050e4:	4638      	mov	r0, r7
 80050e6:	47c0      	blx	r8
 80050e8:	3001      	adds	r0, #1
 80050ea:	d103      	bne.n	80050f4 <_printf_common+0xac>
 80050ec:	f04f 30ff 	mov.w	r0, #4294967295
 80050f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80050f4:	3501      	adds	r5, #1
 80050f6:	e7c6      	b.n	8005086 <_printf_common+0x3e>
 80050f8:	18e1      	adds	r1, r4, r3
 80050fa:	1c5a      	adds	r2, r3, #1
 80050fc:	2030      	movs	r0, #48	; 0x30
 80050fe:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005102:	4422      	add	r2, r4
 8005104:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005108:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800510c:	3302      	adds	r3, #2
 800510e:	e7c7      	b.n	80050a0 <_printf_common+0x58>
 8005110:	2301      	movs	r3, #1
 8005112:	4622      	mov	r2, r4
 8005114:	4649      	mov	r1, r9
 8005116:	4638      	mov	r0, r7
 8005118:	47c0      	blx	r8
 800511a:	3001      	adds	r0, #1
 800511c:	d0e6      	beq.n	80050ec <_printf_common+0xa4>
 800511e:	3601      	adds	r6, #1
 8005120:	e7d9      	b.n	80050d6 <_printf_common+0x8e>
	...

08005124 <_printf_i>:
 8005124:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005128:	7e0f      	ldrb	r7, [r1, #24]
 800512a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800512c:	2f78      	cmp	r7, #120	; 0x78
 800512e:	4691      	mov	r9, r2
 8005130:	4680      	mov	r8, r0
 8005132:	460c      	mov	r4, r1
 8005134:	469a      	mov	sl, r3
 8005136:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800513a:	d807      	bhi.n	800514c <_printf_i+0x28>
 800513c:	2f62      	cmp	r7, #98	; 0x62
 800513e:	d80a      	bhi.n	8005156 <_printf_i+0x32>
 8005140:	2f00      	cmp	r7, #0
 8005142:	f000 80d8 	beq.w	80052f6 <_printf_i+0x1d2>
 8005146:	2f58      	cmp	r7, #88	; 0x58
 8005148:	f000 80a3 	beq.w	8005292 <_printf_i+0x16e>
 800514c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005150:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005154:	e03a      	b.n	80051cc <_printf_i+0xa8>
 8005156:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800515a:	2b15      	cmp	r3, #21
 800515c:	d8f6      	bhi.n	800514c <_printf_i+0x28>
 800515e:	a101      	add	r1, pc, #4	; (adr r1, 8005164 <_printf_i+0x40>)
 8005160:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005164:	080051bd 	.word	0x080051bd
 8005168:	080051d1 	.word	0x080051d1
 800516c:	0800514d 	.word	0x0800514d
 8005170:	0800514d 	.word	0x0800514d
 8005174:	0800514d 	.word	0x0800514d
 8005178:	0800514d 	.word	0x0800514d
 800517c:	080051d1 	.word	0x080051d1
 8005180:	0800514d 	.word	0x0800514d
 8005184:	0800514d 	.word	0x0800514d
 8005188:	0800514d 	.word	0x0800514d
 800518c:	0800514d 	.word	0x0800514d
 8005190:	080052dd 	.word	0x080052dd
 8005194:	08005201 	.word	0x08005201
 8005198:	080052bf 	.word	0x080052bf
 800519c:	0800514d 	.word	0x0800514d
 80051a0:	0800514d 	.word	0x0800514d
 80051a4:	080052ff 	.word	0x080052ff
 80051a8:	0800514d 	.word	0x0800514d
 80051ac:	08005201 	.word	0x08005201
 80051b0:	0800514d 	.word	0x0800514d
 80051b4:	0800514d 	.word	0x0800514d
 80051b8:	080052c7 	.word	0x080052c7
 80051bc:	682b      	ldr	r3, [r5, #0]
 80051be:	1d1a      	adds	r2, r3, #4
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	602a      	str	r2, [r5, #0]
 80051c4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80051c8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80051cc:	2301      	movs	r3, #1
 80051ce:	e0a3      	b.n	8005318 <_printf_i+0x1f4>
 80051d0:	6820      	ldr	r0, [r4, #0]
 80051d2:	6829      	ldr	r1, [r5, #0]
 80051d4:	0606      	lsls	r6, r0, #24
 80051d6:	f101 0304 	add.w	r3, r1, #4
 80051da:	d50a      	bpl.n	80051f2 <_printf_i+0xce>
 80051dc:	680e      	ldr	r6, [r1, #0]
 80051de:	602b      	str	r3, [r5, #0]
 80051e0:	2e00      	cmp	r6, #0
 80051e2:	da03      	bge.n	80051ec <_printf_i+0xc8>
 80051e4:	232d      	movs	r3, #45	; 0x2d
 80051e6:	4276      	negs	r6, r6
 80051e8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80051ec:	485e      	ldr	r0, [pc, #376]	; (8005368 <_printf_i+0x244>)
 80051ee:	230a      	movs	r3, #10
 80051f0:	e019      	b.n	8005226 <_printf_i+0x102>
 80051f2:	680e      	ldr	r6, [r1, #0]
 80051f4:	602b      	str	r3, [r5, #0]
 80051f6:	f010 0f40 	tst.w	r0, #64	; 0x40
 80051fa:	bf18      	it	ne
 80051fc:	b236      	sxthne	r6, r6
 80051fe:	e7ef      	b.n	80051e0 <_printf_i+0xbc>
 8005200:	682b      	ldr	r3, [r5, #0]
 8005202:	6820      	ldr	r0, [r4, #0]
 8005204:	1d19      	adds	r1, r3, #4
 8005206:	6029      	str	r1, [r5, #0]
 8005208:	0601      	lsls	r1, r0, #24
 800520a:	d501      	bpl.n	8005210 <_printf_i+0xec>
 800520c:	681e      	ldr	r6, [r3, #0]
 800520e:	e002      	b.n	8005216 <_printf_i+0xf2>
 8005210:	0646      	lsls	r6, r0, #25
 8005212:	d5fb      	bpl.n	800520c <_printf_i+0xe8>
 8005214:	881e      	ldrh	r6, [r3, #0]
 8005216:	4854      	ldr	r0, [pc, #336]	; (8005368 <_printf_i+0x244>)
 8005218:	2f6f      	cmp	r7, #111	; 0x6f
 800521a:	bf0c      	ite	eq
 800521c:	2308      	moveq	r3, #8
 800521e:	230a      	movne	r3, #10
 8005220:	2100      	movs	r1, #0
 8005222:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005226:	6865      	ldr	r5, [r4, #4]
 8005228:	60a5      	str	r5, [r4, #8]
 800522a:	2d00      	cmp	r5, #0
 800522c:	bfa2      	ittt	ge
 800522e:	6821      	ldrge	r1, [r4, #0]
 8005230:	f021 0104 	bicge.w	r1, r1, #4
 8005234:	6021      	strge	r1, [r4, #0]
 8005236:	b90e      	cbnz	r6, 800523c <_printf_i+0x118>
 8005238:	2d00      	cmp	r5, #0
 800523a:	d04d      	beq.n	80052d8 <_printf_i+0x1b4>
 800523c:	4615      	mov	r5, r2
 800523e:	fbb6 f1f3 	udiv	r1, r6, r3
 8005242:	fb03 6711 	mls	r7, r3, r1, r6
 8005246:	5dc7      	ldrb	r7, [r0, r7]
 8005248:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800524c:	4637      	mov	r7, r6
 800524e:	42bb      	cmp	r3, r7
 8005250:	460e      	mov	r6, r1
 8005252:	d9f4      	bls.n	800523e <_printf_i+0x11a>
 8005254:	2b08      	cmp	r3, #8
 8005256:	d10b      	bne.n	8005270 <_printf_i+0x14c>
 8005258:	6823      	ldr	r3, [r4, #0]
 800525a:	07de      	lsls	r6, r3, #31
 800525c:	d508      	bpl.n	8005270 <_printf_i+0x14c>
 800525e:	6923      	ldr	r3, [r4, #16]
 8005260:	6861      	ldr	r1, [r4, #4]
 8005262:	4299      	cmp	r1, r3
 8005264:	bfde      	ittt	le
 8005266:	2330      	movle	r3, #48	; 0x30
 8005268:	f805 3c01 	strble.w	r3, [r5, #-1]
 800526c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005270:	1b52      	subs	r2, r2, r5
 8005272:	6122      	str	r2, [r4, #16]
 8005274:	f8cd a000 	str.w	sl, [sp]
 8005278:	464b      	mov	r3, r9
 800527a:	aa03      	add	r2, sp, #12
 800527c:	4621      	mov	r1, r4
 800527e:	4640      	mov	r0, r8
 8005280:	f7ff fee2 	bl	8005048 <_printf_common>
 8005284:	3001      	adds	r0, #1
 8005286:	d14c      	bne.n	8005322 <_printf_i+0x1fe>
 8005288:	f04f 30ff 	mov.w	r0, #4294967295
 800528c:	b004      	add	sp, #16
 800528e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005292:	4835      	ldr	r0, [pc, #212]	; (8005368 <_printf_i+0x244>)
 8005294:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005298:	6829      	ldr	r1, [r5, #0]
 800529a:	6823      	ldr	r3, [r4, #0]
 800529c:	f851 6b04 	ldr.w	r6, [r1], #4
 80052a0:	6029      	str	r1, [r5, #0]
 80052a2:	061d      	lsls	r5, r3, #24
 80052a4:	d514      	bpl.n	80052d0 <_printf_i+0x1ac>
 80052a6:	07df      	lsls	r7, r3, #31
 80052a8:	bf44      	itt	mi
 80052aa:	f043 0320 	orrmi.w	r3, r3, #32
 80052ae:	6023      	strmi	r3, [r4, #0]
 80052b0:	b91e      	cbnz	r6, 80052ba <_printf_i+0x196>
 80052b2:	6823      	ldr	r3, [r4, #0]
 80052b4:	f023 0320 	bic.w	r3, r3, #32
 80052b8:	6023      	str	r3, [r4, #0]
 80052ba:	2310      	movs	r3, #16
 80052bc:	e7b0      	b.n	8005220 <_printf_i+0xfc>
 80052be:	6823      	ldr	r3, [r4, #0]
 80052c0:	f043 0320 	orr.w	r3, r3, #32
 80052c4:	6023      	str	r3, [r4, #0]
 80052c6:	2378      	movs	r3, #120	; 0x78
 80052c8:	4828      	ldr	r0, [pc, #160]	; (800536c <_printf_i+0x248>)
 80052ca:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80052ce:	e7e3      	b.n	8005298 <_printf_i+0x174>
 80052d0:	0659      	lsls	r1, r3, #25
 80052d2:	bf48      	it	mi
 80052d4:	b2b6      	uxthmi	r6, r6
 80052d6:	e7e6      	b.n	80052a6 <_printf_i+0x182>
 80052d8:	4615      	mov	r5, r2
 80052da:	e7bb      	b.n	8005254 <_printf_i+0x130>
 80052dc:	682b      	ldr	r3, [r5, #0]
 80052de:	6826      	ldr	r6, [r4, #0]
 80052e0:	6961      	ldr	r1, [r4, #20]
 80052e2:	1d18      	adds	r0, r3, #4
 80052e4:	6028      	str	r0, [r5, #0]
 80052e6:	0635      	lsls	r5, r6, #24
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	d501      	bpl.n	80052f0 <_printf_i+0x1cc>
 80052ec:	6019      	str	r1, [r3, #0]
 80052ee:	e002      	b.n	80052f6 <_printf_i+0x1d2>
 80052f0:	0670      	lsls	r0, r6, #25
 80052f2:	d5fb      	bpl.n	80052ec <_printf_i+0x1c8>
 80052f4:	8019      	strh	r1, [r3, #0]
 80052f6:	2300      	movs	r3, #0
 80052f8:	6123      	str	r3, [r4, #16]
 80052fa:	4615      	mov	r5, r2
 80052fc:	e7ba      	b.n	8005274 <_printf_i+0x150>
 80052fe:	682b      	ldr	r3, [r5, #0]
 8005300:	1d1a      	adds	r2, r3, #4
 8005302:	602a      	str	r2, [r5, #0]
 8005304:	681d      	ldr	r5, [r3, #0]
 8005306:	6862      	ldr	r2, [r4, #4]
 8005308:	2100      	movs	r1, #0
 800530a:	4628      	mov	r0, r5
 800530c:	f7fa ff80 	bl	8000210 <memchr>
 8005310:	b108      	cbz	r0, 8005316 <_printf_i+0x1f2>
 8005312:	1b40      	subs	r0, r0, r5
 8005314:	6060      	str	r0, [r4, #4]
 8005316:	6863      	ldr	r3, [r4, #4]
 8005318:	6123      	str	r3, [r4, #16]
 800531a:	2300      	movs	r3, #0
 800531c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005320:	e7a8      	b.n	8005274 <_printf_i+0x150>
 8005322:	6923      	ldr	r3, [r4, #16]
 8005324:	462a      	mov	r2, r5
 8005326:	4649      	mov	r1, r9
 8005328:	4640      	mov	r0, r8
 800532a:	47d0      	blx	sl
 800532c:	3001      	adds	r0, #1
 800532e:	d0ab      	beq.n	8005288 <_printf_i+0x164>
 8005330:	6823      	ldr	r3, [r4, #0]
 8005332:	079b      	lsls	r3, r3, #30
 8005334:	d413      	bmi.n	800535e <_printf_i+0x23a>
 8005336:	68e0      	ldr	r0, [r4, #12]
 8005338:	9b03      	ldr	r3, [sp, #12]
 800533a:	4298      	cmp	r0, r3
 800533c:	bfb8      	it	lt
 800533e:	4618      	movlt	r0, r3
 8005340:	e7a4      	b.n	800528c <_printf_i+0x168>
 8005342:	2301      	movs	r3, #1
 8005344:	4632      	mov	r2, r6
 8005346:	4649      	mov	r1, r9
 8005348:	4640      	mov	r0, r8
 800534a:	47d0      	blx	sl
 800534c:	3001      	adds	r0, #1
 800534e:	d09b      	beq.n	8005288 <_printf_i+0x164>
 8005350:	3501      	adds	r5, #1
 8005352:	68e3      	ldr	r3, [r4, #12]
 8005354:	9903      	ldr	r1, [sp, #12]
 8005356:	1a5b      	subs	r3, r3, r1
 8005358:	42ab      	cmp	r3, r5
 800535a:	dcf2      	bgt.n	8005342 <_printf_i+0x21e>
 800535c:	e7eb      	b.n	8005336 <_printf_i+0x212>
 800535e:	2500      	movs	r5, #0
 8005360:	f104 0619 	add.w	r6, r4, #25
 8005364:	e7f5      	b.n	8005352 <_printf_i+0x22e>
 8005366:	bf00      	nop
 8005368:	08009f0c 	.word	0x08009f0c
 800536c:	08009f1d 	.word	0x08009f1d

08005370 <_scanf_float>:
 8005370:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005374:	b087      	sub	sp, #28
 8005376:	4617      	mov	r7, r2
 8005378:	9303      	str	r3, [sp, #12]
 800537a:	688b      	ldr	r3, [r1, #8]
 800537c:	1e5a      	subs	r2, r3, #1
 800537e:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8005382:	bf83      	ittte	hi
 8005384:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8005388:	195b      	addhi	r3, r3, r5
 800538a:	9302      	strhi	r3, [sp, #8]
 800538c:	2300      	movls	r3, #0
 800538e:	bf86      	itte	hi
 8005390:	f240 135d 	movwhi	r3, #349	; 0x15d
 8005394:	608b      	strhi	r3, [r1, #8]
 8005396:	9302      	strls	r3, [sp, #8]
 8005398:	680b      	ldr	r3, [r1, #0]
 800539a:	468b      	mov	fp, r1
 800539c:	2500      	movs	r5, #0
 800539e:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80053a2:	f84b 3b1c 	str.w	r3, [fp], #28
 80053a6:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80053aa:	4680      	mov	r8, r0
 80053ac:	460c      	mov	r4, r1
 80053ae:	465e      	mov	r6, fp
 80053b0:	46aa      	mov	sl, r5
 80053b2:	46a9      	mov	r9, r5
 80053b4:	9501      	str	r5, [sp, #4]
 80053b6:	68a2      	ldr	r2, [r4, #8]
 80053b8:	b152      	cbz	r2, 80053d0 <_scanf_float+0x60>
 80053ba:	683b      	ldr	r3, [r7, #0]
 80053bc:	781b      	ldrb	r3, [r3, #0]
 80053be:	2b4e      	cmp	r3, #78	; 0x4e
 80053c0:	d864      	bhi.n	800548c <_scanf_float+0x11c>
 80053c2:	2b40      	cmp	r3, #64	; 0x40
 80053c4:	d83c      	bhi.n	8005440 <_scanf_float+0xd0>
 80053c6:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 80053ca:	b2c8      	uxtb	r0, r1
 80053cc:	280e      	cmp	r0, #14
 80053ce:	d93a      	bls.n	8005446 <_scanf_float+0xd6>
 80053d0:	f1b9 0f00 	cmp.w	r9, #0
 80053d4:	d003      	beq.n	80053de <_scanf_float+0x6e>
 80053d6:	6823      	ldr	r3, [r4, #0]
 80053d8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80053dc:	6023      	str	r3, [r4, #0]
 80053de:	f10a 3aff 	add.w	sl, sl, #4294967295
 80053e2:	f1ba 0f01 	cmp.w	sl, #1
 80053e6:	f200 8113 	bhi.w	8005610 <_scanf_float+0x2a0>
 80053ea:	455e      	cmp	r6, fp
 80053ec:	f200 8105 	bhi.w	80055fa <_scanf_float+0x28a>
 80053f0:	2501      	movs	r5, #1
 80053f2:	4628      	mov	r0, r5
 80053f4:	b007      	add	sp, #28
 80053f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80053fa:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 80053fe:	2a0d      	cmp	r2, #13
 8005400:	d8e6      	bhi.n	80053d0 <_scanf_float+0x60>
 8005402:	a101      	add	r1, pc, #4	; (adr r1, 8005408 <_scanf_float+0x98>)
 8005404:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8005408:	08005547 	.word	0x08005547
 800540c:	080053d1 	.word	0x080053d1
 8005410:	080053d1 	.word	0x080053d1
 8005414:	080053d1 	.word	0x080053d1
 8005418:	080055a7 	.word	0x080055a7
 800541c:	0800557f 	.word	0x0800557f
 8005420:	080053d1 	.word	0x080053d1
 8005424:	080053d1 	.word	0x080053d1
 8005428:	08005555 	.word	0x08005555
 800542c:	080053d1 	.word	0x080053d1
 8005430:	080053d1 	.word	0x080053d1
 8005434:	080053d1 	.word	0x080053d1
 8005438:	080053d1 	.word	0x080053d1
 800543c:	0800550d 	.word	0x0800550d
 8005440:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8005444:	e7db      	b.n	80053fe <_scanf_float+0x8e>
 8005446:	290e      	cmp	r1, #14
 8005448:	d8c2      	bhi.n	80053d0 <_scanf_float+0x60>
 800544a:	a001      	add	r0, pc, #4	; (adr r0, 8005450 <_scanf_float+0xe0>)
 800544c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8005450:	080054ff 	.word	0x080054ff
 8005454:	080053d1 	.word	0x080053d1
 8005458:	080054ff 	.word	0x080054ff
 800545c:	08005593 	.word	0x08005593
 8005460:	080053d1 	.word	0x080053d1
 8005464:	080054ad 	.word	0x080054ad
 8005468:	080054e9 	.word	0x080054e9
 800546c:	080054e9 	.word	0x080054e9
 8005470:	080054e9 	.word	0x080054e9
 8005474:	080054e9 	.word	0x080054e9
 8005478:	080054e9 	.word	0x080054e9
 800547c:	080054e9 	.word	0x080054e9
 8005480:	080054e9 	.word	0x080054e9
 8005484:	080054e9 	.word	0x080054e9
 8005488:	080054e9 	.word	0x080054e9
 800548c:	2b6e      	cmp	r3, #110	; 0x6e
 800548e:	d809      	bhi.n	80054a4 <_scanf_float+0x134>
 8005490:	2b60      	cmp	r3, #96	; 0x60
 8005492:	d8b2      	bhi.n	80053fa <_scanf_float+0x8a>
 8005494:	2b54      	cmp	r3, #84	; 0x54
 8005496:	d077      	beq.n	8005588 <_scanf_float+0x218>
 8005498:	2b59      	cmp	r3, #89	; 0x59
 800549a:	d199      	bne.n	80053d0 <_scanf_float+0x60>
 800549c:	2d07      	cmp	r5, #7
 800549e:	d197      	bne.n	80053d0 <_scanf_float+0x60>
 80054a0:	2508      	movs	r5, #8
 80054a2:	e029      	b.n	80054f8 <_scanf_float+0x188>
 80054a4:	2b74      	cmp	r3, #116	; 0x74
 80054a6:	d06f      	beq.n	8005588 <_scanf_float+0x218>
 80054a8:	2b79      	cmp	r3, #121	; 0x79
 80054aa:	e7f6      	b.n	800549a <_scanf_float+0x12a>
 80054ac:	6821      	ldr	r1, [r4, #0]
 80054ae:	05c8      	lsls	r0, r1, #23
 80054b0:	d51a      	bpl.n	80054e8 <_scanf_float+0x178>
 80054b2:	9b02      	ldr	r3, [sp, #8]
 80054b4:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80054b8:	6021      	str	r1, [r4, #0]
 80054ba:	f109 0901 	add.w	r9, r9, #1
 80054be:	b11b      	cbz	r3, 80054c8 <_scanf_float+0x158>
 80054c0:	3b01      	subs	r3, #1
 80054c2:	3201      	adds	r2, #1
 80054c4:	9302      	str	r3, [sp, #8]
 80054c6:	60a2      	str	r2, [r4, #8]
 80054c8:	68a3      	ldr	r3, [r4, #8]
 80054ca:	3b01      	subs	r3, #1
 80054cc:	60a3      	str	r3, [r4, #8]
 80054ce:	6923      	ldr	r3, [r4, #16]
 80054d0:	3301      	adds	r3, #1
 80054d2:	6123      	str	r3, [r4, #16]
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	3b01      	subs	r3, #1
 80054d8:	2b00      	cmp	r3, #0
 80054da:	607b      	str	r3, [r7, #4]
 80054dc:	f340 8084 	ble.w	80055e8 <_scanf_float+0x278>
 80054e0:	683b      	ldr	r3, [r7, #0]
 80054e2:	3301      	adds	r3, #1
 80054e4:	603b      	str	r3, [r7, #0]
 80054e6:	e766      	b.n	80053b6 <_scanf_float+0x46>
 80054e8:	eb1a 0f05 	cmn.w	sl, r5
 80054ec:	f47f af70 	bne.w	80053d0 <_scanf_float+0x60>
 80054f0:	6822      	ldr	r2, [r4, #0]
 80054f2:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 80054f6:	6022      	str	r2, [r4, #0]
 80054f8:	f806 3b01 	strb.w	r3, [r6], #1
 80054fc:	e7e4      	b.n	80054c8 <_scanf_float+0x158>
 80054fe:	6822      	ldr	r2, [r4, #0]
 8005500:	0610      	lsls	r0, r2, #24
 8005502:	f57f af65 	bpl.w	80053d0 <_scanf_float+0x60>
 8005506:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800550a:	e7f4      	b.n	80054f6 <_scanf_float+0x186>
 800550c:	f1ba 0f00 	cmp.w	sl, #0
 8005510:	d10e      	bne.n	8005530 <_scanf_float+0x1c0>
 8005512:	f1b9 0f00 	cmp.w	r9, #0
 8005516:	d10e      	bne.n	8005536 <_scanf_float+0x1c6>
 8005518:	6822      	ldr	r2, [r4, #0]
 800551a:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800551e:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8005522:	d108      	bne.n	8005536 <_scanf_float+0x1c6>
 8005524:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8005528:	6022      	str	r2, [r4, #0]
 800552a:	f04f 0a01 	mov.w	sl, #1
 800552e:	e7e3      	b.n	80054f8 <_scanf_float+0x188>
 8005530:	f1ba 0f02 	cmp.w	sl, #2
 8005534:	d055      	beq.n	80055e2 <_scanf_float+0x272>
 8005536:	2d01      	cmp	r5, #1
 8005538:	d002      	beq.n	8005540 <_scanf_float+0x1d0>
 800553a:	2d04      	cmp	r5, #4
 800553c:	f47f af48 	bne.w	80053d0 <_scanf_float+0x60>
 8005540:	3501      	adds	r5, #1
 8005542:	b2ed      	uxtb	r5, r5
 8005544:	e7d8      	b.n	80054f8 <_scanf_float+0x188>
 8005546:	f1ba 0f01 	cmp.w	sl, #1
 800554a:	f47f af41 	bne.w	80053d0 <_scanf_float+0x60>
 800554e:	f04f 0a02 	mov.w	sl, #2
 8005552:	e7d1      	b.n	80054f8 <_scanf_float+0x188>
 8005554:	b97d      	cbnz	r5, 8005576 <_scanf_float+0x206>
 8005556:	f1b9 0f00 	cmp.w	r9, #0
 800555a:	f47f af3c 	bne.w	80053d6 <_scanf_float+0x66>
 800555e:	6822      	ldr	r2, [r4, #0]
 8005560:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8005564:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8005568:	f47f af39 	bne.w	80053de <_scanf_float+0x6e>
 800556c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8005570:	6022      	str	r2, [r4, #0]
 8005572:	2501      	movs	r5, #1
 8005574:	e7c0      	b.n	80054f8 <_scanf_float+0x188>
 8005576:	2d03      	cmp	r5, #3
 8005578:	d0e2      	beq.n	8005540 <_scanf_float+0x1d0>
 800557a:	2d05      	cmp	r5, #5
 800557c:	e7de      	b.n	800553c <_scanf_float+0x1cc>
 800557e:	2d02      	cmp	r5, #2
 8005580:	f47f af26 	bne.w	80053d0 <_scanf_float+0x60>
 8005584:	2503      	movs	r5, #3
 8005586:	e7b7      	b.n	80054f8 <_scanf_float+0x188>
 8005588:	2d06      	cmp	r5, #6
 800558a:	f47f af21 	bne.w	80053d0 <_scanf_float+0x60>
 800558e:	2507      	movs	r5, #7
 8005590:	e7b2      	b.n	80054f8 <_scanf_float+0x188>
 8005592:	6822      	ldr	r2, [r4, #0]
 8005594:	0591      	lsls	r1, r2, #22
 8005596:	f57f af1b 	bpl.w	80053d0 <_scanf_float+0x60>
 800559a:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800559e:	6022      	str	r2, [r4, #0]
 80055a0:	f8cd 9004 	str.w	r9, [sp, #4]
 80055a4:	e7a8      	b.n	80054f8 <_scanf_float+0x188>
 80055a6:	6822      	ldr	r2, [r4, #0]
 80055a8:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 80055ac:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80055b0:	d006      	beq.n	80055c0 <_scanf_float+0x250>
 80055b2:	0550      	lsls	r0, r2, #21
 80055b4:	f57f af0c 	bpl.w	80053d0 <_scanf_float+0x60>
 80055b8:	f1b9 0f00 	cmp.w	r9, #0
 80055bc:	f43f af0f 	beq.w	80053de <_scanf_float+0x6e>
 80055c0:	0591      	lsls	r1, r2, #22
 80055c2:	bf58      	it	pl
 80055c4:	9901      	ldrpl	r1, [sp, #4]
 80055c6:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80055ca:	bf58      	it	pl
 80055cc:	eba9 0101 	subpl.w	r1, r9, r1
 80055d0:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 80055d4:	bf58      	it	pl
 80055d6:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80055da:	6022      	str	r2, [r4, #0]
 80055dc:	f04f 0900 	mov.w	r9, #0
 80055e0:	e78a      	b.n	80054f8 <_scanf_float+0x188>
 80055e2:	f04f 0a03 	mov.w	sl, #3
 80055e6:	e787      	b.n	80054f8 <_scanf_float+0x188>
 80055e8:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80055ec:	4639      	mov	r1, r7
 80055ee:	4640      	mov	r0, r8
 80055f0:	4798      	blx	r3
 80055f2:	2800      	cmp	r0, #0
 80055f4:	f43f aedf 	beq.w	80053b6 <_scanf_float+0x46>
 80055f8:	e6ea      	b.n	80053d0 <_scanf_float+0x60>
 80055fa:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80055fe:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005602:	463a      	mov	r2, r7
 8005604:	4640      	mov	r0, r8
 8005606:	4798      	blx	r3
 8005608:	6923      	ldr	r3, [r4, #16]
 800560a:	3b01      	subs	r3, #1
 800560c:	6123      	str	r3, [r4, #16]
 800560e:	e6ec      	b.n	80053ea <_scanf_float+0x7a>
 8005610:	1e6b      	subs	r3, r5, #1
 8005612:	2b06      	cmp	r3, #6
 8005614:	d825      	bhi.n	8005662 <_scanf_float+0x2f2>
 8005616:	2d02      	cmp	r5, #2
 8005618:	d836      	bhi.n	8005688 <_scanf_float+0x318>
 800561a:	455e      	cmp	r6, fp
 800561c:	f67f aee8 	bls.w	80053f0 <_scanf_float+0x80>
 8005620:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005624:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005628:	463a      	mov	r2, r7
 800562a:	4640      	mov	r0, r8
 800562c:	4798      	blx	r3
 800562e:	6923      	ldr	r3, [r4, #16]
 8005630:	3b01      	subs	r3, #1
 8005632:	6123      	str	r3, [r4, #16]
 8005634:	e7f1      	b.n	800561a <_scanf_float+0x2aa>
 8005636:	9802      	ldr	r0, [sp, #8]
 8005638:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800563c:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8005640:	9002      	str	r0, [sp, #8]
 8005642:	463a      	mov	r2, r7
 8005644:	4640      	mov	r0, r8
 8005646:	4798      	blx	r3
 8005648:	6923      	ldr	r3, [r4, #16]
 800564a:	3b01      	subs	r3, #1
 800564c:	6123      	str	r3, [r4, #16]
 800564e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005652:	fa5f fa8a 	uxtb.w	sl, sl
 8005656:	f1ba 0f02 	cmp.w	sl, #2
 800565a:	d1ec      	bne.n	8005636 <_scanf_float+0x2c6>
 800565c:	3d03      	subs	r5, #3
 800565e:	b2ed      	uxtb	r5, r5
 8005660:	1b76      	subs	r6, r6, r5
 8005662:	6823      	ldr	r3, [r4, #0]
 8005664:	05da      	lsls	r2, r3, #23
 8005666:	d52f      	bpl.n	80056c8 <_scanf_float+0x358>
 8005668:	055b      	lsls	r3, r3, #21
 800566a:	d510      	bpl.n	800568e <_scanf_float+0x31e>
 800566c:	455e      	cmp	r6, fp
 800566e:	f67f aebf 	bls.w	80053f0 <_scanf_float+0x80>
 8005672:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005676:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800567a:	463a      	mov	r2, r7
 800567c:	4640      	mov	r0, r8
 800567e:	4798      	blx	r3
 8005680:	6923      	ldr	r3, [r4, #16]
 8005682:	3b01      	subs	r3, #1
 8005684:	6123      	str	r3, [r4, #16]
 8005686:	e7f1      	b.n	800566c <_scanf_float+0x2fc>
 8005688:	46aa      	mov	sl, r5
 800568a:	9602      	str	r6, [sp, #8]
 800568c:	e7df      	b.n	800564e <_scanf_float+0x2de>
 800568e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8005692:	6923      	ldr	r3, [r4, #16]
 8005694:	2965      	cmp	r1, #101	; 0x65
 8005696:	f103 33ff 	add.w	r3, r3, #4294967295
 800569a:	f106 35ff 	add.w	r5, r6, #4294967295
 800569e:	6123      	str	r3, [r4, #16]
 80056a0:	d00c      	beq.n	80056bc <_scanf_float+0x34c>
 80056a2:	2945      	cmp	r1, #69	; 0x45
 80056a4:	d00a      	beq.n	80056bc <_scanf_float+0x34c>
 80056a6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80056aa:	463a      	mov	r2, r7
 80056ac:	4640      	mov	r0, r8
 80056ae:	4798      	blx	r3
 80056b0:	6923      	ldr	r3, [r4, #16]
 80056b2:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80056b6:	3b01      	subs	r3, #1
 80056b8:	1eb5      	subs	r5, r6, #2
 80056ba:	6123      	str	r3, [r4, #16]
 80056bc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80056c0:	463a      	mov	r2, r7
 80056c2:	4640      	mov	r0, r8
 80056c4:	4798      	blx	r3
 80056c6:	462e      	mov	r6, r5
 80056c8:	6825      	ldr	r5, [r4, #0]
 80056ca:	f015 0510 	ands.w	r5, r5, #16
 80056ce:	d159      	bne.n	8005784 <_scanf_float+0x414>
 80056d0:	7035      	strb	r5, [r6, #0]
 80056d2:	6823      	ldr	r3, [r4, #0]
 80056d4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80056d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80056dc:	d11b      	bne.n	8005716 <_scanf_float+0x3a6>
 80056de:	9b01      	ldr	r3, [sp, #4]
 80056e0:	454b      	cmp	r3, r9
 80056e2:	eba3 0209 	sub.w	r2, r3, r9
 80056e6:	d123      	bne.n	8005730 <_scanf_float+0x3c0>
 80056e8:	2200      	movs	r2, #0
 80056ea:	4659      	mov	r1, fp
 80056ec:	4640      	mov	r0, r8
 80056ee:	f000 ff09 	bl	8006504 <_strtod_r>
 80056f2:	6822      	ldr	r2, [r4, #0]
 80056f4:	9b03      	ldr	r3, [sp, #12]
 80056f6:	f012 0f02 	tst.w	r2, #2
 80056fa:	ec57 6b10 	vmov	r6, r7, d0
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	d021      	beq.n	8005746 <_scanf_float+0x3d6>
 8005702:	9903      	ldr	r1, [sp, #12]
 8005704:	1d1a      	adds	r2, r3, #4
 8005706:	600a      	str	r2, [r1, #0]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	e9c3 6700 	strd	r6, r7, [r3]
 800570e:	68e3      	ldr	r3, [r4, #12]
 8005710:	3301      	adds	r3, #1
 8005712:	60e3      	str	r3, [r4, #12]
 8005714:	e66d      	b.n	80053f2 <_scanf_float+0x82>
 8005716:	9b04      	ldr	r3, [sp, #16]
 8005718:	2b00      	cmp	r3, #0
 800571a:	d0e5      	beq.n	80056e8 <_scanf_float+0x378>
 800571c:	9905      	ldr	r1, [sp, #20]
 800571e:	230a      	movs	r3, #10
 8005720:	462a      	mov	r2, r5
 8005722:	3101      	adds	r1, #1
 8005724:	4640      	mov	r0, r8
 8005726:	f000 ff75 	bl	8006614 <_strtol_r>
 800572a:	9b04      	ldr	r3, [sp, #16]
 800572c:	9e05      	ldr	r6, [sp, #20]
 800572e:	1ac2      	subs	r2, r0, r3
 8005730:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8005734:	429e      	cmp	r6, r3
 8005736:	bf28      	it	cs
 8005738:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800573c:	4912      	ldr	r1, [pc, #72]	; (8005788 <_scanf_float+0x418>)
 800573e:	4630      	mov	r0, r6
 8005740:	f000 f82c 	bl	800579c <siprintf>
 8005744:	e7d0      	b.n	80056e8 <_scanf_float+0x378>
 8005746:	9903      	ldr	r1, [sp, #12]
 8005748:	f012 0f04 	tst.w	r2, #4
 800574c:	f103 0204 	add.w	r2, r3, #4
 8005750:	600a      	str	r2, [r1, #0]
 8005752:	d1d9      	bne.n	8005708 <_scanf_float+0x398>
 8005754:	f8d3 8000 	ldr.w	r8, [r3]
 8005758:	ee10 2a10 	vmov	r2, s0
 800575c:	ee10 0a10 	vmov	r0, s0
 8005760:	463b      	mov	r3, r7
 8005762:	4639      	mov	r1, r7
 8005764:	f7fb f9fa 	bl	8000b5c <__aeabi_dcmpun>
 8005768:	b128      	cbz	r0, 8005776 <_scanf_float+0x406>
 800576a:	4808      	ldr	r0, [pc, #32]	; (800578c <_scanf_float+0x41c>)
 800576c:	f000 f810 	bl	8005790 <nanf>
 8005770:	ed88 0a00 	vstr	s0, [r8]
 8005774:	e7cb      	b.n	800570e <_scanf_float+0x39e>
 8005776:	4630      	mov	r0, r6
 8005778:	4639      	mov	r1, r7
 800577a:	f7fb fa4d 	bl	8000c18 <__aeabi_d2f>
 800577e:	f8c8 0000 	str.w	r0, [r8]
 8005782:	e7c4      	b.n	800570e <_scanf_float+0x39e>
 8005784:	2500      	movs	r5, #0
 8005786:	e634      	b.n	80053f2 <_scanf_float+0x82>
 8005788:	08009f2e 	.word	0x08009f2e
 800578c:	0800a353 	.word	0x0800a353

08005790 <nanf>:
 8005790:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8005798 <nanf+0x8>
 8005794:	4770      	bx	lr
 8005796:	bf00      	nop
 8005798:	7fc00000 	.word	0x7fc00000

0800579c <siprintf>:
 800579c:	b40e      	push	{r1, r2, r3}
 800579e:	b500      	push	{lr}
 80057a0:	b09c      	sub	sp, #112	; 0x70
 80057a2:	ab1d      	add	r3, sp, #116	; 0x74
 80057a4:	9002      	str	r0, [sp, #8]
 80057a6:	9006      	str	r0, [sp, #24]
 80057a8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80057ac:	4809      	ldr	r0, [pc, #36]	; (80057d4 <siprintf+0x38>)
 80057ae:	9107      	str	r1, [sp, #28]
 80057b0:	9104      	str	r1, [sp, #16]
 80057b2:	4909      	ldr	r1, [pc, #36]	; (80057d8 <siprintf+0x3c>)
 80057b4:	f853 2b04 	ldr.w	r2, [r3], #4
 80057b8:	9105      	str	r1, [sp, #20]
 80057ba:	6800      	ldr	r0, [r0, #0]
 80057bc:	9301      	str	r3, [sp, #4]
 80057be:	a902      	add	r1, sp, #8
 80057c0:	f002 ff8a 	bl	80086d8 <_svfiprintf_r>
 80057c4:	9b02      	ldr	r3, [sp, #8]
 80057c6:	2200      	movs	r2, #0
 80057c8:	701a      	strb	r2, [r3, #0]
 80057ca:	b01c      	add	sp, #112	; 0x70
 80057cc:	f85d eb04 	ldr.w	lr, [sp], #4
 80057d0:	b003      	add	sp, #12
 80057d2:	4770      	bx	lr
 80057d4:	2000001c 	.word	0x2000001c
 80057d8:	ffff0208 	.word	0xffff0208

080057dc <siscanf>:
 80057dc:	b40e      	push	{r1, r2, r3}
 80057de:	b510      	push	{r4, lr}
 80057e0:	b09f      	sub	sp, #124	; 0x7c
 80057e2:	ac21      	add	r4, sp, #132	; 0x84
 80057e4:	f44f 7101 	mov.w	r1, #516	; 0x204
 80057e8:	f854 2b04 	ldr.w	r2, [r4], #4
 80057ec:	9201      	str	r2, [sp, #4]
 80057ee:	f8ad 101c 	strh.w	r1, [sp, #28]
 80057f2:	9004      	str	r0, [sp, #16]
 80057f4:	9008      	str	r0, [sp, #32]
 80057f6:	f7fa fcfd 	bl	80001f4 <strlen>
 80057fa:	4b0c      	ldr	r3, [pc, #48]	; (800582c <siscanf+0x50>)
 80057fc:	9005      	str	r0, [sp, #20]
 80057fe:	9009      	str	r0, [sp, #36]	; 0x24
 8005800:	930d      	str	r3, [sp, #52]	; 0x34
 8005802:	480b      	ldr	r0, [pc, #44]	; (8005830 <siscanf+0x54>)
 8005804:	9a01      	ldr	r2, [sp, #4]
 8005806:	6800      	ldr	r0, [r0, #0]
 8005808:	9403      	str	r4, [sp, #12]
 800580a:	2300      	movs	r3, #0
 800580c:	9311      	str	r3, [sp, #68]	; 0x44
 800580e:	9316      	str	r3, [sp, #88]	; 0x58
 8005810:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005814:	f8ad 301e 	strh.w	r3, [sp, #30]
 8005818:	a904      	add	r1, sp, #16
 800581a:	4623      	mov	r3, r4
 800581c:	f003 f8b6 	bl	800898c <__ssvfiscanf_r>
 8005820:	b01f      	add	sp, #124	; 0x7c
 8005822:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005826:	b003      	add	sp, #12
 8005828:	4770      	bx	lr
 800582a:	bf00      	nop
 800582c:	08005857 	.word	0x08005857
 8005830:	2000001c 	.word	0x2000001c

08005834 <__sread>:
 8005834:	b510      	push	{r4, lr}
 8005836:	460c      	mov	r4, r1
 8005838:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800583c:	f003 fb70 	bl	8008f20 <_read_r>
 8005840:	2800      	cmp	r0, #0
 8005842:	bfab      	itete	ge
 8005844:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005846:	89a3      	ldrhlt	r3, [r4, #12]
 8005848:	181b      	addge	r3, r3, r0
 800584a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800584e:	bfac      	ite	ge
 8005850:	6563      	strge	r3, [r4, #84]	; 0x54
 8005852:	81a3      	strhlt	r3, [r4, #12]
 8005854:	bd10      	pop	{r4, pc}

08005856 <__seofread>:
 8005856:	2000      	movs	r0, #0
 8005858:	4770      	bx	lr

0800585a <__swrite>:
 800585a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800585e:	461f      	mov	r7, r3
 8005860:	898b      	ldrh	r3, [r1, #12]
 8005862:	05db      	lsls	r3, r3, #23
 8005864:	4605      	mov	r5, r0
 8005866:	460c      	mov	r4, r1
 8005868:	4616      	mov	r6, r2
 800586a:	d505      	bpl.n	8005878 <__swrite+0x1e>
 800586c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005870:	2302      	movs	r3, #2
 8005872:	2200      	movs	r2, #0
 8005874:	f002 f8e2 	bl	8007a3c <_lseek_r>
 8005878:	89a3      	ldrh	r3, [r4, #12]
 800587a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800587e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005882:	81a3      	strh	r3, [r4, #12]
 8005884:	4632      	mov	r2, r6
 8005886:	463b      	mov	r3, r7
 8005888:	4628      	mov	r0, r5
 800588a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800588e:	f000 bec3 	b.w	8006618 <_write_r>

08005892 <__sseek>:
 8005892:	b510      	push	{r4, lr}
 8005894:	460c      	mov	r4, r1
 8005896:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800589a:	f002 f8cf 	bl	8007a3c <_lseek_r>
 800589e:	1c43      	adds	r3, r0, #1
 80058a0:	89a3      	ldrh	r3, [r4, #12]
 80058a2:	bf15      	itete	ne
 80058a4:	6560      	strne	r0, [r4, #84]	; 0x54
 80058a6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80058aa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80058ae:	81a3      	strheq	r3, [r4, #12]
 80058b0:	bf18      	it	ne
 80058b2:	81a3      	strhne	r3, [r4, #12]
 80058b4:	bd10      	pop	{r4, pc}

080058b6 <__sclose>:
 80058b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80058ba:	f000 bebf 	b.w	800663c <_close_r>

080058be <sulp>:
 80058be:	b570      	push	{r4, r5, r6, lr}
 80058c0:	4604      	mov	r4, r0
 80058c2:	460d      	mov	r5, r1
 80058c4:	ec45 4b10 	vmov	d0, r4, r5
 80058c8:	4616      	mov	r6, r2
 80058ca:	f002 fc63 	bl	8008194 <__ulp>
 80058ce:	ec51 0b10 	vmov	r0, r1, d0
 80058d2:	b17e      	cbz	r6, 80058f4 <sulp+0x36>
 80058d4:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80058d8:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80058dc:	2b00      	cmp	r3, #0
 80058de:	dd09      	ble.n	80058f4 <sulp+0x36>
 80058e0:	051b      	lsls	r3, r3, #20
 80058e2:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80058e6:	2400      	movs	r4, #0
 80058e8:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80058ec:	4622      	mov	r2, r4
 80058ee:	462b      	mov	r3, r5
 80058f0:	f7fa fe9a 	bl	8000628 <__aeabi_dmul>
 80058f4:	bd70      	pop	{r4, r5, r6, pc}
	...

080058f8 <_strtod_l>:
 80058f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80058fc:	ed2d 8b02 	vpush	{d8}
 8005900:	b09d      	sub	sp, #116	; 0x74
 8005902:	461f      	mov	r7, r3
 8005904:	2300      	movs	r3, #0
 8005906:	9318      	str	r3, [sp, #96]	; 0x60
 8005908:	4ba2      	ldr	r3, [pc, #648]	; (8005b94 <_strtod_l+0x29c>)
 800590a:	9213      	str	r2, [sp, #76]	; 0x4c
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	9305      	str	r3, [sp, #20]
 8005910:	4604      	mov	r4, r0
 8005912:	4618      	mov	r0, r3
 8005914:	4688      	mov	r8, r1
 8005916:	f7fa fc6d 	bl	80001f4 <strlen>
 800591a:	f04f 0a00 	mov.w	sl, #0
 800591e:	4605      	mov	r5, r0
 8005920:	f04f 0b00 	mov.w	fp, #0
 8005924:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8005928:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800592a:	781a      	ldrb	r2, [r3, #0]
 800592c:	2a2b      	cmp	r2, #43	; 0x2b
 800592e:	d04e      	beq.n	80059ce <_strtod_l+0xd6>
 8005930:	d83b      	bhi.n	80059aa <_strtod_l+0xb2>
 8005932:	2a0d      	cmp	r2, #13
 8005934:	d834      	bhi.n	80059a0 <_strtod_l+0xa8>
 8005936:	2a08      	cmp	r2, #8
 8005938:	d834      	bhi.n	80059a4 <_strtod_l+0xac>
 800593a:	2a00      	cmp	r2, #0
 800593c:	d03e      	beq.n	80059bc <_strtod_l+0xc4>
 800593e:	2300      	movs	r3, #0
 8005940:	930a      	str	r3, [sp, #40]	; 0x28
 8005942:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8005944:	7833      	ldrb	r3, [r6, #0]
 8005946:	2b30      	cmp	r3, #48	; 0x30
 8005948:	f040 80b0 	bne.w	8005aac <_strtod_l+0x1b4>
 800594c:	7873      	ldrb	r3, [r6, #1]
 800594e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8005952:	2b58      	cmp	r3, #88	; 0x58
 8005954:	d168      	bne.n	8005a28 <_strtod_l+0x130>
 8005956:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005958:	9301      	str	r3, [sp, #4]
 800595a:	ab18      	add	r3, sp, #96	; 0x60
 800595c:	9702      	str	r7, [sp, #8]
 800595e:	9300      	str	r3, [sp, #0]
 8005960:	4a8d      	ldr	r2, [pc, #564]	; (8005b98 <_strtod_l+0x2a0>)
 8005962:	ab19      	add	r3, sp, #100	; 0x64
 8005964:	a917      	add	r1, sp, #92	; 0x5c
 8005966:	4620      	mov	r0, r4
 8005968:	f001 fd5c 	bl	8007424 <__gethex>
 800596c:	f010 0707 	ands.w	r7, r0, #7
 8005970:	4605      	mov	r5, r0
 8005972:	d005      	beq.n	8005980 <_strtod_l+0x88>
 8005974:	2f06      	cmp	r7, #6
 8005976:	d12c      	bne.n	80059d2 <_strtod_l+0xda>
 8005978:	3601      	adds	r6, #1
 800597a:	2300      	movs	r3, #0
 800597c:	9617      	str	r6, [sp, #92]	; 0x5c
 800597e:	930a      	str	r3, [sp, #40]	; 0x28
 8005980:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8005982:	2b00      	cmp	r3, #0
 8005984:	f040 8590 	bne.w	80064a8 <_strtod_l+0xbb0>
 8005988:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800598a:	b1eb      	cbz	r3, 80059c8 <_strtod_l+0xd0>
 800598c:	4652      	mov	r2, sl
 800598e:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8005992:	ec43 2b10 	vmov	d0, r2, r3
 8005996:	b01d      	add	sp, #116	; 0x74
 8005998:	ecbd 8b02 	vpop	{d8}
 800599c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80059a0:	2a20      	cmp	r2, #32
 80059a2:	d1cc      	bne.n	800593e <_strtod_l+0x46>
 80059a4:	3301      	adds	r3, #1
 80059a6:	9317      	str	r3, [sp, #92]	; 0x5c
 80059a8:	e7be      	b.n	8005928 <_strtod_l+0x30>
 80059aa:	2a2d      	cmp	r2, #45	; 0x2d
 80059ac:	d1c7      	bne.n	800593e <_strtod_l+0x46>
 80059ae:	2201      	movs	r2, #1
 80059b0:	920a      	str	r2, [sp, #40]	; 0x28
 80059b2:	1c5a      	adds	r2, r3, #1
 80059b4:	9217      	str	r2, [sp, #92]	; 0x5c
 80059b6:	785b      	ldrb	r3, [r3, #1]
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d1c2      	bne.n	8005942 <_strtod_l+0x4a>
 80059bc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80059be:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	f040 856e 	bne.w	80064a4 <_strtod_l+0xbac>
 80059c8:	4652      	mov	r2, sl
 80059ca:	465b      	mov	r3, fp
 80059cc:	e7e1      	b.n	8005992 <_strtod_l+0x9a>
 80059ce:	2200      	movs	r2, #0
 80059d0:	e7ee      	b.n	80059b0 <_strtod_l+0xb8>
 80059d2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80059d4:	b13a      	cbz	r2, 80059e6 <_strtod_l+0xee>
 80059d6:	2135      	movs	r1, #53	; 0x35
 80059d8:	a81a      	add	r0, sp, #104	; 0x68
 80059da:	f002 fce6 	bl	80083aa <__copybits>
 80059de:	9918      	ldr	r1, [sp, #96]	; 0x60
 80059e0:	4620      	mov	r0, r4
 80059e2:	f002 f8a5 	bl	8007b30 <_Bfree>
 80059e6:	3f01      	subs	r7, #1
 80059e8:	2f04      	cmp	r7, #4
 80059ea:	d806      	bhi.n	80059fa <_strtod_l+0x102>
 80059ec:	e8df f007 	tbb	[pc, r7]
 80059f0:	1714030a 	.word	0x1714030a
 80059f4:	0a          	.byte	0x0a
 80059f5:	00          	.byte	0x00
 80059f6:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 80059fa:	0728      	lsls	r0, r5, #28
 80059fc:	d5c0      	bpl.n	8005980 <_strtod_l+0x88>
 80059fe:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8005a02:	e7bd      	b.n	8005980 <_strtod_l+0x88>
 8005a04:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8005a08:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8005a0a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8005a0e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8005a12:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8005a16:	e7f0      	b.n	80059fa <_strtod_l+0x102>
 8005a18:	f8df b180 	ldr.w	fp, [pc, #384]	; 8005b9c <_strtod_l+0x2a4>
 8005a1c:	e7ed      	b.n	80059fa <_strtod_l+0x102>
 8005a1e:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8005a22:	f04f 3aff 	mov.w	sl, #4294967295
 8005a26:	e7e8      	b.n	80059fa <_strtod_l+0x102>
 8005a28:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005a2a:	1c5a      	adds	r2, r3, #1
 8005a2c:	9217      	str	r2, [sp, #92]	; 0x5c
 8005a2e:	785b      	ldrb	r3, [r3, #1]
 8005a30:	2b30      	cmp	r3, #48	; 0x30
 8005a32:	d0f9      	beq.n	8005a28 <_strtod_l+0x130>
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d0a3      	beq.n	8005980 <_strtod_l+0x88>
 8005a38:	2301      	movs	r3, #1
 8005a3a:	f04f 0900 	mov.w	r9, #0
 8005a3e:	9304      	str	r3, [sp, #16]
 8005a40:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005a42:	9308      	str	r3, [sp, #32]
 8005a44:	f8cd 901c 	str.w	r9, [sp, #28]
 8005a48:	464f      	mov	r7, r9
 8005a4a:	220a      	movs	r2, #10
 8005a4c:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8005a4e:	7806      	ldrb	r6, [r0, #0]
 8005a50:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8005a54:	b2d9      	uxtb	r1, r3
 8005a56:	2909      	cmp	r1, #9
 8005a58:	d92a      	bls.n	8005ab0 <_strtod_l+0x1b8>
 8005a5a:	9905      	ldr	r1, [sp, #20]
 8005a5c:	462a      	mov	r2, r5
 8005a5e:	f003 fac3 	bl	8008fe8 <strncmp>
 8005a62:	b398      	cbz	r0, 8005acc <_strtod_l+0x1d4>
 8005a64:	2000      	movs	r0, #0
 8005a66:	4632      	mov	r2, r6
 8005a68:	463d      	mov	r5, r7
 8005a6a:	9005      	str	r0, [sp, #20]
 8005a6c:	4603      	mov	r3, r0
 8005a6e:	2a65      	cmp	r2, #101	; 0x65
 8005a70:	d001      	beq.n	8005a76 <_strtod_l+0x17e>
 8005a72:	2a45      	cmp	r2, #69	; 0x45
 8005a74:	d118      	bne.n	8005aa8 <_strtod_l+0x1b0>
 8005a76:	b91d      	cbnz	r5, 8005a80 <_strtod_l+0x188>
 8005a78:	9a04      	ldr	r2, [sp, #16]
 8005a7a:	4302      	orrs	r2, r0
 8005a7c:	d09e      	beq.n	80059bc <_strtod_l+0xc4>
 8005a7e:	2500      	movs	r5, #0
 8005a80:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 8005a84:	f108 0201 	add.w	r2, r8, #1
 8005a88:	9217      	str	r2, [sp, #92]	; 0x5c
 8005a8a:	f898 2001 	ldrb.w	r2, [r8, #1]
 8005a8e:	2a2b      	cmp	r2, #43	; 0x2b
 8005a90:	d075      	beq.n	8005b7e <_strtod_l+0x286>
 8005a92:	2a2d      	cmp	r2, #45	; 0x2d
 8005a94:	d07b      	beq.n	8005b8e <_strtod_l+0x296>
 8005a96:	f04f 0c00 	mov.w	ip, #0
 8005a9a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8005a9e:	2909      	cmp	r1, #9
 8005aa0:	f240 8082 	bls.w	8005ba8 <_strtod_l+0x2b0>
 8005aa4:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8005aa8:	2600      	movs	r6, #0
 8005aaa:	e09d      	b.n	8005be8 <_strtod_l+0x2f0>
 8005aac:	2300      	movs	r3, #0
 8005aae:	e7c4      	b.n	8005a3a <_strtod_l+0x142>
 8005ab0:	2f08      	cmp	r7, #8
 8005ab2:	bfd8      	it	le
 8005ab4:	9907      	ldrle	r1, [sp, #28]
 8005ab6:	f100 0001 	add.w	r0, r0, #1
 8005aba:	bfda      	itte	le
 8005abc:	fb02 3301 	mlale	r3, r2, r1, r3
 8005ac0:	9307      	strle	r3, [sp, #28]
 8005ac2:	fb02 3909 	mlagt	r9, r2, r9, r3
 8005ac6:	3701      	adds	r7, #1
 8005ac8:	9017      	str	r0, [sp, #92]	; 0x5c
 8005aca:	e7bf      	b.n	8005a4c <_strtod_l+0x154>
 8005acc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005ace:	195a      	adds	r2, r3, r5
 8005ad0:	9217      	str	r2, [sp, #92]	; 0x5c
 8005ad2:	5d5a      	ldrb	r2, [r3, r5]
 8005ad4:	2f00      	cmp	r7, #0
 8005ad6:	d037      	beq.n	8005b48 <_strtod_l+0x250>
 8005ad8:	9005      	str	r0, [sp, #20]
 8005ada:	463d      	mov	r5, r7
 8005adc:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8005ae0:	2b09      	cmp	r3, #9
 8005ae2:	d912      	bls.n	8005b0a <_strtod_l+0x212>
 8005ae4:	2301      	movs	r3, #1
 8005ae6:	e7c2      	b.n	8005a6e <_strtod_l+0x176>
 8005ae8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005aea:	1c5a      	adds	r2, r3, #1
 8005aec:	9217      	str	r2, [sp, #92]	; 0x5c
 8005aee:	785a      	ldrb	r2, [r3, #1]
 8005af0:	3001      	adds	r0, #1
 8005af2:	2a30      	cmp	r2, #48	; 0x30
 8005af4:	d0f8      	beq.n	8005ae8 <_strtod_l+0x1f0>
 8005af6:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8005afa:	2b08      	cmp	r3, #8
 8005afc:	f200 84d9 	bhi.w	80064b2 <_strtod_l+0xbba>
 8005b00:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005b02:	9005      	str	r0, [sp, #20]
 8005b04:	2000      	movs	r0, #0
 8005b06:	9308      	str	r3, [sp, #32]
 8005b08:	4605      	mov	r5, r0
 8005b0a:	3a30      	subs	r2, #48	; 0x30
 8005b0c:	f100 0301 	add.w	r3, r0, #1
 8005b10:	d014      	beq.n	8005b3c <_strtod_l+0x244>
 8005b12:	9905      	ldr	r1, [sp, #20]
 8005b14:	4419      	add	r1, r3
 8005b16:	9105      	str	r1, [sp, #20]
 8005b18:	462b      	mov	r3, r5
 8005b1a:	eb00 0e05 	add.w	lr, r0, r5
 8005b1e:	210a      	movs	r1, #10
 8005b20:	4573      	cmp	r3, lr
 8005b22:	d113      	bne.n	8005b4c <_strtod_l+0x254>
 8005b24:	182b      	adds	r3, r5, r0
 8005b26:	2b08      	cmp	r3, #8
 8005b28:	f105 0501 	add.w	r5, r5, #1
 8005b2c:	4405      	add	r5, r0
 8005b2e:	dc1c      	bgt.n	8005b6a <_strtod_l+0x272>
 8005b30:	9907      	ldr	r1, [sp, #28]
 8005b32:	230a      	movs	r3, #10
 8005b34:	fb03 2301 	mla	r3, r3, r1, r2
 8005b38:	9307      	str	r3, [sp, #28]
 8005b3a:	2300      	movs	r3, #0
 8005b3c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8005b3e:	1c51      	adds	r1, r2, #1
 8005b40:	9117      	str	r1, [sp, #92]	; 0x5c
 8005b42:	7852      	ldrb	r2, [r2, #1]
 8005b44:	4618      	mov	r0, r3
 8005b46:	e7c9      	b.n	8005adc <_strtod_l+0x1e4>
 8005b48:	4638      	mov	r0, r7
 8005b4a:	e7d2      	b.n	8005af2 <_strtod_l+0x1fa>
 8005b4c:	2b08      	cmp	r3, #8
 8005b4e:	dc04      	bgt.n	8005b5a <_strtod_l+0x262>
 8005b50:	9e07      	ldr	r6, [sp, #28]
 8005b52:	434e      	muls	r6, r1
 8005b54:	9607      	str	r6, [sp, #28]
 8005b56:	3301      	adds	r3, #1
 8005b58:	e7e2      	b.n	8005b20 <_strtod_l+0x228>
 8005b5a:	f103 0c01 	add.w	ip, r3, #1
 8005b5e:	f1bc 0f10 	cmp.w	ip, #16
 8005b62:	bfd8      	it	le
 8005b64:	fb01 f909 	mulle.w	r9, r1, r9
 8005b68:	e7f5      	b.n	8005b56 <_strtod_l+0x25e>
 8005b6a:	2d10      	cmp	r5, #16
 8005b6c:	bfdc      	itt	le
 8005b6e:	230a      	movle	r3, #10
 8005b70:	fb03 2909 	mlale	r9, r3, r9, r2
 8005b74:	e7e1      	b.n	8005b3a <_strtod_l+0x242>
 8005b76:	2300      	movs	r3, #0
 8005b78:	9305      	str	r3, [sp, #20]
 8005b7a:	2301      	movs	r3, #1
 8005b7c:	e77c      	b.n	8005a78 <_strtod_l+0x180>
 8005b7e:	f04f 0c00 	mov.w	ip, #0
 8005b82:	f108 0202 	add.w	r2, r8, #2
 8005b86:	9217      	str	r2, [sp, #92]	; 0x5c
 8005b88:	f898 2002 	ldrb.w	r2, [r8, #2]
 8005b8c:	e785      	b.n	8005a9a <_strtod_l+0x1a2>
 8005b8e:	f04f 0c01 	mov.w	ip, #1
 8005b92:	e7f6      	b.n	8005b82 <_strtod_l+0x28a>
 8005b94:	0800a180 	.word	0x0800a180
 8005b98:	08009f34 	.word	0x08009f34
 8005b9c:	7ff00000 	.word	0x7ff00000
 8005ba0:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8005ba2:	1c51      	adds	r1, r2, #1
 8005ba4:	9117      	str	r1, [sp, #92]	; 0x5c
 8005ba6:	7852      	ldrb	r2, [r2, #1]
 8005ba8:	2a30      	cmp	r2, #48	; 0x30
 8005baa:	d0f9      	beq.n	8005ba0 <_strtod_l+0x2a8>
 8005bac:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8005bb0:	2908      	cmp	r1, #8
 8005bb2:	f63f af79 	bhi.w	8005aa8 <_strtod_l+0x1b0>
 8005bb6:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8005bba:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8005bbc:	9206      	str	r2, [sp, #24]
 8005bbe:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8005bc0:	1c51      	adds	r1, r2, #1
 8005bc2:	9117      	str	r1, [sp, #92]	; 0x5c
 8005bc4:	7852      	ldrb	r2, [r2, #1]
 8005bc6:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 8005bca:	2e09      	cmp	r6, #9
 8005bcc:	d937      	bls.n	8005c3e <_strtod_l+0x346>
 8005bce:	9e06      	ldr	r6, [sp, #24]
 8005bd0:	1b89      	subs	r1, r1, r6
 8005bd2:	2908      	cmp	r1, #8
 8005bd4:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8005bd8:	dc02      	bgt.n	8005be0 <_strtod_l+0x2e8>
 8005bda:	4576      	cmp	r6, lr
 8005bdc:	bfa8      	it	ge
 8005bde:	4676      	movge	r6, lr
 8005be0:	f1bc 0f00 	cmp.w	ip, #0
 8005be4:	d000      	beq.n	8005be8 <_strtod_l+0x2f0>
 8005be6:	4276      	negs	r6, r6
 8005be8:	2d00      	cmp	r5, #0
 8005bea:	d14d      	bne.n	8005c88 <_strtod_l+0x390>
 8005bec:	9904      	ldr	r1, [sp, #16]
 8005bee:	4301      	orrs	r1, r0
 8005bf0:	f47f aec6 	bne.w	8005980 <_strtod_l+0x88>
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	f47f aee1 	bne.w	80059bc <_strtod_l+0xc4>
 8005bfa:	2a69      	cmp	r2, #105	; 0x69
 8005bfc:	d027      	beq.n	8005c4e <_strtod_l+0x356>
 8005bfe:	dc24      	bgt.n	8005c4a <_strtod_l+0x352>
 8005c00:	2a49      	cmp	r2, #73	; 0x49
 8005c02:	d024      	beq.n	8005c4e <_strtod_l+0x356>
 8005c04:	2a4e      	cmp	r2, #78	; 0x4e
 8005c06:	f47f aed9 	bne.w	80059bc <_strtod_l+0xc4>
 8005c0a:	499f      	ldr	r1, [pc, #636]	; (8005e88 <_strtod_l+0x590>)
 8005c0c:	a817      	add	r0, sp, #92	; 0x5c
 8005c0e:	f001 fe61 	bl	80078d4 <__match>
 8005c12:	2800      	cmp	r0, #0
 8005c14:	f43f aed2 	beq.w	80059bc <_strtod_l+0xc4>
 8005c18:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005c1a:	781b      	ldrb	r3, [r3, #0]
 8005c1c:	2b28      	cmp	r3, #40	; 0x28
 8005c1e:	d12d      	bne.n	8005c7c <_strtod_l+0x384>
 8005c20:	499a      	ldr	r1, [pc, #616]	; (8005e8c <_strtod_l+0x594>)
 8005c22:	aa1a      	add	r2, sp, #104	; 0x68
 8005c24:	a817      	add	r0, sp, #92	; 0x5c
 8005c26:	f001 fe69 	bl	80078fc <__hexnan>
 8005c2a:	2805      	cmp	r0, #5
 8005c2c:	d126      	bne.n	8005c7c <_strtod_l+0x384>
 8005c2e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005c30:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 8005c34:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8005c38:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8005c3c:	e6a0      	b.n	8005980 <_strtod_l+0x88>
 8005c3e:	210a      	movs	r1, #10
 8005c40:	fb01 2e0e 	mla	lr, r1, lr, r2
 8005c44:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8005c48:	e7b9      	b.n	8005bbe <_strtod_l+0x2c6>
 8005c4a:	2a6e      	cmp	r2, #110	; 0x6e
 8005c4c:	e7db      	b.n	8005c06 <_strtod_l+0x30e>
 8005c4e:	4990      	ldr	r1, [pc, #576]	; (8005e90 <_strtod_l+0x598>)
 8005c50:	a817      	add	r0, sp, #92	; 0x5c
 8005c52:	f001 fe3f 	bl	80078d4 <__match>
 8005c56:	2800      	cmp	r0, #0
 8005c58:	f43f aeb0 	beq.w	80059bc <_strtod_l+0xc4>
 8005c5c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005c5e:	498d      	ldr	r1, [pc, #564]	; (8005e94 <_strtod_l+0x59c>)
 8005c60:	3b01      	subs	r3, #1
 8005c62:	a817      	add	r0, sp, #92	; 0x5c
 8005c64:	9317      	str	r3, [sp, #92]	; 0x5c
 8005c66:	f001 fe35 	bl	80078d4 <__match>
 8005c6a:	b910      	cbnz	r0, 8005c72 <_strtod_l+0x37a>
 8005c6c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005c6e:	3301      	adds	r3, #1
 8005c70:	9317      	str	r3, [sp, #92]	; 0x5c
 8005c72:	f8df b230 	ldr.w	fp, [pc, #560]	; 8005ea4 <_strtod_l+0x5ac>
 8005c76:	f04f 0a00 	mov.w	sl, #0
 8005c7a:	e681      	b.n	8005980 <_strtod_l+0x88>
 8005c7c:	4886      	ldr	r0, [pc, #536]	; (8005e98 <_strtod_l+0x5a0>)
 8005c7e:	f003 f963 	bl	8008f48 <nan>
 8005c82:	ec5b ab10 	vmov	sl, fp, d0
 8005c86:	e67b      	b.n	8005980 <_strtod_l+0x88>
 8005c88:	9b05      	ldr	r3, [sp, #20]
 8005c8a:	9807      	ldr	r0, [sp, #28]
 8005c8c:	1af3      	subs	r3, r6, r3
 8005c8e:	2f00      	cmp	r7, #0
 8005c90:	bf08      	it	eq
 8005c92:	462f      	moveq	r7, r5
 8005c94:	2d10      	cmp	r5, #16
 8005c96:	9306      	str	r3, [sp, #24]
 8005c98:	46a8      	mov	r8, r5
 8005c9a:	bfa8      	it	ge
 8005c9c:	f04f 0810 	movge.w	r8, #16
 8005ca0:	f7fa fc48 	bl	8000534 <__aeabi_ui2d>
 8005ca4:	2d09      	cmp	r5, #9
 8005ca6:	4682      	mov	sl, r0
 8005ca8:	468b      	mov	fp, r1
 8005caa:	dd13      	ble.n	8005cd4 <_strtod_l+0x3dc>
 8005cac:	4b7b      	ldr	r3, [pc, #492]	; (8005e9c <_strtod_l+0x5a4>)
 8005cae:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8005cb2:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8005cb6:	f7fa fcb7 	bl	8000628 <__aeabi_dmul>
 8005cba:	4682      	mov	sl, r0
 8005cbc:	4648      	mov	r0, r9
 8005cbe:	468b      	mov	fp, r1
 8005cc0:	f7fa fc38 	bl	8000534 <__aeabi_ui2d>
 8005cc4:	4602      	mov	r2, r0
 8005cc6:	460b      	mov	r3, r1
 8005cc8:	4650      	mov	r0, sl
 8005cca:	4659      	mov	r1, fp
 8005ccc:	f7fa faf6 	bl	80002bc <__adddf3>
 8005cd0:	4682      	mov	sl, r0
 8005cd2:	468b      	mov	fp, r1
 8005cd4:	2d0f      	cmp	r5, #15
 8005cd6:	dc38      	bgt.n	8005d4a <_strtod_l+0x452>
 8005cd8:	9b06      	ldr	r3, [sp, #24]
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	f43f ae50 	beq.w	8005980 <_strtod_l+0x88>
 8005ce0:	dd24      	ble.n	8005d2c <_strtod_l+0x434>
 8005ce2:	2b16      	cmp	r3, #22
 8005ce4:	dc0b      	bgt.n	8005cfe <_strtod_l+0x406>
 8005ce6:	496d      	ldr	r1, [pc, #436]	; (8005e9c <_strtod_l+0x5a4>)
 8005ce8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8005cec:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005cf0:	4652      	mov	r2, sl
 8005cf2:	465b      	mov	r3, fp
 8005cf4:	f7fa fc98 	bl	8000628 <__aeabi_dmul>
 8005cf8:	4682      	mov	sl, r0
 8005cfa:	468b      	mov	fp, r1
 8005cfc:	e640      	b.n	8005980 <_strtod_l+0x88>
 8005cfe:	9a06      	ldr	r2, [sp, #24]
 8005d00:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8005d04:	4293      	cmp	r3, r2
 8005d06:	db20      	blt.n	8005d4a <_strtod_l+0x452>
 8005d08:	4c64      	ldr	r4, [pc, #400]	; (8005e9c <_strtod_l+0x5a4>)
 8005d0a:	f1c5 050f 	rsb	r5, r5, #15
 8005d0e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8005d12:	4652      	mov	r2, sl
 8005d14:	465b      	mov	r3, fp
 8005d16:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005d1a:	f7fa fc85 	bl	8000628 <__aeabi_dmul>
 8005d1e:	9b06      	ldr	r3, [sp, #24]
 8005d20:	1b5d      	subs	r5, r3, r5
 8005d22:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8005d26:	e9d4 2300 	ldrd	r2, r3, [r4]
 8005d2a:	e7e3      	b.n	8005cf4 <_strtod_l+0x3fc>
 8005d2c:	9b06      	ldr	r3, [sp, #24]
 8005d2e:	3316      	adds	r3, #22
 8005d30:	db0b      	blt.n	8005d4a <_strtod_l+0x452>
 8005d32:	9b05      	ldr	r3, [sp, #20]
 8005d34:	1b9e      	subs	r6, r3, r6
 8005d36:	4b59      	ldr	r3, [pc, #356]	; (8005e9c <_strtod_l+0x5a4>)
 8005d38:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8005d3c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005d40:	4650      	mov	r0, sl
 8005d42:	4659      	mov	r1, fp
 8005d44:	f7fa fd9a 	bl	800087c <__aeabi_ddiv>
 8005d48:	e7d6      	b.n	8005cf8 <_strtod_l+0x400>
 8005d4a:	9b06      	ldr	r3, [sp, #24]
 8005d4c:	eba5 0808 	sub.w	r8, r5, r8
 8005d50:	4498      	add	r8, r3
 8005d52:	f1b8 0f00 	cmp.w	r8, #0
 8005d56:	dd74      	ble.n	8005e42 <_strtod_l+0x54a>
 8005d58:	f018 030f 	ands.w	r3, r8, #15
 8005d5c:	d00a      	beq.n	8005d74 <_strtod_l+0x47c>
 8005d5e:	494f      	ldr	r1, [pc, #316]	; (8005e9c <_strtod_l+0x5a4>)
 8005d60:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8005d64:	4652      	mov	r2, sl
 8005d66:	465b      	mov	r3, fp
 8005d68:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005d6c:	f7fa fc5c 	bl	8000628 <__aeabi_dmul>
 8005d70:	4682      	mov	sl, r0
 8005d72:	468b      	mov	fp, r1
 8005d74:	f038 080f 	bics.w	r8, r8, #15
 8005d78:	d04f      	beq.n	8005e1a <_strtod_l+0x522>
 8005d7a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8005d7e:	dd22      	ble.n	8005dc6 <_strtod_l+0x4ce>
 8005d80:	2500      	movs	r5, #0
 8005d82:	462e      	mov	r6, r5
 8005d84:	9507      	str	r5, [sp, #28]
 8005d86:	9505      	str	r5, [sp, #20]
 8005d88:	2322      	movs	r3, #34	; 0x22
 8005d8a:	f8df b118 	ldr.w	fp, [pc, #280]	; 8005ea4 <_strtod_l+0x5ac>
 8005d8e:	6023      	str	r3, [r4, #0]
 8005d90:	f04f 0a00 	mov.w	sl, #0
 8005d94:	9b07      	ldr	r3, [sp, #28]
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	f43f adf2 	beq.w	8005980 <_strtod_l+0x88>
 8005d9c:	9918      	ldr	r1, [sp, #96]	; 0x60
 8005d9e:	4620      	mov	r0, r4
 8005da0:	f001 fec6 	bl	8007b30 <_Bfree>
 8005da4:	9905      	ldr	r1, [sp, #20]
 8005da6:	4620      	mov	r0, r4
 8005da8:	f001 fec2 	bl	8007b30 <_Bfree>
 8005dac:	4631      	mov	r1, r6
 8005dae:	4620      	mov	r0, r4
 8005db0:	f001 febe 	bl	8007b30 <_Bfree>
 8005db4:	9907      	ldr	r1, [sp, #28]
 8005db6:	4620      	mov	r0, r4
 8005db8:	f001 feba 	bl	8007b30 <_Bfree>
 8005dbc:	4629      	mov	r1, r5
 8005dbe:	4620      	mov	r0, r4
 8005dc0:	f001 feb6 	bl	8007b30 <_Bfree>
 8005dc4:	e5dc      	b.n	8005980 <_strtod_l+0x88>
 8005dc6:	4b36      	ldr	r3, [pc, #216]	; (8005ea0 <_strtod_l+0x5a8>)
 8005dc8:	9304      	str	r3, [sp, #16]
 8005dca:	2300      	movs	r3, #0
 8005dcc:	ea4f 1828 	mov.w	r8, r8, asr #4
 8005dd0:	4650      	mov	r0, sl
 8005dd2:	4659      	mov	r1, fp
 8005dd4:	4699      	mov	r9, r3
 8005dd6:	f1b8 0f01 	cmp.w	r8, #1
 8005dda:	dc21      	bgt.n	8005e20 <_strtod_l+0x528>
 8005ddc:	b10b      	cbz	r3, 8005de2 <_strtod_l+0x4ea>
 8005dde:	4682      	mov	sl, r0
 8005de0:	468b      	mov	fp, r1
 8005de2:	4b2f      	ldr	r3, [pc, #188]	; (8005ea0 <_strtod_l+0x5a8>)
 8005de4:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8005de8:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8005dec:	4652      	mov	r2, sl
 8005dee:	465b      	mov	r3, fp
 8005df0:	e9d9 0100 	ldrd	r0, r1, [r9]
 8005df4:	f7fa fc18 	bl	8000628 <__aeabi_dmul>
 8005df8:	4b2a      	ldr	r3, [pc, #168]	; (8005ea4 <_strtod_l+0x5ac>)
 8005dfa:	460a      	mov	r2, r1
 8005dfc:	400b      	ands	r3, r1
 8005dfe:	492a      	ldr	r1, [pc, #168]	; (8005ea8 <_strtod_l+0x5b0>)
 8005e00:	428b      	cmp	r3, r1
 8005e02:	4682      	mov	sl, r0
 8005e04:	d8bc      	bhi.n	8005d80 <_strtod_l+0x488>
 8005e06:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8005e0a:	428b      	cmp	r3, r1
 8005e0c:	bf86      	itte	hi
 8005e0e:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 8005eac <_strtod_l+0x5b4>
 8005e12:	f04f 3aff 	movhi.w	sl, #4294967295
 8005e16:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8005e1a:	2300      	movs	r3, #0
 8005e1c:	9304      	str	r3, [sp, #16]
 8005e1e:	e084      	b.n	8005f2a <_strtod_l+0x632>
 8005e20:	f018 0f01 	tst.w	r8, #1
 8005e24:	d005      	beq.n	8005e32 <_strtod_l+0x53a>
 8005e26:	9b04      	ldr	r3, [sp, #16]
 8005e28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e2c:	f7fa fbfc 	bl	8000628 <__aeabi_dmul>
 8005e30:	2301      	movs	r3, #1
 8005e32:	9a04      	ldr	r2, [sp, #16]
 8005e34:	3208      	adds	r2, #8
 8005e36:	f109 0901 	add.w	r9, r9, #1
 8005e3a:	ea4f 0868 	mov.w	r8, r8, asr #1
 8005e3e:	9204      	str	r2, [sp, #16]
 8005e40:	e7c9      	b.n	8005dd6 <_strtod_l+0x4de>
 8005e42:	d0ea      	beq.n	8005e1a <_strtod_l+0x522>
 8005e44:	f1c8 0800 	rsb	r8, r8, #0
 8005e48:	f018 020f 	ands.w	r2, r8, #15
 8005e4c:	d00a      	beq.n	8005e64 <_strtod_l+0x56c>
 8005e4e:	4b13      	ldr	r3, [pc, #76]	; (8005e9c <_strtod_l+0x5a4>)
 8005e50:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005e54:	4650      	mov	r0, sl
 8005e56:	4659      	mov	r1, fp
 8005e58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e5c:	f7fa fd0e 	bl	800087c <__aeabi_ddiv>
 8005e60:	4682      	mov	sl, r0
 8005e62:	468b      	mov	fp, r1
 8005e64:	ea5f 1828 	movs.w	r8, r8, asr #4
 8005e68:	d0d7      	beq.n	8005e1a <_strtod_l+0x522>
 8005e6a:	f1b8 0f1f 	cmp.w	r8, #31
 8005e6e:	dd1f      	ble.n	8005eb0 <_strtod_l+0x5b8>
 8005e70:	2500      	movs	r5, #0
 8005e72:	462e      	mov	r6, r5
 8005e74:	9507      	str	r5, [sp, #28]
 8005e76:	9505      	str	r5, [sp, #20]
 8005e78:	2322      	movs	r3, #34	; 0x22
 8005e7a:	f04f 0a00 	mov.w	sl, #0
 8005e7e:	f04f 0b00 	mov.w	fp, #0
 8005e82:	6023      	str	r3, [r4, #0]
 8005e84:	e786      	b.n	8005d94 <_strtod_l+0x49c>
 8005e86:	bf00      	nop
 8005e88:	08009f09 	.word	0x08009f09
 8005e8c:	08009f48 	.word	0x08009f48
 8005e90:	08009f01 	.word	0x08009f01
 8005e94:	0800a08c 	.word	0x0800a08c
 8005e98:	0800a353 	.word	0x0800a353
 8005e9c:	0800a218 	.word	0x0800a218
 8005ea0:	0800a1f0 	.word	0x0800a1f0
 8005ea4:	7ff00000 	.word	0x7ff00000
 8005ea8:	7ca00000 	.word	0x7ca00000
 8005eac:	7fefffff 	.word	0x7fefffff
 8005eb0:	f018 0310 	ands.w	r3, r8, #16
 8005eb4:	bf18      	it	ne
 8005eb6:	236a      	movne	r3, #106	; 0x6a
 8005eb8:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 8006268 <_strtod_l+0x970>
 8005ebc:	9304      	str	r3, [sp, #16]
 8005ebe:	4650      	mov	r0, sl
 8005ec0:	4659      	mov	r1, fp
 8005ec2:	2300      	movs	r3, #0
 8005ec4:	f018 0f01 	tst.w	r8, #1
 8005ec8:	d004      	beq.n	8005ed4 <_strtod_l+0x5dc>
 8005eca:	e9d9 2300 	ldrd	r2, r3, [r9]
 8005ece:	f7fa fbab 	bl	8000628 <__aeabi_dmul>
 8005ed2:	2301      	movs	r3, #1
 8005ed4:	ea5f 0868 	movs.w	r8, r8, asr #1
 8005ed8:	f109 0908 	add.w	r9, r9, #8
 8005edc:	d1f2      	bne.n	8005ec4 <_strtod_l+0x5cc>
 8005ede:	b10b      	cbz	r3, 8005ee4 <_strtod_l+0x5ec>
 8005ee0:	4682      	mov	sl, r0
 8005ee2:	468b      	mov	fp, r1
 8005ee4:	9b04      	ldr	r3, [sp, #16]
 8005ee6:	b1c3      	cbz	r3, 8005f1a <_strtod_l+0x622>
 8005ee8:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8005eec:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	4659      	mov	r1, fp
 8005ef4:	dd11      	ble.n	8005f1a <_strtod_l+0x622>
 8005ef6:	2b1f      	cmp	r3, #31
 8005ef8:	f340 8124 	ble.w	8006144 <_strtod_l+0x84c>
 8005efc:	2b34      	cmp	r3, #52	; 0x34
 8005efe:	bfde      	ittt	le
 8005f00:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8005f04:	f04f 33ff 	movle.w	r3, #4294967295
 8005f08:	fa03 f202 	lslle.w	r2, r3, r2
 8005f0c:	f04f 0a00 	mov.w	sl, #0
 8005f10:	bfcc      	ite	gt
 8005f12:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8005f16:	ea02 0b01 	andle.w	fp, r2, r1
 8005f1a:	2200      	movs	r2, #0
 8005f1c:	2300      	movs	r3, #0
 8005f1e:	4650      	mov	r0, sl
 8005f20:	4659      	mov	r1, fp
 8005f22:	f7fa fde9 	bl	8000af8 <__aeabi_dcmpeq>
 8005f26:	2800      	cmp	r0, #0
 8005f28:	d1a2      	bne.n	8005e70 <_strtod_l+0x578>
 8005f2a:	9b07      	ldr	r3, [sp, #28]
 8005f2c:	9300      	str	r3, [sp, #0]
 8005f2e:	9908      	ldr	r1, [sp, #32]
 8005f30:	462b      	mov	r3, r5
 8005f32:	463a      	mov	r2, r7
 8005f34:	4620      	mov	r0, r4
 8005f36:	f001 fe63 	bl	8007c00 <__s2b>
 8005f3a:	9007      	str	r0, [sp, #28]
 8005f3c:	2800      	cmp	r0, #0
 8005f3e:	f43f af1f 	beq.w	8005d80 <_strtod_l+0x488>
 8005f42:	9b05      	ldr	r3, [sp, #20]
 8005f44:	1b9e      	subs	r6, r3, r6
 8005f46:	9b06      	ldr	r3, [sp, #24]
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	bfb4      	ite	lt
 8005f4c:	4633      	movlt	r3, r6
 8005f4e:	2300      	movge	r3, #0
 8005f50:	930c      	str	r3, [sp, #48]	; 0x30
 8005f52:	9b06      	ldr	r3, [sp, #24]
 8005f54:	2500      	movs	r5, #0
 8005f56:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8005f5a:	9312      	str	r3, [sp, #72]	; 0x48
 8005f5c:	462e      	mov	r6, r5
 8005f5e:	9b07      	ldr	r3, [sp, #28]
 8005f60:	4620      	mov	r0, r4
 8005f62:	6859      	ldr	r1, [r3, #4]
 8005f64:	f001 fda4 	bl	8007ab0 <_Balloc>
 8005f68:	9005      	str	r0, [sp, #20]
 8005f6a:	2800      	cmp	r0, #0
 8005f6c:	f43f af0c 	beq.w	8005d88 <_strtod_l+0x490>
 8005f70:	9b07      	ldr	r3, [sp, #28]
 8005f72:	691a      	ldr	r2, [r3, #16]
 8005f74:	3202      	adds	r2, #2
 8005f76:	f103 010c 	add.w	r1, r3, #12
 8005f7a:	0092      	lsls	r2, r2, #2
 8005f7c:	300c      	adds	r0, #12
 8005f7e:	f001 fd89 	bl	8007a94 <memcpy>
 8005f82:	ec4b ab10 	vmov	d0, sl, fp
 8005f86:	aa1a      	add	r2, sp, #104	; 0x68
 8005f88:	a919      	add	r1, sp, #100	; 0x64
 8005f8a:	4620      	mov	r0, r4
 8005f8c:	f002 f97e 	bl	800828c <__d2b>
 8005f90:	ec4b ab18 	vmov	d8, sl, fp
 8005f94:	9018      	str	r0, [sp, #96]	; 0x60
 8005f96:	2800      	cmp	r0, #0
 8005f98:	f43f aef6 	beq.w	8005d88 <_strtod_l+0x490>
 8005f9c:	2101      	movs	r1, #1
 8005f9e:	4620      	mov	r0, r4
 8005fa0:	f001 fec8 	bl	8007d34 <__i2b>
 8005fa4:	4606      	mov	r6, r0
 8005fa6:	2800      	cmp	r0, #0
 8005fa8:	f43f aeee 	beq.w	8005d88 <_strtod_l+0x490>
 8005fac:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005fae:	9904      	ldr	r1, [sp, #16]
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	bfab      	itete	ge
 8005fb4:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 8005fb6:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8005fb8:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8005fba:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 8005fbe:	bfac      	ite	ge
 8005fc0:	eb03 0902 	addge.w	r9, r3, r2
 8005fc4:	1ad7      	sublt	r7, r2, r3
 8005fc6:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8005fc8:	eba3 0801 	sub.w	r8, r3, r1
 8005fcc:	4490      	add	r8, r2
 8005fce:	4ba1      	ldr	r3, [pc, #644]	; (8006254 <_strtod_l+0x95c>)
 8005fd0:	f108 38ff 	add.w	r8, r8, #4294967295
 8005fd4:	4598      	cmp	r8, r3
 8005fd6:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8005fda:	f280 80c7 	bge.w	800616c <_strtod_l+0x874>
 8005fde:	eba3 0308 	sub.w	r3, r3, r8
 8005fe2:	2b1f      	cmp	r3, #31
 8005fe4:	eba2 0203 	sub.w	r2, r2, r3
 8005fe8:	f04f 0101 	mov.w	r1, #1
 8005fec:	f300 80b1 	bgt.w	8006152 <_strtod_l+0x85a>
 8005ff0:	fa01 f303 	lsl.w	r3, r1, r3
 8005ff4:	930d      	str	r3, [sp, #52]	; 0x34
 8005ff6:	2300      	movs	r3, #0
 8005ff8:	9308      	str	r3, [sp, #32]
 8005ffa:	eb09 0802 	add.w	r8, r9, r2
 8005ffe:	9b04      	ldr	r3, [sp, #16]
 8006000:	45c1      	cmp	r9, r8
 8006002:	4417      	add	r7, r2
 8006004:	441f      	add	r7, r3
 8006006:	464b      	mov	r3, r9
 8006008:	bfa8      	it	ge
 800600a:	4643      	movge	r3, r8
 800600c:	42bb      	cmp	r3, r7
 800600e:	bfa8      	it	ge
 8006010:	463b      	movge	r3, r7
 8006012:	2b00      	cmp	r3, #0
 8006014:	bfc2      	ittt	gt
 8006016:	eba8 0803 	subgt.w	r8, r8, r3
 800601a:	1aff      	subgt	r7, r7, r3
 800601c:	eba9 0903 	subgt.w	r9, r9, r3
 8006020:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006022:	2b00      	cmp	r3, #0
 8006024:	dd17      	ble.n	8006056 <_strtod_l+0x75e>
 8006026:	4631      	mov	r1, r6
 8006028:	461a      	mov	r2, r3
 800602a:	4620      	mov	r0, r4
 800602c:	f001 ff42 	bl	8007eb4 <__pow5mult>
 8006030:	4606      	mov	r6, r0
 8006032:	2800      	cmp	r0, #0
 8006034:	f43f aea8 	beq.w	8005d88 <_strtod_l+0x490>
 8006038:	4601      	mov	r1, r0
 800603a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800603c:	4620      	mov	r0, r4
 800603e:	f001 fe8f 	bl	8007d60 <__multiply>
 8006042:	900b      	str	r0, [sp, #44]	; 0x2c
 8006044:	2800      	cmp	r0, #0
 8006046:	f43f ae9f 	beq.w	8005d88 <_strtod_l+0x490>
 800604a:	9918      	ldr	r1, [sp, #96]	; 0x60
 800604c:	4620      	mov	r0, r4
 800604e:	f001 fd6f 	bl	8007b30 <_Bfree>
 8006052:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006054:	9318      	str	r3, [sp, #96]	; 0x60
 8006056:	f1b8 0f00 	cmp.w	r8, #0
 800605a:	f300 808c 	bgt.w	8006176 <_strtod_l+0x87e>
 800605e:	9b06      	ldr	r3, [sp, #24]
 8006060:	2b00      	cmp	r3, #0
 8006062:	dd08      	ble.n	8006076 <_strtod_l+0x77e>
 8006064:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006066:	9905      	ldr	r1, [sp, #20]
 8006068:	4620      	mov	r0, r4
 800606a:	f001 ff23 	bl	8007eb4 <__pow5mult>
 800606e:	9005      	str	r0, [sp, #20]
 8006070:	2800      	cmp	r0, #0
 8006072:	f43f ae89 	beq.w	8005d88 <_strtod_l+0x490>
 8006076:	2f00      	cmp	r7, #0
 8006078:	dd08      	ble.n	800608c <_strtod_l+0x794>
 800607a:	9905      	ldr	r1, [sp, #20]
 800607c:	463a      	mov	r2, r7
 800607e:	4620      	mov	r0, r4
 8006080:	f001 ff72 	bl	8007f68 <__lshift>
 8006084:	9005      	str	r0, [sp, #20]
 8006086:	2800      	cmp	r0, #0
 8006088:	f43f ae7e 	beq.w	8005d88 <_strtod_l+0x490>
 800608c:	f1b9 0f00 	cmp.w	r9, #0
 8006090:	dd08      	ble.n	80060a4 <_strtod_l+0x7ac>
 8006092:	4631      	mov	r1, r6
 8006094:	464a      	mov	r2, r9
 8006096:	4620      	mov	r0, r4
 8006098:	f001 ff66 	bl	8007f68 <__lshift>
 800609c:	4606      	mov	r6, r0
 800609e:	2800      	cmp	r0, #0
 80060a0:	f43f ae72 	beq.w	8005d88 <_strtod_l+0x490>
 80060a4:	9a05      	ldr	r2, [sp, #20]
 80060a6:	9918      	ldr	r1, [sp, #96]	; 0x60
 80060a8:	4620      	mov	r0, r4
 80060aa:	f001 ffe9 	bl	8008080 <__mdiff>
 80060ae:	4605      	mov	r5, r0
 80060b0:	2800      	cmp	r0, #0
 80060b2:	f43f ae69 	beq.w	8005d88 <_strtod_l+0x490>
 80060b6:	68c3      	ldr	r3, [r0, #12]
 80060b8:	930b      	str	r3, [sp, #44]	; 0x2c
 80060ba:	2300      	movs	r3, #0
 80060bc:	60c3      	str	r3, [r0, #12]
 80060be:	4631      	mov	r1, r6
 80060c0:	f001 ffc2 	bl	8008048 <__mcmp>
 80060c4:	2800      	cmp	r0, #0
 80060c6:	da60      	bge.n	800618a <_strtod_l+0x892>
 80060c8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80060ca:	ea53 030a 	orrs.w	r3, r3, sl
 80060ce:	f040 8082 	bne.w	80061d6 <_strtod_l+0x8de>
 80060d2:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d17d      	bne.n	80061d6 <_strtod_l+0x8de>
 80060da:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80060de:	0d1b      	lsrs	r3, r3, #20
 80060e0:	051b      	lsls	r3, r3, #20
 80060e2:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80060e6:	d976      	bls.n	80061d6 <_strtod_l+0x8de>
 80060e8:	696b      	ldr	r3, [r5, #20]
 80060ea:	b913      	cbnz	r3, 80060f2 <_strtod_l+0x7fa>
 80060ec:	692b      	ldr	r3, [r5, #16]
 80060ee:	2b01      	cmp	r3, #1
 80060f0:	dd71      	ble.n	80061d6 <_strtod_l+0x8de>
 80060f2:	4629      	mov	r1, r5
 80060f4:	2201      	movs	r2, #1
 80060f6:	4620      	mov	r0, r4
 80060f8:	f001 ff36 	bl	8007f68 <__lshift>
 80060fc:	4631      	mov	r1, r6
 80060fe:	4605      	mov	r5, r0
 8006100:	f001 ffa2 	bl	8008048 <__mcmp>
 8006104:	2800      	cmp	r0, #0
 8006106:	dd66      	ble.n	80061d6 <_strtod_l+0x8de>
 8006108:	9904      	ldr	r1, [sp, #16]
 800610a:	4a53      	ldr	r2, [pc, #332]	; (8006258 <_strtod_l+0x960>)
 800610c:	465b      	mov	r3, fp
 800610e:	2900      	cmp	r1, #0
 8006110:	f000 8081 	beq.w	8006216 <_strtod_l+0x91e>
 8006114:	ea02 010b 	and.w	r1, r2, fp
 8006118:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800611c:	dc7b      	bgt.n	8006216 <_strtod_l+0x91e>
 800611e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8006122:	f77f aea9 	ble.w	8005e78 <_strtod_l+0x580>
 8006126:	4b4d      	ldr	r3, [pc, #308]	; (800625c <_strtod_l+0x964>)
 8006128:	4650      	mov	r0, sl
 800612a:	4659      	mov	r1, fp
 800612c:	2200      	movs	r2, #0
 800612e:	f7fa fa7b 	bl	8000628 <__aeabi_dmul>
 8006132:	460b      	mov	r3, r1
 8006134:	4303      	orrs	r3, r0
 8006136:	bf08      	it	eq
 8006138:	2322      	moveq	r3, #34	; 0x22
 800613a:	4682      	mov	sl, r0
 800613c:	468b      	mov	fp, r1
 800613e:	bf08      	it	eq
 8006140:	6023      	streq	r3, [r4, #0]
 8006142:	e62b      	b.n	8005d9c <_strtod_l+0x4a4>
 8006144:	f04f 32ff 	mov.w	r2, #4294967295
 8006148:	fa02 f303 	lsl.w	r3, r2, r3
 800614c:	ea03 0a0a 	and.w	sl, r3, sl
 8006150:	e6e3      	b.n	8005f1a <_strtod_l+0x622>
 8006152:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8006156:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800615a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800615e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8006162:	fa01 f308 	lsl.w	r3, r1, r8
 8006166:	9308      	str	r3, [sp, #32]
 8006168:	910d      	str	r1, [sp, #52]	; 0x34
 800616a:	e746      	b.n	8005ffa <_strtod_l+0x702>
 800616c:	2300      	movs	r3, #0
 800616e:	9308      	str	r3, [sp, #32]
 8006170:	2301      	movs	r3, #1
 8006172:	930d      	str	r3, [sp, #52]	; 0x34
 8006174:	e741      	b.n	8005ffa <_strtod_l+0x702>
 8006176:	9918      	ldr	r1, [sp, #96]	; 0x60
 8006178:	4642      	mov	r2, r8
 800617a:	4620      	mov	r0, r4
 800617c:	f001 fef4 	bl	8007f68 <__lshift>
 8006180:	9018      	str	r0, [sp, #96]	; 0x60
 8006182:	2800      	cmp	r0, #0
 8006184:	f47f af6b 	bne.w	800605e <_strtod_l+0x766>
 8006188:	e5fe      	b.n	8005d88 <_strtod_l+0x490>
 800618a:	465f      	mov	r7, fp
 800618c:	d16e      	bne.n	800626c <_strtod_l+0x974>
 800618e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006190:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006194:	b342      	cbz	r2, 80061e8 <_strtod_l+0x8f0>
 8006196:	4a32      	ldr	r2, [pc, #200]	; (8006260 <_strtod_l+0x968>)
 8006198:	4293      	cmp	r3, r2
 800619a:	d128      	bne.n	80061ee <_strtod_l+0x8f6>
 800619c:	9b04      	ldr	r3, [sp, #16]
 800619e:	4651      	mov	r1, sl
 80061a0:	b1eb      	cbz	r3, 80061de <_strtod_l+0x8e6>
 80061a2:	4b2d      	ldr	r3, [pc, #180]	; (8006258 <_strtod_l+0x960>)
 80061a4:	403b      	ands	r3, r7
 80061a6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80061aa:	f04f 32ff 	mov.w	r2, #4294967295
 80061ae:	d819      	bhi.n	80061e4 <_strtod_l+0x8ec>
 80061b0:	0d1b      	lsrs	r3, r3, #20
 80061b2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80061b6:	fa02 f303 	lsl.w	r3, r2, r3
 80061ba:	4299      	cmp	r1, r3
 80061bc:	d117      	bne.n	80061ee <_strtod_l+0x8f6>
 80061be:	4b29      	ldr	r3, [pc, #164]	; (8006264 <_strtod_l+0x96c>)
 80061c0:	429f      	cmp	r7, r3
 80061c2:	d102      	bne.n	80061ca <_strtod_l+0x8d2>
 80061c4:	3101      	adds	r1, #1
 80061c6:	f43f addf 	beq.w	8005d88 <_strtod_l+0x490>
 80061ca:	4b23      	ldr	r3, [pc, #140]	; (8006258 <_strtod_l+0x960>)
 80061cc:	403b      	ands	r3, r7
 80061ce:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 80061d2:	f04f 0a00 	mov.w	sl, #0
 80061d6:	9b04      	ldr	r3, [sp, #16]
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d1a4      	bne.n	8006126 <_strtod_l+0x82e>
 80061dc:	e5de      	b.n	8005d9c <_strtod_l+0x4a4>
 80061de:	f04f 33ff 	mov.w	r3, #4294967295
 80061e2:	e7ea      	b.n	80061ba <_strtod_l+0x8c2>
 80061e4:	4613      	mov	r3, r2
 80061e6:	e7e8      	b.n	80061ba <_strtod_l+0x8c2>
 80061e8:	ea53 030a 	orrs.w	r3, r3, sl
 80061ec:	d08c      	beq.n	8006108 <_strtod_l+0x810>
 80061ee:	9b08      	ldr	r3, [sp, #32]
 80061f0:	b1db      	cbz	r3, 800622a <_strtod_l+0x932>
 80061f2:	423b      	tst	r3, r7
 80061f4:	d0ef      	beq.n	80061d6 <_strtod_l+0x8de>
 80061f6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80061f8:	9a04      	ldr	r2, [sp, #16]
 80061fa:	4650      	mov	r0, sl
 80061fc:	4659      	mov	r1, fp
 80061fe:	b1c3      	cbz	r3, 8006232 <_strtod_l+0x93a>
 8006200:	f7ff fb5d 	bl	80058be <sulp>
 8006204:	4602      	mov	r2, r0
 8006206:	460b      	mov	r3, r1
 8006208:	ec51 0b18 	vmov	r0, r1, d8
 800620c:	f7fa f856 	bl	80002bc <__adddf3>
 8006210:	4682      	mov	sl, r0
 8006212:	468b      	mov	fp, r1
 8006214:	e7df      	b.n	80061d6 <_strtod_l+0x8de>
 8006216:	4013      	ands	r3, r2
 8006218:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800621c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8006220:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8006224:	f04f 3aff 	mov.w	sl, #4294967295
 8006228:	e7d5      	b.n	80061d6 <_strtod_l+0x8de>
 800622a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800622c:	ea13 0f0a 	tst.w	r3, sl
 8006230:	e7e0      	b.n	80061f4 <_strtod_l+0x8fc>
 8006232:	f7ff fb44 	bl	80058be <sulp>
 8006236:	4602      	mov	r2, r0
 8006238:	460b      	mov	r3, r1
 800623a:	ec51 0b18 	vmov	r0, r1, d8
 800623e:	f7fa f83b 	bl	80002b8 <__aeabi_dsub>
 8006242:	2200      	movs	r2, #0
 8006244:	2300      	movs	r3, #0
 8006246:	4682      	mov	sl, r0
 8006248:	468b      	mov	fp, r1
 800624a:	f7fa fc55 	bl	8000af8 <__aeabi_dcmpeq>
 800624e:	2800      	cmp	r0, #0
 8006250:	d0c1      	beq.n	80061d6 <_strtod_l+0x8de>
 8006252:	e611      	b.n	8005e78 <_strtod_l+0x580>
 8006254:	fffffc02 	.word	0xfffffc02
 8006258:	7ff00000 	.word	0x7ff00000
 800625c:	39500000 	.word	0x39500000
 8006260:	000fffff 	.word	0x000fffff
 8006264:	7fefffff 	.word	0x7fefffff
 8006268:	08009f60 	.word	0x08009f60
 800626c:	4631      	mov	r1, r6
 800626e:	4628      	mov	r0, r5
 8006270:	f002 f868 	bl	8008344 <__ratio>
 8006274:	ec59 8b10 	vmov	r8, r9, d0
 8006278:	ee10 0a10 	vmov	r0, s0
 800627c:	2200      	movs	r2, #0
 800627e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006282:	4649      	mov	r1, r9
 8006284:	f7fa fc4c 	bl	8000b20 <__aeabi_dcmple>
 8006288:	2800      	cmp	r0, #0
 800628a:	d07a      	beq.n	8006382 <_strtod_l+0xa8a>
 800628c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800628e:	2b00      	cmp	r3, #0
 8006290:	d04a      	beq.n	8006328 <_strtod_l+0xa30>
 8006292:	4b95      	ldr	r3, [pc, #596]	; (80064e8 <_strtod_l+0xbf0>)
 8006294:	2200      	movs	r2, #0
 8006296:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800629a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 80064e8 <_strtod_l+0xbf0>
 800629e:	f04f 0800 	mov.w	r8, #0
 80062a2:	4b92      	ldr	r3, [pc, #584]	; (80064ec <_strtod_l+0xbf4>)
 80062a4:	403b      	ands	r3, r7
 80062a6:	930d      	str	r3, [sp, #52]	; 0x34
 80062a8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80062aa:	4b91      	ldr	r3, [pc, #580]	; (80064f0 <_strtod_l+0xbf8>)
 80062ac:	429a      	cmp	r2, r3
 80062ae:	f040 80b0 	bne.w	8006412 <_strtod_l+0xb1a>
 80062b2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80062b6:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 80062ba:	ec4b ab10 	vmov	d0, sl, fp
 80062be:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80062c2:	f001 ff67 	bl	8008194 <__ulp>
 80062c6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80062ca:	ec53 2b10 	vmov	r2, r3, d0
 80062ce:	f7fa f9ab 	bl	8000628 <__aeabi_dmul>
 80062d2:	4652      	mov	r2, sl
 80062d4:	465b      	mov	r3, fp
 80062d6:	f7f9 fff1 	bl	80002bc <__adddf3>
 80062da:	460b      	mov	r3, r1
 80062dc:	4983      	ldr	r1, [pc, #524]	; (80064ec <_strtod_l+0xbf4>)
 80062de:	4a85      	ldr	r2, [pc, #532]	; (80064f4 <_strtod_l+0xbfc>)
 80062e0:	4019      	ands	r1, r3
 80062e2:	4291      	cmp	r1, r2
 80062e4:	4682      	mov	sl, r0
 80062e6:	d960      	bls.n	80063aa <_strtod_l+0xab2>
 80062e8:	ee18 3a90 	vmov	r3, s17
 80062ec:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 80062f0:	4293      	cmp	r3, r2
 80062f2:	d104      	bne.n	80062fe <_strtod_l+0xa06>
 80062f4:	ee18 3a10 	vmov	r3, s16
 80062f8:	3301      	adds	r3, #1
 80062fa:	f43f ad45 	beq.w	8005d88 <_strtod_l+0x490>
 80062fe:	f8df b200 	ldr.w	fp, [pc, #512]	; 8006500 <_strtod_l+0xc08>
 8006302:	f04f 3aff 	mov.w	sl, #4294967295
 8006306:	9918      	ldr	r1, [sp, #96]	; 0x60
 8006308:	4620      	mov	r0, r4
 800630a:	f001 fc11 	bl	8007b30 <_Bfree>
 800630e:	9905      	ldr	r1, [sp, #20]
 8006310:	4620      	mov	r0, r4
 8006312:	f001 fc0d 	bl	8007b30 <_Bfree>
 8006316:	4631      	mov	r1, r6
 8006318:	4620      	mov	r0, r4
 800631a:	f001 fc09 	bl	8007b30 <_Bfree>
 800631e:	4629      	mov	r1, r5
 8006320:	4620      	mov	r0, r4
 8006322:	f001 fc05 	bl	8007b30 <_Bfree>
 8006326:	e61a      	b.n	8005f5e <_strtod_l+0x666>
 8006328:	f1ba 0f00 	cmp.w	sl, #0
 800632c:	d11b      	bne.n	8006366 <_strtod_l+0xa6e>
 800632e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006332:	b9f3      	cbnz	r3, 8006372 <_strtod_l+0xa7a>
 8006334:	4b6c      	ldr	r3, [pc, #432]	; (80064e8 <_strtod_l+0xbf0>)
 8006336:	2200      	movs	r2, #0
 8006338:	4640      	mov	r0, r8
 800633a:	4649      	mov	r1, r9
 800633c:	f7fa fbe6 	bl	8000b0c <__aeabi_dcmplt>
 8006340:	b9d0      	cbnz	r0, 8006378 <_strtod_l+0xa80>
 8006342:	4640      	mov	r0, r8
 8006344:	4649      	mov	r1, r9
 8006346:	4b6c      	ldr	r3, [pc, #432]	; (80064f8 <_strtod_l+0xc00>)
 8006348:	2200      	movs	r2, #0
 800634a:	f7fa f96d 	bl	8000628 <__aeabi_dmul>
 800634e:	4680      	mov	r8, r0
 8006350:	4689      	mov	r9, r1
 8006352:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8006356:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 800635a:	9315      	str	r3, [sp, #84]	; 0x54
 800635c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8006360:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8006364:	e79d      	b.n	80062a2 <_strtod_l+0x9aa>
 8006366:	f1ba 0f01 	cmp.w	sl, #1
 800636a:	d102      	bne.n	8006372 <_strtod_l+0xa7a>
 800636c:	2f00      	cmp	r7, #0
 800636e:	f43f ad83 	beq.w	8005e78 <_strtod_l+0x580>
 8006372:	4b62      	ldr	r3, [pc, #392]	; (80064fc <_strtod_l+0xc04>)
 8006374:	2200      	movs	r2, #0
 8006376:	e78e      	b.n	8006296 <_strtod_l+0x99e>
 8006378:	f8df 917c 	ldr.w	r9, [pc, #380]	; 80064f8 <_strtod_l+0xc00>
 800637c:	f04f 0800 	mov.w	r8, #0
 8006380:	e7e7      	b.n	8006352 <_strtod_l+0xa5a>
 8006382:	4b5d      	ldr	r3, [pc, #372]	; (80064f8 <_strtod_l+0xc00>)
 8006384:	4640      	mov	r0, r8
 8006386:	4649      	mov	r1, r9
 8006388:	2200      	movs	r2, #0
 800638a:	f7fa f94d 	bl	8000628 <__aeabi_dmul>
 800638e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006390:	4680      	mov	r8, r0
 8006392:	4689      	mov	r9, r1
 8006394:	b933      	cbnz	r3, 80063a4 <_strtod_l+0xaac>
 8006396:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800639a:	900e      	str	r0, [sp, #56]	; 0x38
 800639c:	930f      	str	r3, [sp, #60]	; 0x3c
 800639e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 80063a2:	e7dd      	b.n	8006360 <_strtod_l+0xa68>
 80063a4:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 80063a8:	e7f9      	b.n	800639e <_strtod_l+0xaa6>
 80063aa:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 80063ae:	9b04      	ldr	r3, [sp, #16]
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d1a8      	bne.n	8006306 <_strtod_l+0xa0e>
 80063b4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80063b8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80063ba:	0d1b      	lsrs	r3, r3, #20
 80063bc:	051b      	lsls	r3, r3, #20
 80063be:	429a      	cmp	r2, r3
 80063c0:	d1a1      	bne.n	8006306 <_strtod_l+0xa0e>
 80063c2:	4640      	mov	r0, r8
 80063c4:	4649      	mov	r1, r9
 80063c6:	f7fa fcc7 	bl	8000d58 <__aeabi_d2lz>
 80063ca:	f7fa f8ff 	bl	80005cc <__aeabi_l2d>
 80063ce:	4602      	mov	r2, r0
 80063d0:	460b      	mov	r3, r1
 80063d2:	4640      	mov	r0, r8
 80063d4:	4649      	mov	r1, r9
 80063d6:	f7f9 ff6f 	bl	80002b8 <__aeabi_dsub>
 80063da:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80063dc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80063e0:	ea43 030a 	orr.w	r3, r3, sl
 80063e4:	4313      	orrs	r3, r2
 80063e6:	4680      	mov	r8, r0
 80063e8:	4689      	mov	r9, r1
 80063ea:	d055      	beq.n	8006498 <_strtod_l+0xba0>
 80063ec:	a336      	add	r3, pc, #216	; (adr r3, 80064c8 <_strtod_l+0xbd0>)
 80063ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063f2:	f7fa fb8b 	bl	8000b0c <__aeabi_dcmplt>
 80063f6:	2800      	cmp	r0, #0
 80063f8:	f47f acd0 	bne.w	8005d9c <_strtod_l+0x4a4>
 80063fc:	a334      	add	r3, pc, #208	; (adr r3, 80064d0 <_strtod_l+0xbd8>)
 80063fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006402:	4640      	mov	r0, r8
 8006404:	4649      	mov	r1, r9
 8006406:	f7fa fb9f 	bl	8000b48 <__aeabi_dcmpgt>
 800640a:	2800      	cmp	r0, #0
 800640c:	f43f af7b 	beq.w	8006306 <_strtod_l+0xa0e>
 8006410:	e4c4      	b.n	8005d9c <_strtod_l+0x4a4>
 8006412:	9b04      	ldr	r3, [sp, #16]
 8006414:	b333      	cbz	r3, 8006464 <_strtod_l+0xb6c>
 8006416:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006418:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800641c:	d822      	bhi.n	8006464 <_strtod_l+0xb6c>
 800641e:	a32e      	add	r3, pc, #184	; (adr r3, 80064d8 <_strtod_l+0xbe0>)
 8006420:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006424:	4640      	mov	r0, r8
 8006426:	4649      	mov	r1, r9
 8006428:	f7fa fb7a 	bl	8000b20 <__aeabi_dcmple>
 800642c:	b1a0      	cbz	r0, 8006458 <_strtod_l+0xb60>
 800642e:	4649      	mov	r1, r9
 8006430:	4640      	mov	r0, r8
 8006432:	f7fa fbd1 	bl	8000bd8 <__aeabi_d2uiz>
 8006436:	2801      	cmp	r0, #1
 8006438:	bf38      	it	cc
 800643a:	2001      	movcc	r0, #1
 800643c:	f7fa f87a 	bl	8000534 <__aeabi_ui2d>
 8006440:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006442:	4680      	mov	r8, r0
 8006444:	4689      	mov	r9, r1
 8006446:	bb23      	cbnz	r3, 8006492 <_strtod_l+0xb9a>
 8006448:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800644c:	9010      	str	r0, [sp, #64]	; 0x40
 800644e:	9311      	str	r3, [sp, #68]	; 0x44
 8006450:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006454:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8006458:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800645a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800645c:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8006460:	1a9b      	subs	r3, r3, r2
 8006462:	9309      	str	r3, [sp, #36]	; 0x24
 8006464:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8006468:	eeb0 0a48 	vmov.f32	s0, s16
 800646c:	eef0 0a68 	vmov.f32	s1, s17
 8006470:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8006474:	f001 fe8e 	bl	8008194 <__ulp>
 8006478:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800647c:	ec53 2b10 	vmov	r2, r3, d0
 8006480:	f7fa f8d2 	bl	8000628 <__aeabi_dmul>
 8006484:	ec53 2b18 	vmov	r2, r3, d8
 8006488:	f7f9 ff18 	bl	80002bc <__adddf3>
 800648c:	4682      	mov	sl, r0
 800648e:	468b      	mov	fp, r1
 8006490:	e78d      	b.n	80063ae <_strtod_l+0xab6>
 8006492:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 8006496:	e7db      	b.n	8006450 <_strtod_l+0xb58>
 8006498:	a311      	add	r3, pc, #68	; (adr r3, 80064e0 <_strtod_l+0xbe8>)
 800649a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800649e:	f7fa fb35 	bl	8000b0c <__aeabi_dcmplt>
 80064a2:	e7b2      	b.n	800640a <_strtod_l+0xb12>
 80064a4:	2300      	movs	r3, #0
 80064a6:	930a      	str	r3, [sp, #40]	; 0x28
 80064a8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80064aa:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80064ac:	6013      	str	r3, [r2, #0]
 80064ae:	f7ff ba6b 	b.w	8005988 <_strtod_l+0x90>
 80064b2:	2a65      	cmp	r2, #101	; 0x65
 80064b4:	f43f ab5f 	beq.w	8005b76 <_strtod_l+0x27e>
 80064b8:	2a45      	cmp	r2, #69	; 0x45
 80064ba:	f43f ab5c 	beq.w	8005b76 <_strtod_l+0x27e>
 80064be:	2301      	movs	r3, #1
 80064c0:	f7ff bb94 	b.w	8005bec <_strtod_l+0x2f4>
 80064c4:	f3af 8000 	nop.w
 80064c8:	94a03595 	.word	0x94a03595
 80064cc:	3fdfffff 	.word	0x3fdfffff
 80064d0:	35afe535 	.word	0x35afe535
 80064d4:	3fe00000 	.word	0x3fe00000
 80064d8:	ffc00000 	.word	0xffc00000
 80064dc:	41dfffff 	.word	0x41dfffff
 80064e0:	94a03595 	.word	0x94a03595
 80064e4:	3fcfffff 	.word	0x3fcfffff
 80064e8:	3ff00000 	.word	0x3ff00000
 80064ec:	7ff00000 	.word	0x7ff00000
 80064f0:	7fe00000 	.word	0x7fe00000
 80064f4:	7c9fffff 	.word	0x7c9fffff
 80064f8:	3fe00000 	.word	0x3fe00000
 80064fc:	bff00000 	.word	0xbff00000
 8006500:	7fefffff 	.word	0x7fefffff

08006504 <_strtod_r>:
 8006504:	4b01      	ldr	r3, [pc, #4]	; (800650c <_strtod_r+0x8>)
 8006506:	f7ff b9f7 	b.w	80058f8 <_strtod_l>
 800650a:	bf00      	nop
 800650c:	20000084 	.word	0x20000084

08006510 <_strtol_l.constprop.0>:
 8006510:	2b01      	cmp	r3, #1
 8006512:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006516:	d001      	beq.n	800651c <_strtol_l.constprop.0+0xc>
 8006518:	2b24      	cmp	r3, #36	; 0x24
 800651a:	d906      	bls.n	800652a <_strtol_l.constprop.0+0x1a>
 800651c:	f7fe fa8c 	bl	8004a38 <__errno>
 8006520:	2316      	movs	r3, #22
 8006522:	6003      	str	r3, [r0, #0]
 8006524:	2000      	movs	r0, #0
 8006526:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800652a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8006610 <_strtol_l.constprop.0+0x100>
 800652e:	460d      	mov	r5, r1
 8006530:	462e      	mov	r6, r5
 8006532:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006536:	f814 700c 	ldrb.w	r7, [r4, ip]
 800653a:	f017 0708 	ands.w	r7, r7, #8
 800653e:	d1f7      	bne.n	8006530 <_strtol_l.constprop.0+0x20>
 8006540:	2c2d      	cmp	r4, #45	; 0x2d
 8006542:	d132      	bne.n	80065aa <_strtol_l.constprop.0+0x9a>
 8006544:	782c      	ldrb	r4, [r5, #0]
 8006546:	2701      	movs	r7, #1
 8006548:	1cb5      	adds	r5, r6, #2
 800654a:	2b00      	cmp	r3, #0
 800654c:	d05b      	beq.n	8006606 <_strtol_l.constprop.0+0xf6>
 800654e:	2b10      	cmp	r3, #16
 8006550:	d109      	bne.n	8006566 <_strtol_l.constprop.0+0x56>
 8006552:	2c30      	cmp	r4, #48	; 0x30
 8006554:	d107      	bne.n	8006566 <_strtol_l.constprop.0+0x56>
 8006556:	782c      	ldrb	r4, [r5, #0]
 8006558:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800655c:	2c58      	cmp	r4, #88	; 0x58
 800655e:	d14d      	bne.n	80065fc <_strtol_l.constprop.0+0xec>
 8006560:	786c      	ldrb	r4, [r5, #1]
 8006562:	2310      	movs	r3, #16
 8006564:	3502      	adds	r5, #2
 8006566:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800656a:	f108 38ff 	add.w	r8, r8, #4294967295
 800656e:	f04f 0c00 	mov.w	ip, #0
 8006572:	fbb8 f9f3 	udiv	r9, r8, r3
 8006576:	4666      	mov	r6, ip
 8006578:	fb03 8a19 	mls	sl, r3, r9, r8
 800657c:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8006580:	f1be 0f09 	cmp.w	lr, #9
 8006584:	d816      	bhi.n	80065b4 <_strtol_l.constprop.0+0xa4>
 8006586:	4674      	mov	r4, lr
 8006588:	42a3      	cmp	r3, r4
 800658a:	dd24      	ble.n	80065d6 <_strtol_l.constprop.0+0xc6>
 800658c:	f1bc 0f00 	cmp.w	ip, #0
 8006590:	db1e      	blt.n	80065d0 <_strtol_l.constprop.0+0xc0>
 8006592:	45b1      	cmp	r9, r6
 8006594:	d31c      	bcc.n	80065d0 <_strtol_l.constprop.0+0xc0>
 8006596:	d101      	bne.n	800659c <_strtol_l.constprop.0+0x8c>
 8006598:	45a2      	cmp	sl, r4
 800659a:	db19      	blt.n	80065d0 <_strtol_l.constprop.0+0xc0>
 800659c:	fb06 4603 	mla	r6, r6, r3, r4
 80065a0:	f04f 0c01 	mov.w	ip, #1
 80065a4:	f815 4b01 	ldrb.w	r4, [r5], #1
 80065a8:	e7e8      	b.n	800657c <_strtol_l.constprop.0+0x6c>
 80065aa:	2c2b      	cmp	r4, #43	; 0x2b
 80065ac:	bf04      	itt	eq
 80065ae:	782c      	ldrbeq	r4, [r5, #0]
 80065b0:	1cb5      	addeq	r5, r6, #2
 80065b2:	e7ca      	b.n	800654a <_strtol_l.constprop.0+0x3a>
 80065b4:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 80065b8:	f1be 0f19 	cmp.w	lr, #25
 80065bc:	d801      	bhi.n	80065c2 <_strtol_l.constprop.0+0xb2>
 80065be:	3c37      	subs	r4, #55	; 0x37
 80065c0:	e7e2      	b.n	8006588 <_strtol_l.constprop.0+0x78>
 80065c2:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 80065c6:	f1be 0f19 	cmp.w	lr, #25
 80065ca:	d804      	bhi.n	80065d6 <_strtol_l.constprop.0+0xc6>
 80065cc:	3c57      	subs	r4, #87	; 0x57
 80065ce:	e7db      	b.n	8006588 <_strtol_l.constprop.0+0x78>
 80065d0:	f04f 3cff 	mov.w	ip, #4294967295
 80065d4:	e7e6      	b.n	80065a4 <_strtol_l.constprop.0+0x94>
 80065d6:	f1bc 0f00 	cmp.w	ip, #0
 80065da:	da05      	bge.n	80065e8 <_strtol_l.constprop.0+0xd8>
 80065dc:	2322      	movs	r3, #34	; 0x22
 80065de:	6003      	str	r3, [r0, #0]
 80065e0:	4646      	mov	r6, r8
 80065e2:	b942      	cbnz	r2, 80065f6 <_strtol_l.constprop.0+0xe6>
 80065e4:	4630      	mov	r0, r6
 80065e6:	e79e      	b.n	8006526 <_strtol_l.constprop.0+0x16>
 80065e8:	b107      	cbz	r7, 80065ec <_strtol_l.constprop.0+0xdc>
 80065ea:	4276      	negs	r6, r6
 80065ec:	2a00      	cmp	r2, #0
 80065ee:	d0f9      	beq.n	80065e4 <_strtol_l.constprop.0+0xd4>
 80065f0:	f1bc 0f00 	cmp.w	ip, #0
 80065f4:	d000      	beq.n	80065f8 <_strtol_l.constprop.0+0xe8>
 80065f6:	1e69      	subs	r1, r5, #1
 80065f8:	6011      	str	r1, [r2, #0]
 80065fa:	e7f3      	b.n	80065e4 <_strtol_l.constprop.0+0xd4>
 80065fc:	2430      	movs	r4, #48	; 0x30
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d1b1      	bne.n	8006566 <_strtol_l.constprop.0+0x56>
 8006602:	2308      	movs	r3, #8
 8006604:	e7af      	b.n	8006566 <_strtol_l.constprop.0+0x56>
 8006606:	2c30      	cmp	r4, #48	; 0x30
 8006608:	d0a5      	beq.n	8006556 <_strtol_l.constprop.0+0x46>
 800660a:	230a      	movs	r3, #10
 800660c:	e7ab      	b.n	8006566 <_strtol_l.constprop.0+0x56>
 800660e:	bf00      	nop
 8006610:	08009f89 	.word	0x08009f89

08006614 <_strtol_r>:
 8006614:	f7ff bf7c 	b.w	8006510 <_strtol_l.constprop.0>

08006618 <_write_r>:
 8006618:	b538      	push	{r3, r4, r5, lr}
 800661a:	4d07      	ldr	r5, [pc, #28]	; (8006638 <_write_r+0x20>)
 800661c:	4604      	mov	r4, r0
 800661e:	4608      	mov	r0, r1
 8006620:	4611      	mov	r1, r2
 8006622:	2200      	movs	r2, #0
 8006624:	602a      	str	r2, [r5, #0]
 8006626:	461a      	mov	r2, r3
 8006628:	f7fb fc58 	bl	8001edc <_write>
 800662c:	1c43      	adds	r3, r0, #1
 800662e:	d102      	bne.n	8006636 <_write_r+0x1e>
 8006630:	682b      	ldr	r3, [r5, #0]
 8006632:	b103      	cbz	r3, 8006636 <_write_r+0x1e>
 8006634:	6023      	str	r3, [r4, #0]
 8006636:	bd38      	pop	{r3, r4, r5, pc}
 8006638:	20000c50 	.word	0x20000c50

0800663c <_close_r>:
 800663c:	b538      	push	{r3, r4, r5, lr}
 800663e:	4d06      	ldr	r5, [pc, #24]	; (8006658 <_close_r+0x1c>)
 8006640:	2300      	movs	r3, #0
 8006642:	4604      	mov	r4, r0
 8006644:	4608      	mov	r0, r1
 8006646:	602b      	str	r3, [r5, #0]
 8006648:	f7fb fc64 	bl	8001f14 <_close>
 800664c:	1c43      	adds	r3, r0, #1
 800664e:	d102      	bne.n	8006656 <_close_r+0x1a>
 8006650:	682b      	ldr	r3, [r5, #0]
 8006652:	b103      	cbz	r3, 8006656 <_close_r+0x1a>
 8006654:	6023      	str	r3, [r4, #0]
 8006656:	bd38      	pop	{r3, r4, r5, pc}
 8006658:	20000c50 	.word	0x20000c50

0800665c <quorem>:
 800665c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006660:	6903      	ldr	r3, [r0, #16]
 8006662:	690c      	ldr	r4, [r1, #16]
 8006664:	42a3      	cmp	r3, r4
 8006666:	4607      	mov	r7, r0
 8006668:	f2c0 8081 	blt.w	800676e <quorem+0x112>
 800666c:	3c01      	subs	r4, #1
 800666e:	f101 0814 	add.w	r8, r1, #20
 8006672:	f100 0514 	add.w	r5, r0, #20
 8006676:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800667a:	9301      	str	r3, [sp, #4]
 800667c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006680:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006684:	3301      	adds	r3, #1
 8006686:	429a      	cmp	r2, r3
 8006688:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800668c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006690:	fbb2 f6f3 	udiv	r6, r2, r3
 8006694:	d331      	bcc.n	80066fa <quorem+0x9e>
 8006696:	f04f 0e00 	mov.w	lr, #0
 800669a:	4640      	mov	r0, r8
 800669c:	46ac      	mov	ip, r5
 800669e:	46f2      	mov	sl, lr
 80066a0:	f850 2b04 	ldr.w	r2, [r0], #4
 80066a4:	b293      	uxth	r3, r2
 80066a6:	fb06 e303 	mla	r3, r6, r3, lr
 80066aa:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80066ae:	b29b      	uxth	r3, r3
 80066b0:	ebaa 0303 	sub.w	r3, sl, r3
 80066b4:	f8dc a000 	ldr.w	sl, [ip]
 80066b8:	0c12      	lsrs	r2, r2, #16
 80066ba:	fa13 f38a 	uxtah	r3, r3, sl
 80066be:	fb06 e202 	mla	r2, r6, r2, lr
 80066c2:	9300      	str	r3, [sp, #0]
 80066c4:	9b00      	ldr	r3, [sp, #0]
 80066c6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80066ca:	b292      	uxth	r2, r2
 80066cc:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80066d0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80066d4:	f8bd 3000 	ldrh.w	r3, [sp]
 80066d8:	4581      	cmp	r9, r0
 80066da:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80066de:	f84c 3b04 	str.w	r3, [ip], #4
 80066e2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80066e6:	d2db      	bcs.n	80066a0 <quorem+0x44>
 80066e8:	f855 300b 	ldr.w	r3, [r5, fp]
 80066ec:	b92b      	cbnz	r3, 80066fa <quorem+0x9e>
 80066ee:	9b01      	ldr	r3, [sp, #4]
 80066f0:	3b04      	subs	r3, #4
 80066f2:	429d      	cmp	r5, r3
 80066f4:	461a      	mov	r2, r3
 80066f6:	d32e      	bcc.n	8006756 <quorem+0xfa>
 80066f8:	613c      	str	r4, [r7, #16]
 80066fa:	4638      	mov	r0, r7
 80066fc:	f001 fca4 	bl	8008048 <__mcmp>
 8006700:	2800      	cmp	r0, #0
 8006702:	db24      	blt.n	800674e <quorem+0xf2>
 8006704:	3601      	adds	r6, #1
 8006706:	4628      	mov	r0, r5
 8006708:	f04f 0c00 	mov.w	ip, #0
 800670c:	f858 2b04 	ldr.w	r2, [r8], #4
 8006710:	f8d0 e000 	ldr.w	lr, [r0]
 8006714:	b293      	uxth	r3, r2
 8006716:	ebac 0303 	sub.w	r3, ip, r3
 800671a:	0c12      	lsrs	r2, r2, #16
 800671c:	fa13 f38e 	uxtah	r3, r3, lr
 8006720:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8006724:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006728:	b29b      	uxth	r3, r3
 800672a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800672e:	45c1      	cmp	r9, r8
 8006730:	f840 3b04 	str.w	r3, [r0], #4
 8006734:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8006738:	d2e8      	bcs.n	800670c <quorem+0xb0>
 800673a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800673e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006742:	b922      	cbnz	r2, 800674e <quorem+0xf2>
 8006744:	3b04      	subs	r3, #4
 8006746:	429d      	cmp	r5, r3
 8006748:	461a      	mov	r2, r3
 800674a:	d30a      	bcc.n	8006762 <quorem+0x106>
 800674c:	613c      	str	r4, [r7, #16]
 800674e:	4630      	mov	r0, r6
 8006750:	b003      	add	sp, #12
 8006752:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006756:	6812      	ldr	r2, [r2, #0]
 8006758:	3b04      	subs	r3, #4
 800675a:	2a00      	cmp	r2, #0
 800675c:	d1cc      	bne.n	80066f8 <quorem+0x9c>
 800675e:	3c01      	subs	r4, #1
 8006760:	e7c7      	b.n	80066f2 <quorem+0x96>
 8006762:	6812      	ldr	r2, [r2, #0]
 8006764:	3b04      	subs	r3, #4
 8006766:	2a00      	cmp	r2, #0
 8006768:	d1f0      	bne.n	800674c <quorem+0xf0>
 800676a:	3c01      	subs	r4, #1
 800676c:	e7eb      	b.n	8006746 <quorem+0xea>
 800676e:	2000      	movs	r0, #0
 8006770:	e7ee      	b.n	8006750 <quorem+0xf4>
 8006772:	0000      	movs	r0, r0
 8006774:	0000      	movs	r0, r0
	...

08006778 <_dtoa_r>:
 8006778:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800677c:	ed2d 8b04 	vpush	{d8-d9}
 8006780:	ec57 6b10 	vmov	r6, r7, d0
 8006784:	b093      	sub	sp, #76	; 0x4c
 8006786:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006788:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800678c:	9106      	str	r1, [sp, #24]
 800678e:	ee10 aa10 	vmov	sl, s0
 8006792:	4604      	mov	r4, r0
 8006794:	9209      	str	r2, [sp, #36]	; 0x24
 8006796:	930c      	str	r3, [sp, #48]	; 0x30
 8006798:	46bb      	mov	fp, r7
 800679a:	b975      	cbnz	r5, 80067ba <_dtoa_r+0x42>
 800679c:	2010      	movs	r0, #16
 800679e:	f001 f95f 	bl	8007a60 <malloc>
 80067a2:	4602      	mov	r2, r0
 80067a4:	6260      	str	r0, [r4, #36]	; 0x24
 80067a6:	b920      	cbnz	r0, 80067b2 <_dtoa_r+0x3a>
 80067a8:	4ba7      	ldr	r3, [pc, #668]	; (8006a48 <_dtoa_r+0x2d0>)
 80067aa:	21ea      	movs	r1, #234	; 0xea
 80067ac:	48a7      	ldr	r0, [pc, #668]	; (8006a4c <_dtoa_r+0x2d4>)
 80067ae:	f002 fceb 	bl	8009188 <__assert_func>
 80067b2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80067b6:	6005      	str	r5, [r0, #0]
 80067b8:	60c5      	str	r5, [r0, #12]
 80067ba:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80067bc:	6819      	ldr	r1, [r3, #0]
 80067be:	b151      	cbz	r1, 80067d6 <_dtoa_r+0x5e>
 80067c0:	685a      	ldr	r2, [r3, #4]
 80067c2:	604a      	str	r2, [r1, #4]
 80067c4:	2301      	movs	r3, #1
 80067c6:	4093      	lsls	r3, r2
 80067c8:	608b      	str	r3, [r1, #8]
 80067ca:	4620      	mov	r0, r4
 80067cc:	f001 f9b0 	bl	8007b30 <_Bfree>
 80067d0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80067d2:	2200      	movs	r2, #0
 80067d4:	601a      	str	r2, [r3, #0]
 80067d6:	1e3b      	subs	r3, r7, #0
 80067d8:	bfaa      	itet	ge
 80067da:	2300      	movge	r3, #0
 80067dc:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 80067e0:	f8c8 3000 	strge.w	r3, [r8]
 80067e4:	4b9a      	ldr	r3, [pc, #616]	; (8006a50 <_dtoa_r+0x2d8>)
 80067e6:	bfbc      	itt	lt
 80067e8:	2201      	movlt	r2, #1
 80067ea:	f8c8 2000 	strlt.w	r2, [r8]
 80067ee:	ea33 030b 	bics.w	r3, r3, fp
 80067f2:	d11b      	bne.n	800682c <_dtoa_r+0xb4>
 80067f4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80067f6:	f242 730f 	movw	r3, #9999	; 0x270f
 80067fa:	6013      	str	r3, [r2, #0]
 80067fc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006800:	4333      	orrs	r3, r6
 8006802:	f000 8592 	beq.w	800732a <_dtoa_r+0xbb2>
 8006806:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006808:	b963      	cbnz	r3, 8006824 <_dtoa_r+0xac>
 800680a:	4b92      	ldr	r3, [pc, #584]	; (8006a54 <_dtoa_r+0x2dc>)
 800680c:	e022      	b.n	8006854 <_dtoa_r+0xdc>
 800680e:	4b92      	ldr	r3, [pc, #584]	; (8006a58 <_dtoa_r+0x2e0>)
 8006810:	9301      	str	r3, [sp, #4]
 8006812:	3308      	adds	r3, #8
 8006814:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006816:	6013      	str	r3, [r2, #0]
 8006818:	9801      	ldr	r0, [sp, #4]
 800681a:	b013      	add	sp, #76	; 0x4c
 800681c:	ecbd 8b04 	vpop	{d8-d9}
 8006820:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006824:	4b8b      	ldr	r3, [pc, #556]	; (8006a54 <_dtoa_r+0x2dc>)
 8006826:	9301      	str	r3, [sp, #4]
 8006828:	3303      	adds	r3, #3
 800682a:	e7f3      	b.n	8006814 <_dtoa_r+0x9c>
 800682c:	2200      	movs	r2, #0
 800682e:	2300      	movs	r3, #0
 8006830:	4650      	mov	r0, sl
 8006832:	4659      	mov	r1, fp
 8006834:	f7fa f960 	bl	8000af8 <__aeabi_dcmpeq>
 8006838:	ec4b ab19 	vmov	d9, sl, fp
 800683c:	4680      	mov	r8, r0
 800683e:	b158      	cbz	r0, 8006858 <_dtoa_r+0xe0>
 8006840:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006842:	2301      	movs	r3, #1
 8006844:	6013      	str	r3, [r2, #0]
 8006846:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006848:	2b00      	cmp	r3, #0
 800684a:	f000 856b 	beq.w	8007324 <_dtoa_r+0xbac>
 800684e:	4883      	ldr	r0, [pc, #524]	; (8006a5c <_dtoa_r+0x2e4>)
 8006850:	6018      	str	r0, [r3, #0]
 8006852:	1e43      	subs	r3, r0, #1
 8006854:	9301      	str	r3, [sp, #4]
 8006856:	e7df      	b.n	8006818 <_dtoa_r+0xa0>
 8006858:	ec4b ab10 	vmov	d0, sl, fp
 800685c:	aa10      	add	r2, sp, #64	; 0x40
 800685e:	a911      	add	r1, sp, #68	; 0x44
 8006860:	4620      	mov	r0, r4
 8006862:	f001 fd13 	bl	800828c <__d2b>
 8006866:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800686a:	ee08 0a10 	vmov	s16, r0
 800686e:	2d00      	cmp	r5, #0
 8006870:	f000 8084 	beq.w	800697c <_dtoa_r+0x204>
 8006874:	ee19 3a90 	vmov	r3, s19
 8006878:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800687c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8006880:	4656      	mov	r6, sl
 8006882:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8006886:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800688a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800688e:	4b74      	ldr	r3, [pc, #464]	; (8006a60 <_dtoa_r+0x2e8>)
 8006890:	2200      	movs	r2, #0
 8006892:	4630      	mov	r0, r6
 8006894:	4639      	mov	r1, r7
 8006896:	f7f9 fd0f 	bl	80002b8 <__aeabi_dsub>
 800689a:	a365      	add	r3, pc, #404	; (adr r3, 8006a30 <_dtoa_r+0x2b8>)
 800689c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068a0:	f7f9 fec2 	bl	8000628 <__aeabi_dmul>
 80068a4:	a364      	add	r3, pc, #400	; (adr r3, 8006a38 <_dtoa_r+0x2c0>)
 80068a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068aa:	f7f9 fd07 	bl	80002bc <__adddf3>
 80068ae:	4606      	mov	r6, r0
 80068b0:	4628      	mov	r0, r5
 80068b2:	460f      	mov	r7, r1
 80068b4:	f7f9 fe4e 	bl	8000554 <__aeabi_i2d>
 80068b8:	a361      	add	r3, pc, #388	; (adr r3, 8006a40 <_dtoa_r+0x2c8>)
 80068ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068be:	f7f9 feb3 	bl	8000628 <__aeabi_dmul>
 80068c2:	4602      	mov	r2, r0
 80068c4:	460b      	mov	r3, r1
 80068c6:	4630      	mov	r0, r6
 80068c8:	4639      	mov	r1, r7
 80068ca:	f7f9 fcf7 	bl	80002bc <__adddf3>
 80068ce:	4606      	mov	r6, r0
 80068d0:	460f      	mov	r7, r1
 80068d2:	f7fa f959 	bl	8000b88 <__aeabi_d2iz>
 80068d6:	2200      	movs	r2, #0
 80068d8:	9000      	str	r0, [sp, #0]
 80068da:	2300      	movs	r3, #0
 80068dc:	4630      	mov	r0, r6
 80068de:	4639      	mov	r1, r7
 80068e0:	f7fa f914 	bl	8000b0c <__aeabi_dcmplt>
 80068e4:	b150      	cbz	r0, 80068fc <_dtoa_r+0x184>
 80068e6:	9800      	ldr	r0, [sp, #0]
 80068e8:	f7f9 fe34 	bl	8000554 <__aeabi_i2d>
 80068ec:	4632      	mov	r2, r6
 80068ee:	463b      	mov	r3, r7
 80068f0:	f7fa f902 	bl	8000af8 <__aeabi_dcmpeq>
 80068f4:	b910      	cbnz	r0, 80068fc <_dtoa_r+0x184>
 80068f6:	9b00      	ldr	r3, [sp, #0]
 80068f8:	3b01      	subs	r3, #1
 80068fa:	9300      	str	r3, [sp, #0]
 80068fc:	9b00      	ldr	r3, [sp, #0]
 80068fe:	2b16      	cmp	r3, #22
 8006900:	d85a      	bhi.n	80069b8 <_dtoa_r+0x240>
 8006902:	9a00      	ldr	r2, [sp, #0]
 8006904:	4b57      	ldr	r3, [pc, #348]	; (8006a64 <_dtoa_r+0x2ec>)
 8006906:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800690a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800690e:	ec51 0b19 	vmov	r0, r1, d9
 8006912:	f7fa f8fb 	bl	8000b0c <__aeabi_dcmplt>
 8006916:	2800      	cmp	r0, #0
 8006918:	d050      	beq.n	80069bc <_dtoa_r+0x244>
 800691a:	9b00      	ldr	r3, [sp, #0]
 800691c:	3b01      	subs	r3, #1
 800691e:	9300      	str	r3, [sp, #0]
 8006920:	2300      	movs	r3, #0
 8006922:	930b      	str	r3, [sp, #44]	; 0x2c
 8006924:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006926:	1b5d      	subs	r5, r3, r5
 8006928:	1e6b      	subs	r3, r5, #1
 800692a:	9305      	str	r3, [sp, #20]
 800692c:	bf45      	ittet	mi
 800692e:	f1c5 0301 	rsbmi	r3, r5, #1
 8006932:	9304      	strmi	r3, [sp, #16]
 8006934:	2300      	movpl	r3, #0
 8006936:	2300      	movmi	r3, #0
 8006938:	bf4c      	ite	mi
 800693a:	9305      	strmi	r3, [sp, #20]
 800693c:	9304      	strpl	r3, [sp, #16]
 800693e:	9b00      	ldr	r3, [sp, #0]
 8006940:	2b00      	cmp	r3, #0
 8006942:	db3d      	blt.n	80069c0 <_dtoa_r+0x248>
 8006944:	9b05      	ldr	r3, [sp, #20]
 8006946:	9a00      	ldr	r2, [sp, #0]
 8006948:	920a      	str	r2, [sp, #40]	; 0x28
 800694a:	4413      	add	r3, r2
 800694c:	9305      	str	r3, [sp, #20]
 800694e:	2300      	movs	r3, #0
 8006950:	9307      	str	r3, [sp, #28]
 8006952:	9b06      	ldr	r3, [sp, #24]
 8006954:	2b09      	cmp	r3, #9
 8006956:	f200 8089 	bhi.w	8006a6c <_dtoa_r+0x2f4>
 800695a:	2b05      	cmp	r3, #5
 800695c:	bfc4      	itt	gt
 800695e:	3b04      	subgt	r3, #4
 8006960:	9306      	strgt	r3, [sp, #24]
 8006962:	9b06      	ldr	r3, [sp, #24]
 8006964:	f1a3 0302 	sub.w	r3, r3, #2
 8006968:	bfcc      	ite	gt
 800696a:	2500      	movgt	r5, #0
 800696c:	2501      	movle	r5, #1
 800696e:	2b03      	cmp	r3, #3
 8006970:	f200 8087 	bhi.w	8006a82 <_dtoa_r+0x30a>
 8006974:	e8df f003 	tbb	[pc, r3]
 8006978:	59383a2d 	.word	0x59383a2d
 800697c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8006980:	441d      	add	r5, r3
 8006982:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8006986:	2b20      	cmp	r3, #32
 8006988:	bfc1      	itttt	gt
 800698a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800698e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8006992:	fa0b f303 	lslgt.w	r3, fp, r3
 8006996:	fa26 f000 	lsrgt.w	r0, r6, r0
 800699a:	bfda      	itte	le
 800699c:	f1c3 0320 	rsble	r3, r3, #32
 80069a0:	fa06 f003 	lslle.w	r0, r6, r3
 80069a4:	4318      	orrgt	r0, r3
 80069a6:	f7f9 fdc5 	bl	8000534 <__aeabi_ui2d>
 80069aa:	2301      	movs	r3, #1
 80069ac:	4606      	mov	r6, r0
 80069ae:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80069b2:	3d01      	subs	r5, #1
 80069b4:	930e      	str	r3, [sp, #56]	; 0x38
 80069b6:	e76a      	b.n	800688e <_dtoa_r+0x116>
 80069b8:	2301      	movs	r3, #1
 80069ba:	e7b2      	b.n	8006922 <_dtoa_r+0x1aa>
 80069bc:	900b      	str	r0, [sp, #44]	; 0x2c
 80069be:	e7b1      	b.n	8006924 <_dtoa_r+0x1ac>
 80069c0:	9b04      	ldr	r3, [sp, #16]
 80069c2:	9a00      	ldr	r2, [sp, #0]
 80069c4:	1a9b      	subs	r3, r3, r2
 80069c6:	9304      	str	r3, [sp, #16]
 80069c8:	4253      	negs	r3, r2
 80069ca:	9307      	str	r3, [sp, #28]
 80069cc:	2300      	movs	r3, #0
 80069ce:	930a      	str	r3, [sp, #40]	; 0x28
 80069d0:	e7bf      	b.n	8006952 <_dtoa_r+0x1da>
 80069d2:	2300      	movs	r3, #0
 80069d4:	9308      	str	r3, [sp, #32]
 80069d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80069d8:	2b00      	cmp	r3, #0
 80069da:	dc55      	bgt.n	8006a88 <_dtoa_r+0x310>
 80069dc:	2301      	movs	r3, #1
 80069de:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80069e2:	461a      	mov	r2, r3
 80069e4:	9209      	str	r2, [sp, #36]	; 0x24
 80069e6:	e00c      	b.n	8006a02 <_dtoa_r+0x28a>
 80069e8:	2301      	movs	r3, #1
 80069ea:	e7f3      	b.n	80069d4 <_dtoa_r+0x25c>
 80069ec:	2300      	movs	r3, #0
 80069ee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80069f0:	9308      	str	r3, [sp, #32]
 80069f2:	9b00      	ldr	r3, [sp, #0]
 80069f4:	4413      	add	r3, r2
 80069f6:	9302      	str	r3, [sp, #8]
 80069f8:	3301      	adds	r3, #1
 80069fa:	2b01      	cmp	r3, #1
 80069fc:	9303      	str	r3, [sp, #12]
 80069fe:	bfb8      	it	lt
 8006a00:	2301      	movlt	r3, #1
 8006a02:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8006a04:	2200      	movs	r2, #0
 8006a06:	6042      	str	r2, [r0, #4]
 8006a08:	2204      	movs	r2, #4
 8006a0a:	f102 0614 	add.w	r6, r2, #20
 8006a0e:	429e      	cmp	r6, r3
 8006a10:	6841      	ldr	r1, [r0, #4]
 8006a12:	d93d      	bls.n	8006a90 <_dtoa_r+0x318>
 8006a14:	4620      	mov	r0, r4
 8006a16:	f001 f84b 	bl	8007ab0 <_Balloc>
 8006a1a:	9001      	str	r0, [sp, #4]
 8006a1c:	2800      	cmp	r0, #0
 8006a1e:	d13b      	bne.n	8006a98 <_dtoa_r+0x320>
 8006a20:	4b11      	ldr	r3, [pc, #68]	; (8006a68 <_dtoa_r+0x2f0>)
 8006a22:	4602      	mov	r2, r0
 8006a24:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8006a28:	e6c0      	b.n	80067ac <_dtoa_r+0x34>
 8006a2a:	2301      	movs	r3, #1
 8006a2c:	e7df      	b.n	80069ee <_dtoa_r+0x276>
 8006a2e:	bf00      	nop
 8006a30:	636f4361 	.word	0x636f4361
 8006a34:	3fd287a7 	.word	0x3fd287a7
 8006a38:	8b60c8b3 	.word	0x8b60c8b3
 8006a3c:	3fc68a28 	.word	0x3fc68a28
 8006a40:	509f79fb 	.word	0x509f79fb
 8006a44:	3fd34413 	.word	0x3fd34413
 8006a48:	0800a096 	.word	0x0800a096
 8006a4c:	0800a0ad 	.word	0x0800a0ad
 8006a50:	7ff00000 	.word	0x7ff00000
 8006a54:	0800a092 	.word	0x0800a092
 8006a58:	0800a089 	.word	0x0800a089
 8006a5c:	0800a302 	.word	0x0800a302
 8006a60:	3ff80000 	.word	0x3ff80000
 8006a64:	0800a218 	.word	0x0800a218
 8006a68:	0800a108 	.word	0x0800a108
 8006a6c:	2501      	movs	r5, #1
 8006a6e:	2300      	movs	r3, #0
 8006a70:	9306      	str	r3, [sp, #24]
 8006a72:	9508      	str	r5, [sp, #32]
 8006a74:	f04f 33ff 	mov.w	r3, #4294967295
 8006a78:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8006a7c:	2200      	movs	r2, #0
 8006a7e:	2312      	movs	r3, #18
 8006a80:	e7b0      	b.n	80069e4 <_dtoa_r+0x26c>
 8006a82:	2301      	movs	r3, #1
 8006a84:	9308      	str	r3, [sp, #32]
 8006a86:	e7f5      	b.n	8006a74 <_dtoa_r+0x2fc>
 8006a88:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a8a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8006a8e:	e7b8      	b.n	8006a02 <_dtoa_r+0x28a>
 8006a90:	3101      	adds	r1, #1
 8006a92:	6041      	str	r1, [r0, #4]
 8006a94:	0052      	lsls	r2, r2, #1
 8006a96:	e7b8      	b.n	8006a0a <_dtoa_r+0x292>
 8006a98:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006a9a:	9a01      	ldr	r2, [sp, #4]
 8006a9c:	601a      	str	r2, [r3, #0]
 8006a9e:	9b03      	ldr	r3, [sp, #12]
 8006aa0:	2b0e      	cmp	r3, #14
 8006aa2:	f200 809d 	bhi.w	8006be0 <_dtoa_r+0x468>
 8006aa6:	2d00      	cmp	r5, #0
 8006aa8:	f000 809a 	beq.w	8006be0 <_dtoa_r+0x468>
 8006aac:	9b00      	ldr	r3, [sp, #0]
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	dd32      	ble.n	8006b18 <_dtoa_r+0x3a0>
 8006ab2:	4ab7      	ldr	r2, [pc, #732]	; (8006d90 <_dtoa_r+0x618>)
 8006ab4:	f003 030f 	and.w	r3, r3, #15
 8006ab8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8006abc:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006ac0:	9b00      	ldr	r3, [sp, #0]
 8006ac2:	05d8      	lsls	r0, r3, #23
 8006ac4:	ea4f 1723 	mov.w	r7, r3, asr #4
 8006ac8:	d516      	bpl.n	8006af8 <_dtoa_r+0x380>
 8006aca:	4bb2      	ldr	r3, [pc, #712]	; (8006d94 <_dtoa_r+0x61c>)
 8006acc:	ec51 0b19 	vmov	r0, r1, d9
 8006ad0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006ad4:	f7f9 fed2 	bl	800087c <__aeabi_ddiv>
 8006ad8:	f007 070f 	and.w	r7, r7, #15
 8006adc:	4682      	mov	sl, r0
 8006ade:	468b      	mov	fp, r1
 8006ae0:	2503      	movs	r5, #3
 8006ae2:	4eac      	ldr	r6, [pc, #688]	; (8006d94 <_dtoa_r+0x61c>)
 8006ae4:	b957      	cbnz	r7, 8006afc <_dtoa_r+0x384>
 8006ae6:	4642      	mov	r2, r8
 8006ae8:	464b      	mov	r3, r9
 8006aea:	4650      	mov	r0, sl
 8006aec:	4659      	mov	r1, fp
 8006aee:	f7f9 fec5 	bl	800087c <__aeabi_ddiv>
 8006af2:	4682      	mov	sl, r0
 8006af4:	468b      	mov	fp, r1
 8006af6:	e028      	b.n	8006b4a <_dtoa_r+0x3d2>
 8006af8:	2502      	movs	r5, #2
 8006afa:	e7f2      	b.n	8006ae2 <_dtoa_r+0x36a>
 8006afc:	07f9      	lsls	r1, r7, #31
 8006afe:	d508      	bpl.n	8006b12 <_dtoa_r+0x39a>
 8006b00:	4640      	mov	r0, r8
 8006b02:	4649      	mov	r1, r9
 8006b04:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006b08:	f7f9 fd8e 	bl	8000628 <__aeabi_dmul>
 8006b0c:	3501      	adds	r5, #1
 8006b0e:	4680      	mov	r8, r0
 8006b10:	4689      	mov	r9, r1
 8006b12:	107f      	asrs	r7, r7, #1
 8006b14:	3608      	adds	r6, #8
 8006b16:	e7e5      	b.n	8006ae4 <_dtoa_r+0x36c>
 8006b18:	f000 809b 	beq.w	8006c52 <_dtoa_r+0x4da>
 8006b1c:	9b00      	ldr	r3, [sp, #0]
 8006b1e:	4f9d      	ldr	r7, [pc, #628]	; (8006d94 <_dtoa_r+0x61c>)
 8006b20:	425e      	negs	r6, r3
 8006b22:	4b9b      	ldr	r3, [pc, #620]	; (8006d90 <_dtoa_r+0x618>)
 8006b24:	f006 020f 	and.w	r2, r6, #15
 8006b28:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006b2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b30:	ec51 0b19 	vmov	r0, r1, d9
 8006b34:	f7f9 fd78 	bl	8000628 <__aeabi_dmul>
 8006b38:	1136      	asrs	r6, r6, #4
 8006b3a:	4682      	mov	sl, r0
 8006b3c:	468b      	mov	fp, r1
 8006b3e:	2300      	movs	r3, #0
 8006b40:	2502      	movs	r5, #2
 8006b42:	2e00      	cmp	r6, #0
 8006b44:	d17a      	bne.n	8006c3c <_dtoa_r+0x4c4>
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d1d3      	bne.n	8006af2 <_dtoa_r+0x37a>
 8006b4a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	f000 8082 	beq.w	8006c56 <_dtoa_r+0x4de>
 8006b52:	4b91      	ldr	r3, [pc, #580]	; (8006d98 <_dtoa_r+0x620>)
 8006b54:	2200      	movs	r2, #0
 8006b56:	4650      	mov	r0, sl
 8006b58:	4659      	mov	r1, fp
 8006b5a:	f7f9 ffd7 	bl	8000b0c <__aeabi_dcmplt>
 8006b5e:	2800      	cmp	r0, #0
 8006b60:	d079      	beq.n	8006c56 <_dtoa_r+0x4de>
 8006b62:	9b03      	ldr	r3, [sp, #12]
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d076      	beq.n	8006c56 <_dtoa_r+0x4de>
 8006b68:	9b02      	ldr	r3, [sp, #8]
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	dd36      	ble.n	8006bdc <_dtoa_r+0x464>
 8006b6e:	9b00      	ldr	r3, [sp, #0]
 8006b70:	4650      	mov	r0, sl
 8006b72:	4659      	mov	r1, fp
 8006b74:	1e5f      	subs	r7, r3, #1
 8006b76:	2200      	movs	r2, #0
 8006b78:	4b88      	ldr	r3, [pc, #544]	; (8006d9c <_dtoa_r+0x624>)
 8006b7a:	f7f9 fd55 	bl	8000628 <__aeabi_dmul>
 8006b7e:	9e02      	ldr	r6, [sp, #8]
 8006b80:	4682      	mov	sl, r0
 8006b82:	468b      	mov	fp, r1
 8006b84:	3501      	adds	r5, #1
 8006b86:	4628      	mov	r0, r5
 8006b88:	f7f9 fce4 	bl	8000554 <__aeabi_i2d>
 8006b8c:	4652      	mov	r2, sl
 8006b8e:	465b      	mov	r3, fp
 8006b90:	f7f9 fd4a 	bl	8000628 <__aeabi_dmul>
 8006b94:	4b82      	ldr	r3, [pc, #520]	; (8006da0 <_dtoa_r+0x628>)
 8006b96:	2200      	movs	r2, #0
 8006b98:	f7f9 fb90 	bl	80002bc <__adddf3>
 8006b9c:	46d0      	mov	r8, sl
 8006b9e:	46d9      	mov	r9, fp
 8006ba0:	4682      	mov	sl, r0
 8006ba2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8006ba6:	2e00      	cmp	r6, #0
 8006ba8:	d158      	bne.n	8006c5c <_dtoa_r+0x4e4>
 8006baa:	4b7e      	ldr	r3, [pc, #504]	; (8006da4 <_dtoa_r+0x62c>)
 8006bac:	2200      	movs	r2, #0
 8006bae:	4640      	mov	r0, r8
 8006bb0:	4649      	mov	r1, r9
 8006bb2:	f7f9 fb81 	bl	80002b8 <__aeabi_dsub>
 8006bb6:	4652      	mov	r2, sl
 8006bb8:	465b      	mov	r3, fp
 8006bba:	4680      	mov	r8, r0
 8006bbc:	4689      	mov	r9, r1
 8006bbe:	f7f9 ffc3 	bl	8000b48 <__aeabi_dcmpgt>
 8006bc2:	2800      	cmp	r0, #0
 8006bc4:	f040 8295 	bne.w	80070f2 <_dtoa_r+0x97a>
 8006bc8:	4652      	mov	r2, sl
 8006bca:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8006bce:	4640      	mov	r0, r8
 8006bd0:	4649      	mov	r1, r9
 8006bd2:	f7f9 ff9b 	bl	8000b0c <__aeabi_dcmplt>
 8006bd6:	2800      	cmp	r0, #0
 8006bd8:	f040 8289 	bne.w	80070ee <_dtoa_r+0x976>
 8006bdc:	ec5b ab19 	vmov	sl, fp, d9
 8006be0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	f2c0 8148 	blt.w	8006e78 <_dtoa_r+0x700>
 8006be8:	9a00      	ldr	r2, [sp, #0]
 8006bea:	2a0e      	cmp	r2, #14
 8006bec:	f300 8144 	bgt.w	8006e78 <_dtoa_r+0x700>
 8006bf0:	4b67      	ldr	r3, [pc, #412]	; (8006d90 <_dtoa_r+0x618>)
 8006bf2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006bf6:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006bfa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	f280 80d5 	bge.w	8006dac <_dtoa_r+0x634>
 8006c02:	9b03      	ldr	r3, [sp, #12]
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	f300 80d1 	bgt.w	8006dac <_dtoa_r+0x634>
 8006c0a:	f040 826f 	bne.w	80070ec <_dtoa_r+0x974>
 8006c0e:	4b65      	ldr	r3, [pc, #404]	; (8006da4 <_dtoa_r+0x62c>)
 8006c10:	2200      	movs	r2, #0
 8006c12:	4640      	mov	r0, r8
 8006c14:	4649      	mov	r1, r9
 8006c16:	f7f9 fd07 	bl	8000628 <__aeabi_dmul>
 8006c1a:	4652      	mov	r2, sl
 8006c1c:	465b      	mov	r3, fp
 8006c1e:	f7f9 ff89 	bl	8000b34 <__aeabi_dcmpge>
 8006c22:	9e03      	ldr	r6, [sp, #12]
 8006c24:	4637      	mov	r7, r6
 8006c26:	2800      	cmp	r0, #0
 8006c28:	f040 8245 	bne.w	80070b6 <_dtoa_r+0x93e>
 8006c2c:	9d01      	ldr	r5, [sp, #4]
 8006c2e:	2331      	movs	r3, #49	; 0x31
 8006c30:	f805 3b01 	strb.w	r3, [r5], #1
 8006c34:	9b00      	ldr	r3, [sp, #0]
 8006c36:	3301      	adds	r3, #1
 8006c38:	9300      	str	r3, [sp, #0]
 8006c3a:	e240      	b.n	80070be <_dtoa_r+0x946>
 8006c3c:	07f2      	lsls	r2, r6, #31
 8006c3e:	d505      	bpl.n	8006c4c <_dtoa_r+0x4d4>
 8006c40:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006c44:	f7f9 fcf0 	bl	8000628 <__aeabi_dmul>
 8006c48:	3501      	adds	r5, #1
 8006c4a:	2301      	movs	r3, #1
 8006c4c:	1076      	asrs	r6, r6, #1
 8006c4e:	3708      	adds	r7, #8
 8006c50:	e777      	b.n	8006b42 <_dtoa_r+0x3ca>
 8006c52:	2502      	movs	r5, #2
 8006c54:	e779      	b.n	8006b4a <_dtoa_r+0x3d2>
 8006c56:	9f00      	ldr	r7, [sp, #0]
 8006c58:	9e03      	ldr	r6, [sp, #12]
 8006c5a:	e794      	b.n	8006b86 <_dtoa_r+0x40e>
 8006c5c:	9901      	ldr	r1, [sp, #4]
 8006c5e:	4b4c      	ldr	r3, [pc, #304]	; (8006d90 <_dtoa_r+0x618>)
 8006c60:	4431      	add	r1, r6
 8006c62:	910d      	str	r1, [sp, #52]	; 0x34
 8006c64:	9908      	ldr	r1, [sp, #32]
 8006c66:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8006c6a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006c6e:	2900      	cmp	r1, #0
 8006c70:	d043      	beq.n	8006cfa <_dtoa_r+0x582>
 8006c72:	494d      	ldr	r1, [pc, #308]	; (8006da8 <_dtoa_r+0x630>)
 8006c74:	2000      	movs	r0, #0
 8006c76:	f7f9 fe01 	bl	800087c <__aeabi_ddiv>
 8006c7a:	4652      	mov	r2, sl
 8006c7c:	465b      	mov	r3, fp
 8006c7e:	f7f9 fb1b 	bl	80002b8 <__aeabi_dsub>
 8006c82:	9d01      	ldr	r5, [sp, #4]
 8006c84:	4682      	mov	sl, r0
 8006c86:	468b      	mov	fp, r1
 8006c88:	4649      	mov	r1, r9
 8006c8a:	4640      	mov	r0, r8
 8006c8c:	f7f9 ff7c 	bl	8000b88 <__aeabi_d2iz>
 8006c90:	4606      	mov	r6, r0
 8006c92:	f7f9 fc5f 	bl	8000554 <__aeabi_i2d>
 8006c96:	4602      	mov	r2, r0
 8006c98:	460b      	mov	r3, r1
 8006c9a:	4640      	mov	r0, r8
 8006c9c:	4649      	mov	r1, r9
 8006c9e:	f7f9 fb0b 	bl	80002b8 <__aeabi_dsub>
 8006ca2:	3630      	adds	r6, #48	; 0x30
 8006ca4:	f805 6b01 	strb.w	r6, [r5], #1
 8006ca8:	4652      	mov	r2, sl
 8006caa:	465b      	mov	r3, fp
 8006cac:	4680      	mov	r8, r0
 8006cae:	4689      	mov	r9, r1
 8006cb0:	f7f9 ff2c 	bl	8000b0c <__aeabi_dcmplt>
 8006cb4:	2800      	cmp	r0, #0
 8006cb6:	d163      	bne.n	8006d80 <_dtoa_r+0x608>
 8006cb8:	4642      	mov	r2, r8
 8006cba:	464b      	mov	r3, r9
 8006cbc:	4936      	ldr	r1, [pc, #216]	; (8006d98 <_dtoa_r+0x620>)
 8006cbe:	2000      	movs	r0, #0
 8006cc0:	f7f9 fafa 	bl	80002b8 <__aeabi_dsub>
 8006cc4:	4652      	mov	r2, sl
 8006cc6:	465b      	mov	r3, fp
 8006cc8:	f7f9 ff20 	bl	8000b0c <__aeabi_dcmplt>
 8006ccc:	2800      	cmp	r0, #0
 8006cce:	f040 80b5 	bne.w	8006e3c <_dtoa_r+0x6c4>
 8006cd2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006cd4:	429d      	cmp	r5, r3
 8006cd6:	d081      	beq.n	8006bdc <_dtoa_r+0x464>
 8006cd8:	4b30      	ldr	r3, [pc, #192]	; (8006d9c <_dtoa_r+0x624>)
 8006cda:	2200      	movs	r2, #0
 8006cdc:	4650      	mov	r0, sl
 8006cde:	4659      	mov	r1, fp
 8006ce0:	f7f9 fca2 	bl	8000628 <__aeabi_dmul>
 8006ce4:	4b2d      	ldr	r3, [pc, #180]	; (8006d9c <_dtoa_r+0x624>)
 8006ce6:	4682      	mov	sl, r0
 8006ce8:	468b      	mov	fp, r1
 8006cea:	4640      	mov	r0, r8
 8006cec:	4649      	mov	r1, r9
 8006cee:	2200      	movs	r2, #0
 8006cf0:	f7f9 fc9a 	bl	8000628 <__aeabi_dmul>
 8006cf4:	4680      	mov	r8, r0
 8006cf6:	4689      	mov	r9, r1
 8006cf8:	e7c6      	b.n	8006c88 <_dtoa_r+0x510>
 8006cfa:	4650      	mov	r0, sl
 8006cfc:	4659      	mov	r1, fp
 8006cfe:	f7f9 fc93 	bl	8000628 <__aeabi_dmul>
 8006d02:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006d04:	9d01      	ldr	r5, [sp, #4]
 8006d06:	930f      	str	r3, [sp, #60]	; 0x3c
 8006d08:	4682      	mov	sl, r0
 8006d0a:	468b      	mov	fp, r1
 8006d0c:	4649      	mov	r1, r9
 8006d0e:	4640      	mov	r0, r8
 8006d10:	f7f9 ff3a 	bl	8000b88 <__aeabi_d2iz>
 8006d14:	4606      	mov	r6, r0
 8006d16:	f7f9 fc1d 	bl	8000554 <__aeabi_i2d>
 8006d1a:	3630      	adds	r6, #48	; 0x30
 8006d1c:	4602      	mov	r2, r0
 8006d1e:	460b      	mov	r3, r1
 8006d20:	4640      	mov	r0, r8
 8006d22:	4649      	mov	r1, r9
 8006d24:	f7f9 fac8 	bl	80002b8 <__aeabi_dsub>
 8006d28:	f805 6b01 	strb.w	r6, [r5], #1
 8006d2c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006d2e:	429d      	cmp	r5, r3
 8006d30:	4680      	mov	r8, r0
 8006d32:	4689      	mov	r9, r1
 8006d34:	f04f 0200 	mov.w	r2, #0
 8006d38:	d124      	bne.n	8006d84 <_dtoa_r+0x60c>
 8006d3a:	4b1b      	ldr	r3, [pc, #108]	; (8006da8 <_dtoa_r+0x630>)
 8006d3c:	4650      	mov	r0, sl
 8006d3e:	4659      	mov	r1, fp
 8006d40:	f7f9 fabc 	bl	80002bc <__adddf3>
 8006d44:	4602      	mov	r2, r0
 8006d46:	460b      	mov	r3, r1
 8006d48:	4640      	mov	r0, r8
 8006d4a:	4649      	mov	r1, r9
 8006d4c:	f7f9 fefc 	bl	8000b48 <__aeabi_dcmpgt>
 8006d50:	2800      	cmp	r0, #0
 8006d52:	d173      	bne.n	8006e3c <_dtoa_r+0x6c4>
 8006d54:	4652      	mov	r2, sl
 8006d56:	465b      	mov	r3, fp
 8006d58:	4913      	ldr	r1, [pc, #76]	; (8006da8 <_dtoa_r+0x630>)
 8006d5a:	2000      	movs	r0, #0
 8006d5c:	f7f9 faac 	bl	80002b8 <__aeabi_dsub>
 8006d60:	4602      	mov	r2, r0
 8006d62:	460b      	mov	r3, r1
 8006d64:	4640      	mov	r0, r8
 8006d66:	4649      	mov	r1, r9
 8006d68:	f7f9 fed0 	bl	8000b0c <__aeabi_dcmplt>
 8006d6c:	2800      	cmp	r0, #0
 8006d6e:	f43f af35 	beq.w	8006bdc <_dtoa_r+0x464>
 8006d72:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8006d74:	1e6b      	subs	r3, r5, #1
 8006d76:	930f      	str	r3, [sp, #60]	; 0x3c
 8006d78:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006d7c:	2b30      	cmp	r3, #48	; 0x30
 8006d7e:	d0f8      	beq.n	8006d72 <_dtoa_r+0x5fa>
 8006d80:	9700      	str	r7, [sp, #0]
 8006d82:	e049      	b.n	8006e18 <_dtoa_r+0x6a0>
 8006d84:	4b05      	ldr	r3, [pc, #20]	; (8006d9c <_dtoa_r+0x624>)
 8006d86:	f7f9 fc4f 	bl	8000628 <__aeabi_dmul>
 8006d8a:	4680      	mov	r8, r0
 8006d8c:	4689      	mov	r9, r1
 8006d8e:	e7bd      	b.n	8006d0c <_dtoa_r+0x594>
 8006d90:	0800a218 	.word	0x0800a218
 8006d94:	0800a1f0 	.word	0x0800a1f0
 8006d98:	3ff00000 	.word	0x3ff00000
 8006d9c:	40240000 	.word	0x40240000
 8006da0:	401c0000 	.word	0x401c0000
 8006da4:	40140000 	.word	0x40140000
 8006da8:	3fe00000 	.word	0x3fe00000
 8006dac:	9d01      	ldr	r5, [sp, #4]
 8006dae:	4656      	mov	r6, sl
 8006db0:	465f      	mov	r7, fp
 8006db2:	4642      	mov	r2, r8
 8006db4:	464b      	mov	r3, r9
 8006db6:	4630      	mov	r0, r6
 8006db8:	4639      	mov	r1, r7
 8006dba:	f7f9 fd5f 	bl	800087c <__aeabi_ddiv>
 8006dbe:	f7f9 fee3 	bl	8000b88 <__aeabi_d2iz>
 8006dc2:	4682      	mov	sl, r0
 8006dc4:	f7f9 fbc6 	bl	8000554 <__aeabi_i2d>
 8006dc8:	4642      	mov	r2, r8
 8006dca:	464b      	mov	r3, r9
 8006dcc:	f7f9 fc2c 	bl	8000628 <__aeabi_dmul>
 8006dd0:	4602      	mov	r2, r0
 8006dd2:	460b      	mov	r3, r1
 8006dd4:	4630      	mov	r0, r6
 8006dd6:	4639      	mov	r1, r7
 8006dd8:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8006ddc:	f7f9 fa6c 	bl	80002b8 <__aeabi_dsub>
 8006de0:	f805 6b01 	strb.w	r6, [r5], #1
 8006de4:	9e01      	ldr	r6, [sp, #4]
 8006de6:	9f03      	ldr	r7, [sp, #12]
 8006de8:	1bae      	subs	r6, r5, r6
 8006dea:	42b7      	cmp	r7, r6
 8006dec:	4602      	mov	r2, r0
 8006dee:	460b      	mov	r3, r1
 8006df0:	d135      	bne.n	8006e5e <_dtoa_r+0x6e6>
 8006df2:	f7f9 fa63 	bl	80002bc <__adddf3>
 8006df6:	4642      	mov	r2, r8
 8006df8:	464b      	mov	r3, r9
 8006dfa:	4606      	mov	r6, r0
 8006dfc:	460f      	mov	r7, r1
 8006dfe:	f7f9 fea3 	bl	8000b48 <__aeabi_dcmpgt>
 8006e02:	b9d0      	cbnz	r0, 8006e3a <_dtoa_r+0x6c2>
 8006e04:	4642      	mov	r2, r8
 8006e06:	464b      	mov	r3, r9
 8006e08:	4630      	mov	r0, r6
 8006e0a:	4639      	mov	r1, r7
 8006e0c:	f7f9 fe74 	bl	8000af8 <__aeabi_dcmpeq>
 8006e10:	b110      	cbz	r0, 8006e18 <_dtoa_r+0x6a0>
 8006e12:	f01a 0f01 	tst.w	sl, #1
 8006e16:	d110      	bne.n	8006e3a <_dtoa_r+0x6c2>
 8006e18:	4620      	mov	r0, r4
 8006e1a:	ee18 1a10 	vmov	r1, s16
 8006e1e:	f000 fe87 	bl	8007b30 <_Bfree>
 8006e22:	2300      	movs	r3, #0
 8006e24:	9800      	ldr	r0, [sp, #0]
 8006e26:	702b      	strb	r3, [r5, #0]
 8006e28:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006e2a:	3001      	adds	r0, #1
 8006e2c:	6018      	str	r0, [r3, #0]
 8006e2e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	f43f acf1 	beq.w	8006818 <_dtoa_r+0xa0>
 8006e36:	601d      	str	r5, [r3, #0]
 8006e38:	e4ee      	b.n	8006818 <_dtoa_r+0xa0>
 8006e3a:	9f00      	ldr	r7, [sp, #0]
 8006e3c:	462b      	mov	r3, r5
 8006e3e:	461d      	mov	r5, r3
 8006e40:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006e44:	2a39      	cmp	r2, #57	; 0x39
 8006e46:	d106      	bne.n	8006e56 <_dtoa_r+0x6de>
 8006e48:	9a01      	ldr	r2, [sp, #4]
 8006e4a:	429a      	cmp	r2, r3
 8006e4c:	d1f7      	bne.n	8006e3e <_dtoa_r+0x6c6>
 8006e4e:	9901      	ldr	r1, [sp, #4]
 8006e50:	2230      	movs	r2, #48	; 0x30
 8006e52:	3701      	adds	r7, #1
 8006e54:	700a      	strb	r2, [r1, #0]
 8006e56:	781a      	ldrb	r2, [r3, #0]
 8006e58:	3201      	adds	r2, #1
 8006e5a:	701a      	strb	r2, [r3, #0]
 8006e5c:	e790      	b.n	8006d80 <_dtoa_r+0x608>
 8006e5e:	4ba6      	ldr	r3, [pc, #664]	; (80070f8 <_dtoa_r+0x980>)
 8006e60:	2200      	movs	r2, #0
 8006e62:	f7f9 fbe1 	bl	8000628 <__aeabi_dmul>
 8006e66:	2200      	movs	r2, #0
 8006e68:	2300      	movs	r3, #0
 8006e6a:	4606      	mov	r6, r0
 8006e6c:	460f      	mov	r7, r1
 8006e6e:	f7f9 fe43 	bl	8000af8 <__aeabi_dcmpeq>
 8006e72:	2800      	cmp	r0, #0
 8006e74:	d09d      	beq.n	8006db2 <_dtoa_r+0x63a>
 8006e76:	e7cf      	b.n	8006e18 <_dtoa_r+0x6a0>
 8006e78:	9a08      	ldr	r2, [sp, #32]
 8006e7a:	2a00      	cmp	r2, #0
 8006e7c:	f000 80d7 	beq.w	800702e <_dtoa_r+0x8b6>
 8006e80:	9a06      	ldr	r2, [sp, #24]
 8006e82:	2a01      	cmp	r2, #1
 8006e84:	f300 80ba 	bgt.w	8006ffc <_dtoa_r+0x884>
 8006e88:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006e8a:	2a00      	cmp	r2, #0
 8006e8c:	f000 80b2 	beq.w	8006ff4 <_dtoa_r+0x87c>
 8006e90:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006e94:	9e07      	ldr	r6, [sp, #28]
 8006e96:	9d04      	ldr	r5, [sp, #16]
 8006e98:	9a04      	ldr	r2, [sp, #16]
 8006e9a:	441a      	add	r2, r3
 8006e9c:	9204      	str	r2, [sp, #16]
 8006e9e:	9a05      	ldr	r2, [sp, #20]
 8006ea0:	2101      	movs	r1, #1
 8006ea2:	441a      	add	r2, r3
 8006ea4:	4620      	mov	r0, r4
 8006ea6:	9205      	str	r2, [sp, #20]
 8006ea8:	f000 ff44 	bl	8007d34 <__i2b>
 8006eac:	4607      	mov	r7, r0
 8006eae:	2d00      	cmp	r5, #0
 8006eb0:	dd0c      	ble.n	8006ecc <_dtoa_r+0x754>
 8006eb2:	9b05      	ldr	r3, [sp, #20]
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	dd09      	ble.n	8006ecc <_dtoa_r+0x754>
 8006eb8:	42ab      	cmp	r3, r5
 8006eba:	9a04      	ldr	r2, [sp, #16]
 8006ebc:	bfa8      	it	ge
 8006ebe:	462b      	movge	r3, r5
 8006ec0:	1ad2      	subs	r2, r2, r3
 8006ec2:	9204      	str	r2, [sp, #16]
 8006ec4:	9a05      	ldr	r2, [sp, #20]
 8006ec6:	1aed      	subs	r5, r5, r3
 8006ec8:	1ad3      	subs	r3, r2, r3
 8006eca:	9305      	str	r3, [sp, #20]
 8006ecc:	9b07      	ldr	r3, [sp, #28]
 8006ece:	b31b      	cbz	r3, 8006f18 <_dtoa_r+0x7a0>
 8006ed0:	9b08      	ldr	r3, [sp, #32]
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	f000 80af 	beq.w	8007036 <_dtoa_r+0x8be>
 8006ed8:	2e00      	cmp	r6, #0
 8006eda:	dd13      	ble.n	8006f04 <_dtoa_r+0x78c>
 8006edc:	4639      	mov	r1, r7
 8006ede:	4632      	mov	r2, r6
 8006ee0:	4620      	mov	r0, r4
 8006ee2:	f000 ffe7 	bl	8007eb4 <__pow5mult>
 8006ee6:	ee18 2a10 	vmov	r2, s16
 8006eea:	4601      	mov	r1, r0
 8006eec:	4607      	mov	r7, r0
 8006eee:	4620      	mov	r0, r4
 8006ef0:	f000 ff36 	bl	8007d60 <__multiply>
 8006ef4:	ee18 1a10 	vmov	r1, s16
 8006ef8:	4680      	mov	r8, r0
 8006efa:	4620      	mov	r0, r4
 8006efc:	f000 fe18 	bl	8007b30 <_Bfree>
 8006f00:	ee08 8a10 	vmov	s16, r8
 8006f04:	9b07      	ldr	r3, [sp, #28]
 8006f06:	1b9a      	subs	r2, r3, r6
 8006f08:	d006      	beq.n	8006f18 <_dtoa_r+0x7a0>
 8006f0a:	ee18 1a10 	vmov	r1, s16
 8006f0e:	4620      	mov	r0, r4
 8006f10:	f000 ffd0 	bl	8007eb4 <__pow5mult>
 8006f14:	ee08 0a10 	vmov	s16, r0
 8006f18:	2101      	movs	r1, #1
 8006f1a:	4620      	mov	r0, r4
 8006f1c:	f000 ff0a 	bl	8007d34 <__i2b>
 8006f20:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	4606      	mov	r6, r0
 8006f26:	f340 8088 	ble.w	800703a <_dtoa_r+0x8c2>
 8006f2a:	461a      	mov	r2, r3
 8006f2c:	4601      	mov	r1, r0
 8006f2e:	4620      	mov	r0, r4
 8006f30:	f000 ffc0 	bl	8007eb4 <__pow5mult>
 8006f34:	9b06      	ldr	r3, [sp, #24]
 8006f36:	2b01      	cmp	r3, #1
 8006f38:	4606      	mov	r6, r0
 8006f3a:	f340 8081 	ble.w	8007040 <_dtoa_r+0x8c8>
 8006f3e:	f04f 0800 	mov.w	r8, #0
 8006f42:	6933      	ldr	r3, [r6, #16]
 8006f44:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8006f48:	6918      	ldr	r0, [r3, #16]
 8006f4a:	f000 fea3 	bl	8007c94 <__hi0bits>
 8006f4e:	f1c0 0020 	rsb	r0, r0, #32
 8006f52:	9b05      	ldr	r3, [sp, #20]
 8006f54:	4418      	add	r0, r3
 8006f56:	f010 001f 	ands.w	r0, r0, #31
 8006f5a:	f000 8092 	beq.w	8007082 <_dtoa_r+0x90a>
 8006f5e:	f1c0 0320 	rsb	r3, r0, #32
 8006f62:	2b04      	cmp	r3, #4
 8006f64:	f340 808a 	ble.w	800707c <_dtoa_r+0x904>
 8006f68:	f1c0 001c 	rsb	r0, r0, #28
 8006f6c:	9b04      	ldr	r3, [sp, #16]
 8006f6e:	4403      	add	r3, r0
 8006f70:	9304      	str	r3, [sp, #16]
 8006f72:	9b05      	ldr	r3, [sp, #20]
 8006f74:	4403      	add	r3, r0
 8006f76:	4405      	add	r5, r0
 8006f78:	9305      	str	r3, [sp, #20]
 8006f7a:	9b04      	ldr	r3, [sp, #16]
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	dd07      	ble.n	8006f90 <_dtoa_r+0x818>
 8006f80:	ee18 1a10 	vmov	r1, s16
 8006f84:	461a      	mov	r2, r3
 8006f86:	4620      	mov	r0, r4
 8006f88:	f000 ffee 	bl	8007f68 <__lshift>
 8006f8c:	ee08 0a10 	vmov	s16, r0
 8006f90:	9b05      	ldr	r3, [sp, #20]
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	dd05      	ble.n	8006fa2 <_dtoa_r+0x82a>
 8006f96:	4631      	mov	r1, r6
 8006f98:	461a      	mov	r2, r3
 8006f9a:	4620      	mov	r0, r4
 8006f9c:	f000 ffe4 	bl	8007f68 <__lshift>
 8006fa0:	4606      	mov	r6, r0
 8006fa2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d06e      	beq.n	8007086 <_dtoa_r+0x90e>
 8006fa8:	ee18 0a10 	vmov	r0, s16
 8006fac:	4631      	mov	r1, r6
 8006fae:	f001 f84b 	bl	8008048 <__mcmp>
 8006fb2:	2800      	cmp	r0, #0
 8006fb4:	da67      	bge.n	8007086 <_dtoa_r+0x90e>
 8006fb6:	9b00      	ldr	r3, [sp, #0]
 8006fb8:	3b01      	subs	r3, #1
 8006fba:	ee18 1a10 	vmov	r1, s16
 8006fbe:	9300      	str	r3, [sp, #0]
 8006fc0:	220a      	movs	r2, #10
 8006fc2:	2300      	movs	r3, #0
 8006fc4:	4620      	mov	r0, r4
 8006fc6:	f000 fdd5 	bl	8007b74 <__multadd>
 8006fca:	9b08      	ldr	r3, [sp, #32]
 8006fcc:	ee08 0a10 	vmov	s16, r0
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	f000 81b1 	beq.w	8007338 <_dtoa_r+0xbc0>
 8006fd6:	2300      	movs	r3, #0
 8006fd8:	4639      	mov	r1, r7
 8006fda:	220a      	movs	r2, #10
 8006fdc:	4620      	mov	r0, r4
 8006fde:	f000 fdc9 	bl	8007b74 <__multadd>
 8006fe2:	9b02      	ldr	r3, [sp, #8]
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	4607      	mov	r7, r0
 8006fe8:	f300 808e 	bgt.w	8007108 <_dtoa_r+0x990>
 8006fec:	9b06      	ldr	r3, [sp, #24]
 8006fee:	2b02      	cmp	r3, #2
 8006ff0:	dc51      	bgt.n	8007096 <_dtoa_r+0x91e>
 8006ff2:	e089      	b.n	8007108 <_dtoa_r+0x990>
 8006ff4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006ff6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006ffa:	e74b      	b.n	8006e94 <_dtoa_r+0x71c>
 8006ffc:	9b03      	ldr	r3, [sp, #12]
 8006ffe:	1e5e      	subs	r6, r3, #1
 8007000:	9b07      	ldr	r3, [sp, #28]
 8007002:	42b3      	cmp	r3, r6
 8007004:	bfbf      	itttt	lt
 8007006:	9b07      	ldrlt	r3, [sp, #28]
 8007008:	9607      	strlt	r6, [sp, #28]
 800700a:	1af2      	sublt	r2, r6, r3
 800700c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800700e:	bfb6      	itet	lt
 8007010:	189b      	addlt	r3, r3, r2
 8007012:	1b9e      	subge	r6, r3, r6
 8007014:	930a      	strlt	r3, [sp, #40]	; 0x28
 8007016:	9b03      	ldr	r3, [sp, #12]
 8007018:	bfb8      	it	lt
 800701a:	2600      	movlt	r6, #0
 800701c:	2b00      	cmp	r3, #0
 800701e:	bfb7      	itett	lt
 8007020:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8007024:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8007028:	1a9d      	sublt	r5, r3, r2
 800702a:	2300      	movlt	r3, #0
 800702c:	e734      	b.n	8006e98 <_dtoa_r+0x720>
 800702e:	9e07      	ldr	r6, [sp, #28]
 8007030:	9d04      	ldr	r5, [sp, #16]
 8007032:	9f08      	ldr	r7, [sp, #32]
 8007034:	e73b      	b.n	8006eae <_dtoa_r+0x736>
 8007036:	9a07      	ldr	r2, [sp, #28]
 8007038:	e767      	b.n	8006f0a <_dtoa_r+0x792>
 800703a:	9b06      	ldr	r3, [sp, #24]
 800703c:	2b01      	cmp	r3, #1
 800703e:	dc18      	bgt.n	8007072 <_dtoa_r+0x8fa>
 8007040:	f1ba 0f00 	cmp.w	sl, #0
 8007044:	d115      	bne.n	8007072 <_dtoa_r+0x8fa>
 8007046:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800704a:	b993      	cbnz	r3, 8007072 <_dtoa_r+0x8fa>
 800704c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007050:	0d1b      	lsrs	r3, r3, #20
 8007052:	051b      	lsls	r3, r3, #20
 8007054:	b183      	cbz	r3, 8007078 <_dtoa_r+0x900>
 8007056:	9b04      	ldr	r3, [sp, #16]
 8007058:	3301      	adds	r3, #1
 800705a:	9304      	str	r3, [sp, #16]
 800705c:	9b05      	ldr	r3, [sp, #20]
 800705e:	3301      	adds	r3, #1
 8007060:	9305      	str	r3, [sp, #20]
 8007062:	f04f 0801 	mov.w	r8, #1
 8007066:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007068:	2b00      	cmp	r3, #0
 800706a:	f47f af6a 	bne.w	8006f42 <_dtoa_r+0x7ca>
 800706e:	2001      	movs	r0, #1
 8007070:	e76f      	b.n	8006f52 <_dtoa_r+0x7da>
 8007072:	f04f 0800 	mov.w	r8, #0
 8007076:	e7f6      	b.n	8007066 <_dtoa_r+0x8ee>
 8007078:	4698      	mov	r8, r3
 800707a:	e7f4      	b.n	8007066 <_dtoa_r+0x8ee>
 800707c:	f43f af7d 	beq.w	8006f7a <_dtoa_r+0x802>
 8007080:	4618      	mov	r0, r3
 8007082:	301c      	adds	r0, #28
 8007084:	e772      	b.n	8006f6c <_dtoa_r+0x7f4>
 8007086:	9b03      	ldr	r3, [sp, #12]
 8007088:	2b00      	cmp	r3, #0
 800708a:	dc37      	bgt.n	80070fc <_dtoa_r+0x984>
 800708c:	9b06      	ldr	r3, [sp, #24]
 800708e:	2b02      	cmp	r3, #2
 8007090:	dd34      	ble.n	80070fc <_dtoa_r+0x984>
 8007092:	9b03      	ldr	r3, [sp, #12]
 8007094:	9302      	str	r3, [sp, #8]
 8007096:	9b02      	ldr	r3, [sp, #8]
 8007098:	b96b      	cbnz	r3, 80070b6 <_dtoa_r+0x93e>
 800709a:	4631      	mov	r1, r6
 800709c:	2205      	movs	r2, #5
 800709e:	4620      	mov	r0, r4
 80070a0:	f000 fd68 	bl	8007b74 <__multadd>
 80070a4:	4601      	mov	r1, r0
 80070a6:	4606      	mov	r6, r0
 80070a8:	ee18 0a10 	vmov	r0, s16
 80070ac:	f000 ffcc 	bl	8008048 <__mcmp>
 80070b0:	2800      	cmp	r0, #0
 80070b2:	f73f adbb 	bgt.w	8006c2c <_dtoa_r+0x4b4>
 80070b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80070b8:	9d01      	ldr	r5, [sp, #4]
 80070ba:	43db      	mvns	r3, r3
 80070bc:	9300      	str	r3, [sp, #0]
 80070be:	f04f 0800 	mov.w	r8, #0
 80070c2:	4631      	mov	r1, r6
 80070c4:	4620      	mov	r0, r4
 80070c6:	f000 fd33 	bl	8007b30 <_Bfree>
 80070ca:	2f00      	cmp	r7, #0
 80070cc:	f43f aea4 	beq.w	8006e18 <_dtoa_r+0x6a0>
 80070d0:	f1b8 0f00 	cmp.w	r8, #0
 80070d4:	d005      	beq.n	80070e2 <_dtoa_r+0x96a>
 80070d6:	45b8      	cmp	r8, r7
 80070d8:	d003      	beq.n	80070e2 <_dtoa_r+0x96a>
 80070da:	4641      	mov	r1, r8
 80070dc:	4620      	mov	r0, r4
 80070de:	f000 fd27 	bl	8007b30 <_Bfree>
 80070e2:	4639      	mov	r1, r7
 80070e4:	4620      	mov	r0, r4
 80070e6:	f000 fd23 	bl	8007b30 <_Bfree>
 80070ea:	e695      	b.n	8006e18 <_dtoa_r+0x6a0>
 80070ec:	2600      	movs	r6, #0
 80070ee:	4637      	mov	r7, r6
 80070f0:	e7e1      	b.n	80070b6 <_dtoa_r+0x93e>
 80070f2:	9700      	str	r7, [sp, #0]
 80070f4:	4637      	mov	r7, r6
 80070f6:	e599      	b.n	8006c2c <_dtoa_r+0x4b4>
 80070f8:	40240000 	.word	0x40240000
 80070fc:	9b08      	ldr	r3, [sp, #32]
 80070fe:	2b00      	cmp	r3, #0
 8007100:	f000 80ca 	beq.w	8007298 <_dtoa_r+0xb20>
 8007104:	9b03      	ldr	r3, [sp, #12]
 8007106:	9302      	str	r3, [sp, #8]
 8007108:	2d00      	cmp	r5, #0
 800710a:	dd05      	ble.n	8007118 <_dtoa_r+0x9a0>
 800710c:	4639      	mov	r1, r7
 800710e:	462a      	mov	r2, r5
 8007110:	4620      	mov	r0, r4
 8007112:	f000 ff29 	bl	8007f68 <__lshift>
 8007116:	4607      	mov	r7, r0
 8007118:	f1b8 0f00 	cmp.w	r8, #0
 800711c:	d05b      	beq.n	80071d6 <_dtoa_r+0xa5e>
 800711e:	6879      	ldr	r1, [r7, #4]
 8007120:	4620      	mov	r0, r4
 8007122:	f000 fcc5 	bl	8007ab0 <_Balloc>
 8007126:	4605      	mov	r5, r0
 8007128:	b928      	cbnz	r0, 8007136 <_dtoa_r+0x9be>
 800712a:	4b87      	ldr	r3, [pc, #540]	; (8007348 <_dtoa_r+0xbd0>)
 800712c:	4602      	mov	r2, r0
 800712e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8007132:	f7ff bb3b 	b.w	80067ac <_dtoa_r+0x34>
 8007136:	693a      	ldr	r2, [r7, #16]
 8007138:	3202      	adds	r2, #2
 800713a:	0092      	lsls	r2, r2, #2
 800713c:	f107 010c 	add.w	r1, r7, #12
 8007140:	300c      	adds	r0, #12
 8007142:	f000 fca7 	bl	8007a94 <memcpy>
 8007146:	2201      	movs	r2, #1
 8007148:	4629      	mov	r1, r5
 800714a:	4620      	mov	r0, r4
 800714c:	f000 ff0c 	bl	8007f68 <__lshift>
 8007150:	9b01      	ldr	r3, [sp, #4]
 8007152:	f103 0901 	add.w	r9, r3, #1
 8007156:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800715a:	4413      	add	r3, r2
 800715c:	9305      	str	r3, [sp, #20]
 800715e:	f00a 0301 	and.w	r3, sl, #1
 8007162:	46b8      	mov	r8, r7
 8007164:	9304      	str	r3, [sp, #16]
 8007166:	4607      	mov	r7, r0
 8007168:	4631      	mov	r1, r6
 800716a:	ee18 0a10 	vmov	r0, s16
 800716e:	f7ff fa75 	bl	800665c <quorem>
 8007172:	4641      	mov	r1, r8
 8007174:	9002      	str	r0, [sp, #8]
 8007176:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800717a:	ee18 0a10 	vmov	r0, s16
 800717e:	f000 ff63 	bl	8008048 <__mcmp>
 8007182:	463a      	mov	r2, r7
 8007184:	9003      	str	r0, [sp, #12]
 8007186:	4631      	mov	r1, r6
 8007188:	4620      	mov	r0, r4
 800718a:	f000 ff79 	bl	8008080 <__mdiff>
 800718e:	68c2      	ldr	r2, [r0, #12]
 8007190:	f109 3bff 	add.w	fp, r9, #4294967295
 8007194:	4605      	mov	r5, r0
 8007196:	bb02      	cbnz	r2, 80071da <_dtoa_r+0xa62>
 8007198:	4601      	mov	r1, r0
 800719a:	ee18 0a10 	vmov	r0, s16
 800719e:	f000 ff53 	bl	8008048 <__mcmp>
 80071a2:	4602      	mov	r2, r0
 80071a4:	4629      	mov	r1, r5
 80071a6:	4620      	mov	r0, r4
 80071a8:	9207      	str	r2, [sp, #28]
 80071aa:	f000 fcc1 	bl	8007b30 <_Bfree>
 80071ae:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 80071b2:	ea43 0102 	orr.w	r1, r3, r2
 80071b6:	9b04      	ldr	r3, [sp, #16]
 80071b8:	430b      	orrs	r3, r1
 80071ba:	464d      	mov	r5, r9
 80071bc:	d10f      	bne.n	80071de <_dtoa_r+0xa66>
 80071be:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80071c2:	d02a      	beq.n	800721a <_dtoa_r+0xaa2>
 80071c4:	9b03      	ldr	r3, [sp, #12]
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	dd02      	ble.n	80071d0 <_dtoa_r+0xa58>
 80071ca:	9b02      	ldr	r3, [sp, #8]
 80071cc:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 80071d0:	f88b a000 	strb.w	sl, [fp]
 80071d4:	e775      	b.n	80070c2 <_dtoa_r+0x94a>
 80071d6:	4638      	mov	r0, r7
 80071d8:	e7ba      	b.n	8007150 <_dtoa_r+0x9d8>
 80071da:	2201      	movs	r2, #1
 80071dc:	e7e2      	b.n	80071a4 <_dtoa_r+0xa2c>
 80071de:	9b03      	ldr	r3, [sp, #12]
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	db04      	blt.n	80071ee <_dtoa_r+0xa76>
 80071e4:	9906      	ldr	r1, [sp, #24]
 80071e6:	430b      	orrs	r3, r1
 80071e8:	9904      	ldr	r1, [sp, #16]
 80071ea:	430b      	orrs	r3, r1
 80071ec:	d122      	bne.n	8007234 <_dtoa_r+0xabc>
 80071ee:	2a00      	cmp	r2, #0
 80071f0:	ddee      	ble.n	80071d0 <_dtoa_r+0xa58>
 80071f2:	ee18 1a10 	vmov	r1, s16
 80071f6:	2201      	movs	r2, #1
 80071f8:	4620      	mov	r0, r4
 80071fa:	f000 feb5 	bl	8007f68 <__lshift>
 80071fe:	4631      	mov	r1, r6
 8007200:	ee08 0a10 	vmov	s16, r0
 8007204:	f000 ff20 	bl	8008048 <__mcmp>
 8007208:	2800      	cmp	r0, #0
 800720a:	dc03      	bgt.n	8007214 <_dtoa_r+0xa9c>
 800720c:	d1e0      	bne.n	80071d0 <_dtoa_r+0xa58>
 800720e:	f01a 0f01 	tst.w	sl, #1
 8007212:	d0dd      	beq.n	80071d0 <_dtoa_r+0xa58>
 8007214:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007218:	d1d7      	bne.n	80071ca <_dtoa_r+0xa52>
 800721a:	2339      	movs	r3, #57	; 0x39
 800721c:	f88b 3000 	strb.w	r3, [fp]
 8007220:	462b      	mov	r3, r5
 8007222:	461d      	mov	r5, r3
 8007224:	3b01      	subs	r3, #1
 8007226:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800722a:	2a39      	cmp	r2, #57	; 0x39
 800722c:	d071      	beq.n	8007312 <_dtoa_r+0xb9a>
 800722e:	3201      	adds	r2, #1
 8007230:	701a      	strb	r2, [r3, #0]
 8007232:	e746      	b.n	80070c2 <_dtoa_r+0x94a>
 8007234:	2a00      	cmp	r2, #0
 8007236:	dd07      	ble.n	8007248 <_dtoa_r+0xad0>
 8007238:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800723c:	d0ed      	beq.n	800721a <_dtoa_r+0xaa2>
 800723e:	f10a 0301 	add.w	r3, sl, #1
 8007242:	f88b 3000 	strb.w	r3, [fp]
 8007246:	e73c      	b.n	80070c2 <_dtoa_r+0x94a>
 8007248:	9b05      	ldr	r3, [sp, #20]
 800724a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800724e:	4599      	cmp	r9, r3
 8007250:	d047      	beq.n	80072e2 <_dtoa_r+0xb6a>
 8007252:	ee18 1a10 	vmov	r1, s16
 8007256:	2300      	movs	r3, #0
 8007258:	220a      	movs	r2, #10
 800725a:	4620      	mov	r0, r4
 800725c:	f000 fc8a 	bl	8007b74 <__multadd>
 8007260:	45b8      	cmp	r8, r7
 8007262:	ee08 0a10 	vmov	s16, r0
 8007266:	f04f 0300 	mov.w	r3, #0
 800726a:	f04f 020a 	mov.w	r2, #10
 800726e:	4641      	mov	r1, r8
 8007270:	4620      	mov	r0, r4
 8007272:	d106      	bne.n	8007282 <_dtoa_r+0xb0a>
 8007274:	f000 fc7e 	bl	8007b74 <__multadd>
 8007278:	4680      	mov	r8, r0
 800727a:	4607      	mov	r7, r0
 800727c:	f109 0901 	add.w	r9, r9, #1
 8007280:	e772      	b.n	8007168 <_dtoa_r+0x9f0>
 8007282:	f000 fc77 	bl	8007b74 <__multadd>
 8007286:	4639      	mov	r1, r7
 8007288:	4680      	mov	r8, r0
 800728a:	2300      	movs	r3, #0
 800728c:	220a      	movs	r2, #10
 800728e:	4620      	mov	r0, r4
 8007290:	f000 fc70 	bl	8007b74 <__multadd>
 8007294:	4607      	mov	r7, r0
 8007296:	e7f1      	b.n	800727c <_dtoa_r+0xb04>
 8007298:	9b03      	ldr	r3, [sp, #12]
 800729a:	9302      	str	r3, [sp, #8]
 800729c:	9d01      	ldr	r5, [sp, #4]
 800729e:	ee18 0a10 	vmov	r0, s16
 80072a2:	4631      	mov	r1, r6
 80072a4:	f7ff f9da 	bl	800665c <quorem>
 80072a8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80072ac:	9b01      	ldr	r3, [sp, #4]
 80072ae:	f805 ab01 	strb.w	sl, [r5], #1
 80072b2:	1aea      	subs	r2, r5, r3
 80072b4:	9b02      	ldr	r3, [sp, #8]
 80072b6:	4293      	cmp	r3, r2
 80072b8:	dd09      	ble.n	80072ce <_dtoa_r+0xb56>
 80072ba:	ee18 1a10 	vmov	r1, s16
 80072be:	2300      	movs	r3, #0
 80072c0:	220a      	movs	r2, #10
 80072c2:	4620      	mov	r0, r4
 80072c4:	f000 fc56 	bl	8007b74 <__multadd>
 80072c8:	ee08 0a10 	vmov	s16, r0
 80072cc:	e7e7      	b.n	800729e <_dtoa_r+0xb26>
 80072ce:	9b02      	ldr	r3, [sp, #8]
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	bfc8      	it	gt
 80072d4:	461d      	movgt	r5, r3
 80072d6:	9b01      	ldr	r3, [sp, #4]
 80072d8:	bfd8      	it	le
 80072da:	2501      	movle	r5, #1
 80072dc:	441d      	add	r5, r3
 80072de:	f04f 0800 	mov.w	r8, #0
 80072e2:	ee18 1a10 	vmov	r1, s16
 80072e6:	2201      	movs	r2, #1
 80072e8:	4620      	mov	r0, r4
 80072ea:	f000 fe3d 	bl	8007f68 <__lshift>
 80072ee:	4631      	mov	r1, r6
 80072f0:	ee08 0a10 	vmov	s16, r0
 80072f4:	f000 fea8 	bl	8008048 <__mcmp>
 80072f8:	2800      	cmp	r0, #0
 80072fa:	dc91      	bgt.n	8007220 <_dtoa_r+0xaa8>
 80072fc:	d102      	bne.n	8007304 <_dtoa_r+0xb8c>
 80072fe:	f01a 0f01 	tst.w	sl, #1
 8007302:	d18d      	bne.n	8007220 <_dtoa_r+0xaa8>
 8007304:	462b      	mov	r3, r5
 8007306:	461d      	mov	r5, r3
 8007308:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800730c:	2a30      	cmp	r2, #48	; 0x30
 800730e:	d0fa      	beq.n	8007306 <_dtoa_r+0xb8e>
 8007310:	e6d7      	b.n	80070c2 <_dtoa_r+0x94a>
 8007312:	9a01      	ldr	r2, [sp, #4]
 8007314:	429a      	cmp	r2, r3
 8007316:	d184      	bne.n	8007222 <_dtoa_r+0xaaa>
 8007318:	9b00      	ldr	r3, [sp, #0]
 800731a:	3301      	adds	r3, #1
 800731c:	9300      	str	r3, [sp, #0]
 800731e:	2331      	movs	r3, #49	; 0x31
 8007320:	7013      	strb	r3, [r2, #0]
 8007322:	e6ce      	b.n	80070c2 <_dtoa_r+0x94a>
 8007324:	4b09      	ldr	r3, [pc, #36]	; (800734c <_dtoa_r+0xbd4>)
 8007326:	f7ff ba95 	b.w	8006854 <_dtoa_r+0xdc>
 800732a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800732c:	2b00      	cmp	r3, #0
 800732e:	f47f aa6e 	bne.w	800680e <_dtoa_r+0x96>
 8007332:	4b07      	ldr	r3, [pc, #28]	; (8007350 <_dtoa_r+0xbd8>)
 8007334:	f7ff ba8e 	b.w	8006854 <_dtoa_r+0xdc>
 8007338:	9b02      	ldr	r3, [sp, #8]
 800733a:	2b00      	cmp	r3, #0
 800733c:	dcae      	bgt.n	800729c <_dtoa_r+0xb24>
 800733e:	9b06      	ldr	r3, [sp, #24]
 8007340:	2b02      	cmp	r3, #2
 8007342:	f73f aea8 	bgt.w	8007096 <_dtoa_r+0x91e>
 8007346:	e7a9      	b.n	800729c <_dtoa_r+0xb24>
 8007348:	0800a108 	.word	0x0800a108
 800734c:	0800a301 	.word	0x0800a301
 8007350:	0800a089 	.word	0x0800a089

08007354 <rshift>:
 8007354:	6903      	ldr	r3, [r0, #16]
 8007356:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800735a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800735e:	ea4f 1261 	mov.w	r2, r1, asr #5
 8007362:	f100 0414 	add.w	r4, r0, #20
 8007366:	dd45      	ble.n	80073f4 <rshift+0xa0>
 8007368:	f011 011f 	ands.w	r1, r1, #31
 800736c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8007370:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8007374:	d10c      	bne.n	8007390 <rshift+0x3c>
 8007376:	f100 0710 	add.w	r7, r0, #16
 800737a:	4629      	mov	r1, r5
 800737c:	42b1      	cmp	r1, r6
 800737e:	d334      	bcc.n	80073ea <rshift+0x96>
 8007380:	1a9b      	subs	r3, r3, r2
 8007382:	009b      	lsls	r3, r3, #2
 8007384:	1eea      	subs	r2, r5, #3
 8007386:	4296      	cmp	r6, r2
 8007388:	bf38      	it	cc
 800738a:	2300      	movcc	r3, #0
 800738c:	4423      	add	r3, r4
 800738e:	e015      	b.n	80073bc <rshift+0x68>
 8007390:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8007394:	f1c1 0820 	rsb	r8, r1, #32
 8007398:	40cf      	lsrs	r7, r1
 800739a:	f105 0e04 	add.w	lr, r5, #4
 800739e:	46a1      	mov	r9, r4
 80073a0:	4576      	cmp	r6, lr
 80073a2:	46f4      	mov	ip, lr
 80073a4:	d815      	bhi.n	80073d2 <rshift+0x7e>
 80073a6:	1a9a      	subs	r2, r3, r2
 80073a8:	0092      	lsls	r2, r2, #2
 80073aa:	3a04      	subs	r2, #4
 80073ac:	3501      	adds	r5, #1
 80073ae:	42ae      	cmp	r6, r5
 80073b0:	bf38      	it	cc
 80073b2:	2200      	movcc	r2, #0
 80073b4:	18a3      	adds	r3, r4, r2
 80073b6:	50a7      	str	r7, [r4, r2]
 80073b8:	b107      	cbz	r7, 80073bc <rshift+0x68>
 80073ba:	3304      	adds	r3, #4
 80073bc:	1b1a      	subs	r2, r3, r4
 80073be:	42a3      	cmp	r3, r4
 80073c0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80073c4:	bf08      	it	eq
 80073c6:	2300      	moveq	r3, #0
 80073c8:	6102      	str	r2, [r0, #16]
 80073ca:	bf08      	it	eq
 80073cc:	6143      	streq	r3, [r0, #20]
 80073ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80073d2:	f8dc c000 	ldr.w	ip, [ip]
 80073d6:	fa0c fc08 	lsl.w	ip, ip, r8
 80073da:	ea4c 0707 	orr.w	r7, ip, r7
 80073de:	f849 7b04 	str.w	r7, [r9], #4
 80073e2:	f85e 7b04 	ldr.w	r7, [lr], #4
 80073e6:	40cf      	lsrs	r7, r1
 80073e8:	e7da      	b.n	80073a0 <rshift+0x4c>
 80073ea:	f851 cb04 	ldr.w	ip, [r1], #4
 80073ee:	f847 cf04 	str.w	ip, [r7, #4]!
 80073f2:	e7c3      	b.n	800737c <rshift+0x28>
 80073f4:	4623      	mov	r3, r4
 80073f6:	e7e1      	b.n	80073bc <rshift+0x68>

080073f8 <__hexdig_fun>:
 80073f8:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80073fc:	2b09      	cmp	r3, #9
 80073fe:	d802      	bhi.n	8007406 <__hexdig_fun+0xe>
 8007400:	3820      	subs	r0, #32
 8007402:	b2c0      	uxtb	r0, r0
 8007404:	4770      	bx	lr
 8007406:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800740a:	2b05      	cmp	r3, #5
 800740c:	d801      	bhi.n	8007412 <__hexdig_fun+0x1a>
 800740e:	3847      	subs	r0, #71	; 0x47
 8007410:	e7f7      	b.n	8007402 <__hexdig_fun+0xa>
 8007412:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8007416:	2b05      	cmp	r3, #5
 8007418:	d801      	bhi.n	800741e <__hexdig_fun+0x26>
 800741a:	3827      	subs	r0, #39	; 0x27
 800741c:	e7f1      	b.n	8007402 <__hexdig_fun+0xa>
 800741e:	2000      	movs	r0, #0
 8007420:	4770      	bx	lr
	...

08007424 <__gethex>:
 8007424:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007428:	ed2d 8b02 	vpush	{d8}
 800742c:	b089      	sub	sp, #36	; 0x24
 800742e:	ee08 0a10 	vmov	s16, r0
 8007432:	9304      	str	r3, [sp, #16]
 8007434:	4bb4      	ldr	r3, [pc, #720]	; (8007708 <__gethex+0x2e4>)
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	9301      	str	r3, [sp, #4]
 800743a:	4618      	mov	r0, r3
 800743c:	468b      	mov	fp, r1
 800743e:	4690      	mov	r8, r2
 8007440:	f7f8 fed8 	bl	80001f4 <strlen>
 8007444:	9b01      	ldr	r3, [sp, #4]
 8007446:	f8db 2000 	ldr.w	r2, [fp]
 800744a:	4403      	add	r3, r0
 800744c:	4682      	mov	sl, r0
 800744e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8007452:	9305      	str	r3, [sp, #20]
 8007454:	1c93      	adds	r3, r2, #2
 8007456:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800745a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800745e:	32fe      	adds	r2, #254	; 0xfe
 8007460:	18d1      	adds	r1, r2, r3
 8007462:	461f      	mov	r7, r3
 8007464:	f813 0b01 	ldrb.w	r0, [r3], #1
 8007468:	9100      	str	r1, [sp, #0]
 800746a:	2830      	cmp	r0, #48	; 0x30
 800746c:	d0f8      	beq.n	8007460 <__gethex+0x3c>
 800746e:	f7ff ffc3 	bl	80073f8 <__hexdig_fun>
 8007472:	4604      	mov	r4, r0
 8007474:	2800      	cmp	r0, #0
 8007476:	d13a      	bne.n	80074ee <__gethex+0xca>
 8007478:	9901      	ldr	r1, [sp, #4]
 800747a:	4652      	mov	r2, sl
 800747c:	4638      	mov	r0, r7
 800747e:	f001 fdb3 	bl	8008fe8 <strncmp>
 8007482:	4605      	mov	r5, r0
 8007484:	2800      	cmp	r0, #0
 8007486:	d168      	bne.n	800755a <__gethex+0x136>
 8007488:	f817 000a 	ldrb.w	r0, [r7, sl]
 800748c:	eb07 060a 	add.w	r6, r7, sl
 8007490:	f7ff ffb2 	bl	80073f8 <__hexdig_fun>
 8007494:	2800      	cmp	r0, #0
 8007496:	d062      	beq.n	800755e <__gethex+0x13a>
 8007498:	4633      	mov	r3, r6
 800749a:	7818      	ldrb	r0, [r3, #0]
 800749c:	2830      	cmp	r0, #48	; 0x30
 800749e:	461f      	mov	r7, r3
 80074a0:	f103 0301 	add.w	r3, r3, #1
 80074a4:	d0f9      	beq.n	800749a <__gethex+0x76>
 80074a6:	f7ff ffa7 	bl	80073f8 <__hexdig_fun>
 80074aa:	2301      	movs	r3, #1
 80074ac:	fab0 f480 	clz	r4, r0
 80074b0:	0964      	lsrs	r4, r4, #5
 80074b2:	4635      	mov	r5, r6
 80074b4:	9300      	str	r3, [sp, #0]
 80074b6:	463a      	mov	r2, r7
 80074b8:	4616      	mov	r6, r2
 80074ba:	3201      	adds	r2, #1
 80074bc:	7830      	ldrb	r0, [r6, #0]
 80074be:	f7ff ff9b 	bl	80073f8 <__hexdig_fun>
 80074c2:	2800      	cmp	r0, #0
 80074c4:	d1f8      	bne.n	80074b8 <__gethex+0x94>
 80074c6:	9901      	ldr	r1, [sp, #4]
 80074c8:	4652      	mov	r2, sl
 80074ca:	4630      	mov	r0, r6
 80074cc:	f001 fd8c 	bl	8008fe8 <strncmp>
 80074d0:	b980      	cbnz	r0, 80074f4 <__gethex+0xd0>
 80074d2:	b94d      	cbnz	r5, 80074e8 <__gethex+0xc4>
 80074d4:	eb06 050a 	add.w	r5, r6, sl
 80074d8:	462a      	mov	r2, r5
 80074da:	4616      	mov	r6, r2
 80074dc:	3201      	adds	r2, #1
 80074de:	7830      	ldrb	r0, [r6, #0]
 80074e0:	f7ff ff8a 	bl	80073f8 <__hexdig_fun>
 80074e4:	2800      	cmp	r0, #0
 80074e6:	d1f8      	bne.n	80074da <__gethex+0xb6>
 80074e8:	1bad      	subs	r5, r5, r6
 80074ea:	00ad      	lsls	r5, r5, #2
 80074ec:	e004      	b.n	80074f8 <__gethex+0xd4>
 80074ee:	2400      	movs	r4, #0
 80074f0:	4625      	mov	r5, r4
 80074f2:	e7e0      	b.n	80074b6 <__gethex+0x92>
 80074f4:	2d00      	cmp	r5, #0
 80074f6:	d1f7      	bne.n	80074e8 <__gethex+0xc4>
 80074f8:	7833      	ldrb	r3, [r6, #0]
 80074fa:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80074fe:	2b50      	cmp	r3, #80	; 0x50
 8007500:	d13b      	bne.n	800757a <__gethex+0x156>
 8007502:	7873      	ldrb	r3, [r6, #1]
 8007504:	2b2b      	cmp	r3, #43	; 0x2b
 8007506:	d02c      	beq.n	8007562 <__gethex+0x13e>
 8007508:	2b2d      	cmp	r3, #45	; 0x2d
 800750a:	d02e      	beq.n	800756a <__gethex+0x146>
 800750c:	1c71      	adds	r1, r6, #1
 800750e:	f04f 0900 	mov.w	r9, #0
 8007512:	7808      	ldrb	r0, [r1, #0]
 8007514:	f7ff ff70 	bl	80073f8 <__hexdig_fun>
 8007518:	1e43      	subs	r3, r0, #1
 800751a:	b2db      	uxtb	r3, r3
 800751c:	2b18      	cmp	r3, #24
 800751e:	d82c      	bhi.n	800757a <__gethex+0x156>
 8007520:	f1a0 0210 	sub.w	r2, r0, #16
 8007524:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8007528:	f7ff ff66 	bl	80073f8 <__hexdig_fun>
 800752c:	1e43      	subs	r3, r0, #1
 800752e:	b2db      	uxtb	r3, r3
 8007530:	2b18      	cmp	r3, #24
 8007532:	d91d      	bls.n	8007570 <__gethex+0x14c>
 8007534:	f1b9 0f00 	cmp.w	r9, #0
 8007538:	d000      	beq.n	800753c <__gethex+0x118>
 800753a:	4252      	negs	r2, r2
 800753c:	4415      	add	r5, r2
 800753e:	f8cb 1000 	str.w	r1, [fp]
 8007542:	b1e4      	cbz	r4, 800757e <__gethex+0x15a>
 8007544:	9b00      	ldr	r3, [sp, #0]
 8007546:	2b00      	cmp	r3, #0
 8007548:	bf14      	ite	ne
 800754a:	2700      	movne	r7, #0
 800754c:	2706      	moveq	r7, #6
 800754e:	4638      	mov	r0, r7
 8007550:	b009      	add	sp, #36	; 0x24
 8007552:	ecbd 8b02 	vpop	{d8}
 8007556:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800755a:	463e      	mov	r6, r7
 800755c:	4625      	mov	r5, r4
 800755e:	2401      	movs	r4, #1
 8007560:	e7ca      	b.n	80074f8 <__gethex+0xd4>
 8007562:	f04f 0900 	mov.w	r9, #0
 8007566:	1cb1      	adds	r1, r6, #2
 8007568:	e7d3      	b.n	8007512 <__gethex+0xee>
 800756a:	f04f 0901 	mov.w	r9, #1
 800756e:	e7fa      	b.n	8007566 <__gethex+0x142>
 8007570:	230a      	movs	r3, #10
 8007572:	fb03 0202 	mla	r2, r3, r2, r0
 8007576:	3a10      	subs	r2, #16
 8007578:	e7d4      	b.n	8007524 <__gethex+0x100>
 800757a:	4631      	mov	r1, r6
 800757c:	e7df      	b.n	800753e <__gethex+0x11a>
 800757e:	1bf3      	subs	r3, r6, r7
 8007580:	3b01      	subs	r3, #1
 8007582:	4621      	mov	r1, r4
 8007584:	2b07      	cmp	r3, #7
 8007586:	dc0b      	bgt.n	80075a0 <__gethex+0x17c>
 8007588:	ee18 0a10 	vmov	r0, s16
 800758c:	f000 fa90 	bl	8007ab0 <_Balloc>
 8007590:	4604      	mov	r4, r0
 8007592:	b940      	cbnz	r0, 80075a6 <__gethex+0x182>
 8007594:	4b5d      	ldr	r3, [pc, #372]	; (800770c <__gethex+0x2e8>)
 8007596:	4602      	mov	r2, r0
 8007598:	21de      	movs	r1, #222	; 0xde
 800759a:	485d      	ldr	r0, [pc, #372]	; (8007710 <__gethex+0x2ec>)
 800759c:	f001 fdf4 	bl	8009188 <__assert_func>
 80075a0:	3101      	adds	r1, #1
 80075a2:	105b      	asrs	r3, r3, #1
 80075a4:	e7ee      	b.n	8007584 <__gethex+0x160>
 80075a6:	f100 0914 	add.w	r9, r0, #20
 80075aa:	f04f 0b00 	mov.w	fp, #0
 80075ae:	f1ca 0301 	rsb	r3, sl, #1
 80075b2:	f8cd 9008 	str.w	r9, [sp, #8]
 80075b6:	f8cd b000 	str.w	fp, [sp]
 80075ba:	9306      	str	r3, [sp, #24]
 80075bc:	42b7      	cmp	r7, r6
 80075be:	d340      	bcc.n	8007642 <__gethex+0x21e>
 80075c0:	9802      	ldr	r0, [sp, #8]
 80075c2:	9b00      	ldr	r3, [sp, #0]
 80075c4:	f840 3b04 	str.w	r3, [r0], #4
 80075c8:	eba0 0009 	sub.w	r0, r0, r9
 80075cc:	1080      	asrs	r0, r0, #2
 80075ce:	0146      	lsls	r6, r0, #5
 80075d0:	6120      	str	r0, [r4, #16]
 80075d2:	4618      	mov	r0, r3
 80075d4:	f000 fb5e 	bl	8007c94 <__hi0bits>
 80075d8:	1a30      	subs	r0, r6, r0
 80075da:	f8d8 6000 	ldr.w	r6, [r8]
 80075de:	42b0      	cmp	r0, r6
 80075e0:	dd63      	ble.n	80076aa <__gethex+0x286>
 80075e2:	1b87      	subs	r7, r0, r6
 80075e4:	4639      	mov	r1, r7
 80075e6:	4620      	mov	r0, r4
 80075e8:	f000 ff02 	bl	80083f0 <__any_on>
 80075ec:	4682      	mov	sl, r0
 80075ee:	b1a8      	cbz	r0, 800761c <__gethex+0x1f8>
 80075f0:	1e7b      	subs	r3, r7, #1
 80075f2:	1159      	asrs	r1, r3, #5
 80075f4:	f003 021f 	and.w	r2, r3, #31
 80075f8:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 80075fc:	f04f 0a01 	mov.w	sl, #1
 8007600:	fa0a f202 	lsl.w	r2, sl, r2
 8007604:	420a      	tst	r2, r1
 8007606:	d009      	beq.n	800761c <__gethex+0x1f8>
 8007608:	4553      	cmp	r3, sl
 800760a:	dd05      	ble.n	8007618 <__gethex+0x1f4>
 800760c:	1eb9      	subs	r1, r7, #2
 800760e:	4620      	mov	r0, r4
 8007610:	f000 feee 	bl	80083f0 <__any_on>
 8007614:	2800      	cmp	r0, #0
 8007616:	d145      	bne.n	80076a4 <__gethex+0x280>
 8007618:	f04f 0a02 	mov.w	sl, #2
 800761c:	4639      	mov	r1, r7
 800761e:	4620      	mov	r0, r4
 8007620:	f7ff fe98 	bl	8007354 <rshift>
 8007624:	443d      	add	r5, r7
 8007626:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800762a:	42ab      	cmp	r3, r5
 800762c:	da4c      	bge.n	80076c8 <__gethex+0x2a4>
 800762e:	ee18 0a10 	vmov	r0, s16
 8007632:	4621      	mov	r1, r4
 8007634:	f000 fa7c 	bl	8007b30 <_Bfree>
 8007638:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800763a:	2300      	movs	r3, #0
 800763c:	6013      	str	r3, [r2, #0]
 800763e:	27a3      	movs	r7, #163	; 0xa3
 8007640:	e785      	b.n	800754e <__gethex+0x12a>
 8007642:	1e73      	subs	r3, r6, #1
 8007644:	9a05      	ldr	r2, [sp, #20]
 8007646:	9303      	str	r3, [sp, #12]
 8007648:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800764c:	4293      	cmp	r3, r2
 800764e:	d019      	beq.n	8007684 <__gethex+0x260>
 8007650:	f1bb 0f20 	cmp.w	fp, #32
 8007654:	d107      	bne.n	8007666 <__gethex+0x242>
 8007656:	9b02      	ldr	r3, [sp, #8]
 8007658:	9a00      	ldr	r2, [sp, #0]
 800765a:	f843 2b04 	str.w	r2, [r3], #4
 800765e:	9302      	str	r3, [sp, #8]
 8007660:	2300      	movs	r3, #0
 8007662:	9300      	str	r3, [sp, #0]
 8007664:	469b      	mov	fp, r3
 8007666:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800766a:	f7ff fec5 	bl	80073f8 <__hexdig_fun>
 800766e:	9b00      	ldr	r3, [sp, #0]
 8007670:	f000 000f 	and.w	r0, r0, #15
 8007674:	fa00 f00b 	lsl.w	r0, r0, fp
 8007678:	4303      	orrs	r3, r0
 800767a:	9300      	str	r3, [sp, #0]
 800767c:	f10b 0b04 	add.w	fp, fp, #4
 8007680:	9b03      	ldr	r3, [sp, #12]
 8007682:	e00d      	b.n	80076a0 <__gethex+0x27c>
 8007684:	9b03      	ldr	r3, [sp, #12]
 8007686:	9a06      	ldr	r2, [sp, #24]
 8007688:	4413      	add	r3, r2
 800768a:	42bb      	cmp	r3, r7
 800768c:	d3e0      	bcc.n	8007650 <__gethex+0x22c>
 800768e:	4618      	mov	r0, r3
 8007690:	9901      	ldr	r1, [sp, #4]
 8007692:	9307      	str	r3, [sp, #28]
 8007694:	4652      	mov	r2, sl
 8007696:	f001 fca7 	bl	8008fe8 <strncmp>
 800769a:	9b07      	ldr	r3, [sp, #28]
 800769c:	2800      	cmp	r0, #0
 800769e:	d1d7      	bne.n	8007650 <__gethex+0x22c>
 80076a0:	461e      	mov	r6, r3
 80076a2:	e78b      	b.n	80075bc <__gethex+0x198>
 80076a4:	f04f 0a03 	mov.w	sl, #3
 80076a8:	e7b8      	b.n	800761c <__gethex+0x1f8>
 80076aa:	da0a      	bge.n	80076c2 <__gethex+0x29e>
 80076ac:	1a37      	subs	r7, r6, r0
 80076ae:	4621      	mov	r1, r4
 80076b0:	ee18 0a10 	vmov	r0, s16
 80076b4:	463a      	mov	r2, r7
 80076b6:	f000 fc57 	bl	8007f68 <__lshift>
 80076ba:	1bed      	subs	r5, r5, r7
 80076bc:	4604      	mov	r4, r0
 80076be:	f100 0914 	add.w	r9, r0, #20
 80076c2:	f04f 0a00 	mov.w	sl, #0
 80076c6:	e7ae      	b.n	8007626 <__gethex+0x202>
 80076c8:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80076cc:	42a8      	cmp	r0, r5
 80076ce:	dd72      	ble.n	80077b6 <__gethex+0x392>
 80076d0:	1b45      	subs	r5, r0, r5
 80076d2:	42ae      	cmp	r6, r5
 80076d4:	dc36      	bgt.n	8007744 <__gethex+0x320>
 80076d6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80076da:	2b02      	cmp	r3, #2
 80076dc:	d02a      	beq.n	8007734 <__gethex+0x310>
 80076de:	2b03      	cmp	r3, #3
 80076e0:	d02c      	beq.n	800773c <__gethex+0x318>
 80076e2:	2b01      	cmp	r3, #1
 80076e4:	d11c      	bne.n	8007720 <__gethex+0x2fc>
 80076e6:	42ae      	cmp	r6, r5
 80076e8:	d11a      	bne.n	8007720 <__gethex+0x2fc>
 80076ea:	2e01      	cmp	r6, #1
 80076ec:	d112      	bne.n	8007714 <__gethex+0x2f0>
 80076ee:	9a04      	ldr	r2, [sp, #16]
 80076f0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80076f4:	6013      	str	r3, [r2, #0]
 80076f6:	2301      	movs	r3, #1
 80076f8:	6123      	str	r3, [r4, #16]
 80076fa:	f8c9 3000 	str.w	r3, [r9]
 80076fe:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007700:	2762      	movs	r7, #98	; 0x62
 8007702:	601c      	str	r4, [r3, #0]
 8007704:	e723      	b.n	800754e <__gethex+0x12a>
 8007706:	bf00      	nop
 8007708:	0800a180 	.word	0x0800a180
 800770c:	0800a108 	.word	0x0800a108
 8007710:	0800a119 	.word	0x0800a119
 8007714:	1e71      	subs	r1, r6, #1
 8007716:	4620      	mov	r0, r4
 8007718:	f000 fe6a 	bl	80083f0 <__any_on>
 800771c:	2800      	cmp	r0, #0
 800771e:	d1e6      	bne.n	80076ee <__gethex+0x2ca>
 8007720:	ee18 0a10 	vmov	r0, s16
 8007724:	4621      	mov	r1, r4
 8007726:	f000 fa03 	bl	8007b30 <_Bfree>
 800772a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800772c:	2300      	movs	r3, #0
 800772e:	6013      	str	r3, [r2, #0]
 8007730:	2750      	movs	r7, #80	; 0x50
 8007732:	e70c      	b.n	800754e <__gethex+0x12a>
 8007734:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007736:	2b00      	cmp	r3, #0
 8007738:	d1f2      	bne.n	8007720 <__gethex+0x2fc>
 800773a:	e7d8      	b.n	80076ee <__gethex+0x2ca>
 800773c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800773e:	2b00      	cmp	r3, #0
 8007740:	d1d5      	bne.n	80076ee <__gethex+0x2ca>
 8007742:	e7ed      	b.n	8007720 <__gethex+0x2fc>
 8007744:	1e6f      	subs	r7, r5, #1
 8007746:	f1ba 0f00 	cmp.w	sl, #0
 800774a:	d131      	bne.n	80077b0 <__gethex+0x38c>
 800774c:	b127      	cbz	r7, 8007758 <__gethex+0x334>
 800774e:	4639      	mov	r1, r7
 8007750:	4620      	mov	r0, r4
 8007752:	f000 fe4d 	bl	80083f0 <__any_on>
 8007756:	4682      	mov	sl, r0
 8007758:	117b      	asrs	r3, r7, #5
 800775a:	2101      	movs	r1, #1
 800775c:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8007760:	f007 071f 	and.w	r7, r7, #31
 8007764:	fa01 f707 	lsl.w	r7, r1, r7
 8007768:	421f      	tst	r7, r3
 800776a:	4629      	mov	r1, r5
 800776c:	4620      	mov	r0, r4
 800776e:	bf18      	it	ne
 8007770:	f04a 0a02 	orrne.w	sl, sl, #2
 8007774:	1b76      	subs	r6, r6, r5
 8007776:	f7ff fded 	bl	8007354 <rshift>
 800777a:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800777e:	2702      	movs	r7, #2
 8007780:	f1ba 0f00 	cmp.w	sl, #0
 8007784:	d048      	beq.n	8007818 <__gethex+0x3f4>
 8007786:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800778a:	2b02      	cmp	r3, #2
 800778c:	d015      	beq.n	80077ba <__gethex+0x396>
 800778e:	2b03      	cmp	r3, #3
 8007790:	d017      	beq.n	80077c2 <__gethex+0x39e>
 8007792:	2b01      	cmp	r3, #1
 8007794:	d109      	bne.n	80077aa <__gethex+0x386>
 8007796:	f01a 0f02 	tst.w	sl, #2
 800779a:	d006      	beq.n	80077aa <__gethex+0x386>
 800779c:	f8d9 0000 	ldr.w	r0, [r9]
 80077a0:	ea4a 0a00 	orr.w	sl, sl, r0
 80077a4:	f01a 0f01 	tst.w	sl, #1
 80077a8:	d10e      	bne.n	80077c8 <__gethex+0x3a4>
 80077aa:	f047 0710 	orr.w	r7, r7, #16
 80077ae:	e033      	b.n	8007818 <__gethex+0x3f4>
 80077b0:	f04f 0a01 	mov.w	sl, #1
 80077b4:	e7d0      	b.n	8007758 <__gethex+0x334>
 80077b6:	2701      	movs	r7, #1
 80077b8:	e7e2      	b.n	8007780 <__gethex+0x35c>
 80077ba:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80077bc:	f1c3 0301 	rsb	r3, r3, #1
 80077c0:	9315      	str	r3, [sp, #84]	; 0x54
 80077c2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d0f0      	beq.n	80077aa <__gethex+0x386>
 80077c8:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80077cc:	f104 0314 	add.w	r3, r4, #20
 80077d0:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80077d4:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80077d8:	f04f 0c00 	mov.w	ip, #0
 80077dc:	4618      	mov	r0, r3
 80077de:	f853 2b04 	ldr.w	r2, [r3], #4
 80077e2:	f1b2 3fff 	cmp.w	r2, #4294967295
 80077e6:	d01c      	beq.n	8007822 <__gethex+0x3fe>
 80077e8:	3201      	adds	r2, #1
 80077ea:	6002      	str	r2, [r0, #0]
 80077ec:	2f02      	cmp	r7, #2
 80077ee:	f104 0314 	add.w	r3, r4, #20
 80077f2:	d13f      	bne.n	8007874 <__gethex+0x450>
 80077f4:	f8d8 2000 	ldr.w	r2, [r8]
 80077f8:	3a01      	subs	r2, #1
 80077fa:	42b2      	cmp	r2, r6
 80077fc:	d10a      	bne.n	8007814 <__gethex+0x3f0>
 80077fe:	1171      	asrs	r1, r6, #5
 8007800:	2201      	movs	r2, #1
 8007802:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007806:	f006 061f 	and.w	r6, r6, #31
 800780a:	fa02 f606 	lsl.w	r6, r2, r6
 800780e:	421e      	tst	r6, r3
 8007810:	bf18      	it	ne
 8007812:	4617      	movne	r7, r2
 8007814:	f047 0720 	orr.w	r7, r7, #32
 8007818:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800781a:	601c      	str	r4, [r3, #0]
 800781c:	9b04      	ldr	r3, [sp, #16]
 800781e:	601d      	str	r5, [r3, #0]
 8007820:	e695      	b.n	800754e <__gethex+0x12a>
 8007822:	4299      	cmp	r1, r3
 8007824:	f843 cc04 	str.w	ip, [r3, #-4]
 8007828:	d8d8      	bhi.n	80077dc <__gethex+0x3b8>
 800782a:	68a3      	ldr	r3, [r4, #8]
 800782c:	459b      	cmp	fp, r3
 800782e:	db19      	blt.n	8007864 <__gethex+0x440>
 8007830:	6861      	ldr	r1, [r4, #4]
 8007832:	ee18 0a10 	vmov	r0, s16
 8007836:	3101      	adds	r1, #1
 8007838:	f000 f93a 	bl	8007ab0 <_Balloc>
 800783c:	4681      	mov	r9, r0
 800783e:	b918      	cbnz	r0, 8007848 <__gethex+0x424>
 8007840:	4b1a      	ldr	r3, [pc, #104]	; (80078ac <__gethex+0x488>)
 8007842:	4602      	mov	r2, r0
 8007844:	2184      	movs	r1, #132	; 0x84
 8007846:	e6a8      	b.n	800759a <__gethex+0x176>
 8007848:	6922      	ldr	r2, [r4, #16]
 800784a:	3202      	adds	r2, #2
 800784c:	f104 010c 	add.w	r1, r4, #12
 8007850:	0092      	lsls	r2, r2, #2
 8007852:	300c      	adds	r0, #12
 8007854:	f000 f91e 	bl	8007a94 <memcpy>
 8007858:	4621      	mov	r1, r4
 800785a:	ee18 0a10 	vmov	r0, s16
 800785e:	f000 f967 	bl	8007b30 <_Bfree>
 8007862:	464c      	mov	r4, r9
 8007864:	6923      	ldr	r3, [r4, #16]
 8007866:	1c5a      	adds	r2, r3, #1
 8007868:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800786c:	6122      	str	r2, [r4, #16]
 800786e:	2201      	movs	r2, #1
 8007870:	615a      	str	r2, [r3, #20]
 8007872:	e7bb      	b.n	80077ec <__gethex+0x3c8>
 8007874:	6922      	ldr	r2, [r4, #16]
 8007876:	455a      	cmp	r2, fp
 8007878:	dd0b      	ble.n	8007892 <__gethex+0x46e>
 800787a:	2101      	movs	r1, #1
 800787c:	4620      	mov	r0, r4
 800787e:	f7ff fd69 	bl	8007354 <rshift>
 8007882:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007886:	3501      	adds	r5, #1
 8007888:	42ab      	cmp	r3, r5
 800788a:	f6ff aed0 	blt.w	800762e <__gethex+0x20a>
 800788e:	2701      	movs	r7, #1
 8007890:	e7c0      	b.n	8007814 <__gethex+0x3f0>
 8007892:	f016 061f 	ands.w	r6, r6, #31
 8007896:	d0fa      	beq.n	800788e <__gethex+0x46a>
 8007898:	4453      	add	r3, sl
 800789a:	f1c6 0620 	rsb	r6, r6, #32
 800789e:	f853 0c04 	ldr.w	r0, [r3, #-4]
 80078a2:	f000 f9f7 	bl	8007c94 <__hi0bits>
 80078a6:	42b0      	cmp	r0, r6
 80078a8:	dbe7      	blt.n	800787a <__gethex+0x456>
 80078aa:	e7f0      	b.n	800788e <__gethex+0x46a>
 80078ac:	0800a108 	.word	0x0800a108

080078b0 <L_shift>:
 80078b0:	f1c2 0208 	rsb	r2, r2, #8
 80078b4:	0092      	lsls	r2, r2, #2
 80078b6:	b570      	push	{r4, r5, r6, lr}
 80078b8:	f1c2 0620 	rsb	r6, r2, #32
 80078bc:	6843      	ldr	r3, [r0, #4]
 80078be:	6804      	ldr	r4, [r0, #0]
 80078c0:	fa03 f506 	lsl.w	r5, r3, r6
 80078c4:	432c      	orrs	r4, r5
 80078c6:	40d3      	lsrs	r3, r2
 80078c8:	6004      	str	r4, [r0, #0]
 80078ca:	f840 3f04 	str.w	r3, [r0, #4]!
 80078ce:	4288      	cmp	r0, r1
 80078d0:	d3f4      	bcc.n	80078bc <L_shift+0xc>
 80078d2:	bd70      	pop	{r4, r5, r6, pc}

080078d4 <__match>:
 80078d4:	b530      	push	{r4, r5, lr}
 80078d6:	6803      	ldr	r3, [r0, #0]
 80078d8:	3301      	adds	r3, #1
 80078da:	f811 4b01 	ldrb.w	r4, [r1], #1
 80078de:	b914      	cbnz	r4, 80078e6 <__match+0x12>
 80078e0:	6003      	str	r3, [r0, #0]
 80078e2:	2001      	movs	r0, #1
 80078e4:	bd30      	pop	{r4, r5, pc}
 80078e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80078ea:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80078ee:	2d19      	cmp	r5, #25
 80078f0:	bf98      	it	ls
 80078f2:	3220      	addls	r2, #32
 80078f4:	42a2      	cmp	r2, r4
 80078f6:	d0f0      	beq.n	80078da <__match+0x6>
 80078f8:	2000      	movs	r0, #0
 80078fa:	e7f3      	b.n	80078e4 <__match+0x10>

080078fc <__hexnan>:
 80078fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007900:	680b      	ldr	r3, [r1, #0]
 8007902:	115e      	asrs	r6, r3, #5
 8007904:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8007908:	f013 031f 	ands.w	r3, r3, #31
 800790c:	b087      	sub	sp, #28
 800790e:	bf18      	it	ne
 8007910:	3604      	addne	r6, #4
 8007912:	2500      	movs	r5, #0
 8007914:	1f37      	subs	r7, r6, #4
 8007916:	4690      	mov	r8, r2
 8007918:	6802      	ldr	r2, [r0, #0]
 800791a:	9301      	str	r3, [sp, #4]
 800791c:	4682      	mov	sl, r0
 800791e:	f846 5c04 	str.w	r5, [r6, #-4]
 8007922:	46b9      	mov	r9, r7
 8007924:	463c      	mov	r4, r7
 8007926:	9502      	str	r5, [sp, #8]
 8007928:	46ab      	mov	fp, r5
 800792a:	7851      	ldrb	r1, [r2, #1]
 800792c:	1c53      	adds	r3, r2, #1
 800792e:	9303      	str	r3, [sp, #12]
 8007930:	b341      	cbz	r1, 8007984 <__hexnan+0x88>
 8007932:	4608      	mov	r0, r1
 8007934:	9205      	str	r2, [sp, #20]
 8007936:	9104      	str	r1, [sp, #16]
 8007938:	f7ff fd5e 	bl	80073f8 <__hexdig_fun>
 800793c:	2800      	cmp	r0, #0
 800793e:	d14f      	bne.n	80079e0 <__hexnan+0xe4>
 8007940:	9904      	ldr	r1, [sp, #16]
 8007942:	9a05      	ldr	r2, [sp, #20]
 8007944:	2920      	cmp	r1, #32
 8007946:	d818      	bhi.n	800797a <__hexnan+0x7e>
 8007948:	9b02      	ldr	r3, [sp, #8]
 800794a:	459b      	cmp	fp, r3
 800794c:	dd13      	ble.n	8007976 <__hexnan+0x7a>
 800794e:	454c      	cmp	r4, r9
 8007950:	d206      	bcs.n	8007960 <__hexnan+0x64>
 8007952:	2d07      	cmp	r5, #7
 8007954:	dc04      	bgt.n	8007960 <__hexnan+0x64>
 8007956:	462a      	mov	r2, r5
 8007958:	4649      	mov	r1, r9
 800795a:	4620      	mov	r0, r4
 800795c:	f7ff ffa8 	bl	80078b0 <L_shift>
 8007960:	4544      	cmp	r4, r8
 8007962:	d950      	bls.n	8007a06 <__hexnan+0x10a>
 8007964:	2300      	movs	r3, #0
 8007966:	f1a4 0904 	sub.w	r9, r4, #4
 800796a:	f844 3c04 	str.w	r3, [r4, #-4]
 800796e:	f8cd b008 	str.w	fp, [sp, #8]
 8007972:	464c      	mov	r4, r9
 8007974:	461d      	mov	r5, r3
 8007976:	9a03      	ldr	r2, [sp, #12]
 8007978:	e7d7      	b.n	800792a <__hexnan+0x2e>
 800797a:	2929      	cmp	r1, #41	; 0x29
 800797c:	d156      	bne.n	8007a2c <__hexnan+0x130>
 800797e:	3202      	adds	r2, #2
 8007980:	f8ca 2000 	str.w	r2, [sl]
 8007984:	f1bb 0f00 	cmp.w	fp, #0
 8007988:	d050      	beq.n	8007a2c <__hexnan+0x130>
 800798a:	454c      	cmp	r4, r9
 800798c:	d206      	bcs.n	800799c <__hexnan+0xa0>
 800798e:	2d07      	cmp	r5, #7
 8007990:	dc04      	bgt.n	800799c <__hexnan+0xa0>
 8007992:	462a      	mov	r2, r5
 8007994:	4649      	mov	r1, r9
 8007996:	4620      	mov	r0, r4
 8007998:	f7ff ff8a 	bl	80078b0 <L_shift>
 800799c:	4544      	cmp	r4, r8
 800799e:	d934      	bls.n	8007a0a <__hexnan+0x10e>
 80079a0:	f1a8 0204 	sub.w	r2, r8, #4
 80079a4:	4623      	mov	r3, r4
 80079a6:	f853 1b04 	ldr.w	r1, [r3], #4
 80079aa:	f842 1f04 	str.w	r1, [r2, #4]!
 80079ae:	429f      	cmp	r7, r3
 80079b0:	d2f9      	bcs.n	80079a6 <__hexnan+0xaa>
 80079b2:	1b3b      	subs	r3, r7, r4
 80079b4:	f023 0303 	bic.w	r3, r3, #3
 80079b8:	3304      	adds	r3, #4
 80079ba:	3401      	adds	r4, #1
 80079bc:	3e03      	subs	r6, #3
 80079be:	42b4      	cmp	r4, r6
 80079c0:	bf88      	it	hi
 80079c2:	2304      	movhi	r3, #4
 80079c4:	4443      	add	r3, r8
 80079c6:	2200      	movs	r2, #0
 80079c8:	f843 2b04 	str.w	r2, [r3], #4
 80079cc:	429f      	cmp	r7, r3
 80079ce:	d2fb      	bcs.n	80079c8 <__hexnan+0xcc>
 80079d0:	683b      	ldr	r3, [r7, #0]
 80079d2:	b91b      	cbnz	r3, 80079dc <__hexnan+0xe0>
 80079d4:	4547      	cmp	r7, r8
 80079d6:	d127      	bne.n	8007a28 <__hexnan+0x12c>
 80079d8:	2301      	movs	r3, #1
 80079da:	603b      	str	r3, [r7, #0]
 80079dc:	2005      	movs	r0, #5
 80079de:	e026      	b.n	8007a2e <__hexnan+0x132>
 80079e0:	3501      	adds	r5, #1
 80079e2:	2d08      	cmp	r5, #8
 80079e4:	f10b 0b01 	add.w	fp, fp, #1
 80079e8:	dd06      	ble.n	80079f8 <__hexnan+0xfc>
 80079ea:	4544      	cmp	r4, r8
 80079ec:	d9c3      	bls.n	8007976 <__hexnan+0x7a>
 80079ee:	2300      	movs	r3, #0
 80079f0:	f844 3c04 	str.w	r3, [r4, #-4]
 80079f4:	2501      	movs	r5, #1
 80079f6:	3c04      	subs	r4, #4
 80079f8:	6822      	ldr	r2, [r4, #0]
 80079fa:	f000 000f 	and.w	r0, r0, #15
 80079fe:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8007a02:	6022      	str	r2, [r4, #0]
 8007a04:	e7b7      	b.n	8007976 <__hexnan+0x7a>
 8007a06:	2508      	movs	r5, #8
 8007a08:	e7b5      	b.n	8007976 <__hexnan+0x7a>
 8007a0a:	9b01      	ldr	r3, [sp, #4]
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d0df      	beq.n	80079d0 <__hexnan+0xd4>
 8007a10:	f04f 32ff 	mov.w	r2, #4294967295
 8007a14:	f1c3 0320 	rsb	r3, r3, #32
 8007a18:	fa22 f303 	lsr.w	r3, r2, r3
 8007a1c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8007a20:	401a      	ands	r2, r3
 8007a22:	f846 2c04 	str.w	r2, [r6, #-4]
 8007a26:	e7d3      	b.n	80079d0 <__hexnan+0xd4>
 8007a28:	3f04      	subs	r7, #4
 8007a2a:	e7d1      	b.n	80079d0 <__hexnan+0xd4>
 8007a2c:	2004      	movs	r0, #4
 8007a2e:	b007      	add	sp, #28
 8007a30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007a34 <_localeconv_r>:
 8007a34:	4800      	ldr	r0, [pc, #0]	; (8007a38 <_localeconv_r+0x4>)
 8007a36:	4770      	bx	lr
 8007a38:	20000174 	.word	0x20000174

08007a3c <_lseek_r>:
 8007a3c:	b538      	push	{r3, r4, r5, lr}
 8007a3e:	4d07      	ldr	r5, [pc, #28]	; (8007a5c <_lseek_r+0x20>)
 8007a40:	4604      	mov	r4, r0
 8007a42:	4608      	mov	r0, r1
 8007a44:	4611      	mov	r1, r2
 8007a46:	2200      	movs	r2, #0
 8007a48:	602a      	str	r2, [r5, #0]
 8007a4a:	461a      	mov	r2, r3
 8007a4c:	f7fa fa89 	bl	8001f62 <_lseek>
 8007a50:	1c43      	adds	r3, r0, #1
 8007a52:	d102      	bne.n	8007a5a <_lseek_r+0x1e>
 8007a54:	682b      	ldr	r3, [r5, #0]
 8007a56:	b103      	cbz	r3, 8007a5a <_lseek_r+0x1e>
 8007a58:	6023      	str	r3, [r4, #0]
 8007a5a:	bd38      	pop	{r3, r4, r5, pc}
 8007a5c:	20000c50 	.word	0x20000c50

08007a60 <malloc>:
 8007a60:	4b02      	ldr	r3, [pc, #8]	; (8007a6c <malloc+0xc>)
 8007a62:	4601      	mov	r1, r0
 8007a64:	6818      	ldr	r0, [r3, #0]
 8007a66:	f000 bd67 	b.w	8008538 <_malloc_r>
 8007a6a:	bf00      	nop
 8007a6c:	2000001c 	.word	0x2000001c

08007a70 <__ascii_mbtowc>:
 8007a70:	b082      	sub	sp, #8
 8007a72:	b901      	cbnz	r1, 8007a76 <__ascii_mbtowc+0x6>
 8007a74:	a901      	add	r1, sp, #4
 8007a76:	b142      	cbz	r2, 8007a8a <__ascii_mbtowc+0x1a>
 8007a78:	b14b      	cbz	r3, 8007a8e <__ascii_mbtowc+0x1e>
 8007a7a:	7813      	ldrb	r3, [r2, #0]
 8007a7c:	600b      	str	r3, [r1, #0]
 8007a7e:	7812      	ldrb	r2, [r2, #0]
 8007a80:	1e10      	subs	r0, r2, #0
 8007a82:	bf18      	it	ne
 8007a84:	2001      	movne	r0, #1
 8007a86:	b002      	add	sp, #8
 8007a88:	4770      	bx	lr
 8007a8a:	4610      	mov	r0, r2
 8007a8c:	e7fb      	b.n	8007a86 <__ascii_mbtowc+0x16>
 8007a8e:	f06f 0001 	mvn.w	r0, #1
 8007a92:	e7f8      	b.n	8007a86 <__ascii_mbtowc+0x16>

08007a94 <memcpy>:
 8007a94:	440a      	add	r2, r1
 8007a96:	4291      	cmp	r1, r2
 8007a98:	f100 33ff 	add.w	r3, r0, #4294967295
 8007a9c:	d100      	bne.n	8007aa0 <memcpy+0xc>
 8007a9e:	4770      	bx	lr
 8007aa0:	b510      	push	{r4, lr}
 8007aa2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007aa6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007aaa:	4291      	cmp	r1, r2
 8007aac:	d1f9      	bne.n	8007aa2 <memcpy+0xe>
 8007aae:	bd10      	pop	{r4, pc}

08007ab0 <_Balloc>:
 8007ab0:	b570      	push	{r4, r5, r6, lr}
 8007ab2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007ab4:	4604      	mov	r4, r0
 8007ab6:	460d      	mov	r5, r1
 8007ab8:	b976      	cbnz	r6, 8007ad8 <_Balloc+0x28>
 8007aba:	2010      	movs	r0, #16
 8007abc:	f7ff ffd0 	bl	8007a60 <malloc>
 8007ac0:	4602      	mov	r2, r0
 8007ac2:	6260      	str	r0, [r4, #36]	; 0x24
 8007ac4:	b920      	cbnz	r0, 8007ad0 <_Balloc+0x20>
 8007ac6:	4b18      	ldr	r3, [pc, #96]	; (8007b28 <_Balloc+0x78>)
 8007ac8:	4818      	ldr	r0, [pc, #96]	; (8007b2c <_Balloc+0x7c>)
 8007aca:	2166      	movs	r1, #102	; 0x66
 8007acc:	f001 fb5c 	bl	8009188 <__assert_func>
 8007ad0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007ad4:	6006      	str	r6, [r0, #0]
 8007ad6:	60c6      	str	r6, [r0, #12]
 8007ad8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8007ada:	68f3      	ldr	r3, [r6, #12]
 8007adc:	b183      	cbz	r3, 8007b00 <_Balloc+0x50>
 8007ade:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007ae0:	68db      	ldr	r3, [r3, #12]
 8007ae2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007ae6:	b9b8      	cbnz	r0, 8007b18 <_Balloc+0x68>
 8007ae8:	2101      	movs	r1, #1
 8007aea:	fa01 f605 	lsl.w	r6, r1, r5
 8007aee:	1d72      	adds	r2, r6, #5
 8007af0:	0092      	lsls	r2, r2, #2
 8007af2:	4620      	mov	r0, r4
 8007af4:	f000 fc9d 	bl	8008432 <_calloc_r>
 8007af8:	b160      	cbz	r0, 8007b14 <_Balloc+0x64>
 8007afa:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007afe:	e00e      	b.n	8007b1e <_Balloc+0x6e>
 8007b00:	2221      	movs	r2, #33	; 0x21
 8007b02:	2104      	movs	r1, #4
 8007b04:	4620      	mov	r0, r4
 8007b06:	f000 fc94 	bl	8008432 <_calloc_r>
 8007b0a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007b0c:	60f0      	str	r0, [r6, #12]
 8007b0e:	68db      	ldr	r3, [r3, #12]
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d1e4      	bne.n	8007ade <_Balloc+0x2e>
 8007b14:	2000      	movs	r0, #0
 8007b16:	bd70      	pop	{r4, r5, r6, pc}
 8007b18:	6802      	ldr	r2, [r0, #0]
 8007b1a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007b1e:	2300      	movs	r3, #0
 8007b20:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007b24:	e7f7      	b.n	8007b16 <_Balloc+0x66>
 8007b26:	bf00      	nop
 8007b28:	0800a096 	.word	0x0800a096
 8007b2c:	0800a194 	.word	0x0800a194

08007b30 <_Bfree>:
 8007b30:	b570      	push	{r4, r5, r6, lr}
 8007b32:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007b34:	4605      	mov	r5, r0
 8007b36:	460c      	mov	r4, r1
 8007b38:	b976      	cbnz	r6, 8007b58 <_Bfree+0x28>
 8007b3a:	2010      	movs	r0, #16
 8007b3c:	f7ff ff90 	bl	8007a60 <malloc>
 8007b40:	4602      	mov	r2, r0
 8007b42:	6268      	str	r0, [r5, #36]	; 0x24
 8007b44:	b920      	cbnz	r0, 8007b50 <_Bfree+0x20>
 8007b46:	4b09      	ldr	r3, [pc, #36]	; (8007b6c <_Bfree+0x3c>)
 8007b48:	4809      	ldr	r0, [pc, #36]	; (8007b70 <_Bfree+0x40>)
 8007b4a:	218a      	movs	r1, #138	; 0x8a
 8007b4c:	f001 fb1c 	bl	8009188 <__assert_func>
 8007b50:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007b54:	6006      	str	r6, [r0, #0]
 8007b56:	60c6      	str	r6, [r0, #12]
 8007b58:	b13c      	cbz	r4, 8007b6a <_Bfree+0x3a>
 8007b5a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007b5c:	6862      	ldr	r2, [r4, #4]
 8007b5e:	68db      	ldr	r3, [r3, #12]
 8007b60:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007b64:	6021      	str	r1, [r4, #0]
 8007b66:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007b6a:	bd70      	pop	{r4, r5, r6, pc}
 8007b6c:	0800a096 	.word	0x0800a096
 8007b70:	0800a194 	.word	0x0800a194

08007b74 <__multadd>:
 8007b74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007b78:	690d      	ldr	r5, [r1, #16]
 8007b7a:	4607      	mov	r7, r0
 8007b7c:	460c      	mov	r4, r1
 8007b7e:	461e      	mov	r6, r3
 8007b80:	f101 0c14 	add.w	ip, r1, #20
 8007b84:	2000      	movs	r0, #0
 8007b86:	f8dc 3000 	ldr.w	r3, [ip]
 8007b8a:	b299      	uxth	r1, r3
 8007b8c:	fb02 6101 	mla	r1, r2, r1, r6
 8007b90:	0c1e      	lsrs	r6, r3, #16
 8007b92:	0c0b      	lsrs	r3, r1, #16
 8007b94:	fb02 3306 	mla	r3, r2, r6, r3
 8007b98:	b289      	uxth	r1, r1
 8007b9a:	3001      	adds	r0, #1
 8007b9c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007ba0:	4285      	cmp	r5, r0
 8007ba2:	f84c 1b04 	str.w	r1, [ip], #4
 8007ba6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007baa:	dcec      	bgt.n	8007b86 <__multadd+0x12>
 8007bac:	b30e      	cbz	r6, 8007bf2 <__multadd+0x7e>
 8007bae:	68a3      	ldr	r3, [r4, #8]
 8007bb0:	42ab      	cmp	r3, r5
 8007bb2:	dc19      	bgt.n	8007be8 <__multadd+0x74>
 8007bb4:	6861      	ldr	r1, [r4, #4]
 8007bb6:	4638      	mov	r0, r7
 8007bb8:	3101      	adds	r1, #1
 8007bba:	f7ff ff79 	bl	8007ab0 <_Balloc>
 8007bbe:	4680      	mov	r8, r0
 8007bc0:	b928      	cbnz	r0, 8007bce <__multadd+0x5a>
 8007bc2:	4602      	mov	r2, r0
 8007bc4:	4b0c      	ldr	r3, [pc, #48]	; (8007bf8 <__multadd+0x84>)
 8007bc6:	480d      	ldr	r0, [pc, #52]	; (8007bfc <__multadd+0x88>)
 8007bc8:	21b5      	movs	r1, #181	; 0xb5
 8007bca:	f001 fadd 	bl	8009188 <__assert_func>
 8007bce:	6922      	ldr	r2, [r4, #16]
 8007bd0:	3202      	adds	r2, #2
 8007bd2:	f104 010c 	add.w	r1, r4, #12
 8007bd6:	0092      	lsls	r2, r2, #2
 8007bd8:	300c      	adds	r0, #12
 8007bda:	f7ff ff5b 	bl	8007a94 <memcpy>
 8007bde:	4621      	mov	r1, r4
 8007be0:	4638      	mov	r0, r7
 8007be2:	f7ff ffa5 	bl	8007b30 <_Bfree>
 8007be6:	4644      	mov	r4, r8
 8007be8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007bec:	3501      	adds	r5, #1
 8007bee:	615e      	str	r6, [r3, #20]
 8007bf0:	6125      	str	r5, [r4, #16]
 8007bf2:	4620      	mov	r0, r4
 8007bf4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007bf8:	0800a108 	.word	0x0800a108
 8007bfc:	0800a194 	.word	0x0800a194

08007c00 <__s2b>:
 8007c00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007c04:	460c      	mov	r4, r1
 8007c06:	4615      	mov	r5, r2
 8007c08:	461f      	mov	r7, r3
 8007c0a:	2209      	movs	r2, #9
 8007c0c:	3308      	adds	r3, #8
 8007c0e:	4606      	mov	r6, r0
 8007c10:	fb93 f3f2 	sdiv	r3, r3, r2
 8007c14:	2100      	movs	r1, #0
 8007c16:	2201      	movs	r2, #1
 8007c18:	429a      	cmp	r2, r3
 8007c1a:	db09      	blt.n	8007c30 <__s2b+0x30>
 8007c1c:	4630      	mov	r0, r6
 8007c1e:	f7ff ff47 	bl	8007ab0 <_Balloc>
 8007c22:	b940      	cbnz	r0, 8007c36 <__s2b+0x36>
 8007c24:	4602      	mov	r2, r0
 8007c26:	4b19      	ldr	r3, [pc, #100]	; (8007c8c <__s2b+0x8c>)
 8007c28:	4819      	ldr	r0, [pc, #100]	; (8007c90 <__s2b+0x90>)
 8007c2a:	21ce      	movs	r1, #206	; 0xce
 8007c2c:	f001 faac 	bl	8009188 <__assert_func>
 8007c30:	0052      	lsls	r2, r2, #1
 8007c32:	3101      	adds	r1, #1
 8007c34:	e7f0      	b.n	8007c18 <__s2b+0x18>
 8007c36:	9b08      	ldr	r3, [sp, #32]
 8007c38:	6143      	str	r3, [r0, #20]
 8007c3a:	2d09      	cmp	r5, #9
 8007c3c:	f04f 0301 	mov.w	r3, #1
 8007c40:	6103      	str	r3, [r0, #16]
 8007c42:	dd16      	ble.n	8007c72 <__s2b+0x72>
 8007c44:	f104 0909 	add.w	r9, r4, #9
 8007c48:	46c8      	mov	r8, r9
 8007c4a:	442c      	add	r4, r5
 8007c4c:	f818 3b01 	ldrb.w	r3, [r8], #1
 8007c50:	4601      	mov	r1, r0
 8007c52:	3b30      	subs	r3, #48	; 0x30
 8007c54:	220a      	movs	r2, #10
 8007c56:	4630      	mov	r0, r6
 8007c58:	f7ff ff8c 	bl	8007b74 <__multadd>
 8007c5c:	45a0      	cmp	r8, r4
 8007c5e:	d1f5      	bne.n	8007c4c <__s2b+0x4c>
 8007c60:	f1a5 0408 	sub.w	r4, r5, #8
 8007c64:	444c      	add	r4, r9
 8007c66:	1b2d      	subs	r5, r5, r4
 8007c68:	1963      	adds	r3, r4, r5
 8007c6a:	42bb      	cmp	r3, r7
 8007c6c:	db04      	blt.n	8007c78 <__s2b+0x78>
 8007c6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007c72:	340a      	adds	r4, #10
 8007c74:	2509      	movs	r5, #9
 8007c76:	e7f6      	b.n	8007c66 <__s2b+0x66>
 8007c78:	f814 3b01 	ldrb.w	r3, [r4], #1
 8007c7c:	4601      	mov	r1, r0
 8007c7e:	3b30      	subs	r3, #48	; 0x30
 8007c80:	220a      	movs	r2, #10
 8007c82:	4630      	mov	r0, r6
 8007c84:	f7ff ff76 	bl	8007b74 <__multadd>
 8007c88:	e7ee      	b.n	8007c68 <__s2b+0x68>
 8007c8a:	bf00      	nop
 8007c8c:	0800a108 	.word	0x0800a108
 8007c90:	0800a194 	.word	0x0800a194

08007c94 <__hi0bits>:
 8007c94:	0c03      	lsrs	r3, r0, #16
 8007c96:	041b      	lsls	r3, r3, #16
 8007c98:	b9d3      	cbnz	r3, 8007cd0 <__hi0bits+0x3c>
 8007c9a:	0400      	lsls	r0, r0, #16
 8007c9c:	2310      	movs	r3, #16
 8007c9e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8007ca2:	bf04      	itt	eq
 8007ca4:	0200      	lsleq	r0, r0, #8
 8007ca6:	3308      	addeq	r3, #8
 8007ca8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8007cac:	bf04      	itt	eq
 8007cae:	0100      	lsleq	r0, r0, #4
 8007cb0:	3304      	addeq	r3, #4
 8007cb2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8007cb6:	bf04      	itt	eq
 8007cb8:	0080      	lsleq	r0, r0, #2
 8007cba:	3302      	addeq	r3, #2
 8007cbc:	2800      	cmp	r0, #0
 8007cbe:	db05      	blt.n	8007ccc <__hi0bits+0x38>
 8007cc0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8007cc4:	f103 0301 	add.w	r3, r3, #1
 8007cc8:	bf08      	it	eq
 8007cca:	2320      	moveq	r3, #32
 8007ccc:	4618      	mov	r0, r3
 8007cce:	4770      	bx	lr
 8007cd0:	2300      	movs	r3, #0
 8007cd2:	e7e4      	b.n	8007c9e <__hi0bits+0xa>

08007cd4 <__lo0bits>:
 8007cd4:	6803      	ldr	r3, [r0, #0]
 8007cd6:	f013 0207 	ands.w	r2, r3, #7
 8007cda:	4601      	mov	r1, r0
 8007cdc:	d00b      	beq.n	8007cf6 <__lo0bits+0x22>
 8007cde:	07da      	lsls	r2, r3, #31
 8007ce0:	d423      	bmi.n	8007d2a <__lo0bits+0x56>
 8007ce2:	0798      	lsls	r0, r3, #30
 8007ce4:	bf49      	itett	mi
 8007ce6:	085b      	lsrmi	r3, r3, #1
 8007ce8:	089b      	lsrpl	r3, r3, #2
 8007cea:	2001      	movmi	r0, #1
 8007cec:	600b      	strmi	r3, [r1, #0]
 8007cee:	bf5c      	itt	pl
 8007cf0:	600b      	strpl	r3, [r1, #0]
 8007cf2:	2002      	movpl	r0, #2
 8007cf4:	4770      	bx	lr
 8007cf6:	b298      	uxth	r0, r3
 8007cf8:	b9a8      	cbnz	r0, 8007d26 <__lo0bits+0x52>
 8007cfa:	0c1b      	lsrs	r3, r3, #16
 8007cfc:	2010      	movs	r0, #16
 8007cfe:	b2da      	uxtb	r2, r3
 8007d00:	b90a      	cbnz	r2, 8007d06 <__lo0bits+0x32>
 8007d02:	3008      	adds	r0, #8
 8007d04:	0a1b      	lsrs	r3, r3, #8
 8007d06:	071a      	lsls	r2, r3, #28
 8007d08:	bf04      	itt	eq
 8007d0a:	091b      	lsreq	r3, r3, #4
 8007d0c:	3004      	addeq	r0, #4
 8007d0e:	079a      	lsls	r2, r3, #30
 8007d10:	bf04      	itt	eq
 8007d12:	089b      	lsreq	r3, r3, #2
 8007d14:	3002      	addeq	r0, #2
 8007d16:	07da      	lsls	r2, r3, #31
 8007d18:	d403      	bmi.n	8007d22 <__lo0bits+0x4e>
 8007d1a:	085b      	lsrs	r3, r3, #1
 8007d1c:	f100 0001 	add.w	r0, r0, #1
 8007d20:	d005      	beq.n	8007d2e <__lo0bits+0x5a>
 8007d22:	600b      	str	r3, [r1, #0]
 8007d24:	4770      	bx	lr
 8007d26:	4610      	mov	r0, r2
 8007d28:	e7e9      	b.n	8007cfe <__lo0bits+0x2a>
 8007d2a:	2000      	movs	r0, #0
 8007d2c:	4770      	bx	lr
 8007d2e:	2020      	movs	r0, #32
 8007d30:	4770      	bx	lr
	...

08007d34 <__i2b>:
 8007d34:	b510      	push	{r4, lr}
 8007d36:	460c      	mov	r4, r1
 8007d38:	2101      	movs	r1, #1
 8007d3a:	f7ff feb9 	bl	8007ab0 <_Balloc>
 8007d3e:	4602      	mov	r2, r0
 8007d40:	b928      	cbnz	r0, 8007d4e <__i2b+0x1a>
 8007d42:	4b05      	ldr	r3, [pc, #20]	; (8007d58 <__i2b+0x24>)
 8007d44:	4805      	ldr	r0, [pc, #20]	; (8007d5c <__i2b+0x28>)
 8007d46:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8007d4a:	f001 fa1d 	bl	8009188 <__assert_func>
 8007d4e:	2301      	movs	r3, #1
 8007d50:	6144      	str	r4, [r0, #20]
 8007d52:	6103      	str	r3, [r0, #16]
 8007d54:	bd10      	pop	{r4, pc}
 8007d56:	bf00      	nop
 8007d58:	0800a108 	.word	0x0800a108
 8007d5c:	0800a194 	.word	0x0800a194

08007d60 <__multiply>:
 8007d60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d64:	4691      	mov	r9, r2
 8007d66:	690a      	ldr	r2, [r1, #16]
 8007d68:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007d6c:	429a      	cmp	r2, r3
 8007d6e:	bfb8      	it	lt
 8007d70:	460b      	movlt	r3, r1
 8007d72:	460c      	mov	r4, r1
 8007d74:	bfbc      	itt	lt
 8007d76:	464c      	movlt	r4, r9
 8007d78:	4699      	movlt	r9, r3
 8007d7a:	6927      	ldr	r7, [r4, #16]
 8007d7c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8007d80:	68a3      	ldr	r3, [r4, #8]
 8007d82:	6861      	ldr	r1, [r4, #4]
 8007d84:	eb07 060a 	add.w	r6, r7, sl
 8007d88:	42b3      	cmp	r3, r6
 8007d8a:	b085      	sub	sp, #20
 8007d8c:	bfb8      	it	lt
 8007d8e:	3101      	addlt	r1, #1
 8007d90:	f7ff fe8e 	bl	8007ab0 <_Balloc>
 8007d94:	b930      	cbnz	r0, 8007da4 <__multiply+0x44>
 8007d96:	4602      	mov	r2, r0
 8007d98:	4b44      	ldr	r3, [pc, #272]	; (8007eac <__multiply+0x14c>)
 8007d9a:	4845      	ldr	r0, [pc, #276]	; (8007eb0 <__multiply+0x150>)
 8007d9c:	f240 115d 	movw	r1, #349	; 0x15d
 8007da0:	f001 f9f2 	bl	8009188 <__assert_func>
 8007da4:	f100 0514 	add.w	r5, r0, #20
 8007da8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007dac:	462b      	mov	r3, r5
 8007dae:	2200      	movs	r2, #0
 8007db0:	4543      	cmp	r3, r8
 8007db2:	d321      	bcc.n	8007df8 <__multiply+0x98>
 8007db4:	f104 0314 	add.w	r3, r4, #20
 8007db8:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8007dbc:	f109 0314 	add.w	r3, r9, #20
 8007dc0:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8007dc4:	9202      	str	r2, [sp, #8]
 8007dc6:	1b3a      	subs	r2, r7, r4
 8007dc8:	3a15      	subs	r2, #21
 8007dca:	f022 0203 	bic.w	r2, r2, #3
 8007dce:	3204      	adds	r2, #4
 8007dd0:	f104 0115 	add.w	r1, r4, #21
 8007dd4:	428f      	cmp	r7, r1
 8007dd6:	bf38      	it	cc
 8007dd8:	2204      	movcc	r2, #4
 8007dda:	9201      	str	r2, [sp, #4]
 8007ddc:	9a02      	ldr	r2, [sp, #8]
 8007dde:	9303      	str	r3, [sp, #12]
 8007de0:	429a      	cmp	r2, r3
 8007de2:	d80c      	bhi.n	8007dfe <__multiply+0x9e>
 8007de4:	2e00      	cmp	r6, #0
 8007de6:	dd03      	ble.n	8007df0 <__multiply+0x90>
 8007de8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d05a      	beq.n	8007ea6 <__multiply+0x146>
 8007df0:	6106      	str	r6, [r0, #16]
 8007df2:	b005      	add	sp, #20
 8007df4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007df8:	f843 2b04 	str.w	r2, [r3], #4
 8007dfc:	e7d8      	b.n	8007db0 <__multiply+0x50>
 8007dfe:	f8b3 a000 	ldrh.w	sl, [r3]
 8007e02:	f1ba 0f00 	cmp.w	sl, #0
 8007e06:	d024      	beq.n	8007e52 <__multiply+0xf2>
 8007e08:	f104 0e14 	add.w	lr, r4, #20
 8007e0c:	46a9      	mov	r9, r5
 8007e0e:	f04f 0c00 	mov.w	ip, #0
 8007e12:	f85e 2b04 	ldr.w	r2, [lr], #4
 8007e16:	f8d9 1000 	ldr.w	r1, [r9]
 8007e1a:	fa1f fb82 	uxth.w	fp, r2
 8007e1e:	b289      	uxth	r1, r1
 8007e20:	fb0a 110b 	mla	r1, sl, fp, r1
 8007e24:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8007e28:	f8d9 2000 	ldr.w	r2, [r9]
 8007e2c:	4461      	add	r1, ip
 8007e2e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007e32:	fb0a c20b 	mla	r2, sl, fp, ip
 8007e36:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8007e3a:	b289      	uxth	r1, r1
 8007e3c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007e40:	4577      	cmp	r7, lr
 8007e42:	f849 1b04 	str.w	r1, [r9], #4
 8007e46:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007e4a:	d8e2      	bhi.n	8007e12 <__multiply+0xb2>
 8007e4c:	9a01      	ldr	r2, [sp, #4]
 8007e4e:	f845 c002 	str.w	ip, [r5, r2]
 8007e52:	9a03      	ldr	r2, [sp, #12]
 8007e54:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007e58:	3304      	adds	r3, #4
 8007e5a:	f1b9 0f00 	cmp.w	r9, #0
 8007e5e:	d020      	beq.n	8007ea2 <__multiply+0x142>
 8007e60:	6829      	ldr	r1, [r5, #0]
 8007e62:	f104 0c14 	add.w	ip, r4, #20
 8007e66:	46ae      	mov	lr, r5
 8007e68:	f04f 0a00 	mov.w	sl, #0
 8007e6c:	f8bc b000 	ldrh.w	fp, [ip]
 8007e70:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8007e74:	fb09 220b 	mla	r2, r9, fp, r2
 8007e78:	4492      	add	sl, r2
 8007e7a:	b289      	uxth	r1, r1
 8007e7c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8007e80:	f84e 1b04 	str.w	r1, [lr], #4
 8007e84:	f85c 2b04 	ldr.w	r2, [ip], #4
 8007e88:	f8be 1000 	ldrh.w	r1, [lr]
 8007e8c:	0c12      	lsrs	r2, r2, #16
 8007e8e:	fb09 1102 	mla	r1, r9, r2, r1
 8007e92:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8007e96:	4567      	cmp	r7, ip
 8007e98:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007e9c:	d8e6      	bhi.n	8007e6c <__multiply+0x10c>
 8007e9e:	9a01      	ldr	r2, [sp, #4]
 8007ea0:	50a9      	str	r1, [r5, r2]
 8007ea2:	3504      	adds	r5, #4
 8007ea4:	e79a      	b.n	8007ddc <__multiply+0x7c>
 8007ea6:	3e01      	subs	r6, #1
 8007ea8:	e79c      	b.n	8007de4 <__multiply+0x84>
 8007eaa:	bf00      	nop
 8007eac:	0800a108 	.word	0x0800a108
 8007eb0:	0800a194 	.word	0x0800a194

08007eb4 <__pow5mult>:
 8007eb4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007eb8:	4615      	mov	r5, r2
 8007eba:	f012 0203 	ands.w	r2, r2, #3
 8007ebe:	4606      	mov	r6, r0
 8007ec0:	460f      	mov	r7, r1
 8007ec2:	d007      	beq.n	8007ed4 <__pow5mult+0x20>
 8007ec4:	4c25      	ldr	r4, [pc, #148]	; (8007f5c <__pow5mult+0xa8>)
 8007ec6:	3a01      	subs	r2, #1
 8007ec8:	2300      	movs	r3, #0
 8007eca:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007ece:	f7ff fe51 	bl	8007b74 <__multadd>
 8007ed2:	4607      	mov	r7, r0
 8007ed4:	10ad      	asrs	r5, r5, #2
 8007ed6:	d03d      	beq.n	8007f54 <__pow5mult+0xa0>
 8007ed8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8007eda:	b97c      	cbnz	r4, 8007efc <__pow5mult+0x48>
 8007edc:	2010      	movs	r0, #16
 8007ede:	f7ff fdbf 	bl	8007a60 <malloc>
 8007ee2:	4602      	mov	r2, r0
 8007ee4:	6270      	str	r0, [r6, #36]	; 0x24
 8007ee6:	b928      	cbnz	r0, 8007ef4 <__pow5mult+0x40>
 8007ee8:	4b1d      	ldr	r3, [pc, #116]	; (8007f60 <__pow5mult+0xac>)
 8007eea:	481e      	ldr	r0, [pc, #120]	; (8007f64 <__pow5mult+0xb0>)
 8007eec:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8007ef0:	f001 f94a 	bl	8009188 <__assert_func>
 8007ef4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007ef8:	6004      	str	r4, [r0, #0]
 8007efa:	60c4      	str	r4, [r0, #12]
 8007efc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8007f00:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007f04:	b94c      	cbnz	r4, 8007f1a <__pow5mult+0x66>
 8007f06:	f240 2171 	movw	r1, #625	; 0x271
 8007f0a:	4630      	mov	r0, r6
 8007f0c:	f7ff ff12 	bl	8007d34 <__i2b>
 8007f10:	2300      	movs	r3, #0
 8007f12:	f8c8 0008 	str.w	r0, [r8, #8]
 8007f16:	4604      	mov	r4, r0
 8007f18:	6003      	str	r3, [r0, #0]
 8007f1a:	f04f 0900 	mov.w	r9, #0
 8007f1e:	07eb      	lsls	r3, r5, #31
 8007f20:	d50a      	bpl.n	8007f38 <__pow5mult+0x84>
 8007f22:	4639      	mov	r1, r7
 8007f24:	4622      	mov	r2, r4
 8007f26:	4630      	mov	r0, r6
 8007f28:	f7ff ff1a 	bl	8007d60 <__multiply>
 8007f2c:	4639      	mov	r1, r7
 8007f2e:	4680      	mov	r8, r0
 8007f30:	4630      	mov	r0, r6
 8007f32:	f7ff fdfd 	bl	8007b30 <_Bfree>
 8007f36:	4647      	mov	r7, r8
 8007f38:	106d      	asrs	r5, r5, #1
 8007f3a:	d00b      	beq.n	8007f54 <__pow5mult+0xa0>
 8007f3c:	6820      	ldr	r0, [r4, #0]
 8007f3e:	b938      	cbnz	r0, 8007f50 <__pow5mult+0x9c>
 8007f40:	4622      	mov	r2, r4
 8007f42:	4621      	mov	r1, r4
 8007f44:	4630      	mov	r0, r6
 8007f46:	f7ff ff0b 	bl	8007d60 <__multiply>
 8007f4a:	6020      	str	r0, [r4, #0]
 8007f4c:	f8c0 9000 	str.w	r9, [r0]
 8007f50:	4604      	mov	r4, r0
 8007f52:	e7e4      	b.n	8007f1e <__pow5mult+0x6a>
 8007f54:	4638      	mov	r0, r7
 8007f56:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007f5a:	bf00      	nop
 8007f5c:	0800a2e0 	.word	0x0800a2e0
 8007f60:	0800a096 	.word	0x0800a096
 8007f64:	0800a194 	.word	0x0800a194

08007f68 <__lshift>:
 8007f68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007f6c:	460c      	mov	r4, r1
 8007f6e:	6849      	ldr	r1, [r1, #4]
 8007f70:	6923      	ldr	r3, [r4, #16]
 8007f72:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007f76:	68a3      	ldr	r3, [r4, #8]
 8007f78:	4607      	mov	r7, r0
 8007f7a:	4691      	mov	r9, r2
 8007f7c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007f80:	f108 0601 	add.w	r6, r8, #1
 8007f84:	42b3      	cmp	r3, r6
 8007f86:	db0b      	blt.n	8007fa0 <__lshift+0x38>
 8007f88:	4638      	mov	r0, r7
 8007f8a:	f7ff fd91 	bl	8007ab0 <_Balloc>
 8007f8e:	4605      	mov	r5, r0
 8007f90:	b948      	cbnz	r0, 8007fa6 <__lshift+0x3e>
 8007f92:	4602      	mov	r2, r0
 8007f94:	4b2a      	ldr	r3, [pc, #168]	; (8008040 <__lshift+0xd8>)
 8007f96:	482b      	ldr	r0, [pc, #172]	; (8008044 <__lshift+0xdc>)
 8007f98:	f240 11d9 	movw	r1, #473	; 0x1d9
 8007f9c:	f001 f8f4 	bl	8009188 <__assert_func>
 8007fa0:	3101      	adds	r1, #1
 8007fa2:	005b      	lsls	r3, r3, #1
 8007fa4:	e7ee      	b.n	8007f84 <__lshift+0x1c>
 8007fa6:	2300      	movs	r3, #0
 8007fa8:	f100 0114 	add.w	r1, r0, #20
 8007fac:	f100 0210 	add.w	r2, r0, #16
 8007fb0:	4618      	mov	r0, r3
 8007fb2:	4553      	cmp	r3, sl
 8007fb4:	db37      	blt.n	8008026 <__lshift+0xbe>
 8007fb6:	6920      	ldr	r0, [r4, #16]
 8007fb8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007fbc:	f104 0314 	add.w	r3, r4, #20
 8007fc0:	f019 091f 	ands.w	r9, r9, #31
 8007fc4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007fc8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8007fcc:	d02f      	beq.n	800802e <__lshift+0xc6>
 8007fce:	f1c9 0e20 	rsb	lr, r9, #32
 8007fd2:	468a      	mov	sl, r1
 8007fd4:	f04f 0c00 	mov.w	ip, #0
 8007fd8:	681a      	ldr	r2, [r3, #0]
 8007fda:	fa02 f209 	lsl.w	r2, r2, r9
 8007fde:	ea42 020c 	orr.w	r2, r2, ip
 8007fe2:	f84a 2b04 	str.w	r2, [sl], #4
 8007fe6:	f853 2b04 	ldr.w	r2, [r3], #4
 8007fea:	4298      	cmp	r0, r3
 8007fec:	fa22 fc0e 	lsr.w	ip, r2, lr
 8007ff0:	d8f2      	bhi.n	8007fd8 <__lshift+0x70>
 8007ff2:	1b03      	subs	r3, r0, r4
 8007ff4:	3b15      	subs	r3, #21
 8007ff6:	f023 0303 	bic.w	r3, r3, #3
 8007ffa:	3304      	adds	r3, #4
 8007ffc:	f104 0215 	add.w	r2, r4, #21
 8008000:	4290      	cmp	r0, r2
 8008002:	bf38      	it	cc
 8008004:	2304      	movcc	r3, #4
 8008006:	f841 c003 	str.w	ip, [r1, r3]
 800800a:	f1bc 0f00 	cmp.w	ip, #0
 800800e:	d001      	beq.n	8008014 <__lshift+0xac>
 8008010:	f108 0602 	add.w	r6, r8, #2
 8008014:	3e01      	subs	r6, #1
 8008016:	4638      	mov	r0, r7
 8008018:	612e      	str	r6, [r5, #16]
 800801a:	4621      	mov	r1, r4
 800801c:	f7ff fd88 	bl	8007b30 <_Bfree>
 8008020:	4628      	mov	r0, r5
 8008022:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008026:	f842 0f04 	str.w	r0, [r2, #4]!
 800802a:	3301      	adds	r3, #1
 800802c:	e7c1      	b.n	8007fb2 <__lshift+0x4a>
 800802e:	3904      	subs	r1, #4
 8008030:	f853 2b04 	ldr.w	r2, [r3], #4
 8008034:	f841 2f04 	str.w	r2, [r1, #4]!
 8008038:	4298      	cmp	r0, r3
 800803a:	d8f9      	bhi.n	8008030 <__lshift+0xc8>
 800803c:	e7ea      	b.n	8008014 <__lshift+0xac>
 800803e:	bf00      	nop
 8008040:	0800a108 	.word	0x0800a108
 8008044:	0800a194 	.word	0x0800a194

08008048 <__mcmp>:
 8008048:	b530      	push	{r4, r5, lr}
 800804a:	6902      	ldr	r2, [r0, #16]
 800804c:	690c      	ldr	r4, [r1, #16]
 800804e:	1b12      	subs	r2, r2, r4
 8008050:	d10e      	bne.n	8008070 <__mcmp+0x28>
 8008052:	f100 0314 	add.w	r3, r0, #20
 8008056:	3114      	adds	r1, #20
 8008058:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800805c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8008060:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8008064:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8008068:	42a5      	cmp	r5, r4
 800806a:	d003      	beq.n	8008074 <__mcmp+0x2c>
 800806c:	d305      	bcc.n	800807a <__mcmp+0x32>
 800806e:	2201      	movs	r2, #1
 8008070:	4610      	mov	r0, r2
 8008072:	bd30      	pop	{r4, r5, pc}
 8008074:	4283      	cmp	r3, r0
 8008076:	d3f3      	bcc.n	8008060 <__mcmp+0x18>
 8008078:	e7fa      	b.n	8008070 <__mcmp+0x28>
 800807a:	f04f 32ff 	mov.w	r2, #4294967295
 800807e:	e7f7      	b.n	8008070 <__mcmp+0x28>

08008080 <__mdiff>:
 8008080:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008084:	460c      	mov	r4, r1
 8008086:	4606      	mov	r6, r0
 8008088:	4611      	mov	r1, r2
 800808a:	4620      	mov	r0, r4
 800808c:	4690      	mov	r8, r2
 800808e:	f7ff ffdb 	bl	8008048 <__mcmp>
 8008092:	1e05      	subs	r5, r0, #0
 8008094:	d110      	bne.n	80080b8 <__mdiff+0x38>
 8008096:	4629      	mov	r1, r5
 8008098:	4630      	mov	r0, r6
 800809a:	f7ff fd09 	bl	8007ab0 <_Balloc>
 800809e:	b930      	cbnz	r0, 80080ae <__mdiff+0x2e>
 80080a0:	4b3a      	ldr	r3, [pc, #232]	; (800818c <__mdiff+0x10c>)
 80080a2:	4602      	mov	r2, r0
 80080a4:	f240 2132 	movw	r1, #562	; 0x232
 80080a8:	4839      	ldr	r0, [pc, #228]	; (8008190 <__mdiff+0x110>)
 80080aa:	f001 f86d 	bl	8009188 <__assert_func>
 80080ae:	2301      	movs	r3, #1
 80080b0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80080b4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80080b8:	bfa4      	itt	ge
 80080ba:	4643      	movge	r3, r8
 80080bc:	46a0      	movge	r8, r4
 80080be:	4630      	mov	r0, r6
 80080c0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80080c4:	bfa6      	itte	ge
 80080c6:	461c      	movge	r4, r3
 80080c8:	2500      	movge	r5, #0
 80080ca:	2501      	movlt	r5, #1
 80080cc:	f7ff fcf0 	bl	8007ab0 <_Balloc>
 80080d0:	b920      	cbnz	r0, 80080dc <__mdiff+0x5c>
 80080d2:	4b2e      	ldr	r3, [pc, #184]	; (800818c <__mdiff+0x10c>)
 80080d4:	4602      	mov	r2, r0
 80080d6:	f44f 7110 	mov.w	r1, #576	; 0x240
 80080da:	e7e5      	b.n	80080a8 <__mdiff+0x28>
 80080dc:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80080e0:	6926      	ldr	r6, [r4, #16]
 80080e2:	60c5      	str	r5, [r0, #12]
 80080e4:	f104 0914 	add.w	r9, r4, #20
 80080e8:	f108 0514 	add.w	r5, r8, #20
 80080ec:	f100 0e14 	add.w	lr, r0, #20
 80080f0:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80080f4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80080f8:	f108 0210 	add.w	r2, r8, #16
 80080fc:	46f2      	mov	sl, lr
 80080fe:	2100      	movs	r1, #0
 8008100:	f859 3b04 	ldr.w	r3, [r9], #4
 8008104:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8008108:	fa1f f883 	uxth.w	r8, r3
 800810c:	fa11 f18b 	uxtah	r1, r1, fp
 8008110:	0c1b      	lsrs	r3, r3, #16
 8008112:	eba1 0808 	sub.w	r8, r1, r8
 8008116:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800811a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800811e:	fa1f f888 	uxth.w	r8, r8
 8008122:	1419      	asrs	r1, r3, #16
 8008124:	454e      	cmp	r6, r9
 8008126:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800812a:	f84a 3b04 	str.w	r3, [sl], #4
 800812e:	d8e7      	bhi.n	8008100 <__mdiff+0x80>
 8008130:	1b33      	subs	r3, r6, r4
 8008132:	3b15      	subs	r3, #21
 8008134:	f023 0303 	bic.w	r3, r3, #3
 8008138:	3304      	adds	r3, #4
 800813a:	3415      	adds	r4, #21
 800813c:	42a6      	cmp	r6, r4
 800813e:	bf38      	it	cc
 8008140:	2304      	movcc	r3, #4
 8008142:	441d      	add	r5, r3
 8008144:	4473      	add	r3, lr
 8008146:	469e      	mov	lr, r3
 8008148:	462e      	mov	r6, r5
 800814a:	4566      	cmp	r6, ip
 800814c:	d30e      	bcc.n	800816c <__mdiff+0xec>
 800814e:	f10c 0203 	add.w	r2, ip, #3
 8008152:	1b52      	subs	r2, r2, r5
 8008154:	f022 0203 	bic.w	r2, r2, #3
 8008158:	3d03      	subs	r5, #3
 800815a:	45ac      	cmp	ip, r5
 800815c:	bf38      	it	cc
 800815e:	2200      	movcc	r2, #0
 8008160:	441a      	add	r2, r3
 8008162:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8008166:	b17b      	cbz	r3, 8008188 <__mdiff+0x108>
 8008168:	6107      	str	r7, [r0, #16]
 800816a:	e7a3      	b.n	80080b4 <__mdiff+0x34>
 800816c:	f856 8b04 	ldr.w	r8, [r6], #4
 8008170:	fa11 f288 	uxtah	r2, r1, r8
 8008174:	1414      	asrs	r4, r2, #16
 8008176:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800817a:	b292      	uxth	r2, r2
 800817c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8008180:	f84e 2b04 	str.w	r2, [lr], #4
 8008184:	1421      	asrs	r1, r4, #16
 8008186:	e7e0      	b.n	800814a <__mdiff+0xca>
 8008188:	3f01      	subs	r7, #1
 800818a:	e7ea      	b.n	8008162 <__mdiff+0xe2>
 800818c:	0800a108 	.word	0x0800a108
 8008190:	0800a194 	.word	0x0800a194

08008194 <__ulp>:
 8008194:	b082      	sub	sp, #8
 8008196:	ed8d 0b00 	vstr	d0, [sp]
 800819a:	9b01      	ldr	r3, [sp, #4]
 800819c:	4912      	ldr	r1, [pc, #72]	; (80081e8 <__ulp+0x54>)
 800819e:	4019      	ands	r1, r3
 80081a0:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 80081a4:	2900      	cmp	r1, #0
 80081a6:	dd05      	ble.n	80081b4 <__ulp+0x20>
 80081a8:	2200      	movs	r2, #0
 80081aa:	460b      	mov	r3, r1
 80081ac:	ec43 2b10 	vmov	d0, r2, r3
 80081b0:	b002      	add	sp, #8
 80081b2:	4770      	bx	lr
 80081b4:	4249      	negs	r1, r1
 80081b6:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 80081ba:	ea4f 5021 	mov.w	r0, r1, asr #20
 80081be:	f04f 0200 	mov.w	r2, #0
 80081c2:	f04f 0300 	mov.w	r3, #0
 80081c6:	da04      	bge.n	80081d2 <__ulp+0x3e>
 80081c8:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 80081cc:	fa41 f300 	asr.w	r3, r1, r0
 80081d0:	e7ec      	b.n	80081ac <__ulp+0x18>
 80081d2:	f1a0 0114 	sub.w	r1, r0, #20
 80081d6:	291e      	cmp	r1, #30
 80081d8:	bfda      	itte	le
 80081da:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 80081de:	fa20 f101 	lsrle.w	r1, r0, r1
 80081e2:	2101      	movgt	r1, #1
 80081e4:	460a      	mov	r2, r1
 80081e6:	e7e1      	b.n	80081ac <__ulp+0x18>
 80081e8:	7ff00000 	.word	0x7ff00000

080081ec <__b2d>:
 80081ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80081ee:	6905      	ldr	r5, [r0, #16]
 80081f0:	f100 0714 	add.w	r7, r0, #20
 80081f4:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 80081f8:	1f2e      	subs	r6, r5, #4
 80081fa:	f855 4c04 	ldr.w	r4, [r5, #-4]
 80081fe:	4620      	mov	r0, r4
 8008200:	f7ff fd48 	bl	8007c94 <__hi0bits>
 8008204:	f1c0 0320 	rsb	r3, r0, #32
 8008208:	280a      	cmp	r0, #10
 800820a:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8008288 <__b2d+0x9c>
 800820e:	600b      	str	r3, [r1, #0]
 8008210:	dc14      	bgt.n	800823c <__b2d+0x50>
 8008212:	f1c0 0e0b 	rsb	lr, r0, #11
 8008216:	fa24 f10e 	lsr.w	r1, r4, lr
 800821a:	42b7      	cmp	r7, r6
 800821c:	ea41 030c 	orr.w	r3, r1, ip
 8008220:	bf34      	ite	cc
 8008222:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8008226:	2100      	movcs	r1, #0
 8008228:	3015      	adds	r0, #21
 800822a:	fa04 f000 	lsl.w	r0, r4, r0
 800822e:	fa21 f10e 	lsr.w	r1, r1, lr
 8008232:	ea40 0201 	orr.w	r2, r0, r1
 8008236:	ec43 2b10 	vmov	d0, r2, r3
 800823a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800823c:	42b7      	cmp	r7, r6
 800823e:	bf3a      	itte	cc
 8008240:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8008244:	f1a5 0608 	subcc.w	r6, r5, #8
 8008248:	2100      	movcs	r1, #0
 800824a:	380b      	subs	r0, #11
 800824c:	d017      	beq.n	800827e <__b2d+0x92>
 800824e:	f1c0 0c20 	rsb	ip, r0, #32
 8008252:	fa04 f500 	lsl.w	r5, r4, r0
 8008256:	42be      	cmp	r6, r7
 8008258:	fa21 f40c 	lsr.w	r4, r1, ip
 800825c:	ea45 0504 	orr.w	r5, r5, r4
 8008260:	bf8c      	ite	hi
 8008262:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8008266:	2400      	movls	r4, #0
 8008268:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800826c:	fa01 f000 	lsl.w	r0, r1, r0
 8008270:	fa24 f40c 	lsr.w	r4, r4, ip
 8008274:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8008278:	ea40 0204 	orr.w	r2, r0, r4
 800827c:	e7db      	b.n	8008236 <__b2d+0x4a>
 800827e:	ea44 030c 	orr.w	r3, r4, ip
 8008282:	460a      	mov	r2, r1
 8008284:	e7d7      	b.n	8008236 <__b2d+0x4a>
 8008286:	bf00      	nop
 8008288:	3ff00000 	.word	0x3ff00000

0800828c <__d2b>:
 800828c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008290:	4689      	mov	r9, r1
 8008292:	2101      	movs	r1, #1
 8008294:	ec57 6b10 	vmov	r6, r7, d0
 8008298:	4690      	mov	r8, r2
 800829a:	f7ff fc09 	bl	8007ab0 <_Balloc>
 800829e:	4604      	mov	r4, r0
 80082a0:	b930      	cbnz	r0, 80082b0 <__d2b+0x24>
 80082a2:	4602      	mov	r2, r0
 80082a4:	4b25      	ldr	r3, [pc, #148]	; (800833c <__d2b+0xb0>)
 80082a6:	4826      	ldr	r0, [pc, #152]	; (8008340 <__d2b+0xb4>)
 80082a8:	f240 310a 	movw	r1, #778	; 0x30a
 80082ac:	f000 ff6c 	bl	8009188 <__assert_func>
 80082b0:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80082b4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80082b8:	bb35      	cbnz	r5, 8008308 <__d2b+0x7c>
 80082ba:	2e00      	cmp	r6, #0
 80082bc:	9301      	str	r3, [sp, #4]
 80082be:	d028      	beq.n	8008312 <__d2b+0x86>
 80082c0:	4668      	mov	r0, sp
 80082c2:	9600      	str	r6, [sp, #0]
 80082c4:	f7ff fd06 	bl	8007cd4 <__lo0bits>
 80082c8:	9900      	ldr	r1, [sp, #0]
 80082ca:	b300      	cbz	r0, 800830e <__d2b+0x82>
 80082cc:	9a01      	ldr	r2, [sp, #4]
 80082ce:	f1c0 0320 	rsb	r3, r0, #32
 80082d2:	fa02 f303 	lsl.w	r3, r2, r3
 80082d6:	430b      	orrs	r3, r1
 80082d8:	40c2      	lsrs	r2, r0
 80082da:	6163      	str	r3, [r4, #20]
 80082dc:	9201      	str	r2, [sp, #4]
 80082de:	9b01      	ldr	r3, [sp, #4]
 80082e0:	61a3      	str	r3, [r4, #24]
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	bf14      	ite	ne
 80082e6:	2202      	movne	r2, #2
 80082e8:	2201      	moveq	r2, #1
 80082ea:	6122      	str	r2, [r4, #16]
 80082ec:	b1d5      	cbz	r5, 8008324 <__d2b+0x98>
 80082ee:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80082f2:	4405      	add	r5, r0
 80082f4:	f8c9 5000 	str.w	r5, [r9]
 80082f8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80082fc:	f8c8 0000 	str.w	r0, [r8]
 8008300:	4620      	mov	r0, r4
 8008302:	b003      	add	sp, #12
 8008304:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008308:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800830c:	e7d5      	b.n	80082ba <__d2b+0x2e>
 800830e:	6161      	str	r1, [r4, #20]
 8008310:	e7e5      	b.n	80082de <__d2b+0x52>
 8008312:	a801      	add	r0, sp, #4
 8008314:	f7ff fcde 	bl	8007cd4 <__lo0bits>
 8008318:	9b01      	ldr	r3, [sp, #4]
 800831a:	6163      	str	r3, [r4, #20]
 800831c:	2201      	movs	r2, #1
 800831e:	6122      	str	r2, [r4, #16]
 8008320:	3020      	adds	r0, #32
 8008322:	e7e3      	b.n	80082ec <__d2b+0x60>
 8008324:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008328:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800832c:	f8c9 0000 	str.w	r0, [r9]
 8008330:	6918      	ldr	r0, [r3, #16]
 8008332:	f7ff fcaf 	bl	8007c94 <__hi0bits>
 8008336:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800833a:	e7df      	b.n	80082fc <__d2b+0x70>
 800833c:	0800a108 	.word	0x0800a108
 8008340:	0800a194 	.word	0x0800a194

08008344 <__ratio>:
 8008344:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008348:	4688      	mov	r8, r1
 800834a:	4669      	mov	r1, sp
 800834c:	4681      	mov	r9, r0
 800834e:	f7ff ff4d 	bl	80081ec <__b2d>
 8008352:	a901      	add	r1, sp, #4
 8008354:	4640      	mov	r0, r8
 8008356:	ec55 4b10 	vmov	r4, r5, d0
 800835a:	f7ff ff47 	bl	80081ec <__b2d>
 800835e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008362:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8008366:	eba3 0c02 	sub.w	ip, r3, r2
 800836a:	e9dd 3200 	ldrd	r3, r2, [sp]
 800836e:	1a9b      	subs	r3, r3, r2
 8008370:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8008374:	ec51 0b10 	vmov	r0, r1, d0
 8008378:	2b00      	cmp	r3, #0
 800837a:	bfd6      	itet	le
 800837c:	460a      	movle	r2, r1
 800837e:	462a      	movgt	r2, r5
 8008380:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8008384:	468b      	mov	fp, r1
 8008386:	462f      	mov	r7, r5
 8008388:	bfd4      	ite	le
 800838a:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800838e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8008392:	4620      	mov	r0, r4
 8008394:	ee10 2a10 	vmov	r2, s0
 8008398:	465b      	mov	r3, fp
 800839a:	4639      	mov	r1, r7
 800839c:	f7f8 fa6e 	bl	800087c <__aeabi_ddiv>
 80083a0:	ec41 0b10 	vmov	d0, r0, r1
 80083a4:	b003      	add	sp, #12
 80083a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080083aa <__copybits>:
 80083aa:	3901      	subs	r1, #1
 80083ac:	b570      	push	{r4, r5, r6, lr}
 80083ae:	1149      	asrs	r1, r1, #5
 80083b0:	6914      	ldr	r4, [r2, #16]
 80083b2:	3101      	adds	r1, #1
 80083b4:	f102 0314 	add.w	r3, r2, #20
 80083b8:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80083bc:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80083c0:	1f05      	subs	r5, r0, #4
 80083c2:	42a3      	cmp	r3, r4
 80083c4:	d30c      	bcc.n	80083e0 <__copybits+0x36>
 80083c6:	1aa3      	subs	r3, r4, r2
 80083c8:	3b11      	subs	r3, #17
 80083ca:	f023 0303 	bic.w	r3, r3, #3
 80083ce:	3211      	adds	r2, #17
 80083d0:	42a2      	cmp	r2, r4
 80083d2:	bf88      	it	hi
 80083d4:	2300      	movhi	r3, #0
 80083d6:	4418      	add	r0, r3
 80083d8:	2300      	movs	r3, #0
 80083da:	4288      	cmp	r0, r1
 80083dc:	d305      	bcc.n	80083ea <__copybits+0x40>
 80083de:	bd70      	pop	{r4, r5, r6, pc}
 80083e0:	f853 6b04 	ldr.w	r6, [r3], #4
 80083e4:	f845 6f04 	str.w	r6, [r5, #4]!
 80083e8:	e7eb      	b.n	80083c2 <__copybits+0x18>
 80083ea:	f840 3b04 	str.w	r3, [r0], #4
 80083ee:	e7f4      	b.n	80083da <__copybits+0x30>

080083f0 <__any_on>:
 80083f0:	f100 0214 	add.w	r2, r0, #20
 80083f4:	6900      	ldr	r0, [r0, #16]
 80083f6:	114b      	asrs	r3, r1, #5
 80083f8:	4298      	cmp	r0, r3
 80083fa:	b510      	push	{r4, lr}
 80083fc:	db11      	blt.n	8008422 <__any_on+0x32>
 80083fe:	dd0a      	ble.n	8008416 <__any_on+0x26>
 8008400:	f011 011f 	ands.w	r1, r1, #31
 8008404:	d007      	beq.n	8008416 <__any_on+0x26>
 8008406:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800840a:	fa24 f001 	lsr.w	r0, r4, r1
 800840e:	fa00 f101 	lsl.w	r1, r0, r1
 8008412:	428c      	cmp	r4, r1
 8008414:	d10b      	bne.n	800842e <__any_on+0x3e>
 8008416:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800841a:	4293      	cmp	r3, r2
 800841c:	d803      	bhi.n	8008426 <__any_on+0x36>
 800841e:	2000      	movs	r0, #0
 8008420:	bd10      	pop	{r4, pc}
 8008422:	4603      	mov	r3, r0
 8008424:	e7f7      	b.n	8008416 <__any_on+0x26>
 8008426:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800842a:	2900      	cmp	r1, #0
 800842c:	d0f5      	beq.n	800841a <__any_on+0x2a>
 800842e:	2001      	movs	r0, #1
 8008430:	e7f6      	b.n	8008420 <__any_on+0x30>

08008432 <_calloc_r>:
 8008432:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008434:	fba1 2402 	umull	r2, r4, r1, r2
 8008438:	b94c      	cbnz	r4, 800844e <_calloc_r+0x1c>
 800843a:	4611      	mov	r1, r2
 800843c:	9201      	str	r2, [sp, #4]
 800843e:	f000 f87b 	bl	8008538 <_malloc_r>
 8008442:	9a01      	ldr	r2, [sp, #4]
 8008444:	4605      	mov	r5, r0
 8008446:	b930      	cbnz	r0, 8008456 <_calloc_r+0x24>
 8008448:	4628      	mov	r0, r5
 800844a:	b003      	add	sp, #12
 800844c:	bd30      	pop	{r4, r5, pc}
 800844e:	220c      	movs	r2, #12
 8008450:	6002      	str	r2, [r0, #0]
 8008452:	2500      	movs	r5, #0
 8008454:	e7f8      	b.n	8008448 <_calloc_r+0x16>
 8008456:	4621      	mov	r1, r4
 8008458:	f7fc fb18 	bl	8004a8c <memset>
 800845c:	e7f4      	b.n	8008448 <_calloc_r+0x16>
	...

08008460 <_free_r>:
 8008460:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008462:	2900      	cmp	r1, #0
 8008464:	d044      	beq.n	80084f0 <_free_r+0x90>
 8008466:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800846a:	9001      	str	r0, [sp, #4]
 800846c:	2b00      	cmp	r3, #0
 800846e:	f1a1 0404 	sub.w	r4, r1, #4
 8008472:	bfb8      	it	lt
 8008474:	18e4      	addlt	r4, r4, r3
 8008476:	f001 f88b 	bl	8009590 <__malloc_lock>
 800847a:	4a1e      	ldr	r2, [pc, #120]	; (80084f4 <_free_r+0x94>)
 800847c:	9801      	ldr	r0, [sp, #4]
 800847e:	6813      	ldr	r3, [r2, #0]
 8008480:	b933      	cbnz	r3, 8008490 <_free_r+0x30>
 8008482:	6063      	str	r3, [r4, #4]
 8008484:	6014      	str	r4, [r2, #0]
 8008486:	b003      	add	sp, #12
 8008488:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800848c:	f001 b886 	b.w	800959c <__malloc_unlock>
 8008490:	42a3      	cmp	r3, r4
 8008492:	d908      	bls.n	80084a6 <_free_r+0x46>
 8008494:	6825      	ldr	r5, [r4, #0]
 8008496:	1961      	adds	r1, r4, r5
 8008498:	428b      	cmp	r3, r1
 800849a:	bf01      	itttt	eq
 800849c:	6819      	ldreq	r1, [r3, #0]
 800849e:	685b      	ldreq	r3, [r3, #4]
 80084a0:	1949      	addeq	r1, r1, r5
 80084a2:	6021      	streq	r1, [r4, #0]
 80084a4:	e7ed      	b.n	8008482 <_free_r+0x22>
 80084a6:	461a      	mov	r2, r3
 80084a8:	685b      	ldr	r3, [r3, #4]
 80084aa:	b10b      	cbz	r3, 80084b0 <_free_r+0x50>
 80084ac:	42a3      	cmp	r3, r4
 80084ae:	d9fa      	bls.n	80084a6 <_free_r+0x46>
 80084b0:	6811      	ldr	r1, [r2, #0]
 80084b2:	1855      	adds	r5, r2, r1
 80084b4:	42a5      	cmp	r5, r4
 80084b6:	d10b      	bne.n	80084d0 <_free_r+0x70>
 80084b8:	6824      	ldr	r4, [r4, #0]
 80084ba:	4421      	add	r1, r4
 80084bc:	1854      	adds	r4, r2, r1
 80084be:	42a3      	cmp	r3, r4
 80084c0:	6011      	str	r1, [r2, #0]
 80084c2:	d1e0      	bne.n	8008486 <_free_r+0x26>
 80084c4:	681c      	ldr	r4, [r3, #0]
 80084c6:	685b      	ldr	r3, [r3, #4]
 80084c8:	6053      	str	r3, [r2, #4]
 80084ca:	4421      	add	r1, r4
 80084cc:	6011      	str	r1, [r2, #0]
 80084ce:	e7da      	b.n	8008486 <_free_r+0x26>
 80084d0:	d902      	bls.n	80084d8 <_free_r+0x78>
 80084d2:	230c      	movs	r3, #12
 80084d4:	6003      	str	r3, [r0, #0]
 80084d6:	e7d6      	b.n	8008486 <_free_r+0x26>
 80084d8:	6825      	ldr	r5, [r4, #0]
 80084da:	1961      	adds	r1, r4, r5
 80084dc:	428b      	cmp	r3, r1
 80084de:	bf04      	itt	eq
 80084e0:	6819      	ldreq	r1, [r3, #0]
 80084e2:	685b      	ldreq	r3, [r3, #4]
 80084e4:	6063      	str	r3, [r4, #4]
 80084e6:	bf04      	itt	eq
 80084e8:	1949      	addeq	r1, r1, r5
 80084ea:	6021      	streq	r1, [r4, #0]
 80084ec:	6054      	str	r4, [r2, #4]
 80084ee:	e7ca      	b.n	8008486 <_free_r+0x26>
 80084f0:	b003      	add	sp, #12
 80084f2:	bd30      	pop	{r4, r5, pc}
 80084f4:	20000c48 	.word	0x20000c48

080084f8 <sbrk_aligned>:
 80084f8:	b570      	push	{r4, r5, r6, lr}
 80084fa:	4e0e      	ldr	r6, [pc, #56]	; (8008534 <sbrk_aligned+0x3c>)
 80084fc:	460c      	mov	r4, r1
 80084fe:	6831      	ldr	r1, [r6, #0]
 8008500:	4605      	mov	r5, r0
 8008502:	b911      	cbnz	r1, 800850a <sbrk_aligned+0x12>
 8008504:	f000 fd28 	bl	8008f58 <_sbrk_r>
 8008508:	6030      	str	r0, [r6, #0]
 800850a:	4621      	mov	r1, r4
 800850c:	4628      	mov	r0, r5
 800850e:	f000 fd23 	bl	8008f58 <_sbrk_r>
 8008512:	1c43      	adds	r3, r0, #1
 8008514:	d00a      	beq.n	800852c <sbrk_aligned+0x34>
 8008516:	1cc4      	adds	r4, r0, #3
 8008518:	f024 0403 	bic.w	r4, r4, #3
 800851c:	42a0      	cmp	r0, r4
 800851e:	d007      	beq.n	8008530 <sbrk_aligned+0x38>
 8008520:	1a21      	subs	r1, r4, r0
 8008522:	4628      	mov	r0, r5
 8008524:	f000 fd18 	bl	8008f58 <_sbrk_r>
 8008528:	3001      	adds	r0, #1
 800852a:	d101      	bne.n	8008530 <sbrk_aligned+0x38>
 800852c:	f04f 34ff 	mov.w	r4, #4294967295
 8008530:	4620      	mov	r0, r4
 8008532:	bd70      	pop	{r4, r5, r6, pc}
 8008534:	20000c4c 	.word	0x20000c4c

08008538 <_malloc_r>:
 8008538:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800853c:	1ccd      	adds	r5, r1, #3
 800853e:	f025 0503 	bic.w	r5, r5, #3
 8008542:	3508      	adds	r5, #8
 8008544:	2d0c      	cmp	r5, #12
 8008546:	bf38      	it	cc
 8008548:	250c      	movcc	r5, #12
 800854a:	2d00      	cmp	r5, #0
 800854c:	4607      	mov	r7, r0
 800854e:	db01      	blt.n	8008554 <_malloc_r+0x1c>
 8008550:	42a9      	cmp	r1, r5
 8008552:	d905      	bls.n	8008560 <_malloc_r+0x28>
 8008554:	230c      	movs	r3, #12
 8008556:	603b      	str	r3, [r7, #0]
 8008558:	2600      	movs	r6, #0
 800855a:	4630      	mov	r0, r6
 800855c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008560:	4e2e      	ldr	r6, [pc, #184]	; (800861c <_malloc_r+0xe4>)
 8008562:	f001 f815 	bl	8009590 <__malloc_lock>
 8008566:	6833      	ldr	r3, [r6, #0]
 8008568:	461c      	mov	r4, r3
 800856a:	bb34      	cbnz	r4, 80085ba <_malloc_r+0x82>
 800856c:	4629      	mov	r1, r5
 800856e:	4638      	mov	r0, r7
 8008570:	f7ff ffc2 	bl	80084f8 <sbrk_aligned>
 8008574:	1c43      	adds	r3, r0, #1
 8008576:	4604      	mov	r4, r0
 8008578:	d14d      	bne.n	8008616 <_malloc_r+0xde>
 800857a:	6834      	ldr	r4, [r6, #0]
 800857c:	4626      	mov	r6, r4
 800857e:	2e00      	cmp	r6, #0
 8008580:	d140      	bne.n	8008604 <_malloc_r+0xcc>
 8008582:	6823      	ldr	r3, [r4, #0]
 8008584:	4631      	mov	r1, r6
 8008586:	4638      	mov	r0, r7
 8008588:	eb04 0803 	add.w	r8, r4, r3
 800858c:	f000 fce4 	bl	8008f58 <_sbrk_r>
 8008590:	4580      	cmp	r8, r0
 8008592:	d13a      	bne.n	800860a <_malloc_r+0xd2>
 8008594:	6821      	ldr	r1, [r4, #0]
 8008596:	3503      	adds	r5, #3
 8008598:	1a6d      	subs	r5, r5, r1
 800859a:	f025 0503 	bic.w	r5, r5, #3
 800859e:	3508      	adds	r5, #8
 80085a0:	2d0c      	cmp	r5, #12
 80085a2:	bf38      	it	cc
 80085a4:	250c      	movcc	r5, #12
 80085a6:	4629      	mov	r1, r5
 80085a8:	4638      	mov	r0, r7
 80085aa:	f7ff ffa5 	bl	80084f8 <sbrk_aligned>
 80085ae:	3001      	adds	r0, #1
 80085b0:	d02b      	beq.n	800860a <_malloc_r+0xd2>
 80085b2:	6823      	ldr	r3, [r4, #0]
 80085b4:	442b      	add	r3, r5
 80085b6:	6023      	str	r3, [r4, #0]
 80085b8:	e00e      	b.n	80085d8 <_malloc_r+0xa0>
 80085ba:	6822      	ldr	r2, [r4, #0]
 80085bc:	1b52      	subs	r2, r2, r5
 80085be:	d41e      	bmi.n	80085fe <_malloc_r+0xc6>
 80085c0:	2a0b      	cmp	r2, #11
 80085c2:	d916      	bls.n	80085f2 <_malloc_r+0xba>
 80085c4:	1961      	adds	r1, r4, r5
 80085c6:	42a3      	cmp	r3, r4
 80085c8:	6025      	str	r5, [r4, #0]
 80085ca:	bf18      	it	ne
 80085cc:	6059      	strne	r1, [r3, #4]
 80085ce:	6863      	ldr	r3, [r4, #4]
 80085d0:	bf08      	it	eq
 80085d2:	6031      	streq	r1, [r6, #0]
 80085d4:	5162      	str	r2, [r4, r5]
 80085d6:	604b      	str	r3, [r1, #4]
 80085d8:	4638      	mov	r0, r7
 80085da:	f104 060b 	add.w	r6, r4, #11
 80085de:	f000 ffdd 	bl	800959c <__malloc_unlock>
 80085e2:	f026 0607 	bic.w	r6, r6, #7
 80085e6:	1d23      	adds	r3, r4, #4
 80085e8:	1af2      	subs	r2, r6, r3
 80085ea:	d0b6      	beq.n	800855a <_malloc_r+0x22>
 80085ec:	1b9b      	subs	r3, r3, r6
 80085ee:	50a3      	str	r3, [r4, r2]
 80085f0:	e7b3      	b.n	800855a <_malloc_r+0x22>
 80085f2:	6862      	ldr	r2, [r4, #4]
 80085f4:	42a3      	cmp	r3, r4
 80085f6:	bf0c      	ite	eq
 80085f8:	6032      	streq	r2, [r6, #0]
 80085fa:	605a      	strne	r2, [r3, #4]
 80085fc:	e7ec      	b.n	80085d8 <_malloc_r+0xa0>
 80085fe:	4623      	mov	r3, r4
 8008600:	6864      	ldr	r4, [r4, #4]
 8008602:	e7b2      	b.n	800856a <_malloc_r+0x32>
 8008604:	4634      	mov	r4, r6
 8008606:	6876      	ldr	r6, [r6, #4]
 8008608:	e7b9      	b.n	800857e <_malloc_r+0x46>
 800860a:	230c      	movs	r3, #12
 800860c:	603b      	str	r3, [r7, #0]
 800860e:	4638      	mov	r0, r7
 8008610:	f000 ffc4 	bl	800959c <__malloc_unlock>
 8008614:	e7a1      	b.n	800855a <_malloc_r+0x22>
 8008616:	6025      	str	r5, [r4, #0]
 8008618:	e7de      	b.n	80085d8 <_malloc_r+0xa0>
 800861a:	bf00      	nop
 800861c:	20000c48 	.word	0x20000c48

08008620 <__ssputs_r>:
 8008620:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008624:	688e      	ldr	r6, [r1, #8]
 8008626:	429e      	cmp	r6, r3
 8008628:	4682      	mov	sl, r0
 800862a:	460c      	mov	r4, r1
 800862c:	4690      	mov	r8, r2
 800862e:	461f      	mov	r7, r3
 8008630:	d838      	bhi.n	80086a4 <__ssputs_r+0x84>
 8008632:	898a      	ldrh	r2, [r1, #12]
 8008634:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008638:	d032      	beq.n	80086a0 <__ssputs_r+0x80>
 800863a:	6825      	ldr	r5, [r4, #0]
 800863c:	6909      	ldr	r1, [r1, #16]
 800863e:	eba5 0901 	sub.w	r9, r5, r1
 8008642:	6965      	ldr	r5, [r4, #20]
 8008644:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008648:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800864c:	3301      	adds	r3, #1
 800864e:	444b      	add	r3, r9
 8008650:	106d      	asrs	r5, r5, #1
 8008652:	429d      	cmp	r5, r3
 8008654:	bf38      	it	cc
 8008656:	461d      	movcc	r5, r3
 8008658:	0553      	lsls	r3, r2, #21
 800865a:	d531      	bpl.n	80086c0 <__ssputs_r+0xa0>
 800865c:	4629      	mov	r1, r5
 800865e:	f7ff ff6b 	bl	8008538 <_malloc_r>
 8008662:	4606      	mov	r6, r0
 8008664:	b950      	cbnz	r0, 800867c <__ssputs_r+0x5c>
 8008666:	230c      	movs	r3, #12
 8008668:	f8ca 3000 	str.w	r3, [sl]
 800866c:	89a3      	ldrh	r3, [r4, #12]
 800866e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008672:	81a3      	strh	r3, [r4, #12]
 8008674:	f04f 30ff 	mov.w	r0, #4294967295
 8008678:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800867c:	6921      	ldr	r1, [r4, #16]
 800867e:	464a      	mov	r2, r9
 8008680:	f7ff fa08 	bl	8007a94 <memcpy>
 8008684:	89a3      	ldrh	r3, [r4, #12]
 8008686:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800868a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800868e:	81a3      	strh	r3, [r4, #12]
 8008690:	6126      	str	r6, [r4, #16]
 8008692:	6165      	str	r5, [r4, #20]
 8008694:	444e      	add	r6, r9
 8008696:	eba5 0509 	sub.w	r5, r5, r9
 800869a:	6026      	str	r6, [r4, #0]
 800869c:	60a5      	str	r5, [r4, #8]
 800869e:	463e      	mov	r6, r7
 80086a0:	42be      	cmp	r6, r7
 80086a2:	d900      	bls.n	80086a6 <__ssputs_r+0x86>
 80086a4:	463e      	mov	r6, r7
 80086a6:	6820      	ldr	r0, [r4, #0]
 80086a8:	4632      	mov	r2, r6
 80086aa:	4641      	mov	r1, r8
 80086ac:	f000 ff56 	bl	800955c <memmove>
 80086b0:	68a3      	ldr	r3, [r4, #8]
 80086b2:	1b9b      	subs	r3, r3, r6
 80086b4:	60a3      	str	r3, [r4, #8]
 80086b6:	6823      	ldr	r3, [r4, #0]
 80086b8:	4433      	add	r3, r6
 80086ba:	6023      	str	r3, [r4, #0]
 80086bc:	2000      	movs	r0, #0
 80086be:	e7db      	b.n	8008678 <__ssputs_r+0x58>
 80086c0:	462a      	mov	r2, r5
 80086c2:	f000 ff71 	bl	80095a8 <_realloc_r>
 80086c6:	4606      	mov	r6, r0
 80086c8:	2800      	cmp	r0, #0
 80086ca:	d1e1      	bne.n	8008690 <__ssputs_r+0x70>
 80086cc:	6921      	ldr	r1, [r4, #16]
 80086ce:	4650      	mov	r0, sl
 80086d0:	f7ff fec6 	bl	8008460 <_free_r>
 80086d4:	e7c7      	b.n	8008666 <__ssputs_r+0x46>
	...

080086d8 <_svfiprintf_r>:
 80086d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80086dc:	4698      	mov	r8, r3
 80086de:	898b      	ldrh	r3, [r1, #12]
 80086e0:	061b      	lsls	r3, r3, #24
 80086e2:	b09d      	sub	sp, #116	; 0x74
 80086e4:	4607      	mov	r7, r0
 80086e6:	460d      	mov	r5, r1
 80086e8:	4614      	mov	r4, r2
 80086ea:	d50e      	bpl.n	800870a <_svfiprintf_r+0x32>
 80086ec:	690b      	ldr	r3, [r1, #16]
 80086ee:	b963      	cbnz	r3, 800870a <_svfiprintf_r+0x32>
 80086f0:	2140      	movs	r1, #64	; 0x40
 80086f2:	f7ff ff21 	bl	8008538 <_malloc_r>
 80086f6:	6028      	str	r0, [r5, #0]
 80086f8:	6128      	str	r0, [r5, #16]
 80086fa:	b920      	cbnz	r0, 8008706 <_svfiprintf_r+0x2e>
 80086fc:	230c      	movs	r3, #12
 80086fe:	603b      	str	r3, [r7, #0]
 8008700:	f04f 30ff 	mov.w	r0, #4294967295
 8008704:	e0d1      	b.n	80088aa <_svfiprintf_r+0x1d2>
 8008706:	2340      	movs	r3, #64	; 0x40
 8008708:	616b      	str	r3, [r5, #20]
 800870a:	2300      	movs	r3, #0
 800870c:	9309      	str	r3, [sp, #36]	; 0x24
 800870e:	2320      	movs	r3, #32
 8008710:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008714:	f8cd 800c 	str.w	r8, [sp, #12]
 8008718:	2330      	movs	r3, #48	; 0x30
 800871a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80088c4 <_svfiprintf_r+0x1ec>
 800871e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008722:	f04f 0901 	mov.w	r9, #1
 8008726:	4623      	mov	r3, r4
 8008728:	469a      	mov	sl, r3
 800872a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800872e:	b10a      	cbz	r2, 8008734 <_svfiprintf_r+0x5c>
 8008730:	2a25      	cmp	r2, #37	; 0x25
 8008732:	d1f9      	bne.n	8008728 <_svfiprintf_r+0x50>
 8008734:	ebba 0b04 	subs.w	fp, sl, r4
 8008738:	d00b      	beq.n	8008752 <_svfiprintf_r+0x7a>
 800873a:	465b      	mov	r3, fp
 800873c:	4622      	mov	r2, r4
 800873e:	4629      	mov	r1, r5
 8008740:	4638      	mov	r0, r7
 8008742:	f7ff ff6d 	bl	8008620 <__ssputs_r>
 8008746:	3001      	adds	r0, #1
 8008748:	f000 80aa 	beq.w	80088a0 <_svfiprintf_r+0x1c8>
 800874c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800874e:	445a      	add	r2, fp
 8008750:	9209      	str	r2, [sp, #36]	; 0x24
 8008752:	f89a 3000 	ldrb.w	r3, [sl]
 8008756:	2b00      	cmp	r3, #0
 8008758:	f000 80a2 	beq.w	80088a0 <_svfiprintf_r+0x1c8>
 800875c:	2300      	movs	r3, #0
 800875e:	f04f 32ff 	mov.w	r2, #4294967295
 8008762:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008766:	f10a 0a01 	add.w	sl, sl, #1
 800876a:	9304      	str	r3, [sp, #16]
 800876c:	9307      	str	r3, [sp, #28]
 800876e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008772:	931a      	str	r3, [sp, #104]	; 0x68
 8008774:	4654      	mov	r4, sl
 8008776:	2205      	movs	r2, #5
 8008778:	f814 1b01 	ldrb.w	r1, [r4], #1
 800877c:	4851      	ldr	r0, [pc, #324]	; (80088c4 <_svfiprintf_r+0x1ec>)
 800877e:	f7f7 fd47 	bl	8000210 <memchr>
 8008782:	9a04      	ldr	r2, [sp, #16]
 8008784:	b9d8      	cbnz	r0, 80087be <_svfiprintf_r+0xe6>
 8008786:	06d0      	lsls	r0, r2, #27
 8008788:	bf44      	itt	mi
 800878a:	2320      	movmi	r3, #32
 800878c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008790:	0711      	lsls	r1, r2, #28
 8008792:	bf44      	itt	mi
 8008794:	232b      	movmi	r3, #43	; 0x2b
 8008796:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800879a:	f89a 3000 	ldrb.w	r3, [sl]
 800879e:	2b2a      	cmp	r3, #42	; 0x2a
 80087a0:	d015      	beq.n	80087ce <_svfiprintf_r+0xf6>
 80087a2:	9a07      	ldr	r2, [sp, #28]
 80087a4:	4654      	mov	r4, sl
 80087a6:	2000      	movs	r0, #0
 80087a8:	f04f 0c0a 	mov.w	ip, #10
 80087ac:	4621      	mov	r1, r4
 80087ae:	f811 3b01 	ldrb.w	r3, [r1], #1
 80087b2:	3b30      	subs	r3, #48	; 0x30
 80087b4:	2b09      	cmp	r3, #9
 80087b6:	d94e      	bls.n	8008856 <_svfiprintf_r+0x17e>
 80087b8:	b1b0      	cbz	r0, 80087e8 <_svfiprintf_r+0x110>
 80087ba:	9207      	str	r2, [sp, #28]
 80087bc:	e014      	b.n	80087e8 <_svfiprintf_r+0x110>
 80087be:	eba0 0308 	sub.w	r3, r0, r8
 80087c2:	fa09 f303 	lsl.w	r3, r9, r3
 80087c6:	4313      	orrs	r3, r2
 80087c8:	9304      	str	r3, [sp, #16]
 80087ca:	46a2      	mov	sl, r4
 80087cc:	e7d2      	b.n	8008774 <_svfiprintf_r+0x9c>
 80087ce:	9b03      	ldr	r3, [sp, #12]
 80087d0:	1d19      	adds	r1, r3, #4
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	9103      	str	r1, [sp, #12]
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	bfbb      	ittet	lt
 80087da:	425b      	neglt	r3, r3
 80087dc:	f042 0202 	orrlt.w	r2, r2, #2
 80087e0:	9307      	strge	r3, [sp, #28]
 80087e2:	9307      	strlt	r3, [sp, #28]
 80087e4:	bfb8      	it	lt
 80087e6:	9204      	strlt	r2, [sp, #16]
 80087e8:	7823      	ldrb	r3, [r4, #0]
 80087ea:	2b2e      	cmp	r3, #46	; 0x2e
 80087ec:	d10c      	bne.n	8008808 <_svfiprintf_r+0x130>
 80087ee:	7863      	ldrb	r3, [r4, #1]
 80087f0:	2b2a      	cmp	r3, #42	; 0x2a
 80087f2:	d135      	bne.n	8008860 <_svfiprintf_r+0x188>
 80087f4:	9b03      	ldr	r3, [sp, #12]
 80087f6:	1d1a      	adds	r2, r3, #4
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	9203      	str	r2, [sp, #12]
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	bfb8      	it	lt
 8008800:	f04f 33ff 	movlt.w	r3, #4294967295
 8008804:	3402      	adds	r4, #2
 8008806:	9305      	str	r3, [sp, #20]
 8008808:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80088d4 <_svfiprintf_r+0x1fc>
 800880c:	7821      	ldrb	r1, [r4, #0]
 800880e:	2203      	movs	r2, #3
 8008810:	4650      	mov	r0, sl
 8008812:	f7f7 fcfd 	bl	8000210 <memchr>
 8008816:	b140      	cbz	r0, 800882a <_svfiprintf_r+0x152>
 8008818:	2340      	movs	r3, #64	; 0x40
 800881a:	eba0 000a 	sub.w	r0, r0, sl
 800881e:	fa03 f000 	lsl.w	r0, r3, r0
 8008822:	9b04      	ldr	r3, [sp, #16]
 8008824:	4303      	orrs	r3, r0
 8008826:	3401      	adds	r4, #1
 8008828:	9304      	str	r3, [sp, #16]
 800882a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800882e:	4826      	ldr	r0, [pc, #152]	; (80088c8 <_svfiprintf_r+0x1f0>)
 8008830:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008834:	2206      	movs	r2, #6
 8008836:	f7f7 fceb 	bl	8000210 <memchr>
 800883a:	2800      	cmp	r0, #0
 800883c:	d038      	beq.n	80088b0 <_svfiprintf_r+0x1d8>
 800883e:	4b23      	ldr	r3, [pc, #140]	; (80088cc <_svfiprintf_r+0x1f4>)
 8008840:	bb1b      	cbnz	r3, 800888a <_svfiprintf_r+0x1b2>
 8008842:	9b03      	ldr	r3, [sp, #12]
 8008844:	3307      	adds	r3, #7
 8008846:	f023 0307 	bic.w	r3, r3, #7
 800884a:	3308      	adds	r3, #8
 800884c:	9303      	str	r3, [sp, #12]
 800884e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008850:	4433      	add	r3, r6
 8008852:	9309      	str	r3, [sp, #36]	; 0x24
 8008854:	e767      	b.n	8008726 <_svfiprintf_r+0x4e>
 8008856:	fb0c 3202 	mla	r2, ip, r2, r3
 800885a:	460c      	mov	r4, r1
 800885c:	2001      	movs	r0, #1
 800885e:	e7a5      	b.n	80087ac <_svfiprintf_r+0xd4>
 8008860:	2300      	movs	r3, #0
 8008862:	3401      	adds	r4, #1
 8008864:	9305      	str	r3, [sp, #20]
 8008866:	4619      	mov	r1, r3
 8008868:	f04f 0c0a 	mov.w	ip, #10
 800886c:	4620      	mov	r0, r4
 800886e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008872:	3a30      	subs	r2, #48	; 0x30
 8008874:	2a09      	cmp	r2, #9
 8008876:	d903      	bls.n	8008880 <_svfiprintf_r+0x1a8>
 8008878:	2b00      	cmp	r3, #0
 800887a:	d0c5      	beq.n	8008808 <_svfiprintf_r+0x130>
 800887c:	9105      	str	r1, [sp, #20]
 800887e:	e7c3      	b.n	8008808 <_svfiprintf_r+0x130>
 8008880:	fb0c 2101 	mla	r1, ip, r1, r2
 8008884:	4604      	mov	r4, r0
 8008886:	2301      	movs	r3, #1
 8008888:	e7f0      	b.n	800886c <_svfiprintf_r+0x194>
 800888a:	ab03      	add	r3, sp, #12
 800888c:	9300      	str	r3, [sp, #0]
 800888e:	462a      	mov	r2, r5
 8008890:	4b0f      	ldr	r3, [pc, #60]	; (80088d0 <_svfiprintf_r+0x1f8>)
 8008892:	a904      	add	r1, sp, #16
 8008894:	4638      	mov	r0, r7
 8008896:	f7fc f9a1 	bl	8004bdc <_printf_float>
 800889a:	1c42      	adds	r2, r0, #1
 800889c:	4606      	mov	r6, r0
 800889e:	d1d6      	bne.n	800884e <_svfiprintf_r+0x176>
 80088a0:	89ab      	ldrh	r3, [r5, #12]
 80088a2:	065b      	lsls	r3, r3, #25
 80088a4:	f53f af2c 	bmi.w	8008700 <_svfiprintf_r+0x28>
 80088a8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80088aa:	b01d      	add	sp, #116	; 0x74
 80088ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80088b0:	ab03      	add	r3, sp, #12
 80088b2:	9300      	str	r3, [sp, #0]
 80088b4:	462a      	mov	r2, r5
 80088b6:	4b06      	ldr	r3, [pc, #24]	; (80088d0 <_svfiprintf_r+0x1f8>)
 80088b8:	a904      	add	r1, sp, #16
 80088ba:	4638      	mov	r0, r7
 80088bc:	f7fc fc32 	bl	8005124 <_printf_i>
 80088c0:	e7eb      	b.n	800889a <_svfiprintf_r+0x1c2>
 80088c2:	bf00      	nop
 80088c4:	0800a2ec 	.word	0x0800a2ec
 80088c8:	0800a2f6 	.word	0x0800a2f6
 80088cc:	08004bdd 	.word	0x08004bdd
 80088d0:	08008621 	.word	0x08008621
 80088d4:	0800a2f2 	.word	0x0800a2f2

080088d8 <_sungetc_r>:
 80088d8:	b538      	push	{r3, r4, r5, lr}
 80088da:	1c4b      	adds	r3, r1, #1
 80088dc:	4614      	mov	r4, r2
 80088de:	d103      	bne.n	80088e8 <_sungetc_r+0x10>
 80088e0:	f04f 35ff 	mov.w	r5, #4294967295
 80088e4:	4628      	mov	r0, r5
 80088e6:	bd38      	pop	{r3, r4, r5, pc}
 80088e8:	8993      	ldrh	r3, [r2, #12]
 80088ea:	f023 0320 	bic.w	r3, r3, #32
 80088ee:	8193      	strh	r3, [r2, #12]
 80088f0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80088f2:	6852      	ldr	r2, [r2, #4]
 80088f4:	b2cd      	uxtb	r5, r1
 80088f6:	b18b      	cbz	r3, 800891c <_sungetc_r+0x44>
 80088f8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80088fa:	4293      	cmp	r3, r2
 80088fc:	dd08      	ble.n	8008910 <_sungetc_r+0x38>
 80088fe:	6823      	ldr	r3, [r4, #0]
 8008900:	1e5a      	subs	r2, r3, #1
 8008902:	6022      	str	r2, [r4, #0]
 8008904:	f803 5c01 	strb.w	r5, [r3, #-1]
 8008908:	6863      	ldr	r3, [r4, #4]
 800890a:	3301      	adds	r3, #1
 800890c:	6063      	str	r3, [r4, #4]
 800890e:	e7e9      	b.n	80088e4 <_sungetc_r+0xc>
 8008910:	4621      	mov	r1, r4
 8008912:	f000 fbf1 	bl	80090f8 <__submore>
 8008916:	2800      	cmp	r0, #0
 8008918:	d0f1      	beq.n	80088fe <_sungetc_r+0x26>
 800891a:	e7e1      	b.n	80088e0 <_sungetc_r+0x8>
 800891c:	6921      	ldr	r1, [r4, #16]
 800891e:	6823      	ldr	r3, [r4, #0]
 8008920:	b151      	cbz	r1, 8008938 <_sungetc_r+0x60>
 8008922:	4299      	cmp	r1, r3
 8008924:	d208      	bcs.n	8008938 <_sungetc_r+0x60>
 8008926:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800892a:	42a9      	cmp	r1, r5
 800892c:	d104      	bne.n	8008938 <_sungetc_r+0x60>
 800892e:	3b01      	subs	r3, #1
 8008930:	3201      	adds	r2, #1
 8008932:	6023      	str	r3, [r4, #0]
 8008934:	6062      	str	r2, [r4, #4]
 8008936:	e7d5      	b.n	80088e4 <_sungetc_r+0xc>
 8008938:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800893c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008940:	6363      	str	r3, [r4, #52]	; 0x34
 8008942:	2303      	movs	r3, #3
 8008944:	63a3      	str	r3, [r4, #56]	; 0x38
 8008946:	4623      	mov	r3, r4
 8008948:	f803 5f46 	strb.w	r5, [r3, #70]!
 800894c:	6023      	str	r3, [r4, #0]
 800894e:	2301      	movs	r3, #1
 8008950:	e7dc      	b.n	800890c <_sungetc_r+0x34>

08008952 <__ssrefill_r>:
 8008952:	b510      	push	{r4, lr}
 8008954:	460c      	mov	r4, r1
 8008956:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8008958:	b169      	cbz	r1, 8008976 <__ssrefill_r+0x24>
 800895a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800895e:	4299      	cmp	r1, r3
 8008960:	d001      	beq.n	8008966 <__ssrefill_r+0x14>
 8008962:	f7ff fd7d 	bl	8008460 <_free_r>
 8008966:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008968:	6063      	str	r3, [r4, #4]
 800896a:	2000      	movs	r0, #0
 800896c:	6360      	str	r0, [r4, #52]	; 0x34
 800896e:	b113      	cbz	r3, 8008976 <__ssrefill_r+0x24>
 8008970:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8008972:	6023      	str	r3, [r4, #0]
 8008974:	bd10      	pop	{r4, pc}
 8008976:	6923      	ldr	r3, [r4, #16]
 8008978:	6023      	str	r3, [r4, #0]
 800897a:	2300      	movs	r3, #0
 800897c:	6063      	str	r3, [r4, #4]
 800897e:	89a3      	ldrh	r3, [r4, #12]
 8008980:	f043 0320 	orr.w	r3, r3, #32
 8008984:	81a3      	strh	r3, [r4, #12]
 8008986:	f04f 30ff 	mov.w	r0, #4294967295
 800898a:	e7f3      	b.n	8008974 <__ssrefill_r+0x22>

0800898c <__ssvfiscanf_r>:
 800898c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008990:	460c      	mov	r4, r1
 8008992:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 8008996:	2100      	movs	r1, #0
 8008998:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 800899c:	49a6      	ldr	r1, [pc, #664]	; (8008c38 <__ssvfiscanf_r+0x2ac>)
 800899e:	91a0      	str	r1, [sp, #640]	; 0x280
 80089a0:	f10d 0804 	add.w	r8, sp, #4
 80089a4:	49a5      	ldr	r1, [pc, #660]	; (8008c3c <__ssvfiscanf_r+0x2b0>)
 80089a6:	4fa6      	ldr	r7, [pc, #664]	; (8008c40 <__ssvfiscanf_r+0x2b4>)
 80089a8:	f8df 9298 	ldr.w	r9, [pc, #664]	; 8008c44 <__ssvfiscanf_r+0x2b8>
 80089ac:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 80089b0:	4606      	mov	r6, r0
 80089b2:	91a1      	str	r1, [sp, #644]	; 0x284
 80089b4:	9300      	str	r3, [sp, #0]
 80089b6:	7813      	ldrb	r3, [r2, #0]
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	f000 815a 	beq.w	8008c72 <__ssvfiscanf_r+0x2e6>
 80089be:	5dd9      	ldrb	r1, [r3, r7]
 80089c0:	f011 0108 	ands.w	r1, r1, #8
 80089c4:	f102 0501 	add.w	r5, r2, #1
 80089c8:	d019      	beq.n	80089fe <__ssvfiscanf_r+0x72>
 80089ca:	6863      	ldr	r3, [r4, #4]
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	dd0f      	ble.n	80089f0 <__ssvfiscanf_r+0x64>
 80089d0:	6823      	ldr	r3, [r4, #0]
 80089d2:	781a      	ldrb	r2, [r3, #0]
 80089d4:	5cba      	ldrb	r2, [r7, r2]
 80089d6:	0712      	lsls	r2, r2, #28
 80089d8:	d401      	bmi.n	80089de <__ssvfiscanf_r+0x52>
 80089da:	462a      	mov	r2, r5
 80089dc:	e7eb      	b.n	80089b6 <__ssvfiscanf_r+0x2a>
 80089de:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80089e0:	3201      	adds	r2, #1
 80089e2:	9245      	str	r2, [sp, #276]	; 0x114
 80089e4:	6862      	ldr	r2, [r4, #4]
 80089e6:	3301      	adds	r3, #1
 80089e8:	3a01      	subs	r2, #1
 80089ea:	6062      	str	r2, [r4, #4]
 80089ec:	6023      	str	r3, [r4, #0]
 80089ee:	e7ec      	b.n	80089ca <__ssvfiscanf_r+0x3e>
 80089f0:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80089f2:	4621      	mov	r1, r4
 80089f4:	4630      	mov	r0, r6
 80089f6:	4798      	blx	r3
 80089f8:	2800      	cmp	r0, #0
 80089fa:	d0e9      	beq.n	80089d0 <__ssvfiscanf_r+0x44>
 80089fc:	e7ed      	b.n	80089da <__ssvfiscanf_r+0x4e>
 80089fe:	2b25      	cmp	r3, #37	; 0x25
 8008a00:	d012      	beq.n	8008a28 <__ssvfiscanf_r+0x9c>
 8008a02:	469a      	mov	sl, r3
 8008a04:	6863      	ldr	r3, [r4, #4]
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	f340 8091 	ble.w	8008b2e <__ssvfiscanf_r+0x1a2>
 8008a0c:	6822      	ldr	r2, [r4, #0]
 8008a0e:	7813      	ldrb	r3, [r2, #0]
 8008a10:	4553      	cmp	r3, sl
 8008a12:	f040 812e 	bne.w	8008c72 <__ssvfiscanf_r+0x2e6>
 8008a16:	6863      	ldr	r3, [r4, #4]
 8008a18:	3b01      	subs	r3, #1
 8008a1a:	6063      	str	r3, [r4, #4]
 8008a1c:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8008a1e:	3201      	adds	r2, #1
 8008a20:	3301      	adds	r3, #1
 8008a22:	6022      	str	r2, [r4, #0]
 8008a24:	9345      	str	r3, [sp, #276]	; 0x114
 8008a26:	e7d8      	b.n	80089da <__ssvfiscanf_r+0x4e>
 8008a28:	9141      	str	r1, [sp, #260]	; 0x104
 8008a2a:	9143      	str	r1, [sp, #268]	; 0x10c
 8008a2c:	7853      	ldrb	r3, [r2, #1]
 8008a2e:	2b2a      	cmp	r3, #42	; 0x2a
 8008a30:	bf02      	ittt	eq
 8008a32:	2310      	moveq	r3, #16
 8008a34:	1c95      	addeq	r5, r2, #2
 8008a36:	9341      	streq	r3, [sp, #260]	; 0x104
 8008a38:	220a      	movs	r2, #10
 8008a3a:	46aa      	mov	sl, r5
 8008a3c:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8008a40:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8008a44:	2b09      	cmp	r3, #9
 8008a46:	d91d      	bls.n	8008a84 <__ssvfiscanf_r+0xf8>
 8008a48:	487e      	ldr	r0, [pc, #504]	; (8008c44 <__ssvfiscanf_r+0x2b8>)
 8008a4a:	2203      	movs	r2, #3
 8008a4c:	f7f7 fbe0 	bl	8000210 <memchr>
 8008a50:	b140      	cbz	r0, 8008a64 <__ssvfiscanf_r+0xd8>
 8008a52:	2301      	movs	r3, #1
 8008a54:	eba0 0009 	sub.w	r0, r0, r9
 8008a58:	fa03 f000 	lsl.w	r0, r3, r0
 8008a5c:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8008a5e:	4318      	orrs	r0, r3
 8008a60:	9041      	str	r0, [sp, #260]	; 0x104
 8008a62:	4655      	mov	r5, sl
 8008a64:	f815 3b01 	ldrb.w	r3, [r5], #1
 8008a68:	2b78      	cmp	r3, #120	; 0x78
 8008a6a:	d806      	bhi.n	8008a7a <__ssvfiscanf_r+0xee>
 8008a6c:	2b57      	cmp	r3, #87	; 0x57
 8008a6e:	d810      	bhi.n	8008a92 <__ssvfiscanf_r+0x106>
 8008a70:	2b25      	cmp	r3, #37	; 0x25
 8008a72:	d0c6      	beq.n	8008a02 <__ssvfiscanf_r+0x76>
 8008a74:	d856      	bhi.n	8008b24 <__ssvfiscanf_r+0x198>
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d064      	beq.n	8008b44 <__ssvfiscanf_r+0x1b8>
 8008a7a:	2303      	movs	r3, #3
 8008a7c:	9347      	str	r3, [sp, #284]	; 0x11c
 8008a7e:	230a      	movs	r3, #10
 8008a80:	9342      	str	r3, [sp, #264]	; 0x108
 8008a82:	e071      	b.n	8008b68 <__ssvfiscanf_r+0x1dc>
 8008a84:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8008a86:	fb02 1103 	mla	r1, r2, r3, r1
 8008a8a:	3930      	subs	r1, #48	; 0x30
 8008a8c:	9143      	str	r1, [sp, #268]	; 0x10c
 8008a8e:	4655      	mov	r5, sl
 8008a90:	e7d3      	b.n	8008a3a <__ssvfiscanf_r+0xae>
 8008a92:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8008a96:	2a20      	cmp	r2, #32
 8008a98:	d8ef      	bhi.n	8008a7a <__ssvfiscanf_r+0xee>
 8008a9a:	a101      	add	r1, pc, #4	; (adr r1, 8008aa0 <__ssvfiscanf_r+0x114>)
 8008a9c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8008aa0:	08008b53 	.word	0x08008b53
 8008aa4:	08008a7b 	.word	0x08008a7b
 8008aa8:	08008a7b 	.word	0x08008a7b
 8008aac:	08008bb1 	.word	0x08008bb1
 8008ab0:	08008a7b 	.word	0x08008a7b
 8008ab4:	08008a7b 	.word	0x08008a7b
 8008ab8:	08008a7b 	.word	0x08008a7b
 8008abc:	08008a7b 	.word	0x08008a7b
 8008ac0:	08008a7b 	.word	0x08008a7b
 8008ac4:	08008a7b 	.word	0x08008a7b
 8008ac8:	08008a7b 	.word	0x08008a7b
 8008acc:	08008bc7 	.word	0x08008bc7
 8008ad0:	08008b9d 	.word	0x08008b9d
 8008ad4:	08008b2b 	.word	0x08008b2b
 8008ad8:	08008b2b 	.word	0x08008b2b
 8008adc:	08008b2b 	.word	0x08008b2b
 8008ae0:	08008a7b 	.word	0x08008a7b
 8008ae4:	08008ba1 	.word	0x08008ba1
 8008ae8:	08008a7b 	.word	0x08008a7b
 8008aec:	08008a7b 	.word	0x08008a7b
 8008af0:	08008a7b 	.word	0x08008a7b
 8008af4:	08008a7b 	.word	0x08008a7b
 8008af8:	08008bd7 	.word	0x08008bd7
 8008afc:	08008ba9 	.word	0x08008ba9
 8008b00:	08008b4b 	.word	0x08008b4b
 8008b04:	08008a7b 	.word	0x08008a7b
 8008b08:	08008a7b 	.word	0x08008a7b
 8008b0c:	08008bd3 	.word	0x08008bd3
 8008b10:	08008a7b 	.word	0x08008a7b
 8008b14:	08008b9d 	.word	0x08008b9d
 8008b18:	08008a7b 	.word	0x08008a7b
 8008b1c:	08008a7b 	.word	0x08008a7b
 8008b20:	08008b53 	.word	0x08008b53
 8008b24:	3b45      	subs	r3, #69	; 0x45
 8008b26:	2b02      	cmp	r3, #2
 8008b28:	d8a7      	bhi.n	8008a7a <__ssvfiscanf_r+0xee>
 8008b2a:	2305      	movs	r3, #5
 8008b2c:	e01b      	b.n	8008b66 <__ssvfiscanf_r+0x1da>
 8008b2e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8008b30:	4621      	mov	r1, r4
 8008b32:	4630      	mov	r0, r6
 8008b34:	4798      	blx	r3
 8008b36:	2800      	cmp	r0, #0
 8008b38:	f43f af68 	beq.w	8008a0c <__ssvfiscanf_r+0x80>
 8008b3c:	9844      	ldr	r0, [sp, #272]	; 0x110
 8008b3e:	2800      	cmp	r0, #0
 8008b40:	f040 808d 	bne.w	8008c5e <__ssvfiscanf_r+0x2d2>
 8008b44:	f04f 30ff 	mov.w	r0, #4294967295
 8008b48:	e08f      	b.n	8008c6a <__ssvfiscanf_r+0x2de>
 8008b4a:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8008b4c:	f042 0220 	orr.w	r2, r2, #32
 8008b50:	9241      	str	r2, [sp, #260]	; 0x104
 8008b52:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8008b54:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008b58:	9241      	str	r2, [sp, #260]	; 0x104
 8008b5a:	2210      	movs	r2, #16
 8008b5c:	2b6f      	cmp	r3, #111	; 0x6f
 8008b5e:	9242      	str	r2, [sp, #264]	; 0x108
 8008b60:	bf34      	ite	cc
 8008b62:	2303      	movcc	r3, #3
 8008b64:	2304      	movcs	r3, #4
 8008b66:	9347      	str	r3, [sp, #284]	; 0x11c
 8008b68:	6863      	ldr	r3, [r4, #4]
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	dd42      	ble.n	8008bf4 <__ssvfiscanf_r+0x268>
 8008b6e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8008b70:	0659      	lsls	r1, r3, #25
 8008b72:	d404      	bmi.n	8008b7e <__ssvfiscanf_r+0x1f2>
 8008b74:	6823      	ldr	r3, [r4, #0]
 8008b76:	781a      	ldrb	r2, [r3, #0]
 8008b78:	5cba      	ldrb	r2, [r7, r2]
 8008b7a:	0712      	lsls	r2, r2, #28
 8008b7c:	d441      	bmi.n	8008c02 <__ssvfiscanf_r+0x276>
 8008b7e:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8008b80:	2b02      	cmp	r3, #2
 8008b82:	dc50      	bgt.n	8008c26 <__ssvfiscanf_r+0x29a>
 8008b84:	466b      	mov	r3, sp
 8008b86:	4622      	mov	r2, r4
 8008b88:	a941      	add	r1, sp, #260	; 0x104
 8008b8a:	4630      	mov	r0, r6
 8008b8c:	f000 f876 	bl	8008c7c <_scanf_chars>
 8008b90:	2801      	cmp	r0, #1
 8008b92:	d06e      	beq.n	8008c72 <__ssvfiscanf_r+0x2e6>
 8008b94:	2802      	cmp	r0, #2
 8008b96:	f47f af20 	bne.w	80089da <__ssvfiscanf_r+0x4e>
 8008b9a:	e7cf      	b.n	8008b3c <__ssvfiscanf_r+0x1b0>
 8008b9c:	220a      	movs	r2, #10
 8008b9e:	e7dd      	b.n	8008b5c <__ssvfiscanf_r+0x1d0>
 8008ba0:	2300      	movs	r3, #0
 8008ba2:	9342      	str	r3, [sp, #264]	; 0x108
 8008ba4:	2303      	movs	r3, #3
 8008ba6:	e7de      	b.n	8008b66 <__ssvfiscanf_r+0x1da>
 8008ba8:	2308      	movs	r3, #8
 8008baa:	9342      	str	r3, [sp, #264]	; 0x108
 8008bac:	2304      	movs	r3, #4
 8008bae:	e7da      	b.n	8008b66 <__ssvfiscanf_r+0x1da>
 8008bb0:	4629      	mov	r1, r5
 8008bb2:	4640      	mov	r0, r8
 8008bb4:	f000 f9e0 	bl	8008f78 <__sccl>
 8008bb8:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8008bba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008bbe:	9341      	str	r3, [sp, #260]	; 0x104
 8008bc0:	4605      	mov	r5, r0
 8008bc2:	2301      	movs	r3, #1
 8008bc4:	e7cf      	b.n	8008b66 <__ssvfiscanf_r+0x1da>
 8008bc6:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8008bc8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008bcc:	9341      	str	r3, [sp, #260]	; 0x104
 8008bce:	2300      	movs	r3, #0
 8008bd0:	e7c9      	b.n	8008b66 <__ssvfiscanf_r+0x1da>
 8008bd2:	2302      	movs	r3, #2
 8008bd4:	e7c7      	b.n	8008b66 <__ssvfiscanf_r+0x1da>
 8008bd6:	9841      	ldr	r0, [sp, #260]	; 0x104
 8008bd8:	06c3      	lsls	r3, r0, #27
 8008bda:	f53f aefe 	bmi.w	80089da <__ssvfiscanf_r+0x4e>
 8008bde:	9b00      	ldr	r3, [sp, #0]
 8008be0:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8008be2:	1d19      	adds	r1, r3, #4
 8008be4:	9100      	str	r1, [sp, #0]
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	f010 0f01 	tst.w	r0, #1
 8008bec:	bf14      	ite	ne
 8008bee:	801a      	strhne	r2, [r3, #0]
 8008bf0:	601a      	streq	r2, [r3, #0]
 8008bf2:	e6f2      	b.n	80089da <__ssvfiscanf_r+0x4e>
 8008bf4:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8008bf6:	4621      	mov	r1, r4
 8008bf8:	4630      	mov	r0, r6
 8008bfa:	4798      	blx	r3
 8008bfc:	2800      	cmp	r0, #0
 8008bfe:	d0b6      	beq.n	8008b6e <__ssvfiscanf_r+0x1e2>
 8008c00:	e79c      	b.n	8008b3c <__ssvfiscanf_r+0x1b0>
 8008c02:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8008c04:	3201      	adds	r2, #1
 8008c06:	9245      	str	r2, [sp, #276]	; 0x114
 8008c08:	6862      	ldr	r2, [r4, #4]
 8008c0a:	3a01      	subs	r2, #1
 8008c0c:	2a00      	cmp	r2, #0
 8008c0e:	6062      	str	r2, [r4, #4]
 8008c10:	dd02      	ble.n	8008c18 <__ssvfiscanf_r+0x28c>
 8008c12:	3301      	adds	r3, #1
 8008c14:	6023      	str	r3, [r4, #0]
 8008c16:	e7ad      	b.n	8008b74 <__ssvfiscanf_r+0x1e8>
 8008c18:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8008c1a:	4621      	mov	r1, r4
 8008c1c:	4630      	mov	r0, r6
 8008c1e:	4798      	blx	r3
 8008c20:	2800      	cmp	r0, #0
 8008c22:	d0a7      	beq.n	8008b74 <__ssvfiscanf_r+0x1e8>
 8008c24:	e78a      	b.n	8008b3c <__ssvfiscanf_r+0x1b0>
 8008c26:	2b04      	cmp	r3, #4
 8008c28:	dc0e      	bgt.n	8008c48 <__ssvfiscanf_r+0x2bc>
 8008c2a:	466b      	mov	r3, sp
 8008c2c:	4622      	mov	r2, r4
 8008c2e:	a941      	add	r1, sp, #260	; 0x104
 8008c30:	4630      	mov	r0, r6
 8008c32:	f000 f87d 	bl	8008d30 <_scanf_i>
 8008c36:	e7ab      	b.n	8008b90 <__ssvfiscanf_r+0x204>
 8008c38:	080088d9 	.word	0x080088d9
 8008c3c:	08008953 	.word	0x08008953
 8008c40:	08009f89 	.word	0x08009f89
 8008c44:	0800a2f2 	.word	0x0800a2f2
 8008c48:	4b0b      	ldr	r3, [pc, #44]	; (8008c78 <__ssvfiscanf_r+0x2ec>)
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	f43f aec5 	beq.w	80089da <__ssvfiscanf_r+0x4e>
 8008c50:	466b      	mov	r3, sp
 8008c52:	4622      	mov	r2, r4
 8008c54:	a941      	add	r1, sp, #260	; 0x104
 8008c56:	4630      	mov	r0, r6
 8008c58:	f7fc fb8a 	bl	8005370 <_scanf_float>
 8008c5c:	e798      	b.n	8008b90 <__ssvfiscanf_r+0x204>
 8008c5e:	89a3      	ldrh	r3, [r4, #12]
 8008c60:	f013 0f40 	tst.w	r3, #64	; 0x40
 8008c64:	bf18      	it	ne
 8008c66:	f04f 30ff 	movne.w	r0, #4294967295
 8008c6a:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 8008c6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008c72:	9844      	ldr	r0, [sp, #272]	; 0x110
 8008c74:	e7f9      	b.n	8008c6a <__ssvfiscanf_r+0x2de>
 8008c76:	bf00      	nop
 8008c78:	08005371 	.word	0x08005371

08008c7c <_scanf_chars>:
 8008c7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008c80:	4615      	mov	r5, r2
 8008c82:	688a      	ldr	r2, [r1, #8]
 8008c84:	4680      	mov	r8, r0
 8008c86:	460c      	mov	r4, r1
 8008c88:	b932      	cbnz	r2, 8008c98 <_scanf_chars+0x1c>
 8008c8a:	698a      	ldr	r2, [r1, #24]
 8008c8c:	2a00      	cmp	r2, #0
 8008c8e:	bf0c      	ite	eq
 8008c90:	2201      	moveq	r2, #1
 8008c92:	f04f 32ff 	movne.w	r2, #4294967295
 8008c96:	608a      	str	r2, [r1, #8]
 8008c98:	6822      	ldr	r2, [r4, #0]
 8008c9a:	f8df 9090 	ldr.w	r9, [pc, #144]	; 8008d2c <_scanf_chars+0xb0>
 8008c9e:	06d1      	lsls	r1, r2, #27
 8008ca0:	bf5f      	itttt	pl
 8008ca2:	681a      	ldrpl	r2, [r3, #0]
 8008ca4:	1d11      	addpl	r1, r2, #4
 8008ca6:	6019      	strpl	r1, [r3, #0]
 8008ca8:	6816      	ldrpl	r6, [r2, #0]
 8008caa:	2700      	movs	r7, #0
 8008cac:	69a0      	ldr	r0, [r4, #24]
 8008cae:	b188      	cbz	r0, 8008cd4 <_scanf_chars+0x58>
 8008cb0:	2801      	cmp	r0, #1
 8008cb2:	d107      	bne.n	8008cc4 <_scanf_chars+0x48>
 8008cb4:	682a      	ldr	r2, [r5, #0]
 8008cb6:	7811      	ldrb	r1, [r2, #0]
 8008cb8:	6962      	ldr	r2, [r4, #20]
 8008cba:	5c52      	ldrb	r2, [r2, r1]
 8008cbc:	b952      	cbnz	r2, 8008cd4 <_scanf_chars+0x58>
 8008cbe:	2f00      	cmp	r7, #0
 8008cc0:	d031      	beq.n	8008d26 <_scanf_chars+0xaa>
 8008cc2:	e022      	b.n	8008d0a <_scanf_chars+0x8e>
 8008cc4:	2802      	cmp	r0, #2
 8008cc6:	d120      	bne.n	8008d0a <_scanf_chars+0x8e>
 8008cc8:	682b      	ldr	r3, [r5, #0]
 8008cca:	781b      	ldrb	r3, [r3, #0]
 8008ccc:	f813 3009 	ldrb.w	r3, [r3, r9]
 8008cd0:	071b      	lsls	r3, r3, #28
 8008cd2:	d41a      	bmi.n	8008d0a <_scanf_chars+0x8e>
 8008cd4:	6823      	ldr	r3, [r4, #0]
 8008cd6:	06da      	lsls	r2, r3, #27
 8008cd8:	bf5e      	ittt	pl
 8008cda:	682b      	ldrpl	r3, [r5, #0]
 8008cdc:	781b      	ldrbpl	r3, [r3, #0]
 8008cde:	f806 3b01 	strbpl.w	r3, [r6], #1
 8008ce2:	682a      	ldr	r2, [r5, #0]
 8008ce4:	686b      	ldr	r3, [r5, #4]
 8008ce6:	3201      	adds	r2, #1
 8008ce8:	602a      	str	r2, [r5, #0]
 8008cea:	68a2      	ldr	r2, [r4, #8]
 8008cec:	3b01      	subs	r3, #1
 8008cee:	3a01      	subs	r2, #1
 8008cf0:	606b      	str	r3, [r5, #4]
 8008cf2:	3701      	adds	r7, #1
 8008cf4:	60a2      	str	r2, [r4, #8]
 8008cf6:	b142      	cbz	r2, 8008d0a <_scanf_chars+0x8e>
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	dcd7      	bgt.n	8008cac <_scanf_chars+0x30>
 8008cfc:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8008d00:	4629      	mov	r1, r5
 8008d02:	4640      	mov	r0, r8
 8008d04:	4798      	blx	r3
 8008d06:	2800      	cmp	r0, #0
 8008d08:	d0d0      	beq.n	8008cac <_scanf_chars+0x30>
 8008d0a:	6823      	ldr	r3, [r4, #0]
 8008d0c:	f013 0310 	ands.w	r3, r3, #16
 8008d10:	d105      	bne.n	8008d1e <_scanf_chars+0xa2>
 8008d12:	68e2      	ldr	r2, [r4, #12]
 8008d14:	3201      	adds	r2, #1
 8008d16:	60e2      	str	r2, [r4, #12]
 8008d18:	69a2      	ldr	r2, [r4, #24]
 8008d1a:	b102      	cbz	r2, 8008d1e <_scanf_chars+0xa2>
 8008d1c:	7033      	strb	r3, [r6, #0]
 8008d1e:	6923      	ldr	r3, [r4, #16]
 8008d20:	443b      	add	r3, r7
 8008d22:	6123      	str	r3, [r4, #16]
 8008d24:	2000      	movs	r0, #0
 8008d26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008d2a:	bf00      	nop
 8008d2c:	08009f89 	.word	0x08009f89

08008d30 <_scanf_i>:
 8008d30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d34:	4698      	mov	r8, r3
 8008d36:	4b76      	ldr	r3, [pc, #472]	; (8008f10 <_scanf_i+0x1e0>)
 8008d38:	460c      	mov	r4, r1
 8008d3a:	4682      	mov	sl, r0
 8008d3c:	4616      	mov	r6, r2
 8008d3e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8008d42:	b087      	sub	sp, #28
 8008d44:	ab03      	add	r3, sp, #12
 8008d46:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8008d4a:	4b72      	ldr	r3, [pc, #456]	; (8008f14 <_scanf_i+0x1e4>)
 8008d4c:	69a1      	ldr	r1, [r4, #24]
 8008d4e:	4a72      	ldr	r2, [pc, #456]	; (8008f18 <_scanf_i+0x1e8>)
 8008d50:	2903      	cmp	r1, #3
 8008d52:	bf18      	it	ne
 8008d54:	461a      	movne	r2, r3
 8008d56:	68a3      	ldr	r3, [r4, #8]
 8008d58:	9201      	str	r2, [sp, #4]
 8008d5a:	1e5a      	subs	r2, r3, #1
 8008d5c:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8008d60:	bf88      	it	hi
 8008d62:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8008d66:	4627      	mov	r7, r4
 8008d68:	bf82      	ittt	hi
 8008d6a:	eb03 0905 	addhi.w	r9, r3, r5
 8008d6e:	f240 135d 	movwhi	r3, #349	; 0x15d
 8008d72:	60a3      	strhi	r3, [r4, #8]
 8008d74:	f857 3b1c 	ldr.w	r3, [r7], #28
 8008d78:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8008d7c:	bf98      	it	ls
 8008d7e:	f04f 0900 	movls.w	r9, #0
 8008d82:	6023      	str	r3, [r4, #0]
 8008d84:	463d      	mov	r5, r7
 8008d86:	f04f 0b00 	mov.w	fp, #0
 8008d8a:	6831      	ldr	r1, [r6, #0]
 8008d8c:	ab03      	add	r3, sp, #12
 8008d8e:	7809      	ldrb	r1, [r1, #0]
 8008d90:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8008d94:	2202      	movs	r2, #2
 8008d96:	f7f7 fa3b 	bl	8000210 <memchr>
 8008d9a:	b328      	cbz	r0, 8008de8 <_scanf_i+0xb8>
 8008d9c:	f1bb 0f01 	cmp.w	fp, #1
 8008da0:	d159      	bne.n	8008e56 <_scanf_i+0x126>
 8008da2:	6862      	ldr	r2, [r4, #4]
 8008da4:	b92a      	cbnz	r2, 8008db2 <_scanf_i+0x82>
 8008da6:	6822      	ldr	r2, [r4, #0]
 8008da8:	2308      	movs	r3, #8
 8008daa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008dae:	6063      	str	r3, [r4, #4]
 8008db0:	6022      	str	r2, [r4, #0]
 8008db2:	6822      	ldr	r2, [r4, #0]
 8008db4:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8008db8:	6022      	str	r2, [r4, #0]
 8008dba:	68a2      	ldr	r2, [r4, #8]
 8008dbc:	1e51      	subs	r1, r2, #1
 8008dbe:	60a1      	str	r1, [r4, #8]
 8008dc0:	b192      	cbz	r2, 8008de8 <_scanf_i+0xb8>
 8008dc2:	6832      	ldr	r2, [r6, #0]
 8008dc4:	1c51      	adds	r1, r2, #1
 8008dc6:	6031      	str	r1, [r6, #0]
 8008dc8:	7812      	ldrb	r2, [r2, #0]
 8008dca:	f805 2b01 	strb.w	r2, [r5], #1
 8008dce:	6872      	ldr	r2, [r6, #4]
 8008dd0:	3a01      	subs	r2, #1
 8008dd2:	2a00      	cmp	r2, #0
 8008dd4:	6072      	str	r2, [r6, #4]
 8008dd6:	dc07      	bgt.n	8008de8 <_scanf_i+0xb8>
 8008dd8:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8008ddc:	4631      	mov	r1, r6
 8008dde:	4650      	mov	r0, sl
 8008de0:	4790      	blx	r2
 8008de2:	2800      	cmp	r0, #0
 8008de4:	f040 8085 	bne.w	8008ef2 <_scanf_i+0x1c2>
 8008de8:	f10b 0b01 	add.w	fp, fp, #1
 8008dec:	f1bb 0f03 	cmp.w	fp, #3
 8008df0:	d1cb      	bne.n	8008d8a <_scanf_i+0x5a>
 8008df2:	6863      	ldr	r3, [r4, #4]
 8008df4:	b90b      	cbnz	r3, 8008dfa <_scanf_i+0xca>
 8008df6:	230a      	movs	r3, #10
 8008df8:	6063      	str	r3, [r4, #4]
 8008dfa:	6863      	ldr	r3, [r4, #4]
 8008dfc:	4947      	ldr	r1, [pc, #284]	; (8008f1c <_scanf_i+0x1ec>)
 8008dfe:	6960      	ldr	r0, [r4, #20]
 8008e00:	1ac9      	subs	r1, r1, r3
 8008e02:	f000 f8b9 	bl	8008f78 <__sccl>
 8008e06:	f04f 0b00 	mov.w	fp, #0
 8008e0a:	68a3      	ldr	r3, [r4, #8]
 8008e0c:	6822      	ldr	r2, [r4, #0]
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d03d      	beq.n	8008e8e <_scanf_i+0x15e>
 8008e12:	6831      	ldr	r1, [r6, #0]
 8008e14:	6960      	ldr	r0, [r4, #20]
 8008e16:	f891 c000 	ldrb.w	ip, [r1]
 8008e1a:	f810 000c 	ldrb.w	r0, [r0, ip]
 8008e1e:	2800      	cmp	r0, #0
 8008e20:	d035      	beq.n	8008e8e <_scanf_i+0x15e>
 8008e22:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8008e26:	d124      	bne.n	8008e72 <_scanf_i+0x142>
 8008e28:	0510      	lsls	r0, r2, #20
 8008e2a:	d522      	bpl.n	8008e72 <_scanf_i+0x142>
 8008e2c:	f10b 0b01 	add.w	fp, fp, #1
 8008e30:	f1b9 0f00 	cmp.w	r9, #0
 8008e34:	d003      	beq.n	8008e3e <_scanf_i+0x10e>
 8008e36:	3301      	adds	r3, #1
 8008e38:	f109 39ff 	add.w	r9, r9, #4294967295
 8008e3c:	60a3      	str	r3, [r4, #8]
 8008e3e:	6873      	ldr	r3, [r6, #4]
 8008e40:	3b01      	subs	r3, #1
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	6073      	str	r3, [r6, #4]
 8008e46:	dd1b      	ble.n	8008e80 <_scanf_i+0x150>
 8008e48:	6833      	ldr	r3, [r6, #0]
 8008e4a:	3301      	adds	r3, #1
 8008e4c:	6033      	str	r3, [r6, #0]
 8008e4e:	68a3      	ldr	r3, [r4, #8]
 8008e50:	3b01      	subs	r3, #1
 8008e52:	60a3      	str	r3, [r4, #8]
 8008e54:	e7d9      	b.n	8008e0a <_scanf_i+0xda>
 8008e56:	f1bb 0f02 	cmp.w	fp, #2
 8008e5a:	d1ae      	bne.n	8008dba <_scanf_i+0x8a>
 8008e5c:	6822      	ldr	r2, [r4, #0]
 8008e5e:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8008e62:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8008e66:	d1bf      	bne.n	8008de8 <_scanf_i+0xb8>
 8008e68:	2310      	movs	r3, #16
 8008e6a:	6063      	str	r3, [r4, #4]
 8008e6c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008e70:	e7a2      	b.n	8008db8 <_scanf_i+0x88>
 8008e72:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8008e76:	6022      	str	r2, [r4, #0]
 8008e78:	780b      	ldrb	r3, [r1, #0]
 8008e7a:	f805 3b01 	strb.w	r3, [r5], #1
 8008e7e:	e7de      	b.n	8008e3e <_scanf_i+0x10e>
 8008e80:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8008e84:	4631      	mov	r1, r6
 8008e86:	4650      	mov	r0, sl
 8008e88:	4798      	blx	r3
 8008e8a:	2800      	cmp	r0, #0
 8008e8c:	d0df      	beq.n	8008e4e <_scanf_i+0x11e>
 8008e8e:	6823      	ldr	r3, [r4, #0]
 8008e90:	05db      	lsls	r3, r3, #23
 8008e92:	d50d      	bpl.n	8008eb0 <_scanf_i+0x180>
 8008e94:	42bd      	cmp	r5, r7
 8008e96:	d909      	bls.n	8008eac <_scanf_i+0x17c>
 8008e98:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8008e9c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008ea0:	4632      	mov	r2, r6
 8008ea2:	4650      	mov	r0, sl
 8008ea4:	4798      	blx	r3
 8008ea6:	f105 39ff 	add.w	r9, r5, #4294967295
 8008eaa:	464d      	mov	r5, r9
 8008eac:	42bd      	cmp	r5, r7
 8008eae:	d02d      	beq.n	8008f0c <_scanf_i+0x1dc>
 8008eb0:	6822      	ldr	r2, [r4, #0]
 8008eb2:	f012 0210 	ands.w	r2, r2, #16
 8008eb6:	d113      	bne.n	8008ee0 <_scanf_i+0x1b0>
 8008eb8:	702a      	strb	r2, [r5, #0]
 8008eba:	6863      	ldr	r3, [r4, #4]
 8008ebc:	9e01      	ldr	r6, [sp, #4]
 8008ebe:	4639      	mov	r1, r7
 8008ec0:	4650      	mov	r0, sl
 8008ec2:	47b0      	blx	r6
 8008ec4:	6821      	ldr	r1, [r4, #0]
 8008ec6:	f8d8 3000 	ldr.w	r3, [r8]
 8008eca:	f011 0f20 	tst.w	r1, #32
 8008ece:	d013      	beq.n	8008ef8 <_scanf_i+0x1c8>
 8008ed0:	1d1a      	adds	r2, r3, #4
 8008ed2:	f8c8 2000 	str.w	r2, [r8]
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	6018      	str	r0, [r3, #0]
 8008eda:	68e3      	ldr	r3, [r4, #12]
 8008edc:	3301      	adds	r3, #1
 8008ede:	60e3      	str	r3, [r4, #12]
 8008ee0:	1bed      	subs	r5, r5, r7
 8008ee2:	44ab      	add	fp, r5
 8008ee4:	6925      	ldr	r5, [r4, #16]
 8008ee6:	445d      	add	r5, fp
 8008ee8:	6125      	str	r5, [r4, #16]
 8008eea:	2000      	movs	r0, #0
 8008eec:	b007      	add	sp, #28
 8008eee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ef2:	f04f 0b00 	mov.w	fp, #0
 8008ef6:	e7ca      	b.n	8008e8e <_scanf_i+0x15e>
 8008ef8:	1d1a      	adds	r2, r3, #4
 8008efa:	f8c8 2000 	str.w	r2, [r8]
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	f011 0f01 	tst.w	r1, #1
 8008f04:	bf14      	ite	ne
 8008f06:	8018      	strhne	r0, [r3, #0]
 8008f08:	6018      	streq	r0, [r3, #0]
 8008f0a:	e7e6      	b.n	8008eda <_scanf_i+0x1aa>
 8008f0c:	2001      	movs	r0, #1
 8008f0e:	e7ed      	b.n	8008eec <_scanf_i+0x1bc>
 8008f10:	08009eec 	.word	0x08009eec
 8008f14:	080090f5 	.word	0x080090f5
 8008f18:	08006615 	.word	0x08006615
 8008f1c:	0800a316 	.word	0x0800a316

08008f20 <_read_r>:
 8008f20:	b538      	push	{r3, r4, r5, lr}
 8008f22:	4d07      	ldr	r5, [pc, #28]	; (8008f40 <_read_r+0x20>)
 8008f24:	4604      	mov	r4, r0
 8008f26:	4608      	mov	r0, r1
 8008f28:	4611      	mov	r1, r2
 8008f2a:	2200      	movs	r2, #0
 8008f2c:	602a      	str	r2, [r5, #0]
 8008f2e:	461a      	mov	r2, r3
 8008f30:	f7f8 ffb7 	bl	8001ea2 <_read>
 8008f34:	1c43      	adds	r3, r0, #1
 8008f36:	d102      	bne.n	8008f3e <_read_r+0x1e>
 8008f38:	682b      	ldr	r3, [r5, #0]
 8008f3a:	b103      	cbz	r3, 8008f3e <_read_r+0x1e>
 8008f3c:	6023      	str	r3, [r4, #0]
 8008f3e:	bd38      	pop	{r3, r4, r5, pc}
 8008f40:	20000c50 	.word	0x20000c50
 8008f44:	00000000 	.word	0x00000000

08008f48 <nan>:
 8008f48:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8008f50 <nan+0x8>
 8008f4c:	4770      	bx	lr
 8008f4e:	bf00      	nop
 8008f50:	00000000 	.word	0x00000000
 8008f54:	7ff80000 	.word	0x7ff80000

08008f58 <_sbrk_r>:
 8008f58:	b538      	push	{r3, r4, r5, lr}
 8008f5a:	4d06      	ldr	r5, [pc, #24]	; (8008f74 <_sbrk_r+0x1c>)
 8008f5c:	2300      	movs	r3, #0
 8008f5e:	4604      	mov	r4, r0
 8008f60:	4608      	mov	r0, r1
 8008f62:	602b      	str	r3, [r5, #0]
 8008f64:	f7f9 f80a 	bl	8001f7c <_sbrk>
 8008f68:	1c43      	adds	r3, r0, #1
 8008f6a:	d102      	bne.n	8008f72 <_sbrk_r+0x1a>
 8008f6c:	682b      	ldr	r3, [r5, #0]
 8008f6e:	b103      	cbz	r3, 8008f72 <_sbrk_r+0x1a>
 8008f70:	6023      	str	r3, [r4, #0]
 8008f72:	bd38      	pop	{r3, r4, r5, pc}
 8008f74:	20000c50 	.word	0x20000c50

08008f78 <__sccl>:
 8008f78:	b570      	push	{r4, r5, r6, lr}
 8008f7a:	780b      	ldrb	r3, [r1, #0]
 8008f7c:	4604      	mov	r4, r0
 8008f7e:	2b5e      	cmp	r3, #94	; 0x5e
 8008f80:	bf0b      	itete	eq
 8008f82:	784b      	ldrbeq	r3, [r1, #1]
 8008f84:	1c48      	addne	r0, r1, #1
 8008f86:	1c88      	addeq	r0, r1, #2
 8008f88:	2200      	movne	r2, #0
 8008f8a:	bf08      	it	eq
 8008f8c:	2201      	moveq	r2, #1
 8008f8e:	1e61      	subs	r1, r4, #1
 8008f90:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8008f94:	f801 2f01 	strb.w	r2, [r1, #1]!
 8008f98:	42a9      	cmp	r1, r5
 8008f9a:	d1fb      	bne.n	8008f94 <__sccl+0x1c>
 8008f9c:	b90b      	cbnz	r3, 8008fa2 <__sccl+0x2a>
 8008f9e:	3801      	subs	r0, #1
 8008fa0:	bd70      	pop	{r4, r5, r6, pc}
 8008fa2:	f082 0201 	eor.w	r2, r2, #1
 8008fa6:	54e2      	strb	r2, [r4, r3]
 8008fa8:	4605      	mov	r5, r0
 8008faa:	4628      	mov	r0, r5
 8008fac:	f810 1b01 	ldrb.w	r1, [r0], #1
 8008fb0:	292d      	cmp	r1, #45	; 0x2d
 8008fb2:	d006      	beq.n	8008fc2 <__sccl+0x4a>
 8008fb4:	295d      	cmp	r1, #93	; 0x5d
 8008fb6:	d0f3      	beq.n	8008fa0 <__sccl+0x28>
 8008fb8:	b909      	cbnz	r1, 8008fbe <__sccl+0x46>
 8008fba:	4628      	mov	r0, r5
 8008fbc:	e7f0      	b.n	8008fa0 <__sccl+0x28>
 8008fbe:	460b      	mov	r3, r1
 8008fc0:	e7f1      	b.n	8008fa6 <__sccl+0x2e>
 8008fc2:	786e      	ldrb	r6, [r5, #1]
 8008fc4:	2e5d      	cmp	r6, #93	; 0x5d
 8008fc6:	d0fa      	beq.n	8008fbe <__sccl+0x46>
 8008fc8:	42b3      	cmp	r3, r6
 8008fca:	dcf8      	bgt.n	8008fbe <__sccl+0x46>
 8008fcc:	3502      	adds	r5, #2
 8008fce:	4619      	mov	r1, r3
 8008fd0:	3101      	adds	r1, #1
 8008fd2:	428e      	cmp	r6, r1
 8008fd4:	5462      	strb	r2, [r4, r1]
 8008fd6:	dcfb      	bgt.n	8008fd0 <__sccl+0x58>
 8008fd8:	1af1      	subs	r1, r6, r3
 8008fda:	3901      	subs	r1, #1
 8008fdc:	1c58      	adds	r0, r3, #1
 8008fde:	42b3      	cmp	r3, r6
 8008fe0:	bfa8      	it	ge
 8008fe2:	2100      	movge	r1, #0
 8008fe4:	1843      	adds	r3, r0, r1
 8008fe6:	e7e0      	b.n	8008faa <__sccl+0x32>

08008fe8 <strncmp>:
 8008fe8:	b510      	push	{r4, lr}
 8008fea:	b17a      	cbz	r2, 800900c <strncmp+0x24>
 8008fec:	4603      	mov	r3, r0
 8008fee:	3901      	subs	r1, #1
 8008ff0:	1884      	adds	r4, r0, r2
 8008ff2:	f813 0b01 	ldrb.w	r0, [r3], #1
 8008ff6:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8008ffa:	4290      	cmp	r0, r2
 8008ffc:	d101      	bne.n	8009002 <strncmp+0x1a>
 8008ffe:	42a3      	cmp	r3, r4
 8009000:	d101      	bne.n	8009006 <strncmp+0x1e>
 8009002:	1a80      	subs	r0, r0, r2
 8009004:	bd10      	pop	{r4, pc}
 8009006:	2800      	cmp	r0, #0
 8009008:	d1f3      	bne.n	8008ff2 <strncmp+0xa>
 800900a:	e7fa      	b.n	8009002 <strncmp+0x1a>
 800900c:	4610      	mov	r0, r2
 800900e:	e7f9      	b.n	8009004 <strncmp+0x1c>

08009010 <_strtoul_l.constprop.0>:
 8009010:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009014:	4f36      	ldr	r7, [pc, #216]	; (80090f0 <_strtoul_l.constprop.0+0xe0>)
 8009016:	4686      	mov	lr, r0
 8009018:	460d      	mov	r5, r1
 800901a:	4628      	mov	r0, r5
 800901c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009020:	5de6      	ldrb	r6, [r4, r7]
 8009022:	f016 0608 	ands.w	r6, r6, #8
 8009026:	d1f8      	bne.n	800901a <_strtoul_l.constprop.0+0xa>
 8009028:	2c2d      	cmp	r4, #45	; 0x2d
 800902a:	d12f      	bne.n	800908c <_strtoul_l.constprop.0+0x7c>
 800902c:	782c      	ldrb	r4, [r5, #0]
 800902e:	2601      	movs	r6, #1
 8009030:	1c85      	adds	r5, r0, #2
 8009032:	2b00      	cmp	r3, #0
 8009034:	d057      	beq.n	80090e6 <_strtoul_l.constprop.0+0xd6>
 8009036:	2b10      	cmp	r3, #16
 8009038:	d109      	bne.n	800904e <_strtoul_l.constprop.0+0x3e>
 800903a:	2c30      	cmp	r4, #48	; 0x30
 800903c:	d107      	bne.n	800904e <_strtoul_l.constprop.0+0x3e>
 800903e:	7828      	ldrb	r0, [r5, #0]
 8009040:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8009044:	2858      	cmp	r0, #88	; 0x58
 8009046:	d149      	bne.n	80090dc <_strtoul_l.constprop.0+0xcc>
 8009048:	786c      	ldrb	r4, [r5, #1]
 800904a:	2310      	movs	r3, #16
 800904c:	3502      	adds	r5, #2
 800904e:	f04f 38ff 	mov.w	r8, #4294967295
 8009052:	2700      	movs	r7, #0
 8009054:	fbb8 f8f3 	udiv	r8, r8, r3
 8009058:	fb03 f908 	mul.w	r9, r3, r8
 800905c:	ea6f 0909 	mvn.w	r9, r9
 8009060:	4638      	mov	r0, r7
 8009062:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8009066:	f1bc 0f09 	cmp.w	ip, #9
 800906a:	d814      	bhi.n	8009096 <_strtoul_l.constprop.0+0x86>
 800906c:	4664      	mov	r4, ip
 800906e:	42a3      	cmp	r3, r4
 8009070:	dd22      	ble.n	80090b8 <_strtoul_l.constprop.0+0xa8>
 8009072:	2f00      	cmp	r7, #0
 8009074:	db1d      	blt.n	80090b2 <_strtoul_l.constprop.0+0xa2>
 8009076:	4580      	cmp	r8, r0
 8009078:	d31b      	bcc.n	80090b2 <_strtoul_l.constprop.0+0xa2>
 800907a:	d101      	bne.n	8009080 <_strtoul_l.constprop.0+0x70>
 800907c:	45a1      	cmp	r9, r4
 800907e:	db18      	blt.n	80090b2 <_strtoul_l.constprop.0+0xa2>
 8009080:	fb00 4003 	mla	r0, r0, r3, r4
 8009084:	2701      	movs	r7, #1
 8009086:	f815 4b01 	ldrb.w	r4, [r5], #1
 800908a:	e7ea      	b.n	8009062 <_strtoul_l.constprop.0+0x52>
 800908c:	2c2b      	cmp	r4, #43	; 0x2b
 800908e:	bf04      	itt	eq
 8009090:	782c      	ldrbeq	r4, [r5, #0]
 8009092:	1c85      	addeq	r5, r0, #2
 8009094:	e7cd      	b.n	8009032 <_strtoul_l.constprop.0+0x22>
 8009096:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800909a:	f1bc 0f19 	cmp.w	ip, #25
 800909e:	d801      	bhi.n	80090a4 <_strtoul_l.constprop.0+0x94>
 80090a0:	3c37      	subs	r4, #55	; 0x37
 80090a2:	e7e4      	b.n	800906e <_strtoul_l.constprop.0+0x5e>
 80090a4:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 80090a8:	f1bc 0f19 	cmp.w	ip, #25
 80090ac:	d804      	bhi.n	80090b8 <_strtoul_l.constprop.0+0xa8>
 80090ae:	3c57      	subs	r4, #87	; 0x57
 80090b0:	e7dd      	b.n	800906e <_strtoul_l.constprop.0+0x5e>
 80090b2:	f04f 37ff 	mov.w	r7, #4294967295
 80090b6:	e7e6      	b.n	8009086 <_strtoul_l.constprop.0+0x76>
 80090b8:	2f00      	cmp	r7, #0
 80090ba:	da07      	bge.n	80090cc <_strtoul_l.constprop.0+0xbc>
 80090bc:	2322      	movs	r3, #34	; 0x22
 80090be:	f8ce 3000 	str.w	r3, [lr]
 80090c2:	f04f 30ff 	mov.w	r0, #4294967295
 80090c6:	b932      	cbnz	r2, 80090d6 <_strtoul_l.constprop.0+0xc6>
 80090c8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80090cc:	b106      	cbz	r6, 80090d0 <_strtoul_l.constprop.0+0xc0>
 80090ce:	4240      	negs	r0, r0
 80090d0:	2a00      	cmp	r2, #0
 80090d2:	d0f9      	beq.n	80090c8 <_strtoul_l.constprop.0+0xb8>
 80090d4:	b107      	cbz	r7, 80090d8 <_strtoul_l.constprop.0+0xc8>
 80090d6:	1e69      	subs	r1, r5, #1
 80090d8:	6011      	str	r1, [r2, #0]
 80090da:	e7f5      	b.n	80090c8 <_strtoul_l.constprop.0+0xb8>
 80090dc:	2430      	movs	r4, #48	; 0x30
 80090de:	2b00      	cmp	r3, #0
 80090e0:	d1b5      	bne.n	800904e <_strtoul_l.constprop.0+0x3e>
 80090e2:	2308      	movs	r3, #8
 80090e4:	e7b3      	b.n	800904e <_strtoul_l.constprop.0+0x3e>
 80090e6:	2c30      	cmp	r4, #48	; 0x30
 80090e8:	d0a9      	beq.n	800903e <_strtoul_l.constprop.0+0x2e>
 80090ea:	230a      	movs	r3, #10
 80090ec:	e7af      	b.n	800904e <_strtoul_l.constprop.0+0x3e>
 80090ee:	bf00      	nop
 80090f0:	08009f89 	.word	0x08009f89

080090f4 <_strtoul_r>:
 80090f4:	f7ff bf8c 	b.w	8009010 <_strtoul_l.constprop.0>

080090f8 <__submore>:
 80090f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80090fc:	460c      	mov	r4, r1
 80090fe:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8009100:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009104:	4299      	cmp	r1, r3
 8009106:	d11d      	bne.n	8009144 <__submore+0x4c>
 8009108:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800910c:	f7ff fa14 	bl	8008538 <_malloc_r>
 8009110:	b918      	cbnz	r0, 800911a <__submore+0x22>
 8009112:	f04f 30ff 	mov.w	r0, #4294967295
 8009116:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800911a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800911e:	63a3      	str	r3, [r4, #56]	; 0x38
 8009120:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8009124:	6360      	str	r0, [r4, #52]	; 0x34
 8009126:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800912a:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800912e:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8009132:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8009136:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800913a:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800913e:	6020      	str	r0, [r4, #0]
 8009140:	2000      	movs	r0, #0
 8009142:	e7e8      	b.n	8009116 <__submore+0x1e>
 8009144:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8009146:	0077      	lsls	r7, r6, #1
 8009148:	463a      	mov	r2, r7
 800914a:	f000 fa2d 	bl	80095a8 <_realloc_r>
 800914e:	4605      	mov	r5, r0
 8009150:	2800      	cmp	r0, #0
 8009152:	d0de      	beq.n	8009112 <__submore+0x1a>
 8009154:	eb00 0806 	add.w	r8, r0, r6
 8009158:	4601      	mov	r1, r0
 800915a:	4632      	mov	r2, r6
 800915c:	4640      	mov	r0, r8
 800915e:	f7fe fc99 	bl	8007a94 <memcpy>
 8009162:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8009166:	f8c4 8000 	str.w	r8, [r4]
 800916a:	e7e9      	b.n	8009140 <__submore+0x48>

0800916c <__ascii_wctomb>:
 800916c:	b149      	cbz	r1, 8009182 <__ascii_wctomb+0x16>
 800916e:	2aff      	cmp	r2, #255	; 0xff
 8009170:	bf85      	ittet	hi
 8009172:	238a      	movhi	r3, #138	; 0x8a
 8009174:	6003      	strhi	r3, [r0, #0]
 8009176:	700a      	strbls	r2, [r1, #0]
 8009178:	f04f 30ff 	movhi.w	r0, #4294967295
 800917c:	bf98      	it	ls
 800917e:	2001      	movls	r0, #1
 8009180:	4770      	bx	lr
 8009182:	4608      	mov	r0, r1
 8009184:	4770      	bx	lr
	...

08009188 <__assert_func>:
 8009188:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800918a:	4614      	mov	r4, r2
 800918c:	461a      	mov	r2, r3
 800918e:	4b09      	ldr	r3, [pc, #36]	; (80091b4 <__assert_func+0x2c>)
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	4605      	mov	r5, r0
 8009194:	68d8      	ldr	r0, [r3, #12]
 8009196:	b14c      	cbz	r4, 80091ac <__assert_func+0x24>
 8009198:	4b07      	ldr	r3, [pc, #28]	; (80091b8 <__assert_func+0x30>)
 800919a:	9100      	str	r1, [sp, #0]
 800919c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80091a0:	4906      	ldr	r1, [pc, #24]	; (80091bc <__assert_func+0x34>)
 80091a2:	462b      	mov	r3, r5
 80091a4:	f000 f9a6 	bl	80094f4 <fiprintf>
 80091a8:	f000 fc46 	bl	8009a38 <abort>
 80091ac:	4b04      	ldr	r3, [pc, #16]	; (80091c0 <__assert_func+0x38>)
 80091ae:	461c      	mov	r4, r3
 80091b0:	e7f3      	b.n	800919a <__assert_func+0x12>
 80091b2:	bf00      	nop
 80091b4:	2000001c 	.word	0x2000001c
 80091b8:	0800a318 	.word	0x0800a318
 80091bc:	0800a325 	.word	0x0800a325
 80091c0:	0800a353 	.word	0x0800a353

080091c4 <__sflush_r>:
 80091c4:	898a      	ldrh	r2, [r1, #12]
 80091c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80091ca:	4605      	mov	r5, r0
 80091cc:	0710      	lsls	r0, r2, #28
 80091ce:	460c      	mov	r4, r1
 80091d0:	d458      	bmi.n	8009284 <__sflush_r+0xc0>
 80091d2:	684b      	ldr	r3, [r1, #4]
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	dc05      	bgt.n	80091e4 <__sflush_r+0x20>
 80091d8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80091da:	2b00      	cmp	r3, #0
 80091dc:	dc02      	bgt.n	80091e4 <__sflush_r+0x20>
 80091de:	2000      	movs	r0, #0
 80091e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80091e4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80091e6:	2e00      	cmp	r6, #0
 80091e8:	d0f9      	beq.n	80091de <__sflush_r+0x1a>
 80091ea:	2300      	movs	r3, #0
 80091ec:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80091f0:	682f      	ldr	r7, [r5, #0]
 80091f2:	602b      	str	r3, [r5, #0]
 80091f4:	d032      	beq.n	800925c <__sflush_r+0x98>
 80091f6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80091f8:	89a3      	ldrh	r3, [r4, #12]
 80091fa:	075a      	lsls	r2, r3, #29
 80091fc:	d505      	bpl.n	800920a <__sflush_r+0x46>
 80091fe:	6863      	ldr	r3, [r4, #4]
 8009200:	1ac0      	subs	r0, r0, r3
 8009202:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009204:	b10b      	cbz	r3, 800920a <__sflush_r+0x46>
 8009206:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009208:	1ac0      	subs	r0, r0, r3
 800920a:	2300      	movs	r3, #0
 800920c:	4602      	mov	r2, r0
 800920e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009210:	6a21      	ldr	r1, [r4, #32]
 8009212:	4628      	mov	r0, r5
 8009214:	47b0      	blx	r6
 8009216:	1c43      	adds	r3, r0, #1
 8009218:	89a3      	ldrh	r3, [r4, #12]
 800921a:	d106      	bne.n	800922a <__sflush_r+0x66>
 800921c:	6829      	ldr	r1, [r5, #0]
 800921e:	291d      	cmp	r1, #29
 8009220:	d82c      	bhi.n	800927c <__sflush_r+0xb8>
 8009222:	4a2a      	ldr	r2, [pc, #168]	; (80092cc <__sflush_r+0x108>)
 8009224:	40ca      	lsrs	r2, r1
 8009226:	07d6      	lsls	r6, r2, #31
 8009228:	d528      	bpl.n	800927c <__sflush_r+0xb8>
 800922a:	2200      	movs	r2, #0
 800922c:	6062      	str	r2, [r4, #4]
 800922e:	04d9      	lsls	r1, r3, #19
 8009230:	6922      	ldr	r2, [r4, #16]
 8009232:	6022      	str	r2, [r4, #0]
 8009234:	d504      	bpl.n	8009240 <__sflush_r+0x7c>
 8009236:	1c42      	adds	r2, r0, #1
 8009238:	d101      	bne.n	800923e <__sflush_r+0x7a>
 800923a:	682b      	ldr	r3, [r5, #0]
 800923c:	b903      	cbnz	r3, 8009240 <__sflush_r+0x7c>
 800923e:	6560      	str	r0, [r4, #84]	; 0x54
 8009240:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009242:	602f      	str	r7, [r5, #0]
 8009244:	2900      	cmp	r1, #0
 8009246:	d0ca      	beq.n	80091de <__sflush_r+0x1a>
 8009248:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800924c:	4299      	cmp	r1, r3
 800924e:	d002      	beq.n	8009256 <__sflush_r+0x92>
 8009250:	4628      	mov	r0, r5
 8009252:	f7ff f905 	bl	8008460 <_free_r>
 8009256:	2000      	movs	r0, #0
 8009258:	6360      	str	r0, [r4, #52]	; 0x34
 800925a:	e7c1      	b.n	80091e0 <__sflush_r+0x1c>
 800925c:	6a21      	ldr	r1, [r4, #32]
 800925e:	2301      	movs	r3, #1
 8009260:	4628      	mov	r0, r5
 8009262:	47b0      	blx	r6
 8009264:	1c41      	adds	r1, r0, #1
 8009266:	d1c7      	bne.n	80091f8 <__sflush_r+0x34>
 8009268:	682b      	ldr	r3, [r5, #0]
 800926a:	2b00      	cmp	r3, #0
 800926c:	d0c4      	beq.n	80091f8 <__sflush_r+0x34>
 800926e:	2b1d      	cmp	r3, #29
 8009270:	d001      	beq.n	8009276 <__sflush_r+0xb2>
 8009272:	2b16      	cmp	r3, #22
 8009274:	d101      	bne.n	800927a <__sflush_r+0xb6>
 8009276:	602f      	str	r7, [r5, #0]
 8009278:	e7b1      	b.n	80091de <__sflush_r+0x1a>
 800927a:	89a3      	ldrh	r3, [r4, #12]
 800927c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009280:	81a3      	strh	r3, [r4, #12]
 8009282:	e7ad      	b.n	80091e0 <__sflush_r+0x1c>
 8009284:	690f      	ldr	r7, [r1, #16]
 8009286:	2f00      	cmp	r7, #0
 8009288:	d0a9      	beq.n	80091de <__sflush_r+0x1a>
 800928a:	0793      	lsls	r3, r2, #30
 800928c:	680e      	ldr	r6, [r1, #0]
 800928e:	bf08      	it	eq
 8009290:	694b      	ldreq	r3, [r1, #20]
 8009292:	600f      	str	r7, [r1, #0]
 8009294:	bf18      	it	ne
 8009296:	2300      	movne	r3, #0
 8009298:	eba6 0807 	sub.w	r8, r6, r7
 800929c:	608b      	str	r3, [r1, #8]
 800929e:	f1b8 0f00 	cmp.w	r8, #0
 80092a2:	dd9c      	ble.n	80091de <__sflush_r+0x1a>
 80092a4:	6a21      	ldr	r1, [r4, #32]
 80092a6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80092a8:	4643      	mov	r3, r8
 80092aa:	463a      	mov	r2, r7
 80092ac:	4628      	mov	r0, r5
 80092ae:	47b0      	blx	r6
 80092b0:	2800      	cmp	r0, #0
 80092b2:	dc06      	bgt.n	80092c2 <__sflush_r+0xfe>
 80092b4:	89a3      	ldrh	r3, [r4, #12]
 80092b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80092ba:	81a3      	strh	r3, [r4, #12]
 80092bc:	f04f 30ff 	mov.w	r0, #4294967295
 80092c0:	e78e      	b.n	80091e0 <__sflush_r+0x1c>
 80092c2:	4407      	add	r7, r0
 80092c4:	eba8 0800 	sub.w	r8, r8, r0
 80092c8:	e7e9      	b.n	800929e <__sflush_r+0xda>
 80092ca:	bf00      	nop
 80092cc:	20400001 	.word	0x20400001

080092d0 <_fflush_r>:
 80092d0:	b538      	push	{r3, r4, r5, lr}
 80092d2:	690b      	ldr	r3, [r1, #16]
 80092d4:	4605      	mov	r5, r0
 80092d6:	460c      	mov	r4, r1
 80092d8:	b913      	cbnz	r3, 80092e0 <_fflush_r+0x10>
 80092da:	2500      	movs	r5, #0
 80092dc:	4628      	mov	r0, r5
 80092de:	bd38      	pop	{r3, r4, r5, pc}
 80092e0:	b118      	cbz	r0, 80092ea <_fflush_r+0x1a>
 80092e2:	6983      	ldr	r3, [r0, #24]
 80092e4:	b90b      	cbnz	r3, 80092ea <_fflush_r+0x1a>
 80092e6:	f000 f887 	bl	80093f8 <__sinit>
 80092ea:	4b14      	ldr	r3, [pc, #80]	; (800933c <_fflush_r+0x6c>)
 80092ec:	429c      	cmp	r4, r3
 80092ee:	d11b      	bne.n	8009328 <_fflush_r+0x58>
 80092f0:	686c      	ldr	r4, [r5, #4]
 80092f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	d0ef      	beq.n	80092da <_fflush_r+0xa>
 80092fa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80092fc:	07d0      	lsls	r0, r2, #31
 80092fe:	d404      	bmi.n	800930a <_fflush_r+0x3a>
 8009300:	0599      	lsls	r1, r3, #22
 8009302:	d402      	bmi.n	800930a <_fflush_r+0x3a>
 8009304:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009306:	f000 f927 	bl	8009558 <__retarget_lock_acquire_recursive>
 800930a:	4628      	mov	r0, r5
 800930c:	4621      	mov	r1, r4
 800930e:	f7ff ff59 	bl	80091c4 <__sflush_r>
 8009312:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009314:	07da      	lsls	r2, r3, #31
 8009316:	4605      	mov	r5, r0
 8009318:	d4e0      	bmi.n	80092dc <_fflush_r+0xc>
 800931a:	89a3      	ldrh	r3, [r4, #12]
 800931c:	059b      	lsls	r3, r3, #22
 800931e:	d4dd      	bmi.n	80092dc <_fflush_r+0xc>
 8009320:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009322:	f000 f91a 	bl	800955a <__retarget_lock_release_recursive>
 8009326:	e7d9      	b.n	80092dc <_fflush_r+0xc>
 8009328:	4b05      	ldr	r3, [pc, #20]	; (8009340 <_fflush_r+0x70>)
 800932a:	429c      	cmp	r4, r3
 800932c:	d101      	bne.n	8009332 <_fflush_r+0x62>
 800932e:	68ac      	ldr	r4, [r5, #8]
 8009330:	e7df      	b.n	80092f2 <_fflush_r+0x22>
 8009332:	4b04      	ldr	r3, [pc, #16]	; (8009344 <_fflush_r+0x74>)
 8009334:	429c      	cmp	r4, r3
 8009336:	bf08      	it	eq
 8009338:	68ec      	ldreq	r4, [r5, #12]
 800933a:	e7da      	b.n	80092f2 <_fflush_r+0x22>
 800933c:	0800a374 	.word	0x0800a374
 8009340:	0800a394 	.word	0x0800a394
 8009344:	0800a354 	.word	0x0800a354

08009348 <std>:
 8009348:	2300      	movs	r3, #0
 800934a:	b510      	push	{r4, lr}
 800934c:	4604      	mov	r4, r0
 800934e:	e9c0 3300 	strd	r3, r3, [r0]
 8009352:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009356:	6083      	str	r3, [r0, #8]
 8009358:	8181      	strh	r1, [r0, #12]
 800935a:	6643      	str	r3, [r0, #100]	; 0x64
 800935c:	81c2      	strh	r2, [r0, #14]
 800935e:	6183      	str	r3, [r0, #24]
 8009360:	4619      	mov	r1, r3
 8009362:	2208      	movs	r2, #8
 8009364:	305c      	adds	r0, #92	; 0x5c
 8009366:	f7fb fb91 	bl	8004a8c <memset>
 800936a:	4b05      	ldr	r3, [pc, #20]	; (8009380 <std+0x38>)
 800936c:	6263      	str	r3, [r4, #36]	; 0x24
 800936e:	4b05      	ldr	r3, [pc, #20]	; (8009384 <std+0x3c>)
 8009370:	62a3      	str	r3, [r4, #40]	; 0x28
 8009372:	4b05      	ldr	r3, [pc, #20]	; (8009388 <std+0x40>)
 8009374:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009376:	4b05      	ldr	r3, [pc, #20]	; (800938c <std+0x44>)
 8009378:	6224      	str	r4, [r4, #32]
 800937a:	6323      	str	r3, [r4, #48]	; 0x30
 800937c:	bd10      	pop	{r4, pc}
 800937e:	bf00      	nop
 8009380:	08005835 	.word	0x08005835
 8009384:	0800585b 	.word	0x0800585b
 8009388:	08005893 	.word	0x08005893
 800938c:	080058b7 	.word	0x080058b7

08009390 <_cleanup_r>:
 8009390:	4901      	ldr	r1, [pc, #4]	; (8009398 <_cleanup_r+0x8>)
 8009392:	f000 b8c1 	b.w	8009518 <_fwalk_reent>
 8009396:	bf00      	nop
 8009398:	080092d1 	.word	0x080092d1

0800939c <__sfmoreglue>:
 800939c:	b570      	push	{r4, r5, r6, lr}
 800939e:	2268      	movs	r2, #104	; 0x68
 80093a0:	1e4d      	subs	r5, r1, #1
 80093a2:	4355      	muls	r5, r2
 80093a4:	460e      	mov	r6, r1
 80093a6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80093aa:	f7ff f8c5 	bl	8008538 <_malloc_r>
 80093ae:	4604      	mov	r4, r0
 80093b0:	b140      	cbz	r0, 80093c4 <__sfmoreglue+0x28>
 80093b2:	2100      	movs	r1, #0
 80093b4:	e9c0 1600 	strd	r1, r6, [r0]
 80093b8:	300c      	adds	r0, #12
 80093ba:	60a0      	str	r0, [r4, #8]
 80093bc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80093c0:	f7fb fb64 	bl	8004a8c <memset>
 80093c4:	4620      	mov	r0, r4
 80093c6:	bd70      	pop	{r4, r5, r6, pc}

080093c8 <__sfp_lock_acquire>:
 80093c8:	4801      	ldr	r0, [pc, #4]	; (80093d0 <__sfp_lock_acquire+0x8>)
 80093ca:	f000 b8c5 	b.w	8009558 <__retarget_lock_acquire_recursive>
 80093ce:	bf00      	nop
 80093d0:	20000c55 	.word	0x20000c55

080093d4 <__sfp_lock_release>:
 80093d4:	4801      	ldr	r0, [pc, #4]	; (80093dc <__sfp_lock_release+0x8>)
 80093d6:	f000 b8c0 	b.w	800955a <__retarget_lock_release_recursive>
 80093da:	bf00      	nop
 80093dc:	20000c55 	.word	0x20000c55

080093e0 <__sinit_lock_acquire>:
 80093e0:	4801      	ldr	r0, [pc, #4]	; (80093e8 <__sinit_lock_acquire+0x8>)
 80093e2:	f000 b8b9 	b.w	8009558 <__retarget_lock_acquire_recursive>
 80093e6:	bf00      	nop
 80093e8:	20000c56 	.word	0x20000c56

080093ec <__sinit_lock_release>:
 80093ec:	4801      	ldr	r0, [pc, #4]	; (80093f4 <__sinit_lock_release+0x8>)
 80093ee:	f000 b8b4 	b.w	800955a <__retarget_lock_release_recursive>
 80093f2:	bf00      	nop
 80093f4:	20000c56 	.word	0x20000c56

080093f8 <__sinit>:
 80093f8:	b510      	push	{r4, lr}
 80093fa:	4604      	mov	r4, r0
 80093fc:	f7ff fff0 	bl	80093e0 <__sinit_lock_acquire>
 8009400:	69a3      	ldr	r3, [r4, #24]
 8009402:	b11b      	cbz	r3, 800940c <__sinit+0x14>
 8009404:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009408:	f7ff bff0 	b.w	80093ec <__sinit_lock_release>
 800940c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009410:	6523      	str	r3, [r4, #80]	; 0x50
 8009412:	4b13      	ldr	r3, [pc, #76]	; (8009460 <__sinit+0x68>)
 8009414:	4a13      	ldr	r2, [pc, #76]	; (8009464 <__sinit+0x6c>)
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	62a2      	str	r2, [r4, #40]	; 0x28
 800941a:	42a3      	cmp	r3, r4
 800941c:	bf04      	itt	eq
 800941e:	2301      	moveq	r3, #1
 8009420:	61a3      	streq	r3, [r4, #24]
 8009422:	4620      	mov	r0, r4
 8009424:	f000 f820 	bl	8009468 <__sfp>
 8009428:	6060      	str	r0, [r4, #4]
 800942a:	4620      	mov	r0, r4
 800942c:	f000 f81c 	bl	8009468 <__sfp>
 8009430:	60a0      	str	r0, [r4, #8]
 8009432:	4620      	mov	r0, r4
 8009434:	f000 f818 	bl	8009468 <__sfp>
 8009438:	2200      	movs	r2, #0
 800943a:	60e0      	str	r0, [r4, #12]
 800943c:	2104      	movs	r1, #4
 800943e:	6860      	ldr	r0, [r4, #4]
 8009440:	f7ff ff82 	bl	8009348 <std>
 8009444:	68a0      	ldr	r0, [r4, #8]
 8009446:	2201      	movs	r2, #1
 8009448:	2109      	movs	r1, #9
 800944a:	f7ff ff7d 	bl	8009348 <std>
 800944e:	68e0      	ldr	r0, [r4, #12]
 8009450:	2202      	movs	r2, #2
 8009452:	2112      	movs	r1, #18
 8009454:	f7ff ff78 	bl	8009348 <std>
 8009458:	2301      	movs	r3, #1
 800945a:	61a3      	str	r3, [r4, #24]
 800945c:	e7d2      	b.n	8009404 <__sinit+0xc>
 800945e:	bf00      	nop
 8009460:	08009ef8 	.word	0x08009ef8
 8009464:	08009391 	.word	0x08009391

08009468 <__sfp>:
 8009468:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800946a:	4607      	mov	r7, r0
 800946c:	f7ff ffac 	bl	80093c8 <__sfp_lock_acquire>
 8009470:	4b1e      	ldr	r3, [pc, #120]	; (80094ec <__sfp+0x84>)
 8009472:	681e      	ldr	r6, [r3, #0]
 8009474:	69b3      	ldr	r3, [r6, #24]
 8009476:	b913      	cbnz	r3, 800947e <__sfp+0x16>
 8009478:	4630      	mov	r0, r6
 800947a:	f7ff ffbd 	bl	80093f8 <__sinit>
 800947e:	3648      	adds	r6, #72	; 0x48
 8009480:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009484:	3b01      	subs	r3, #1
 8009486:	d503      	bpl.n	8009490 <__sfp+0x28>
 8009488:	6833      	ldr	r3, [r6, #0]
 800948a:	b30b      	cbz	r3, 80094d0 <__sfp+0x68>
 800948c:	6836      	ldr	r6, [r6, #0]
 800948e:	e7f7      	b.n	8009480 <__sfp+0x18>
 8009490:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009494:	b9d5      	cbnz	r5, 80094cc <__sfp+0x64>
 8009496:	4b16      	ldr	r3, [pc, #88]	; (80094f0 <__sfp+0x88>)
 8009498:	60e3      	str	r3, [r4, #12]
 800949a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800949e:	6665      	str	r5, [r4, #100]	; 0x64
 80094a0:	f000 f859 	bl	8009556 <__retarget_lock_init_recursive>
 80094a4:	f7ff ff96 	bl	80093d4 <__sfp_lock_release>
 80094a8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80094ac:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80094b0:	6025      	str	r5, [r4, #0]
 80094b2:	61a5      	str	r5, [r4, #24]
 80094b4:	2208      	movs	r2, #8
 80094b6:	4629      	mov	r1, r5
 80094b8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80094bc:	f7fb fae6 	bl	8004a8c <memset>
 80094c0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80094c4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80094c8:	4620      	mov	r0, r4
 80094ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80094cc:	3468      	adds	r4, #104	; 0x68
 80094ce:	e7d9      	b.n	8009484 <__sfp+0x1c>
 80094d0:	2104      	movs	r1, #4
 80094d2:	4638      	mov	r0, r7
 80094d4:	f7ff ff62 	bl	800939c <__sfmoreglue>
 80094d8:	4604      	mov	r4, r0
 80094da:	6030      	str	r0, [r6, #0]
 80094dc:	2800      	cmp	r0, #0
 80094de:	d1d5      	bne.n	800948c <__sfp+0x24>
 80094e0:	f7ff ff78 	bl	80093d4 <__sfp_lock_release>
 80094e4:	230c      	movs	r3, #12
 80094e6:	603b      	str	r3, [r7, #0]
 80094e8:	e7ee      	b.n	80094c8 <__sfp+0x60>
 80094ea:	bf00      	nop
 80094ec:	08009ef8 	.word	0x08009ef8
 80094f0:	ffff0001 	.word	0xffff0001

080094f4 <fiprintf>:
 80094f4:	b40e      	push	{r1, r2, r3}
 80094f6:	b503      	push	{r0, r1, lr}
 80094f8:	4601      	mov	r1, r0
 80094fa:	ab03      	add	r3, sp, #12
 80094fc:	4805      	ldr	r0, [pc, #20]	; (8009514 <fiprintf+0x20>)
 80094fe:	f853 2b04 	ldr.w	r2, [r3], #4
 8009502:	6800      	ldr	r0, [r0, #0]
 8009504:	9301      	str	r3, [sp, #4]
 8009506:	f000 f8a7 	bl	8009658 <_vfiprintf_r>
 800950a:	b002      	add	sp, #8
 800950c:	f85d eb04 	ldr.w	lr, [sp], #4
 8009510:	b003      	add	sp, #12
 8009512:	4770      	bx	lr
 8009514:	2000001c 	.word	0x2000001c

08009518 <_fwalk_reent>:
 8009518:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800951c:	4606      	mov	r6, r0
 800951e:	4688      	mov	r8, r1
 8009520:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009524:	2700      	movs	r7, #0
 8009526:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800952a:	f1b9 0901 	subs.w	r9, r9, #1
 800952e:	d505      	bpl.n	800953c <_fwalk_reent+0x24>
 8009530:	6824      	ldr	r4, [r4, #0]
 8009532:	2c00      	cmp	r4, #0
 8009534:	d1f7      	bne.n	8009526 <_fwalk_reent+0xe>
 8009536:	4638      	mov	r0, r7
 8009538:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800953c:	89ab      	ldrh	r3, [r5, #12]
 800953e:	2b01      	cmp	r3, #1
 8009540:	d907      	bls.n	8009552 <_fwalk_reent+0x3a>
 8009542:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009546:	3301      	adds	r3, #1
 8009548:	d003      	beq.n	8009552 <_fwalk_reent+0x3a>
 800954a:	4629      	mov	r1, r5
 800954c:	4630      	mov	r0, r6
 800954e:	47c0      	blx	r8
 8009550:	4307      	orrs	r7, r0
 8009552:	3568      	adds	r5, #104	; 0x68
 8009554:	e7e9      	b.n	800952a <_fwalk_reent+0x12>

08009556 <__retarget_lock_init_recursive>:
 8009556:	4770      	bx	lr

08009558 <__retarget_lock_acquire_recursive>:
 8009558:	4770      	bx	lr

0800955a <__retarget_lock_release_recursive>:
 800955a:	4770      	bx	lr

0800955c <memmove>:
 800955c:	4288      	cmp	r0, r1
 800955e:	b510      	push	{r4, lr}
 8009560:	eb01 0402 	add.w	r4, r1, r2
 8009564:	d902      	bls.n	800956c <memmove+0x10>
 8009566:	4284      	cmp	r4, r0
 8009568:	4623      	mov	r3, r4
 800956a:	d807      	bhi.n	800957c <memmove+0x20>
 800956c:	1e43      	subs	r3, r0, #1
 800956e:	42a1      	cmp	r1, r4
 8009570:	d008      	beq.n	8009584 <memmove+0x28>
 8009572:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009576:	f803 2f01 	strb.w	r2, [r3, #1]!
 800957a:	e7f8      	b.n	800956e <memmove+0x12>
 800957c:	4402      	add	r2, r0
 800957e:	4601      	mov	r1, r0
 8009580:	428a      	cmp	r2, r1
 8009582:	d100      	bne.n	8009586 <memmove+0x2a>
 8009584:	bd10      	pop	{r4, pc}
 8009586:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800958a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800958e:	e7f7      	b.n	8009580 <memmove+0x24>

08009590 <__malloc_lock>:
 8009590:	4801      	ldr	r0, [pc, #4]	; (8009598 <__malloc_lock+0x8>)
 8009592:	f7ff bfe1 	b.w	8009558 <__retarget_lock_acquire_recursive>
 8009596:	bf00      	nop
 8009598:	20000c54 	.word	0x20000c54

0800959c <__malloc_unlock>:
 800959c:	4801      	ldr	r0, [pc, #4]	; (80095a4 <__malloc_unlock+0x8>)
 800959e:	f7ff bfdc 	b.w	800955a <__retarget_lock_release_recursive>
 80095a2:	bf00      	nop
 80095a4:	20000c54 	.word	0x20000c54

080095a8 <_realloc_r>:
 80095a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80095ac:	4680      	mov	r8, r0
 80095ae:	4614      	mov	r4, r2
 80095b0:	460e      	mov	r6, r1
 80095b2:	b921      	cbnz	r1, 80095be <_realloc_r+0x16>
 80095b4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80095b8:	4611      	mov	r1, r2
 80095ba:	f7fe bfbd 	b.w	8008538 <_malloc_r>
 80095be:	b92a      	cbnz	r2, 80095cc <_realloc_r+0x24>
 80095c0:	f7fe ff4e 	bl	8008460 <_free_r>
 80095c4:	4625      	mov	r5, r4
 80095c6:	4628      	mov	r0, r5
 80095c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80095cc:	f000 faa0 	bl	8009b10 <_malloc_usable_size_r>
 80095d0:	4284      	cmp	r4, r0
 80095d2:	4607      	mov	r7, r0
 80095d4:	d802      	bhi.n	80095dc <_realloc_r+0x34>
 80095d6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80095da:	d812      	bhi.n	8009602 <_realloc_r+0x5a>
 80095dc:	4621      	mov	r1, r4
 80095de:	4640      	mov	r0, r8
 80095e0:	f7fe ffaa 	bl	8008538 <_malloc_r>
 80095e4:	4605      	mov	r5, r0
 80095e6:	2800      	cmp	r0, #0
 80095e8:	d0ed      	beq.n	80095c6 <_realloc_r+0x1e>
 80095ea:	42bc      	cmp	r4, r7
 80095ec:	4622      	mov	r2, r4
 80095ee:	4631      	mov	r1, r6
 80095f0:	bf28      	it	cs
 80095f2:	463a      	movcs	r2, r7
 80095f4:	f7fe fa4e 	bl	8007a94 <memcpy>
 80095f8:	4631      	mov	r1, r6
 80095fa:	4640      	mov	r0, r8
 80095fc:	f7fe ff30 	bl	8008460 <_free_r>
 8009600:	e7e1      	b.n	80095c6 <_realloc_r+0x1e>
 8009602:	4635      	mov	r5, r6
 8009604:	e7df      	b.n	80095c6 <_realloc_r+0x1e>

08009606 <__sfputc_r>:
 8009606:	6893      	ldr	r3, [r2, #8]
 8009608:	3b01      	subs	r3, #1
 800960a:	2b00      	cmp	r3, #0
 800960c:	b410      	push	{r4}
 800960e:	6093      	str	r3, [r2, #8]
 8009610:	da08      	bge.n	8009624 <__sfputc_r+0x1e>
 8009612:	6994      	ldr	r4, [r2, #24]
 8009614:	42a3      	cmp	r3, r4
 8009616:	db01      	blt.n	800961c <__sfputc_r+0x16>
 8009618:	290a      	cmp	r1, #10
 800961a:	d103      	bne.n	8009624 <__sfputc_r+0x1e>
 800961c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009620:	f000 b94a 	b.w	80098b8 <__swbuf_r>
 8009624:	6813      	ldr	r3, [r2, #0]
 8009626:	1c58      	adds	r0, r3, #1
 8009628:	6010      	str	r0, [r2, #0]
 800962a:	7019      	strb	r1, [r3, #0]
 800962c:	4608      	mov	r0, r1
 800962e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009632:	4770      	bx	lr

08009634 <__sfputs_r>:
 8009634:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009636:	4606      	mov	r6, r0
 8009638:	460f      	mov	r7, r1
 800963a:	4614      	mov	r4, r2
 800963c:	18d5      	adds	r5, r2, r3
 800963e:	42ac      	cmp	r4, r5
 8009640:	d101      	bne.n	8009646 <__sfputs_r+0x12>
 8009642:	2000      	movs	r0, #0
 8009644:	e007      	b.n	8009656 <__sfputs_r+0x22>
 8009646:	f814 1b01 	ldrb.w	r1, [r4], #1
 800964a:	463a      	mov	r2, r7
 800964c:	4630      	mov	r0, r6
 800964e:	f7ff ffda 	bl	8009606 <__sfputc_r>
 8009652:	1c43      	adds	r3, r0, #1
 8009654:	d1f3      	bne.n	800963e <__sfputs_r+0xa>
 8009656:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009658 <_vfiprintf_r>:
 8009658:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800965c:	460d      	mov	r5, r1
 800965e:	b09d      	sub	sp, #116	; 0x74
 8009660:	4614      	mov	r4, r2
 8009662:	4698      	mov	r8, r3
 8009664:	4606      	mov	r6, r0
 8009666:	b118      	cbz	r0, 8009670 <_vfiprintf_r+0x18>
 8009668:	6983      	ldr	r3, [r0, #24]
 800966a:	b90b      	cbnz	r3, 8009670 <_vfiprintf_r+0x18>
 800966c:	f7ff fec4 	bl	80093f8 <__sinit>
 8009670:	4b89      	ldr	r3, [pc, #548]	; (8009898 <_vfiprintf_r+0x240>)
 8009672:	429d      	cmp	r5, r3
 8009674:	d11b      	bne.n	80096ae <_vfiprintf_r+0x56>
 8009676:	6875      	ldr	r5, [r6, #4]
 8009678:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800967a:	07d9      	lsls	r1, r3, #31
 800967c:	d405      	bmi.n	800968a <_vfiprintf_r+0x32>
 800967e:	89ab      	ldrh	r3, [r5, #12]
 8009680:	059a      	lsls	r2, r3, #22
 8009682:	d402      	bmi.n	800968a <_vfiprintf_r+0x32>
 8009684:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009686:	f7ff ff67 	bl	8009558 <__retarget_lock_acquire_recursive>
 800968a:	89ab      	ldrh	r3, [r5, #12]
 800968c:	071b      	lsls	r3, r3, #28
 800968e:	d501      	bpl.n	8009694 <_vfiprintf_r+0x3c>
 8009690:	692b      	ldr	r3, [r5, #16]
 8009692:	b9eb      	cbnz	r3, 80096d0 <_vfiprintf_r+0x78>
 8009694:	4629      	mov	r1, r5
 8009696:	4630      	mov	r0, r6
 8009698:	f000 f960 	bl	800995c <__swsetup_r>
 800969c:	b1c0      	cbz	r0, 80096d0 <_vfiprintf_r+0x78>
 800969e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80096a0:	07dc      	lsls	r4, r3, #31
 80096a2:	d50e      	bpl.n	80096c2 <_vfiprintf_r+0x6a>
 80096a4:	f04f 30ff 	mov.w	r0, #4294967295
 80096a8:	b01d      	add	sp, #116	; 0x74
 80096aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80096ae:	4b7b      	ldr	r3, [pc, #492]	; (800989c <_vfiprintf_r+0x244>)
 80096b0:	429d      	cmp	r5, r3
 80096b2:	d101      	bne.n	80096b8 <_vfiprintf_r+0x60>
 80096b4:	68b5      	ldr	r5, [r6, #8]
 80096b6:	e7df      	b.n	8009678 <_vfiprintf_r+0x20>
 80096b8:	4b79      	ldr	r3, [pc, #484]	; (80098a0 <_vfiprintf_r+0x248>)
 80096ba:	429d      	cmp	r5, r3
 80096bc:	bf08      	it	eq
 80096be:	68f5      	ldreq	r5, [r6, #12]
 80096c0:	e7da      	b.n	8009678 <_vfiprintf_r+0x20>
 80096c2:	89ab      	ldrh	r3, [r5, #12]
 80096c4:	0598      	lsls	r0, r3, #22
 80096c6:	d4ed      	bmi.n	80096a4 <_vfiprintf_r+0x4c>
 80096c8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80096ca:	f7ff ff46 	bl	800955a <__retarget_lock_release_recursive>
 80096ce:	e7e9      	b.n	80096a4 <_vfiprintf_r+0x4c>
 80096d0:	2300      	movs	r3, #0
 80096d2:	9309      	str	r3, [sp, #36]	; 0x24
 80096d4:	2320      	movs	r3, #32
 80096d6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80096da:	f8cd 800c 	str.w	r8, [sp, #12]
 80096de:	2330      	movs	r3, #48	; 0x30
 80096e0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80098a4 <_vfiprintf_r+0x24c>
 80096e4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80096e8:	f04f 0901 	mov.w	r9, #1
 80096ec:	4623      	mov	r3, r4
 80096ee:	469a      	mov	sl, r3
 80096f0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80096f4:	b10a      	cbz	r2, 80096fa <_vfiprintf_r+0xa2>
 80096f6:	2a25      	cmp	r2, #37	; 0x25
 80096f8:	d1f9      	bne.n	80096ee <_vfiprintf_r+0x96>
 80096fa:	ebba 0b04 	subs.w	fp, sl, r4
 80096fe:	d00b      	beq.n	8009718 <_vfiprintf_r+0xc0>
 8009700:	465b      	mov	r3, fp
 8009702:	4622      	mov	r2, r4
 8009704:	4629      	mov	r1, r5
 8009706:	4630      	mov	r0, r6
 8009708:	f7ff ff94 	bl	8009634 <__sfputs_r>
 800970c:	3001      	adds	r0, #1
 800970e:	f000 80aa 	beq.w	8009866 <_vfiprintf_r+0x20e>
 8009712:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009714:	445a      	add	r2, fp
 8009716:	9209      	str	r2, [sp, #36]	; 0x24
 8009718:	f89a 3000 	ldrb.w	r3, [sl]
 800971c:	2b00      	cmp	r3, #0
 800971e:	f000 80a2 	beq.w	8009866 <_vfiprintf_r+0x20e>
 8009722:	2300      	movs	r3, #0
 8009724:	f04f 32ff 	mov.w	r2, #4294967295
 8009728:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800972c:	f10a 0a01 	add.w	sl, sl, #1
 8009730:	9304      	str	r3, [sp, #16]
 8009732:	9307      	str	r3, [sp, #28]
 8009734:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009738:	931a      	str	r3, [sp, #104]	; 0x68
 800973a:	4654      	mov	r4, sl
 800973c:	2205      	movs	r2, #5
 800973e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009742:	4858      	ldr	r0, [pc, #352]	; (80098a4 <_vfiprintf_r+0x24c>)
 8009744:	f7f6 fd64 	bl	8000210 <memchr>
 8009748:	9a04      	ldr	r2, [sp, #16]
 800974a:	b9d8      	cbnz	r0, 8009784 <_vfiprintf_r+0x12c>
 800974c:	06d1      	lsls	r1, r2, #27
 800974e:	bf44      	itt	mi
 8009750:	2320      	movmi	r3, #32
 8009752:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009756:	0713      	lsls	r3, r2, #28
 8009758:	bf44      	itt	mi
 800975a:	232b      	movmi	r3, #43	; 0x2b
 800975c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009760:	f89a 3000 	ldrb.w	r3, [sl]
 8009764:	2b2a      	cmp	r3, #42	; 0x2a
 8009766:	d015      	beq.n	8009794 <_vfiprintf_r+0x13c>
 8009768:	9a07      	ldr	r2, [sp, #28]
 800976a:	4654      	mov	r4, sl
 800976c:	2000      	movs	r0, #0
 800976e:	f04f 0c0a 	mov.w	ip, #10
 8009772:	4621      	mov	r1, r4
 8009774:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009778:	3b30      	subs	r3, #48	; 0x30
 800977a:	2b09      	cmp	r3, #9
 800977c:	d94e      	bls.n	800981c <_vfiprintf_r+0x1c4>
 800977e:	b1b0      	cbz	r0, 80097ae <_vfiprintf_r+0x156>
 8009780:	9207      	str	r2, [sp, #28]
 8009782:	e014      	b.n	80097ae <_vfiprintf_r+0x156>
 8009784:	eba0 0308 	sub.w	r3, r0, r8
 8009788:	fa09 f303 	lsl.w	r3, r9, r3
 800978c:	4313      	orrs	r3, r2
 800978e:	9304      	str	r3, [sp, #16]
 8009790:	46a2      	mov	sl, r4
 8009792:	e7d2      	b.n	800973a <_vfiprintf_r+0xe2>
 8009794:	9b03      	ldr	r3, [sp, #12]
 8009796:	1d19      	adds	r1, r3, #4
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	9103      	str	r1, [sp, #12]
 800979c:	2b00      	cmp	r3, #0
 800979e:	bfbb      	ittet	lt
 80097a0:	425b      	neglt	r3, r3
 80097a2:	f042 0202 	orrlt.w	r2, r2, #2
 80097a6:	9307      	strge	r3, [sp, #28]
 80097a8:	9307      	strlt	r3, [sp, #28]
 80097aa:	bfb8      	it	lt
 80097ac:	9204      	strlt	r2, [sp, #16]
 80097ae:	7823      	ldrb	r3, [r4, #0]
 80097b0:	2b2e      	cmp	r3, #46	; 0x2e
 80097b2:	d10c      	bne.n	80097ce <_vfiprintf_r+0x176>
 80097b4:	7863      	ldrb	r3, [r4, #1]
 80097b6:	2b2a      	cmp	r3, #42	; 0x2a
 80097b8:	d135      	bne.n	8009826 <_vfiprintf_r+0x1ce>
 80097ba:	9b03      	ldr	r3, [sp, #12]
 80097bc:	1d1a      	adds	r2, r3, #4
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	9203      	str	r2, [sp, #12]
 80097c2:	2b00      	cmp	r3, #0
 80097c4:	bfb8      	it	lt
 80097c6:	f04f 33ff 	movlt.w	r3, #4294967295
 80097ca:	3402      	adds	r4, #2
 80097cc:	9305      	str	r3, [sp, #20]
 80097ce:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80098b4 <_vfiprintf_r+0x25c>
 80097d2:	7821      	ldrb	r1, [r4, #0]
 80097d4:	2203      	movs	r2, #3
 80097d6:	4650      	mov	r0, sl
 80097d8:	f7f6 fd1a 	bl	8000210 <memchr>
 80097dc:	b140      	cbz	r0, 80097f0 <_vfiprintf_r+0x198>
 80097de:	2340      	movs	r3, #64	; 0x40
 80097e0:	eba0 000a 	sub.w	r0, r0, sl
 80097e4:	fa03 f000 	lsl.w	r0, r3, r0
 80097e8:	9b04      	ldr	r3, [sp, #16]
 80097ea:	4303      	orrs	r3, r0
 80097ec:	3401      	adds	r4, #1
 80097ee:	9304      	str	r3, [sp, #16]
 80097f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80097f4:	482c      	ldr	r0, [pc, #176]	; (80098a8 <_vfiprintf_r+0x250>)
 80097f6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80097fa:	2206      	movs	r2, #6
 80097fc:	f7f6 fd08 	bl	8000210 <memchr>
 8009800:	2800      	cmp	r0, #0
 8009802:	d03f      	beq.n	8009884 <_vfiprintf_r+0x22c>
 8009804:	4b29      	ldr	r3, [pc, #164]	; (80098ac <_vfiprintf_r+0x254>)
 8009806:	bb1b      	cbnz	r3, 8009850 <_vfiprintf_r+0x1f8>
 8009808:	9b03      	ldr	r3, [sp, #12]
 800980a:	3307      	adds	r3, #7
 800980c:	f023 0307 	bic.w	r3, r3, #7
 8009810:	3308      	adds	r3, #8
 8009812:	9303      	str	r3, [sp, #12]
 8009814:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009816:	443b      	add	r3, r7
 8009818:	9309      	str	r3, [sp, #36]	; 0x24
 800981a:	e767      	b.n	80096ec <_vfiprintf_r+0x94>
 800981c:	fb0c 3202 	mla	r2, ip, r2, r3
 8009820:	460c      	mov	r4, r1
 8009822:	2001      	movs	r0, #1
 8009824:	e7a5      	b.n	8009772 <_vfiprintf_r+0x11a>
 8009826:	2300      	movs	r3, #0
 8009828:	3401      	adds	r4, #1
 800982a:	9305      	str	r3, [sp, #20]
 800982c:	4619      	mov	r1, r3
 800982e:	f04f 0c0a 	mov.w	ip, #10
 8009832:	4620      	mov	r0, r4
 8009834:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009838:	3a30      	subs	r2, #48	; 0x30
 800983a:	2a09      	cmp	r2, #9
 800983c:	d903      	bls.n	8009846 <_vfiprintf_r+0x1ee>
 800983e:	2b00      	cmp	r3, #0
 8009840:	d0c5      	beq.n	80097ce <_vfiprintf_r+0x176>
 8009842:	9105      	str	r1, [sp, #20]
 8009844:	e7c3      	b.n	80097ce <_vfiprintf_r+0x176>
 8009846:	fb0c 2101 	mla	r1, ip, r1, r2
 800984a:	4604      	mov	r4, r0
 800984c:	2301      	movs	r3, #1
 800984e:	e7f0      	b.n	8009832 <_vfiprintf_r+0x1da>
 8009850:	ab03      	add	r3, sp, #12
 8009852:	9300      	str	r3, [sp, #0]
 8009854:	462a      	mov	r2, r5
 8009856:	4b16      	ldr	r3, [pc, #88]	; (80098b0 <_vfiprintf_r+0x258>)
 8009858:	a904      	add	r1, sp, #16
 800985a:	4630      	mov	r0, r6
 800985c:	f7fb f9be 	bl	8004bdc <_printf_float>
 8009860:	4607      	mov	r7, r0
 8009862:	1c78      	adds	r0, r7, #1
 8009864:	d1d6      	bne.n	8009814 <_vfiprintf_r+0x1bc>
 8009866:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009868:	07d9      	lsls	r1, r3, #31
 800986a:	d405      	bmi.n	8009878 <_vfiprintf_r+0x220>
 800986c:	89ab      	ldrh	r3, [r5, #12]
 800986e:	059a      	lsls	r2, r3, #22
 8009870:	d402      	bmi.n	8009878 <_vfiprintf_r+0x220>
 8009872:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009874:	f7ff fe71 	bl	800955a <__retarget_lock_release_recursive>
 8009878:	89ab      	ldrh	r3, [r5, #12]
 800987a:	065b      	lsls	r3, r3, #25
 800987c:	f53f af12 	bmi.w	80096a4 <_vfiprintf_r+0x4c>
 8009880:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009882:	e711      	b.n	80096a8 <_vfiprintf_r+0x50>
 8009884:	ab03      	add	r3, sp, #12
 8009886:	9300      	str	r3, [sp, #0]
 8009888:	462a      	mov	r2, r5
 800988a:	4b09      	ldr	r3, [pc, #36]	; (80098b0 <_vfiprintf_r+0x258>)
 800988c:	a904      	add	r1, sp, #16
 800988e:	4630      	mov	r0, r6
 8009890:	f7fb fc48 	bl	8005124 <_printf_i>
 8009894:	e7e4      	b.n	8009860 <_vfiprintf_r+0x208>
 8009896:	bf00      	nop
 8009898:	0800a374 	.word	0x0800a374
 800989c:	0800a394 	.word	0x0800a394
 80098a0:	0800a354 	.word	0x0800a354
 80098a4:	0800a2ec 	.word	0x0800a2ec
 80098a8:	0800a2f6 	.word	0x0800a2f6
 80098ac:	08004bdd 	.word	0x08004bdd
 80098b0:	08009635 	.word	0x08009635
 80098b4:	0800a2f2 	.word	0x0800a2f2

080098b8 <__swbuf_r>:
 80098b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80098ba:	460e      	mov	r6, r1
 80098bc:	4614      	mov	r4, r2
 80098be:	4605      	mov	r5, r0
 80098c0:	b118      	cbz	r0, 80098ca <__swbuf_r+0x12>
 80098c2:	6983      	ldr	r3, [r0, #24]
 80098c4:	b90b      	cbnz	r3, 80098ca <__swbuf_r+0x12>
 80098c6:	f7ff fd97 	bl	80093f8 <__sinit>
 80098ca:	4b21      	ldr	r3, [pc, #132]	; (8009950 <__swbuf_r+0x98>)
 80098cc:	429c      	cmp	r4, r3
 80098ce:	d12b      	bne.n	8009928 <__swbuf_r+0x70>
 80098d0:	686c      	ldr	r4, [r5, #4]
 80098d2:	69a3      	ldr	r3, [r4, #24]
 80098d4:	60a3      	str	r3, [r4, #8]
 80098d6:	89a3      	ldrh	r3, [r4, #12]
 80098d8:	071a      	lsls	r2, r3, #28
 80098da:	d52f      	bpl.n	800993c <__swbuf_r+0x84>
 80098dc:	6923      	ldr	r3, [r4, #16]
 80098de:	b36b      	cbz	r3, 800993c <__swbuf_r+0x84>
 80098e0:	6923      	ldr	r3, [r4, #16]
 80098e2:	6820      	ldr	r0, [r4, #0]
 80098e4:	1ac0      	subs	r0, r0, r3
 80098e6:	6963      	ldr	r3, [r4, #20]
 80098e8:	b2f6      	uxtb	r6, r6
 80098ea:	4283      	cmp	r3, r0
 80098ec:	4637      	mov	r7, r6
 80098ee:	dc04      	bgt.n	80098fa <__swbuf_r+0x42>
 80098f0:	4621      	mov	r1, r4
 80098f2:	4628      	mov	r0, r5
 80098f4:	f7ff fcec 	bl	80092d0 <_fflush_r>
 80098f8:	bb30      	cbnz	r0, 8009948 <__swbuf_r+0x90>
 80098fa:	68a3      	ldr	r3, [r4, #8]
 80098fc:	3b01      	subs	r3, #1
 80098fe:	60a3      	str	r3, [r4, #8]
 8009900:	6823      	ldr	r3, [r4, #0]
 8009902:	1c5a      	adds	r2, r3, #1
 8009904:	6022      	str	r2, [r4, #0]
 8009906:	701e      	strb	r6, [r3, #0]
 8009908:	6963      	ldr	r3, [r4, #20]
 800990a:	3001      	adds	r0, #1
 800990c:	4283      	cmp	r3, r0
 800990e:	d004      	beq.n	800991a <__swbuf_r+0x62>
 8009910:	89a3      	ldrh	r3, [r4, #12]
 8009912:	07db      	lsls	r3, r3, #31
 8009914:	d506      	bpl.n	8009924 <__swbuf_r+0x6c>
 8009916:	2e0a      	cmp	r6, #10
 8009918:	d104      	bne.n	8009924 <__swbuf_r+0x6c>
 800991a:	4621      	mov	r1, r4
 800991c:	4628      	mov	r0, r5
 800991e:	f7ff fcd7 	bl	80092d0 <_fflush_r>
 8009922:	b988      	cbnz	r0, 8009948 <__swbuf_r+0x90>
 8009924:	4638      	mov	r0, r7
 8009926:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009928:	4b0a      	ldr	r3, [pc, #40]	; (8009954 <__swbuf_r+0x9c>)
 800992a:	429c      	cmp	r4, r3
 800992c:	d101      	bne.n	8009932 <__swbuf_r+0x7a>
 800992e:	68ac      	ldr	r4, [r5, #8]
 8009930:	e7cf      	b.n	80098d2 <__swbuf_r+0x1a>
 8009932:	4b09      	ldr	r3, [pc, #36]	; (8009958 <__swbuf_r+0xa0>)
 8009934:	429c      	cmp	r4, r3
 8009936:	bf08      	it	eq
 8009938:	68ec      	ldreq	r4, [r5, #12]
 800993a:	e7ca      	b.n	80098d2 <__swbuf_r+0x1a>
 800993c:	4621      	mov	r1, r4
 800993e:	4628      	mov	r0, r5
 8009940:	f000 f80c 	bl	800995c <__swsetup_r>
 8009944:	2800      	cmp	r0, #0
 8009946:	d0cb      	beq.n	80098e0 <__swbuf_r+0x28>
 8009948:	f04f 37ff 	mov.w	r7, #4294967295
 800994c:	e7ea      	b.n	8009924 <__swbuf_r+0x6c>
 800994e:	bf00      	nop
 8009950:	0800a374 	.word	0x0800a374
 8009954:	0800a394 	.word	0x0800a394
 8009958:	0800a354 	.word	0x0800a354

0800995c <__swsetup_r>:
 800995c:	4b32      	ldr	r3, [pc, #200]	; (8009a28 <__swsetup_r+0xcc>)
 800995e:	b570      	push	{r4, r5, r6, lr}
 8009960:	681d      	ldr	r5, [r3, #0]
 8009962:	4606      	mov	r6, r0
 8009964:	460c      	mov	r4, r1
 8009966:	b125      	cbz	r5, 8009972 <__swsetup_r+0x16>
 8009968:	69ab      	ldr	r3, [r5, #24]
 800996a:	b913      	cbnz	r3, 8009972 <__swsetup_r+0x16>
 800996c:	4628      	mov	r0, r5
 800996e:	f7ff fd43 	bl	80093f8 <__sinit>
 8009972:	4b2e      	ldr	r3, [pc, #184]	; (8009a2c <__swsetup_r+0xd0>)
 8009974:	429c      	cmp	r4, r3
 8009976:	d10f      	bne.n	8009998 <__swsetup_r+0x3c>
 8009978:	686c      	ldr	r4, [r5, #4]
 800997a:	89a3      	ldrh	r3, [r4, #12]
 800997c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009980:	0719      	lsls	r1, r3, #28
 8009982:	d42c      	bmi.n	80099de <__swsetup_r+0x82>
 8009984:	06dd      	lsls	r5, r3, #27
 8009986:	d411      	bmi.n	80099ac <__swsetup_r+0x50>
 8009988:	2309      	movs	r3, #9
 800998a:	6033      	str	r3, [r6, #0]
 800998c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009990:	81a3      	strh	r3, [r4, #12]
 8009992:	f04f 30ff 	mov.w	r0, #4294967295
 8009996:	e03e      	b.n	8009a16 <__swsetup_r+0xba>
 8009998:	4b25      	ldr	r3, [pc, #148]	; (8009a30 <__swsetup_r+0xd4>)
 800999a:	429c      	cmp	r4, r3
 800999c:	d101      	bne.n	80099a2 <__swsetup_r+0x46>
 800999e:	68ac      	ldr	r4, [r5, #8]
 80099a0:	e7eb      	b.n	800997a <__swsetup_r+0x1e>
 80099a2:	4b24      	ldr	r3, [pc, #144]	; (8009a34 <__swsetup_r+0xd8>)
 80099a4:	429c      	cmp	r4, r3
 80099a6:	bf08      	it	eq
 80099a8:	68ec      	ldreq	r4, [r5, #12]
 80099aa:	e7e6      	b.n	800997a <__swsetup_r+0x1e>
 80099ac:	0758      	lsls	r0, r3, #29
 80099ae:	d512      	bpl.n	80099d6 <__swsetup_r+0x7a>
 80099b0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80099b2:	b141      	cbz	r1, 80099c6 <__swsetup_r+0x6a>
 80099b4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80099b8:	4299      	cmp	r1, r3
 80099ba:	d002      	beq.n	80099c2 <__swsetup_r+0x66>
 80099bc:	4630      	mov	r0, r6
 80099be:	f7fe fd4f 	bl	8008460 <_free_r>
 80099c2:	2300      	movs	r3, #0
 80099c4:	6363      	str	r3, [r4, #52]	; 0x34
 80099c6:	89a3      	ldrh	r3, [r4, #12]
 80099c8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80099cc:	81a3      	strh	r3, [r4, #12]
 80099ce:	2300      	movs	r3, #0
 80099d0:	6063      	str	r3, [r4, #4]
 80099d2:	6923      	ldr	r3, [r4, #16]
 80099d4:	6023      	str	r3, [r4, #0]
 80099d6:	89a3      	ldrh	r3, [r4, #12]
 80099d8:	f043 0308 	orr.w	r3, r3, #8
 80099dc:	81a3      	strh	r3, [r4, #12]
 80099de:	6923      	ldr	r3, [r4, #16]
 80099e0:	b94b      	cbnz	r3, 80099f6 <__swsetup_r+0x9a>
 80099e2:	89a3      	ldrh	r3, [r4, #12]
 80099e4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80099e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80099ec:	d003      	beq.n	80099f6 <__swsetup_r+0x9a>
 80099ee:	4621      	mov	r1, r4
 80099f0:	4630      	mov	r0, r6
 80099f2:	f000 f84d 	bl	8009a90 <__smakebuf_r>
 80099f6:	89a0      	ldrh	r0, [r4, #12]
 80099f8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80099fc:	f010 0301 	ands.w	r3, r0, #1
 8009a00:	d00a      	beq.n	8009a18 <__swsetup_r+0xbc>
 8009a02:	2300      	movs	r3, #0
 8009a04:	60a3      	str	r3, [r4, #8]
 8009a06:	6963      	ldr	r3, [r4, #20]
 8009a08:	425b      	negs	r3, r3
 8009a0a:	61a3      	str	r3, [r4, #24]
 8009a0c:	6923      	ldr	r3, [r4, #16]
 8009a0e:	b943      	cbnz	r3, 8009a22 <__swsetup_r+0xc6>
 8009a10:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009a14:	d1ba      	bne.n	800998c <__swsetup_r+0x30>
 8009a16:	bd70      	pop	{r4, r5, r6, pc}
 8009a18:	0781      	lsls	r1, r0, #30
 8009a1a:	bf58      	it	pl
 8009a1c:	6963      	ldrpl	r3, [r4, #20]
 8009a1e:	60a3      	str	r3, [r4, #8]
 8009a20:	e7f4      	b.n	8009a0c <__swsetup_r+0xb0>
 8009a22:	2000      	movs	r0, #0
 8009a24:	e7f7      	b.n	8009a16 <__swsetup_r+0xba>
 8009a26:	bf00      	nop
 8009a28:	2000001c 	.word	0x2000001c
 8009a2c:	0800a374 	.word	0x0800a374
 8009a30:	0800a394 	.word	0x0800a394
 8009a34:	0800a354 	.word	0x0800a354

08009a38 <abort>:
 8009a38:	b508      	push	{r3, lr}
 8009a3a:	2006      	movs	r0, #6
 8009a3c:	f000 f898 	bl	8009b70 <raise>
 8009a40:	2001      	movs	r0, #1
 8009a42:	f7f8 fa24 	bl	8001e8e <_exit>

08009a46 <__swhatbuf_r>:
 8009a46:	b570      	push	{r4, r5, r6, lr}
 8009a48:	460e      	mov	r6, r1
 8009a4a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009a4e:	2900      	cmp	r1, #0
 8009a50:	b096      	sub	sp, #88	; 0x58
 8009a52:	4614      	mov	r4, r2
 8009a54:	461d      	mov	r5, r3
 8009a56:	da08      	bge.n	8009a6a <__swhatbuf_r+0x24>
 8009a58:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8009a5c:	2200      	movs	r2, #0
 8009a5e:	602a      	str	r2, [r5, #0]
 8009a60:	061a      	lsls	r2, r3, #24
 8009a62:	d410      	bmi.n	8009a86 <__swhatbuf_r+0x40>
 8009a64:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009a68:	e00e      	b.n	8009a88 <__swhatbuf_r+0x42>
 8009a6a:	466a      	mov	r2, sp
 8009a6c:	f000 f89c 	bl	8009ba8 <_fstat_r>
 8009a70:	2800      	cmp	r0, #0
 8009a72:	dbf1      	blt.n	8009a58 <__swhatbuf_r+0x12>
 8009a74:	9a01      	ldr	r2, [sp, #4]
 8009a76:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009a7a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009a7e:	425a      	negs	r2, r3
 8009a80:	415a      	adcs	r2, r3
 8009a82:	602a      	str	r2, [r5, #0]
 8009a84:	e7ee      	b.n	8009a64 <__swhatbuf_r+0x1e>
 8009a86:	2340      	movs	r3, #64	; 0x40
 8009a88:	2000      	movs	r0, #0
 8009a8a:	6023      	str	r3, [r4, #0]
 8009a8c:	b016      	add	sp, #88	; 0x58
 8009a8e:	bd70      	pop	{r4, r5, r6, pc}

08009a90 <__smakebuf_r>:
 8009a90:	898b      	ldrh	r3, [r1, #12]
 8009a92:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009a94:	079d      	lsls	r5, r3, #30
 8009a96:	4606      	mov	r6, r0
 8009a98:	460c      	mov	r4, r1
 8009a9a:	d507      	bpl.n	8009aac <__smakebuf_r+0x1c>
 8009a9c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009aa0:	6023      	str	r3, [r4, #0]
 8009aa2:	6123      	str	r3, [r4, #16]
 8009aa4:	2301      	movs	r3, #1
 8009aa6:	6163      	str	r3, [r4, #20]
 8009aa8:	b002      	add	sp, #8
 8009aaa:	bd70      	pop	{r4, r5, r6, pc}
 8009aac:	ab01      	add	r3, sp, #4
 8009aae:	466a      	mov	r2, sp
 8009ab0:	f7ff ffc9 	bl	8009a46 <__swhatbuf_r>
 8009ab4:	9900      	ldr	r1, [sp, #0]
 8009ab6:	4605      	mov	r5, r0
 8009ab8:	4630      	mov	r0, r6
 8009aba:	f7fe fd3d 	bl	8008538 <_malloc_r>
 8009abe:	b948      	cbnz	r0, 8009ad4 <__smakebuf_r+0x44>
 8009ac0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009ac4:	059a      	lsls	r2, r3, #22
 8009ac6:	d4ef      	bmi.n	8009aa8 <__smakebuf_r+0x18>
 8009ac8:	f023 0303 	bic.w	r3, r3, #3
 8009acc:	f043 0302 	orr.w	r3, r3, #2
 8009ad0:	81a3      	strh	r3, [r4, #12]
 8009ad2:	e7e3      	b.n	8009a9c <__smakebuf_r+0xc>
 8009ad4:	4b0d      	ldr	r3, [pc, #52]	; (8009b0c <__smakebuf_r+0x7c>)
 8009ad6:	62b3      	str	r3, [r6, #40]	; 0x28
 8009ad8:	89a3      	ldrh	r3, [r4, #12]
 8009ada:	6020      	str	r0, [r4, #0]
 8009adc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009ae0:	81a3      	strh	r3, [r4, #12]
 8009ae2:	9b00      	ldr	r3, [sp, #0]
 8009ae4:	6163      	str	r3, [r4, #20]
 8009ae6:	9b01      	ldr	r3, [sp, #4]
 8009ae8:	6120      	str	r0, [r4, #16]
 8009aea:	b15b      	cbz	r3, 8009b04 <__smakebuf_r+0x74>
 8009aec:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009af0:	4630      	mov	r0, r6
 8009af2:	f000 f86b 	bl	8009bcc <_isatty_r>
 8009af6:	b128      	cbz	r0, 8009b04 <__smakebuf_r+0x74>
 8009af8:	89a3      	ldrh	r3, [r4, #12]
 8009afa:	f023 0303 	bic.w	r3, r3, #3
 8009afe:	f043 0301 	orr.w	r3, r3, #1
 8009b02:	81a3      	strh	r3, [r4, #12]
 8009b04:	89a0      	ldrh	r0, [r4, #12]
 8009b06:	4305      	orrs	r5, r0
 8009b08:	81a5      	strh	r5, [r4, #12]
 8009b0a:	e7cd      	b.n	8009aa8 <__smakebuf_r+0x18>
 8009b0c:	08009391 	.word	0x08009391

08009b10 <_malloc_usable_size_r>:
 8009b10:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009b14:	1f18      	subs	r0, r3, #4
 8009b16:	2b00      	cmp	r3, #0
 8009b18:	bfbc      	itt	lt
 8009b1a:	580b      	ldrlt	r3, [r1, r0]
 8009b1c:	18c0      	addlt	r0, r0, r3
 8009b1e:	4770      	bx	lr

08009b20 <_raise_r>:
 8009b20:	291f      	cmp	r1, #31
 8009b22:	b538      	push	{r3, r4, r5, lr}
 8009b24:	4604      	mov	r4, r0
 8009b26:	460d      	mov	r5, r1
 8009b28:	d904      	bls.n	8009b34 <_raise_r+0x14>
 8009b2a:	2316      	movs	r3, #22
 8009b2c:	6003      	str	r3, [r0, #0]
 8009b2e:	f04f 30ff 	mov.w	r0, #4294967295
 8009b32:	bd38      	pop	{r3, r4, r5, pc}
 8009b34:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8009b36:	b112      	cbz	r2, 8009b3e <_raise_r+0x1e>
 8009b38:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009b3c:	b94b      	cbnz	r3, 8009b52 <_raise_r+0x32>
 8009b3e:	4620      	mov	r0, r4
 8009b40:	f000 f830 	bl	8009ba4 <_getpid_r>
 8009b44:	462a      	mov	r2, r5
 8009b46:	4601      	mov	r1, r0
 8009b48:	4620      	mov	r0, r4
 8009b4a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009b4e:	f000 b817 	b.w	8009b80 <_kill_r>
 8009b52:	2b01      	cmp	r3, #1
 8009b54:	d00a      	beq.n	8009b6c <_raise_r+0x4c>
 8009b56:	1c59      	adds	r1, r3, #1
 8009b58:	d103      	bne.n	8009b62 <_raise_r+0x42>
 8009b5a:	2316      	movs	r3, #22
 8009b5c:	6003      	str	r3, [r0, #0]
 8009b5e:	2001      	movs	r0, #1
 8009b60:	e7e7      	b.n	8009b32 <_raise_r+0x12>
 8009b62:	2400      	movs	r4, #0
 8009b64:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009b68:	4628      	mov	r0, r5
 8009b6a:	4798      	blx	r3
 8009b6c:	2000      	movs	r0, #0
 8009b6e:	e7e0      	b.n	8009b32 <_raise_r+0x12>

08009b70 <raise>:
 8009b70:	4b02      	ldr	r3, [pc, #8]	; (8009b7c <raise+0xc>)
 8009b72:	4601      	mov	r1, r0
 8009b74:	6818      	ldr	r0, [r3, #0]
 8009b76:	f7ff bfd3 	b.w	8009b20 <_raise_r>
 8009b7a:	bf00      	nop
 8009b7c:	2000001c 	.word	0x2000001c

08009b80 <_kill_r>:
 8009b80:	b538      	push	{r3, r4, r5, lr}
 8009b82:	4d07      	ldr	r5, [pc, #28]	; (8009ba0 <_kill_r+0x20>)
 8009b84:	2300      	movs	r3, #0
 8009b86:	4604      	mov	r4, r0
 8009b88:	4608      	mov	r0, r1
 8009b8a:	4611      	mov	r1, r2
 8009b8c:	602b      	str	r3, [r5, #0]
 8009b8e:	f7f8 f96e 	bl	8001e6e <_kill>
 8009b92:	1c43      	adds	r3, r0, #1
 8009b94:	d102      	bne.n	8009b9c <_kill_r+0x1c>
 8009b96:	682b      	ldr	r3, [r5, #0]
 8009b98:	b103      	cbz	r3, 8009b9c <_kill_r+0x1c>
 8009b9a:	6023      	str	r3, [r4, #0]
 8009b9c:	bd38      	pop	{r3, r4, r5, pc}
 8009b9e:	bf00      	nop
 8009ba0:	20000c50 	.word	0x20000c50

08009ba4 <_getpid_r>:
 8009ba4:	f7f8 b95b 	b.w	8001e5e <_getpid>

08009ba8 <_fstat_r>:
 8009ba8:	b538      	push	{r3, r4, r5, lr}
 8009baa:	4d07      	ldr	r5, [pc, #28]	; (8009bc8 <_fstat_r+0x20>)
 8009bac:	2300      	movs	r3, #0
 8009bae:	4604      	mov	r4, r0
 8009bb0:	4608      	mov	r0, r1
 8009bb2:	4611      	mov	r1, r2
 8009bb4:	602b      	str	r3, [r5, #0]
 8009bb6:	f7f8 f9b9 	bl	8001f2c <_fstat>
 8009bba:	1c43      	adds	r3, r0, #1
 8009bbc:	d102      	bne.n	8009bc4 <_fstat_r+0x1c>
 8009bbe:	682b      	ldr	r3, [r5, #0]
 8009bc0:	b103      	cbz	r3, 8009bc4 <_fstat_r+0x1c>
 8009bc2:	6023      	str	r3, [r4, #0]
 8009bc4:	bd38      	pop	{r3, r4, r5, pc}
 8009bc6:	bf00      	nop
 8009bc8:	20000c50 	.word	0x20000c50

08009bcc <_isatty_r>:
 8009bcc:	b538      	push	{r3, r4, r5, lr}
 8009bce:	4d06      	ldr	r5, [pc, #24]	; (8009be8 <_isatty_r+0x1c>)
 8009bd0:	2300      	movs	r3, #0
 8009bd2:	4604      	mov	r4, r0
 8009bd4:	4608      	mov	r0, r1
 8009bd6:	602b      	str	r3, [r5, #0]
 8009bd8:	f7f8 f9b8 	bl	8001f4c <_isatty>
 8009bdc:	1c43      	adds	r3, r0, #1
 8009bde:	d102      	bne.n	8009be6 <_isatty_r+0x1a>
 8009be0:	682b      	ldr	r3, [r5, #0]
 8009be2:	b103      	cbz	r3, 8009be6 <_isatty_r+0x1a>
 8009be4:	6023      	str	r3, [r4, #0]
 8009be6:	bd38      	pop	{r3, r4, r5, pc}
 8009be8:	20000c50 	.word	0x20000c50

08009bec <_init>:
 8009bec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009bee:	bf00      	nop
 8009bf0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009bf2:	bc08      	pop	{r3}
 8009bf4:	469e      	mov	lr, r3
 8009bf6:	4770      	bx	lr

08009bf8 <_fini>:
 8009bf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009bfa:	bf00      	nop
 8009bfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009bfe:	bc08      	pop	{r3}
 8009c00:	469e      	mov	lr, r3
 8009c02:	4770      	bx	lr
