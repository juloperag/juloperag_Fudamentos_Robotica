
Control_Robot_v3.3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ba0c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a90  0800bbb0  0800bbb0  0001bbb0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c640  0800c640  000201e8  2**0
                  CONTENTS
  4 .ARM          00000008  0800c640  0800c640  0001c640  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c648  0800c648  000201e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c648  0800c648  0001c648  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c64c  0800c64c  0001c64c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  0800c650  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000b34  200001e8  0800c838  000201e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000d1c  0800c838  00020d1c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00005780  00000000  00000000  00020218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000011e8  00000000  00000000  00025998  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000004b0  00000000  00000000  00026b80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000408  00000000  00000000  00027030  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00010f8e  00000000  00000000  00027438  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00006c4d  00000000  00000000  000383c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000588e9  00000000  00000000  0003f013  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000978fc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002c3c  00000000  00000000  0009794c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001e8 	.word	0x200001e8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800bb94 	.word	0x0800bb94

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001ec 	.word	0x200001ec
 80001dc:	0800bb94 	.word	0x0800bb94

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2uiz>:
 8000bd8:	004a      	lsls	r2, r1, #1
 8000bda:	d211      	bcs.n	8000c00 <__aeabi_d2uiz+0x28>
 8000bdc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000be0:	d211      	bcs.n	8000c06 <__aeabi_d2uiz+0x2e>
 8000be2:	d50d      	bpl.n	8000c00 <__aeabi_d2uiz+0x28>
 8000be4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bec:	d40e      	bmi.n	8000c0c <__aeabi_d2uiz+0x34>
 8000bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_d2uiz+0x3a>
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_d2f>:
 8000c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c20:	bf24      	itt	cs
 8000c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c2a:	d90d      	bls.n	8000c48 <__aeabi_d2f+0x30>
 8000c2c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c38:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c40:	bf08      	it	eq
 8000c42:	f020 0001 	biceq.w	r0, r0, #1
 8000c46:	4770      	bx	lr
 8000c48:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c4c:	d121      	bne.n	8000c92 <__aeabi_d2f+0x7a>
 8000c4e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c52:	bfbc      	itt	lt
 8000c54:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c58:	4770      	bxlt	lr
 8000c5a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c62:	f1c2 0218 	rsb	r2, r2, #24
 8000c66:	f1c2 0c20 	rsb	ip, r2, #32
 8000c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c72:	bf18      	it	ne
 8000c74:	f040 0001 	orrne.w	r0, r0, #1
 8000c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c84:	ea40 000c 	orr.w	r0, r0, ip
 8000c88:	fa23 f302 	lsr.w	r3, r3, r2
 8000c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c90:	e7cc      	b.n	8000c2c <__aeabi_d2f+0x14>
 8000c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c96:	d107      	bne.n	8000ca8 <__aeabi_d2f+0x90>
 8000c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c9c:	bf1e      	ittt	ne
 8000c9e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ca2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ca6:	4770      	bxne	lr
 8000ca8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cb0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_ldivmod>:
 8000cb8:	b97b      	cbnz	r3, 8000cda <__aeabi_ldivmod+0x22>
 8000cba:	b972      	cbnz	r2, 8000cda <__aeabi_ldivmod+0x22>
 8000cbc:	2900      	cmp	r1, #0
 8000cbe:	bfbe      	ittt	lt
 8000cc0:	2000      	movlt	r0, #0
 8000cc2:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000cc6:	e006      	blt.n	8000cd6 <__aeabi_ldivmod+0x1e>
 8000cc8:	bf08      	it	eq
 8000cca:	2800      	cmpeq	r0, #0
 8000ccc:	bf1c      	itt	ne
 8000cce:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000cd2:	f04f 30ff 	movne.w	r0, #4294967295
 8000cd6:	f000 b9dd 	b.w	8001094 <__aeabi_idiv0>
 8000cda:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cde:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce2:	2900      	cmp	r1, #0
 8000ce4:	db09      	blt.n	8000cfa <__aeabi_ldivmod+0x42>
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	db1a      	blt.n	8000d20 <__aeabi_ldivmod+0x68>
 8000cea:	f000 f86b 	bl	8000dc4 <__udivmoddi4>
 8000cee:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf6:	b004      	add	sp, #16
 8000cf8:	4770      	bx	lr
 8000cfa:	4240      	negs	r0, r0
 8000cfc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	db1b      	blt.n	8000d3c <__aeabi_ldivmod+0x84>
 8000d04:	f000 f85e 	bl	8000dc4 <__udivmoddi4>
 8000d08:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d0c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d10:	b004      	add	sp, #16
 8000d12:	4240      	negs	r0, r0
 8000d14:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d18:	4252      	negs	r2, r2
 8000d1a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d1e:	4770      	bx	lr
 8000d20:	4252      	negs	r2, r2
 8000d22:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d26:	f000 f84d 	bl	8000dc4 <__udivmoddi4>
 8000d2a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d2e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d32:	b004      	add	sp, #16
 8000d34:	4240      	negs	r0, r0
 8000d36:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d3a:	4770      	bx	lr
 8000d3c:	4252      	negs	r2, r2
 8000d3e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d42:	f000 f83f 	bl	8000dc4 <__udivmoddi4>
 8000d46:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d4a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d4e:	b004      	add	sp, #16
 8000d50:	4252      	negs	r2, r2
 8000d52:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d56:	4770      	bx	lr

08000d58 <__aeabi_d2lz>:
 8000d58:	b538      	push	{r3, r4, r5, lr}
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	4604      	mov	r4, r0
 8000d60:	460d      	mov	r5, r1
 8000d62:	f7ff fed3 	bl	8000b0c <__aeabi_dcmplt>
 8000d66:	b928      	cbnz	r0, 8000d74 <__aeabi_d2lz+0x1c>
 8000d68:	4620      	mov	r0, r4
 8000d6a:	4629      	mov	r1, r5
 8000d6c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d70:	f000 b80a 	b.w	8000d88 <__aeabi_d2ulz>
 8000d74:	4620      	mov	r0, r4
 8000d76:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d7a:	f000 f805 	bl	8000d88 <__aeabi_d2ulz>
 8000d7e:	4240      	negs	r0, r0
 8000d80:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d84:	bd38      	pop	{r3, r4, r5, pc}
 8000d86:	bf00      	nop

08000d88 <__aeabi_d2ulz>:
 8000d88:	b5d0      	push	{r4, r6, r7, lr}
 8000d8a:	4b0c      	ldr	r3, [pc, #48]	; (8000dbc <__aeabi_d2ulz+0x34>)
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	4606      	mov	r6, r0
 8000d90:	460f      	mov	r7, r1
 8000d92:	f7ff fc49 	bl	8000628 <__aeabi_dmul>
 8000d96:	f7ff ff1f 	bl	8000bd8 <__aeabi_d2uiz>
 8000d9a:	4604      	mov	r4, r0
 8000d9c:	f7ff fbca 	bl	8000534 <__aeabi_ui2d>
 8000da0:	4b07      	ldr	r3, [pc, #28]	; (8000dc0 <__aeabi_d2ulz+0x38>)
 8000da2:	2200      	movs	r2, #0
 8000da4:	f7ff fc40 	bl	8000628 <__aeabi_dmul>
 8000da8:	4602      	mov	r2, r0
 8000daa:	460b      	mov	r3, r1
 8000dac:	4630      	mov	r0, r6
 8000dae:	4639      	mov	r1, r7
 8000db0:	f7ff fa82 	bl	80002b8 <__aeabi_dsub>
 8000db4:	f7ff ff10 	bl	8000bd8 <__aeabi_d2uiz>
 8000db8:	4621      	mov	r1, r4
 8000dba:	bdd0      	pop	{r4, r6, r7, pc}
 8000dbc:	3df00000 	.word	0x3df00000
 8000dc0:	41f00000 	.word	0x41f00000

08000dc4 <__udivmoddi4>:
 8000dc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000dc8:	9d08      	ldr	r5, [sp, #32]
 8000dca:	4604      	mov	r4, r0
 8000dcc:	468e      	mov	lr, r1
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d14d      	bne.n	8000e6e <__udivmoddi4+0xaa>
 8000dd2:	428a      	cmp	r2, r1
 8000dd4:	4694      	mov	ip, r2
 8000dd6:	d969      	bls.n	8000eac <__udivmoddi4+0xe8>
 8000dd8:	fab2 f282 	clz	r2, r2
 8000ddc:	b152      	cbz	r2, 8000df4 <__udivmoddi4+0x30>
 8000dde:	fa01 f302 	lsl.w	r3, r1, r2
 8000de2:	f1c2 0120 	rsb	r1, r2, #32
 8000de6:	fa20 f101 	lsr.w	r1, r0, r1
 8000dea:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dee:	ea41 0e03 	orr.w	lr, r1, r3
 8000df2:	4094      	lsls	r4, r2
 8000df4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000df8:	0c21      	lsrs	r1, r4, #16
 8000dfa:	fbbe f6f8 	udiv	r6, lr, r8
 8000dfe:	fa1f f78c 	uxth.w	r7, ip
 8000e02:	fb08 e316 	mls	r3, r8, r6, lr
 8000e06:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000e0a:	fb06 f107 	mul.w	r1, r6, r7
 8000e0e:	4299      	cmp	r1, r3
 8000e10:	d90a      	bls.n	8000e28 <__udivmoddi4+0x64>
 8000e12:	eb1c 0303 	adds.w	r3, ip, r3
 8000e16:	f106 30ff 	add.w	r0, r6, #4294967295
 8000e1a:	f080 811f 	bcs.w	800105c <__udivmoddi4+0x298>
 8000e1e:	4299      	cmp	r1, r3
 8000e20:	f240 811c 	bls.w	800105c <__udivmoddi4+0x298>
 8000e24:	3e02      	subs	r6, #2
 8000e26:	4463      	add	r3, ip
 8000e28:	1a5b      	subs	r3, r3, r1
 8000e2a:	b2a4      	uxth	r4, r4
 8000e2c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e30:	fb08 3310 	mls	r3, r8, r0, r3
 8000e34:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e38:	fb00 f707 	mul.w	r7, r0, r7
 8000e3c:	42a7      	cmp	r7, r4
 8000e3e:	d90a      	bls.n	8000e56 <__udivmoddi4+0x92>
 8000e40:	eb1c 0404 	adds.w	r4, ip, r4
 8000e44:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e48:	f080 810a 	bcs.w	8001060 <__udivmoddi4+0x29c>
 8000e4c:	42a7      	cmp	r7, r4
 8000e4e:	f240 8107 	bls.w	8001060 <__udivmoddi4+0x29c>
 8000e52:	4464      	add	r4, ip
 8000e54:	3802      	subs	r0, #2
 8000e56:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e5a:	1be4      	subs	r4, r4, r7
 8000e5c:	2600      	movs	r6, #0
 8000e5e:	b11d      	cbz	r5, 8000e68 <__udivmoddi4+0xa4>
 8000e60:	40d4      	lsrs	r4, r2
 8000e62:	2300      	movs	r3, #0
 8000e64:	e9c5 4300 	strd	r4, r3, [r5]
 8000e68:	4631      	mov	r1, r6
 8000e6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e6e:	428b      	cmp	r3, r1
 8000e70:	d909      	bls.n	8000e86 <__udivmoddi4+0xc2>
 8000e72:	2d00      	cmp	r5, #0
 8000e74:	f000 80ef 	beq.w	8001056 <__udivmoddi4+0x292>
 8000e78:	2600      	movs	r6, #0
 8000e7a:	e9c5 0100 	strd	r0, r1, [r5]
 8000e7e:	4630      	mov	r0, r6
 8000e80:	4631      	mov	r1, r6
 8000e82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e86:	fab3 f683 	clz	r6, r3
 8000e8a:	2e00      	cmp	r6, #0
 8000e8c:	d14a      	bne.n	8000f24 <__udivmoddi4+0x160>
 8000e8e:	428b      	cmp	r3, r1
 8000e90:	d302      	bcc.n	8000e98 <__udivmoddi4+0xd4>
 8000e92:	4282      	cmp	r2, r0
 8000e94:	f200 80f9 	bhi.w	800108a <__udivmoddi4+0x2c6>
 8000e98:	1a84      	subs	r4, r0, r2
 8000e9a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e9e:	2001      	movs	r0, #1
 8000ea0:	469e      	mov	lr, r3
 8000ea2:	2d00      	cmp	r5, #0
 8000ea4:	d0e0      	beq.n	8000e68 <__udivmoddi4+0xa4>
 8000ea6:	e9c5 4e00 	strd	r4, lr, [r5]
 8000eaa:	e7dd      	b.n	8000e68 <__udivmoddi4+0xa4>
 8000eac:	b902      	cbnz	r2, 8000eb0 <__udivmoddi4+0xec>
 8000eae:	deff      	udf	#255	; 0xff
 8000eb0:	fab2 f282 	clz	r2, r2
 8000eb4:	2a00      	cmp	r2, #0
 8000eb6:	f040 8092 	bne.w	8000fde <__udivmoddi4+0x21a>
 8000eba:	eba1 010c 	sub.w	r1, r1, ip
 8000ebe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ec2:	fa1f fe8c 	uxth.w	lr, ip
 8000ec6:	2601      	movs	r6, #1
 8000ec8:	0c20      	lsrs	r0, r4, #16
 8000eca:	fbb1 f3f7 	udiv	r3, r1, r7
 8000ece:	fb07 1113 	mls	r1, r7, r3, r1
 8000ed2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ed6:	fb0e f003 	mul.w	r0, lr, r3
 8000eda:	4288      	cmp	r0, r1
 8000edc:	d908      	bls.n	8000ef0 <__udivmoddi4+0x12c>
 8000ede:	eb1c 0101 	adds.w	r1, ip, r1
 8000ee2:	f103 38ff 	add.w	r8, r3, #4294967295
 8000ee6:	d202      	bcs.n	8000eee <__udivmoddi4+0x12a>
 8000ee8:	4288      	cmp	r0, r1
 8000eea:	f200 80cb 	bhi.w	8001084 <__udivmoddi4+0x2c0>
 8000eee:	4643      	mov	r3, r8
 8000ef0:	1a09      	subs	r1, r1, r0
 8000ef2:	b2a4      	uxth	r4, r4
 8000ef4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ef8:	fb07 1110 	mls	r1, r7, r0, r1
 8000efc:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000f00:	fb0e fe00 	mul.w	lr, lr, r0
 8000f04:	45a6      	cmp	lr, r4
 8000f06:	d908      	bls.n	8000f1a <__udivmoddi4+0x156>
 8000f08:	eb1c 0404 	adds.w	r4, ip, r4
 8000f0c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f10:	d202      	bcs.n	8000f18 <__udivmoddi4+0x154>
 8000f12:	45a6      	cmp	lr, r4
 8000f14:	f200 80bb 	bhi.w	800108e <__udivmoddi4+0x2ca>
 8000f18:	4608      	mov	r0, r1
 8000f1a:	eba4 040e 	sub.w	r4, r4, lr
 8000f1e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000f22:	e79c      	b.n	8000e5e <__udivmoddi4+0x9a>
 8000f24:	f1c6 0720 	rsb	r7, r6, #32
 8000f28:	40b3      	lsls	r3, r6
 8000f2a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000f2e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000f32:	fa20 f407 	lsr.w	r4, r0, r7
 8000f36:	fa01 f306 	lsl.w	r3, r1, r6
 8000f3a:	431c      	orrs	r4, r3
 8000f3c:	40f9      	lsrs	r1, r7
 8000f3e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000f42:	fa00 f306 	lsl.w	r3, r0, r6
 8000f46:	fbb1 f8f9 	udiv	r8, r1, r9
 8000f4a:	0c20      	lsrs	r0, r4, #16
 8000f4c:	fa1f fe8c 	uxth.w	lr, ip
 8000f50:	fb09 1118 	mls	r1, r9, r8, r1
 8000f54:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000f58:	fb08 f00e 	mul.w	r0, r8, lr
 8000f5c:	4288      	cmp	r0, r1
 8000f5e:	fa02 f206 	lsl.w	r2, r2, r6
 8000f62:	d90b      	bls.n	8000f7c <__udivmoddi4+0x1b8>
 8000f64:	eb1c 0101 	adds.w	r1, ip, r1
 8000f68:	f108 3aff 	add.w	sl, r8, #4294967295
 8000f6c:	f080 8088 	bcs.w	8001080 <__udivmoddi4+0x2bc>
 8000f70:	4288      	cmp	r0, r1
 8000f72:	f240 8085 	bls.w	8001080 <__udivmoddi4+0x2bc>
 8000f76:	f1a8 0802 	sub.w	r8, r8, #2
 8000f7a:	4461      	add	r1, ip
 8000f7c:	1a09      	subs	r1, r1, r0
 8000f7e:	b2a4      	uxth	r4, r4
 8000f80:	fbb1 f0f9 	udiv	r0, r1, r9
 8000f84:	fb09 1110 	mls	r1, r9, r0, r1
 8000f88:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000f8c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f90:	458e      	cmp	lr, r1
 8000f92:	d908      	bls.n	8000fa6 <__udivmoddi4+0x1e2>
 8000f94:	eb1c 0101 	adds.w	r1, ip, r1
 8000f98:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f9c:	d26c      	bcs.n	8001078 <__udivmoddi4+0x2b4>
 8000f9e:	458e      	cmp	lr, r1
 8000fa0:	d96a      	bls.n	8001078 <__udivmoddi4+0x2b4>
 8000fa2:	3802      	subs	r0, #2
 8000fa4:	4461      	add	r1, ip
 8000fa6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000faa:	fba0 9402 	umull	r9, r4, r0, r2
 8000fae:	eba1 010e 	sub.w	r1, r1, lr
 8000fb2:	42a1      	cmp	r1, r4
 8000fb4:	46c8      	mov	r8, r9
 8000fb6:	46a6      	mov	lr, r4
 8000fb8:	d356      	bcc.n	8001068 <__udivmoddi4+0x2a4>
 8000fba:	d053      	beq.n	8001064 <__udivmoddi4+0x2a0>
 8000fbc:	b15d      	cbz	r5, 8000fd6 <__udivmoddi4+0x212>
 8000fbe:	ebb3 0208 	subs.w	r2, r3, r8
 8000fc2:	eb61 010e 	sbc.w	r1, r1, lr
 8000fc6:	fa01 f707 	lsl.w	r7, r1, r7
 8000fca:	fa22 f306 	lsr.w	r3, r2, r6
 8000fce:	40f1      	lsrs	r1, r6
 8000fd0:	431f      	orrs	r7, r3
 8000fd2:	e9c5 7100 	strd	r7, r1, [r5]
 8000fd6:	2600      	movs	r6, #0
 8000fd8:	4631      	mov	r1, r6
 8000fda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fde:	f1c2 0320 	rsb	r3, r2, #32
 8000fe2:	40d8      	lsrs	r0, r3
 8000fe4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000fe8:	fa21 f303 	lsr.w	r3, r1, r3
 8000fec:	4091      	lsls	r1, r2
 8000fee:	4301      	orrs	r1, r0
 8000ff0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ff4:	fa1f fe8c 	uxth.w	lr, ip
 8000ff8:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ffc:	fb07 3610 	mls	r6, r7, r0, r3
 8001000:	0c0b      	lsrs	r3, r1, #16
 8001002:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8001006:	fb00 f60e 	mul.w	r6, r0, lr
 800100a:	429e      	cmp	r6, r3
 800100c:	fa04 f402 	lsl.w	r4, r4, r2
 8001010:	d908      	bls.n	8001024 <__udivmoddi4+0x260>
 8001012:	eb1c 0303 	adds.w	r3, ip, r3
 8001016:	f100 38ff 	add.w	r8, r0, #4294967295
 800101a:	d22f      	bcs.n	800107c <__udivmoddi4+0x2b8>
 800101c:	429e      	cmp	r6, r3
 800101e:	d92d      	bls.n	800107c <__udivmoddi4+0x2b8>
 8001020:	3802      	subs	r0, #2
 8001022:	4463      	add	r3, ip
 8001024:	1b9b      	subs	r3, r3, r6
 8001026:	b289      	uxth	r1, r1
 8001028:	fbb3 f6f7 	udiv	r6, r3, r7
 800102c:	fb07 3316 	mls	r3, r7, r6, r3
 8001030:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8001034:	fb06 f30e 	mul.w	r3, r6, lr
 8001038:	428b      	cmp	r3, r1
 800103a:	d908      	bls.n	800104e <__udivmoddi4+0x28a>
 800103c:	eb1c 0101 	adds.w	r1, ip, r1
 8001040:	f106 38ff 	add.w	r8, r6, #4294967295
 8001044:	d216      	bcs.n	8001074 <__udivmoddi4+0x2b0>
 8001046:	428b      	cmp	r3, r1
 8001048:	d914      	bls.n	8001074 <__udivmoddi4+0x2b0>
 800104a:	3e02      	subs	r6, #2
 800104c:	4461      	add	r1, ip
 800104e:	1ac9      	subs	r1, r1, r3
 8001050:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8001054:	e738      	b.n	8000ec8 <__udivmoddi4+0x104>
 8001056:	462e      	mov	r6, r5
 8001058:	4628      	mov	r0, r5
 800105a:	e705      	b.n	8000e68 <__udivmoddi4+0xa4>
 800105c:	4606      	mov	r6, r0
 800105e:	e6e3      	b.n	8000e28 <__udivmoddi4+0x64>
 8001060:	4618      	mov	r0, r3
 8001062:	e6f8      	b.n	8000e56 <__udivmoddi4+0x92>
 8001064:	454b      	cmp	r3, r9
 8001066:	d2a9      	bcs.n	8000fbc <__udivmoddi4+0x1f8>
 8001068:	ebb9 0802 	subs.w	r8, r9, r2
 800106c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8001070:	3801      	subs	r0, #1
 8001072:	e7a3      	b.n	8000fbc <__udivmoddi4+0x1f8>
 8001074:	4646      	mov	r6, r8
 8001076:	e7ea      	b.n	800104e <__udivmoddi4+0x28a>
 8001078:	4620      	mov	r0, r4
 800107a:	e794      	b.n	8000fa6 <__udivmoddi4+0x1e2>
 800107c:	4640      	mov	r0, r8
 800107e:	e7d1      	b.n	8001024 <__udivmoddi4+0x260>
 8001080:	46d0      	mov	r8, sl
 8001082:	e77b      	b.n	8000f7c <__udivmoddi4+0x1b8>
 8001084:	3b02      	subs	r3, #2
 8001086:	4461      	add	r1, ip
 8001088:	e732      	b.n	8000ef0 <__udivmoddi4+0x12c>
 800108a:	4630      	mov	r0, r6
 800108c:	e709      	b.n	8000ea2 <__udivmoddi4+0xde>
 800108e:	4464      	add	r4, ip
 8001090:	3802      	subs	r0, #2
 8001092:	e742      	b.n	8000f1a <__udivmoddi4+0x156>

08001094 <__aeabi_idiv0>:
 8001094:	4770      	bx	lr
 8001096:	bf00      	nop

08001098 <updateDuttyMotor>:
#include <MotorDriver.h>


//Funcion para actualizar el dutty del pwm
void updateDuttyMotor(Motor_Handler_t *ptrMotorHandler,  float newValue)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b082      	sub	sp, #8
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
 80010a0:	ed87 0a00 	vstr	s0, [r7]
		//Guardar valor del dutty
		ptrMotorHandler->configMotor.dutty = newValue;
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	683a      	ldr	r2, [r7, #0]
 80010a8:	639a      	str	r2, [r3, #56]	; 0x38
		//Actualizamos el valor del dutty
		updateDuttyCyclePercentageFloat(ptrMotorHandler->phandlerPWM, ptrMotorHandler->configMotor.dutty);
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 80010b4:	eeb0 0a67 	vmov.f32	s0, s15
 80010b8:	4610      	mov	r0, r2
 80010ba:	f003 fcc3 	bl	8004a44 <updateDuttyCyclePercentageFloat>
}
 80010be:	bf00      	nop
 80010c0:	3708      	adds	r7, #8
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bd80      	pop	{r7, pc}

080010c6 <updateDirMotor>:
		updateFrequencyTimer(ptrBTimerHandler, *(ptrMotorHandler->configMotor.frecuency));
		updateDuttyCyclePercentageFloat(ptrMotorHandler->phandlerPWM, ptrMotorHandler->configMotor.dutty);
}

void updateDirMotor(Motor_Handler_t *ptrMotorHandler)
{
 80010c6:	b580      	push	{r7, lr}
 80010c8:	b082      	sub	sp, #8
 80010ca:	af00      	add	r7, sp, #0
 80010cc:	6078      	str	r0, [r7, #4]
		//Cambiar el valor de la direccion
		ptrMotorHandler->configMotor.dir = (~ptrMotorHandler->configMotor.dir)&(0x01);
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80010d4:	f003 0301 	and.w	r3, r3, #1
 80010d8:	2b00      	cmp	r3, #0
 80010da:	bf0c      	ite	eq
 80010dc:	2301      	moveq	r3, #1
 80010de:	2300      	movne	r3, #0
 80010e0:	b2db      	uxtb	r3, r3
 80010e2:	461a      	mov	r2, r3
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
		//Cambiamos la direccion del motor
		GPIO_writePin(ptrMotorHandler->phandlerGPIOIN, ptrMotorHandler->configMotor.dir&SET);
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80010f4:	f003 0301 	and.w	r3, r3, #1
 80010f8:	b2db      	uxtb	r3, r3
 80010fa:	4619      	mov	r1, r3
 80010fc:	4610      	mov	r0, r2
 80010fe:	f003 f879 	bl	80041f4 <GPIO_writePin>
		statusPolarityPWM(ptrMotorHandler->phandlerPWM, ptrMotorHandler->configMotor.dir&SET);
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800110c:	f003 0301 	and.w	r3, r3, #1
 8001110:	b2db      	uxtb	r3, r3
 8001112:	4619      	mov	r1, r3
 8001114:	4610      	mov	r0, r2
 8001116:	f003 fbcf 	bl	80048b8 <statusPolarityPWM>
}
 800111a:	bf00      	nop
 800111c:	3708      	adds	r7, #8
 800111e:	46bd      	mov	sp, r7
 8001120:	bd80      	pop	{r7, pc}
	...

08001124 <main>:
uint8_t commandComplete = 1;           //Bandera que indica si el comando esta completo
uint8_t counterRecepcion = 0;          //Variable para la posicion del arrelgo
char bufferRecepcion[64] = {0};        //Arreglo que almacena el comando ingresado

int main(void)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b082      	sub	sp, #8
 8001128:	af00      	add	r7, sp, #0
	//-----------------------Configuracion inicial del sistema---------------------------------
	//Incrementamos la velocidad de reloj del sistema

	uint8_t clock = CLOCK_SPEED_100MHZ;    //Velocidad de reloj entre 25 o 100 MHz
 800112a:	2364      	movs	r3, #100	; 0x64
 800112c:	71fb      	strb	r3, [r7, #7]
	configPLL(clock);
 800112e:	79fb      	ldrb	r3, [r7, #7]
 8001130:	4618      	mov	r0, r3
 8001132:	f003 f8a1 	bl	8004278 <configPLL>
	//Realizamos la configuracuion inicial
	int_Hardware();
 8001136:	f000 f84d 	bl	80011d4 <int_Hardware>
	//Activamos el SysTick
	//config_SysTick_us();
	//Activamos el punto flotante por medio del registro especifico
	SCB->CPACR |= 0xF <<20;
 800113a:	4b19      	ldr	r3, [pc, #100]	; (80011a0 <main+0x7c>)
 800113c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001140:	4a17      	ldr	r2, [pc, #92]	; (80011a0 <main+0x7c>)
 8001142:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001146:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
	//Definimos la configuracion inicail del MCO1
	int_MCO2();
 800114a:	f000 f9d1 	bl	80014f0 <int_MCO2>

	//-----------------------Configuracion inicial de los Motores---------------------------------
	//Cargar configuracion de los motores
	GPIO_writePin (&handler_GPIO_MotorR_IN, SET);
 800114e:	2101      	movs	r1, #1
 8001150:	4814      	ldr	r0, [pc, #80]	; (80011a4 <main+0x80>)
 8001152:	f003 f84f 	bl	80041f4 <GPIO_writePin>
	GPIO_writePin (&handler_GPIO_MotorL_IN, SET);
 8001156:	2101      	movs	r1, #1
 8001158:	4813      	ldr	r0, [pc, #76]	; (80011a8 <main+0x84>)
 800115a:	f003 f84b 	bl	80041f4 <GPIO_writePin>
	GPIO_writePin (&handler_GPIO_MotorR_EN, SET);
 800115e:	2101      	movs	r1, #1
 8001160:	4812      	ldr	r0, [pc, #72]	; (80011ac <main+0x88>)
 8001162:	f003 f847 	bl	80041f4 <GPIO_writePin>
	GPIO_writePin (&handler_GPIO_MotorL_EN, SET);
 8001166:	2101      	movs	r1, #1
 8001168:	4811      	ldr	r0, [pc, #68]	; (80011b0 <main+0x8c>)
 800116a:	f003 f843 	bl	80041f4 <GPIO_writePin>
	int_Config_Motor();
 800116e:	f000 f9c9 	bl	8001504 <int_Config_Motor>
	//Definimos el motor derecho para ser ejecutado
	handler_Motor_Execute = &handler_Motor_R;
 8001172:	4b10      	ldr	r3, [pc, #64]	; (80011b4 <main+0x90>)
 8001174:	4a10      	ldr	r2, [pc, #64]	; (80011b8 <main+0x94>)
 8001176:	601a      	str	r2, [r3, #0]
	//Calculo inicial de parametro
	cm_L = ((PI*DL)/(100*Ce));  //[mm/cuentas]
 8001178:	4b10      	ldr	r3, [pc, #64]	; (80011bc <main+0x98>)
 800117a:	4a11      	ldr	r2, [pc, #68]	; (80011c0 <main+0x9c>)
 800117c:	601a      	str	r2, [r3, #0]
	cm_R =	((PI*DR)/(100*Ce));  //[mm/cuentas]
 800117e:	4b11      	ldr	r3, [pc, #68]	; (80011c4 <main+0xa0>)
 8001180:	4a11      	ldr	r2, [pc, #68]	; (80011c8 <main+0xa4>)
 8001182:	601a      	str	r2, [r3, #0]

	while(1)
	{
		///Verificamos para ejecuta el comando ingresando
		if(commandComplete==1)
 8001184:	4b11      	ldr	r3, [pc, #68]	; (80011cc <main+0xa8>)
 8001186:	781b      	ldrb	r3, [r3, #0]
 8001188:	2b01      	cmp	r3, #1
 800118a:	d106      	bne.n	800119a <main+0x76>
		{
			runCommand(bufferRecepcion);
 800118c:	4810      	ldr	r0, [pc, #64]	; (80011d0 <main+0xac>)
 800118e:	f000 fe3f 	bl	8001e10 <runCommand>
			//Reniciamos la variable
			commandComplete=0;
 8001192:	4b0e      	ldr	r3, [pc, #56]	; (80011cc <main+0xa8>)
 8001194:	2200      	movs	r2, #0
 8001196:	701a      	strb	r2, [r3, #0]
 8001198:	e7f4      	b.n	8001184 <main+0x60>
		}
		else
		{
			__NOP();
 800119a:	bf00      	nop
		if(commandComplete==1)
 800119c:	e7f2      	b.n	8001184 <main+0x60>
 800119e:	bf00      	nop
 80011a0:	e000ed00 	.word	0xe000ed00
 80011a4:	200002c4 	.word	0x200002c4
 80011a8:	20000340 	.word	0x20000340
 80011ac:	200002d0 	.word	0x200002d0
 80011b0:	2000034c 	.word	0x2000034c
 80011b4:	20000444 	.word	0x20000444
 80011b8:	200002e8 	.word	0x200002e8
 80011bc:	20000430 	.word	0x20000430
 80011c0:	40105fa7 	.word	0x40105fa7
 80011c4:	20000434 	.word	0x20000434
 80011c8:	400facee 	.word	0x400facee
 80011cc:	20000010 	.word	0x20000010
 80011d0:	2000046c 	.word	0x2000046c

080011d4 <int_Hardware>:



//------------------------------Inicio Configuracion del microcontrolador------------------------------------------
void int_Hardware(void)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b082      	sub	sp, #8
 80011d8:	af02      	add	r7, sp, #8
	//-------------------------PIN_MCO2--------------------------------
	//---------------PIN: PC9----------------
	//------------AF0: MCO_2----------------
	//Definimos el periferico GPIOx a usar.
	handler_GPIO_MCO2.pGPIOx = GPIOC;
 80011da:	4bab      	ldr	r3, [pc, #684]	; (8001488 <int_Hardware+0x2b4>)
 80011dc:	4aab      	ldr	r2, [pc, #684]	; (800148c <int_Hardware+0x2b8>)
 80011de:	609a      	str	r2, [r3, #8]
	//Definimos el pin a utilizar
	handler_GPIO_MCO2.GPIO_PinConfig.GPIO_PinNumber = PIN_9; 						//PIN_x, 0-15
 80011e0:	4ba9      	ldr	r3, [pc, #676]	; (8001488 <int_Hardware+0x2b4>)
 80011e2:	2209      	movs	r2, #9
 80011e4:	701a      	strb	r2, [r3, #0]
	//Definimos la configuracion de los registro para el pin seleccionado
	// Orden de elementos: (Struct, Mode, Otyper, Ospeedr, Pupdr, AF)
	GPIO_PIN_Config(&handler_GPIO_MCO2, GPIO_MODE_ALTFN, GPIO_OTYPER_PUSHPULL, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDR_NOTHING, AF0);
 80011e6:	2300      	movs	r3, #0
 80011e8:	9301      	str	r3, [sp, #4]
 80011ea:	2300      	movs	r3, #0
 80011ec:	9300      	str	r3, [sp, #0]
 80011ee:	2301      	movs	r3, #1
 80011f0:	2200      	movs	r2, #0
 80011f2:	2102      	movs	r1, #2
 80011f4:	48a4      	ldr	r0, [pc, #656]	; (8001488 <int_Hardware+0x2b4>)
 80011f6:	f002 feb1 	bl	8003f5c <GPIO_PIN_Config>
	/*Opciones: GPIO_Tipo_x, donde x--->||IN, OUT, ALTFN, ANALOG ||| PUSHPULL, OPENDRAIN |||
	 * ||| LOW, MEDIUM, FAST, HIGH ||| NOTHING, PULLUP, PULLDOWN, RESERVED |||  AFx, 0-15 |||*/
	//Cargamos la configuracion del PIN especifico
	GPIO_Config(&handler_GPIO_MCO2);
 80011fa:	48a3      	ldr	r0, [pc, #652]	; (8001488 <int_Hardware+0x2b4>)
 80011fc:	f002 fed0 	bl	8003fa0 <GPIO_Config>
	//-------------------Inicio de Configuracion GPIOx-----------------------

	//---------------------------BlinkyLed--------------------------------
	//---------------PIN: PA5----------------
	//Definimos el periferico GPIOx a usar.
	handler_BlinkyPin.pGPIOx = GPIOA;
 8001200:	4ba3      	ldr	r3, [pc, #652]	; (8001490 <int_Hardware+0x2bc>)
 8001202:	4aa4      	ldr	r2, [pc, #656]	; (8001494 <int_Hardware+0x2c0>)
 8001204:	609a      	str	r2, [r3, #8]
	//Definimos el pin a utilizar
	handler_BlinkyPin.GPIO_PinConfig.GPIO_PinNumber = PIN_5; 						//PIN_x, 0-15
 8001206:	4ba2      	ldr	r3, [pc, #648]	; (8001490 <int_Hardware+0x2bc>)
 8001208:	2205      	movs	r2, #5
 800120a:	701a      	strb	r2, [r3, #0]
	//Definimos la configuracion de los registro para el pin seleccionado
	// Orden de elementos: (Struct, Mode, Otyper, Ospeedr, Pupdr, AF)
	GPIO_PIN_Config(&handler_BlinkyPin, GPIO_MODE_OUT, GPIO_OTYPER_PUSHPULL, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDR_NOTHING, AF0);
 800120c:	2300      	movs	r3, #0
 800120e:	9301      	str	r3, [sp, #4]
 8001210:	2300      	movs	r3, #0
 8001212:	9300      	str	r3, [sp, #0]
 8001214:	2301      	movs	r3, #1
 8001216:	2200      	movs	r2, #0
 8001218:	2101      	movs	r1, #1
 800121a:	489d      	ldr	r0, [pc, #628]	; (8001490 <int_Hardware+0x2bc>)
 800121c:	f002 fe9e 	bl	8003f5c <GPIO_PIN_Config>
	/*Opciones: GPIO_Tipo_x, donde x--->||IN, OUT, ALTFN, ANALOG ||| PUSHPULL, OPENDRAIN |||
	 * ||| LOW, MEDIUM, FAST, HIGH ||| NOTHING, PULLUP, PULLDOWN, RESERVED |||  AFx, 0-15 |||*/
	//Cargamos la configuracion del PIN especifico
	GPIO_Config(&handler_BlinkyPin);
 8001220:	489b      	ldr	r0, [pc, #620]	; (8001490 <int_Hardware+0x2bc>)
 8001222:	f002 febd 	bl	8003fa0 <GPIO_Config>

	//---------------------------USART--------------------------------
	//---------------PIN: PA9----------------
	//------------AF7: USART1_TX----------------
	//Definimos el periferico GPIOx a usar.
	handler_GPIO_USB_TX.pGPIOx = GPIOA;
 8001226:	4b9c      	ldr	r3, [pc, #624]	; (8001498 <int_Hardware+0x2c4>)
 8001228:	4a9a      	ldr	r2, [pc, #616]	; (8001494 <int_Hardware+0x2c0>)
 800122a:	609a      	str	r2, [r3, #8]
	//Definimos el pin a utilizar
	handler_GPIO_USB_TX.GPIO_PinConfig.GPIO_PinNumber = PIN_2; 						//PIN_x, 0-15
 800122c:	4b9a      	ldr	r3, [pc, #616]	; (8001498 <int_Hardware+0x2c4>)
 800122e:	2202      	movs	r2, #2
 8001230:	701a      	strb	r2, [r3, #0]
	//Definimos la configuracion de los registro para el pin seleccionado
	// Orden de elementos: (Struct, Mode, Otyper, Ospeedr, Pupdr, AF)
	GPIO_PIN_Config(&handler_GPIO_USB_TX, GPIO_MODE_ALTFN, GPIO_OTYPER_PUSHPULL, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDR_NOTHING, AF7);
 8001232:	2307      	movs	r3, #7
 8001234:	9301      	str	r3, [sp, #4]
 8001236:	2300      	movs	r3, #0
 8001238:	9300      	str	r3, [sp, #0]
 800123a:	2301      	movs	r3, #1
 800123c:	2200      	movs	r2, #0
 800123e:	2102      	movs	r1, #2
 8001240:	4895      	ldr	r0, [pc, #596]	; (8001498 <int_Hardware+0x2c4>)
 8001242:	f002 fe8b 	bl	8003f5c <GPIO_PIN_Config>
	/*Opciones: GPIO_Tipo_x, donde x--->||IN, OUT, ALTFN, ANALOG ||| PUSHPULL, OPENDRAIN |||
	 * ||| LOW, MEDIUM, FAST, HIGH ||| NOTHING, PULLUP, PULLDOWN, RESERVED |||  AFx, 0-15 |||*/
	//Cargamos la configuracion del PIN especifico
	GPIO_Config(&handler_GPIO_USB_TX);
 8001246:	4894      	ldr	r0, [pc, #592]	; (8001498 <int_Hardware+0x2c4>)
 8001248:	f002 feaa 	bl	8003fa0 <GPIO_Config>

	//---------------PIN: PA10----------------
	//------------AF7: USART1_RX----------------
	//Definimos el periferico GPIOx a usar.
	handler_GPIO_USB_RX.pGPIOx = GPIOA;
 800124c:	4b93      	ldr	r3, [pc, #588]	; (800149c <int_Hardware+0x2c8>)
 800124e:	4a91      	ldr	r2, [pc, #580]	; (8001494 <int_Hardware+0x2c0>)
 8001250:	609a      	str	r2, [r3, #8]
	//Definimos el pin a utiliza
	handler_GPIO_USB_RX.GPIO_PinConfig.GPIO_PinNumber = PIN_3; 						//PIN_x, 0-15
 8001252:	4b92      	ldr	r3, [pc, #584]	; (800149c <int_Hardware+0x2c8>)
 8001254:	2203      	movs	r2, #3
 8001256:	701a      	strb	r2, [r3, #0]
	//Definimos la configuracion de los registro para el pin seleccionado
	// Orden de elementos: (Struct, Mode, Otyper, Ospeedr, Pupdr, AF)
	GPIO_PIN_Config(&handler_GPIO_USB_RX, GPIO_MODE_ALTFN, GPIO_OTYPER_PUSHPULL, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDR_NOTHING, AF7);
 8001258:	2307      	movs	r3, #7
 800125a:	9301      	str	r3, [sp, #4]
 800125c:	2300      	movs	r3, #0
 800125e:	9300      	str	r3, [sp, #0]
 8001260:	2301      	movs	r3, #1
 8001262:	2200      	movs	r2, #0
 8001264:	2102      	movs	r1, #2
 8001266:	488d      	ldr	r0, [pc, #564]	; (800149c <int_Hardware+0x2c8>)
 8001268:	f002 fe78 	bl	8003f5c <GPIO_PIN_Config>
	/*Opciones: GPIO_Tipo_x, donde x--->||IN, OUT, ALTFN, ANALOG ||| PUSHPULL, OPENDRAIN |||
	 * ||| LOW, MEDIUM, FAST, HIGH ||| NOTHING, PULLUP, PULLDOWN, RESERVED |||  AFx, 0-15 |||*/
	//Cargamos la configuracion del PIN especifico
	GPIO_Config(&handler_GPIO_USB_RX);
 800126c:	488b      	ldr	r0, [pc, #556]	; (800149c <int_Hardware+0x2c8>)
 800126e:	f002 fe97 	bl	8003fa0 <GPIO_Config>
	//---------------------------Motor Derecho--------------------------------
	//----------------------PWM--------------------
	//---------------PIN: PA0----------------
	//------------AF2: TIM5_CH1----------------
	//Definimos el periferico GPIOx a usar.
	handler_GPIO_MotorR.pGPIOx = GPIOA;
 8001272:	4b8b      	ldr	r3, [pc, #556]	; (80014a0 <int_Hardware+0x2cc>)
 8001274:	4a87      	ldr	r2, [pc, #540]	; (8001494 <int_Hardware+0x2c0>)
 8001276:	609a      	str	r2, [r3, #8]
	//Definimos el pin a utilizar
	handler_GPIO_MotorR.GPIO_PinConfig.GPIO_PinNumber = PIN_0; 						//PIN_x, 0-15
 8001278:	4b89      	ldr	r3, [pc, #548]	; (80014a0 <int_Hardware+0x2cc>)
 800127a:	2200      	movs	r2, #0
 800127c:	701a      	strb	r2, [r3, #0]
	//Definimos la configuracion de los registro para el pin seleccionado
	// Orden de elementos: (Struct, Mode, Otyper, Ospeedr, Pupdr, AF)
	GPIO_PIN_Config(&handler_GPIO_MotorR, GPIO_MODE_ALTFN, GPIO_OTYPER_PUSHPULL, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDR_NOTHING, AF2);
 800127e:	2302      	movs	r3, #2
 8001280:	9301      	str	r3, [sp, #4]
 8001282:	2300      	movs	r3, #0
 8001284:	9300      	str	r3, [sp, #0]
 8001286:	2301      	movs	r3, #1
 8001288:	2200      	movs	r2, #0
 800128a:	2102      	movs	r1, #2
 800128c:	4884      	ldr	r0, [pc, #528]	; (80014a0 <int_Hardware+0x2cc>)
 800128e:	f002 fe65 	bl	8003f5c <GPIO_PIN_Config>
	/*Opciones: GPIO_Tipo_x, donde x--->||IN, OUT, ALTFN, ANALOG ||| PUSHPULL, OPENDRAIN |||
	 * ||| LOW, MEDIUM, FAST, HIGH ||| NOTHING, PULLUP, PULLDOWN, RESERVED |||  AFx, 0-15 |||*/
	//Cargamos la configuracion del PIN especifico
	GPIO_Config(&handler_GPIO_MotorR);
 8001292:	4883      	ldr	r0, [pc, #524]	; (80014a0 <int_Hardware+0x2cc>)
 8001294:	f002 fe84 	bl	8003fa0 <GPIO_Config>
	//---------------Direccion--------------------
	//---------------PIN: PC12----------------
	//Definimos el periferico GPIOx a usar.
	handler_GPIO_MotorR_IN.pGPIOx = GPIOC;
 8001298:	4b82      	ldr	r3, [pc, #520]	; (80014a4 <int_Hardware+0x2d0>)
 800129a:	4a7c      	ldr	r2, [pc, #496]	; (800148c <int_Hardware+0x2b8>)
 800129c:	609a      	str	r2, [r3, #8]
	//Definimos el pin a utilizar
	handler_GPIO_MotorR_IN.GPIO_PinConfig.GPIO_PinNumber = PIN_12; 						//PIN_x, 0-15
 800129e:	4b81      	ldr	r3, [pc, #516]	; (80014a4 <int_Hardware+0x2d0>)
 80012a0:	220c      	movs	r2, #12
 80012a2:	701a      	strb	r2, [r3, #0]
	//Definimos la configuracion de los registro para el pin seleccionado
	// Orden de elementos: (Struct, Mode, Otyper, Ospeedr, Pupdr, AF)
	GPIO_PIN_Config(&handler_GPIO_MotorR_IN, GPIO_MODE_OUT, GPIO_OTYPER_PUSHPULL, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDR_NOTHING, AF0);
 80012a4:	2300      	movs	r3, #0
 80012a6:	9301      	str	r3, [sp, #4]
 80012a8:	2300      	movs	r3, #0
 80012aa:	9300      	str	r3, [sp, #0]
 80012ac:	2301      	movs	r3, #1
 80012ae:	2200      	movs	r2, #0
 80012b0:	2101      	movs	r1, #1
 80012b2:	487c      	ldr	r0, [pc, #496]	; (80014a4 <int_Hardware+0x2d0>)
 80012b4:	f002 fe52 	bl	8003f5c <GPIO_PIN_Config>
	/*Opciones: GPIO_Tipo_x, donde x--->||IN, OUT, ALTFN, ANALOG ||| PUSHPULL, OPENDRAIN |||
	 * ||| LOW, MEDIUM, FAST, HIGH ||| NOTHING, PULLUP, PULLDOWN, RESERVED |||  AFx, 0-15 |||*/
	//Cargamos la configuracion del PIN especifico
	GPIO_Config(&handler_GPIO_MotorR_IN);
 80012b8:	487a      	ldr	r0, [pc, #488]	; (80014a4 <int_Hardware+0x2d0>)
 80012ba:	f002 fe71 	bl	8003fa0 <GPIO_Config>
	//------------Enable------------------------
	//---------------PIN: PC10----------------
	//Definimos el periferico GPIOx a usar.
	handler_GPIO_MotorR_EN.pGPIOx = GPIOC;
 80012be:	4b7a      	ldr	r3, [pc, #488]	; (80014a8 <int_Hardware+0x2d4>)
 80012c0:	4a72      	ldr	r2, [pc, #456]	; (800148c <int_Hardware+0x2b8>)
 80012c2:	609a      	str	r2, [r3, #8]
	//Definimos el pin a utilizar
	handler_GPIO_MotorR_EN.GPIO_PinConfig.GPIO_PinNumber = PIN_10; 						//PIN_x, 0-15
 80012c4:	4b78      	ldr	r3, [pc, #480]	; (80014a8 <int_Hardware+0x2d4>)
 80012c6:	220a      	movs	r2, #10
 80012c8:	701a      	strb	r2, [r3, #0]
	//Definimos la configuracion de los registro para el pin seleccionado
	// Orden de elementos: (Struct, Mode, Otyper, Ospeedr, Pupdr, AF)
	GPIO_PIN_Config(&handler_GPIO_MotorR_EN, GPIO_MODE_OUT, GPIO_OTYPER_PUSHPULL, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDR_NOTHING, AF0);
 80012ca:	2300      	movs	r3, #0
 80012cc:	9301      	str	r3, [sp, #4]
 80012ce:	2300      	movs	r3, #0
 80012d0:	9300      	str	r3, [sp, #0]
 80012d2:	2301      	movs	r3, #1
 80012d4:	2200      	movs	r2, #0
 80012d6:	2101      	movs	r1, #1
 80012d8:	4873      	ldr	r0, [pc, #460]	; (80014a8 <int_Hardware+0x2d4>)
 80012da:	f002 fe3f 	bl	8003f5c <GPIO_PIN_Config>
	/*Opciones: GPIO_Tipo_x, donde x--->||IN, OUT, ALTFN, ANALOG ||| PUSHPULL, OPENDRAIN |||
	 * ||| LOW, MEDIUM, FAST, HIGH ||| NOTHING, PULLUP, PULLDOWN, RESERVED |||  AFx, 0-15 |||*/
	//Cargamos la configuracion del PIN especifico
	GPIO_Config(&handler_GPIO_MotorR_EN);
 80012de:	4872      	ldr	r0, [pc, #456]	; (80014a8 <int_Hardware+0x2d4>)
 80012e0:	f002 fe5e 	bl	8003fa0 <GPIO_Config>
	//---------------------------Motor Izquierdo--------------------------------
	//----------------------PWM--------------------
	//---------------PIN: PA1----------------
	//------------AF2: TIM5_CH2----------------
	//Definimos el periferico GPIOx a usar.
	handler_GPIO_MotorL.pGPIOx = GPIOA;
 80012e4:	4b71      	ldr	r3, [pc, #452]	; (80014ac <int_Hardware+0x2d8>)
 80012e6:	4a6b      	ldr	r2, [pc, #428]	; (8001494 <int_Hardware+0x2c0>)
 80012e8:	609a      	str	r2, [r3, #8]
	//Definimos el pin a utilizar
	handler_GPIO_MotorL.GPIO_PinConfig.GPIO_PinNumber = PIN_1; 						//PIN_x, 0-15
 80012ea:	4b70      	ldr	r3, [pc, #448]	; (80014ac <int_Hardware+0x2d8>)
 80012ec:	2201      	movs	r2, #1
 80012ee:	701a      	strb	r2, [r3, #0]
	//Definimos la configuracion de los registro para el pin seleccionado
	// Orden de elementos: (Struct, Mode, Otyper, Ospeedr, Pupdr, AF)
	GPIO_PIN_Config(&handler_GPIO_MotorL, GPIO_MODE_ALTFN, GPIO_OTYPER_PUSHPULL, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDR_NOTHING, AF2);
 80012f0:	2302      	movs	r3, #2
 80012f2:	9301      	str	r3, [sp, #4]
 80012f4:	2300      	movs	r3, #0
 80012f6:	9300      	str	r3, [sp, #0]
 80012f8:	2301      	movs	r3, #1
 80012fa:	2200      	movs	r2, #0
 80012fc:	2102      	movs	r1, #2
 80012fe:	486b      	ldr	r0, [pc, #428]	; (80014ac <int_Hardware+0x2d8>)
 8001300:	f002 fe2c 	bl	8003f5c <GPIO_PIN_Config>
	/*Opciones: GPIO_Tipo_x, donde x--->||IN, OUT, ALTFN, ANALOG ||| PUSHPULL, OPENDRAIN |||
	 * ||| LOW, MEDIUM, FAST, HIGH ||| NOTHING, PULLUP, PULLDOWN, RESERVED |||  AFx, 0-15 |||*/
	//Cargamos la configuracion del PIN especifico
	GPIO_Config(&handler_GPIO_MotorL);
 8001304:	4869      	ldr	r0, [pc, #420]	; (80014ac <int_Hardware+0x2d8>)
 8001306:	f002 fe4b 	bl	8003fa0 <GPIO_Config>
	//---------------Direccion--------------------
	//---------------PIN: PD2----------------
	//Definimos el periferico GPIOx a usar.
	handler_GPIO_MotorL_IN.pGPIOx = GPIOD;
 800130a:	4b69      	ldr	r3, [pc, #420]	; (80014b0 <int_Hardware+0x2dc>)
 800130c:	4a69      	ldr	r2, [pc, #420]	; (80014b4 <int_Hardware+0x2e0>)
 800130e:	609a      	str	r2, [r3, #8]
	//Definimos el pin a utilizar
	handler_GPIO_MotorL_IN.GPIO_PinConfig.GPIO_PinNumber = PIN_2; 						//PIN_x, 0-15
 8001310:	4b67      	ldr	r3, [pc, #412]	; (80014b0 <int_Hardware+0x2dc>)
 8001312:	2202      	movs	r2, #2
 8001314:	701a      	strb	r2, [r3, #0]
	//Definimos la configuracion de los registro para el pin seleccionado
	// Orden de elementos: (Struct, Mode, Otyper, Ospeedr, Pupdr, AF)
	GPIO_PIN_Config(&handler_GPIO_MotorL_IN, GPIO_MODE_OUT, GPIO_OTYPER_PUSHPULL, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDR_NOTHING, AF0);
 8001316:	2300      	movs	r3, #0
 8001318:	9301      	str	r3, [sp, #4]
 800131a:	2300      	movs	r3, #0
 800131c:	9300      	str	r3, [sp, #0]
 800131e:	2301      	movs	r3, #1
 8001320:	2200      	movs	r2, #0
 8001322:	2101      	movs	r1, #1
 8001324:	4862      	ldr	r0, [pc, #392]	; (80014b0 <int_Hardware+0x2dc>)
 8001326:	f002 fe19 	bl	8003f5c <GPIO_PIN_Config>
	/*Opciones: GPIO_Tipo_x, donde x--->||IN, OUT, ALTFN, ANALOG ||| PUSHPULL, OPENDRAIN |||
	 * ||| LOW, MEDIUM, FAST, HIGH ||| NOTHING, PULLUP, PULLDOWN, RESERVED |||  AFx, 0-15 |||*/
	//Cargamos la configuracion del PIN especifico
	GPIO_Config(&handler_GPIO_MotorL_IN);
 800132a:	4861      	ldr	r0, [pc, #388]	; (80014b0 <int_Hardware+0x2dc>)
 800132c:	f002 fe38 	bl	8003fa0 <GPIO_Config>
	//------------Enable------------------------
	//---------------PIN: PC11----------------
	//Definimos el periferico GPIOx a usar.
	handler_GPIO_MotorL_EN.pGPIOx = GPIOC;
 8001330:	4b61      	ldr	r3, [pc, #388]	; (80014b8 <int_Hardware+0x2e4>)
 8001332:	4a56      	ldr	r2, [pc, #344]	; (800148c <int_Hardware+0x2b8>)
 8001334:	609a      	str	r2, [r3, #8]
	//Definimos el pin a utilizar
	handler_GPIO_MotorL_EN.GPIO_PinConfig.GPIO_PinNumber = PIN_11; 						//PIN_x, 0-15
 8001336:	4b60      	ldr	r3, [pc, #384]	; (80014b8 <int_Hardware+0x2e4>)
 8001338:	220b      	movs	r2, #11
 800133a:	701a      	strb	r2, [r3, #0]
	//Definimos la configuracion de los registro para el pin seleccionado
	// Orden de elementos: (Struct, Mode, Otyper, Ospeedr, Pupdr, AF)
	GPIO_PIN_Config(&handler_GPIO_MotorL_EN, GPIO_MODE_OUT, GPIO_OTYPER_PUSHPULL, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDR_NOTHING, AF0);
 800133c:	2300      	movs	r3, #0
 800133e:	9301      	str	r3, [sp, #4]
 8001340:	2300      	movs	r3, #0
 8001342:	9300      	str	r3, [sp, #0]
 8001344:	2301      	movs	r3, #1
 8001346:	2200      	movs	r2, #0
 8001348:	2101      	movs	r1, #1
 800134a:	485b      	ldr	r0, [pc, #364]	; (80014b8 <int_Hardware+0x2e4>)
 800134c:	f002 fe06 	bl	8003f5c <GPIO_PIN_Config>
	/*Opciones: GPIO_Tipo_x, donde x--->||IN, OUT, ALTFN, ANALOG ||| PUSHPULL, OPENDRAIN |||
	 * ||| LOW, MEDIUM, FAST, HIGH ||| NOTHING, PULLUP, PULLDOWN, RESERVED |||  AFx, 0-15 |||*/
	//Cargamos la configuracion del PIN especifico
	GPIO_Config(&handler_GPIO_MotorL_EN);
 8001350:	4859      	ldr	r0, [pc, #356]	; (80014b8 <int_Hardware+0x2e4>)
 8001352:	f002 fe25 	bl	8003fa0 <GPIO_Config>

	//-------------------Inicio de Configuracion USARTx-----------------------

	//---------------USART1----------------
	//Definimos el periferico USARTx a utilizar
	handler_USART_USB.ptrUSARTx = USART2;
 8001356:	4b59      	ldr	r3, [pc, #356]	; (80014bc <int_Hardware+0x2e8>)
 8001358:	4a59      	ldr	r2, [pc, #356]	; (80014c0 <int_Hardware+0x2ec>)
 800135a:	609a      	str	r2, [r3, #8]
	//Definimos la configuracion del USART seleccionado
	handler_USART_USB.USART_Config.USART_mode = USART_MODE_RXTX;           //USART_MODE_x  x-> TX, RX, RXTX, DISABLE
 800135c:	4b57      	ldr	r3, [pc, #348]	; (80014bc <int_Hardware+0x2e8>)
 800135e:	2202      	movs	r2, #2
 8001360:	701a      	strb	r2, [r3, #0]
	handler_USART_USB.USART_Config.USART_baudrate = USART_BAUDRATE_19200;  //USART_BAUDRATE_x  x->9600, 19200, 115200
 8001362:	4b56      	ldr	r3, [pc, #344]	; (80014bc <int_Hardware+0x2e8>)
 8001364:	2201      	movs	r2, #1
 8001366:	705a      	strb	r2, [r3, #1]
	handler_USART_USB.USART_Config.USART_parity= USART_PARITY_NONE;       //USART_PARITY_x   x->NONE, ODD, EVEN
 8001368:	4b54      	ldr	r3, [pc, #336]	; (80014bc <int_Hardware+0x2e8>)
 800136a:	2200      	movs	r2, #0
 800136c:	709a      	strb	r2, [r3, #2]
	handler_USART_USB.USART_Config.USART_stopbits=USART_STOPBIT_1;         //USART_STOPBIT_x  x->1, 0_5, 2, 1_5
 800136e:	4b53      	ldr	r3, [pc, #332]	; (80014bc <int_Hardware+0x2e8>)
 8001370:	2200      	movs	r2, #0
 8001372:	70da      	strb	r2, [r3, #3]
	handler_USART_USB.USART_Config.USART_enableIntRX = USART_RX_INTERRUP_ENABLE;   //USART_RX_INTERRUP_x  x-> DISABLE, ENABLE
 8001374:	4b51      	ldr	r3, [pc, #324]	; (80014bc <int_Hardware+0x2e8>)
 8001376:	2201      	movs	r2, #1
 8001378:	711a      	strb	r2, [r3, #4]
	handler_USART_USB.USART_Config.USART_enableIntTX = USART_TX_INTERRUP_ENABLE;   //USART_TX_INTERRUP_x  x-> DISABLE, ENABLE
 800137a:	4b50      	ldr	r3, [pc, #320]	; (80014bc <int_Hardware+0x2e8>)
 800137c:	2201      	movs	r2, #1
 800137e:	715a      	strb	r2, [r3, #5]
	//Cargamos la configuracion del USART especifico
	USART_Config(&handler_USART_USB);
 8001380:	484e      	ldr	r0, [pc, #312]	; (80014bc <int_Hardware+0x2e8>)
 8001382:	f003 fba3 	bl	8004acc <USART_Config>

	//-------------------Inicio de Configuracion TIMx-----------------------

	//---------------TIM2----------------
	//Definimos el TIMx a usar
	handler_BlinkyTimer.ptrTIMx = TIM2;
 8001386:	4b4f      	ldr	r3, [pc, #316]	; (80014c4 <int_Hardware+0x2f0>)
 8001388:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800138c:	60da      	str	r2, [r3, #12]
	//Definimos la configuracion del TIMER seleccionado
	handler_BlinkyTimer.TIMx_Config.TIMx_periodcnt = BTIMER_PCNT_1ms; //BTIMER_PCNT_xus x->10,100/ BTIMER_PCNT_1ms
 800138e:	4b4d      	ldr	r3, [pc, #308]	; (80014c4 <int_Hardware+0x2f0>)
 8001390:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001394:	805a      	strh	r2, [r3, #2]
	handler_BlinkyTimer.TIMx_Config.TIMx_mode = BTIMER_MODE_UP; // BTIMER_MODE_x x->UP, DOWN
 8001396:	4b4b      	ldr	r3, [pc, #300]	; (80014c4 <int_Hardware+0x2f0>)
 8001398:	2200      	movs	r2, #0
 800139a:	701a      	strb	r2, [r3, #0]
	handler_BlinkyTimer.TIMx_Config.TIMX_period = 250;//Al definir 10us,100us el valor un multiplo de ellos, si es 1ms el valor es en ms
 800139c:	4b49      	ldr	r3, [pc, #292]	; (80014c4 <int_Hardware+0x2f0>)
 800139e:	22fa      	movs	r2, #250	; 0xfa
 80013a0:	605a      	str	r2, [r3, #4]
	handler_BlinkyTimer.TIMx_Config.TIMx_interruptEnable = INTERRUPTION_ENABLE; //INTERRUPTION_x  x->DISABLE, ENABLE
 80013a2:	4b48      	ldr	r3, [pc, #288]	; (80014c4 <int_Hardware+0x2f0>)
 80013a4:	2201      	movs	r2, #1
 80013a6:	721a      	strb	r2, [r3, #8]
	//Cargamos la configuracion del TIMER especifico
	BasicTimer_Config(&handler_BlinkyTimer);
 80013a8:	4846      	ldr	r0, [pc, #280]	; (80014c4 <int_Hardware+0x2f0>)
 80013aa:	f001 fbb3 	bl	8002b14 <BasicTimer_Config>

	//---------------TIM3----------------
	//Definimos el TIMx a usar
	handler_TIMER_Count.ptrTIMx = TIM3;
 80013ae:	4b46      	ldr	r3, [pc, #280]	; (80014c8 <int_Hardware+0x2f4>)
 80013b0:	4a46      	ldr	r2, [pc, #280]	; (80014cc <int_Hardware+0x2f8>)
 80013b2:	60da      	str	r2, [r3, #12]
	//Definimos la configuracion del TIMER seleccionado
	handler_TIMER_Count.TIMx_Config.TIMx_periodcnt = BTIMER_PCNT_1ms; //BTIMER_PCNT_xus x->10,100/ BTIMER_PCNT_1ms
 80013b4:	4b44      	ldr	r3, [pc, #272]	; (80014c8 <int_Hardware+0x2f4>)
 80013b6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80013ba:	805a      	strh	r2, [r3, #2]
	handler_TIMER_Count.TIMx_Config.TIMx_mode = BTIMER_MODE_UP; // BTIMER_MODE_x x->UP, DOWN
 80013bc:	4b42      	ldr	r3, [pc, #264]	; (80014c8 <int_Hardware+0x2f4>)
 80013be:	2200      	movs	r2, #0
 80013c0:	701a      	strb	r2, [r3, #0]
	handler_TIMER_Count.TIMx_Config.TIMX_period = 2000;//Al definir 10us,100us el valor un multiplo de ellos, si es 1ms el valor es en ms
 80013c2:	4b41      	ldr	r3, [pc, #260]	; (80014c8 <int_Hardware+0x2f4>)
 80013c4:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80013c8:	605a      	str	r2, [r3, #4]
	handler_TIMER_Count.TIMx_Config.TIMx_interruptEnable = INTERRUPTION_DISABLE; //INTERRUPTION_x  x->DISABLE, ENABLE
 80013ca:	4b3f      	ldr	r3, [pc, #252]	; (80014c8 <int_Hardware+0x2f4>)
 80013cc:	2200      	movs	r2, #0
 80013ce:	721a      	strb	r2, [r3, #8]
	//Cargamos la configuracion del TIMER especifico
	BasicTimer_Config(&handler_TIMER_Count);
 80013d0:	483d      	ldr	r0, [pc, #244]	; (80014c8 <int_Hardware+0x2f4>)
 80013d2:	f001 fb9f 	bl	8002b14 <BasicTimer_Config>

	//---------------TIM5----------------
	//Definimos el TIMx a usar
	handler_TIMER_Motor.ptrTIMx = TIM5;
 80013d6:	4b3e      	ldr	r3, [pc, #248]	; (80014d0 <int_Hardware+0x2fc>)
 80013d8:	4a3e      	ldr	r2, [pc, #248]	; (80014d4 <int_Hardware+0x300>)
 80013da:	60da      	str	r2, [r3, #12]
	//Definimos la configuracion del TIMER seleccionado
	handler_TIMER_Motor.TIMx_Config.TIMx_periodcnt = BTIMER_PCNT_10us; //BTIMER_PCNT_xus x->10,100/ BTIMER_PCNT_1ms
 80013dc:	4b3c      	ldr	r3, [pc, #240]	; (80014d0 <int_Hardware+0x2fc>)
 80013de:	220a      	movs	r2, #10
 80013e0:	805a      	strh	r2, [r3, #2]
	handler_TIMER_Motor.TIMx_Config.TIMx_mode = BTIMER_MODE_UP; // BTIMER_MODE_x x->UP, DOWN
 80013e2:	4b3b      	ldr	r3, [pc, #236]	; (80014d0 <int_Hardware+0x2fc>)
 80013e4:	2200      	movs	r2, #0
 80013e6:	701a      	strb	r2, [r3, #0]
	handler_TIMER_Motor.TIMx_Config.TIMX_period = 100;//Al definir 10us,100us el valor un multiplo de ellos, si es 1ms el valor es en ms
 80013e8:	4b39      	ldr	r3, [pc, #228]	; (80014d0 <int_Hardware+0x2fc>)
 80013ea:	2264      	movs	r2, #100	; 0x64
 80013ec:	605a      	str	r2, [r3, #4]
	handler_TIMER_Motor.TIMx_Config.TIMx_interruptEnable = INTERRUPTION_DISABLE; //INTERRUPTION_x  x->DISABLE, ENABLE
 80013ee:	4b38      	ldr	r3, [pc, #224]	; (80014d0 <int_Hardware+0x2fc>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	721a      	strb	r2, [r3, #8]
	//Cargamos la configuracion del TIMER especifico
	BasicTimer_Config(&handler_TIMER_Motor);
 80013f4:	4836      	ldr	r0, [pc, #216]	; (80014d0 <int_Hardware+0x2fc>)
 80013f6:	f001 fb8d 	bl	8002b14 <BasicTimer_Config>

	//-------------------Inicio de Configuracion EXTIx -----------------------

	//---------------PIN: PC1----------------
	//Definimos el periferico GPIOx a usar.
	handler_GPIO_FotoR.pGPIOx = GPIOC;
 80013fa:	4b37      	ldr	r3, [pc, #220]	; (80014d8 <int_Hardware+0x304>)
 80013fc:	4a23      	ldr	r2, [pc, #140]	; (800148c <int_Hardware+0x2b8>)
 80013fe:	609a      	str	r2, [r3, #8]
	//Definimos el pin a utilizar
	handler_GPIO_FotoR.GPIO_PinConfig.GPIO_PinNumber = PIN_1;
 8001400:	4b35      	ldr	r3, [pc, #212]	; (80014d8 <int_Hardware+0x304>)
 8001402:	2201      	movs	r2, #1
 8001404:	701a      	strb	r2, [r3, #0]
	//Definimos la posicion del elemento pGIOHandler.
	 handler_EXTI_FotoR.pGPIOHandler = &handler_GPIO_FotoR;
 8001406:	4b35      	ldr	r3, [pc, #212]	; (80014dc <int_Hardware+0x308>)
 8001408:	4a33      	ldr	r2, [pc, #204]	; (80014d8 <int_Hardware+0x304>)
 800140a:	601a      	str	r2, [r3, #0]
	//Definimos el tipo de flanco
	 handler_EXTI_FotoR.edgeType = EXTERNAL_INTERRUPP_RISING_FALLING_EDGE;
 800140c:	4b33      	ldr	r3, [pc, #204]	; (80014dc <int_Hardware+0x308>)
 800140e:	2202      	movs	r2, #2
 8001410:	711a      	strb	r2, [r3, #4]
	//Cargamos la configuracion del EXTIx
	extInt_Config(& handler_EXTI_FotoR);
 8001412:	4832      	ldr	r0, [pc, #200]	; (80014dc <int_Hardware+0x308>)
 8001414:	f001 fd02 	bl	8002e1c <extInt_Config>

	//---------------PIN: PC3----------------
	//Definimos el periferico GPIOx a usar.
	handler_GPIO_FotoL.pGPIOx = GPIOC;
 8001418:	4b31      	ldr	r3, [pc, #196]	; (80014e0 <int_Hardware+0x30c>)
 800141a:	4a1c      	ldr	r2, [pc, #112]	; (800148c <int_Hardware+0x2b8>)
 800141c:	609a      	str	r2, [r3, #8]
	//Definimos el pin a utilizar
	handler_GPIO_FotoL.GPIO_PinConfig.GPIO_PinNumber = PIN_3;
 800141e:	4b30      	ldr	r3, [pc, #192]	; (80014e0 <int_Hardware+0x30c>)
 8001420:	2203      	movs	r2, #3
 8001422:	701a      	strb	r2, [r3, #0]
	//Definimos la posicion del elemento pGIOHandler.
	 handler_EXTI_FotoL.pGPIOHandler = &handler_GPIO_FotoL;
 8001424:	4b2f      	ldr	r3, [pc, #188]	; (80014e4 <int_Hardware+0x310>)
 8001426:	4a2e      	ldr	r2, [pc, #184]	; (80014e0 <int_Hardware+0x30c>)
 8001428:	601a      	str	r2, [r3, #0]
	//Definimos el tipo de flanco
	 handler_EXTI_FotoL.edgeType = EXTERNAL_INTERRUPP_RISING_FALLING_EDGE;
 800142a:	4b2e      	ldr	r3, [pc, #184]	; (80014e4 <int_Hardware+0x310>)
 800142c:	2202      	movs	r2, #2
 800142e:	711a      	strb	r2, [r3, #4]
	//Cargamos la configuracion del EXTIx
	extInt_Config(& handler_EXTI_FotoL);
 8001430:	482c      	ldr	r0, [pc, #176]	; (80014e4 <int_Hardware+0x310>)
 8001432:	f001 fcf3 	bl	8002e1c <extInt_Config>

	//-------------------Inicio de Configuracion PWM_Channelx----------------------

	//---------------TIM5_Channel_1----------------
	//Definimos el TIMx a usar
	handler_PWM_MotorR.ptrTIMx = TIM5;
 8001436:	4b2c      	ldr	r3, [pc, #176]	; (80014e8 <int_Hardware+0x314>)
 8001438:	4a26      	ldr	r2, [pc, #152]	; (80014d4 <int_Hardware+0x300>)
 800143a:	609a      	str	r2, [r3, #8]
	//Definimos la configuracion para el PWM
	handler_PWM_MotorR.config.channel = PWM_CHANNEL_1;     //PWM_CHANNEL_x x->1,2,3,4
 800143c:	4b2a      	ldr	r3, [pc, #168]	; (80014e8 <int_Hardware+0x314>)
 800143e:	2200      	movs	r2, #0
 8001440:	701a      	strb	r2, [r3, #0]
	handler_PWM_MotorR.config.duttyCicle = 10;             //Valor del Dutty como multiplo del periodo del CNT
 8001442:	4b29      	ldr	r3, [pc, #164]	; (80014e8 <int_Hardware+0x314>)
 8001444:	220a      	movs	r2, #10
 8001446:	805a      	strh	r2, [r3, #2]
	handler_PWM_MotorR.config.polarity = POLARITY_LOW;    //POLARITY_x x-> HIGH, LOW
 8001448:	4b27      	ldr	r3, [pc, #156]	; (80014e8 <int_Hardware+0x314>)
 800144a:	2201      	movs	r2, #1
 800144c:	711a      	strb	r2, [r3, #4]
	//Cargamos la configuracion
	pwm_Config(&handler_PWM_MotorR);
 800144e:	4826      	ldr	r0, [pc, #152]	; (80014e8 <int_Hardware+0x314>)
 8001450:	f003 f840 	bl	80044d4 <pwm_Config>
	//Activamos el PWM
	statusInOutPWM(&handler_PWM_MotorR, CHANNEL_ENABLE);
 8001454:	2101      	movs	r1, #1
 8001456:	4824      	ldr	r0, [pc, #144]	; (80014e8 <int_Hardware+0x314>)
 8001458:	f003 f99c 	bl	8004794 <statusInOutPWM>

	//---------------TIM5_Channel_2----------------
	//Definimos el TIMx a usar
	handler_PWM_MotorL.ptrTIMx = TIM5;
 800145c:	4b23      	ldr	r3, [pc, #140]	; (80014ec <int_Hardware+0x318>)
 800145e:	4a1d      	ldr	r2, [pc, #116]	; (80014d4 <int_Hardware+0x300>)
 8001460:	609a      	str	r2, [r3, #8]
	//Definimos la configuracion para el PWM
	handler_PWM_MotorL.config.channel = PWM_CHANNEL_2;     //PWM_CHANNEL_x x->1,2,3,4
 8001462:	4b22      	ldr	r3, [pc, #136]	; (80014ec <int_Hardware+0x318>)
 8001464:	2201      	movs	r2, #1
 8001466:	701a      	strb	r2, [r3, #0]
	handler_PWM_MotorL.config.duttyCicle = 10;             //Valor del Dutty como multiplo del periodo del CNT
 8001468:	4b20      	ldr	r3, [pc, #128]	; (80014ec <int_Hardware+0x318>)
 800146a:	220a      	movs	r2, #10
 800146c:	805a      	strh	r2, [r3, #2]
	handler_PWM_MotorL.config.polarity = POLARITY_LOW;    //POLARITY_x x-> HIGH, LOW
 800146e:	4b1f      	ldr	r3, [pc, #124]	; (80014ec <int_Hardware+0x318>)
 8001470:	2201      	movs	r2, #1
 8001472:	711a      	strb	r2, [r3, #4]
	//Cargamos la configuracion
	pwm_Config(&handler_PWM_MotorL);
 8001474:	481d      	ldr	r0, [pc, #116]	; (80014ec <int_Hardware+0x318>)
 8001476:	f003 f82d 	bl	80044d4 <pwm_Config>
	//Activamos el PWM
	statusInOutPWM(&handler_PWM_MotorL, CHANNEL_ENABLE);
 800147a:	2101      	movs	r1, #1
 800147c:	481b      	ldr	r0, [pc, #108]	; (80014ec <int_Hardware+0x318>)
 800147e:	f003 f989 	bl	8004794 <statusInOutPWM>

	//---------------------Fin de Configuracion PWM_Channelx-----------------------


}
 8001482:	bf00      	nop
 8001484:	46bd      	mov	sp, r7
 8001486:	bd80      	pop	{r7, pc}
 8001488:	20000220 	.word	0x20000220
 800148c:	40020800 	.word	0x40020800
 8001490:	20000204 	.word	0x20000204
 8001494:	40020000 	.word	0x40020000
 8001498:	20000254 	.word	0x20000254
 800149c:	20000260 	.word	0x20000260
 80014a0:	200002b8 	.word	0x200002b8
 80014a4:	200002c4 	.word	0x200002c4
 80014a8:	200002d0 	.word	0x200002d0
 80014ac:	20000334 	.word	0x20000334
 80014b0:	20000340 	.word	0x20000340
 80014b4:	40020c00 	.word	0x40020c00
 80014b8:	2000034c 	.word	0x2000034c
 80014bc:	2000026c 	.word	0x2000026c
 80014c0:	40004400 	.word	0x40004400
 80014c4:	20000210 	.word	0x20000210
 80014c8:	200003c0 	.word	0x200003c0
 80014cc:	40000400 	.word	0x40000400
 80014d0:	200003b0 	.word	0x200003b0
 80014d4:	40000c00 	.word	0x40000c00
 80014d8:	2000022c 	.word	0x2000022c
 80014dc:	20000238 	.word	0x20000238
 80014e0:	20000240 	.word	0x20000240
 80014e4:	2000024c 	.word	0x2000024c
 80014e8:	200002dc 	.word	0x200002dc
 80014ec:	20000358 	.word	0x20000358

080014f0 <int_MCO2>:

//-----------------------------Inicio configuracion MCO1------------------------------------------

//Funcion para la configuracion inicial del MCO1
void int_MCO2(void)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	af00      	add	r7, sp, #0
	//Configuracion inicial del MCO2
	configMCO2(0);
 80014f4:	2000      	movs	r0, #0
 80014f6:	f002 ff71 	bl	80043dc <configMCO2>
	configMCO2PRE(4);
 80014fa:	2004      	movs	r0, #4
 80014fc:	f002 ff8a 	bl	8004414 <configMCO2PRE>
}
 8001500:	bf00      	nop
 8001502:	bd80      	pop	{r7, pc}

08001504 <int_Config_Motor>:
//------------------------------Fin configuracion MCO1------------------------------------------


//------------------------------Inicio configuracion de lso motores------------------------------------------
void int_Config_Motor(void)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b082      	sub	sp, #8
 8001508:	af00      	add	r7, sp, #0
	//---------------Motor Derecho----------------
	//Parametro de la señal del dutty
	handler_Motor_R.configMotor.dutty =  20;
 800150a:	4b47      	ldr	r3, [pc, #284]	; (8001628 <int_Config_Motor+0x124>)
 800150c:	4a47      	ldr	r2, [pc, #284]	; (800162c <int_Config_Motor+0x128>)
 800150e:	639a      	str	r2, [r3, #56]	; 0x38
	handler_Motor_R.configMotor.frecuency = &value_period;
 8001510:	4b45      	ldr	r3, [pc, #276]	; (8001628 <int_Config_Motor+0x124>)
 8001512:	4a47      	ldr	r2, [pc, #284]	; (8001630 <int_Config_Motor+0x12c>)
 8001514:	635a      	str	r2, [r3, #52]	; 0x34
	handler_Motor_R.configMotor.dir = SET;
 8001516:	4b44      	ldr	r3, [pc, #272]	; (8001628 <int_Config_Motor+0x124>)
 8001518:	2201      	movs	r2, #1
 800151a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	//handler de los perifericos
	handler_Motor_R.phandlerGPIOEN = &handler_GPIO_MotorR_EN;
 800151e:	4b42      	ldr	r3, [pc, #264]	; (8001628 <int_Config_Motor+0x124>)
 8001520:	4a44      	ldr	r2, [pc, #272]	; (8001634 <int_Config_Motor+0x130>)
 8001522:	645a      	str	r2, [r3, #68]	; 0x44
	handler_Motor_R.phandlerGPIOIN = &handler_GPIO_MotorR_IN;
 8001524:	4b40      	ldr	r3, [pc, #256]	; (8001628 <int_Config_Motor+0x124>)
 8001526:	4a44      	ldr	r2, [pc, #272]	; (8001638 <int_Config_Motor+0x134>)
 8001528:	641a      	str	r2, [r3, #64]	; 0x40
	handler_Motor_R.phandlerPWM = &handler_PWM_MotorR;
 800152a:	4b3f      	ldr	r3, [pc, #252]	; (8001628 <int_Config_Motor+0x124>)
 800152c:	4a43      	ldr	r2, [pc, #268]	; (800163c <int_Config_Motor+0x138>)
 800152e:	649a      	str	r2, [r3, #72]	; 0x48
	//definicion de parametros
	handler_Motor_R.parametersMotor.parametersPID.e = handler_Motor_R.parametersMotor.parametersPID.e_1 = handler_Motor_R.parametersMotor.parametersPID.e_2 = 0;
 8001530:	4b3d      	ldr	r3, [pc, #244]	; (8001628 <int_Config_Motor+0x124>)
 8001532:	f04f 0200 	mov.w	r2, #0
 8001536:	611a      	str	r2, [r3, #16]
 8001538:	4b3b      	ldr	r3, [pc, #236]	; (8001628 <int_Config_Motor+0x124>)
 800153a:	691b      	ldr	r3, [r3, #16]
 800153c:	4a3a      	ldr	r2, [pc, #232]	; (8001628 <int_Config_Motor+0x124>)
 800153e:	60d3      	str	r3, [r2, #12]
 8001540:	4b39      	ldr	r3, [pc, #228]	; (8001628 <int_Config_Motor+0x124>)
 8001542:	68db      	ldr	r3, [r3, #12]
 8001544:	4a38      	ldr	r2, [pc, #224]	; (8001628 <int_Config_Motor+0x124>)
 8001546:	6093      	str	r3, [r2, #8]
	handler_Motor_R.parametersMotor.parametersPID.u = handler_Motor_R.parametersMotor.parametersPID.u_1 = 0;
 8001548:	4b37      	ldr	r3, [pc, #220]	; (8001628 <int_Config_Motor+0x124>)
 800154a:	f04f 0200 	mov.w	r2, #0
 800154e:	605a      	str	r2, [r3, #4]
 8001550:	4b35      	ldr	r3, [pc, #212]	; (8001628 <int_Config_Motor+0x124>)
 8001552:	685b      	ldr	r3, [r3, #4]
 8001554:	4a34      	ldr	r2, [pc, #208]	; (8001628 <int_Config_Motor+0x124>)
 8001556:	6013      	str	r3, [r2, #0]
	//Calculo de Constantes PID
	float theta=2+Ts/2;
 8001558:	4b39      	ldr	r3, [pc, #228]	; (8001640 <int_Config_Motor+0x13c>)
 800155a:	ed93 7a00 	vldr	s14, [r3]
 800155e:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001562:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001566:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800156a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800156e:	edc7 7a01 	vstr	s15, [r7, #4]
	constains_calculator(&handler_Motor_R.parametersMotor.parametersPID, 2, 150, theta);   //k,tau,theta
 8001572:	ed97 1a01 	vldr	s2, [r7, #4]
 8001576:	eddf 0a33 	vldr	s1, [pc, #204]	; 8001644 <int_Config_Motor+0x140>
 800157a:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 800157e:	482a      	ldr	r0, [pc, #168]	; (8001628 <int_Config_Motor+0x124>)
 8001580:	f001 f8ca 	bl	8002718 <constains_calculator>

	//---------------Motor Izquierdo----------------
	//Parametro de la señal del dutty
	handler_Motor_L.configMotor.dutty =  20;
 8001584:	4b30      	ldr	r3, [pc, #192]	; (8001648 <int_Config_Motor+0x144>)
 8001586:	4a29      	ldr	r2, [pc, #164]	; (800162c <int_Config_Motor+0x128>)
 8001588:	639a      	str	r2, [r3, #56]	; 0x38
	handler_Motor_L.configMotor.frecuency = &value_period;
 800158a:	4b2f      	ldr	r3, [pc, #188]	; (8001648 <int_Config_Motor+0x144>)
 800158c:	4a28      	ldr	r2, [pc, #160]	; (8001630 <int_Config_Motor+0x12c>)
 800158e:	635a      	str	r2, [r3, #52]	; 0x34
	handler_Motor_L.configMotor.dir = SET;
 8001590:	4b2d      	ldr	r3, [pc, #180]	; (8001648 <int_Config_Motor+0x144>)
 8001592:	2201      	movs	r2, #1
 8001594:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	//handler de los perifericos
	handler_Motor_L.phandlerGPIOEN = &handler_GPIO_MotorL_EN;
 8001598:	4b2b      	ldr	r3, [pc, #172]	; (8001648 <int_Config_Motor+0x144>)
 800159a:	4a2c      	ldr	r2, [pc, #176]	; (800164c <int_Config_Motor+0x148>)
 800159c:	645a      	str	r2, [r3, #68]	; 0x44
	handler_Motor_L.phandlerGPIOIN = &handler_GPIO_MotorL_IN;
 800159e:	4b2a      	ldr	r3, [pc, #168]	; (8001648 <int_Config_Motor+0x144>)
 80015a0:	4a2b      	ldr	r2, [pc, #172]	; (8001650 <int_Config_Motor+0x14c>)
 80015a2:	641a      	str	r2, [r3, #64]	; 0x40
	handler_Motor_L.phandlerPWM = &handler_PWM_MotorL;
 80015a4:	4b28      	ldr	r3, [pc, #160]	; (8001648 <int_Config_Motor+0x144>)
 80015a6:	4a2b      	ldr	r2, [pc, #172]	; (8001654 <int_Config_Motor+0x150>)
 80015a8:	649a      	str	r2, [r3, #72]	; 0x48
	//definicion de parametros
	handler_Motor_L.parametersMotor.parametersPID.e = handler_Motor_L.parametersMotor.parametersPID.e_1 = handler_Motor_L.parametersMotor.parametersPID.e_2 = 0;
 80015aa:	4b27      	ldr	r3, [pc, #156]	; (8001648 <int_Config_Motor+0x144>)
 80015ac:	f04f 0200 	mov.w	r2, #0
 80015b0:	611a      	str	r2, [r3, #16]
 80015b2:	4b25      	ldr	r3, [pc, #148]	; (8001648 <int_Config_Motor+0x144>)
 80015b4:	691b      	ldr	r3, [r3, #16]
 80015b6:	4a24      	ldr	r2, [pc, #144]	; (8001648 <int_Config_Motor+0x144>)
 80015b8:	60d3      	str	r3, [r2, #12]
 80015ba:	4b23      	ldr	r3, [pc, #140]	; (8001648 <int_Config_Motor+0x144>)
 80015bc:	68db      	ldr	r3, [r3, #12]
 80015be:	4a22      	ldr	r2, [pc, #136]	; (8001648 <int_Config_Motor+0x144>)
 80015c0:	6093      	str	r3, [r2, #8]
	handler_Motor_L.parametersMotor.parametersPID.u = handler_Motor_L.parametersMotor.parametersPID.u_1 = 0;
 80015c2:	4b21      	ldr	r3, [pc, #132]	; (8001648 <int_Config_Motor+0x144>)
 80015c4:	f04f 0200 	mov.w	r2, #0
 80015c8:	605a      	str	r2, [r3, #4]
 80015ca:	4b1f      	ldr	r3, [pc, #124]	; (8001648 <int_Config_Motor+0x144>)
 80015cc:	685b      	ldr	r3, [r3, #4]
 80015ce:	4a1e      	ldr	r2, [pc, #120]	; (8001648 <int_Config_Motor+0x144>)
 80015d0:	6013      	str	r3, [r2, #0]
	//Calculo de Constantes PID
	constains_calculator(&handler_Motor_L.parametersMotor.parametersPID, 2, 150, theta);   //k,tau,theta
 80015d2:	ed97 1a01 	vldr	s2, [r7, #4]
 80015d6:	eddf 0a1b 	vldr	s1, [pc, #108]	; 8001644 <int_Config_Motor+0x140>
 80015da:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 80015de:	481a      	ldr	r0, [pc, #104]	; (8001648 <int_Config_Motor+0x144>)
 80015e0:	f001 f89a 	bl	8002718 <constains_calculator>

	//---------------PID del la distancia-----------------
	//definicion de parametros
	parameter_PID_distance.e = parameter_PID_distance.e_1 = parameter_PID_distance.e_2 = 0;
 80015e4:	4b1c      	ldr	r3, [pc, #112]	; (8001658 <int_Config_Motor+0x154>)
 80015e6:	f04f 0200 	mov.w	r2, #0
 80015ea:	611a      	str	r2, [r3, #16]
 80015ec:	4b1a      	ldr	r3, [pc, #104]	; (8001658 <int_Config_Motor+0x154>)
 80015ee:	691b      	ldr	r3, [r3, #16]
 80015f0:	4a19      	ldr	r2, [pc, #100]	; (8001658 <int_Config_Motor+0x154>)
 80015f2:	60d3      	str	r3, [r2, #12]
 80015f4:	4b18      	ldr	r3, [pc, #96]	; (8001658 <int_Config_Motor+0x154>)
 80015f6:	68db      	ldr	r3, [r3, #12]
 80015f8:	4a17      	ldr	r2, [pc, #92]	; (8001658 <int_Config_Motor+0x154>)
 80015fa:	6093      	str	r3, [r2, #8]
	parameter_PID_distance.u = parameter_PID_distance.u_1 = 0;
 80015fc:	4b16      	ldr	r3, [pc, #88]	; (8001658 <int_Config_Motor+0x154>)
 80015fe:	f04f 0200 	mov.w	r2, #0
 8001602:	605a      	str	r2, [r3, #4]
 8001604:	4b14      	ldr	r3, [pc, #80]	; (8001658 <int_Config_Motor+0x154>)
 8001606:	685b      	ldr	r3, [r3, #4]
 8001608:	4a13      	ldr	r2, [pc, #76]	; (8001658 <int_Config_Motor+0x154>)
 800160a:	6013      	str	r3, [r2, #0]
	//Calculo de Constantes PID
	constains_calculator(&parameter_PID_distance, 2, 150, theta);   //k,tau,theta
 800160c:	ed97 1a01 	vldr	s2, [r7, #4]
 8001610:	eddf 0a0c 	vldr	s1, [pc, #48]	; 8001644 <int_Config_Motor+0x140>
 8001614:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8001618:	480f      	ldr	r0, [pc, #60]	; (8001658 <int_Config_Motor+0x154>)
 800161a:	f001 f87d 	bl	8002718 <constains_calculator>

};
 800161e:	bf00      	nop
 8001620:	3708      	adds	r7, #8
 8001622:	46bd      	mov	sp, r7
 8001624:	bd80      	pop	{r7, pc}
 8001626:	bf00      	nop
 8001628:	200002e8 	.word	0x200002e8
 800162c:	41a00000 	.word	0x41a00000
 8001630:	20000002 	.word	0x20000002
 8001634:	200002d0 	.word	0x200002d0
 8001638:	200002c4 	.word	0x200002c4
 800163c:	200002dc 	.word	0x200002dc
 8001640:	20000004 	.word	0x20000004
 8001644:	43160000 	.word	0x43160000
 8001648:	20000364 	.word	0x20000364
 800164c:	2000034c 	.word	0x2000034c
 8001650:	20000340 	.word	0x20000340
 8001654:	20000358 	.word	0x20000358
 8001658:	200003d0 	.word	0x200003d0

0800165c <BasicTimer2_Callback>:
//----------------------------Inicio de la definicion de las funciones ISR---------------------------------------

//-------------------------BlinkyLed--------------------------------
//Definimos la funcion que se desea ejecutar cuando se genera la interrupcion por el TIM2
void BasicTimer2_Callback(void)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	af00      	add	r7, sp, #0
	GPIOxTooglePin(&handler_BlinkyPin);
 8001660:	4802      	ldr	r0, [pc, #8]	; (800166c <BasicTimer2_Callback+0x10>)
 8001662:	f002 fdf2 	bl	800424a <GPIOxTooglePin>
}
 8001666:	bf00      	nop
 8001668:	bd80      	pop	{r7, pc}
 800166a:	bf00      	nop
 800166c:	20000204 	.word	0x20000204

08001670 <BasicTimer3_Callback>:

//-------------------------study--------------------------------
//Definimos la funcion que se desea ejecutar cuando se genera la interrupcion por el TIM2
void BasicTimer3_Callback(void)
{
 8001670:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001674:	ed2d 8b02 	vpush	{d8}
 8001678:	b085      	sub	sp, #20
 800167a:	af04      	add	r7, sp, #16
	if(flag_motor==1)
 800167c:	4bcc      	ldr	r3, [pc, #816]	; (80019b0 <BasicTimer3_Callback+0x340>)
 800167e:	781b      	ldrb	r3, [r3, #0]
 8001680:	2b01      	cmp	r3, #1
 8001682:	f040 823c 	bne.w	8001afe <BasicTimer3_Callback+0x48e>
	{
		//Calculamos la velocidad
		handler_Motor_L.parametersMotor.distance = (cm_L*handler_Motor_L.parametersMotor.count);                   //[mm]
 8001686:	4bcb      	ldr	r3, [pc, #812]	; (80019b4 <BasicTimer3_Callback+0x344>)
 8001688:	8c1b      	ldrh	r3, [r3, #32]
 800168a:	ee07 3a90 	vmov	s15, r3
 800168e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001692:	4bc9      	ldr	r3, [pc, #804]	; (80019b8 <BasicTimer3_Callback+0x348>)
 8001694:	edd3 7a00 	vldr	s15, [r3]
 8001698:	ee67 7a27 	vmul.f32	s15, s14, s15
 800169c:	4bc5      	ldr	r3, [pc, #788]	; (80019b4 <BasicTimer3_Callback+0x344>)
 800169e:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
		handler_Motor_R.parametersMotor.distance = (cm_R*handler_Motor_R.parametersMotor.count);				   //[mm]
 80016a2:	4bc6      	ldr	r3, [pc, #792]	; (80019bc <BasicTimer3_Callback+0x34c>)
 80016a4:	8c1b      	ldrh	r3, [r3, #32]
 80016a6:	ee07 3a90 	vmov	s15, r3
 80016aa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80016ae:	4bc4      	ldr	r3, [pc, #784]	; (80019c0 <BasicTimer3_Callback+0x350>)
 80016b0:	edd3 7a00 	vldr	s15, [r3]
 80016b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80016b8:	4bc0      	ldr	r3, [pc, #768]	; (80019bc <BasicTimer3_Callback+0x34c>)
 80016ba:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
		handler_Motor_L.parametersMotor.velocity = handler_Motor_L.parametersMotor.distance/periodo_TIMER_Count;   //[m/s]
 80016be:	4bbd      	ldr	r3, [pc, #756]	; (80019b4 <BasicTimer3_Callback+0x344>)
 80016c0:	edd3 6a0c 	vldr	s13, [r3, #48]	; 0x30
 80016c4:	4bbf      	ldr	r3, [pc, #764]	; (80019c4 <BasicTimer3_Callback+0x354>)
 80016c6:	881b      	ldrh	r3, [r3, #0]
 80016c8:	ee07 3a90 	vmov	s15, r3
 80016cc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80016d0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80016d4:	4bb7      	ldr	r3, [pc, #732]	; (80019b4 <BasicTimer3_Callback+0x344>)
 80016d6:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
		handler_Motor_R.parametersMotor.velocity = handler_Motor_R.parametersMotor.distance/periodo_TIMER_Count;   //[m/s]
 80016da:	4bb8      	ldr	r3, [pc, #736]	; (80019bc <BasicTimer3_Callback+0x34c>)
 80016dc:	edd3 6a0c 	vldr	s13, [r3, #48]	; 0x30
 80016e0:	4bb8      	ldr	r3, [pc, #736]	; (80019c4 <BasicTimer3_Callback+0x354>)
 80016e2:	881b      	ldrh	r3, [r3, #0]
 80016e4:	ee07 3a90 	vmov	s15, r3
 80016e8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80016ec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80016f0:	4bb2      	ldr	r3, [pc, #712]	; (80019bc <BasicTimer3_Callback+0x34c>)
 80016f2:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
		//Convertirmos los valores de velocidad a porcentaje
		porVel_L = 590*(handler_Motor_L.parametersMotor.velocity) - 36.53;
 80016f6:	4baf      	ldr	r3, [pc, #700]	; (80019b4 <BasicTimer3_Callback+0x344>)
 80016f8:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80016fc:	ed9f 7ab2 	vldr	s14, [pc, #712]	; 80019c8 <BasicTimer3_Callback+0x358>
 8001700:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001704:	ee17 0a90 	vmov	r0, s15
 8001708:	f7fe ff36 	bl	8000578 <__aeabi_f2d>
 800170c:	a3a6      	add	r3, pc, #664	; (adr r3, 80019a8 <BasicTimer3_Callback+0x338>)
 800170e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001712:	f7fe fdd1 	bl	80002b8 <__aeabi_dsub>
 8001716:	4602      	mov	r2, r0
 8001718:	460b      	mov	r3, r1
 800171a:	4610      	mov	r0, r2
 800171c:	4619      	mov	r1, r3
 800171e:	f7ff fa7b 	bl	8000c18 <__aeabi_d2f>
 8001722:	4603      	mov	r3, r0
 8001724:	4aa9      	ldr	r2, [pc, #676]	; (80019cc <BasicTimer3_Callback+0x35c>)
 8001726:	6013      	str	r3, [r2, #0]
		porVel_R = 590*(handler_Motor_R.parametersMotor.velocity) - 36.53;
 8001728:	4ba4      	ldr	r3, [pc, #656]	; (80019bc <BasicTimer3_Callback+0x34c>)
 800172a:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 800172e:	ed9f 7aa6 	vldr	s14, [pc, #664]	; 80019c8 <BasicTimer3_Callback+0x358>
 8001732:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001736:	ee17 0a90 	vmov	r0, s15
 800173a:	f7fe ff1d 	bl	8000578 <__aeabi_f2d>
 800173e:	a39a      	add	r3, pc, #616	; (adr r3, 80019a8 <BasicTimer3_Callback+0x338>)
 8001740:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001744:	f7fe fdb8 	bl	80002b8 <__aeabi_dsub>
 8001748:	4602      	mov	r2, r0
 800174a:	460b      	mov	r3, r1
 800174c:	4610      	mov	r0, r2
 800174e:	4619      	mov	r1, r3
 8001750:	f7ff fa62 	bl	8000c18 <__aeabi_d2f>
 8001754:	4603      	mov	r3, r0
 8001756:	4a9e      	ldr	r2, [pc, #632]	; (80019d0 <BasicTimer3_Callback+0x360>)
 8001758:	6013      	str	r3, [r2, #0]
		//Calculo odometria
		//se acumula valores
		flag_count_odometry++;
 800175a:	4b9e      	ldr	r3, [pc, #632]	; (80019d4 <BasicTimer3_Callback+0x364>)
 800175c:	781b      	ldrb	r3, [r3, #0]
 800175e:	3301      	adds	r3, #1
 8001760:	b2da      	uxtb	r2, r3
 8001762:	4b9c      	ldr	r3, [pc, #624]	; (80019d4 <BasicTimer3_Callback+0x364>)
 8001764:	701a      	strb	r2, [r3, #0]
		delta_distance_L += handler_Motor_L.parametersMotor.distance;
 8001766:	4b93      	ldr	r3, [pc, #588]	; (80019b4 <BasicTimer3_Callback+0x344>)
 8001768:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 800176c:	4b9a      	ldr	r3, [pc, #616]	; (80019d8 <BasicTimer3_Callback+0x368>)
 800176e:	edd3 7a00 	vldr	s15, [r3]
 8001772:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001776:	4b98      	ldr	r3, [pc, #608]	; (80019d8 <BasicTimer3_Callback+0x368>)
 8001778:	edc3 7a00 	vstr	s15, [r3]
		delta_distance_R += handler_Motor_R.parametersMotor.distance;
 800177c:	4b8f      	ldr	r3, [pc, #572]	; (80019bc <BasicTimer3_Callback+0x34c>)
 800177e:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 8001782:	4b96      	ldr	r3, [pc, #600]	; (80019dc <BasicTimer3_Callback+0x36c>)
 8001784:	edd3 7a00 	vldr	s15, [r3]
 8001788:	ee77 7a27 	vadd.f32	s15, s14, s15
 800178c:	4b93      	ldr	r3, [pc, #588]	; (80019dc <BasicTimer3_Callback+0x36c>)
 800178e:	edc3 7a00 	vstr	s15, [r3]
		//Se aplica la odometria
		if(flag_count_odometry>0)
 8001792:	4b90      	ldr	r3, [pc, #576]	; (80019d4 <BasicTimer3_Callback+0x364>)
 8001794:	781b      	ldrb	r3, [r3, #0]
 8001796:	2b00      	cmp	r3, #0
 8001798:	f000 818a 	beq.w	8001ab0 <BasicTimer3_Callback+0x440>
		{
			distance_c = (delta_distance_L+delta_distance_R)/2;  	   //[mm]
 800179c:	4b8e      	ldr	r3, [pc, #568]	; (80019d8 <BasicTimer3_Callback+0x368>)
 800179e:	ed93 7a00 	vldr	s14, [r3]
 80017a2:	4b8e      	ldr	r3, [pc, #568]	; (80019dc <BasicTimer3_Callback+0x36c>)
 80017a4:	edd3 7a00 	vldr	s15, [r3]
 80017a8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80017ac:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80017b0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80017b4:	4b8a      	ldr	r3, [pc, #552]	; (80019e0 <BasicTimer3_Callback+0x370>)
 80017b6:	edc3 7a00 	vstr	s15, [r3]
			velocity_c = (handler_Motor_R.parametersMotor.velocity + handler_Motor_L.parametersMotor.velocity)/2;        //[m/s]
 80017ba:	4b80      	ldr	r3, [pc, #512]	; (80019bc <BasicTimer3_Callback+0x34c>)
 80017bc:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 80017c0:	4b7c      	ldr	r3, [pc, #496]	; (80019b4 <BasicTimer3_Callback+0x344>)
 80017c2:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80017c6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80017ca:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80017ce:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80017d2:	4b84      	ldr	r3, [pc, #528]	; (80019e4 <BasicTimer3_Callback+0x374>)
 80017d4:	edc3 7a00 	vstr	s15, [r3]
			w_angular_c = ((handler_Motor_R.parametersMotor.velocity-handler_Motor_L.parametersMotor.velocity)*100000)/b; //[rad/s]
 80017d8:	4b78      	ldr	r3, [pc, #480]	; (80019bc <BasicTimer3_Callback+0x34c>)
 80017da:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 80017de:	4b75      	ldr	r3, [pc, #468]	; (80019b4 <BasicTimer3_Callback+0x344>)
 80017e0:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80017e4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80017e8:	ed9f 7a7f 	vldr	s14, [pc, #508]	; 80019e8 <BasicTimer3_Callback+0x378>
 80017ec:	ee27 7a87 	vmul.f32	s14, s15, s14
 80017f0:	eddf 6a7e 	vldr	s13, [pc, #504]	; 80019ec <BasicTimer3_Callback+0x37c>
 80017f4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80017f8:	4b7d      	ldr	r3, [pc, #500]	; (80019f0 <BasicTimer3_Callback+0x380>)
 80017fa:	edc3 7a00 	vstr	s15, [r3]
			parameter_Posicion_Robot.xr_position = parameter_Posicion_Robot.xr_position + (distance_c*(cos(parameter_Posicion_Robot.phi_relativo)));        //[mm]
 80017fe:	4b7d      	ldr	r3, [pc, #500]	; (80019f4 <BasicTimer3_Callback+0x384>)
 8001800:	685b      	ldr	r3, [r3, #4]
 8001802:	4618      	mov	r0, r3
 8001804:	f7fe feb8 	bl	8000578 <__aeabi_f2d>
 8001808:	4604      	mov	r4, r0
 800180a:	460d      	mov	r5, r1
 800180c:	4b74      	ldr	r3, [pc, #464]	; (80019e0 <BasicTimer3_Callback+0x370>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	4618      	mov	r0, r3
 8001812:	f7fe feb1 	bl	8000578 <__aeabi_f2d>
 8001816:	4680      	mov	r8, r0
 8001818:	4689      	mov	r9, r1
 800181a:	4b76      	ldr	r3, [pc, #472]	; (80019f4 <BasicTimer3_Callback+0x384>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	4618      	mov	r0, r3
 8001820:	f7fe feaa 	bl	8000578 <__aeabi_f2d>
 8001824:	4602      	mov	r2, r0
 8001826:	460b      	mov	r3, r1
 8001828:	ec43 2b10 	vmov	d0, r2, r3
 800182c:	f008 fea0 	bl	800a570 <cos>
 8001830:	ec53 2b10 	vmov	r2, r3, d0
 8001834:	4640      	mov	r0, r8
 8001836:	4649      	mov	r1, r9
 8001838:	f7fe fef6 	bl	8000628 <__aeabi_dmul>
 800183c:	4602      	mov	r2, r0
 800183e:	460b      	mov	r3, r1
 8001840:	4620      	mov	r0, r4
 8001842:	4629      	mov	r1, r5
 8001844:	f7fe fd3a 	bl	80002bc <__adddf3>
 8001848:	4602      	mov	r2, r0
 800184a:	460b      	mov	r3, r1
 800184c:	4610      	mov	r0, r2
 800184e:	4619      	mov	r1, r3
 8001850:	f7ff f9e2 	bl	8000c18 <__aeabi_d2f>
 8001854:	4603      	mov	r3, r0
 8001856:	4a67      	ldr	r2, [pc, #412]	; (80019f4 <BasicTimer3_Callback+0x384>)
 8001858:	6053      	str	r3, [r2, #4]
			parameter_Posicion_Robot.yr_position  = parameter_Posicion_Robot.yr_position  + (distance_c*(sin(parameter_Posicion_Robot.phi_relativo)));        //[mm]
 800185a:	4b66      	ldr	r3, [pc, #408]	; (80019f4 <BasicTimer3_Callback+0x384>)
 800185c:	689b      	ldr	r3, [r3, #8]
 800185e:	4618      	mov	r0, r3
 8001860:	f7fe fe8a 	bl	8000578 <__aeabi_f2d>
 8001864:	4604      	mov	r4, r0
 8001866:	460d      	mov	r5, r1
 8001868:	4b5d      	ldr	r3, [pc, #372]	; (80019e0 <BasicTimer3_Callback+0x370>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	4618      	mov	r0, r3
 800186e:	f7fe fe83 	bl	8000578 <__aeabi_f2d>
 8001872:	4680      	mov	r8, r0
 8001874:	4689      	mov	r9, r1
 8001876:	4b5f      	ldr	r3, [pc, #380]	; (80019f4 <BasicTimer3_Callback+0x384>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	4618      	mov	r0, r3
 800187c:	f7fe fe7c 	bl	8000578 <__aeabi_f2d>
 8001880:	4602      	mov	r2, r0
 8001882:	460b      	mov	r3, r1
 8001884:	ec43 2b10 	vmov	d0, r2, r3
 8001888:	f008 fec6 	bl	800a618 <sin>
 800188c:	ec53 2b10 	vmov	r2, r3, d0
 8001890:	4640      	mov	r0, r8
 8001892:	4649      	mov	r1, r9
 8001894:	f7fe fec8 	bl	8000628 <__aeabi_dmul>
 8001898:	4602      	mov	r2, r0
 800189a:	460b      	mov	r3, r1
 800189c:	4620      	mov	r0, r4
 800189e:	4629      	mov	r1, r5
 80018a0:	f7fe fd0c 	bl	80002bc <__adddf3>
 80018a4:	4602      	mov	r2, r0
 80018a6:	460b      	mov	r3, r1
 80018a8:	4610      	mov	r0, r2
 80018aa:	4619      	mov	r1, r3
 80018ac:	f7ff f9b4 	bl	8000c18 <__aeabi_d2f>
 80018b0:	4603      	mov	r3, r0
 80018b2:	4a50      	ldr	r2, [pc, #320]	; (80019f4 <BasicTimer3_Callback+0x384>)
 80018b4:	6093      	str	r3, [r2, #8]
			parameter_Posicion_Robot.phi_relativo = parameter_Posicion_Robot.phi_relativo + ((delta_distance_R-delta_distance_L)*100)/b;   //[rad]
 80018b6:	4b4f      	ldr	r3, [pc, #316]	; (80019f4 <BasicTimer3_Callback+0x384>)
 80018b8:	ed93 7a00 	vldr	s14, [r3]
 80018bc:	4b47      	ldr	r3, [pc, #284]	; (80019dc <BasicTimer3_Callback+0x36c>)
 80018be:	edd3 6a00 	vldr	s13, [r3]
 80018c2:	4b45      	ldr	r3, [pc, #276]	; (80019d8 <BasicTimer3_Callback+0x368>)
 80018c4:	edd3 7a00 	vldr	s15, [r3]
 80018c8:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80018cc:	eddf 6a4a 	vldr	s13, [pc, #296]	; 80019f8 <BasicTimer3_Callback+0x388>
 80018d0:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80018d4:	ed9f 6a45 	vldr	s12, [pc, #276]	; 80019ec <BasicTimer3_Callback+0x37c>
 80018d8:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80018dc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80018e0:	4b44      	ldr	r3, [pc, #272]	; (80019f4 <BasicTimer3_Callback+0x384>)
 80018e2:	edc3 7a00 	vstr	s15, [r3]
			parameter_Posicion_Robot.phi_relativo = atan2(sin(parameter_Posicion_Robot.phi_relativo),cos(parameter_Posicion_Robot.phi_relativo));
 80018e6:	4b43      	ldr	r3, [pc, #268]	; (80019f4 <BasicTimer3_Callback+0x384>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	4618      	mov	r0, r3
 80018ec:	f7fe fe44 	bl	8000578 <__aeabi_f2d>
 80018f0:	4602      	mov	r2, r0
 80018f2:	460b      	mov	r3, r1
 80018f4:	ec43 2b10 	vmov	d0, r2, r3
 80018f8:	f008 fe8e 	bl	800a618 <sin>
 80018fc:	eeb0 8a40 	vmov.f32	s16, s0
 8001900:	eef0 8a60 	vmov.f32	s17, s1
 8001904:	4b3b      	ldr	r3, [pc, #236]	; (80019f4 <BasicTimer3_Callback+0x384>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	4618      	mov	r0, r3
 800190a:	f7fe fe35 	bl	8000578 <__aeabi_f2d>
 800190e:	4602      	mov	r2, r0
 8001910:	460b      	mov	r3, r1
 8001912:	ec43 2b10 	vmov	d0, r2, r3
 8001916:	f008 fe2b 	bl	800a570 <cos>
 800191a:	eeb0 7a40 	vmov.f32	s14, s0
 800191e:	eef0 7a60 	vmov.f32	s15, s1
 8001922:	eeb0 1a47 	vmov.f32	s2, s14
 8001926:	eef0 1a67 	vmov.f32	s3, s15
 800192a:	eeb0 0a48 	vmov.f32	s0, s16
 800192e:	eef0 0a68 	vmov.f32	s1, s17
 8001932:	f008 fec9 	bl	800a6c8 <atan2>
 8001936:	ec53 2b10 	vmov	r2, r3, d0
 800193a:	4610      	mov	r0, r2
 800193c:	4619      	mov	r1, r3
 800193e:	f7ff f96b 	bl	8000c18 <__aeabi_d2f>
 8001942:	4603      	mov	r3, r0
 8001944:	4a2b      	ldr	r2, [pc, #172]	; (80019f4 <BasicTimer3_Callback+0x384>)
 8001946:	6013      	str	r3, [r2, #0]
			//Paso de c.relativa a c.globales
			parameter_Posicion_Robot.xg_position = parameter_Posicion_Robot.xg_position_inicial + parameter_Posicion_Robot.xr_position*cos_cal + parameter_Posicion_Robot.xr_position*sin_cal;
 8001948:	4b2a      	ldr	r3, [pc, #168]	; (80019f4 <BasicTimer3_Callback+0x384>)
 800194a:	ed93 7a03 	vldr	s14, [r3, #12]
 800194e:	4b29      	ldr	r3, [pc, #164]	; (80019f4 <BasicTimer3_Callback+0x384>)
 8001950:	edd3 6a01 	vldr	s13, [r3, #4]
 8001954:	4b29      	ldr	r3, [pc, #164]	; (80019fc <BasicTimer3_Callback+0x38c>)
 8001956:	edd3 7a00 	vldr	s15, [r3]
 800195a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800195e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001962:	4b24      	ldr	r3, [pc, #144]	; (80019f4 <BasicTimer3_Callback+0x384>)
 8001964:	edd3 6a01 	vldr	s13, [r3, #4]
 8001968:	4b25      	ldr	r3, [pc, #148]	; (8001a00 <BasicTimer3_Callback+0x390>)
 800196a:	edd3 7a00 	vldr	s15, [r3]
 800196e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001972:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001976:	4b1f      	ldr	r3, [pc, #124]	; (80019f4 <BasicTimer3_Callback+0x384>)
 8001978:	edc3 7a05 	vstr	s15, [r3, #20]
			parameter_Posicion_Robot.yg_position = parameter_Posicion_Robot.yg_position_inicial - parameter_Posicion_Robot.xr_position*sin_cal + parameter_Posicion_Robot.yr_position*cos_cal;
 800197c:	4b1d      	ldr	r3, [pc, #116]	; (80019f4 <BasicTimer3_Callback+0x384>)
 800197e:	ed93 7a04 	vldr	s14, [r3, #16]
 8001982:	4b1c      	ldr	r3, [pc, #112]	; (80019f4 <BasicTimer3_Callback+0x384>)
 8001984:	edd3 6a01 	vldr	s13, [r3, #4]
 8001988:	4b1d      	ldr	r3, [pc, #116]	; (8001a00 <BasicTimer3_Callback+0x390>)
 800198a:	edd3 7a00 	vldr	s15, [r3]
 800198e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001992:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001996:	4b17      	ldr	r3, [pc, #92]	; (80019f4 <BasicTimer3_Callback+0x384>)
 8001998:	edd3 6a02 	vldr	s13, [r3, #8]
 800199c:	4b17      	ldr	r3, [pc, #92]	; (80019fc <BasicTimer3_Callback+0x38c>)
 800199e:	edd3 7a00 	vldr	s15, [r3]
 80019a2:	e02f      	b.n	8001a04 <BasicTimer3_Callback+0x394>
 80019a4:	f3af 8000 	nop.w
 80019a8:	0a3d70a4 	.word	0x0a3d70a4
 80019ac:	404243d7 	.word	0x404243d7
 80019b0:	20000448 	.word	0x20000448
 80019b4:	20000364 	.word	0x20000364
 80019b8:	20000430 	.word	0x20000430
 80019bc:	200002e8 	.word	0x200002e8
 80019c0:	20000434 	.word	0x20000434
 80019c4:	20000008 	.word	0x20000008
 80019c8:	44138000 	.word	0x44138000
 80019cc:	20000450 	.word	0x20000450
 80019d0:	20000454 	.word	0x20000454
 80019d4:	20000424 	.word	0x20000424
 80019d8:	20000428 	.word	0x20000428
 80019dc:	2000042c 	.word	0x2000042c
 80019e0:	20000438 	.word	0x20000438
 80019e4:	2000043c 	.word	0x2000043c
 80019e8:	47c35000 	.word	0x47c35000
 80019ec:	4622f800 	.word	0x4622f800
 80019f0:	20000440 	.word	0x20000440
 80019f4:	200003f8 	.word	0x200003f8
 80019f8:	42c80000 	.word	0x42c80000
 80019fc:	20000418 	.word	0x20000418
 8001a00:	2000041c 	.word	0x2000041c
 8001a04:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a08:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a0c:	4b7a      	ldr	r3, [pc, #488]	; (8001bf8 <BasicTimer3_Callback+0x588>)
 8001a0e:	edc3 7a06 	vstr	s15, [r3, #24]
			//Convertimos el valor y imprimemos
			sprintf(bufferMsg,"%#.4f\t%#.4f\n", parameter_Posicion_Robot.xg_position , parameter_Posicion_Robot.yg_position);
 8001a12:	4b79      	ldr	r3, [pc, #484]	; (8001bf8 <BasicTimer3_Callback+0x588>)
 8001a14:	695b      	ldr	r3, [r3, #20]
 8001a16:	4618      	mov	r0, r3
 8001a18:	f7fe fdae 	bl	8000578 <__aeabi_f2d>
 8001a1c:	4604      	mov	r4, r0
 8001a1e:	460d      	mov	r5, r1
 8001a20:	4b75      	ldr	r3, [pc, #468]	; (8001bf8 <BasicTimer3_Callback+0x588>)
 8001a22:	699b      	ldr	r3, [r3, #24]
 8001a24:	4618      	mov	r0, r3
 8001a26:	f7fe fda7 	bl	8000578 <__aeabi_f2d>
 8001a2a:	4602      	mov	r2, r0
 8001a2c:	460b      	mov	r3, r1
 8001a2e:	e9cd 2300 	strd	r2, r3, [sp]
 8001a32:	4622      	mov	r2, r4
 8001a34:	462b      	mov	r3, r5
 8001a36:	4971      	ldr	r1, [pc, #452]	; (8001bfc <BasicTimer3_Callback+0x58c>)
 8001a38:	4871      	ldr	r0, [pc, #452]	; (8001c00 <BasicTimer3_Callback+0x590>)
 8001a3a:	f004 fb6d 	bl	8006118 <siprintf>
			writeMsgForTXE(&handler_USART_USB, bufferMsg);
 8001a3e:	4970      	ldr	r1, [pc, #448]	; (8001c00 <BasicTimer3_Callback+0x590>)
 8001a40:	4870      	ldr	r0, [pc, #448]	; (8001c04 <BasicTimer3_Callback+0x594>)
 8001a42:	f003 faaf 	bl	8004fa4 <writeMsgForTXE>
			//Restablecemos valores
			flag_count_odometry = 0;
 8001a46:	4b70      	ldr	r3, [pc, #448]	; (8001c08 <BasicTimer3_Callback+0x598>)
 8001a48:	2200      	movs	r2, #0
 8001a4a:	701a      	strb	r2, [r3, #0]
			delta_distance_L = 0;
 8001a4c:	4b6f      	ldr	r3, [pc, #444]	; (8001c0c <BasicTimer3_Callback+0x59c>)
 8001a4e:	f04f 0200 	mov.w	r2, #0
 8001a52:	601a      	str	r2, [r3, #0]
			delta_distance_R = 0;
 8001a54:	4b6e      	ldr	r3, [pc, #440]	; (8001c10 <BasicTimer3_Callback+0x5a0>)
 8001a56:	f04f 0200 	mov.w	r2, #0
 8001a5a:	601a      	str	r2, [r3, #0]
			//calculo a la distancia de la recta
			distance_punto_recta = (parameter_Posicion_Robot.xr_position - parameter_Posicion_Robot.yr_position)/R2;
 8001a5c:	4b66      	ldr	r3, [pc, #408]	; (8001bf8 <BasicTimer3_Callback+0x588>)
 8001a5e:	ed93 7a01 	vldr	s14, [r3, #4]
 8001a62:	4b65      	ldr	r3, [pc, #404]	; (8001bf8 <BasicTimer3_Callback+0x588>)
 8001a64:	edd3 7a02 	vldr	s15, [r3, #8]
 8001a68:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a6c:	ee17 0a90 	vmov	r0, s15
 8001a70:	f7fe fd82 	bl	8000578 <__aeabi_f2d>
 8001a74:	a35e      	add	r3, pc, #376	; (adr r3, 8001bf0 <BasicTimer3_Callback+0x580>)
 8001a76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a7a:	f7fe feff 	bl	800087c <__aeabi_ddiv>
 8001a7e:	4602      	mov	r2, r0
 8001a80:	460b      	mov	r3, r1
 8001a82:	4610      	mov	r0, r2
 8001a84:	4619      	mov	r1, r3
 8001a86:	f7ff f8c7 	bl	8000c18 <__aeabi_d2f>
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	4a61      	ldr	r2, [pc, #388]	; (8001c14 <BasicTimer3_Callback+0x5a4>)
 8001a8e:	6013      	str	r3, [r2, #0]
			//correction_velocity_c = (distance_punto_recta/1000);
			//correction_dutty_c = 10*(correction_velocity_c);
			//apliacamos el PID
			//PID(&parameter_PID_distance, distance_punto_recta, 0);
			//Correction velocidad angular
			correction_dutty_c = distance_punto_recta *m+bl;
 8001a90:	4b60      	ldr	r3, [pc, #384]	; (8001c14 <BasicTimer3_Callback+0x5a4>)
 8001a92:	ed93 7a00 	vldr	s14, [r3]
 8001a96:	4b60      	ldr	r3, [pc, #384]	; (8001c18 <BasicTimer3_Callback+0x5a8>)
 8001a98:	edd3 7a00 	vldr	s15, [r3]
 8001a9c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001aa0:	4b5e      	ldr	r3, [pc, #376]	; (8001c1c <BasicTimer3_Callback+0x5ac>)
 8001aa2:	edd3 7a00 	vldr	s15, [r3]
 8001aa6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001aaa:	4b5d      	ldr	r3, [pc, #372]	; (8001c20 <BasicTimer3_Callback+0x5b0>)
 8001aac:	edc3 7a00 	vstr	s15, [r3]
			//correction_velocity_c = parameter_PID_distance.u*(((w_angular_c)*b)/20000);
		}
		//Reiniciamos el numero de conteos
		handler_Motor_R.parametersMotor.count = 0;
 8001ab0:	4b5c      	ldr	r3, [pc, #368]	; (8001c24 <BasicTimer3_Callback+0x5b4>)
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	841a      	strh	r2, [r3, #32]
		handler_Motor_L.parametersMotor.count = 0;
 8001ab6:	4b5c      	ldr	r3, [pc, #368]	; (8001c28 <BasicTimer3_Callback+0x5b8>)
 8001ab8:	2200      	movs	r2, #0
 8001aba:	841a      	strh	r2, [r3, #32]
		//Aplicamos el PID
		PID(&handler_Motor_L.parametersMotor.parametersPID,setpoint_dutty,porVel_L);
 8001abc:	4b5b      	ldr	r3, [pc, #364]	; (8001c2c <BasicTimer3_Callback+0x5bc>)
 8001abe:	edd3 7a00 	vldr	s15, [r3]
 8001ac2:	4b5b      	ldr	r3, [pc, #364]	; (8001c30 <BasicTimer3_Callback+0x5c0>)
 8001ac4:	ed93 7a00 	vldr	s14, [r3]
 8001ac8:	eef0 0a47 	vmov.f32	s1, s14
 8001acc:	eeb0 0a67 	vmov.f32	s0, s15
 8001ad0:	4855      	ldr	r0, [pc, #340]	; (8001c28 <BasicTimer3_Callback+0x5b8>)
 8001ad2:	f000 fc99 	bl	8002408 <PID>
		PID(&handler_Motor_R.parametersMotor.parametersPID,setpoint_dutty,porVel_R);
 8001ad6:	4b55      	ldr	r3, [pc, #340]	; (8001c2c <BasicTimer3_Callback+0x5bc>)
 8001ad8:	edd3 7a00 	vldr	s15, [r3]
 8001adc:	4b55      	ldr	r3, [pc, #340]	; (8001c34 <BasicTimer3_Callback+0x5c4>)
 8001ade:	ed93 7a00 	vldr	s14, [r3]
 8001ae2:	eef0 0a47 	vmov.f32	s1, s14
 8001ae6:	eeb0 0a67 	vmov.f32	s0, s15
 8001aea:	484e      	ldr	r0, [pc, #312]	; (8001c24 <BasicTimer3_Callback+0x5b4>)
 8001aec:	f000 fc8c 	bl	8002408 <PID>
		//Correccion del dutty
		correction(&handler_Motor_L);
 8001af0:	484d      	ldr	r0, [pc, #308]	; (8001c28 <BasicTimer3_Callback+0x5b8>)
 8001af2:	f000 fcdd 	bl	80024b0 <correction>
		correction(&handler_Motor_R);
 8001af6:	484b      	ldr	r0, [pc, #300]	; (8001c24 <BasicTimer3_Callback+0x5b4>)
 8001af8:	f000 fcda 	bl	80024b0 <correction>
		//Reiniciamos el numero de conteos
		handler_Motor_R.parametersMotor.count = 0;
		handler_Motor_L.parametersMotor.count = 0;
	}

}
 8001afc:	e070      	b.n	8001be0 <BasicTimer3_Callback+0x570>
	else if(flag_motor==3)
 8001afe:	4b4e      	ldr	r3, [pc, #312]	; (8001c38 <BasicTimer3_Callback+0x5c8>)
 8001b00:	781b      	ldrb	r3, [r3, #0]
 8001b02:	2b03      	cmp	r3, #3
 8001b04:	d120      	bne.n	8001b48 <BasicTimer3_Callback+0x4d8>
		count_time = count_time + periodo_TIMER_Count;       //Tiempo en ms
 8001b06:	4b4d      	ldr	r3, [pc, #308]	; (8001c3c <BasicTimer3_Callback+0x5cc>)
 8001b08:	881a      	ldrh	r2, [r3, #0]
 8001b0a:	4b4d      	ldr	r3, [pc, #308]	; (8001c40 <BasicTimer3_Callback+0x5d0>)
 8001b0c:	881b      	ldrh	r3, [r3, #0]
 8001b0e:	4413      	add	r3, r2
 8001b10:	b29a      	uxth	r2, r3
 8001b12:	4b4a      	ldr	r3, [pc, #296]	; (8001c3c <BasicTimer3_Callback+0x5cc>)
 8001b14:	801a      	strh	r2, [r3, #0]
		sprintf(bufferMsg,"%u\t%u\t%u\n", count_time,(handler_Motor_R.parametersMotor.count), (handler_Motor_L.parametersMotor.count));
 8001b16:	4b49      	ldr	r3, [pc, #292]	; (8001c3c <BasicTimer3_Callback+0x5cc>)
 8001b18:	881b      	ldrh	r3, [r3, #0]
 8001b1a:	461a      	mov	r2, r3
 8001b1c:	4b41      	ldr	r3, [pc, #260]	; (8001c24 <BasicTimer3_Callback+0x5b4>)
 8001b1e:	8c1b      	ldrh	r3, [r3, #32]
 8001b20:	4619      	mov	r1, r3
 8001b22:	4b41      	ldr	r3, [pc, #260]	; (8001c28 <BasicTimer3_Callback+0x5b8>)
 8001b24:	8c1b      	ldrh	r3, [r3, #32]
 8001b26:	9300      	str	r3, [sp, #0]
 8001b28:	460b      	mov	r3, r1
 8001b2a:	4946      	ldr	r1, [pc, #280]	; (8001c44 <BasicTimer3_Callback+0x5d4>)
 8001b2c:	4834      	ldr	r0, [pc, #208]	; (8001c00 <BasicTimer3_Callback+0x590>)
 8001b2e:	f004 faf3 	bl	8006118 <siprintf>
		writeMsgForTXE(&handler_USART_USB, bufferMsg);
 8001b32:	4933      	ldr	r1, [pc, #204]	; (8001c00 <BasicTimer3_Callback+0x590>)
 8001b34:	4833      	ldr	r0, [pc, #204]	; (8001c04 <BasicTimer3_Callback+0x594>)
 8001b36:	f003 fa35 	bl	8004fa4 <writeMsgForTXE>
		handler_Motor_R.parametersMotor.count = 0;
 8001b3a:	4b3a      	ldr	r3, [pc, #232]	; (8001c24 <BasicTimer3_Callback+0x5b4>)
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	841a      	strh	r2, [r3, #32]
		handler_Motor_L.parametersMotor.count = 0;
 8001b40:	4b39      	ldr	r3, [pc, #228]	; (8001c28 <BasicTimer3_Callback+0x5b8>)
 8001b42:	2200      	movs	r2, #0
 8001b44:	841a      	strh	r2, [r3, #32]
}
 8001b46:	e04b      	b.n	8001be0 <BasicTimer3_Callback+0x570>
	else if(flag_motor==4)
 8001b48:	4b3b      	ldr	r3, [pc, #236]	; (8001c38 <BasicTimer3_Callback+0x5c8>)
 8001b4a:	781b      	ldrb	r3, [r3, #0]
 8001b4c:	2b04      	cmp	r3, #4
 8001b4e:	d147      	bne.n	8001be0 <BasicTimer3_Callback+0x570>
		handler_Motor_L.parametersMotor.velocity = handler_Motor_L.parametersMotor.distance/periodo_TIMER_Count;   //[m/s]
 8001b50:	4b35      	ldr	r3, [pc, #212]	; (8001c28 <BasicTimer3_Callback+0x5b8>)
 8001b52:	edd3 6a0c 	vldr	s13, [r3, #48]	; 0x30
 8001b56:	4b3a      	ldr	r3, [pc, #232]	; (8001c40 <BasicTimer3_Callback+0x5d0>)
 8001b58:	881b      	ldrh	r3, [r3, #0]
 8001b5a:	ee07 3a90 	vmov	s15, r3
 8001b5e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001b62:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001b66:	4b30      	ldr	r3, [pc, #192]	; (8001c28 <BasicTimer3_Callback+0x5b8>)
 8001b68:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
		handler_Motor_R.parametersMotor.velocity = handler_Motor_R.parametersMotor.distance/periodo_TIMER_Count;   //[m/s]
 8001b6c:	4b2d      	ldr	r3, [pc, #180]	; (8001c24 <BasicTimer3_Callback+0x5b4>)
 8001b6e:	edd3 6a0c 	vldr	s13, [r3, #48]	; 0x30
 8001b72:	4b33      	ldr	r3, [pc, #204]	; (8001c40 <BasicTimer3_Callback+0x5d0>)
 8001b74:	881b      	ldrh	r3, [r3, #0]
 8001b76:	ee07 3a90 	vmov	s15, r3
 8001b7a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001b7e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001b82:	4b28      	ldr	r3, [pc, #160]	; (8001c24 <BasicTimer3_Callback+0x5b4>)
 8001b84:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
		count_time = count_time + periodo_TIMER_Count;       //Tiempo en ms
 8001b88:	4b2c      	ldr	r3, [pc, #176]	; (8001c3c <BasicTimer3_Callback+0x5cc>)
 8001b8a:	881a      	ldrh	r2, [r3, #0]
 8001b8c:	4b2c      	ldr	r3, [pc, #176]	; (8001c40 <BasicTimer3_Callback+0x5d0>)
 8001b8e:	881b      	ldrh	r3, [r3, #0]
 8001b90:	4413      	add	r3, r2
 8001b92:	b29a      	uxth	r2, r3
 8001b94:	4b29      	ldr	r3, [pc, #164]	; (8001c3c <BasicTimer3_Callback+0x5cc>)
 8001b96:	801a      	strh	r2, [r3, #0]
		sprintf(bufferMsg,"%u\t%#.4f\t%#.4f\n", count_time, handler_Motor_L.parametersMotor.velocity , handler_Motor_R.parametersMotor.velocity);
 8001b98:	4b28      	ldr	r3, [pc, #160]	; (8001c3c <BasicTimer3_Callback+0x5cc>)
 8001b9a:	881b      	ldrh	r3, [r3, #0]
 8001b9c:	461e      	mov	r6, r3
 8001b9e:	4b22      	ldr	r3, [pc, #136]	; (8001c28 <BasicTimer3_Callback+0x5b8>)
 8001ba0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	f7fe fce8 	bl	8000578 <__aeabi_f2d>
 8001ba8:	4604      	mov	r4, r0
 8001baa:	460d      	mov	r5, r1
 8001bac:	4b1d      	ldr	r3, [pc, #116]	; (8001c24 <BasicTimer3_Callback+0x5b4>)
 8001bae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	f7fe fce1 	bl	8000578 <__aeabi_f2d>
 8001bb6:	4602      	mov	r2, r0
 8001bb8:	460b      	mov	r3, r1
 8001bba:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001bbe:	e9cd 4500 	strd	r4, r5, [sp]
 8001bc2:	4632      	mov	r2, r6
 8001bc4:	4920      	ldr	r1, [pc, #128]	; (8001c48 <BasicTimer3_Callback+0x5d8>)
 8001bc6:	480e      	ldr	r0, [pc, #56]	; (8001c00 <BasicTimer3_Callback+0x590>)
 8001bc8:	f004 faa6 	bl	8006118 <siprintf>
		writeMsgForTXE(&handler_USART_USB, bufferMsg);
 8001bcc:	490c      	ldr	r1, [pc, #48]	; (8001c00 <BasicTimer3_Callback+0x590>)
 8001bce:	480d      	ldr	r0, [pc, #52]	; (8001c04 <BasicTimer3_Callback+0x594>)
 8001bd0:	f003 f9e8 	bl	8004fa4 <writeMsgForTXE>
		handler_Motor_R.parametersMotor.count = 0;
 8001bd4:	4b13      	ldr	r3, [pc, #76]	; (8001c24 <BasicTimer3_Callback+0x5b4>)
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	841a      	strh	r2, [r3, #32]
		handler_Motor_L.parametersMotor.count = 0;
 8001bda:	4b13      	ldr	r3, [pc, #76]	; (8001c28 <BasicTimer3_Callback+0x5b8>)
 8001bdc:	2200      	movs	r2, #0
 8001bde:	841a      	strh	r2, [r3, #32]
}
 8001be0:	bf00      	nop
 8001be2:	3704      	adds	r7, #4
 8001be4:	46bd      	mov	sp, r7
 8001be6:	ecbd 8b02 	vpop	{d8}
 8001bea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001bee:	bf00      	nop
 8001bf0:	667f055a 	.word	0x667f055a
 8001bf4:	3ff6a09e 	.word	0x3ff6a09e
 8001bf8:	200003f8 	.word	0x200003f8
 8001bfc:	0800bbb0 	.word	0x0800bbb0
 8001c00:	20000278 	.word	0x20000278
 8001c04:	2000026c 	.word	0x2000026c
 8001c08:	20000424 	.word	0x20000424
 8001c0c:	20000428 	.word	0x20000428
 8001c10:	2000042c 	.word	0x2000042c
 8001c14:	20000460 	.word	0x20000460
 8001c18:	2000000c 	.word	0x2000000c
 8001c1c:	2000045c 	.word	0x2000045c
 8001c20:	20000464 	.word	0x20000464
 8001c24:	200002e8 	.word	0x200002e8
 8001c28:	20000364 	.word	0x20000364
 8001c2c:	200003f4 	.word	0x200003f4
 8001c30:	20000450 	.word	0x20000450
 8001c34:	20000454 	.word	0x20000454
 8001c38:	20000448 	.word	0x20000448
 8001c3c:	2000044a 	.word	0x2000044a
 8001c40:	20000008 	.word	0x20000008
 8001c44:	0800bbc0 	.word	0x0800bbc0
 8001c48:	0800bbcc 	.word	0x0800bbcc

08001c4c <BasicUSART2_Callback>:

//-------------------------USARTRX--------------------------------
//Definimos la funcion que se desea ejecutar cuando se genera la interrupcion por el USART2
void BasicUSART2_Callback(void)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	af00      	add	r7, sp, #0
	//Guardamos el caracter recibido
	charRead = getRxData();
 8001c50:	f003 f9e6 	bl	8005020 <getRxData>
 8001c54:	4603      	mov	r3, r0
 8001c56:	461a      	mov	r2, r3
 8001c58:	4b02      	ldr	r3, [pc, #8]	; (8001c64 <BasicUSART2_Callback+0x18>)
 8001c5a:	701a      	strb	r2, [r3, #0]
	//Funcion que almacena los caracteres del comando recibido
	recepcionCommand();
 8001c5c:	f000 f8a8 	bl	8001db0 <recepcionCommand>
}
 8001c60:	bf00      	nop
 8001c62:	bd80      	pop	{r7, pc}
 8001c64:	20000000 	.word	0x20000000

08001c68 <callback_extInt1>:


//-------------------------Fotocompuerta--------------------------------
//Definimos la funcion que se desea ejecutar cuando se genera la interrupcion por el EXTI13 y EXTI13
void callback_extInt1(void)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	af00      	add	r7, sp, #0
	handler_Motor_R.parametersMotor.count++;
 8001c6c:	4b20      	ldr	r3, [pc, #128]	; (8001cf0 <callback_extInt1+0x88>)
 8001c6e:	8c1b      	ldrh	r3, [r3, #32]
 8001c70:	3301      	adds	r3, #1
 8001c72:	b29a      	uxth	r2, r3
 8001c74:	4b1e      	ldr	r3, [pc, #120]	; (8001cf0 <callback_extInt1+0x88>)
 8001c76:	841a      	strh	r2, [r3, #32]
	handler_Motor_R.parametersMotor.countCotinuous++;
 8001c78:	4b1d      	ldr	r3, [pc, #116]	; (8001cf0 <callback_extInt1+0x88>)
 8001c7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c7c:	3301      	adds	r3, #1
 8001c7e:	4a1c      	ldr	r2, [pc, #112]	; (8001cf0 <callback_extInt1+0x88>)
 8001c80:	6253      	str	r3, [r2, #36]	; 0x24
	//calculo del tiempo entre interrupcion
//	uint64_t timeNow = getTicksUs();
//	handler_Motor_R.parametersMotor.timeCount = timeNow-timeBackR;
//	timeBackR = timeNow;
	//Verificamos que la bandera este arriba
	if(flag_motor==2 && flag_turn==1 && (limit_count_turn)<(handler_Motor_R.parametersMotor.count))
 8001c82:	4b1c      	ldr	r3, [pc, #112]	; (8001cf4 <callback_extInt1+0x8c>)
 8001c84:	781b      	ldrb	r3, [r3, #0]
 8001c86:	2b02      	cmp	r3, #2
 8001c88:	d112      	bne.n	8001cb0 <callback_extInt1+0x48>
 8001c8a:	4b1b      	ldr	r3, [pc, #108]	; (8001cf8 <callback_extInt1+0x90>)
 8001c8c:	781b      	ldrb	r3, [r3, #0]
 8001c8e:	2b01      	cmp	r3, #1
 8001c90:	d10e      	bne.n	8001cb0 <callback_extInt1+0x48>
 8001c92:	4b17      	ldr	r3, [pc, #92]	; (8001cf0 <callback_extInt1+0x88>)
 8001c94:	8c1a      	ldrh	r2, [r3, #32]
 8001c96:	4b19      	ldr	r3, [pc, #100]	; (8001cfc <callback_extInt1+0x94>)
 8001c98:	881b      	ldrh	r3, [r3, #0]
 8001c9a:	429a      	cmp	r2, r3
 8001c9c:	d908      	bls.n	8001cb0 <callback_extInt1+0x48>
	{
		//Desactivamos los motores
		status_motor(RESET);
 8001c9e:	2000      	movs	r0, #0
 8001ca0:	f000 fc6c 	bl	800257c <status_motor>
		//Actualizamos la direccion del motor
		updateDirMotor(handler_Motor_Execute);
 8001ca4:	4b16      	ldr	r3, [pc, #88]	; (8001d00 <callback_extInt1+0x98>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	4618      	mov	r0, r3
 8001caa:	f7ff fa0c 	bl	80010c6 <updateDirMotor>
	{
		//Desactivamos los motores
		status_motor(RESET);
	}

}
 8001cae:	e01d      	b.n	8001cec <callback_extInt1+0x84>
	else if(flag_motor==1 && distance<(cm_R*handler_Motor_R.parametersMotor.countCotinuous))
 8001cb0:	4b10      	ldr	r3, [pc, #64]	; (8001cf4 <callback_extInt1+0x8c>)
 8001cb2:	781b      	ldrb	r3, [r3, #0]
 8001cb4:	2b01      	cmp	r3, #1
 8001cb6:	d119      	bne.n	8001cec <callback_extInt1+0x84>
 8001cb8:	4b12      	ldr	r3, [pc, #72]	; (8001d04 <callback_extInt1+0x9c>)
 8001cba:	881b      	ldrh	r3, [r3, #0]
 8001cbc:	ee07 3a90 	vmov	s15, r3
 8001cc0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001cc4:	4b0a      	ldr	r3, [pc, #40]	; (8001cf0 <callback_extInt1+0x88>)
 8001cc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cc8:	ee07 3a90 	vmov	s15, r3
 8001ccc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001cd0:	4b0d      	ldr	r3, [pc, #52]	; (8001d08 <callback_extInt1+0xa0>)
 8001cd2:	edd3 7a00 	vldr	s15, [r3]
 8001cd6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001cda:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001cde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ce2:	d400      	bmi.n	8001ce6 <callback_extInt1+0x7e>
}
 8001ce4:	e002      	b.n	8001cec <callback_extInt1+0x84>
		status_motor(RESET);
 8001ce6:	2000      	movs	r0, #0
 8001ce8:	f000 fc48 	bl	800257c <status_motor>
}
 8001cec:	bf00      	nop
 8001cee:	bd80      	pop	{r7, pc}
 8001cf0:	200002e8 	.word	0x200002e8
 8001cf4:	20000448 	.word	0x20000448
 8001cf8:	20000449 	.word	0x20000449
 8001cfc:	2000044c 	.word	0x2000044c
 8001d00:	20000444 	.word	0x20000444
 8001d04:	2000044e 	.word	0x2000044e
 8001d08:	20000434 	.word	0x20000434

08001d0c <callback_extInt3>:
void callback_extInt3(void)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	af00      	add	r7, sp, #0
	handler_Motor_L.parametersMotor.count++;
 8001d10:	4b20      	ldr	r3, [pc, #128]	; (8001d94 <callback_extInt3+0x88>)
 8001d12:	8c1b      	ldrh	r3, [r3, #32]
 8001d14:	3301      	adds	r3, #1
 8001d16:	b29a      	uxth	r2, r3
 8001d18:	4b1e      	ldr	r3, [pc, #120]	; (8001d94 <callback_extInt3+0x88>)
 8001d1a:	841a      	strh	r2, [r3, #32]
	handler_Motor_L.parametersMotor.countCotinuous++;
 8001d1c:	4b1d      	ldr	r3, [pc, #116]	; (8001d94 <callback_extInt3+0x88>)
 8001d1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d20:	3301      	adds	r3, #1
 8001d22:	4a1c      	ldr	r2, [pc, #112]	; (8001d94 <callback_extInt3+0x88>)
 8001d24:	6253      	str	r3, [r2, #36]	; 0x24
	//calculo del tiempo entre interrupcion
//	uint64_t timeNow = getTicksUs();
//	handler_Motor_L.parametersMotor.timeCount = timeNow-timeBackL;
//	timeBackL = timeNow;
	//Verificamos que la bandera este arriba
	if(flag_motor==2 && flag_turn==2 && (limit_count_turn)<(handler_Motor_L.parametersMotor.count))
 8001d26:	4b1c      	ldr	r3, [pc, #112]	; (8001d98 <callback_extInt3+0x8c>)
 8001d28:	781b      	ldrb	r3, [r3, #0]
 8001d2a:	2b02      	cmp	r3, #2
 8001d2c:	d112      	bne.n	8001d54 <callback_extInt3+0x48>
 8001d2e:	4b1b      	ldr	r3, [pc, #108]	; (8001d9c <callback_extInt3+0x90>)
 8001d30:	781b      	ldrb	r3, [r3, #0]
 8001d32:	2b02      	cmp	r3, #2
 8001d34:	d10e      	bne.n	8001d54 <callback_extInt3+0x48>
 8001d36:	4b17      	ldr	r3, [pc, #92]	; (8001d94 <callback_extInt3+0x88>)
 8001d38:	8c1a      	ldrh	r2, [r3, #32]
 8001d3a:	4b19      	ldr	r3, [pc, #100]	; (8001da0 <callback_extInt3+0x94>)
 8001d3c:	881b      	ldrh	r3, [r3, #0]
 8001d3e:	429a      	cmp	r2, r3
 8001d40:	d908      	bls.n	8001d54 <callback_extInt3+0x48>
	{
		//Desactivamos los motores
		status_motor(RESET);
 8001d42:	2000      	movs	r0, #0
 8001d44:	f000 fc1a 	bl	800257c <status_motor>
		//Actualizamos la direccion del motor
		updateDirMotor(handler_Motor_Execute);
 8001d48:	4b16      	ldr	r3, [pc, #88]	; (8001da4 <callback_extInt3+0x98>)
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	f7ff f9ba 	bl	80010c6 <updateDirMotor>
	else if(flag_motor==1 && distance<(cm_L*handler_Motor_L.parametersMotor.countCotinuous))
	{
		//Desactivamos los motores
		status_motor(RESET);
	}
}
 8001d52:	e01d      	b.n	8001d90 <callback_extInt3+0x84>
	else if(flag_motor==1 && distance<(cm_L*handler_Motor_L.parametersMotor.countCotinuous))
 8001d54:	4b10      	ldr	r3, [pc, #64]	; (8001d98 <callback_extInt3+0x8c>)
 8001d56:	781b      	ldrb	r3, [r3, #0]
 8001d58:	2b01      	cmp	r3, #1
 8001d5a:	d119      	bne.n	8001d90 <callback_extInt3+0x84>
 8001d5c:	4b12      	ldr	r3, [pc, #72]	; (8001da8 <callback_extInt3+0x9c>)
 8001d5e:	881b      	ldrh	r3, [r3, #0]
 8001d60:	ee07 3a90 	vmov	s15, r3
 8001d64:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001d68:	4b0a      	ldr	r3, [pc, #40]	; (8001d94 <callback_extInt3+0x88>)
 8001d6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d6c:	ee07 3a90 	vmov	s15, r3
 8001d70:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001d74:	4b0d      	ldr	r3, [pc, #52]	; (8001dac <callback_extInt3+0xa0>)
 8001d76:	edd3 7a00 	vldr	s15, [r3]
 8001d7a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d7e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001d82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d86:	d400      	bmi.n	8001d8a <callback_extInt3+0x7e>
}
 8001d88:	e002      	b.n	8001d90 <callback_extInt3+0x84>
		status_motor(RESET);
 8001d8a:	2000      	movs	r0, #0
 8001d8c:	f000 fbf6 	bl	800257c <status_motor>
}
 8001d90:	bf00      	nop
 8001d92:	bd80      	pop	{r7, pc}
 8001d94:	20000364 	.word	0x20000364
 8001d98:	20000448 	.word	0x20000448
 8001d9c:	20000449 	.word	0x20000449
 8001da0:	2000044c 	.word	0x2000044c
 8001da4:	20000444 	.word	0x20000444
 8001da8:	2000044e 	.word	0x2000044e
 8001dac:	20000430 	.word	0x20000430

08001db0 <recepcionCommand>:

//----------------------------Inicio de la definicion de las funciones de los comandos----------------------------------------

//Funcion que recibe los caracteres del comando recibido
void recepcionCommand(void)
{
 8001db0:	b480      	push	{r7}
 8001db2:	af00      	add	r7, sp, #0
	if(charRead == '@')
 8001db4:	4b11      	ldr	r3, [pc, #68]	; (8001dfc <recepcionCommand+0x4c>)
 8001db6:	781b      	ldrb	r3, [r3, #0]
 8001db8:	2b40      	cmp	r3, #64	; 0x40
 8001dba:	d10c      	bne.n	8001dd6 <recepcionCommand+0x26>
	{
		//Almacenamos el elemento nulo
		bufferRecepcion[counterRecepcion] = '\0';
 8001dbc:	4b10      	ldr	r3, [pc, #64]	; (8001e00 <recepcionCommand+0x50>)
 8001dbe:	781b      	ldrb	r3, [r3, #0]
 8001dc0:	461a      	mov	r2, r3
 8001dc2:	4b10      	ldr	r3, [pc, #64]	; (8001e04 <recepcionCommand+0x54>)
 8001dc4:	2100      	movs	r1, #0
 8001dc6:	5499      	strb	r1, [r3, r2]
		//Establecemos la bandera como alta
		commandComplete = 1;
 8001dc8:	4b0f      	ldr	r3, [pc, #60]	; (8001e08 <recepcionCommand+0x58>)
 8001dca:	2201      	movs	r2, #1
 8001dcc:	701a      	strb	r2, [r3, #0]
		//Reiniciamos la variable
		counterRecepcion = 0;
 8001dce:	4b0c      	ldr	r3, [pc, #48]	; (8001e00 <recepcionCommand+0x50>)
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	701a      	strb	r2, [r3, #0]
		//Aumentamos en uno la posicion del arreglo
		counterRecepcion++;
		//Reiniciamos la variable
	}

}
 8001dd4:	e00c      	b.n	8001df0 <recepcionCommand+0x40>
		bufferRecepcion[counterRecepcion] = charRead;
 8001dd6:	4b0a      	ldr	r3, [pc, #40]	; (8001e00 <recepcionCommand+0x50>)
 8001dd8:	781b      	ldrb	r3, [r3, #0]
 8001dda:	461a      	mov	r2, r3
 8001ddc:	4b07      	ldr	r3, [pc, #28]	; (8001dfc <recepcionCommand+0x4c>)
 8001dde:	7819      	ldrb	r1, [r3, #0]
 8001de0:	4b08      	ldr	r3, [pc, #32]	; (8001e04 <recepcionCommand+0x54>)
 8001de2:	5499      	strb	r1, [r3, r2]
		counterRecepcion++;
 8001de4:	4b06      	ldr	r3, [pc, #24]	; (8001e00 <recepcionCommand+0x50>)
 8001de6:	781b      	ldrb	r3, [r3, #0]
 8001de8:	3301      	adds	r3, #1
 8001dea:	b2da      	uxtb	r2, r3
 8001dec:	4b04      	ldr	r3, [pc, #16]	; (8001e00 <recepcionCommand+0x50>)
 8001dee:	701a      	strb	r2, [r3, #0]
}
 8001df0:	bf00      	nop
 8001df2:	46bd      	mov	sp, r7
 8001df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df8:	4770      	bx	lr
 8001dfa:	bf00      	nop
 8001dfc:	20000000 	.word	0x20000000
 8001e00:	20000468 	.word	0x20000468
 8001e04:	2000046c 	.word	0x2000046c
 8001e08:	20000010 	.word	0x20000010
 8001e0c:	00000000 	.word	0x00000000

08001e10 <runCommand>:

//Funcion que ejecuta el comando ingresando
void runCommand(char *prtcommand)
{
 8001e10:	b590      	push	{r4, r7, lr}
 8001e12:	b09d      	sub	sp, #116	; 0x74
 8001e14:	af04      	add	r7, sp, #16
 8001e16:	6078      	str	r0, [r7, #4]
	//Variables para almacenar los elmentos que entrega el comando luego de ser divididos por la funcion sscanf
	char cmd[64]= {0};
 8001e18:	2300      	movs	r3, #0
 8001e1a:	61fb      	str	r3, [r7, #28]
 8001e1c:	f107 0320 	add.w	r3, r7, #32
 8001e20:	223c      	movs	r2, #60	; 0x3c
 8001e22:	2100      	movs	r1, #0
 8001e24:	4618      	mov	r0, r3
 8001e26:	f003 faef 	bl	8005408 <memset>
	int firtsParameter = 0;
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	61bb      	str	r3, [r7, #24]
	int secondParameter = 0;
 8001e2e:	2300      	movs	r3, #0
 8001e30:	617b      	str	r3, [r7, #20]
	int thirdParameter = 0;
 8001e32:	2300      	movs	r3, #0
 8001e34:	613b      	str	r3, [r7, #16]
	int forthParameter = 0;
 8001e36:	2300      	movs	r3, #0
 8001e38:	60fb      	str	r3, [r7, #12]
	//char bufferMsg[64]= {0};

	//Funcion que lee la cadena de caracteres y la divide en los elementos definidos
	sscanf(prtcommand, "%s %u %u %u %u", cmd, &firtsParameter, &secondParameter, &thirdParameter, &forthParameter);
 8001e3a:	f107 0118 	add.w	r1, r7, #24
 8001e3e:	f107 021c 	add.w	r2, r7, #28
 8001e42:	f107 030c 	add.w	r3, r7, #12
 8001e46:	9302      	str	r3, [sp, #8]
 8001e48:	f107 0310 	add.w	r3, r7, #16
 8001e4c:	9301      	str	r3, [sp, #4]
 8001e4e:	f107 0314 	add.w	r3, r7, #20
 8001e52:	9300      	str	r3, [sp, #0]
 8001e54:	460b      	mov	r3, r1
 8001e56:	49ac      	ldr	r1, [pc, #688]	; (8002108 <runCommand+0x2f8>)
 8001e58:	6878      	ldr	r0, [r7, #4]
 8001e5a:	f004 f97d 	bl	8006158 <siscanf>

	//Imprime lista que muestra los comandos que tiene el dispositivo
	if(strcmp(cmd, "help")==0)
 8001e5e:	f107 031c 	add.w	r3, r7, #28
 8001e62:	49aa      	ldr	r1, [pc, #680]	; (800210c <runCommand+0x2fc>)
 8001e64:	4618      	mov	r0, r3
 8001e66:	f7fe f9bb 	bl	80001e0 <strcmp>
 8001e6a:	4603      	mov	r3, r0
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d128      	bne.n	8001ec2 <runCommand+0xb2>
	{
		writeMsgForTXE(&handler_USART_USB, "Help Menu: \n");
 8001e70:	49a7      	ldr	r1, [pc, #668]	; (8002110 <runCommand+0x300>)
 8001e72:	48a8      	ldr	r0, [pc, #672]	; (8002114 <runCommand+0x304>)
 8001e74:	f003 f896 	bl	8004fa4 <writeMsgForTXE>
		writeMsgForTXE(&handler_USART_USB, "1) help  ---Imprime lista de comandos. \n");
 8001e78:	49a7      	ldr	r1, [pc, #668]	; (8002118 <runCommand+0x308>)
 8001e7a:	48a6      	ldr	r0, [pc, #664]	; (8002114 <runCommand+0x304>)
 8001e7c:	f003 f892 	bl	8004fa4 <writeMsgForTXE>
		writeMsgForTXE(&handler_USART_USB, "2) frequency # --- Cambiar el valor de la frecuenencia de las pruebas, [HZ] \n");
 8001e80:	49a6      	ldr	r1, [pc, #664]	; (800211c <runCommand+0x30c>)
 8001e82:	48a4      	ldr	r0, [pc, #656]	; (8002114 <runCommand+0x304>)
 8001e84:	f003 f88e 	bl	8004fa4 <writeMsgForTXE>
		writeMsgForTXE(&handler_USART_USB, "3) line # # #---Inicia Linea recta, #: dist [mm], #: dutty inicial , #: dutty estable \n");
 8001e88:	49a5      	ldr	r1, [pc, #660]	; (8002120 <runCommand+0x310>)
 8001e8a:	48a2      	ldr	r0, [pc, #648]	; (8002114 <runCommand+0x304>)
 8001e8c:	f003 f88a 	bl	8004fa4 <writeMsgForTXE>
		writeMsgForTXE(&handler_USART_USB, "4) turn # # # # ---Iniciamos el giro del robot #: ang #:dir #:dutty_R \n");
 8001e90:	49a4      	ldr	r1, [pc, #656]	; (8002124 <runCommand+0x314>)
 8001e92:	48a0      	ldr	r0, [pc, #640]	; (8002114 <runCommand+0x304>)
 8001e94:	f003 f886 	bl	8004fa4 <writeMsgForTXE>
		writeMsgForTXE(&handler_USART_USB, "5) start # # # # ---Inicia movimiento, #: perTC [ms], #: dutty_L, #dutty_R, #: freqTP [Hz] \n");
 8001e98:	49a3      	ldr	r1, [pc, #652]	; (8002128 <runCommand+0x318>)
 8001e9a:	489e      	ldr	r0, [pc, #632]	; (8002114 <runCommand+0x304>)
 8001e9c:	f003 f882 	bl	8004fa4 <writeMsgForTXE>
		writeMsgForTXE(&handler_USART_USB, "6) reaction # # # ---Inicia Curva de reaccion,#: perTC [ms], #: dutty_L y dutty_R, #: freqTP [Hz] \n");
 8001ea0:	49a2      	ldr	r1, [pc, #648]	; (800212c <runCommand+0x31c>)
 8001ea2:	489c      	ldr	r0, [pc, #624]	; (8002114 <runCommand+0x304>)
 8001ea4:	f003 f87e 	bl	8004fa4 <writeMsgForTXE>
		writeMsgForTXE(&handler_USART_USB, "7) stop ---Para el estudio en medio de la ejecucion \n");
 8001ea8:	49a1      	ldr	r1, [pc, #644]	; (8002130 <runCommand+0x320>)
 8001eaa:	489a      	ldr	r0, [pc, #616]	; (8002114 <runCommand+0x304>)
 8001eac:	f003 f87a 	bl	8004fa4 <writeMsgForTXE>
		writeMsgForTXE(&handler_USART_USB, "0) const # # # ---Constantes del PID #: L,k,tau \n");
 8001eb0:	49a0      	ldr	r1, [pc, #640]	; (8002134 <runCommand+0x324>)
 8001eb2:	4898      	ldr	r0, [pc, #608]	; (8002114 <runCommand+0x304>)
 8001eb4:	f003 f876 	bl	8004fa4 <writeMsgForTXE>
		writeMsgForTXE(&handler_USART_USB, "0) equation # #  ---Constantes de la ecuacion lineal #: m,b  591.91-->59191 \n");
 8001eb8:	499f      	ldr	r1, [pc, #636]	; (8002138 <runCommand+0x328>)
 8001eba:	4896      	ldr	r0, [pc, #600]	; (8002114 <runCommand+0x304>)
 8001ebc:	f003 f872 	bl	8004fa4 <writeMsgForTXE>
		//Se imprime que el comando no fue valido
		writeMsgForTXE(&handler_USART_USB, "Comando no correcto \n");
	}


}
 8001ec0:	e26d      	b.n	800239e <runCommand+0x58e>
	else if (strcmp(cmd, "frequency") == 0)
 8001ec2:	f107 031c 	add.w	r3, r7, #28
 8001ec6:	499d      	ldr	r1, [pc, #628]	; (800213c <runCommand+0x32c>)
 8001ec8:	4618      	mov	r0, r3
 8001eca:	f7fe f989 	bl	80001e0 <strcmp>
 8001ece:	4603      	mov	r3, r0
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d107      	bne.n	8001ee4 <runCommand+0xd4>
		frequency_PWM_Motor = 100000/firtsParameter;
 8001ed4:	69bb      	ldr	r3, [r7, #24]
 8001ed6:	4a9a      	ldr	r2, [pc, #616]	; (8002140 <runCommand+0x330>)
 8001ed8:	fb92 f3f3 	sdiv	r3, r2, r3
 8001edc:	b29a      	uxth	r2, r3
 8001ede:	4b99      	ldr	r3, [pc, #612]	; (8002144 <runCommand+0x334>)
 8001ee0:	801a      	strh	r2, [r3, #0]
}
 8001ee2:	e25c      	b.n	800239e <runCommand+0x58e>
	else if (strcmp(cmd, "line") == 0)
 8001ee4:	f107 031c 	add.w	r3, r7, #28
 8001ee8:	4997      	ldr	r1, [pc, #604]	; (8002148 <runCommand+0x338>)
 8001eea:	4618      	mov	r0, r3
 8001eec:	f7fe f978 	bl	80001e0 <strcmp>
 8001ef0:	4603      	mov	r3, r0
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	f040 80be 	bne.w	8002074 <runCommand+0x264>
		parameter_Posicion_Robot.xg_position_inicial = parameter_Posicion_Robot.xg_position;
 8001ef8:	4b94      	ldr	r3, [pc, #592]	; (800214c <runCommand+0x33c>)
 8001efa:	695b      	ldr	r3, [r3, #20]
 8001efc:	4a93      	ldr	r2, [pc, #588]	; (800214c <runCommand+0x33c>)
 8001efe:	60d3      	str	r3, [r2, #12]
		parameter_Posicion_Robot.yg_position_inicial = parameter_Posicion_Robot.yg_position;
 8001f00:	4b92      	ldr	r3, [pc, #584]	; (800214c <runCommand+0x33c>)
 8001f02:	699b      	ldr	r3, [r3, #24]
 8001f04:	4a91      	ldr	r2, [pc, #580]	; (800214c <runCommand+0x33c>)
 8001f06:	6113      	str	r3, [r2, #16]
		parameter_Posicion_Robot.ang_Giro += turn;
 8001f08:	4b90      	ldr	r3, [pc, #576]	; (800214c <runCommand+0x33c>)
 8001f0a:	ed93 7a07 	vldr	s14, [r3, #28]
 8001f0e:	4b90      	ldr	r3, [pc, #576]	; (8002150 <runCommand+0x340>)
 8001f10:	edd3 7a00 	vldr	s15, [r3]
 8001f14:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f18:	4b8c      	ldr	r3, [pc, #560]	; (800214c <runCommand+0x33c>)
 8001f1a:	edc3 7a07 	vstr	s15, [r3, #28]
		parameter_Posicion_Robot.xr_position = 0;
 8001f1e:	4b8b      	ldr	r3, [pc, #556]	; (800214c <runCommand+0x33c>)
 8001f20:	f04f 0200 	mov.w	r2, #0
 8001f24:	605a      	str	r2, [r3, #4]
		parameter_Posicion_Robot.yr_position = 0;
 8001f26:	4b89      	ldr	r3, [pc, #548]	; (800214c <runCommand+0x33c>)
 8001f28:	f04f 0200 	mov.w	r2, #0
 8001f2c:	609a      	str	r2, [r3, #8]
		parameter_Posicion_Robot.phi_relativo = (PI/4);
 8001f2e:	4b87      	ldr	r3, [pc, #540]	; (800214c <runCommand+0x33c>)
 8001f30:	4a88      	ldr	r2, [pc, #544]	; (8002154 <runCommand+0x344>)
 8001f32:	601a      	str	r2, [r3, #0]
		cos_cal = cos((PI/4)+parameter_Posicion_Robot.ang_Giro);
 8001f34:	4b85      	ldr	r3, [pc, #532]	; (800214c <runCommand+0x33c>)
 8001f36:	69db      	ldr	r3, [r3, #28]
 8001f38:	4618      	mov	r0, r3
 8001f3a:	f7fe fb1d 	bl	8000578 <__aeabi_f2d>
 8001f3e:	a36e      	add	r3, pc, #440	; (adr r3, 80020f8 <runCommand+0x2e8>)
 8001f40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f44:	f7fe f9ba 	bl	80002bc <__adddf3>
 8001f48:	4602      	mov	r2, r0
 8001f4a:	460b      	mov	r3, r1
 8001f4c:	ec43 2b17 	vmov	d7, r2, r3
 8001f50:	eeb0 0a47 	vmov.f32	s0, s14
 8001f54:	eef0 0a67 	vmov.f32	s1, s15
 8001f58:	f008 fb0a 	bl	800a570 <cos>
 8001f5c:	ec53 2b10 	vmov	r2, r3, d0
 8001f60:	4610      	mov	r0, r2
 8001f62:	4619      	mov	r1, r3
 8001f64:	f7fe fe58 	bl	8000c18 <__aeabi_d2f>
 8001f68:	4603      	mov	r3, r0
 8001f6a:	4a7b      	ldr	r2, [pc, #492]	; (8002158 <runCommand+0x348>)
 8001f6c:	6013      	str	r3, [r2, #0]
		sin_cal = sin((PI/4)+parameter_Posicion_Robot.ang_Giro);
 8001f6e:	4b77      	ldr	r3, [pc, #476]	; (800214c <runCommand+0x33c>)
 8001f70:	69db      	ldr	r3, [r3, #28]
 8001f72:	4618      	mov	r0, r3
 8001f74:	f7fe fb00 	bl	8000578 <__aeabi_f2d>
 8001f78:	a35f      	add	r3, pc, #380	; (adr r3, 80020f8 <runCommand+0x2e8>)
 8001f7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f7e:	f7fe f99d 	bl	80002bc <__adddf3>
 8001f82:	4602      	mov	r2, r0
 8001f84:	460b      	mov	r3, r1
 8001f86:	ec43 2b17 	vmov	d7, r2, r3
 8001f8a:	eeb0 0a47 	vmov.f32	s0, s14
 8001f8e:	eef0 0a67 	vmov.f32	s1, s15
 8001f92:	f008 fb41 	bl	800a618 <sin>
 8001f96:	ec53 2b10 	vmov	r2, r3, d0
 8001f9a:	4610      	mov	r0, r2
 8001f9c:	4619      	mov	r1, r3
 8001f9e:	f7fe fe3b 	bl	8000c18 <__aeabi_d2f>
 8001fa2:	4603      	mov	r3, r0
 8001fa4:	4a6d      	ldr	r2, [pc, #436]	; (800215c <runCommand+0x34c>)
 8001fa6:	6013      	str	r3, [r2, #0]
		periodo_TIMER_Count = Ts;
 8001fa8:	4b6d      	ldr	r3, [pc, #436]	; (8002160 <runCommand+0x350>)
 8001faa:	edd3 7a00 	vldr	s15, [r3]
 8001fae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001fb2:	ee17 3a90 	vmov	r3, s15
 8001fb6:	b29a      	uxth	r2, r3
 8001fb8:	4b6a      	ldr	r3, [pc, #424]	; (8002164 <runCommand+0x354>)
 8001fba:	801a      	strh	r2, [r3, #0]
		distance = firtsParameter;
 8001fbc:	69bb      	ldr	r3, [r7, #24]
 8001fbe:	b29a      	uxth	r2, r3
 8001fc0:	4b69      	ldr	r3, [pc, #420]	; (8002168 <runCommand+0x358>)
 8001fc2:	801a      	strh	r2, [r3, #0]
		duttyInicial = secondParameter;
 8001fc4:	697b      	ldr	r3, [r7, #20]
 8001fc6:	ee07 3a90 	vmov	s15, r3
 8001fca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001fce:	4b67      	ldr	r3, [pc, #412]	; (800216c <runCommand+0x35c>)
 8001fd0:	edc3 7a00 	vstr	s15, [r3]
		setpoint_dutty = thirdParameter;
 8001fd4:	693b      	ldr	r3, [r7, #16]
 8001fd6:	ee07 3a90 	vmov	s15, r3
 8001fda:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001fde:	4b64      	ldr	r3, [pc, #400]	; (8002170 <runCommand+0x360>)
 8001fe0:	edc3 7a00 	vstr	s15, [r3]
		setpoint_phi = 0;
 8001fe4:	4b63      	ldr	r3, [pc, #396]	; (8002174 <runCommand+0x364>)
 8001fe6:	f04f 0200 	mov.w	r2, #0
 8001fea:	601a      	str	r2, [r3, #0]
		handler_Motor_L.parametersMotor.parametersPID.e = handler_Motor_L.parametersMotor.parametersPID.e_1 = handler_Motor_L.parametersMotor.parametersPID.e_2 = 0;
 8001fec:	4b62      	ldr	r3, [pc, #392]	; (8002178 <runCommand+0x368>)
 8001fee:	f04f 0200 	mov.w	r2, #0
 8001ff2:	611a      	str	r2, [r3, #16]
 8001ff4:	4b60      	ldr	r3, [pc, #384]	; (8002178 <runCommand+0x368>)
 8001ff6:	691b      	ldr	r3, [r3, #16]
 8001ff8:	4a5f      	ldr	r2, [pc, #380]	; (8002178 <runCommand+0x368>)
 8001ffa:	60d3      	str	r3, [r2, #12]
 8001ffc:	4b5e      	ldr	r3, [pc, #376]	; (8002178 <runCommand+0x368>)
 8001ffe:	68db      	ldr	r3, [r3, #12]
 8002000:	4a5d      	ldr	r2, [pc, #372]	; (8002178 <runCommand+0x368>)
 8002002:	6093      	str	r3, [r2, #8]
		handler_Motor_R.parametersMotor.parametersPID.e = handler_Motor_R.parametersMotor.parametersPID.e_1 = handler_Motor_R.parametersMotor.parametersPID.e_2 = 0;
 8002004:	4b5d      	ldr	r3, [pc, #372]	; (800217c <runCommand+0x36c>)
 8002006:	f04f 0200 	mov.w	r2, #0
 800200a:	611a      	str	r2, [r3, #16]
 800200c:	4b5b      	ldr	r3, [pc, #364]	; (800217c <runCommand+0x36c>)
 800200e:	691b      	ldr	r3, [r3, #16]
 8002010:	4a5a      	ldr	r2, [pc, #360]	; (800217c <runCommand+0x36c>)
 8002012:	60d3      	str	r3, [r2, #12]
 8002014:	4b59      	ldr	r3, [pc, #356]	; (800217c <runCommand+0x36c>)
 8002016:	68db      	ldr	r3, [r3, #12]
 8002018:	4a58      	ldr	r2, [pc, #352]	; (800217c <runCommand+0x36c>)
 800201a:	6093      	str	r3, [r2, #8]
		config_motor(1, periodo_TIMER_Count,  0.9234*(duttyInicial)-3, duttyInicial, frequency_PWM_Motor);//Tipo de Estudio, periodo [ms], por dutty L, por dutty R, fre pwm [hz]
 800201c:	4b51      	ldr	r3, [pc, #324]	; (8002164 <runCommand+0x354>)
 800201e:	881b      	ldrh	r3, [r3, #0]
 8002020:	461c      	mov	r4, r3
 8002022:	4b52      	ldr	r3, [pc, #328]	; (800216c <runCommand+0x35c>)
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	4618      	mov	r0, r3
 8002028:	f7fe faa6 	bl	8000578 <__aeabi_f2d>
 800202c:	a334      	add	r3, pc, #208	; (adr r3, 8002100 <runCommand+0x2f0>)
 800202e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002032:	f7fe faf9 	bl	8000628 <__aeabi_dmul>
 8002036:	4602      	mov	r2, r0
 8002038:	460b      	mov	r3, r1
 800203a:	4610      	mov	r0, r2
 800203c:	4619      	mov	r1, r3
 800203e:	f04f 0200 	mov.w	r2, #0
 8002042:	4b4f      	ldr	r3, [pc, #316]	; (8002180 <runCommand+0x370>)
 8002044:	f7fe f938 	bl	80002b8 <__aeabi_dsub>
 8002048:	4602      	mov	r2, r0
 800204a:	460b      	mov	r3, r1
 800204c:	4610      	mov	r0, r2
 800204e:	4619      	mov	r1, r3
 8002050:	f7fe fde2 	bl	8000c18 <__aeabi_d2f>
 8002054:	4601      	mov	r1, r0
 8002056:	4b45      	ldr	r3, [pc, #276]	; (800216c <runCommand+0x35c>)
 8002058:	edd3 7a00 	vldr	s15, [r3]
 800205c:	4b39      	ldr	r3, [pc, #228]	; (8002144 <runCommand+0x334>)
 800205e:	881b      	ldrh	r3, [r3, #0]
 8002060:	461a      	mov	r2, r3
 8002062:	eef0 0a67 	vmov.f32	s1, s15
 8002066:	ee00 1a10 	vmov	s0, r1
 800206a:	4621      	mov	r1, r4
 800206c:	2001      	movs	r0, #1
 800206e:	f000 fb01 	bl	8002674 <config_motor>
}
 8002072:	e194      	b.n	800239e <runCommand+0x58e>
	else if (strcmp(cmd, "const") == 0)
 8002074:	f107 031c 	add.w	r3, r7, #28
 8002078:	4942      	ldr	r1, [pc, #264]	; (8002184 <runCommand+0x374>)
 800207a:	4618      	mov	r0, r3
 800207c:	f7fe f8b0 	bl	80001e0 <strcmp>
 8002080:	4603      	mov	r3, r0
 8002082:	2b00      	cmp	r3, #0
 8002084:	f040 8080 	bne.w	8002188 <runCommand+0x378>
			float theta=firtsParameter+Ts/2;
 8002088:	69bb      	ldr	r3, [r7, #24]
 800208a:	ee07 3a90 	vmov	s15, r3
 800208e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002092:	4b33      	ldr	r3, [pc, #204]	; (8002160 <runCommand+0x350>)
 8002094:	edd3 6a00 	vldr	s13, [r3]
 8002098:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 800209c:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80020a0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80020a4:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
			constains_calculator(&handler_Motor_L.parametersMotor.parametersPID, secondParameter, thirdParameter, theta);   //k,tau,theta
 80020a8:	697b      	ldr	r3, [r7, #20]
 80020aa:	ee07 3a90 	vmov	s15, r3
 80020ae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80020b2:	693b      	ldr	r3, [r7, #16]
 80020b4:	ee07 3a10 	vmov	s14, r3
 80020b8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80020bc:	ed97 1a17 	vldr	s2, [r7, #92]	; 0x5c
 80020c0:	eef0 0a47 	vmov.f32	s1, s14
 80020c4:	eeb0 0a67 	vmov.f32	s0, s15
 80020c8:	482b      	ldr	r0, [pc, #172]	; (8002178 <runCommand+0x368>)
 80020ca:	f000 fb25 	bl	8002718 <constains_calculator>
			constains_calculator(&handler_Motor_R.parametersMotor.parametersPID, secondParameter, thirdParameter, theta);   //k,tau,theta
 80020ce:	697b      	ldr	r3, [r7, #20]
 80020d0:	ee07 3a90 	vmov	s15, r3
 80020d4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80020d8:	693b      	ldr	r3, [r7, #16]
 80020da:	ee07 3a10 	vmov	s14, r3
 80020de:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80020e2:	ed97 1a17 	vldr	s2, [r7, #92]	; 0x5c
 80020e6:	eef0 0a47 	vmov.f32	s1, s14
 80020ea:	eeb0 0a67 	vmov.f32	s0, s15
 80020ee:	4823      	ldr	r0, [pc, #140]	; (800217c <runCommand+0x36c>)
 80020f0:	f000 fb12 	bl	8002718 <constains_calculator>
}
 80020f4:	e153      	b.n	800239e <runCommand+0x58e>
 80020f6:	bf00      	nop
 80020f8:	54442d18 	.word	0x54442d18
 80020fc:	3fe921fb 	.word	0x3fe921fb
 8002100:	28240b78 	.word	0x28240b78
 8002104:	3fed8c7e 	.word	0x3fed8c7e
 8002108:	0800bbdc 	.word	0x0800bbdc
 800210c:	0800bbec 	.word	0x0800bbec
 8002110:	0800bbf4 	.word	0x0800bbf4
 8002114:	2000026c 	.word	0x2000026c
 8002118:	0800bc04 	.word	0x0800bc04
 800211c:	0800bc30 	.word	0x0800bc30
 8002120:	0800bc80 	.word	0x0800bc80
 8002124:	0800bcd8 	.word	0x0800bcd8
 8002128:	0800bd20 	.word	0x0800bd20
 800212c:	0800bd80 	.word	0x0800bd80
 8002130:	0800bde4 	.word	0x0800bde4
 8002134:	0800be1c 	.word	0x0800be1c
 8002138:	0800be50 	.word	0x0800be50
 800213c:	0800bea0 	.word	0x0800bea0
 8002140:	000186a0 	.word	0x000186a0
 8002144:	2000000a 	.word	0x2000000a
 8002148:	0800beac 	.word	0x0800beac
 800214c:	200003f8 	.word	0x200003f8
 8002150:	20000420 	.word	0x20000420
 8002154:	3f490fdb 	.word	0x3f490fdb
 8002158:	20000418 	.word	0x20000418
 800215c:	2000041c 	.word	0x2000041c
 8002160:	20000004 	.word	0x20000004
 8002164:	20000008 	.word	0x20000008
 8002168:	2000044e 	.word	0x2000044e
 800216c:	20000458 	.word	0x20000458
 8002170:	200003f4 	.word	0x200003f4
 8002174:	200003f0 	.word	0x200003f0
 8002178:	20000364 	.word	0x20000364
 800217c:	200002e8 	.word	0x200002e8
 8002180:	40080000 	.word	0x40080000
 8002184:	0800beb4 	.word	0x0800beb4
	else if (strcmp(cmd, "equation") == 0)
 8002188:	f107 031c 	add.w	r3, r7, #28
 800218c:	4988      	ldr	r1, [pc, #544]	; (80023b0 <runCommand+0x5a0>)
 800218e:	4618      	mov	r0, r3
 8002190:	f7fe f826 	bl	80001e0 <strcmp>
 8002194:	4603      	mov	r3, r0
 8002196:	2b00      	cmp	r3, #0
 8002198:	d118      	bne.n	80021cc <runCommand+0x3bc>
			m = ((float) firtsParameter)/100;
 800219a:	69bb      	ldr	r3, [r7, #24]
 800219c:	ee07 3a90 	vmov	s15, r3
 80021a0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80021a4:	eddf 6a83 	vldr	s13, [pc, #524]	; 80023b4 <runCommand+0x5a4>
 80021a8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80021ac:	4b82      	ldr	r3, [pc, #520]	; (80023b8 <runCommand+0x5a8>)
 80021ae:	edc3 7a00 	vstr	s15, [r3]
			bl = ((float) secondParameter)/100;
 80021b2:	697b      	ldr	r3, [r7, #20]
 80021b4:	ee07 3a90 	vmov	s15, r3
 80021b8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80021bc:	eddf 6a7d 	vldr	s13, [pc, #500]	; 80023b4 <runCommand+0x5a4>
 80021c0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80021c4:	4b7d      	ldr	r3, [pc, #500]	; (80023bc <runCommand+0x5ac>)
 80021c6:	edc3 7a00 	vstr	s15, [r3]
}
 80021ca:	e0e8      	b.n	800239e <runCommand+0x58e>
	else if (strcmp(cmd, "turn") == 0)
 80021cc:	f107 031c 	add.w	r3, r7, #28
 80021d0:	497b      	ldr	r1, [pc, #492]	; (80023c0 <runCommand+0x5b0>)
 80021d2:	4618      	mov	r0, r3
 80021d4:	f7fe f804 	bl	80001e0 <strcmp>
 80021d8:	4603      	mov	r3, r0
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d162      	bne.n	80022a4 <runCommand+0x494>
		flag_turn = secondParameter;
 80021de:	697b      	ldr	r3, [r7, #20]
 80021e0:	b2da      	uxtb	r2, r3
 80021e2:	4b78      	ldr	r3, [pc, #480]	; (80023c4 <runCommand+0x5b4>)
 80021e4:	701a      	strb	r2, [r3, #0]
		if(flag_turn==1)
 80021e6:	4b77      	ldr	r3, [pc, #476]	; (80023c4 <runCommand+0x5b4>)
 80021e8:	781b      	ldrb	r3, [r3, #0]
 80021ea:	2b01      	cmp	r3, #1
 80021ec:	d114      	bne.n	8002218 <runCommand+0x408>
			limit_count_turn = (b/DR)*((Ce*firtsParameter)/(2*180));
 80021ee:	69bb      	ldr	r3, [r7, #24]
 80021f0:	4a75      	ldr	r2, [pc, #468]	; (80023c8 <runCommand+0x5b8>)
 80021f2:	fb82 1203 	smull	r1, r2, r2, r3
 80021f6:	1052      	asrs	r2, r2, #1
 80021f8:	17db      	asrs	r3, r3, #31
 80021fa:	1ad3      	subs	r3, r2, r3
 80021fc:	b29b      	uxth	r3, r3
 80021fe:	005b      	lsls	r3, r3, #1
 8002200:	b29a      	uxth	r2, r3
 8002202:	4b72      	ldr	r3, [pc, #456]	; (80023cc <runCommand+0x5bc>)
 8002204:	801a      	strh	r2, [r3, #0]
			handler_Motor_Execute = &handler_Motor_R;
 8002206:	4b72      	ldr	r3, [pc, #456]	; (80023d0 <runCommand+0x5c0>)
 8002208:	4a72      	ldr	r2, [pc, #456]	; (80023d4 <runCommand+0x5c4>)
 800220a:	601a      	str	r2, [r3, #0]
			updateDirMotor(handler_Motor_Execute);
 800220c:	4b70      	ldr	r3, [pc, #448]	; (80023d0 <runCommand+0x5c0>)
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	4618      	mov	r0, r3
 8002212:	f7fe ff58 	bl	80010c6 <updateDirMotor>
 8002216:	e013      	b.n	8002240 <runCommand+0x430>
			limit_count_turn = (b/DL)*((Ce*firtsParameter)/(2*180));
 8002218:	69bb      	ldr	r3, [r7, #24]
 800221a:	4a6b      	ldr	r2, [pc, #428]	; (80023c8 <runCommand+0x5b8>)
 800221c:	fb82 1203 	smull	r1, r2, r2, r3
 8002220:	1052      	asrs	r2, r2, #1
 8002222:	17db      	asrs	r3, r3, #31
 8002224:	1ad3      	subs	r3, r2, r3
 8002226:	b29b      	uxth	r3, r3
 8002228:	005b      	lsls	r3, r3, #1
 800222a:	b29a      	uxth	r2, r3
 800222c:	4b67      	ldr	r3, [pc, #412]	; (80023cc <runCommand+0x5bc>)
 800222e:	801a      	strh	r2, [r3, #0]
			handler_Motor_Execute = &handler_Motor_L;
 8002230:	4b67      	ldr	r3, [pc, #412]	; (80023d0 <runCommand+0x5c0>)
 8002232:	4a69      	ldr	r2, [pc, #420]	; (80023d8 <runCommand+0x5c8>)
 8002234:	601a      	str	r2, [r3, #0]
			updateDirMotor(handler_Motor_Execute);
 8002236:	4b66      	ldr	r3, [pc, #408]	; (80023d0 <runCommand+0x5c0>)
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	4618      	mov	r0, r3
 800223c:	f7fe ff43 	bl	80010c6 <updateDirMotor>
		config_motor(2, periodo_TIMER_Count, 0.9234*((float) thirdParameter)-3, thirdParameter, frequency_PWM_Motor);//Tipo de Estudio, periodo [ms], por dutty L, por dutty R, fre pwm [hz]
 8002240:	4b66      	ldr	r3, [pc, #408]	; (80023dc <runCommand+0x5cc>)
 8002242:	881b      	ldrh	r3, [r3, #0]
 8002244:	461c      	mov	r4, r3
 8002246:	693b      	ldr	r3, [r7, #16]
 8002248:	ee07 3a90 	vmov	s15, r3
 800224c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002250:	ee17 0a90 	vmov	r0, s15
 8002254:	f7fe f990 	bl	8000578 <__aeabi_f2d>
 8002258:	a353      	add	r3, pc, #332	; (adr r3, 80023a8 <runCommand+0x598>)
 800225a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800225e:	f7fe f9e3 	bl	8000628 <__aeabi_dmul>
 8002262:	4602      	mov	r2, r0
 8002264:	460b      	mov	r3, r1
 8002266:	4610      	mov	r0, r2
 8002268:	4619      	mov	r1, r3
 800226a:	f04f 0200 	mov.w	r2, #0
 800226e:	4b5c      	ldr	r3, [pc, #368]	; (80023e0 <runCommand+0x5d0>)
 8002270:	f7fe f822 	bl	80002b8 <__aeabi_dsub>
 8002274:	4602      	mov	r2, r0
 8002276:	460b      	mov	r3, r1
 8002278:	4610      	mov	r0, r2
 800227a:	4619      	mov	r1, r3
 800227c:	f7fe fccc 	bl	8000c18 <__aeabi_d2f>
 8002280:	4601      	mov	r1, r0
 8002282:	693b      	ldr	r3, [r7, #16]
 8002284:	ee07 3a90 	vmov	s15, r3
 8002288:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800228c:	4b55      	ldr	r3, [pc, #340]	; (80023e4 <runCommand+0x5d4>)
 800228e:	881b      	ldrh	r3, [r3, #0]
 8002290:	461a      	mov	r2, r3
 8002292:	eef0 0a67 	vmov.f32	s1, s15
 8002296:	ee00 1a10 	vmov	s0, r1
 800229a:	4621      	mov	r1, r4
 800229c:	2002      	movs	r0, #2
 800229e:	f000 f9e9 	bl	8002674 <config_motor>
}
 80022a2:	e07c      	b.n	800239e <runCommand+0x58e>
	else if (strcmp(cmd, "start") == 0)
 80022a4:	f107 031c 	add.w	r3, r7, #28
 80022a8:	494f      	ldr	r1, [pc, #316]	; (80023e8 <runCommand+0x5d8>)
 80022aa:	4618      	mov	r0, r3
 80022ac:	f7fd ff98 	bl	80001e0 <strcmp>
 80022b0:	4603      	mov	r3, r0
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d12a      	bne.n	800230c <runCommand+0x4fc>
		periodo_TIMER_Count = firtsParameter;
 80022b6:	69bb      	ldr	r3, [r7, #24]
 80022b8:	b29a      	uxth	r2, r3
 80022ba:	4b48      	ldr	r3, [pc, #288]	; (80023dc <runCommand+0x5cc>)
 80022bc:	801a      	strh	r2, [r3, #0]
		config_motor(3, periodo_TIMER_Count,  (secondParameter/100), (thirdParameter/100), forthParameter);//Tipo de Estudio, periodo [ms], por dutty L, por dutty R, fre pwm [hz]
 80022be:	4b47      	ldr	r3, [pc, #284]	; (80023dc <runCommand+0x5cc>)
 80022c0:	881b      	ldrh	r3, [r3, #0]
 80022c2:	4619      	mov	r1, r3
 80022c4:	697b      	ldr	r3, [r7, #20]
 80022c6:	4a49      	ldr	r2, [pc, #292]	; (80023ec <runCommand+0x5dc>)
 80022c8:	fb82 0203 	smull	r0, r2, r2, r3
 80022cc:	1152      	asrs	r2, r2, #5
 80022ce:	17db      	asrs	r3, r3, #31
 80022d0:	1ad3      	subs	r3, r2, r3
 80022d2:	ee07 3a90 	vmov	s15, r3
 80022d6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80022da:	693b      	ldr	r3, [r7, #16]
 80022dc:	4a43      	ldr	r2, [pc, #268]	; (80023ec <runCommand+0x5dc>)
 80022de:	fb82 0203 	smull	r0, r2, r2, r3
 80022e2:	1152      	asrs	r2, r2, #5
 80022e4:	17db      	asrs	r3, r3, #31
 80022e6:	1ad3      	subs	r3, r2, r3
 80022e8:	ee07 3a10 	vmov	s14, r3
 80022ec:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	461a      	mov	r2, r3
 80022f4:	eef0 0a47 	vmov.f32	s1, s14
 80022f8:	eeb0 0a67 	vmov.f32	s0, s15
 80022fc:	2003      	movs	r0, #3
 80022fe:	f000 f9b9 	bl	8002674 <config_motor>
		writeMsgForTXE(&handler_USART_USB, "Inicio conteo... \n");
 8002302:	493b      	ldr	r1, [pc, #236]	; (80023f0 <runCommand+0x5e0>)
 8002304:	483b      	ldr	r0, [pc, #236]	; (80023f4 <runCommand+0x5e4>)
 8002306:	f002 fe4d 	bl	8004fa4 <writeMsgForTXE>
}
 800230a:	e048      	b.n	800239e <runCommand+0x58e>
	else if (strcmp(cmd, "reaction") == 0)
 800230c:	f107 031c 	add.w	r3, r7, #28
 8002310:	4939      	ldr	r1, [pc, #228]	; (80023f8 <runCommand+0x5e8>)
 8002312:	4618      	mov	r0, r3
 8002314:	f7fd ff64 	bl	80001e0 <strcmp>
 8002318:	4603      	mov	r3, r0
 800231a:	2b00      	cmp	r3, #0
 800231c:	d12a      	bne.n	8002374 <runCommand+0x564>
		periodo_TIMER_Count = firtsParameter;
 800231e:	69bb      	ldr	r3, [r7, #24]
 8002320:	b29a      	uxth	r2, r3
 8002322:	4b2e      	ldr	r3, [pc, #184]	; (80023dc <runCommand+0x5cc>)
 8002324:	801a      	strh	r2, [r3, #0]
		config_motor(4, periodo_TIMER_Count, (secondParameter/100), (secondParameter/100), thirdParameter);//Tipo de Estudio, periodo [ms], por dutty L, por dutty R, fre pwm [hz]
 8002326:	4b2d      	ldr	r3, [pc, #180]	; (80023dc <runCommand+0x5cc>)
 8002328:	881b      	ldrh	r3, [r3, #0]
 800232a:	4619      	mov	r1, r3
 800232c:	697b      	ldr	r3, [r7, #20]
 800232e:	4a2f      	ldr	r2, [pc, #188]	; (80023ec <runCommand+0x5dc>)
 8002330:	fb82 0203 	smull	r0, r2, r2, r3
 8002334:	1152      	asrs	r2, r2, #5
 8002336:	17db      	asrs	r3, r3, #31
 8002338:	1ad3      	subs	r3, r2, r3
 800233a:	ee07 3a90 	vmov	s15, r3
 800233e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002342:	697b      	ldr	r3, [r7, #20]
 8002344:	4a29      	ldr	r2, [pc, #164]	; (80023ec <runCommand+0x5dc>)
 8002346:	fb82 0203 	smull	r0, r2, r2, r3
 800234a:	1152      	asrs	r2, r2, #5
 800234c:	17db      	asrs	r3, r3, #31
 800234e:	1ad3      	subs	r3, r2, r3
 8002350:	ee07 3a10 	vmov	s14, r3
 8002354:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8002358:	693b      	ldr	r3, [r7, #16]
 800235a:	461a      	mov	r2, r3
 800235c:	eef0 0a47 	vmov.f32	s1, s14
 8002360:	eeb0 0a67 	vmov.f32	s0, s15
 8002364:	2004      	movs	r0, #4
 8002366:	f000 f985 	bl	8002674 <config_motor>
		writeMsgForTXE(&handler_USART_USB, "Inicio conteo... \n");
 800236a:	4921      	ldr	r1, [pc, #132]	; (80023f0 <runCommand+0x5e0>)
 800236c:	4821      	ldr	r0, [pc, #132]	; (80023f4 <runCommand+0x5e4>)
 800236e:	f002 fe19 	bl	8004fa4 <writeMsgForTXE>
}
 8002372:	e014      	b.n	800239e <runCommand+0x58e>
	else if (strcmp(cmd, "stop") == 0)
 8002374:	f107 031c 	add.w	r3, r7, #28
 8002378:	4920      	ldr	r1, [pc, #128]	; (80023fc <runCommand+0x5ec>)
 800237a:	4618      	mov	r0, r3
 800237c:	f7fd ff30 	bl	80001e0 <strcmp>
 8002380:	4603      	mov	r3, r0
 8002382:	2b00      	cmp	r3, #0
 8002384:	d107      	bne.n	8002396 <runCommand+0x586>
		status_motor(RESET);
 8002386:	2000      	movs	r0, #0
 8002388:	f000 f8f8 	bl	800257c <status_motor>
		writeMsgForTXE(&handler_USART_USB, "Estudio finalizado \n");
 800238c:	491c      	ldr	r1, [pc, #112]	; (8002400 <runCommand+0x5f0>)
 800238e:	4819      	ldr	r0, [pc, #100]	; (80023f4 <runCommand+0x5e4>)
 8002390:	f002 fe08 	bl	8004fa4 <writeMsgForTXE>
}
 8002394:	e003      	b.n	800239e <runCommand+0x58e>
		writeMsgForTXE(&handler_USART_USB, "Comando no correcto \n");
 8002396:	491b      	ldr	r1, [pc, #108]	; (8002404 <runCommand+0x5f4>)
 8002398:	4816      	ldr	r0, [pc, #88]	; (80023f4 <runCommand+0x5e4>)
 800239a:	f002 fe03 	bl	8004fa4 <writeMsgForTXE>
}
 800239e:	bf00      	nop
 80023a0:	3764      	adds	r7, #100	; 0x64
 80023a2:	46bd      	mov	sp, r7
 80023a4:	bd90      	pop	{r4, r7, pc}
 80023a6:	bf00      	nop
 80023a8:	28240b78 	.word	0x28240b78
 80023ac:	3fed8c7e 	.word	0x3fed8c7e
 80023b0:	0800bebc 	.word	0x0800bebc
 80023b4:	42c80000 	.word	0x42c80000
 80023b8:	2000000c 	.word	0x2000000c
 80023bc:	2000045c 	.word	0x2000045c
 80023c0:	0800bec8 	.word	0x0800bec8
 80023c4:	20000449 	.word	0x20000449
 80023c8:	66666667 	.word	0x66666667
 80023cc:	2000044c 	.word	0x2000044c
 80023d0:	20000444 	.word	0x20000444
 80023d4:	200002e8 	.word	0x200002e8
 80023d8:	20000364 	.word	0x20000364
 80023dc:	20000008 	.word	0x20000008
 80023e0:	40080000 	.word	0x40080000
 80023e4:	2000000a 	.word	0x2000000a
 80023e8:	0800bed0 	.word	0x0800bed0
 80023ec:	51eb851f 	.word	0x51eb851f
 80023f0:	0800bed8 	.word	0x0800bed8
 80023f4:	2000026c 	.word	0x2000026c
 80023f8:	0800beec 	.word	0x0800beec
 80023fc:	0800bef8 	.word	0x0800bef8
 8002400:	0800bf00 	.word	0x0800bf00
 8002404:	0800bf18 	.word	0x0800bf18

08002408 <PID>:
//----------------------------Inicio de la definicion de las funciones-----------------------------------------


//--------------------PID----------------------
void PID(Parameters_PID_t *ptrPIDHandler, float setpoint, float measure)
{
 8002408:	b480      	push	{r7}
 800240a:	b089      	sub	sp, #36	; 0x24
 800240c:	af00      	add	r7, sp, #0
 800240e:	60f8      	str	r0, [r7, #12]
 8002410:	ed87 0a02 	vstr	s0, [r7, #8]
 8002414:	edc7 0a01 	vstr	s1, [r7, #4]
	//Calculo del error
	ptrPIDHandler->e = setpoint-measure;
 8002418:	ed97 7a02 	vldr	s14, [r7, #8]
 800241c:	edd7 7a01 	vldr	s15, [r7, #4]
 8002420:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	edc3 7a02 	vstr	s15, [r3, #8]
    // Controle PID
	float p0 =  ptrPIDHandler->q0*ptrPIDHandler->e;
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	ed93 7a05 	vldr	s14, [r3, #20]
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	edd3 7a02 	vldr	s15, [r3, #8]
 8002436:	ee67 7a27 	vmul.f32	s15, s14, s15
 800243a:	edc7 7a07 	vstr	s15, [r7, #28]
	float p1 =  ptrPIDHandler->q1*ptrPIDHandler->e_1;
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	ed93 7a06 	vldr	s14, [r3, #24]
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	edd3 7a03 	vldr	s15, [r3, #12]
 800244a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800244e:	edc7 7a06 	vstr	s15, [r7, #24]
	float p2 =  ptrPIDHandler->q2*ptrPIDHandler->e_2;
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	ed93 7a07 	vldr	s14, [r3, #28]
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	edd3 7a04 	vldr	s15, [r3, #16]
 800245e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002462:	edc7 7a05 	vstr	s15, [r7, #20]
	ptrPIDHandler->u = ptrPIDHandler->u_1 + p0 + p1 + p2;        //Ley del controlador PID discreto
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	ed93 7a01 	vldr	s14, [r3, #4]
 800246c:	edd7 7a07 	vldr	s15, [r7, #28]
 8002470:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002474:	edd7 7a06 	vldr	s15, [r7, #24]
 8002478:	ee37 7a27 	vadd.f32	s14, s14, s15
 800247c:	edd7 7a05 	vldr	s15, [r7, #20]
 8002480:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	edc3 7a00 	vstr	s15, [r3]

     //Retorno a los valores reales
	ptrPIDHandler->e_2 = ptrPIDHandler->e_1;
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	68da      	ldr	r2, [r3, #12]
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	611a      	str	r2, [r3, #16]
	ptrPIDHandler->e_1 = ptrPIDHandler->e;
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	689a      	ldr	r2, [r3, #8]
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	60da      	str	r2, [r3, #12]
	ptrPIDHandler->u_1 = ptrPIDHandler->u;
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	681a      	ldr	r2, [r3, #0]
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	605a      	str	r2, [r3, #4]
}
 80024a2:	bf00      	nop
 80024a4:	3724      	adds	r7, #36	; 0x24
 80024a6:	46bd      	mov	sp, r7
 80024a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ac:	4770      	bx	lr
	...

080024b0 <correction>:

void correction(Motor_Handler_t *ptrMotorHandler)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b084      	sub	sp, #16
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]

	//Definimos variables auxiliares
	float port_dutty = 0;
 80024b8:	f04f 0300 	mov.w	r3, #0
 80024bc:	60fb      	str	r3, [r7, #12]
	//Conversion ley de control->velocidad->valor dutty
	if(ptrMotorHandler == &handler_Motor_L)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	4a29      	ldr	r2, [pc, #164]	; (8002568 <correction+0xb8>)
 80024c2:	4293      	cmp	r3, r2
 80024c4:	d11b      	bne.n	80024fe <correction+0x4e>
	{
		//Conversion a dutty
		//correction_velocity_c
		port_dutty = (0.9234*(ptrMotorHandler->parametersMotor.parametersPID.u) - 3) ;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	4618      	mov	r0, r3
 80024cc:	f7fe f854 	bl	8000578 <__aeabi_f2d>
 80024d0:	a323      	add	r3, pc, #140	; (adr r3, 8002560 <correction+0xb0>)
 80024d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024d6:	f7fe f8a7 	bl	8000628 <__aeabi_dmul>
 80024da:	4602      	mov	r2, r0
 80024dc:	460b      	mov	r3, r1
 80024de:	4610      	mov	r0, r2
 80024e0:	4619      	mov	r1, r3
 80024e2:	f04f 0200 	mov.w	r2, #0
 80024e6:	4b21      	ldr	r3, [pc, #132]	; (800256c <correction+0xbc>)
 80024e8:	f7fd fee6 	bl	80002b8 <__aeabi_dsub>
 80024ec:	4602      	mov	r2, r0
 80024ee:	460b      	mov	r3, r1
 80024f0:	4610      	mov	r0, r2
 80024f2:	4619      	mov	r1, r3
 80024f4:	f7fe fb90 	bl	8000c18 <__aeabi_d2f>
 80024f8:	4603      	mov	r3, r0
 80024fa:	60fb      	str	r3, [r7, #12]
 80024fc:	e002      	b.n	8002504 <correction+0x54>
		//port_dutty = ptrMotorHandler->parametersMotor.parametersPID.u ;
	}
	else
	{
		//Conversion a dutty
		port_dutty = ptrMotorHandler->parametersMotor.parametersPID.u ;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	60fb      	str	r3, [r7, #12]
	}

    //Saturo el porcentaje de dutty en un tope maximo y minimo
    if (port_dutty >= 100.0)
 8002504:	edd7 7a03 	vldr	s15, [r7, #12]
 8002508:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8002570 <correction+0xc0>
 800250c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002510:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002514:	db02      	blt.n	800251c <correction+0x6c>
    {
    	port_dutty = 100.0;
 8002516:	4b17      	ldr	r3, [pc, #92]	; (8002574 <correction+0xc4>)
 8002518:	60fb      	str	r3, [r7, #12]
 800251a:	e018      	b.n	800254e <correction+0x9e>
    }
    else if(port_dutty <= duttyInicial-5)
 800251c:	4b16      	ldr	r3, [pc, #88]	; (8002578 <correction+0xc8>)
 800251e:	edd3 7a00 	vldr	s15, [r3]
 8002522:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8002526:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800252a:	ed97 7a03 	vldr	s14, [r7, #12]
 800252e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002532:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002536:	d809      	bhi.n	800254c <correction+0x9c>
    {
    	port_dutty = duttyInicial-5;
 8002538:	4b0f      	ldr	r3, [pc, #60]	; (8002578 <correction+0xc8>)
 800253a:	edd3 7a00 	vldr	s15, [r3]
 800253e:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8002542:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002546:	edc7 7a03 	vstr	s15, [r7, #12]
 800254a:	e000      	b.n	800254e <correction+0x9e>
    }
    else
    {
    	__NOP();
 800254c:	bf00      	nop
    }

    //Actualizamoe el valor del dutty
    updateDuttyMotor(ptrMotorHandler, port_dutty);
 800254e:	ed97 0a03 	vldr	s0, [r7, #12]
 8002552:	6878      	ldr	r0, [r7, #4]
 8002554:	f7fe fda0 	bl	8001098 <updateDuttyMotor>
}
 8002558:	bf00      	nop
 800255a:	3710      	adds	r7, #16
 800255c:	46bd      	mov	sp, r7
 800255e:	bd80      	pop	{r7, pc}
 8002560:	28240b78 	.word	0x28240b78
 8002564:	3fed8c7e 	.word	0x3fed8c7e
 8002568:	20000364 	.word	0x20000364
 800256c:	40080000 	.word	0x40080000
 8002570:	42c80000 	.word	0x42c80000
 8002574:	42c80000 	.word	0x42c80000
 8002578:	20000458 	.word	0x20000458

0800257c <status_motor>:

void status_motor(uint8_t status)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	b082      	sub	sp, #8
 8002580:	af00      	add	r7, sp, #0
 8002582:	4603      	mov	r3, r0
 8002584:	71fb      	strb	r3, [r7, #7]
	if(status == 1)
 8002586:	79fb      	ldrb	r3, [r7, #7]
 8002588:	2b01      	cmp	r3, #1
 800258a:	d138      	bne.n	80025fe <status_motor+0x82>
	{
		//Activamos el motor
		statusInOutPWM(handler_Motor_L.phandlerPWM, CHANNEL_ENABLE);
 800258c:	4b35      	ldr	r3, [pc, #212]	; (8002664 <status_motor+0xe8>)
 800258e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002590:	2101      	movs	r1, #1
 8002592:	4618      	mov	r0, r3
 8002594:	f002 f8fe 	bl	8004794 <statusInOutPWM>
		statusInOutPWM(handler_Motor_R.phandlerPWM, CHANNEL_ENABLE);
 8002598:	4b33      	ldr	r3, [pc, #204]	; (8002668 <status_motor+0xec>)
 800259a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800259c:	2101      	movs	r1, #1
 800259e:	4618      	mov	r0, r3
 80025a0:	f002 f8f8 	bl	8004794 <statusInOutPWM>
		GPIO_writePin(handler_Motor_L.phandlerGPIOIN, (handler_Motor_L.configMotor.dir)&SET);
 80025a4:	4b2f      	ldr	r3, [pc, #188]	; (8002664 <status_motor+0xe8>)
 80025a6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80025a8:	4b2e      	ldr	r3, [pc, #184]	; (8002664 <status_motor+0xe8>)
 80025aa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80025ae:	f003 0301 	and.w	r3, r3, #1
 80025b2:	b2db      	uxtb	r3, r3
 80025b4:	4619      	mov	r1, r3
 80025b6:	4610      	mov	r0, r2
 80025b8:	f001 fe1c 	bl	80041f4 <GPIO_writePin>
		GPIO_writePin(handler_Motor_R.phandlerGPIOIN, (handler_Motor_R.configMotor.dir)&SET);
 80025bc:	4b2a      	ldr	r3, [pc, #168]	; (8002668 <status_motor+0xec>)
 80025be:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80025c0:	4b29      	ldr	r3, [pc, #164]	; (8002668 <status_motor+0xec>)
 80025c2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80025c6:	f003 0301 	and.w	r3, r3, #1
 80025ca:	b2db      	uxtb	r3, r3
 80025cc:	4619      	mov	r1, r3
 80025ce:	4610      	mov	r0, r2
 80025d0:	f001 fe10 	bl	80041f4 <GPIO_writePin>
		GPIO_writePin(handler_Motor_L.phandlerGPIOEN, RESET);
 80025d4:	4b23      	ldr	r3, [pc, #140]	; (8002664 <status_motor+0xe8>)
 80025d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025d8:	2100      	movs	r1, #0
 80025da:	4618      	mov	r0, r3
 80025dc:	f001 fe0a 	bl	80041f4 <GPIO_writePin>
		GPIO_writePin(handler_Motor_R.phandlerGPIOEN, RESET);
 80025e0:	4b21      	ldr	r3, [pc, #132]	; (8002668 <status_motor+0xec>)
 80025e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025e4:	2100      	movs	r1, #0
 80025e6:	4618      	mov	r0, r3
 80025e8:	f001 fe04 	bl	80041f4 <GPIO_writePin>
		//Activamos la interrupcion
		if(flag_motor!=2)
 80025ec:	4b1f      	ldr	r3, [pc, #124]	; (800266c <status_motor+0xf0>)
 80025ee:	781b      	ldrb	r3, [r3, #0]
 80025f0:	2b02      	cmp	r3, #2
 80025f2:	d033      	beq.n	800265c <status_motor+0xe0>
		{
			statusiInterruptionTimer(&handler_TIMER_Count, INTERRUPTION_ENABLE);
 80025f4:	2101      	movs	r1, #1
 80025f6:	481e      	ldr	r0, [pc, #120]	; (8002670 <status_motor+0xf4>)
 80025f8:	f000 fbba 	bl	8002d70 <statusiInterruptionTimer>
		GPIO_writePin(handler_Motor_L.phandlerGPIOEN, SET);
		GPIO_writePin(handler_Motor_R.phandlerGPIOEN, SET);
		//Reiniciamos Bandera
		flag_motor = 0;
	}
}
 80025fc:	e02e      	b.n	800265c <status_motor+0xe0>
		if(flag_motor!=2)
 80025fe:	4b1b      	ldr	r3, [pc, #108]	; (800266c <status_motor+0xf0>)
 8002600:	781b      	ldrb	r3, [r3, #0]
 8002602:	2b02      	cmp	r3, #2
 8002604:	d003      	beq.n	800260e <status_motor+0x92>
			statusiInterruptionTimer(&handler_TIMER_Count, INTERRUPTION_DISABLE);
 8002606:	2100      	movs	r1, #0
 8002608:	4819      	ldr	r0, [pc, #100]	; (8002670 <status_motor+0xf4>)
 800260a:	f000 fbb1 	bl	8002d70 <statusiInterruptionTimer>
		statusInOutPWM(handler_Motor_L.phandlerPWM, CHANNEL_DISABLE);
 800260e:	4b15      	ldr	r3, [pc, #84]	; (8002664 <status_motor+0xe8>)
 8002610:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002612:	2100      	movs	r1, #0
 8002614:	4618      	mov	r0, r3
 8002616:	f002 f8bd 	bl	8004794 <statusInOutPWM>
		statusInOutPWM(handler_Motor_R.phandlerPWM, CHANNEL_DISABLE);
 800261a:	4b13      	ldr	r3, [pc, #76]	; (8002668 <status_motor+0xec>)
 800261c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800261e:	2100      	movs	r1, #0
 8002620:	4618      	mov	r0, r3
 8002622:	f002 f8b7 	bl	8004794 <statusInOutPWM>
		GPIO_writePin(handler_Motor_L.phandlerGPIOIN, (handler_Motor_L.configMotor.dir)&RESET);
 8002626:	4b0f      	ldr	r3, [pc, #60]	; (8002664 <status_motor+0xe8>)
 8002628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800262a:	2100      	movs	r1, #0
 800262c:	4618      	mov	r0, r3
 800262e:	f001 fde1 	bl	80041f4 <GPIO_writePin>
		GPIO_writePin(handler_Motor_R.phandlerGPIOIN, (handler_Motor_R.configMotor.dir)&RESET);
 8002632:	4b0d      	ldr	r3, [pc, #52]	; (8002668 <status_motor+0xec>)
 8002634:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002636:	2100      	movs	r1, #0
 8002638:	4618      	mov	r0, r3
 800263a:	f001 fddb 	bl	80041f4 <GPIO_writePin>
		GPIO_writePin(handler_Motor_L.phandlerGPIOEN, SET);
 800263e:	4b09      	ldr	r3, [pc, #36]	; (8002664 <status_motor+0xe8>)
 8002640:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002642:	2101      	movs	r1, #1
 8002644:	4618      	mov	r0, r3
 8002646:	f001 fdd5 	bl	80041f4 <GPIO_writePin>
		GPIO_writePin(handler_Motor_R.phandlerGPIOEN, SET);
 800264a:	4b07      	ldr	r3, [pc, #28]	; (8002668 <status_motor+0xec>)
 800264c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800264e:	2101      	movs	r1, #1
 8002650:	4618      	mov	r0, r3
 8002652:	f001 fdcf 	bl	80041f4 <GPIO_writePin>
		flag_motor = 0;
 8002656:	4b05      	ldr	r3, [pc, #20]	; (800266c <status_motor+0xf0>)
 8002658:	2200      	movs	r2, #0
 800265a:	701a      	strb	r2, [r3, #0]
}
 800265c:	bf00      	nop
 800265e:	3708      	adds	r7, #8
 8002660:	46bd      	mov	sp, r7
 8002662:	bd80      	pop	{r7, pc}
 8002664:	20000364 	.word	0x20000364
 8002668:	200002e8 	.word	0x200002e8
 800266c:	20000448 	.word	0x20000448
 8002670:	200003c0 	.word	0x200003c0

08002674 <config_motor>:

//Funcion para al configuracion de los motores
void config_motor(uint8_t status, int firth, float second, float third, int forth)  //Tipo de Estudio, periodo [ms], por dutty L, por dutty R, fre pwm [hz]
{
 8002674:	b580      	push	{r7, lr}
 8002676:	b086      	sub	sp, #24
 8002678:	af00      	add	r7, sp, #0
 800267a:	4603      	mov	r3, r0
 800267c:	6139      	str	r1, [r7, #16]
 800267e:	ed87 0a03 	vstr	s0, [r7, #12]
 8002682:	edc7 0a02 	vstr	s1, [r7, #8]
 8002686:	607a      	str	r2, [r7, #4]
 8002688:	75fb      	strb	r3, [r7, #23]
	//Actualizacion de la frecuencia del timer
	updateFrequencyTimer(&handler_TIMER_Count, firth);
 800268a:	693b      	ldr	r3, [r7, #16]
 800268c:	b29b      	uxth	r3, r3
 800268e:	4619      	mov	r1, r3
 8002690:	4819      	ldr	r0, [pc, #100]	; (80026f8 <config_motor+0x84>)
 8002692:	f000 fb8d 	bl	8002db0 <updateFrequencyTimer>
	//Establecer valores
	handler_Motor_R.parametersMotor.count = 0;
 8002696:	4b19      	ldr	r3, [pc, #100]	; (80026fc <config_motor+0x88>)
 8002698:	2200      	movs	r2, #0
 800269a:	841a      	strh	r2, [r3, #32]
	handler_Motor_L.parametersMotor.count = 0;
 800269c:	4b18      	ldr	r3, [pc, #96]	; (8002700 <config_motor+0x8c>)
 800269e:	2200      	movs	r2, #0
 80026a0:	841a      	strh	r2, [r3, #32]
	handler_Motor_R.parametersMotor.countCotinuous = 0;
 80026a2:	4b16      	ldr	r3, [pc, #88]	; (80026fc <config_motor+0x88>)
 80026a4:	2200      	movs	r2, #0
 80026a6:	625a      	str	r2, [r3, #36]	; 0x24
	handler_Motor_L.parametersMotor.countCotinuous = 0;
 80026a8:	4b15      	ldr	r3, [pc, #84]	; (8002700 <config_motor+0x8c>)
 80026aa:	2200      	movs	r2, #0
 80026ac:	625a      	str	r2, [r3, #36]	; 0x24
	//Establecemos valroes iniciales
	//timeBackR = timeBackL = getTicksUs();
	count_time = 0;
 80026ae:	4b15      	ldr	r3, [pc, #84]	; (8002704 <config_motor+0x90>)
 80026b0:	2200      	movs	r2, #0
 80026b2:	801a      	strh	r2, [r3, #0]
	//Actualizamos el valor del dutty y frecuencia
	value_period = 100000/forth;
 80026b4:	4a14      	ldr	r2, [pc, #80]	; (8002708 <config_motor+0x94>)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	fb92 f3f3 	sdiv	r3, r2, r3
 80026bc:	b29a      	uxth	r2, r3
 80026be:	4b13      	ldr	r3, [pc, #76]	; (800270c <config_motor+0x98>)
 80026c0:	801a      	strh	r2, [r3, #0]
	updateFrequencyTimer(&handler_TIMER_Motor, value_period);
 80026c2:	4b12      	ldr	r3, [pc, #72]	; (800270c <config_motor+0x98>)
 80026c4:	881b      	ldrh	r3, [r3, #0]
 80026c6:	4619      	mov	r1, r3
 80026c8:	4811      	ldr	r0, [pc, #68]	; (8002710 <config_motor+0x9c>)
 80026ca:	f000 fb71 	bl	8002db0 <updateFrequencyTimer>
	updateDuttyMotor(&handler_Motor_R, third);
 80026ce:	ed97 0a02 	vldr	s0, [r7, #8]
 80026d2:	480a      	ldr	r0, [pc, #40]	; (80026fc <config_motor+0x88>)
 80026d4:	f7fe fce0 	bl	8001098 <updateDuttyMotor>
	updateDuttyMotor(&handler_Motor_L, second);
 80026d8:	ed97 0a03 	vldr	s0, [r7, #12]
 80026dc:	4808      	ldr	r0, [pc, #32]	; (8002700 <config_motor+0x8c>)
 80026de:	f7fe fcdb 	bl	8001098 <updateDuttyMotor>
	//Cambio valor bandera
	flag_motor=status;
 80026e2:	4a0c      	ldr	r2, [pc, #48]	; (8002714 <config_motor+0xa0>)
 80026e4:	7dfb      	ldrb	r3, [r7, #23]
 80026e6:	7013      	strb	r3, [r2, #0]
	//Iniciamos el study
	status_motor(SET);
 80026e8:	2001      	movs	r0, #1
 80026ea:	f7ff ff47 	bl	800257c <status_motor>
}
 80026ee:	bf00      	nop
 80026f0:	3718      	adds	r7, #24
 80026f2:	46bd      	mov	sp, r7
 80026f4:	bd80      	pop	{r7, pc}
 80026f6:	bf00      	nop
 80026f8:	200003c0 	.word	0x200003c0
 80026fc:	200002e8 	.word	0x200002e8
 8002700:	20000364 	.word	0x20000364
 8002704:	2000044a 	.word	0x2000044a
 8002708:	000186a0 	.word	0x000186a0
 800270c:	20000002 	.word	0x20000002
 8002710:	200003b0 	.word	0x200003b0
 8002714:	20000448 	.word	0x20000448

08002718 <constains_calculator>:


void constains_calculator(Parameters_PID_t *ptrPIDHandler,float k, float tau, float theta)   //k,tau,theta
{
 8002718:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800271c:	b088      	sub	sp, #32
 800271e:	af00      	add	r7, sp, #0
 8002720:	60f8      	str	r0, [r7, #12]
 8002722:	ed87 0a02 	vstr	s0, [r7, #8]
 8002726:	edc7 0a01 	vstr	s1, [r7, #4]
 800272a:	ed87 1a00 	vstr	s2, [r7]
	   //Calculo de constantes de porcentaje, integracion y derivacion por metodo de Ziegler y Nichols
	   float kp=(1.2*tau)/(k*theta);
 800272e:	6878      	ldr	r0, [r7, #4]
 8002730:	f7fd ff22 	bl	8000578 <__aeabi_f2d>
 8002734:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
 8002738:	4b6d      	ldr	r3, [pc, #436]	; (80028f0 <constains_calculator+0x1d8>)
 800273a:	f7fd ff75 	bl	8000628 <__aeabi_dmul>
 800273e:	4602      	mov	r2, r0
 8002740:	460b      	mov	r3, r1
 8002742:	4614      	mov	r4, r2
 8002744:	461d      	mov	r5, r3
 8002746:	ed97 7a02 	vldr	s14, [r7, #8]
 800274a:	edd7 7a00 	vldr	s15, [r7]
 800274e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002752:	ee17 0a90 	vmov	r0, s15
 8002756:	f7fd ff0f 	bl	8000578 <__aeabi_f2d>
 800275a:	4602      	mov	r2, r0
 800275c:	460b      	mov	r3, r1
 800275e:	4620      	mov	r0, r4
 8002760:	4629      	mov	r1, r5
 8002762:	f7fe f88b 	bl	800087c <__aeabi_ddiv>
 8002766:	4602      	mov	r2, r0
 8002768:	460b      	mov	r3, r1
 800276a:	4610      	mov	r0, r2
 800276c:	4619      	mov	r1, r3
 800276e:	f7fe fa53 	bl	8000c18 <__aeabi_d2f>
 8002772:	4603      	mov	r3, r0
 8002774:	61fb      	str	r3, [r7, #28]
	   float ti=2.0*theta;
 8002776:	edd7 7a00 	vldr	s15, [r7]
 800277a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800277e:	edc7 7a06 	vstr	s15, [r7, #24]
	   float td=0.5*theta;
 8002782:	edd7 7a00 	vldr	s15, [r7]
 8002786:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800278a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800278e:	edc7 7a05 	vstr	s15, [r7, #20]
	   //Calculo do controle PID digital
	   ptrPIDHandler->q0 = kp*(1+Ts/(2.0*ti)+td/Ts);
 8002792:	69f8      	ldr	r0, [r7, #28]
 8002794:	f7fd fef0 	bl	8000578 <__aeabi_f2d>
 8002798:	4604      	mov	r4, r0
 800279a:	460d      	mov	r5, r1
 800279c:	4b55      	ldr	r3, [pc, #340]	; (80028f4 <constains_calculator+0x1dc>)
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	4618      	mov	r0, r3
 80027a2:	f7fd fee9 	bl	8000578 <__aeabi_f2d>
 80027a6:	4680      	mov	r8, r0
 80027a8:	4689      	mov	r9, r1
 80027aa:	69b8      	ldr	r0, [r7, #24]
 80027ac:	f7fd fee4 	bl	8000578 <__aeabi_f2d>
 80027b0:	4602      	mov	r2, r0
 80027b2:	460b      	mov	r3, r1
 80027b4:	f7fd fd82 	bl	80002bc <__adddf3>
 80027b8:	4602      	mov	r2, r0
 80027ba:	460b      	mov	r3, r1
 80027bc:	4640      	mov	r0, r8
 80027be:	4649      	mov	r1, r9
 80027c0:	f7fe f85c 	bl	800087c <__aeabi_ddiv>
 80027c4:	4602      	mov	r2, r0
 80027c6:	460b      	mov	r3, r1
 80027c8:	4610      	mov	r0, r2
 80027ca:	4619      	mov	r1, r3
 80027cc:	f04f 0200 	mov.w	r2, #0
 80027d0:	4b49      	ldr	r3, [pc, #292]	; (80028f8 <constains_calculator+0x1e0>)
 80027d2:	f7fd fd73 	bl	80002bc <__adddf3>
 80027d6:	4602      	mov	r2, r0
 80027d8:	460b      	mov	r3, r1
 80027da:	4690      	mov	r8, r2
 80027dc:	4699      	mov	r9, r3
 80027de:	4b45      	ldr	r3, [pc, #276]	; (80028f4 <constains_calculator+0x1dc>)
 80027e0:	edd3 7a00 	vldr	s15, [r3]
 80027e4:	ed97 7a05 	vldr	s14, [r7, #20]
 80027e8:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80027ec:	ee16 0a90 	vmov	r0, s13
 80027f0:	f7fd fec2 	bl	8000578 <__aeabi_f2d>
 80027f4:	4602      	mov	r2, r0
 80027f6:	460b      	mov	r3, r1
 80027f8:	4640      	mov	r0, r8
 80027fa:	4649      	mov	r1, r9
 80027fc:	f7fd fd5e 	bl	80002bc <__adddf3>
 8002800:	4602      	mov	r2, r0
 8002802:	460b      	mov	r3, r1
 8002804:	4620      	mov	r0, r4
 8002806:	4629      	mov	r1, r5
 8002808:	f7fd ff0e 	bl	8000628 <__aeabi_dmul>
 800280c:	4602      	mov	r2, r0
 800280e:	460b      	mov	r3, r1
 8002810:	4610      	mov	r0, r2
 8002812:	4619      	mov	r1, r3
 8002814:	f7fe fa00 	bl	8000c18 <__aeabi_d2f>
 8002818:	4602      	mov	r2, r0
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	615a      	str	r2, [r3, #20]
	   ptrPIDHandler->q1 = -kp*(1-Ts/(2.0*ti)+(2.0*td)/Ts);
 800281e:	edd7 7a07 	vldr	s15, [r7, #28]
 8002822:	eef1 7a67 	vneg.f32	s15, s15
 8002826:	ee17 3a90 	vmov	r3, s15
 800282a:	4618      	mov	r0, r3
 800282c:	f7fd fea4 	bl	8000578 <__aeabi_f2d>
 8002830:	4604      	mov	r4, r0
 8002832:	460d      	mov	r5, r1
 8002834:	4b2f      	ldr	r3, [pc, #188]	; (80028f4 <constains_calculator+0x1dc>)
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	4618      	mov	r0, r3
 800283a:	f7fd fe9d 	bl	8000578 <__aeabi_f2d>
 800283e:	4680      	mov	r8, r0
 8002840:	4689      	mov	r9, r1
 8002842:	69b8      	ldr	r0, [r7, #24]
 8002844:	f7fd fe98 	bl	8000578 <__aeabi_f2d>
 8002848:	4602      	mov	r2, r0
 800284a:	460b      	mov	r3, r1
 800284c:	f7fd fd36 	bl	80002bc <__adddf3>
 8002850:	4602      	mov	r2, r0
 8002852:	460b      	mov	r3, r1
 8002854:	4640      	mov	r0, r8
 8002856:	4649      	mov	r1, r9
 8002858:	f7fe f810 	bl	800087c <__aeabi_ddiv>
 800285c:	4602      	mov	r2, r0
 800285e:	460b      	mov	r3, r1
 8002860:	f04f 0000 	mov.w	r0, #0
 8002864:	4924      	ldr	r1, [pc, #144]	; (80028f8 <constains_calculator+0x1e0>)
 8002866:	f7fd fd27 	bl	80002b8 <__aeabi_dsub>
 800286a:	4602      	mov	r2, r0
 800286c:	460b      	mov	r3, r1
 800286e:	4690      	mov	r8, r2
 8002870:	4699      	mov	r9, r3
 8002872:	6978      	ldr	r0, [r7, #20]
 8002874:	f7fd fe80 	bl	8000578 <__aeabi_f2d>
 8002878:	4602      	mov	r2, r0
 800287a:	460b      	mov	r3, r1
 800287c:	f7fd fd1e 	bl	80002bc <__adddf3>
 8002880:	4602      	mov	r2, r0
 8002882:	460b      	mov	r3, r1
 8002884:	4692      	mov	sl, r2
 8002886:	469b      	mov	fp, r3
 8002888:	4b1a      	ldr	r3, [pc, #104]	; (80028f4 <constains_calculator+0x1dc>)
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	4618      	mov	r0, r3
 800288e:	f7fd fe73 	bl	8000578 <__aeabi_f2d>
 8002892:	4602      	mov	r2, r0
 8002894:	460b      	mov	r3, r1
 8002896:	4650      	mov	r0, sl
 8002898:	4659      	mov	r1, fp
 800289a:	f7fd ffef 	bl	800087c <__aeabi_ddiv>
 800289e:	4602      	mov	r2, r0
 80028a0:	460b      	mov	r3, r1
 80028a2:	4640      	mov	r0, r8
 80028a4:	4649      	mov	r1, r9
 80028a6:	f7fd fd09 	bl	80002bc <__adddf3>
 80028aa:	4602      	mov	r2, r0
 80028ac:	460b      	mov	r3, r1
 80028ae:	4620      	mov	r0, r4
 80028b0:	4629      	mov	r1, r5
 80028b2:	f7fd feb9 	bl	8000628 <__aeabi_dmul>
 80028b6:	4602      	mov	r2, r0
 80028b8:	460b      	mov	r3, r1
 80028ba:	4610      	mov	r0, r2
 80028bc:	4619      	mov	r1, r3
 80028be:	f7fe f9ab 	bl	8000c18 <__aeabi_d2f>
 80028c2:	4602      	mov	r2, r0
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	619a      	str	r2, [r3, #24]
	   ptrPIDHandler->q2 = (kp*td)/Ts;
 80028c8:	ed97 7a07 	vldr	s14, [r7, #28]
 80028cc:	edd7 7a05 	vldr	s15, [r7, #20]
 80028d0:	ee67 6a27 	vmul.f32	s13, s14, s15
 80028d4:	4b07      	ldr	r3, [pc, #28]	; (80028f4 <constains_calculator+0x1dc>)
 80028d6:	ed93 7a00 	vldr	s14, [r3]
 80028da:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	edc3 7a07 	vstr	s15, [r3, #28]
}
 80028e4:	bf00      	nop
 80028e6:	3720      	adds	r7, #32
 80028e8:	46bd      	mov	sp, r7
 80028ea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80028ee:	bf00      	nop
 80028f0:	3ff33333 	.word	0x3ff33333
 80028f4:	20000004 	.word	0x20000004
 80028f8:	3ff00000 	.word	0x3ff00000

080028fc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80028fc:	480d      	ldr	r0, [pc, #52]	; (8002934 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80028fe:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002900:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002904:	480c      	ldr	r0, [pc, #48]	; (8002938 <LoopForever+0x6>)
  ldr r1, =_edata
 8002906:	490d      	ldr	r1, [pc, #52]	; (800293c <LoopForever+0xa>)
  ldr r2, =_sidata
 8002908:	4a0d      	ldr	r2, [pc, #52]	; (8002940 <LoopForever+0xe>)
  movs r3, #0
 800290a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800290c:	e002      	b.n	8002914 <LoopCopyDataInit>

0800290e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800290e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002910:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002912:	3304      	adds	r3, #4

08002914 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002914:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002916:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002918:	d3f9      	bcc.n	800290e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800291a:	4a0a      	ldr	r2, [pc, #40]	; (8002944 <LoopForever+0x12>)
  ldr r4, =_ebss
 800291c:	4c0a      	ldr	r4, [pc, #40]	; (8002948 <LoopForever+0x16>)
  movs r3, #0
 800291e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002920:	e001      	b.n	8002926 <LoopFillZerobss>

08002922 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002922:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002924:	3204      	adds	r2, #4

08002926 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002926:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002928:	d3fb      	bcc.n	8002922 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800292a:	f002 fd49 	bl	80053c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800292e:	f7fe fbf9 	bl	8001124 <main>

08002932 <LoopForever>:

LoopForever:
    b LoopForever
 8002932:	e7fe      	b.n	8002932 <LoopForever>
  ldr   r0, =_estack
 8002934:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002938:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800293c:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 8002940:	0800c650 	.word	0x0800c650
  ldr r2, =_sbss
 8002944:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 8002948:	20000d1c 	.word	0x20000d1c

0800294c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800294c:	e7fe      	b.n	800294c <ADC_IRQHandler>

0800294e <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800294e:	b480      	push	{r7}
 8002950:	af00      	add	r7, sp, #0
	return 1;
 8002952:	2301      	movs	r3, #1
}
 8002954:	4618      	mov	r0, r3
 8002956:	46bd      	mov	sp, r7
 8002958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295c:	4770      	bx	lr

0800295e <_kill>:

int _kill(int pid, int sig)
{
 800295e:	b580      	push	{r7, lr}
 8002960:	b082      	sub	sp, #8
 8002962:	af00      	add	r7, sp, #0
 8002964:	6078      	str	r0, [r7, #4]
 8002966:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002968:	f002 fd24 	bl	80053b4 <__errno>
 800296c:	4603      	mov	r3, r0
 800296e:	2216      	movs	r2, #22
 8002970:	601a      	str	r2, [r3, #0]
	return -1;
 8002972:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002976:	4618      	mov	r0, r3
 8002978:	3708      	adds	r7, #8
 800297a:	46bd      	mov	sp, r7
 800297c:	bd80      	pop	{r7, pc}

0800297e <_exit>:

void _exit (int status)
{
 800297e:	b580      	push	{r7, lr}
 8002980:	b082      	sub	sp, #8
 8002982:	af00      	add	r7, sp, #0
 8002984:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002986:	f04f 31ff 	mov.w	r1, #4294967295
 800298a:	6878      	ldr	r0, [r7, #4]
 800298c:	f7ff ffe7 	bl	800295e <_kill>
	while (1) {}		/* Make sure we hang here */
 8002990:	e7fe      	b.n	8002990 <_exit+0x12>

08002992 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002992:	b580      	push	{r7, lr}
 8002994:	b086      	sub	sp, #24
 8002996:	af00      	add	r7, sp, #0
 8002998:	60f8      	str	r0, [r7, #12]
 800299a:	60b9      	str	r1, [r7, #8]
 800299c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800299e:	2300      	movs	r3, #0
 80029a0:	617b      	str	r3, [r7, #20]
 80029a2:	e00a      	b.n	80029ba <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80029a4:	f3af 8000 	nop.w
 80029a8:	4601      	mov	r1, r0
 80029aa:	68bb      	ldr	r3, [r7, #8]
 80029ac:	1c5a      	adds	r2, r3, #1
 80029ae:	60ba      	str	r2, [r7, #8]
 80029b0:	b2ca      	uxtb	r2, r1
 80029b2:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80029b4:	697b      	ldr	r3, [r7, #20]
 80029b6:	3301      	adds	r3, #1
 80029b8:	617b      	str	r3, [r7, #20]
 80029ba:	697a      	ldr	r2, [r7, #20]
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	429a      	cmp	r2, r3
 80029c0:	dbf0      	blt.n	80029a4 <_read+0x12>
	}

return len;
 80029c2:	687b      	ldr	r3, [r7, #4]
}
 80029c4:	4618      	mov	r0, r3
 80029c6:	3718      	adds	r7, #24
 80029c8:	46bd      	mov	sp, r7
 80029ca:	bd80      	pop	{r7, pc}

080029cc <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b086      	sub	sp, #24
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	60f8      	str	r0, [r7, #12]
 80029d4:	60b9      	str	r1, [r7, #8]
 80029d6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80029d8:	2300      	movs	r3, #0
 80029da:	617b      	str	r3, [r7, #20]
 80029dc:	e009      	b.n	80029f2 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80029de:	68bb      	ldr	r3, [r7, #8]
 80029e0:	1c5a      	adds	r2, r3, #1
 80029e2:	60ba      	str	r2, [r7, #8]
 80029e4:	781b      	ldrb	r3, [r3, #0]
 80029e6:	4618      	mov	r0, r3
 80029e8:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80029ec:	697b      	ldr	r3, [r7, #20]
 80029ee:	3301      	adds	r3, #1
 80029f0:	617b      	str	r3, [r7, #20]
 80029f2:	697a      	ldr	r2, [r7, #20]
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	429a      	cmp	r2, r3
 80029f8:	dbf1      	blt.n	80029de <_write+0x12>
	}
	return len;
 80029fa:	687b      	ldr	r3, [r7, #4]
}
 80029fc:	4618      	mov	r0, r3
 80029fe:	3718      	adds	r7, #24
 8002a00:	46bd      	mov	sp, r7
 8002a02:	bd80      	pop	{r7, pc}

08002a04 <_close>:

int _close(int file)
{
 8002a04:	b480      	push	{r7}
 8002a06:	b083      	sub	sp, #12
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
	return -1;
 8002a0c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002a10:	4618      	mov	r0, r3
 8002a12:	370c      	adds	r7, #12
 8002a14:	46bd      	mov	sp, r7
 8002a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1a:	4770      	bx	lr

08002a1c <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002a1c:	b480      	push	{r7}
 8002a1e:	b083      	sub	sp, #12
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
 8002a24:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002a26:	683b      	ldr	r3, [r7, #0]
 8002a28:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002a2c:	605a      	str	r2, [r3, #4]
	return 0;
 8002a2e:	2300      	movs	r3, #0
}
 8002a30:	4618      	mov	r0, r3
 8002a32:	370c      	adds	r7, #12
 8002a34:	46bd      	mov	sp, r7
 8002a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3a:	4770      	bx	lr

08002a3c <_isatty>:

int _isatty(int file)
{
 8002a3c:	b480      	push	{r7}
 8002a3e:	b083      	sub	sp, #12
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
	return 1;
 8002a44:	2301      	movs	r3, #1
}
 8002a46:	4618      	mov	r0, r3
 8002a48:	370c      	adds	r7, #12
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a50:	4770      	bx	lr

08002a52 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002a52:	b480      	push	{r7}
 8002a54:	b085      	sub	sp, #20
 8002a56:	af00      	add	r7, sp, #0
 8002a58:	60f8      	str	r0, [r7, #12]
 8002a5a:	60b9      	str	r1, [r7, #8]
 8002a5c:	607a      	str	r2, [r7, #4]
	return 0;
 8002a5e:	2300      	movs	r3, #0
}
 8002a60:	4618      	mov	r0, r3
 8002a62:	3714      	adds	r7, #20
 8002a64:	46bd      	mov	sp, r7
 8002a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6a:	4770      	bx	lr

08002a6c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	b086      	sub	sp, #24
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002a74:	4a14      	ldr	r2, [pc, #80]	; (8002ac8 <_sbrk+0x5c>)
 8002a76:	4b15      	ldr	r3, [pc, #84]	; (8002acc <_sbrk+0x60>)
 8002a78:	1ad3      	subs	r3, r2, r3
 8002a7a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002a7c:	697b      	ldr	r3, [r7, #20]
 8002a7e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002a80:	4b13      	ldr	r3, [pc, #76]	; (8002ad0 <_sbrk+0x64>)
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d102      	bne.n	8002a8e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002a88:	4b11      	ldr	r3, [pc, #68]	; (8002ad0 <_sbrk+0x64>)
 8002a8a:	4a12      	ldr	r2, [pc, #72]	; (8002ad4 <_sbrk+0x68>)
 8002a8c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002a8e:	4b10      	ldr	r3, [pc, #64]	; (8002ad0 <_sbrk+0x64>)
 8002a90:	681a      	ldr	r2, [r3, #0]
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	4413      	add	r3, r2
 8002a96:	693a      	ldr	r2, [r7, #16]
 8002a98:	429a      	cmp	r2, r3
 8002a9a:	d207      	bcs.n	8002aac <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002a9c:	f002 fc8a 	bl	80053b4 <__errno>
 8002aa0:	4603      	mov	r3, r0
 8002aa2:	220c      	movs	r2, #12
 8002aa4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002aa6:	f04f 33ff 	mov.w	r3, #4294967295
 8002aaa:	e009      	b.n	8002ac0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002aac:	4b08      	ldr	r3, [pc, #32]	; (8002ad0 <_sbrk+0x64>)
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002ab2:	4b07      	ldr	r3, [pc, #28]	; (8002ad0 <_sbrk+0x64>)
 8002ab4:	681a      	ldr	r2, [r3, #0]
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	4413      	add	r3, r2
 8002aba:	4a05      	ldr	r2, [pc, #20]	; (8002ad0 <_sbrk+0x64>)
 8002abc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002abe:	68fb      	ldr	r3, [r7, #12]
}
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	3718      	adds	r7, #24
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	bd80      	pop	{r7, pc}
 8002ac8:	20020000 	.word	0x20020000
 8002acc:	00000400 	.word	0x00000400
 8002ad0:	200004ac 	.word	0x200004ac
 8002ad4:	20000d20 	.word	0x20000d20

08002ad8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ad8:	b480      	push	{r7}
 8002ada:	b083      	sub	sp, #12
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	4603      	mov	r3, r0
 8002ae0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ae2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	db0b      	blt.n	8002b02 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002aea:	79fb      	ldrb	r3, [r7, #7]
 8002aec:	f003 021f 	and.w	r2, r3, #31
 8002af0:	4907      	ldr	r1, [pc, #28]	; (8002b10 <__NVIC_EnableIRQ+0x38>)
 8002af2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002af6:	095b      	lsrs	r3, r3, #5
 8002af8:	2001      	movs	r0, #1
 8002afa:	fa00 f202 	lsl.w	r2, r0, r2
 8002afe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002b02:	bf00      	nop
 8002b04:	370c      	adds	r7, #12
 8002b06:	46bd      	mov	sp, r7
 8002b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0c:	4770      	bx	lr
 8002b0e:	bf00      	nop
 8002b10:	e000e100 	.word	0xe000e100

08002b14 <BasicTimer_Config>:
TIM_TypeDef *ptrTimer4Used;
TIM_TypeDef *ptrTimer5Used;

//Funcion para cargar la configuracion del Timer
void BasicTimer_Config(BasicTimer_Handler_t *ptrBTimerHandler)
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	b084      	sub	sp, #16
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]

	//---------------------------------1) Activamos el periferico------------------------------------------
	//Registro: APB1ENR

	//Verificamos para TIM2
	if(ptrBTimerHandler->ptrTIMx==TIM2)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	68db      	ldr	r3, [r3, #12]
 8002b20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b24:	d10a      	bne.n	8002b3c <BasicTimer_Config+0x28>
	{
		/*Activamos el periferico escribiendo un 1 deacuerdo a la posicion
		 * del periferico en el registro*/
		RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 8002b26:	4b62      	ldr	r3, [pc, #392]	; (8002cb0 <BasicTimer_Config+0x19c>)
 8002b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b2a:	4a61      	ldr	r2, [pc, #388]	; (8002cb0 <BasicTimer_Config+0x19c>)
 8002b2c:	f043 0301 	orr.w	r3, r3, #1
 8002b30:	6413      	str	r3, [r2, #64]	; 0x40

		//Guardamos una referencia al periferico que estamos utilizando
		ptrTimer2Used = ptrBTimerHandler->ptrTIMx;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	68db      	ldr	r3, [r3, #12]
 8002b36:	4a5f      	ldr	r2, [pc, #380]	; (8002cb4 <BasicTimer_Config+0x1a0>)
 8002b38:	6013      	str	r3, [r2, #0]
 8002b3a:	e02e      	b.n	8002b9a <BasicTimer_Config+0x86>

	}
	//Verificamos para TIM3
	else if(ptrBTimerHandler->ptrTIMx==TIM3)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	68db      	ldr	r3, [r3, #12]
 8002b40:	4a5d      	ldr	r2, [pc, #372]	; (8002cb8 <BasicTimer_Config+0x1a4>)
 8002b42:	4293      	cmp	r3, r2
 8002b44:	d10a      	bne.n	8002b5c <BasicTimer_Config+0x48>
	{
		/*Activamos el periferico escribiendo un 1 deacuerdo a la posicion
		 * del periferico en el registro*/
		RCC->APB1ENR |= RCC_APB1ENR_TIM3EN;
 8002b46:	4b5a      	ldr	r3, [pc, #360]	; (8002cb0 <BasicTimer_Config+0x19c>)
 8002b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b4a:	4a59      	ldr	r2, [pc, #356]	; (8002cb0 <BasicTimer_Config+0x19c>)
 8002b4c:	f043 0302 	orr.w	r3, r3, #2
 8002b50:	6413      	str	r3, [r2, #64]	; 0x40

		//Guardamos una referencia al periferico que estamos utilizando
		ptrTimer3Used = ptrBTimerHandler->ptrTIMx;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	68db      	ldr	r3, [r3, #12]
 8002b56:	4a59      	ldr	r2, [pc, #356]	; (8002cbc <BasicTimer_Config+0x1a8>)
 8002b58:	6013      	str	r3, [r2, #0]
 8002b5a:	e01e      	b.n	8002b9a <BasicTimer_Config+0x86>
	}
	//Verificamos para TIM4
	else if(ptrBTimerHandler->ptrTIMx==TIM4)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	68db      	ldr	r3, [r3, #12]
 8002b60:	4a57      	ldr	r2, [pc, #348]	; (8002cc0 <BasicTimer_Config+0x1ac>)
 8002b62:	4293      	cmp	r3, r2
 8002b64:	d10a      	bne.n	8002b7c <BasicTimer_Config+0x68>
	{
		/*Activamos el periferico escribiendo un 1 deacuerdo a la posicion
		 * del periferico en el registro*/
		RCC->APB1ENR |= RCC_APB1ENR_TIM4EN;
 8002b66:	4b52      	ldr	r3, [pc, #328]	; (8002cb0 <BasicTimer_Config+0x19c>)
 8002b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b6a:	4a51      	ldr	r2, [pc, #324]	; (8002cb0 <BasicTimer_Config+0x19c>)
 8002b6c:	f043 0304 	orr.w	r3, r3, #4
 8002b70:	6413      	str	r3, [r2, #64]	; 0x40

		//Guardamos una referencia al periferico que estamos utilizando
		ptrTimer4Used = ptrBTimerHandler->ptrTIMx;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	68db      	ldr	r3, [r3, #12]
 8002b76:	4a53      	ldr	r2, [pc, #332]	; (8002cc4 <BasicTimer_Config+0x1b0>)
 8002b78:	6013      	str	r3, [r2, #0]
 8002b7a:	e00e      	b.n	8002b9a <BasicTimer_Config+0x86>
	}
	//Verificamos para TIM5
	else if(ptrBTimerHandler->ptrTIMx==TIM5)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	68db      	ldr	r3, [r3, #12]
 8002b80:	4a51      	ldr	r2, [pc, #324]	; (8002cc8 <BasicTimer_Config+0x1b4>)
 8002b82:	4293      	cmp	r3, r2
 8002b84:	d109      	bne.n	8002b9a <BasicTimer_Config+0x86>
	{
		/*Activamos el periferico escribiendo un 1 deacuerdo a la posicion
		 * del periferico en el registro*/
		RCC->APB1ENR |= RCC_APB1ENR_TIM5EN;
 8002b86:	4b4a      	ldr	r3, [pc, #296]	; (8002cb0 <BasicTimer_Config+0x19c>)
 8002b88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b8a:	4a49      	ldr	r2, [pc, #292]	; (8002cb0 <BasicTimer_Config+0x19c>)
 8002b8c:	f043 0308 	orr.w	r3, r3, #8
 8002b90:	6413      	str	r3, [r2, #64]	; 0x40

		//Guardamos una referencia al periferico que estamos utilizando
		ptrTimer5Used = ptrBTimerHandler->ptrTIMx;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	68db      	ldr	r3, [r3, #12]
 8002b96:	4a4d      	ldr	r2, [pc, #308]	; (8002ccc <BasicTimer_Config+0x1b8>)
 8002b98:	6013      	str	r3, [r2, #0]
	}
	//------------------------------2) Configurando el pre-escaler-----------------------------------------
	//Registro:TIMx_PSC		//Es un valor de 32 bit

	uint8_t clockSystem = getConfigPLL();          //Guardamos la velocidad de reloj entregada al bus APB1
 8002b9a:	f001 fbeb 	bl	8004374 <getConfigPLL>
 8002b9e:	4603      	mov	r3, r0
 8002ba0:	73bb      	strb	r3, [r7, #14]
	uint8_t clock = getClockAPB1();          //Guardamos la velocidad de reloj entregada al bus APB1
 8002ba2:	f001 fc03 	bl	80043ac <getClockAPB1>
 8002ba6:	4603      	mov	r3, r0
 8002ba8:	73fb      	strb	r3, [r7, #15]

	//Verificamos si el multiplicador del Timer esta activado por el preescaler
	if(clockSystem>=50)
 8002baa:	7bbb      	ldrb	r3, [r7, #14]
 8002bac:	2b31      	cmp	r3, #49	; 0x31
 8002bae:	d903      	bls.n	8002bb8 <BasicTimer_Config+0xa4>
	{
		clock = clock*2;
 8002bb0:	7bfb      	ldrb	r3, [r7, #15]
 8002bb2:	005b      	lsls	r3, r3, #1
 8002bb4:	73fb      	strb	r3, [r7, #15]
 8002bb6:	e000      	b.n	8002bba <BasicTimer_Config+0xa6>
	}
	else
	{
		__NOP();
 8002bb8:	bf00      	nop
	}

	/*La frecuencia de reloj contador CK_CNT es igual a fck_psc/(psc[15:0]+1)
	 * por tanto define la velocidad a la que incrementa el counter*/
	ptrBTimerHandler->ptrTIMx->PSC = (clock)*(ptrBTimerHandler->TIMx_Config.TIMx_periodcnt)-1; //(min:0, max:65536)
 8002bba:	7bfb      	ldrb	r3, [r7, #15]
 8002bbc:	687a      	ldr	r2, [r7, #4]
 8002bbe:	8852      	ldrh	r2, [r2, #2]
 8002bc0:	fb02 f303 	mul.w	r3, r2, r3
 8002bc4:	1e5a      	subs	r2, r3, #1
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	68db      	ldr	r3, [r3, #12]
 8002bca:	629a      	str	r2, [r3, #40]	; 0x28
	//Registro:TIMx_CR1		Es un registro de configuracion del TIMx
	//Registro:TIMx_ARR		Es un valor de 32 bit
	//Registro:TIMx_CNT/	Es un valor de 32 bit

	//verificamos si el timer se configuro como up o dowm
	if(ptrBTimerHandler->TIMx_Config.TIMx_mode==BTIMER_MODE_UP)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	781b      	ldrb	r3, [r3, #0]
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d112      	bne.n	8002bfa <BasicTimer_Config+0xe6>
	{
		//-------a)Definimos la direccion para el conteo-------------
		ptrBTimerHandler->ptrTIMx->CR1 &= ~(0b1<<4);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	68db      	ldr	r3, [r3, #12]
 8002bd8:	681a      	ldr	r2, [r3, #0]
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	68db      	ldr	r3, [r3, #12]
 8002bde:	f022 0210 	bic.w	r2, r2, #16
 8002be2:	601a      	str	r2, [r3, #0]
		//-------b)Configuracion del Auto-Reload---------------------
		ptrBTimerHandler->ptrTIMx->ARR = ptrBTimerHandler->TIMx_Config.TIMX_period+1;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	685a      	ldr	r2, [r3, #4]
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	68db      	ldr	r3, [r3, #12]
 8002bec:	3201      	adds	r2, #1
 8002bee:	62da      	str	r2, [r3, #44]	; 0x2c
		//-------c)Reinicio del registro counter----------------------
		ptrBTimerHandler->ptrTIMx->CNT = 0;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	68db      	ldr	r3, [r3, #12]
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	625a      	str	r2, [r3, #36]	; 0x24
 8002bf8:	e018      	b.n	8002c2c <BasicTimer_Config+0x118>
	}
	else
	{
		//-------a)Definimos la direccion para el conteo-------------
		ptrBTimerHandler->ptrTIMx->CR1 &= ~(0b1<<4); //limpiamos
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	68db      	ldr	r3, [r3, #12]
 8002bfe:	681a      	ldr	r2, [r3, #0]
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	68db      	ldr	r3, [r3, #12]
 8002c04:	f022 0210 	bic.w	r2, r2, #16
 8002c08:	601a      	str	r2, [r3, #0]
		ptrBTimerHandler->ptrTIMx->CR1 |= (0b1<<4);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	68db      	ldr	r3, [r3, #12]
 8002c0e:	681a      	ldr	r2, [r3, #0]
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	68db      	ldr	r3, [r3, #12]
 8002c14:	f042 0210 	orr.w	r2, r2, #16
 8002c18:	601a      	str	r2, [r3, #0]
		//-------b)Configuracion del Auto-Reload---------------------
		ptrBTimerHandler->ptrTIMx->ARR = 0;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	68db      	ldr	r3, [r3, #12]
 8002c1e:	2200      	movs	r2, #0
 8002c20:	62da      	str	r2, [r3, #44]	; 0x2c
		//-------c)Reinicio del registro counter----------------------
		ptrBTimerHandler->ptrTIMx->CNT = ptrBTimerHandler->TIMx_Config.TIMX_period;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	68db      	ldr	r3, [r3, #12]
 8002c26:	687a      	ldr	r2, [r7, #4]
 8002c28:	6852      	ldr	r2, [r2, #4]
 8002c2a:	625a      	str	r2, [r3, #36]	; 0x24
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002c2c:	b672      	cpsid	i
}
 8002c2e:	bf00      	nop

	//Desactivamos las interrupciones Globales
	__disable_irq();

	//Matriculamos la interrupcion en el NVCI
	if(ptrBTimerHandler->ptrTIMx==TIM2)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	68db      	ldr	r3, [r3, #12]
 8002c34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c38:	d103      	bne.n	8002c42 <BasicTimer_Config+0x12e>
	{
		//Activamos el NVIC para la interrupcion del TIM2
		NVIC_EnableIRQ(TIM2_IRQn);
 8002c3a:	201c      	movs	r0, #28
 8002c3c:	f7ff ff4c 	bl	8002ad8 <__NVIC_EnableIRQ>
 8002c40:	e019      	b.n	8002c76 <BasicTimer_Config+0x162>
	}
	else if(ptrBTimerHandler->ptrTIMx==TIM3)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	68db      	ldr	r3, [r3, #12]
 8002c46:	4a1c      	ldr	r2, [pc, #112]	; (8002cb8 <BasicTimer_Config+0x1a4>)
 8002c48:	4293      	cmp	r3, r2
 8002c4a:	d103      	bne.n	8002c54 <BasicTimer_Config+0x140>
	{
		//Activamos el NVIC para la interrupcion del TIM3
		NVIC_EnableIRQ(TIM3_IRQn);
 8002c4c:	201d      	movs	r0, #29
 8002c4e:	f7ff ff43 	bl	8002ad8 <__NVIC_EnableIRQ>
 8002c52:	e010      	b.n	8002c76 <BasicTimer_Config+0x162>
	}
	else if(ptrBTimerHandler->ptrTIMx==TIM4)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	68db      	ldr	r3, [r3, #12]
 8002c58:	4a19      	ldr	r2, [pc, #100]	; (8002cc0 <BasicTimer_Config+0x1ac>)
 8002c5a:	4293      	cmp	r3, r2
 8002c5c:	d103      	bne.n	8002c66 <BasicTimer_Config+0x152>
	{
		//Activamos el NVIC para la interrupcion del TIM4
		NVIC_EnableIRQ(TIM4_IRQn);
 8002c5e:	201e      	movs	r0, #30
 8002c60:	f7ff ff3a 	bl	8002ad8 <__NVIC_EnableIRQ>
 8002c64:	e007      	b.n	8002c76 <BasicTimer_Config+0x162>
	}
	else if(ptrBTimerHandler->ptrTIMx==TIM5)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	68db      	ldr	r3, [r3, #12]
 8002c6a:	4a17      	ldr	r2, [pc, #92]	; (8002cc8 <BasicTimer_Config+0x1b4>)
 8002c6c:	4293      	cmp	r3, r2
 8002c6e:	d102      	bne.n	8002c76 <BasicTimer_Config+0x162>
	{
		//Activamos el NVIC para la interrupcion del TIM5
		NVIC_EnableIRQ(TIM5_IRQn);
 8002c70:	2032      	movs	r0, #50	; 0x32
 8002c72:	f7ff ff31 	bl	8002ad8 <__NVIC_EnableIRQ>
  __ASM volatile ("cpsie i" : : : "memory");
 8002c76:	b662      	cpsie	i
}
 8002c78:	bf00      	nop
	//Activo las interrupciones Globales
	__enable_irq();

	//----------------------5)Definimos el estado de la interrupcion---------------------------------

	statusiInterruptionTimer(ptrBTimerHandler, (ptrBTimerHandler->TIMx_Config.TIMx_interruptEnable));
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	7a1b      	ldrb	r3, [r3, #8]
 8002c7e:	4619      	mov	r1, r3
 8002c80:	6878      	ldr	r0, [r7, #4]
 8002c82:	f000 f875 	bl	8002d70 <statusiInterruptionTimer>

	//----------------------6) Activamos el Timer---------------------------------
	//Registro:TIMx_CR1

	ptrBTimerHandler->ptrTIMx->CR1 &= ~TIM_CR1_CEN;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	68db      	ldr	r3, [r3, #12]
 8002c8a:	681a      	ldr	r2, [r3, #0]
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	68db      	ldr	r3, [r3, #12]
 8002c90:	f022 0201 	bic.w	r2, r2, #1
 8002c94:	601a      	str	r2, [r3, #0]
	ptrBTimerHandler->ptrTIMx->CR1 |= TIM_CR1_CEN;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	68db      	ldr	r3, [r3, #12]
 8002c9a:	681a      	ldr	r2, [r3, #0]
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	68db      	ldr	r3, [r3, #12]
 8002ca0:	f042 0201 	orr.w	r2, r2, #1
 8002ca4:	601a      	str	r2, [r3, #0]
}
 8002ca6:	bf00      	nop
 8002ca8:	3710      	adds	r7, #16
 8002caa:	46bd      	mov	sp, r7
 8002cac:	bd80      	pop	{r7, pc}
 8002cae:	bf00      	nop
 8002cb0:	40023800 	.word	0x40023800
 8002cb4:	200004b0 	.word	0x200004b0
 8002cb8:	40000400 	.word	0x40000400
 8002cbc:	200004b4 	.word	0x200004b4
 8002cc0:	40000800 	.word	0x40000800
 8002cc4:	200004b8 	.word	0x200004b8
 8002cc8:	40000c00 	.word	0x40000c00
 8002ccc:	200004bc 	.word	0x200004bc

08002cd0 <BasicTimer4_Callback>:
{
	__NOP();
}

__attribute__((weak)) void BasicTimer4_Callback(void)
{
 8002cd0:	b480      	push	{r7}
 8002cd2:	af00      	add	r7, sp, #0
	__NOP();
 8002cd4:	bf00      	nop
}
 8002cd6:	bf00      	nop
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cde:	4770      	bx	lr

08002ce0 <BasicTimer5_Callback>:

__attribute__((weak)) void BasicTimer5_Callback(void)
{
 8002ce0:	b480      	push	{r7}
 8002ce2:	af00      	add	r7, sp, #0
	__NOP();
 8002ce4:	bf00      	nop
}
 8002ce6:	bf00      	nop
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cee:	4770      	bx	lr

08002cf0 <TIM2_IRQHandler>:

/* Cuando se produce una interrupcion en el NVIC debido a uno de los TIMER apuntara a una de
 * estas funciones en el vector de interrupciones respectivamente
 */
void TIM2_IRQHandler(void)
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	af00      	add	r7, sp, #0
	//Registro:TIMx_SR    Es un registro de almacenamiento del TIMx
	//limpiamos la bandera que indica que la interrupcion se a generado
	ptrTimer2Used->SR &= ~TIM_SR_UIF;
 8002cf4:	4b05      	ldr	r3, [pc, #20]	; (8002d0c <TIM2_IRQHandler+0x1c>)
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	691a      	ldr	r2, [r3, #16]
 8002cfa:	4b04      	ldr	r3, [pc, #16]	; (8002d0c <TIM2_IRQHandler+0x1c>)
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f022 0201 	bic.w	r2, r2, #1
 8002d02:	611a      	str	r2, [r3, #16]

	//Ejecute la funcion correspondiente a la interupccion
	BasicTimer2_Callback();
 8002d04:	f7fe fcaa 	bl	800165c <BasicTimer2_Callback>

}
 8002d08:	bf00      	nop
 8002d0a:	bd80      	pop	{r7, pc}
 8002d0c:	200004b0 	.word	0x200004b0

08002d10 <TIM3_IRQHandler>:

void TIM3_IRQHandler(void)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	af00      	add	r7, sp, #0
	//Registro:TIMx_SR    Es un registro de almacenamiento del TIMx
	//limpiamos la bandera que indica que la interrupcion se a generado
	ptrTimer3Used->SR &= ~TIM_SR_UIF;
 8002d14:	4b05      	ldr	r3, [pc, #20]	; (8002d2c <TIM3_IRQHandler+0x1c>)
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	691a      	ldr	r2, [r3, #16]
 8002d1a:	4b04      	ldr	r3, [pc, #16]	; (8002d2c <TIM3_IRQHandler+0x1c>)
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f022 0201 	bic.w	r2, r2, #1
 8002d22:	611a      	str	r2, [r3, #16]

	//Ejecute la funcion correspondiente a la interupccion
	BasicTimer3_Callback();
 8002d24:	f7fe fca4 	bl	8001670 <BasicTimer3_Callback>

}
 8002d28:	bf00      	nop
 8002d2a:	bd80      	pop	{r7, pc}
 8002d2c:	200004b4 	.word	0x200004b4

08002d30 <TIM4_IRQHandler>:

void TIM4_IRQHandler(void)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	af00      	add	r7, sp, #0
	//Registro:TIMx_SR    Es un registro de almacenamiento del TIMx
	//limpiamos la bandera que indica que la interrupcion se a generado
	ptrTimer4Used->SR &= ~TIM_SR_UIF;
 8002d34:	4b05      	ldr	r3, [pc, #20]	; (8002d4c <TIM4_IRQHandler+0x1c>)
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	691a      	ldr	r2, [r3, #16]
 8002d3a:	4b04      	ldr	r3, [pc, #16]	; (8002d4c <TIM4_IRQHandler+0x1c>)
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f022 0201 	bic.w	r2, r2, #1
 8002d42:	611a      	str	r2, [r3, #16]

	//Ejecute la funcion correspondiente a la interupccion
	BasicTimer4_Callback();
 8002d44:	f7ff ffc4 	bl	8002cd0 <BasicTimer4_Callback>

}
 8002d48:	bf00      	nop
 8002d4a:	bd80      	pop	{r7, pc}
 8002d4c:	200004b8 	.word	0x200004b8

08002d50 <TIM5_IRQHandler>:

void TIM5_IRQHandler(void)
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	af00      	add	r7, sp, #0
	//Registro:TIMx_SR    Es un registro de almacenamiento del TIMx
	//limpiamos la bandera que indica que la interrupcion se a generado
	ptrTimer5Used->SR &= ~TIM_SR_UIF;
 8002d54:	4b05      	ldr	r3, [pc, #20]	; (8002d6c <TIM5_IRQHandler+0x1c>)
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	691a      	ldr	r2, [r3, #16]
 8002d5a:	4b04      	ldr	r3, [pc, #16]	; (8002d6c <TIM5_IRQHandler+0x1c>)
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f022 0201 	bic.w	r2, r2, #1
 8002d62:	611a      	str	r2, [r3, #16]

	//Ejecute la funcion correspondiente a la interupccion
	BasicTimer5_Callback();
 8002d64:	f7ff ffbc 	bl	8002ce0 <BasicTimer5_Callback>

}
 8002d68:	bf00      	nop
 8002d6a:	bd80      	pop	{r7, pc}
 8002d6c:	200004bc 	.word	0x200004bc

08002d70 <statusiInterruptionTimer>:


//Definir la interrupcion por el timer
void statusiInterruptionTimer(BasicTimer_Handler_t *ptrBTimerHandler, uint8_t status)
{
 8002d70:	b480      	push	{r7}
 8002d72:	b083      	sub	sp, #12
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
 8002d78:	460b      	mov	r3, r1
 8002d7a:	70fb      	strb	r3, [r7, #3]
	//Verificar el estado que se desea con definir
	if(status == INTERRUPTION_ENABLE)
 8002d7c:	78fb      	ldrb	r3, [r7, #3]
 8002d7e:	2b01      	cmp	r3, #1
 8002d80:	d108      	bne.n	8002d94 <statusiInterruptionTimer+0x24>
	{
		//Activamos las interrupciones
		ptrBTimerHandler->ptrTIMx->DIER |=TIM_DIER_UIE;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	68db      	ldr	r3, [r3, #12]
 8002d86:	68da      	ldr	r2, [r3, #12]
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	68db      	ldr	r3, [r3, #12]
 8002d8c:	f042 0201 	orr.w	r2, r2, #1
 8002d90:	60da      	str	r2, [r3, #12]
	else
	{
		//Desactivamos las interrupciones
		ptrBTimerHandler->ptrTIMx->DIER &= ~TIM_DIER_UIE;
	}
}
 8002d92:	e007      	b.n	8002da4 <statusiInterruptionTimer+0x34>
		ptrBTimerHandler->ptrTIMx->DIER &= ~TIM_DIER_UIE;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	68db      	ldr	r3, [r3, #12]
 8002d98:	68da      	ldr	r2, [r3, #12]
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	68db      	ldr	r3, [r3, #12]
 8002d9e:	f022 0201 	bic.w	r2, r2, #1
 8002da2:	60da      	str	r2, [r3, #12]
}
 8002da4:	bf00      	nop
 8002da6:	370c      	adds	r7, #12
 8002da8:	46bd      	mov	sp, r7
 8002daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dae:	4770      	bx	lr

08002db0 <updateFrequencyTimer>:


//Actualizamos la frecuencia del TIMER
void updateFrequencyTimer(BasicTimer_Handler_t *ptrBTimerHandler, uint16_t newPer)
{
 8002db0:	b480      	push	{r7}
 8002db2:	b083      	sub	sp, #12
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
 8002db8:	460b      	mov	r3, r1
 8002dba:	807b      	strh	r3, [r7, #2]
	//Establecemos el nuevo valor del periodo en la configuracion del PWM
	ptrBTimerHandler->TIMx_Config.TIMX_period = newPer;
 8002dbc:	887a      	ldrh	r2, [r7, #2]
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	605a      	str	r2, [r3, #4]
	//Reiniamos el contador
	ptrBTimerHandler->ptrTIMx->CNT = 0;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	68db      	ldr	r3, [r3, #12]
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	625a      	str	r2, [r3, #36]	; 0x24
	/*Cargamos el valor del ARR el cual es e limite de incrementos del TIMER
	 */
	ptrBTimerHandler->ptrTIMx->ARR = ptrBTimerHandler->TIMx_Config.TIMX_period;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	68db      	ldr	r3, [r3, #12]
 8002dce:	687a      	ldr	r2, [r7, #4]
 8002dd0:	6852      	ldr	r2, [r2, #4]
 8002dd2:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8002dd4:	bf00      	nop
 8002dd6:	370c      	adds	r7, #12
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dde:	4770      	bx	lr

08002de0 <__NVIC_EnableIRQ>:
{
 8002de0:	b480      	push	{r7}
 8002de2:	b083      	sub	sp, #12
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	4603      	mov	r3, r0
 8002de8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002dea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	db0b      	blt.n	8002e0a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002df2:	79fb      	ldrb	r3, [r7, #7]
 8002df4:	f003 021f 	and.w	r2, r3, #31
 8002df8:	4907      	ldr	r1, [pc, #28]	; (8002e18 <__NVIC_EnableIRQ+0x38>)
 8002dfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dfe:	095b      	lsrs	r3, r3, #5
 8002e00:	2001      	movs	r0, #1
 8002e02:	fa00 f202 	lsl.w	r2, r0, r2
 8002e06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002e0a:	bf00      	nop
 8002e0c:	370c      	adds	r7, #12
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e14:	4770      	bx	lr
 8002e16:	bf00      	nop
 8002e18:	e000e100 	.word	0xe000e100

08002e1c <extInt_Config>:
#include <ExtiDriver.h>
#include <GPIOxDriver.h>

//Configuracion EXTI
void extInt_Config(EXTI_Config_t *extiConfig) // *extiConfig = &handlerEXTI
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b084      	sub	sp, #16
 8002e20:	af02      	add	r7, sp, #8
 8002e22:	6078      	str	r0, [r7, #4]
	//----------------------1) Configuramos el PINx como entrada ------------------------
	//Definimos la configuracion EXTI para el pin selecionado
	GPIO_PIN_Config(extiConfig->pGPIOHandler, GPIO_MODE_IN, GPIO_OTYPER_PUSHPULL, GPIO_OSPEEDR_MEDIUM, GPIO_PUPDR_NOTHING, AF0);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	6818      	ldr	r0, [r3, #0]
 8002e28:	2300      	movs	r3, #0
 8002e2a:	9301      	str	r3, [sp, #4]
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	9300      	str	r3, [sp, #0]
 8002e30:	2301      	movs	r3, #1
 8002e32:	2200      	movs	r2, #0
 8002e34:	2100      	movs	r1, #0
 8002e36:	f001 f891 	bl	8003f5c <GPIO_PIN_Config>

	//Cargamos la configuracion del PIN especifico
	GPIO_Config(extiConfig->pGPIOHandler);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	4618      	mov	r0, r3
 8002e40:	f001 f8ae 	bl	8003fa0 <GPIO_Config>
	//-----------2) Configuracion de las lineas de conexion del EXTI-----------------------
	//Registro: APB1ENR  En el pefirefico RCC
	//Registro: EXTICR 	 En el periferico SYSCFG

	//-------a) Activamos la señal de reloj al SYSCFG-------------
	RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 8002e44:	4b97      	ldr	r3, [pc, #604]	; (80030a4 <extInt_Config+0x288>)
 8002e46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e48:	4a96      	ldr	r2, [pc, #600]	; (80030a4 <extInt_Config+0x288>)
 8002e4a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002e4e:	6453      	str	r3, [r2, #68]	; 0x44

	//-------b)Asignamos el canal del EXTI que corresponde al pin a usa-------------
	//Deacuerdo al PIN_X y GPIO_X, seleccionamos la conexion del EXTIx
	switch(extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	781b      	ldrb	r3, [r3, #0]
 8002e56:	2b0f      	cmp	r3, #15
 8002e58:	f200 85cf 	bhi.w	80039fa <extInt_Config+0xbde>
 8002e5c:	a201      	add	r2, pc, #4	; (adr r2, 8002e64 <extInt_Config+0x48>)
 8002e5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e62:	bf00      	nop
 8002e64:	08002ea5 	.word	0x08002ea5
 8002e68:	08002f5b 	.word	0x08002f5b
 8002e6c:	08003011 	.word	0x08003011
 8002e70:	080030e7 	.word	0x080030e7
 8002e74:	0800319d 	.word	0x0800319d
 8002e78:	0800324b 	.word	0x0800324b
 8002e7c:	08003311 	.word	0x08003311
 8002e80:	080033b9 	.word	0x080033b9
 8002e84:	08003461 	.word	0x08003461
 8002e88:	08003509 	.word	0x08003509
 8002e8c:	080035cf 	.word	0x080035cf
 8002e90:	08003677 	.word	0x08003677
 8002e94:	0800371f 	.word	0x0800371f
 8002e98:	080037e5 	.word	0x080037e5
 8002e9c:	0800388d 	.word	0x0800388d
 8002ea0:	08003935 	.word	0x08003935
	//----------------Configuracion EXTI0-----------------
	case 0:
	{
		/*Limpiamos la posicion correspondiente a la configuracion del PIN_0
		en el EXTICR*/
		SYSCFG->EXTICR[0] &= ~(0xF<<SYSCFG_EXTICR1_EXTI0_Pos);
 8002ea4:	4b80      	ldr	r3, [pc, #512]	; (80030a8 <extInt_Config+0x28c>)
 8002ea6:	689b      	ldr	r3, [r3, #8]
 8002ea8:	4a7f      	ldr	r2, [pc, #508]	; (80030a8 <extInt_Config+0x28c>)
 8002eaa:	f023 030f 	bic.w	r3, r3, #15
 8002eae:	6093      	str	r3, [r2, #8]

		//Seleccionamos el valor a cargar deacuerdo al puerto establecido
		if(extiConfig->pGPIOHandler->pGPIOx == GPIOA)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	689b      	ldr	r3, [r3, #8]
 8002eb6:	4a7d      	ldr	r2, [pc, #500]	; (80030ac <extInt_Config+0x290>)
 8002eb8:	4293      	cmp	r3, r2
 8002eba:	d105      	bne.n	8002ec8 <extInt_Config+0xac>
		{
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI0_PA);
 8002ebc:	4b7a      	ldr	r3, [pc, #488]	; (80030a8 <extInt_Config+0x28c>)
 8002ebe:	4a7a      	ldr	r2, [pc, #488]	; (80030a8 <extInt_Config+0x28c>)
 8002ec0:	689b      	ldr	r3, [r3, #8]
 8002ec2:	6093      	str	r3, [r2, #8]
		}
		else
		{
			__NOP();
		}
		break;
 8002ec4:	f000 bd9b 	b.w	80039fe <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOB)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	689b      	ldr	r3, [r3, #8]
 8002ece:	4a78      	ldr	r2, [pc, #480]	; (80030b0 <extInt_Config+0x294>)
 8002ed0:	4293      	cmp	r3, r2
 8002ed2:	d107      	bne.n	8002ee4 <extInt_Config+0xc8>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI0_PB);
 8002ed4:	4b74      	ldr	r3, [pc, #464]	; (80030a8 <extInt_Config+0x28c>)
 8002ed6:	689b      	ldr	r3, [r3, #8]
 8002ed8:	4a73      	ldr	r2, [pc, #460]	; (80030a8 <extInt_Config+0x28c>)
 8002eda:	f043 0301 	orr.w	r3, r3, #1
 8002ede:	6093      	str	r3, [r2, #8]
		break;
 8002ee0:	f000 bd8d 	b.w	80039fe <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOC)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	689b      	ldr	r3, [r3, #8]
 8002eea:	4a72      	ldr	r2, [pc, #456]	; (80030b4 <extInt_Config+0x298>)
 8002eec:	4293      	cmp	r3, r2
 8002eee:	d107      	bne.n	8002f00 <extInt_Config+0xe4>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI0_PC);
 8002ef0:	4b6d      	ldr	r3, [pc, #436]	; (80030a8 <extInt_Config+0x28c>)
 8002ef2:	689b      	ldr	r3, [r3, #8]
 8002ef4:	4a6c      	ldr	r2, [pc, #432]	; (80030a8 <extInt_Config+0x28c>)
 8002ef6:	f043 0302 	orr.w	r3, r3, #2
 8002efa:	6093      	str	r3, [r2, #8]
		break;
 8002efc:	f000 bd7f 	b.w	80039fe <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOD)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	689b      	ldr	r3, [r3, #8]
 8002f06:	4a6c      	ldr	r2, [pc, #432]	; (80030b8 <extInt_Config+0x29c>)
 8002f08:	4293      	cmp	r3, r2
 8002f0a:	d107      	bne.n	8002f1c <extInt_Config+0x100>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI0_PD);
 8002f0c:	4b66      	ldr	r3, [pc, #408]	; (80030a8 <extInt_Config+0x28c>)
 8002f0e:	689b      	ldr	r3, [r3, #8]
 8002f10:	4a65      	ldr	r2, [pc, #404]	; (80030a8 <extInt_Config+0x28c>)
 8002f12:	f043 0303 	orr.w	r3, r3, #3
 8002f16:	6093      	str	r3, [r2, #8]
		break;
 8002f18:	f000 bd71 	b.w	80039fe <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOE)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	689b      	ldr	r3, [r3, #8]
 8002f22:	4a66      	ldr	r2, [pc, #408]	; (80030bc <extInt_Config+0x2a0>)
 8002f24:	4293      	cmp	r3, r2
 8002f26:	d107      	bne.n	8002f38 <extInt_Config+0x11c>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI0_PE);
 8002f28:	4b5f      	ldr	r3, [pc, #380]	; (80030a8 <extInt_Config+0x28c>)
 8002f2a:	689b      	ldr	r3, [r3, #8]
 8002f2c:	4a5e      	ldr	r2, [pc, #376]	; (80030a8 <extInt_Config+0x28c>)
 8002f2e:	f043 0304 	orr.w	r3, r3, #4
 8002f32:	6093      	str	r3, [r2, #8]
		break;
 8002f34:	f000 bd63 	b.w	80039fe <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOH)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	689b      	ldr	r3, [r3, #8]
 8002f3e:	4a60      	ldr	r2, [pc, #384]	; (80030c0 <extInt_Config+0x2a4>)
 8002f40:	4293      	cmp	r3, r2
 8002f42:	d107      	bne.n	8002f54 <extInt_Config+0x138>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI0_PH);
 8002f44:	4b58      	ldr	r3, [pc, #352]	; (80030a8 <extInt_Config+0x28c>)
 8002f46:	689b      	ldr	r3, [r3, #8]
 8002f48:	4a57      	ldr	r2, [pc, #348]	; (80030a8 <extInt_Config+0x28c>)
 8002f4a:	f043 0307 	orr.w	r3, r3, #7
 8002f4e:	6093      	str	r3, [r2, #8]
		break;
 8002f50:	f000 bd55 	b.w	80039fe <extInt_Config+0xbe2>
			__NOP();
 8002f54:	bf00      	nop
		break;
 8002f56:	f000 bd52 	b.w	80039fe <extInt_Config+0xbe2>
	//----------------Configuracion EXTI1-----------------
	case 1:
	{
		/*Limpiamos la posicion correspondiente a la configuracion del PIN_1
		en el EXTICR*/
		SYSCFG->EXTICR[0] &= ~(0xF<<SYSCFG_EXTICR1_EXTI1_Pos);
 8002f5a:	4b53      	ldr	r3, [pc, #332]	; (80030a8 <extInt_Config+0x28c>)
 8002f5c:	689b      	ldr	r3, [r3, #8]
 8002f5e:	4a52      	ldr	r2, [pc, #328]	; (80030a8 <extInt_Config+0x28c>)
 8002f60:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002f64:	6093      	str	r3, [r2, #8]

		//Seleccionamos el valor a cargar deacuerdo al puerto establecido
		if(extiConfig->pGPIOHandler->pGPIOx == GPIOA)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	689b      	ldr	r3, [r3, #8]
 8002f6c:	4a4f      	ldr	r2, [pc, #316]	; (80030ac <extInt_Config+0x290>)
 8002f6e:	4293      	cmp	r3, r2
 8002f70:	d105      	bne.n	8002f7e <extInt_Config+0x162>
		{
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI1_PA);
 8002f72:	4b4d      	ldr	r3, [pc, #308]	; (80030a8 <extInt_Config+0x28c>)
 8002f74:	4a4c      	ldr	r2, [pc, #304]	; (80030a8 <extInt_Config+0x28c>)
 8002f76:	689b      	ldr	r3, [r3, #8]
 8002f78:	6093      	str	r3, [r2, #8]
		}
		else
		{
			__NOP();
		}
		break;
 8002f7a:	f000 bd40 	b.w	80039fe <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOB)
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	689b      	ldr	r3, [r3, #8]
 8002f84:	4a4a      	ldr	r2, [pc, #296]	; (80030b0 <extInt_Config+0x294>)
 8002f86:	4293      	cmp	r3, r2
 8002f88:	d107      	bne.n	8002f9a <extInt_Config+0x17e>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI1_PB);
 8002f8a:	4b47      	ldr	r3, [pc, #284]	; (80030a8 <extInt_Config+0x28c>)
 8002f8c:	689b      	ldr	r3, [r3, #8]
 8002f8e:	4a46      	ldr	r2, [pc, #280]	; (80030a8 <extInt_Config+0x28c>)
 8002f90:	f043 0310 	orr.w	r3, r3, #16
 8002f94:	6093      	str	r3, [r2, #8]
		break;
 8002f96:	f000 bd32 	b.w	80039fe <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOC)
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	689b      	ldr	r3, [r3, #8]
 8002fa0:	4a44      	ldr	r2, [pc, #272]	; (80030b4 <extInt_Config+0x298>)
 8002fa2:	4293      	cmp	r3, r2
 8002fa4:	d107      	bne.n	8002fb6 <extInt_Config+0x19a>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI1_PC);
 8002fa6:	4b40      	ldr	r3, [pc, #256]	; (80030a8 <extInt_Config+0x28c>)
 8002fa8:	689b      	ldr	r3, [r3, #8]
 8002faa:	4a3f      	ldr	r2, [pc, #252]	; (80030a8 <extInt_Config+0x28c>)
 8002fac:	f043 0320 	orr.w	r3, r3, #32
 8002fb0:	6093      	str	r3, [r2, #8]
		break;
 8002fb2:	f000 bd24 	b.w	80039fe <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOD)
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	689b      	ldr	r3, [r3, #8]
 8002fbc:	4a3e      	ldr	r2, [pc, #248]	; (80030b8 <extInt_Config+0x29c>)
 8002fbe:	4293      	cmp	r3, r2
 8002fc0:	d107      	bne.n	8002fd2 <extInt_Config+0x1b6>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI1_PD);
 8002fc2:	4b39      	ldr	r3, [pc, #228]	; (80030a8 <extInt_Config+0x28c>)
 8002fc4:	689b      	ldr	r3, [r3, #8]
 8002fc6:	4a38      	ldr	r2, [pc, #224]	; (80030a8 <extInt_Config+0x28c>)
 8002fc8:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8002fcc:	6093      	str	r3, [r2, #8]
		break;
 8002fce:	f000 bd16 	b.w	80039fe <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOE)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	689b      	ldr	r3, [r3, #8]
 8002fd8:	4a38      	ldr	r2, [pc, #224]	; (80030bc <extInt_Config+0x2a0>)
 8002fda:	4293      	cmp	r3, r2
 8002fdc:	d107      	bne.n	8002fee <extInt_Config+0x1d2>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI1_PE);
 8002fde:	4b32      	ldr	r3, [pc, #200]	; (80030a8 <extInt_Config+0x28c>)
 8002fe0:	689b      	ldr	r3, [r3, #8]
 8002fe2:	4a31      	ldr	r2, [pc, #196]	; (80030a8 <extInt_Config+0x28c>)
 8002fe4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002fe8:	6093      	str	r3, [r2, #8]
		break;
 8002fea:	f000 bd08 	b.w	80039fe <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOH)
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	689b      	ldr	r3, [r3, #8]
 8002ff4:	4a32      	ldr	r2, [pc, #200]	; (80030c0 <extInt_Config+0x2a4>)
 8002ff6:	4293      	cmp	r3, r2
 8002ff8:	d107      	bne.n	800300a <extInt_Config+0x1ee>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI1_PH);
 8002ffa:	4b2b      	ldr	r3, [pc, #172]	; (80030a8 <extInt_Config+0x28c>)
 8002ffc:	689b      	ldr	r3, [r3, #8]
 8002ffe:	4a2a      	ldr	r2, [pc, #168]	; (80030a8 <extInt_Config+0x28c>)
 8003000:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8003004:	6093      	str	r3, [r2, #8]
		break;
 8003006:	f000 bcfa 	b.w	80039fe <extInt_Config+0xbe2>
			__NOP();
 800300a:	bf00      	nop
		break;
 800300c:	f000 bcf7 	b.w	80039fe <extInt_Config+0xbe2>
	//----------------Configuracion EXTI2-----------------
	case 2:
	{
		/*Limpiamos la posicion correspondiente a la configuracion del PIN_2
		en el EXTICR*/
		SYSCFG->EXTICR[0] &= ~(0xF<<SYSCFG_EXTICR1_EXTI2_Pos);
 8003010:	4b25      	ldr	r3, [pc, #148]	; (80030a8 <extInt_Config+0x28c>)
 8003012:	689b      	ldr	r3, [r3, #8]
 8003014:	4a24      	ldr	r2, [pc, #144]	; (80030a8 <extInt_Config+0x28c>)
 8003016:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800301a:	6093      	str	r3, [r2, #8]

		//Seleccionamos el valor a cargar deacuerdo al puerto establecido
		if(extiConfig->pGPIOHandler->pGPIOx == GPIOA)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	689b      	ldr	r3, [r3, #8]
 8003022:	4a22      	ldr	r2, [pc, #136]	; (80030ac <extInt_Config+0x290>)
 8003024:	4293      	cmp	r3, r2
 8003026:	d105      	bne.n	8003034 <extInt_Config+0x218>
		{
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI2_PA);
 8003028:	4b1f      	ldr	r3, [pc, #124]	; (80030a8 <extInt_Config+0x28c>)
 800302a:	4a1f      	ldr	r2, [pc, #124]	; (80030a8 <extInt_Config+0x28c>)
 800302c:	689b      	ldr	r3, [r3, #8]
 800302e:	6093      	str	r3, [r2, #8]
		}
		else
		{
			__NOP();
		}
		break;
 8003030:	f000 bce5 	b.w	80039fe <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOB)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	689b      	ldr	r3, [r3, #8]
 800303a:	4a1d      	ldr	r2, [pc, #116]	; (80030b0 <extInt_Config+0x294>)
 800303c:	4293      	cmp	r3, r2
 800303e:	d107      	bne.n	8003050 <extInt_Config+0x234>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI2_PB);
 8003040:	4b19      	ldr	r3, [pc, #100]	; (80030a8 <extInt_Config+0x28c>)
 8003042:	689b      	ldr	r3, [r3, #8]
 8003044:	4a18      	ldr	r2, [pc, #96]	; (80030a8 <extInt_Config+0x28c>)
 8003046:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800304a:	6093      	str	r3, [r2, #8]
		break;
 800304c:	f000 bcd7 	b.w	80039fe <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOC)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	689b      	ldr	r3, [r3, #8]
 8003056:	4a17      	ldr	r2, [pc, #92]	; (80030b4 <extInt_Config+0x298>)
 8003058:	4293      	cmp	r3, r2
 800305a:	d107      	bne.n	800306c <extInt_Config+0x250>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI2_PC);
 800305c:	4b12      	ldr	r3, [pc, #72]	; (80030a8 <extInt_Config+0x28c>)
 800305e:	689b      	ldr	r3, [r3, #8]
 8003060:	4a11      	ldr	r2, [pc, #68]	; (80030a8 <extInt_Config+0x28c>)
 8003062:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003066:	6093      	str	r3, [r2, #8]
		break;
 8003068:	f000 bcc9 	b.w	80039fe <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOD)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	689b      	ldr	r3, [r3, #8]
 8003072:	4a11      	ldr	r2, [pc, #68]	; (80030b8 <extInt_Config+0x29c>)
 8003074:	4293      	cmp	r3, r2
 8003076:	d107      	bne.n	8003088 <extInt_Config+0x26c>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI2_PD);
 8003078:	4b0b      	ldr	r3, [pc, #44]	; (80030a8 <extInt_Config+0x28c>)
 800307a:	689b      	ldr	r3, [r3, #8]
 800307c:	4a0a      	ldr	r2, [pc, #40]	; (80030a8 <extInt_Config+0x28c>)
 800307e:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8003082:	6093      	str	r3, [r2, #8]
		break;
 8003084:	f000 bcbb 	b.w	80039fe <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOE)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	689b      	ldr	r3, [r3, #8]
 800308e:	4a0b      	ldr	r2, [pc, #44]	; (80030bc <extInt_Config+0x2a0>)
 8003090:	4293      	cmp	r3, r2
 8003092:	d117      	bne.n	80030c4 <extInt_Config+0x2a8>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI2_PE);
 8003094:	4b04      	ldr	r3, [pc, #16]	; (80030a8 <extInt_Config+0x28c>)
 8003096:	689b      	ldr	r3, [r3, #8]
 8003098:	4a03      	ldr	r2, [pc, #12]	; (80030a8 <extInt_Config+0x28c>)
 800309a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800309e:	6093      	str	r3, [r2, #8]
		break;
 80030a0:	f000 bcad 	b.w	80039fe <extInt_Config+0xbe2>
 80030a4:	40023800 	.word	0x40023800
 80030a8:	40013800 	.word	0x40013800
 80030ac:	40020000 	.word	0x40020000
 80030b0:	40020400 	.word	0x40020400
 80030b4:	40020800 	.word	0x40020800
 80030b8:	40020c00 	.word	0x40020c00
 80030bc:	40021000 	.word	0x40021000
 80030c0:	40021c00 	.word	0x40021c00
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOH)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	689b      	ldr	r3, [r3, #8]
 80030ca:	4a8a      	ldr	r2, [pc, #552]	; (80032f4 <extInt_Config+0x4d8>)
 80030cc:	4293      	cmp	r3, r2
 80030ce:	d107      	bne.n	80030e0 <extInt_Config+0x2c4>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI2_PH);
 80030d0:	4b89      	ldr	r3, [pc, #548]	; (80032f8 <extInt_Config+0x4dc>)
 80030d2:	689b      	ldr	r3, [r3, #8]
 80030d4:	4a88      	ldr	r2, [pc, #544]	; (80032f8 <extInt_Config+0x4dc>)
 80030d6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80030da:	6093      	str	r3, [r2, #8]
		break;
 80030dc:	f000 bc8f 	b.w	80039fe <extInt_Config+0xbe2>
			__NOP();
 80030e0:	bf00      	nop
		break;
 80030e2:	f000 bc8c 	b.w	80039fe <extInt_Config+0xbe2>
	//----------------Configuracion EXTI3-----------------
	case 3:
	{
		/*Limpiamos la posicion correspondiente a la configuracion del PIN_3
		en el EXTICR*/
		SYSCFG->EXTICR[0] &= ~(0xF<<SYSCFG_EXTICR1_EXTI3_Pos);
 80030e6:	4b84      	ldr	r3, [pc, #528]	; (80032f8 <extInt_Config+0x4dc>)
 80030e8:	689b      	ldr	r3, [r3, #8]
 80030ea:	4a83      	ldr	r2, [pc, #524]	; (80032f8 <extInt_Config+0x4dc>)
 80030ec:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80030f0:	6093      	str	r3, [r2, #8]

		//Seleccionamos el valor a cargar deacuerdo al puerto establecido
		if(extiConfig->pGPIOHandler->pGPIOx == GPIOA)
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	689b      	ldr	r3, [r3, #8]
 80030f8:	4a80      	ldr	r2, [pc, #512]	; (80032fc <extInt_Config+0x4e0>)
 80030fa:	4293      	cmp	r3, r2
 80030fc:	d105      	bne.n	800310a <extInt_Config+0x2ee>
		{
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI3_PA);
 80030fe:	4b7e      	ldr	r3, [pc, #504]	; (80032f8 <extInt_Config+0x4dc>)
 8003100:	4a7d      	ldr	r2, [pc, #500]	; (80032f8 <extInt_Config+0x4dc>)
 8003102:	689b      	ldr	r3, [r3, #8]
 8003104:	6093      	str	r3, [r2, #8]
		}
		else
		{
			__NOP();
		}
		break;
 8003106:	f000 bc7a 	b.w	80039fe <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOB)
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	689b      	ldr	r3, [r3, #8]
 8003110:	4a7b      	ldr	r2, [pc, #492]	; (8003300 <extInt_Config+0x4e4>)
 8003112:	4293      	cmp	r3, r2
 8003114:	d107      	bne.n	8003126 <extInt_Config+0x30a>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI3_PB);
 8003116:	4b78      	ldr	r3, [pc, #480]	; (80032f8 <extInt_Config+0x4dc>)
 8003118:	689b      	ldr	r3, [r3, #8]
 800311a:	4a77      	ldr	r2, [pc, #476]	; (80032f8 <extInt_Config+0x4dc>)
 800311c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003120:	6093      	str	r3, [r2, #8]
		break;
 8003122:	f000 bc6c 	b.w	80039fe <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOC)
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	689b      	ldr	r3, [r3, #8]
 800312c:	4a75      	ldr	r2, [pc, #468]	; (8003304 <extInt_Config+0x4e8>)
 800312e:	4293      	cmp	r3, r2
 8003130:	d107      	bne.n	8003142 <extInt_Config+0x326>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI3_PC);
 8003132:	4b71      	ldr	r3, [pc, #452]	; (80032f8 <extInt_Config+0x4dc>)
 8003134:	689b      	ldr	r3, [r3, #8]
 8003136:	4a70      	ldr	r2, [pc, #448]	; (80032f8 <extInt_Config+0x4dc>)
 8003138:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800313c:	6093      	str	r3, [r2, #8]
		break;
 800313e:	f000 bc5e 	b.w	80039fe <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOD)
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	689b      	ldr	r3, [r3, #8]
 8003148:	4a6f      	ldr	r2, [pc, #444]	; (8003308 <extInt_Config+0x4ec>)
 800314a:	4293      	cmp	r3, r2
 800314c:	d107      	bne.n	800315e <extInt_Config+0x342>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI3_PD);
 800314e:	4b6a      	ldr	r3, [pc, #424]	; (80032f8 <extInt_Config+0x4dc>)
 8003150:	689b      	ldr	r3, [r3, #8]
 8003152:	4a69      	ldr	r2, [pc, #420]	; (80032f8 <extInt_Config+0x4dc>)
 8003154:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 8003158:	6093      	str	r3, [r2, #8]
		break;
 800315a:	f000 bc50 	b.w	80039fe <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOE)
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	689b      	ldr	r3, [r3, #8]
 8003164:	4a69      	ldr	r2, [pc, #420]	; (800330c <extInt_Config+0x4f0>)
 8003166:	4293      	cmp	r3, r2
 8003168:	d107      	bne.n	800317a <extInt_Config+0x35e>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI3_PE);
 800316a:	4b63      	ldr	r3, [pc, #396]	; (80032f8 <extInt_Config+0x4dc>)
 800316c:	689b      	ldr	r3, [r3, #8]
 800316e:	4a62      	ldr	r2, [pc, #392]	; (80032f8 <extInt_Config+0x4dc>)
 8003170:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003174:	6093      	str	r3, [r2, #8]
		break;
 8003176:	f000 bc42 	b.w	80039fe <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOH)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	689b      	ldr	r3, [r3, #8]
 8003180:	4a5c      	ldr	r2, [pc, #368]	; (80032f4 <extInt_Config+0x4d8>)
 8003182:	4293      	cmp	r3, r2
 8003184:	d107      	bne.n	8003196 <extInt_Config+0x37a>
			SYSCFG->EXTICR[0] |= (SYSCFG_EXTICR1_EXTI3_PH);
 8003186:	4b5c      	ldr	r3, [pc, #368]	; (80032f8 <extInt_Config+0x4dc>)
 8003188:	689b      	ldr	r3, [r3, #8]
 800318a:	4a5b      	ldr	r2, [pc, #364]	; (80032f8 <extInt_Config+0x4dc>)
 800318c:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 8003190:	6093      	str	r3, [r2, #8]
		break;
 8003192:	f000 bc34 	b.w	80039fe <extInt_Config+0xbe2>
			__NOP();
 8003196:	bf00      	nop
		break;
 8003198:	f000 bc31 	b.w	80039fe <extInt_Config+0xbe2>
	//----------------Configuracion EXTI4-----------------
	case 4:
	{
		/*Limpiamos la posicion correspondiente a la configuracion del PIN_4
		en el EXTICR*/
		SYSCFG->EXTICR[1] &= ~(0xF<<SYSCFG_EXTICR2_EXTI4_Pos);
 800319c:	4b56      	ldr	r3, [pc, #344]	; (80032f8 <extInt_Config+0x4dc>)
 800319e:	68db      	ldr	r3, [r3, #12]
 80031a0:	4a55      	ldr	r2, [pc, #340]	; (80032f8 <extInt_Config+0x4dc>)
 80031a2:	f023 030f 	bic.w	r3, r3, #15
 80031a6:	60d3      	str	r3, [r2, #12]

		//Seleccionamos el valor a cargar deacuerdo al puerto establecido
		if(extiConfig->pGPIOHandler->pGPIOx == GPIOA)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	689b      	ldr	r3, [r3, #8]
 80031ae:	4a53      	ldr	r2, [pc, #332]	; (80032fc <extInt_Config+0x4e0>)
 80031b0:	4293      	cmp	r3, r2
 80031b2:	d105      	bne.n	80031c0 <extInt_Config+0x3a4>
		{
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI4_PA);
 80031b4:	4b50      	ldr	r3, [pc, #320]	; (80032f8 <extInt_Config+0x4dc>)
 80031b6:	4a50      	ldr	r2, [pc, #320]	; (80032f8 <extInt_Config+0x4dc>)
 80031b8:	68db      	ldr	r3, [r3, #12]
 80031ba:	60d3      	str	r3, [r2, #12]
		}
		else
		{
			__NOP();
		}
		break;
 80031bc:	f000 bc1f 	b.w	80039fe <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOB)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	689b      	ldr	r3, [r3, #8]
 80031c6:	4a4e      	ldr	r2, [pc, #312]	; (8003300 <extInt_Config+0x4e4>)
 80031c8:	4293      	cmp	r3, r2
 80031ca:	d107      	bne.n	80031dc <extInt_Config+0x3c0>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI4_PB);
 80031cc:	4b4a      	ldr	r3, [pc, #296]	; (80032f8 <extInt_Config+0x4dc>)
 80031ce:	68db      	ldr	r3, [r3, #12]
 80031d0:	4a49      	ldr	r2, [pc, #292]	; (80032f8 <extInt_Config+0x4dc>)
 80031d2:	f043 0301 	orr.w	r3, r3, #1
 80031d6:	60d3      	str	r3, [r2, #12]
		break;
 80031d8:	f000 bc11 	b.w	80039fe <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOC)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	689b      	ldr	r3, [r3, #8]
 80031e2:	4a48      	ldr	r2, [pc, #288]	; (8003304 <extInt_Config+0x4e8>)
 80031e4:	4293      	cmp	r3, r2
 80031e6:	d107      	bne.n	80031f8 <extInt_Config+0x3dc>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI4_PC);
 80031e8:	4b43      	ldr	r3, [pc, #268]	; (80032f8 <extInt_Config+0x4dc>)
 80031ea:	68db      	ldr	r3, [r3, #12]
 80031ec:	4a42      	ldr	r2, [pc, #264]	; (80032f8 <extInt_Config+0x4dc>)
 80031ee:	f043 0302 	orr.w	r3, r3, #2
 80031f2:	60d3      	str	r3, [r2, #12]
		break;
 80031f4:	f000 bc03 	b.w	80039fe <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOD)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	689b      	ldr	r3, [r3, #8]
 80031fe:	4a42      	ldr	r2, [pc, #264]	; (8003308 <extInt_Config+0x4ec>)
 8003200:	4293      	cmp	r3, r2
 8003202:	d106      	bne.n	8003212 <extInt_Config+0x3f6>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI4_PD);
 8003204:	4b3c      	ldr	r3, [pc, #240]	; (80032f8 <extInt_Config+0x4dc>)
 8003206:	68db      	ldr	r3, [r3, #12]
 8003208:	4a3b      	ldr	r2, [pc, #236]	; (80032f8 <extInt_Config+0x4dc>)
 800320a:	f043 0303 	orr.w	r3, r3, #3
 800320e:	60d3      	str	r3, [r2, #12]
		break;
 8003210:	e3f5      	b.n	80039fe <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOE)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	689b      	ldr	r3, [r3, #8]
 8003218:	4a3c      	ldr	r2, [pc, #240]	; (800330c <extInt_Config+0x4f0>)
 800321a:	4293      	cmp	r3, r2
 800321c:	d106      	bne.n	800322c <extInt_Config+0x410>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI4_PE);
 800321e:	4b36      	ldr	r3, [pc, #216]	; (80032f8 <extInt_Config+0x4dc>)
 8003220:	68db      	ldr	r3, [r3, #12]
 8003222:	4a35      	ldr	r2, [pc, #212]	; (80032f8 <extInt_Config+0x4dc>)
 8003224:	f043 0304 	orr.w	r3, r3, #4
 8003228:	60d3      	str	r3, [r2, #12]
		break;
 800322a:	e3e8      	b.n	80039fe <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOH)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	689b      	ldr	r3, [r3, #8]
 8003232:	4a30      	ldr	r2, [pc, #192]	; (80032f4 <extInt_Config+0x4d8>)
 8003234:	4293      	cmp	r3, r2
 8003236:	d106      	bne.n	8003246 <extInt_Config+0x42a>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI4_PH);
 8003238:	4b2f      	ldr	r3, [pc, #188]	; (80032f8 <extInt_Config+0x4dc>)
 800323a:	68db      	ldr	r3, [r3, #12]
 800323c:	4a2e      	ldr	r2, [pc, #184]	; (80032f8 <extInt_Config+0x4dc>)
 800323e:	f043 0307 	orr.w	r3, r3, #7
 8003242:	60d3      	str	r3, [r2, #12]
		break;
 8003244:	e3db      	b.n	80039fe <extInt_Config+0xbe2>
			__NOP();
 8003246:	bf00      	nop
		break;
 8003248:	e3d9      	b.n	80039fe <extInt_Config+0xbe2>
	//----------------Configuracion EXTI5-----------------
	case 5:
	{
		/*Limpiamos la posicion correspondiente a la configuracion del PIN_5
		en el EXTICR*/
		SYSCFG->EXTICR[1] &= ~(0xF<<SYSCFG_EXTICR2_EXTI5_Pos);
 800324a:	4b2b      	ldr	r3, [pc, #172]	; (80032f8 <extInt_Config+0x4dc>)
 800324c:	68db      	ldr	r3, [r3, #12]
 800324e:	4a2a      	ldr	r2, [pc, #168]	; (80032f8 <extInt_Config+0x4dc>)
 8003250:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003254:	60d3      	str	r3, [r2, #12]

		//Seleccionamos el valor a cargar deacuerdo al puerto establecido
		if(extiConfig->pGPIOHandler->pGPIOx == GPIOA)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	689b      	ldr	r3, [r3, #8]
 800325c:	4a27      	ldr	r2, [pc, #156]	; (80032fc <extInt_Config+0x4e0>)
 800325e:	4293      	cmp	r3, r2
 8003260:	d104      	bne.n	800326c <extInt_Config+0x450>
		{
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI5_PA);
 8003262:	4b25      	ldr	r3, [pc, #148]	; (80032f8 <extInt_Config+0x4dc>)
 8003264:	4a24      	ldr	r2, [pc, #144]	; (80032f8 <extInt_Config+0x4dc>)
 8003266:	68db      	ldr	r3, [r3, #12]
 8003268:	60d3      	str	r3, [r2, #12]
		}
		else
		{
			__NOP();
		}
		break;
 800326a:	e3c8      	b.n	80039fe <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOB)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	689b      	ldr	r3, [r3, #8]
 8003272:	4a23      	ldr	r2, [pc, #140]	; (8003300 <extInt_Config+0x4e4>)
 8003274:	4293      	cmp	r3, r2
 8003276:	d106      	bne.n	8003286 <extInt_Config+0x46a>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI5_PB);
 8003278:	4b1f      	ldr	r3, [pc, #124]	; (80032f8 <extInt_Config+0x4dc>)
 800327a:	68db      	ldr	r3, [r3, #12]
 800327c:	4a1e      	ldr	r2, [pc, #120]	; (80032f8 <extInt_Config+0x4dc>)
 800327e:	f043 0310 	orr.w	r3, r3, #16
 8003282:	60d3      	str	r3, [r2, #12]
		break;
 8003284:	e3bb      	b.n	80039fe <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOC)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	689b      	ldr	r3, [r3, #8]
 800328c:	4a1d      	ldr	r2, [pc, #116]	; (8003304 <extInt_Config+0x4e8>)
 800328e:	4293      	cmp	r3, r2
 8003290:	d106      	bne.n	80032a0 <extInt_Config+0x484>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI5_PC);
 8003292:	4b19      	ldr	r3, [pc, #100]	; (80032f8 <extInt_Config+0x4dc>)
 8003294:	68db      	ldr	r3, [r3, #12]
 8003296:	4a18      	ldr	r2, [pc, #96]	; (80032f8 <extInt_Config+0x4dc>)
 8003298:	f043 0320 	orr.w	r3, r3, #32
 800329c:	60d3      	str	r3, [r2, #12]
		break;
 800329e:	e3ae      	b.n	80039fe <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOD)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	689b      	ldr	r3, [r3, #8]
 80032a6:	4a18      	ldr	r2, [pc, #96]	; (8003308 <extInt_Config+0x4ec>)
 80032a8:	4293      	cmp	r3, r2
 80032aa:	d106      	bne.n	80032ba <extInt_Config+0x49e>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI5_PD);
 80032ac:	4b12      	ldr	r3, [pc, #72]	; (80032f8 <extInt_Config+0x4dc>)
 80032ae:	68db      	ldr	r3, [r3, #12]
 80032b0:	4a11      	ldr	r2, [pc, #68]	; (80032f8 <extInt_Config+0x4dc>)
 80032b2:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 80032b6:	60d3      	str	r3, [r2, #12]
		break;
 80032b8:	e3a1      	b.n	80039fe <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOE)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	689b      	ldr	r3, [r3, #8]
 80032c0:	4a12      	ldr	r2, [pc, #72]	; (800330c <extInt_Config+0x4f0>)
 80032c2:	4293      	cmp	r3, r2
 80032c4:	d106      	bne.n	80032d4 <extInt_Config+0x4b8>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI5_PE);
 80032c6:	4b0c      	ldr	r3, [pc, #48]	; (80032f8 <extInt_Config+0x4dc>)
 80032c8:	68db      	ldr	r3, [r3, #12]
 80032ca:	4a0b      	ldr	r2, [pc, #44]	; (80032f8 <extInt_Config+0x4dc>)
 80032cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80032d0:	60d3      	str	r3, [r2, #12]
		break;
 80032d2:	e394      	b.n	80039fe <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOH)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	689b      	ldr	r3, [r3, #8]
 80032da:	4a06      	ldr	r2, [pc, #24]	; (80032f4 <extInt_Config+0x4d8>)
 80032dc:	4293      	cmp	r3, r2
 80032de:	d106      	bne.n	80032ee <extInt_Config+0x4d2>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI5_PH);
 80032e0:	4b05      	ldr	r3, [pc, #20]	; (80032f8 <extInt_Config+0x4dc>)
 80032e2:	68db      	ldr	r3, [r3, #12]
 80032e4:	4a04      	ldr	r2, [pc, #16]	; (80032f8 <extInt_Config+0x4dc>)
 80032e6:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 80032ea:	60d3      	str	r3, [r2, #12]
		break;
 80032ec:	e387      	b.n	80039fe <extInt_Config+0xbe2>
			__NOP();
 80032ee:	bf00      	nop
		break;
 80032f0:	e385      	b.n	80039fe <extInt_Config+0xbe2>
 80032f2:	bf00      	nop
 80032f4:	40021c00 	.word	0x40021c00
 80032f8:	40013800 	.word	0x40013800
 80032fc:	40020000 	.word	0x40020000
 8003300:	40020400 	.word	0x40020400
 8003304:	40020800 	.word	0x40020800
 8003308:	40020c00 	.word	0x40020c00
 800330c:	40021000 	.word	0x40021000
	//----------------Configuracion EXTI6-----------------
	case 6:
	{
		/*Limpiamos la posicion correspondiente a la configuracion del PIN_6
		en el EXTICR*/
		SYSCFG->EXTICR[1] &= ~(0xF<<SYSCFG_EXTICR2_EXTI6_Pos);
 8003310:	4b86      	ldr	r3, [pc, #536]	; (800352c <extInt_Config+0x710>)
 8003312:	68db      	ldr	r3, [r3, #12]
 8003314:	4a85      	ldr	r2, [pc, #532]	; (800352c <extInt_Config+0x710>)
 8003316:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800331a:	60d3      	str	r3, [r2, #12]

		//Seleccionamos el valor a cargar deacuerdo al puerto establecido
		if(extiConfig->pGPIOHandler->pGPIOx == GPIOA)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	689b      	ldr	r3, [r3, #8]
 8003322:	4a83      	ldr	r2, [pc, #524]	; (8003530 <extInt_Config+0x714>)
 8003324:	4293      	cmp	r3, r2
 8003326:	d104      	bne.n	8003332 <extInt_Config+0x516>
		{
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI6_PA);
 8003328:	4b80      	ldr	r3, [pc, #512]	; (800352c <extInt_Config+0x710>)
 800332a:	4a80      	ldr	r2, [pc, #512]	; (800352c <extInt_Config+0x710>)
 800332c:	68db      	ldr	r3, [r3, #12]
 800332e:	60d3      	str	r3, [r2, #12]
		}
		else
		{
			__NOP();
		}
		break;
 8003330:	e365      	b.n	80039fe <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOB)
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	689b      	ldr	r3, [r3, #8]
 8003338:	4a7e      	ldr	r2, [pc, #504]	; (8003534 <extInt_Config+0x718>)
 800333a:	4293      	cmp	r3, r2
 800333c:	d106      	bne.n	800334c <extInt_Config+0x530>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI6_PB);
 800333e:	4b7b      	ldr	r3, [pc, #492]	; (800352c <extInt_Config+0x710>)
 8003340:	68db      	ldr	r3, [r3, #12]
 8003342:	4a7a      	ldr	r2, [pc, #488]	; (800352c <extInt_Config+0x710>)
 8003344:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003348:	60d3      	str	r3, [r2, #12]
		break;
 800334a:	e358      	b.n	80039fe <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOC)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	689b      	ldr	r3, [r3, #8]
 8003352:	4a79      	ldr	r2, [pc, #484]	; (8003538 <extInt_Config+0x71c>)
 8003354:	4293      	cmp	r3, r2
 8003356:	d106      	bne.n	8003366 <extInt_Config+0x54a>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI6_PC);
 8003358:	4b74      	ldr	r3, [pc, #464]	; (800352c <extInt_Config+0x710>)
 800335a:	68db      	ldr	r3, [r3, #12]
 800335c:	4a73      	ldr	r2, [pc, #460]	; (800352c <extInt_Config+0x710>)
 800335e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003362:	60d3      	str	r3, [r2, #12]
		break;
 8003364:	e34b      	b.n	80039fe <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOD)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	689b      	ldr	r3, [r3, #8]
 800336c:	4a73      	ldr	r2, [pc, #460]	; (800353c <extInt_Config+0x720>)
 800336e:	4293      	cmp	r3, r2
 8003370:	d106      	bne.n	8003380 <extInt_Config+0x564>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI6_PD);
 8003372:	4b6e      	ldr	r3, [pc, #440]	; (800352c <extInt_Config+0x710>)
 8003374:	68db      	ldr	r3, [r3, #12]
 8003376:	4a6d      	ldr	r2, [pc, #436]	; (800352c <extInt_Config+0x710>)
 8003378:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800337c:	60d3      	str	r3, [r2, #12]
		break;
 800337e:	e33e      	b.n	80039fe <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOE)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	689b      	ldr	r3, [r3, #8]
 8003386:	4a6e      	ldr	r2, [pc, #440]	; (8003540 <extInt_Config+0x724>)
 8003388:	4293      	cmp	r3, r2
 800338a:	d106      	bne.n	800339a <extInt_Config+0x57e>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI6_PE);
 800338c:	4b67      	ldr	r3, [pc, #412]	; (800352c <extInt_Config+0x710>)
 800338e:	68db      	ldr	r3, [r3, #12]
 8003390:	4a66      	ldr	r2, [pc, #408]	; (800352c <extInt_Config+0x710>)
 8003392:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003396:	60d3      	str	r3, [r2, #12]
		break;
 8003398:	e331      	b.n	80039fe <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOH)
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	689b      	ldr	r3, [r3, #8]
 80033a0:	4a68      	ldr	r2, [pc, #416]	; (8003544 <extInt_Config+0x728>)
 80033a2:	4293      	cmp	r3, r2
 80033a4:	d106      	bne.n	80033b4 <extInt_Config+0x598>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI6_PH);
 80033a6:	4b61      	ldr	r3, [pc, #388]	; (800352c <extInt_Config+0x710>)
 80033a8:	68db      	ldr	r3, [r3, #12]
 80033aa:	4a60      	ldr	r2, [pc, #384]	; (800352c <extInt_Config+0x710>)
 80033ac:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80033b0:	60d3      	str	r3, [r2, #12]
		break;
 80033b2:	e324      	b.n	80039fe <extInt_Config+0xbe2>
			__NOP();
 80033b4:	bf00      	nop
		break;
 80033b6:	e322      	b.n	80039fe <extInt_Config+0xbe2>
	//----------------Configuracion EXTI7-----------------
	case 7:
	{
		/*Limpiamos la posicion correspondiente a la configuracion del PIN_7
		en el EXTICR*/
		SYSCFG->EXTICR[1] &= ~(0xF<<SYSCFG_EXTICR2_EXTI7_Pos);
 80033b8:	4b5c      	ldr	r3, [pc, #368]	; (800352c <extInt_Config+0x710>)
 80033ba:	68db      	ldr	r3, [r3, #12]
 80033bc:	4a5b      	ldr	r2, [pc, #364]	; (800352c <extInt_Config+0x710>)
 80033be:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80033c2:	60d3      	str	r3, [r2, #12]

		//Seleccionamos el valor a cargar deacuerdo al puerto establecido
		if(extiConfig->pGPIOHandler->pGPIOx == GPIOA)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	689b      	ldr	r3, [r3, #8]
 80033ca:	4a59      	ldr	r2, [pc, #356]	; (8003530 <extInt_Config+0x714>)
 80033cc:	4293      	cmp	r3, r2
 80033ce:	d104      	bne.n	80033da <extInt_Config+0x5be>
		{
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI7_PA);
 80033d0:	4b56      	ldr	r3, [pc, #344]	; (800352c <extInt_Config+0x710>)
 80033d2:	4a56      	ldr	r2, [pc, #344]	; (800352c <extInt_Config+0x710>)
 80033d4:	68db      	ldr	r3, [r3, #12]
 80033d6:	60d3      	str	r3, [r2, #12]
		}
		else
		{
			__NOP();
		}
		break;
 80033d8:	e311      	b.n	80039fe <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOB)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	689b      	ldr	r3, [r3, #8]
 80033e0:	4a54      	ldr	r2, [pc, #336]	; (8003534 <extInt_Config+0x718>)
 80033e2:	4293      	cmp	r3, r2
 80033e4:	d106      	bne.n	80033f4 <extInt_Config+0x5d8>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI7_PB);
 80033e6:	4b51      	ldr	r3, [pc, #324]	; (800352c <extInt_Config+0x710>)
 80033e8:	68db      	ldr	r3, [r3, #12]
 80033ea:	4a50      	ldr	r2, [pc, #320]	; (800352c <extInt_Config+0x710>)
 80033ec:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80033f0:	60d3      	str	r3, [r2, #12]
		break;
 80033f2:	e304      	b.n	80039fe <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOC)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	689b      	ldr	r3, [r3, #8]
 80033fa:	4a4f      	ldr	r2, [pc, #316]	; (8003538 <extInt_Config+0x71c>)
 80033fc:	4293      	cmp	r3, r2
 80033fe:	d106      	bne.n	800340e <extInt_Config+0x5f2>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI7_PC);
 8003400:	4b4a      	ldr	r3, [pc, #296]	; (800352c <extInt_Config+0x710>)
 8003402:	68db      	ldr	r3, [r3, #12]
 8003404:	4a49      	ldr	r2, [pc, #292]	; (800352c <extInt_Config+0x710>)
 8003406:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800340a:	60d3      	str	r3, [r2, #12]
		break;
 800340c:	e2f7      	b.n	80039fe <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOD)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	689b      	ldr	r3, [r3, #8]
 8003414:	4a49      	ldr	r2, [pc, #292]	; (800353c <extInt_Config+0x720>)
 8003416:	4293      	cmp	r3, r2
 8003418:	d106      	bne.n	8003428 <extInt_Config+0x60c>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI7_PD);
 800341a:	4b44      	ldr	r3, [pc, #272]	; (800352c <extInt_Config+0x710>)
 800341c:	68db      	ldr	r3, [r3, #12]
 800341e:	4a43      	ldr	r2, [pc, #268]	; (800352c <extInt_Config+0x710>)
 8003420:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 8003424:	60d3      	str	r3, [r2, #12]
		break;
 8003426:	e2ea      	b.n	80039fe <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOE)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	689b      	ldr	r3, [r3, #8]
 800342e:	4a44      	ldr	r2, [pc, #272]	; (8003540 <extInt_Config+0x724>)
 8003430:	4293      	cmp	r3, r2
 8003432:	d106      	bne.n	8003442 <extInt_Config+0x626>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI7_PE);
 8003434:	4b3d      	ldr	r3, [pc, #244]	; (800352c <extInt_Config+0x710>)
 8003436:	68db      	ldr	r3, [r3, #12]
 8003438:	4a3c      	ldr	r2, [pc, #240]	; (800352c <extInt_Config+0x710>)
 800343a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800343e:	60d3      	str	r3, [r2, #12]
		break;
 8003440:	e2dd      	b.n	80039fe <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOH)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	689b      	ldr	r3, [r3, #8]
 8003448:	4a3e      	ldr	r2, [pc, #248]	; (8003544 <extInt_Config+0x728>)
 800344a:	4293      	cmp	r3, r2
 800344c:	d106      	bne.n	800345c <extInt_Config+0x640>
			SYSCFG->EXTICR[1] |= (SYSCFG_EXTICR2_EXTI7_PH);
 800344e:	4b37      	ldr	r3, [pc, #220]	; (800352c <extInt_Config+0x710>)
 8003450:	68db      	ldr	r3, [r3, #12]
 8003452:	4a36      	ldr	r2, [pc, #216]	; (800352c <extInt_Config+0x710>)
 8003454:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 8003458:	60d3      	str	r3, [r2, #12]
		break;
 800345a:	e2d0      	b.n	80039fe <extInt_Config+0xbe2>
			__NOP();
 800345c:	bf00      	nop
		break;
 800345e:	e2ce      	b.n	80039fe <extInt_Config+0xbe2>
	//----------------Configuracion EXTI8-----------------
	case 8:
	{
		/*Limpiamos la posicion correspondiente a la configuracion del PIN_8
		en el EXTICR*/
		SYSCFG->EXTICR[2] &= ~(0xF<<SYSCFG_EXTICR3_EXTI8_Pos);
 8003460:	4b32      	ldr	r3, [pc, #200]	; (800352c <extInt_Config+0x710>)
 8003462:	691b      	ldr	r3, [r3, #16]
 8003464:	4a31      	ldr	r2, [pc, #196]	; (800352c <extInt_Config+0x710>)
 8003466:	f023 030f 	bic.w	r3, r3, #15
 800346a:	6113      	str	r3, [r2, #16]

		//Seleccionamos el valor a cargar deacuerdo al puerto establecido
		if(extiConfig->pGPIOHandler->pGPIOx == GPIOA)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	689b      	ldr	r3, [r3, #8]
 8003472:	4a2f      	ldr	r2, [pc, #188]	; (8003530 <extInt_Config+0x714>)
 8003474:	4293      	cmp	r3, r2
 8003476:	d104      	bne.n	8003482 <extInt_Config+0x666>
		{
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI8_PA);
 8003478:	4b2c      	ldr	r3, [pc, #176]	; (800352c <extInt_Config+0x710>)
 800347a:	4a2c      	ldr	r2, [pc, #176]	; (800352c <extInt_Config+0x710>)
 800347c:	691b      	ldr	r3, [r3, #16]
 800347e:	6113      	str	r3, [r2, #16]
		}
		else
		{
			__NOP();
		}
		break;
 8003480:	e2bd      	b.n	80039fe <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOB)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	689b      	ldr	r3, [r3, #8]
 8003488:	4a2a      	ldr	r2, [pc, #168]	; (8003534 <extInt_Config+0x718>)
 800348a:	4293      	cmp	r3, r2
 800348c:	d106      	bne.n	800349c <extInt_Config+0x680>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI8_PB);
 800348e:	4b27      	ldr	r3, [pc, #156]	; (800352c <extInt_Config+0x710>)
 8003490:	691b      	ldr	r3, [r3, #16]
 8003492:	4a26      	ldr	r2, [pc, #152]	; (800352c <extInt_Config+0x710>)
 8003494:	f043 0301 	orr.w	r3, r3, #1
 8003498:	6113      	str	r3, [r2, #16]
		break;
 800349a:	e2b0      	b.n	80039fe <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOC)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	689b      	ldr	r3, [r3, #8]
 80034a2:	4a25      	ldr	r2, [pc, #148]	; (8003538 <extInt_Config+0x71c>)
 80034a4:	4293      	cmp	r3, r2
 80034a6:	d106      	bne.n	80034b6 <extInt_Config+0x69a>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI8_PC);
 80034a8:	4b20      	ldr	r3, [pc, #128]	; (800352c <extInt_Config+0x710>)
 80034aa:	691b      	ldr	r3, [r3, #16]
 80034ac:	4a1f      	ldr	r2, [pc, #124]	; (800352c <extInt_Config+0x710>)
 80034ae:	f043 0302 	orr.w	r3, r3, #2
 80034b2:	6113      	str	r3, [r2, #16]
		break;
 80034b4:	e2a3      	b.n	80039fe <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOD)
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	689b      	ldr	r3, [r3, #8]
 80034bc:	4a1f      	ldr	r2, [pc, #124]	; (800353c <extInt_Config+0x720>)
 80034be:	4293      	cmp	r3, r2
 80034c0:	d106      	bne.n	80034d0 <extInt_Config+0x6b4>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI8_PD);
 80034c2:	4b1a      	ldr	r3, [pc, #104]	; (800352c <extInt_Config+0x710>)
 80034c4:	691b      	ldr	r3, [r3, #16]
 80034c6:	4a19      	ldr	r2, [pc, #100]	; (800352c <extInt_Config+0x710>)
 80034c8:	f043 0303 	orr.w	r3, r3, #3
 80034cc:	6113      	str	r3, [r2, #16]
		break;
 80034ce:	e296      	b.n	80039fe <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOE)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	689b      	ldr	r3, [r3, #8]
 80034d6:	4a1a      	ldr	r2, [pc, #104]	; (8003540 <extInt_Config+0x724>)
 80034d8:	4293      	cmp	r3, r2
 80034da:	d106      	bne.n	80034ea <extInt_Config+0x6ce>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI8_PE);
 80034dc:	4b13      	ldr	r3, [pc, #76]	; (800352c <extInt_Config+0x710>)
 80034de:	691b      	ldr	r3, [r3, #16]
 80034e0:	4a12      	ldr	r2, [pc, #72]	; (800352c <extInt_Config+0x710>)
 80034e2:	f043 0304 	orr.w	r3, r3, #4
 80034e6:	6113      	str	r3, [r2, #16]
		break;
 80034e8:	e289      	b.n	80039fe <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOH)
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	689b      	ldr	r3, [r3, #8]
 80034f0:	4a14      	ldr	r2, [pc, #80]	; (8003544 <extInt_Config+0x728>)
 80034f2:	4293      	cmp	r3, r2
 80034f4:	d106      	bne.n	8003504 <extInt_Config+0x6e8>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI8_PH);
 80034f6:	4b0d      	ldr	r3, [pc, #52]	; (800352c <extInt_Config+0x710>)
 80034f8:	691b      	ldr	r3, [r3, #16]
 80034fa:	4a0c      	ldr	r2, [pc, #48]	; (800352c <extInt_Config+0x710>)
 80034fc:	f043 0307 	orr.w	r3, r3, #7
 8003500:	6113      	str	r3, [r2, #16]
		break;
 8003502:	e27c      	b.n	80039fe <extInt_Config+0xbe2>
			__NOP();
 8003504:	bf00      	nop
		break;
 8003506:	e27a      	b.n	80039fe <extInt_Config+0xbe2>
	//----------------Configuracion EXTI9------------------
	case 9:
	{
		/*Limpiamos la posicion correspondiente a la configuracion del PIN_9
		en el EXTICR*/
		SYSCFG->EXTICR[2] &= ~(0xF<<SYSCFG_EXTICR3_EXTI9_Pos);
 8003508:	4b08      	ldr	r3, [pc, #32]	; (800352c <extInt_Config+0x710>)
 800350a:	691b      	ldr	r3, [r3, #16]
 800350c:	4a07      	ldr	r2, [pc, #28]	; (800352c <extInt_Config+0x710>)
 800350e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003512:	6113      	str	r3, [r2, #16]

		//Seleccionamos el valor a cargar deacuerdo al puerto establecido
		if(extiConfig->pGPIOHandler->pGPIOx == GPIOA)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	689b      	ldr	r3, [r3, #8]
 800351a:	4a05      	ldr	r2, [pc, #20]	; (8003530 <extInt_Config+0x714>)
 800351c:	4293      	cmp	r3, r2
 800351e:	d113      	bne.n	8003548 <extInt_Config+0x72c>
		{
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI9_PA);
 8003520:	4b02      	ldr	r3, [pc, #8]	; (800352c <extInt_Config+0x710>)
 8003522:	4a02      	ldr	r2, [pc, #8]	; (800352c <extInt_Config+0x710>)
 8003524:	691b      	ldr	r3, [r3, #16]
 8003526:	6113      	str	r3, [r2, #16]
		}
		else
		{
			__NOP();
		}
		break;
 8003528:	e269      	b.n	80039fe <extInt_Config+0xbe2>
 800352a:	bf00      	nop
 800352c:	40013800 	.word	0x40013800
 8003530:	40020000 	.word	0x40020000
 8003534:	40020400 	.word	0x40020400
 8003538:	40020800 	.word	0x40020800
 800353c:	40020c00 	.word	0x40020c00
 8003540:	40021000 	.word	0x40021000
 8003544:	40021c00 	.word	0x40021c00
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOB)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	689b      	ldr	r3, [r3, #8]
 800354e:	4a83      	ldr	r2, [pc, #524]	; (800375c <extInt_Config+0x940>)
 8003550:	4293      	cmp	r3, r2
 8003552:	d106      	bne.n	8003562 <extInt_Config+0x746>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI9_PB);
 8003554:	4b82      	ldr	r3, [pc, #520]	; (8003760 <extInt_Config+0x944>)
 8003556:	691b      	ldr	r3, [r3, #16]
 8003558:	4a81      	ldr	r2, [pc, #516]	; (8003760 <extInt_Config+0x944>)
 800355a:	f043 0310 	orr.w	r3, r3, #16
 800355e:	6113      	str	r3, [r2, #16]
		break;
 8003560:	e24d      	b.n	80039fe <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOC)
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	689b      	ldr	r3, [r3, #8]
 8003568:	4a7e      	ldr	r2, [pc, #504]	; (8003764 <extInt_Config+0x948>)
 800356a:	4293      	cmp	r3, r2
 800356c:	d106      	bne.n	800357c <extInt_Config+0x760>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI9_PC);
 800356e:	4b7c      	ldr	r3, [pc, #496]	; (8003760 <extInt_Config+0x944>)
 8003570:	691b      	ldr	r3, [r3, #16]
 8003572:	4a7b      	ldr	r2, [pc, #492]	; (8003760 <extInt_Config+0x944>)
 8003574:	f043 0320 	orr.w	r3, r3, #32
 8003578:	6113      	str	r3, [r2, #16]
		break;
 800357a:	e240      	b.n	80039fe <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOD)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	689b      	ldr	r3, [r3, #8]
 8003582:	4a79      	ldr	r2, [pc, #484]	; (8003768 <extInt_Config+0x94c>)
 8003584:	4293      	cmp	r3, r2
 8003586:	d106      	bne.n	8003596 <extInt_Config+0x77a>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI9_PD);
 8003588:	4b75      	ldr	r3, [pc, #468]	; (8003760 <extInt_Config+0x944>)
 800358a:	691b      	ldr	r3, [r3, #16]
 800358c:	4a74      	ldr	r2, [pc, #464]	; (8003760 <extInt_Config+0x944>)
 800358e:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8003592:	6113      	str	r3, [r2, #16]
		break;
 8003594:	e233      	b.n	80039fe <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOE)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	689b      	ldr	r3, [r3, #8]
 800359c:	4a73      	ldr	r2, [pc, #460]	; (800376c <extInt_Config+0x950>)
 800359e:	4293      	cmp	r3, r2
 80035a0:	d106      	bne.n	80035b0 <extInt_Config+0x794>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI9_PE);
 80035a2:	4b6f      	ldr	r3, [pc, #444]	; (8003760 <extInt_Config+0x944>)
 80035a4:	691b      	ldr	r3, [r3, #16]
 80035a6:	4a6e      	ldr	r2, [pc, #440]	; (8003760 <extInt_Config+0x944>)
 80035a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80035ac:	6113      	str	r3, [r2, #16]
		break;
 80035ae:	e226      	b.n	80039fe <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOH)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	689b      	ldr	r3, [r3, #8]
 80035b6:	4a6e      	ldr	r2, [pc, #440]	; (8003770 <extInt_Config+0x954>)
 80035b8:	4293      	cmp	r3, r2
 80035ba:	d106      	bne.n	80035ca <extInt_Config+0x7ae>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI9_PH);
 80035bc:	4b68      	ldr	r3, [pc, #416]	; (8003760 <extInt_Config+0x944>)
 80035be:	691b      	ldr	r3, [r3, #16]
 80035c0:	4a67      	ldr	r2, [pc, #412]	; (8003760 <extInt_Config+0x944>)
 80035c2:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 80035c6:	6113      	str	r3, [r2, #16]
		break;
 80035c8:	e219      	b.n	80039fe <extInt_Config+0xbe2>
			__NOP();
 80035ca:	bf00      	nop
		break;
 80035cc:	e217      	b.n	80039fe <extInt_Config+0xbe2>
	//----------------Configuracion EXTI10-----------------
	case 10:
	{
		/*Limpiamos la posicion correspondiente a la configuracion del PIN_10
		en el EXTICR*/
		SYSCFG->EXTICR[2] &= ~(0xF<<SYSCFG_EXTICR3_EXTI10_Pos);
 80035ce:	4b64      	ldr	r3, [pc, #400]	; (8003760 <extInt_Config+0x944>)
 80035d0:	691b      	ldr	r3, [r3, #16]
 80035d2:	4a63      	ldr	r2, [pc, #396]	; (8003760 <extInt_Config+0x944>)
 80035d4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80035d8:	6113      	str	r3, [r2, #16]

		//Seleccionamos el valor a cargar deacuerdo al puerto establecido
		if(extiConfig->pGPIOHandler->pGPIOx == GPIOA)
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	689b      	ldr	r3, [r3, #8]
 80035e0:	4a64      	ldr	r2, [pc, #400]	; (8003774 <extInt_Config+0x958>)
 80035e2:	4293      	cmp	r3, r2
 80035e4:	d104      	bne.n	80035f0 <extInt_Config+0x7d4>
		{
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI10_PA);
 80035e6:	4b5e      	ldr	r3, [pc, #376]	; (8003760 <extInt_Config+0x944>)
 80035e8:	4a5d      	ldr	r2, [pc, #372]	; (8003760 <extInt_Config+0x944>)
 80035ea:	691b      	ldr	r3, [r3, #16]
 80035ec:	6113      	str	r3, [r2, #16]
		}
		else
		{
			__NOP();
		}
		break;
 80035ee:	e206      	b.n	80039fe <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOB)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	689b      	ldr	r3, [r3, #8]
 80035f6:	4a59      	ldr	r2, [pc, #356]	; (800375c <extInt_Config+0x940>)
 80035f8:	4293      	cmp	r3, r2
 80035fa:	d106      	bne.n	800360a <extInt_Config+0x7ee>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI10_PB);
 80035fc:	4b58      	ldr	r3, [pc, #352]	; (8003760 <extInt_Config+0x944>)
 80035fe:	691b      	ldr	r3, [r3, #16]
 8003600:	4a57      	ldr	r2, [pc, #348]	; (8003760 <extInt_Config+0x944>)
 8003602:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003606:	6113      	str	r3, [r2, #16]
		break;
 8003608:	e1f9      	b.n	80039fe <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOC)
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	689b      	ldr	r3, [r3, #8]
 8003610:	4a54      	ldr	r2, [pc, #336]	; (8003764 <extInt_Config+0x948>)
 8003612:	4293      	cmp	r3, r2
 8003614:	d106      	bne.n	8003624 <extInt_Config+0x808>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI10_PC);
 8003616:	4b52      	ldr	r3, [pc, #328]	; (8003760 <extInt_Config+0x944>)
 8003618:	691b      	ldr	r3, [r3, #16]
 800361a:	4a51      	ldr	r2, [pc, #324]	; (8003760 <extInt_Config+0x944>)
 800361c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003620:	6113      	str	r3, [r2, #16]
		break;
 8003622:	e1ec      	b.n	80039fe <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOD)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	689b      	ldr	r3, [r3, #8]
 800362a:	4a4f      	ldr	r2, [pc, #316]	; (8003768 <extInt_Config+0x94c>)
 800362c:	4293      	cmp	r3, r2
 800362e:	d106      	bne.n	800363e <extInt_Config+0x822>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI10_PD);
 8003630:	4b4b      	ldr	r3, [pc, #300]	; (8003760 <extInt_Config+0x944>)
 8003632:	691b      	ldr	r3, [r3, #16]
 8003634:	4a4a      	ldr	r2, [pc, #296]	; (8003760 <extInt_Config+0x944>)
 8003636:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800363a:	6113      	str	r3, [r2, #16]
		break;
 800363c:	e1df      	b.n	80039fe <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOE)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	689b      	ldr	r3, [r3, #8]
 8003644:	4a49      	ldr	r2, [pc, #292]	; (800376c <extInt_Config+0x950>)
 8003646:	4293      	cmp	r3, r2
 8003648:	d106      	bne.n	8003658 <extInt_Config+0x83c>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI10_PE);
 800364a:	4b45      	ldr	r3, [pc, #276]	; (8003760 <extInt_Config+0x944>)
 800364c:	691b      	ldr	r3, [r3, #16]
 800364e:	4a44      	ldr	r2, [pc, #272]	; (8003760 <extInt_Config+0x944>)
 8003650:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003654:	6113      	str	r3, [r2, #16]
		break;
 8003656:	e1d2      	b.n	80039fe <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOH)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	689b      	ldr	r3, [r3, #8]
 800365e:	4a44      	ldr	r2, [pc, #272]	; (8003770 <extInt_Config+0x954>)
 8003660:	4293      	cmp	r3, r2
 8003662:	d106      	bne.n	8003672 <extInt_Config+0x856>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI10_PH);
 8003664:	4b3e      	ldr	r3, [pc, #248]	; (8003760 <extInt_Config+0x944>)
 8003666:	691b      	ldr	r3, [r3, #16]
 8003668:	4a3d      	ldr	r2, [pc, #244]	; (8003760 <extInt_Config+0x944>)
 800366a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800366e:	6113      	str	r3, [r2, #16]
		break;
 8003670:	e1c5      	b.n	80039fe <extInt_Config+0xbe2>
			__NOP();
 8003672:	bf00      	nop
		break;
 8003674:	e1c3      	b.n	80039fe <extInt_Config+0xbe2>
	//----------------Configuracion EXTI11-----------------
	case 11:
	{
		/*Limpiamos la posicion correspondiente a la configuracion del PIN_11
		en el EXTICR*/
		SYSCFG->EXTICR[2] &= ~(0xF<<SYSCFG_EXTICR3_EXTI11_Pos);
 8003676:	4b3a      	ldr	r3, [pc, #232]	; (8003760 <extInt_Config+0x944>)
 8003678:	691b      	ldr	r3, [r3, #16]
 800367a:	4a39      	ldr	r2, [pc, #228]	; (8003760 <extInt_Config+0x944>)
 800367c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003680:	6113      	str	r3, [r2, #16]

		//Seleccionamos el valor a cargar deacuerdo al puerto establecido
		if(extiConfig->pGPIOHandler->pGPIOx == GPIOA)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	689b      	ldr	r3, [r3, #8]
 8003688:	4a3a      	ldr	r2, [pc, #232]	; (8003774 <extInt_Config+0x958>)
 800368a:	4293      	cmp	r3, r2
 800368c:	d104      	bne.n	8003698 <extInt_Config+0x87c>
		{
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI11_PA);
 800368e:	4b34      	ldr	r3, [pc, #208]	; (8003760 <extInt_Config+0x944>)
 8003690:	4a33      	ldr	r2, [pc, #204]	; (8003760 <extInt_Config+0x944>)
 8003692:	691b      	ldr	r3, [r3, #16]
 8003694:	6113      	str	r3, [r2, #16]
		}
		else
		{
			__NOP();
		}
		break;
 8003696:	e1b2      	b.n	80039fe <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOB)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	689b      	ldr	r3, [r3, #8]
 800369e:	4a2f      	ldr	r2, [pc, #188]	; (800375c <extInt_Config+0x940>)
 80036a0:	4293      	cmp	r3, r2
 80036a2:	d106      	bne.n	80036b2 <extInt_Config+0x896>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI11_PB);
 80036a4:	4b2e      	ldr	r3, [pc, #184]	; (8003760 <extInt_Config+0x944>)
 80036a6:	691b      	ldr	r3, [r3, #16]
 80036a8:	4a2d      	ldr	r2, [pc, #180]	; (8003760 <extInt_Config+0x944>)
 80036aa:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80036ae:	6113      	str	r3, [r2, #16]
		break;
 80036b0:	e1a5      	b.n	80039fe <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOC)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	689b      	ldr	r3, [r3, #8]
 80036b8:	4a2a      	ldr	r2, [pc, #168]	; (8003764 <extInt_Config+0x948>)
 80036ba:	4293      	cmp	r3, r2
 80036bc:	d106      	bne.n	80036cc <extInt_Config+0x8b0>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI11_PC);
 80036be:	4b28      	ldr	r3, [pc, #160]	; (8003760 <extInt_Config+0x944>)
 80036c0:	691b      	ldr	r3, [r3, #16]
 80036c2:	4a27      	ldr	r2, [pc, #156]	; (8003760 <extInt_Config+0x944>)
 80036c4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80036c8:	6113      	str	r3, [r2, #16]
		break;
 80036ca:	e198      	b.n	80039fe <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOD)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	689b      	ldr	r3, [r3, #8]
 80036d2:	4a25      	ldr	r2, [pc, #148]	; (8003768 <extInt_Config+0x94c>)
 80036d4:	4293      	cmp	r3, r2
 80036d6:	d106      	bne.n	80036e6 <extInt_Config+0x8ca>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI11_PD);
 80036d8:	4b21      	ldr	r3, [pc, #132]	; (8003760 <extInt_Config+0x944>)
 80036da:	691b      	ldr	r3, [r3, #16]
 80036dc:	4a20      	ldr	r2, [pc, #128]	; (8003760 <extInt_Config+0x944>)
 80036de:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 80036e2:	6113      	str	r3, [r2, #16]
		break;
 80036e4:	e18b      	b.n	80039fe <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOE)
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	689b      	ldr	r3, [r3, #8]
 80036ec:	4a1f      	ldr	r2, [pc, #124]	; (800376c <extInt_Config+0x950>)
 80036ee:	4293      	cmp	r3, r2
 80036f0:	d106      	bne.n	8003700 <extInt_Config+0x8e4>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI11_PE);
 80036f2:	4b1b      	ldr	r3, [pc, #108]	; (8003760 <extInt_Config+0x944>)
 80036f4:	691b      	ldr	r3, [r3, #16]
 80036f6:	4a1a      	ldr	r2, [pc, #104]	; (8003760 <extInt_Config+0x944>)
 80036f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80036fc:	6113      	str	r3, [r2, #16]
		break;
 80036fe:	e17e      	b.n	80039fe <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOH)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	689b      	ldr	r3, [r3, #8]
 8003706:	4a1a      	ldr	r2, [pc, #104]	; (8003770 <extInt_Config+0x954>)
 8003708:	4293      	cmp	r3, r2
 800370a:	d106      	bne.n	800371a <extInt_Config+0x8fe>
			SYSCFG->EXTICR[2] |= (SYSCFG_EXTICR3_EXTI11_PH);
 800370c:	4b14      	ldr	r3, [pc, #80]	; (8003760 <extInt_Config+0x944>)
 800370e:	691b      	ldr	r3, [r3, #16]
 8003710:	4a13      	ldr	r2, [pc, #76]	; (8003760 <extInt_Config+0x944>)
 8003712:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 8003716:	6113      	str	r3, [r2, #16]
		break;
 8003718:	e171      	b.n	80039fe <extInt_Config+0xbe2>
			__NOP();
 800371a:	bf00      	nop
		break;
 800371c:	e16f      	b.n	80039fe <extInt_Config+0xbe2>
	//----------------Configuracion EXTI12-----------------
	case 12:
	{
		/*Limpiamos la posicion correspondiente a la configuracion del PIN_12
		en el EXTICR*/
		SYSCFG->EXTICR[3] &= ~(0xF<<SYSCFG_EXTICR4_EXTI12_Pos);
 800371e:	4b10      	ldr	r3, [pc, #64]	; (8003760 <extInt_Config+0x944>)
 8003720:	695b      	ldr	r3, [r3, #20]
 8003722:	4a0f      	ldr	r2, [pc, #60]	; (8003760 <extInt_Config+0x944>)
 8003724:	f023 030f 	bic.w	r3, r3, #15
 8003728:	6153      	str	r3, [r2, #20]

		//Seleccionamos el valor a cargar deacuerdo al puerto establecido
		if(extiConfig->pGPIOHandler->pGPIOx == GPIOA)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	689b      	ldr	r3, [r3, #8]
 8003730:	4a10      	ldr	r2, [pc, #64]	; (8003774 <extInt_Config+0x958>)
 8003732:	4293      	cmp	r3, r2
 8003734:	d104      	bne.n	8003740 <extInt_Config+0x924>
		{
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI12_PA);
 8003736:	4b0a      	ldr	r3, [pc, #40]	; (8003760 <extInt_Config+0x944>)
 8003738:	4a09      	ldr	r2, [pc, #36]	; (8003760 <extInt_Config+0x944>)
 800373a:	695b      	ldr	r3, [r3, #20]
 800373c:	6153      	str	r3, [r2, #20]
		}
		else
		{
			__NOP();
		}
		break;
 800373e:	e15e      	b.n	80039fe <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOB)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	689b      	ldr	r3, [r3, #8]
 8003746:	4a05      	ldr	r2, [pc, #20]	; (800375c <extInt_Config+0x940>)
 8003748:	4293      	cmp	r3, r2
 800374a:	d115      	bne.n	8003778 <extInt_Config+0x95c>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI12_PB);
 800374c:	4b04      	ldr	r3, [pc, #16]	; (8003760 <extInt_Config+0x944>)
 800374e:	695b      	ldr	r3, [r3, #20]
 8003750:	4a03      	ldr	r2, [pc, #12]	; (8003760 <extInt_Config+0x944>)
 8003752:	f043 0301 	orr.w	r3, r3, #1
 8003756:	6153      	str	r3, [r2, #20]
		break;
 8003758:	e151      	b.n	80039fe <extInt_Config+0xbe2>
 800375a:	bf00      	nop
 800375c:	40020400 	.word	0x40020400
 8003760:	40013800 	.word	0x40013800
 8003764:	40020800 	.word	0x40020800
 8003768:	40020c00 	.word	0x40020c00
 800376c:	40021000 	.word	0x40021000
 8003770:	40021c00 	.word	0x40021c00
 8003774:	40020000 	.word	0x40020000
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOC)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	689b      	ldr	r3, [r3, #8]
 800377e:	4a83      	ldr	r2, [pc, #524]	; (800398c <extInt_Config+0xb70>)
 8003780:	4293      	cmp	r3, r2
 8003782:	d106      	bne.n	8003792 <extInt_Config+0x976>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI12_PC);
 8003784:	4b82      	ldr	r3, [pc, #520]	; (8003990 <extInt_Config+0xb74>)
 8003786:	695b      	ldr	r3, [r3, #20]
 8003788:	4a81      	ldr	r2, [pc, #516]	; (8003990 <extInt_Config+0xb74>)
 800378a:	f043 0302 	orr.w	r3, r3, #2
 800378e:	6153      	str	r3, [r2, #20]
		break;
 8003790:	e135      	b.n	80039fe <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOD)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	689b      	ldr	r3, [r3, #8]
 8003798:	4a7e      	ldr	r2, [pc, #504]	; (8003994 <extInt_Config+0xb78>)
 800379a:	4293      	cmp	r3, r2
 800379c:	d106      	bne.n	80037ac <extInt_Config+0x990>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI12_PD);
 800379e:	4b7c      	ldr	r3, [pc, #496]	; (8003990 <extInt_Config+0xb74>)
 80037a0:	695b      	ldr	r3, [r3, #20]
 80037a2:	4a7b      	ldr	r2, [pc, #492]	; (8003990 <extInt_Config+0xb74>)
 80037a4:	f043 0303 	orr.w	r3, r3, #3
 80037a8:	6153      	str	r3, [r2, #20]
		break;
 80037aa:	e128      	b.n	80039fe <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOE)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	689b      	ldr	r3, [r3, #8]
 80037b2:	4a79      	ldr	r2, [pc, #484]	; (8003998 <extInt_Config+0xb7c>)
 80037b4:	4293      	cmp	r3, r2
 80037b6:	d106      	bne.n	80037c6 <extInt_Config+0x9aa>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI12_PE);
 80037b8:	4b75      	ldr	r3, [pc, #468]	; (8003990 <extInt_Config+0xb74>)
 80037ba:	695b      	ldr	r3, [r3, #20]
 80037bc:	4a74      	ldr	r2, [pc, #464]	; (8003990 <extInt_Config+0xb74>)
 80037be:	f043 0304 	orr.w	r3, r3, #4
 80037c2:	6153      	str	r3, [r2, #20]
		break;
 80037c4:	e11b      	b.n	80039fe <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOH)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	689b      	ldr	r3, [r3, #8]
 80037cc:	4a73      	ldr	r2, [pc, #460]	; (800399c <extInt_Config+0xb80>)
 80037ce:	4293      	cmp	r3, r2
 80037d0:	d106      	bne.n	80037e0 <extInt_Config+0x9c4>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI12_PH);
 80037d2:	4b6f      	ldr	r3, [pc, #444]	; (8003990 <extInt_Config+0xb74>)
 80037d4:	695b      	ldr	r3, [r3, #20]
 80037d6:	4a6e      	ldr	r2, [pc, #440]	; (8003990 <extInt_Config+0xb74>)
 80037d8:	f043 0307 	orr.w	r3, r3, #7
 80037dc:	6153      	str	r3, [r2, #20]
		break;
 80037de:	e10e      	b.n	80039fe <extInt_Config+0xbe2>
			__NOP();
 80037e0:	bf00      	nop
		break;
 80037e2:	e10c      	b.n	80039fe <extInt_Config+0xbe2>
	//----------------Configuracion EXTI13-----------------
	case 13:
	{
		/*Limpiamos la posicion correspondiente a la configuracion del PIN_13
		en el EXTICR*/
		SYSCFG->EXTICR[3] &= ~(0xF<<SYSCFG_EXTICR4_EXTI13_Pos);
 80037e4:	4b6a      	ldr	r3, [pc, #424]	; (8003990 <extInt_Config+0xb74>)
 80037e6:	695b      	ldr	r3, [r3, #20]
 80037e8:	4a69      	ldr	r2, [pc, #420]	; (8003990 <extInt_Config+0xb74>)
 80037ea:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80037ee:	6153      	str	r3, [r2, #20]

		//Seleccionamos el valor a cargar deacuerdo al puerto establecido
		if(extiConfig->pGPIOHandler->pGPIOx == GPIOA)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	689b      	ldr	r3, [r3, #8]
 80037f6:	4a6a      	ldr	r2, [pc, #424]	; (80039a0 <extInt_Config+0xb84>)
 80037f8:	4293      	cmp	r3, r2
 80037fa:	d104      	bne.n	8003806 <extInt_Config+0x9ea>
		{
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI13_PA);
 80037fc:	4b64      	ldr	r3, [pc, #400]	; (8003990 <extInt_Config+0xb74>)
 80037fe:	4a64      	ldr	r2, [pc, #400]	; (8003990 <extInt_Config+0xb74>)
 8003800:	695b      	ldr	r3, [r3, #20]
 8003802:	6153      	str	r3, [r2, #20]
		}
		else
		{
			__NOP();
		}
		break;
 8003804:	e0fb      	b.n	80039fe <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOB)
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	689b      	ldr	r3, [r3, #8]
 800380c:	4a65      	ldr	r2, [pc, #404]	; (80039a4 <extInt_Config+0xb88>)
 800380e:	4293      	cmp	r3, r2
 8003810:	d106      	bne.n	8003820 <extInt_Config+0xa04>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI13_PB);
 8003812:	4b5f      	ldr	r3, [pc, #380]	; (8003990 <extInt_Config+0xb74>)
 8003814:	695b      	ldr	r3, [r3, #20]
 8003816:	4a5e      	ldr	r2, [pc, #376]	; (8003990 <extInt_Config+0xb74>)
 8003818:	f043 0310 	orr.w	r3, r3, #16
 800381c:	6153      	str	r3, [r2, #20]
		break;
 800381e:	e0ee      	b.n	80039fe <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOC)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	689b      	ldr	r3, [r3, #8]
 8003826:	4a59      	ldr	r2, [pc, #356]	; (800398c <extInt_Config+0xb70>)
 8003828:	4293      	cmp	r3, r2
 800382a:	d106      	bne.n	800383a <extInt_Config+0xa1e>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI13_PC);
 800382c:	4b58      	ldr	r3, [pc, #352]	; (8003990 <extInt_Config+0xb74>)
 800382e:	695b      	ldr	r3, [r3, #20]
 8003830:	4a57      	ldr	r2, [pc, #348]	; (8003990 <extInt_Config+0xb74>)
 8003832:	f043 0320 	orr.w	r3, r3, #32
 8003836:	6153      	str	r3, [r2, #20]
		break;
 8003838:	e0e1      	b.n	80039fe <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOD)
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	689b      	ldr	r3, [r3, #8]
 8003840:	4a54      	ldr	r2, [pc, #336]	; (8003994 <extInt_Config+0xb78>)
 8003842:	4293      	cmp	r3, r2
 8003844:	d106      	bne.n	8003854 <extInt_Config+0xa38>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI13_PD);
 8003846:	4b52      	ldr	r3, [pc, #328]	; (8003990 <extInt_Config+0xb74>)
 8003848:	695b      	ldr	r3, [r3, #20]
 800384a:	4a51      	ldr	r2, [pc, #324]	; (8003990 <extInt_Config+0xb74>)
 800384c:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8003850:	6153      	str	r3, [r2, #20]
		break;
 8003852:	e0d4      	b.n	80039fe <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOE)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	689b      	ldr	r3, [r3, #8]
 800385a:	4a4f      	ldr	r2, [pc, #316]	; (8003998 <extInt_Config+0xb7c>)
 800385c:	4293      	cmp	r3, r2
 800385e:	d106      	bne.n	800386e <extInt_Config+0xa52>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI13_PE);
 8003860:	4b4b      	ldr	r3, [pc, #300]	; (8003990 <extInt_Config+0xb74>)
 8003862:	695b      	ldr	r3, [r3, #20]
 8003864:	4a4a      	ldr	r2, [pc, #296]	; (8003990 <extInt_Config+0xb74>)
 8003866:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800386a:	6153      	str	r3, [r2, #20]
		break;
 800386c:	e0c7      	b.n	80039fe <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOH)
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	689b      	ldr	r3, [r3, #8]
 8003874:	4a49      	ldr	r2, [pc, #292]	; (800399c <extInt_Config+0xb80>)
 8003876:	4293      	cmp	r3, r2
 8003878:	d106      	bne.n	8003888 <extInt_Config+0xa6c>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI13_PH);
 800387a:	4b45      	ldr	r3, [pc, #276]	; (8003990 <extInt_Config+0xb74>)
 800387c:	695b      	ldr	r3, [r3, #20]
 800387e:	4a44      	ldr	r2, [pc, #272]	; (8003990 <extInt_Config+0xb74>)
 8003880:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8003884:	6153      	str	r3, [r2, #20]
		break;
 8003886:	e0ba      	b.n	80039fe <extInt_Config+0xbe2>
			__NOP();
 8003888:	bf00      	nop
		break;
 800388a:	e0b8      	b.n	80039fe <extInt_Config+0xbe2>
	//----------------Configuracion EXTI14-----------------
	case 14:
	{
		/*Limpiamos la posicion correspondiente a la configuracion del PIN_14
		en el EXTICR*/
		SYSCFG->EXTICR[3] &= ~(0xF<<SYSCFG_EXTICR4_EXTI14_Pos);
 800388c:	4b40      	ldr	r3, [pc, #256]	; (8003990 <extInt_Config+0xb74>)
 800388e:	695b      	ldr	r3, [r3, #20]
 8003890:	4a3f      	ldr	r2, [pc, #252]	; (8003990 <extInt_Config+0xb74>)
 8003892:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003896:	6153      	str	r3, [r2, #20]

		//Seleccionamos el valor a cargar deacuerdo al puerto establecido
		if(extiConfig->pGPIOHandler->pGPIOx == GPIOA)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	689b      	ldr	r3, [r3, #8]
 800389e:	4a40      	ldr	r2, [pc, #256]	; (80039a0 <extInt_Config+0xb84>)
 80038a0:	4293      	cmp	r3, r2
 80038a2:	d104      	bne.n	80038ae <extInt_Config+0xa92>
		{
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI14_PA);
 80038a4:	4b3a      	ldr	r3, [pc, #232]	; (8003990 <extInt_Config+0xb74>)
 80038a6:	4a3a      	ldr	r2, [pc, #232]	; (8003990 <extInt_Config+0xb74>)
 80038a8:	695b      	ldr	r3, [r3, #20]
 80038aa:	6153      	str	r3, [r2, #20]
		}
		else
		{
			__NOP();
		}
		break;
 80038ac:	e0a7      	b.n	80039fe <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOB)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	689b      	ldr	r3, [r3, #8]
 80038b4:	4a3b      	ldr	r2, [pc, #236]	; (80039a4 <extInt_Config+0xb88>)
 80038b6:	4293      	cmp	r3, r2
 80038b8:	d106      	bne.n	80038c8 <extInt_Config+0xaac>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI14_PB);
 80038ba:	4b35      	ldr	r3, [pc, #212]	; (8003990 <extInt_Config+0xb74>)
 80038bc:	695b      	ldr	r3, [r3, #20]
 80038be:	4a34      	ldr	r2, [pc, #208]	; (8003990 <extInt_Config+0xb74>)
 80038c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80038c4:	6153      	str	r3, [r2, #20]
		break;
 80038c6:	e09a      	b.n	80039fe <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOC)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	689b      	ldr	r3, [r3, #8]
 80038ce:	4a2f      	ldr	r2, [pc, #188]	; (800398c <extInt_Config+0xb70>)
 80038d0:	4293      	cmp	r3, r2
 80038d2:	d106      	bne.n	80038e2 <extInt_Config+0xac6>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI14_PC);
 80038d4:	4b2e      	ldr	r3, [pc, #184]	; (8003990 <extInt_Config+0xb74>)
 80038d6:	695b      	ldr	r3, [r3, #20]
 80038d8:	4a2d      	ldr	r2, [pc, #180]	; (8003990 <extInt_Config+0xb74>)
 80038da:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80038de:	6153      	str	r3, [r2, #20]
		break;
 80038e0:	e08d      	b.n	80039fe <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOD)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	689b      	ldr	r3, [r3, #8]
 80038e8:	4a2a      	ldr	r2, [pc, #168]	; (8003994 <extInt_Config+0xb78>)
 80038ea:	4293      	cmp	r3, r2
 80038ec:	d106      	bne.n	80038fc <extInt_Config+0xae0>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI14_PD);
 80038ee:	4b28      	ldr	r3, [pc, #160]	; (8003990 <extInt_Config+0xb74>)
 80038f0:	695b      	ldr	r3, [r3, #20]
 80038f2:	4a27      	ldr	r2, [pc, #156]	; (8003990 <extInt_Config+0xb74>)
 80038f4:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80038f8:	6153      	str	r3, [r2, #20]
		break;
 80038fa:	e080      	b.n	80039fe <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOE)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	689b      	ldr	r3, [r3, #8]
 8003902:	4a25      	ldr	r2, [pc, #148]	; (8003998 <extInt_Config+0xb7c>)
 8003904:	4293      	cmp	r3, r2
 8003906:	d106      	bne.n	8003916 <extInt_Config+0xafa>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI14_PE);
 8003908:	4b21      	ldr	r3, [pc, #132]	; (8003990 <extInt_Config+0xb74>)
 800390a:	695b      	ldr	r3, [r3, #20]
 800390c:	4a20      	ldr	r2, [pc, #128]	; (8003990 <extInt_Config+0xb74>)
 800390e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003912:	6153      	str	r3, [r2, #20]
		break;
 8003914:	e073      	b.n	80039fe <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOH)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	689b      	ldr	r3, [r3, #8]
 800391c:	4a1f      	ldr	r2, [pc, #124]	; (800399c <extInt_Config+0xb80>)
 800391e:	4293      	cmp	r3, r2
 8003920:	d106      	bne.n	8003930 <extInt_Config+0xb14>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI14_PH);
 8003922:	4b1b      	ldr	r3, [pc, #108]	; (8003990 <extInt_Config+0xb74>)
 8003924:	695b      	ldr	r3, [r3, #20]
 8003926:	4a1a      	ldr	r2, [pc, #104]	; (8003990 <extInt_Config+0xb74>)
 8003928:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800392c:	6153      	str	r3, [r2, #20]
		break;
 800392e:	e066      	b.n	80039fe <extInt_Config+0xbe2>
			__NOP();
 8003930:	bf00      	nop
		break;
 8003932:	e064      	b.n	80039fe <extInt_Config+0xbe2>
	//----------------Configuracion EXTI15-----------------
	case 15:
	{
		/*Limpiamos la posicion correspondiente a la configuracion del PIN_15
		en el EXTICR*/
		SYSCFG->EXTICR[3] &= ~(0xF<<SYSCFG_EXTICR4_EXTI15_Pos);
 8003934:	4b16      	ldr	r3, [pc, #88]	; (8003990 <extInt_Config+0xb74>)
 8003936:	695b      	ldr	r3, [r3, #20]
 8003938:	4a15      	ldr	r2, [pc, #84]	; (8003990 <extInt_Config+0xb74>)
 800393a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800393e:	6153      	str	r3, [r2, #20]

		//Seleccionamos el valor a cargar deacuerdo al puerto establecido
		if(extiConfig->pGPIOHandler->pGPIOx == GPIOA)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	689b      	ldr	r3, [r3, #8]
 8003946:	4a16      	ldr	r2, [pc, #88]	; (80039a0 <extInt_Config+0xb84>)
 8003948:	4293      	cmp	r3, r2
 800394a:	d104      	bne.n	8003956 <extInt_Config+0xb3a>
		{
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI15_PA);
 800394c:	4b10      	ldr	r3, [pc, #64]	; (8003990 <extInt_Config+0xb74>)
 800394e:	4a10      	ldr	r2, [pc, #64]	; (8003990 <extInt_Config+0xb74>)
 8003950:	695b      	ldr	r3, [r3, #20]
 8003952:	6153      	str	r3, [r2, #20]
		}
		else
		{
			__NOP();
		}
		break;
 8003954:	e053      	b.n	80039fe <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOB)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	689b      	ldr	r3, [r3, #8]
 800395c:	4a11      	ldr	r2, [pc, #68]	; (80039a4 <extInt_Config+0xb88>)
 800395e:	4293      	cmp	r3, r2
 8003960:	d106      	bne.n	8003970 <extInt_Config+0xb54>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI15_PB);
 8003962:	4b0b      	ldr	r3, [pc, #44]	; (8003990 <extInt_Config+0xb74>)
 8003964:	695b      	ldr	r3, [r3, #20]
 8003966:	4a0a      	ldr	r2, [pc, #40]	; (8003990 <extInt_Config+0xb74>)
 8003968:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800396c:	6153      	str	r3, [r2, #20]
		break;
 800396e:	e046      	b.n	80039fe <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOC)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	689b      	ldr	r3, [r3, #8]
 8003976:	4a05      	ldr	r2, [pc, #20]	; (800398c <extInt_Config+0xb70>)
 8003978:	4293      	cmp	r3, r2
 800397a:	d115      	bne.n	80039a8 <extInt_Config+0xb8c>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI15_PC);
 800397c:	4b04      	ldr	r3, [pc, #16]	; (8003990 <extInt_Config+0xb74>)
 800397e:	695b      	ldr	r3, [r3, #20]
 8003980:	4a03      	ldr	r2, [pc, #12]	; (8003990 <extInt_Config+0xb74>)
 8003982:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003986:	6153      	str	r3, [r2, #20]
		break;
 8003988:	e039      	b.n	80039fe <extInt_Config+0xbe2>
 800398a:	bf00      	nop
 800398c:	40020800 	.word	0x40020800
 8003990:	40013800 	.word	0x40013800
 8003994:	40020c00 	.word	0x40020c00
 8003998:	40021000 	.word	0x40021000
 800399c:	40021c00 	.word	0x40021c00
 80039a0:	40020000 	.word	0x40020000
 80039a4:	40020400 	.word	0x40020400
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOD)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	689b      	ldr	r3, [r3, #8]
 80039ae:	4a9d      	ldr	r2, [pc, #628]	; (8003c24 <extInt_Config+0xe08>)
 80039b0:	4293      	cmp	r3, r2
 80039b2:	d106      	bne.n	80039c2 <extInt_Config+0xba6>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI15_PD);
 80039b4:	4b9c      	ldr	r3, [pc, #624]	; (8003c28 <extInt_Config+0xe0c>)
 80039b6:	695b      	ldr	r3, [r3, #20]
 80039b8:	4a9b      	ldr	r2, [pc, #620]	; (8003c28 <extInt_Config+0xe0c>)
 80039ba:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 80039be:	6153      	str	r3, [r2, #20]
		break;
 80039c0:	e01d      	b.n	80039fe <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOE)
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	689b      	ldr	r3, [r3, #8]
 80039c8:	4a98      	ldr	r2, [pc, #608]	; (8003c2c <extInt_Config+0xe10>)
 80039ca:	4293      	cmp	r3, r2
 80039cc:	d106      	bne.n	80039dc <extInt_Config+0xbc0>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI15_PE);
 80039ce:	4b96      	ldr	r3, [pc, #600]	; (8003c28 <extInt_Config+0xe0c>)
 80039d0:	695b      	ldr	r3, [r3, #20]
 80039d2:	4a95      	ldr	r2, [pc, #596]	; (8003c28 <extInt_Config+0xe0c>)
 80039d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80039d8:	6153      	str	r3, [r2, #20]
		break;
 80039da:	e010      	b.n	80039fe <extInt_Config+0xbe2>
		else if(extiConfig->pGPIOHandler->pGPIOx == GPIOH)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	689b      	ldr	r3, [r3, #8]
 80039e2:	4a93      	ldr	r2, [pc, #588]	; (8003c30 <extInt_Config+0xe14>)
 80039e4:	4293      	cmp	r3, r2
 80039e6:	d106      	bne.n	80039f6 <extInt_Config+0xbda>
			SYSCFG->EXTICR[3] |= (SYSCFG_EXTICR4_EXTI15_PH);
 80039e8:	4b8f      	ldr	r3, [pc, #572]	; (8003c28 <extInt_Config+0xe0c>)
 80039ea:	695b      	ldr	r3, [r3, #20]
 80039ec:	4a8e      	ldr	r2, [pc, #568]	; (8003c28 <extInt_Config+0xe0c>)
 80039ee:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 80039f2:	6153      	str	r3, [r2, #20]
		break;
 80039f4:	e003      	b.n	80039fe <extInt_Config+0xbe2>
			__NOP();
 80039f6:	bf00      	nop
		break;
 80039f8:	e001      	b.n	80039fe <extInt_Config+0xbe2>
	}

	default: {
		__NOP();
 80039fa:	bf00      	nop
		break;
 80039fc:	bf00      	nop
	//Registro: EXTI_RTSR		 Registros donde los primeros 16 bit corresponden a los
	//Registro: EXTI_FTSR        16 EXTIx
	//Registro: EXTI_IMR

	//-------a)Selecionamos el tipo de flanco---------
	if(extiConfig->edgeType == EXTERNAL_INTERRUPP_RISING_EDGE)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	791b      	ldrb	r3, [r3, #4]
 8003a02:	2b01      	cmp	r3, #1
 8003a04:	d126      	bne.n	8003a54 <extInt_Config+0xc38>
	{
		EXTI->FTSR &= ~(0b1<<extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8003a06:	4b8b      	ldr	r3, [pc, #556]	; (8003c34 <extInt_Config+0xe18>)
 8003a08:	68db      	ldr	r3, [r3, #12]
 8003a0a:	687a      	ldr	r2, [r7, #4]
 8003a0c:	6812      	ldr	r2, [r2, #0]
 8003a0e:	7812      	ldrb	r2, [r2, #0]
 8003a10:	4611      	mov	r1, r2
 8003a12:	2201      	movs	r2, #1
 8003a14:	408a      	lsls	r2, r1
 8003a16:	43d2      	mvns	r2, r2
 8003a18:	4611      	mov	r1, r2
 8003a1a:	4a86      	ldr	r2, [pc, #536]	; (8003c34 <extInt_Config+0xe18>)
 8003a1c:	400b      	ands	r3, r1
 8003a1e:	60d3      	str	r3, [r2, #12]
		EXTI->RTSR &= ~(0b1<<extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8003a20:	4b84      	ldr	r3, [pc, #528]	; (8003c34 <extInt_Config+0xe18>)
 8003a22:	689b      	ldr	r3, [r3, #8]
 8003a24:	687a      	ldr	r2, [r7, #4]
 8003a26:	6812      	ldr	r2, [r2, #0]
 8003a28:	7812      	ldrb	r2, [r2, #0]
 8003a2a:	4611      	mov	r1, r2
 8003a2c:	2201      	movs	r2, #1
 8003a2e:	408a      	lsls	r2, r1
 8003a30:	43d2      	mvns	r2, r2
 8003a32:	4611      	mov	r1, r2
 8003a34:	4a7f      	ldr	r2, [pc, #508]	; (8003c34 <extInt_Config+0xe18>)
 8003a36:	400b      	ands	r3, r1
 8003a38:	6093      	str	r3, [r2, #8]
		EXTI->RTSR |= (0b1<<extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8003a3a:	4b7e      	ldr	r3, [pc, #504]	; (8003c34 <extInt_Config+0xe18>)
 8003a3c:	689b      	ldr	r3, [r3, #8]
 8003a3e:	687a      	ldr	r2, [r7, #4]
 8003a40:	6812      	ldr	r2, [r2, #0]
 8003a42:	7812      	ldrb	r2, [r2, #0]
 8003a44:	4611      	mov	r1, r2
 8003a46:	2201      	movs	r2, #1
 8003a48:	408a      	lsls	r2, r1
 8003a4a:	4611      	mov	r1, r2
 8003a4c:	4a79      	ldr	r2, [pc, #484]	; (8003c34 <extInt_Config+0xe18>)
 8003a4e:	430b      	orrs	r3, r1
 8003a50:	6093      	str	r3, [r2, #8]
 8003a52:	e05c      	b.n	8003b0e <extInt_Config+0xcf2>
	}
	else if (extiConfig->edgeType == EXTERNAL_INTERRUPP_FALLING_EDGE)
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	791b      	ldrb	r3, [r3, #4]
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d126      	bne.n	8003aaa <extInt_Config+0xc8e>
	{
		EXTI->FTSR &= ~(0b1<<extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8003a5c:	4b75      	ldr	r3, [pc, #468]	; (8003c34 <extInt_Config+0xe18>)
 8003a5e:	68db      	ldr	r3, [r3, #12]
 8003a60:	687a      	ldr	r2, [r7, #4]
 8003a62:	6812      	ldr	r2, [r2, #0]
 8003a64:	7812      	ldrb	r2, [r2, #0]
 8003a66:	4611      	mov	r1, r2
 8003a68:	2201      	movs	r2, #1
 8003a6a:	408a      	lsls	r2, r1
 8003a6c:	43d2      	mvns	r2, r2
 8003a6e:	4611      	mov	r1, r2
 8003a70:	4a70      	ldr	r2, [pc, #448]	; (8003c34 <extInt_Config+0xe18>)
 8003a72:	400b      	ands	r3, r1
 8003a74:	60d3      	str	r3, [r2, #12]
		EXTI->RTSR &= ~(0b1<<extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8003a76:	4b6f      	ldr	r3, [pc, #444]	; (8003c34 <extInt_Config+0xe18>)
 8003a78:	689b      	ldr	r3, [r3, #8]
 8003a7a:	687a      	ldr	r2, [r7, #4]
 8003a7c:	6812      	ldr	r2, [r2, #0]
 8003a7e:	7812      	ldrb	r2, [r2, #0]
 8003a80:	4611      	mov	r1, r2
 8003a82:	2201      	movs	r2, #1
 8003a84:	408a      	lsls	r2, r1
 8003a86:	43d2      	mvns	r2, r2
 8003a88:	4611      	mov	r1, r2
 8003a8a:	4a6a      	ldr	r2, [pc, #424]	; (8003c34 <extInt_Config+0xe18>)
 8003a8c:	400b      	ands	r3, r1
 8003a8e:	6093      	str	r3, [r2, #8]
		EXTI->FTSR |= (0b1<<extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8003a90:	4b68      	ldr	r3, [pc, #416]	; (8003c34 <extInt_Config+0xe18>)
 8003a92:	68db      	ldr	r3, [r3, #12]
 8003a94:	687a      	ldr	r2, [r7, #4]
 8003a96:	6812      	ldr	r2, [r2, #0]
 8003a98:	7812      	ldrb	r2, [r2, #0]
 8003a9a:	4611      	mov	r1, r2
 8003a9c:	2201      	movs	r2, #1
 8003a9e:	408a      	lsls	r2, r1
 8003aa0:	4611      	mov	r1, r2
 8003aa2:	4a64      	ldr	r2, [pc, #400]	; (8003c34 <extInt_Config+0xe18>)
 8003aa4:	430b      	orrs	r3, r1
 8003aa6:	60d3      	str	r3, [r2, #12]
 8003aa8:	e031      	b.n	8003b0e <extInt_Config+0xcf2>

	}
	else
	{
		EXTI->FTSR &= ~(0b1<<extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8003aaa:	4b62      	ldr	r3, [pc, #392]	; (8003c34 <extInt_Config+0xe18>)
 8003aac:	68db      	ldr	r3, [r3, #12]
 8003aae:	687a      	ldr	r2, [r7, #4]
 8003ab0:	6812      	ldr	r2, [r2, #0]
 8003ab2:	7812      	ldrb	r2, [r2, #0]
 8003ab4:	4611      	mov	r1, r2
 8003ab6:	2201      	movs	r2, #1
 8003ab8:	408a      	lsls	r2, r1
 8003aba:	43d2      	mvns	r2, r2
 8003abc:	4611      	mov	r1, r2
 8003abe:	4a5d      	ldr	r2, [pc, #372]	; (8003c34 <extInt_Config+0xe18>)
 8003ac0:	400b      	ands	r3, r1
 8003ac2:	60d3      	str	r3, [r2, #12]
		EXTI->RTSR &= ~(0b1<<extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8003ac4:	4b5b      	ldr	r3, [pc, #364]	; (8003c34 <extInt_Config+0xe18>)
 8003ac6:	689b      	ldr	r3, [r3, #8]
 8003ac8:	687a      	ldr	r2, [r7, #4]
 8003aca:	6812      	ldr	r2, [r2, #0]
 8003acc:	7812      	ldrb	r2, [r2, #0]
 8003ace:	4611      	mov	r1, r2
 8003ad0:	2201      	movs	r2, #1
 8003ad2:	408a      	lsls	r2, r1
 8003ad4:	43d2      	mvns	r2, r2
 8003ad6:	4611      	mov	r1, r2
 8003ad8:	4a56      	ldr	r2, [pc, #344]	; (8003c34 <extInt_Config+0xe18>)
 8003ada:	400b      	ands	r3, r1
 8003adc:	6093      	str	r3, [r2, #8]
		EXTI->FTSR |= (0b1<<extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8003ade:	4b55      	ldr	r3, [pc, #340]	; (8003c34 <extInt_Config+0xe18>)
 8003ae0:	68db      	ldr	r3, [r3, #12]
 8003ae2:	687a      	ldr	r2, [r7, #4]
 8003ae4:	6812      	ldr	r2, [r2, #0]
 8003ae6:	7812      	ldrb	r2, [r2, #0]
 8003ae8:	4611      	mov	r1, r2
 8003aea:	2201      	movs	r2, #1
 8003aec:	408a      	lsls	r2, r1
 8003aee:	4611      	mov	r1, r2
 8003af0:	4a50      	ldr	r2, [pc, #320]	; (8003c34 <extInt_Config+0xe18>)
 8003af2:	430b      	orrs	r3, r1
 8003af4:	60d3      	str	r3, [r2, #12]
		EXTI->RTSR |= (0b1<<extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8003af6:	4b4f      	ldr	r3, [pc, #316]	; (8003c34 <extInt_Config+0xe18>)
 8003af8:	689b      	ldr	r3, [r3, #8]
 8003afa:	687a      	ldr	r2, [r7, #4]
 8003afc:	6812      	ldr	r2, [r2, #0]
 8003afe:	7812      	ldrb	r2, [r2, #0]
 8003b00:	4611      	mov	r1, r2
 8003b02:	2201      	movs	r2, #1
 8003b04:	408a      	lsls	r2, r1
 8003b06:	4611      	mov	r1, r2
 8003b08:	4a4a      	ldr	r2, [pc, #296]	; (8003c34 <extInt_Config+0xe18>)
 8003b0a:	430b      	orrs	r3, r1
 8003b0c:	6093      	str	r3, [r2, #8]
	}
	//-------b)Activamos la interrupcion del EXTIx---------
	EXTI->IMR &= ~(0b1<<extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8003b0e:	4b49      	ldr	r3, [pc, #292]	; (8003c34 <extInt_Config+0xe18>)
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	687a      	ldr	r2, [r7, #4]
 8003b14:	6812      	ldr	r2, [r2, #0]
 8003b16:	7812      	ldrb	r2, [r2, #0]
 8003b18:	4611      	mov	r1, r2
 8003b1a:	2201      	movs	r2, #1
 8003b1c:	408a      	lsls	r2, r1
 8003b1e:	43d2      	mvns	r2, r2
 8003b20:	4611      	mov	r1, r2
 8003b22:	4a44      	ldr	r2, [pc, #272]	; (8003c34 <extInt_Config+0xe18>)
 8003b24:	400b      	ands	r3, r1
 8003b26:	6013      	str	r3, [r2, #0]
	EXTI->IMR |= (0b1<<extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8003b28:	4b42      	ldr	r3, [pc, #264]	; (8003c34 <extInt_Config+0xe18>)
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	687a      	ldr	r2, [r7, #4]
 8003b2e:	6812      	ldr	r2, [r2, #0]
 8003b30:	7812      	ldrb	r2, [r2, #0]
 8003b32:	4611      	mov	r1, r2
 8003b34:	2201      	movs	r2, #1
 8003b36:	408a      	lsls	r2, r1
 8003b38:	4611      	mov	r1, r2
 8003b3a:	4a3e      	ldr	r2, [pc, #248]	; (8003c34 <extInt_Config+0xe18>)
 8003b3c:	430b      	orrs	r3, r1
 8003b3e:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003b40:	b672      	cpsid	i
}
 8003b42:	bf00      	nop
	//------------4)Activamos el canal del sistema NVIC para indicar la interrupcion--------------------------

	//4.a Desabilitamos las interrupciones globales
	__disable_irq();
	//4.b Activamos el canal del NVIC para la interrupcion del EXTIx seleccionado
	switch(extiConfig->pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	781b      	ldrb	r3, [r3, #0]
 8003b4a:	2b0f      	cmp	r3, #15
 8003b4c:	d862      	bhi.n	8003c14 <extInt_Config+0xdf8>
 8003b4e:	a201      	add	r2, pc, #4	; (adr r2, 8003b54 <extInt_Config+0xd38>)
 8003b50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b54:	08003b95 	.word	0x08003b95
 8003b58:	08003b9d 	.word	0x08003b9d
 8003b5c:	08003ba5 	.word	0x08003ba5
 8003b60:	08003bad 	.word	0x08003bad
 8003b64:	08003bb5 	.word	0x08003bb5
 8003b68:	08003bbd 	.word	0x08003bbd
 8003b6c:	08003bc5 	.word	0x08003bc5
 8003b70:	08003bcd 	.word	0x08003bcd
 8003b74:	08003bd5 	.word	0x08003bd5
 8003b78:	08003bdd 	.word	0x08003bdd
 8003b7c:	08003be5 	.word	0x08003be5
 8003b80:	08003bed 	.word	0x08003bed
 8003b84:	08003bf5 	.word	0x08003bf5
 8003b88:	08003bfd 	.word	0x08003bfd
 8003b8c:	08003c05 	.word	0x08003c05
 8003b90:	08003c0d 	.word	0x08003c0d
	{

	case 0:
	{
		NVIC_EnableIRQ(EXTI0_IRQn);
 8003b94:	2006      	movs	r0, #6
 8003b96:	f7ff f923 	bl	8002de0 <__NVIC_EnableIRQ>
		break;
 8003b9a:	e03c      	b.n	8003c16 <extInt_Config+0xdfa>
	}

	case 1:
	{
		NVIC_EnableIRQ(EXTI1_IRQn);
 8003b9c:	2007      	movs	r0, #7
 8003b9e:	f7ff f91f 	bl	8002de0 <__NVIC_EnableIRQ>
		break;
 8003ba2:	e038      	b.n	8003c16 <extInt_Config+0xdfa>
	}

	case 2:
	{
		NVIC_EnableIRQ(EXTI2_IRQn);
 8003ba4:	2008      	movs	r0, #8
 8003ba6:	f7ff f91b 	bl	8002de0 <__NVIC_EnableIRQ>
		break;
 8003baa:	e034      	b.n	8003c16 <extInt_Config+0xdfa>
	}

	case 3:
	{
		NVIC_EnableIRQ(EXTI3_IRQn);
 8003bac:	2009      	movs	r0, #9
 8003bae:	f7ff f917 	bl	8002de0 <__NVIC_EnableIRQ>
		break;
 8003bb2:	e030      	b.n	8003c16 <extInt_Config+0xdfa>
	}

	case 4:
	{
		NVIC_EnableIRQ(EXTI4_IRQn);
 8003bb4:	200a      	movs	r0, #10
 8003bb6:	f7ff f913 	bl	8002de0 <__NVIC_EnableIRQ>
		break;
 8003bba:	e02c      	b.n	8003c16 <extInt_Config+0xdfa>
	}

	case 5:
	{
		NVIC_EnableIRQ(EXTI9_5_IRQn);
 8003bbc:	2017      	movs	r0, #23
 8003bbe:	f7ff f90f 	bl	8002de0 <__NVIC_EnableIRQ>
		break;
 8003bc2:	e028      	b.n	8003c16 <extInt_Config+0xdfa>
	}

	case 6:
	{
		NVIC_EnableIRQ(EXTI9_5_IRQn);
 8003bc4:	2017      	movs	r0, #23
 8003bc6:	f7ff f90b 	bl	8002de0 <__NVIC_EnableIRQ>
		break;
 8003bca:	e024      	b.n	8003c16 <extInt_Config+0xdfa>
	}

	case 7:
	{
		NVIC_EnableIRQ(EXTI9_5_IRQn);
 8003bcc:	2017      	movs	r0, #23
 8003bce:	f7ff f907 	bl	8002de0 <__NVIC_EnableIRQ>
		break;
 8003bd2:	e020      	b.n	8003c16 <extInt_Config+0xdfa>
	}

	case 8:
	{
		NVIC_EnableIRQ(EXTI9_5_IRQn);
 8003bd4:	2017      	movs	r0, #23
 8003bd6:	f7ff f903 	bl	8002de0 <__NVIC_EnableIRQ>
		break;
 8003bda:	e01c      	b.n	8003c16 <extInt_Config+0xdfa>
	}

	case 9:
	{
		NVIC_EnableIRQ(EXTI9_5_IRQn);
 8003bdc:	2017      	movs	r0, #23
 8003bde:	f7ff f8ff 	bl	8002de0 <__NVIC_EnableIRQ>
		break;
 8003be2:	e018      	b.n	8003c16 <extInt_Config+0xdfa>
	}

	case 10:
	{
		NVIC_EnableIRQ(EXTI15_10_IRQn);
 8003be4:	2028      	movs	r0, #40	; 0x28
 8003be6:	f7ff f8fb 	bl	8002de0 <__NVIC_EnableIRQ>
		break;
 8003bea:	e014      	b.n	8003c16 <extInt_Config+0xdfa>
	}

	case 11:
	{
		NVIC_EnableIRQ(EXTI15_10_IRQn);
 8003bec:	2028      	movs	r0, #40	; 0x28
 8003bee:	f7ff f8f7 	bl	8002de0 <__NVIC_EnableIRQ>
		break;
 8003bf2:	e010      	b.n	8003c16 <extInt_Config+0xdfa>
	}

	case 12:
	{
		NVIC_EnableIRQ(EXTI15_10_IRQn);
 8003bf4:	2028      	movs	r0, #40	; 0x28
 8003bf6:	f7ff f8f3 	bl	8002de0 <__NVIC_EnableIRQ>
		break;
 8003bfa:	e00c      	b.n	8003c16 <extInt_Config+0xdfa>
	}

	case 13:
	{
		NVIC_EnableIRQ(EXTI15_10_IRQn);
 8003bfc:	2028      	movs	r0, #40	; 0x28
 8003bfe:	f7ff f8ef 	bl	8002de0 <__NVIC_EnableIRQ>
		break;
 8003c02:	e008      	b.n	8003c16 <extInt_Config+0xdfa>
	}

	case 14:
	{
		NVIC_EnableIRQ(EXTI15_10_IRQn);
 8003c04:	2028      	movs	r0, #40	; 0x28
 8003c06:	f7ff f8eb 	bl	8002de0 <__NVIC_EnableIRQ>
		break;
 8003c0a:	e004      	b.n	8003c16 <extInt_Config+0xdfa>
	}

	case 15:
	{
		NVIC_EnableIRQ(EXTI15_10_IRQn);
 8003c0c:	2028      	movs	r0, #40	; 0x28
 8003c0e:	f7ff f8e7 	bl	8002de0 <__NVIC_EnableIRQ>
		break;
 8003c12:	e000      	b.n	8003c16 <extInt_Config+0xdfa>
	}

	default: {
		break;
 8003c14:	bf00      	nop
  __ASM volatile ("cpsie i" : : : "memory");
 8003c16:	b662      	cpsie	i
}
 8003c18:	bf00      	nop
	}
	}
	//4.c Activamos las interrupciones globales
	__enable_irq();
}
 8003c1a:	bf00      	nop
 8003c1c:	3708      	adds	r7, #8
 8003c1e:	46bd      	mov	sp, r7
 8003c20:	bd80      	pop	{r7, pc}
 8003c22:	bf00      	nop
 8003c24:	40020c00 	.word	0x40020c00
 8003c28:	40013800 	.word	0x40013800
 8003c2c:	40021000 	.word	0x40021000
 8003c30:	40021c00 	.word	0x40021c00
 8003c34:	40013c00 	.word	0x40013c00

08003c38 <callback_extInt0>:
	__enable_irq();
}


//Definimos las funciones para cuando se genera una interrupcion del EXTIx, 0-15
__attribute__ ((weak)) void callback_extInt0(void){
 8003c38:	b480      	push	{r7}
 8003c3a:	af00      	add	r7, sp, #0
	__NOP();
 8003c3c:	bf00      	nop
}
 8003c3e:	bf00      	nop
 8003c40:	46bd      	mov	sp, r7
 8003c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c46:	4770      	bx	lr

08003c48 <callback_extInt2>:

__attribute__ ((weak)) void callback_extInt1(void){
	__NOP();
}

__attribute__ ((weak)) void callback_extInt2(void){
 8003c48:	b480      	push	{r7}
 8003c4a:	af00      	add	r7, sp, #0
	__NOP();
 8003c4c:	bf00      	nop
}
 8003c4e:	bf00      	nop
 8003c50:	46bd      	mov	sp, r7
 8003c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c56:	4770      	bx	lr

08003c58 <callback_extInt4>:

__attribute__ ((weak)) void callback_extInt3(void){
	__NOP();
}

__attribute__ ((weak)) void callback_extInt4(void){
 8003c58:	b480      	push	{r7}
 8003c5a:	af00      	add	r7, sp, #0
	__NOP();
 8003c5c:	bf00      	nop
}
 8003c5e:	bf00      	nop
 8003c60:	46bd      	mov	sp, r7
 8003c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c66:	4770      	bx	lr

08003c68 <callback_extInt5>:

__attribute__ ((weak)) void callback_extInt5(void){
 8003c68:	b480      	push	{r7}
 8003c6a:	af00      	add	r7, sp, #0
	__NOP();
 8003c6c:	bf00      	nop
}
 8003c6e:	bf00      	nop
 8003c70:	46bd      	mov	sp, r7
 8003c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c76:	4770      	bx	lr

08003c78 <callback_extInt6>:

__attribute__ ((weak)) void callback_extInt6(void){
 8003c78:	b480      	push	{r7}
 8003c7a:	af00      	add	r7, sp, #0
	__NOP();
 8003c7c:	bf00      	nop
}
 8003c7e:	bf00      	nop
 8003c80:	46bd      	mov	sp, r7
 8003c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c86:	4770      	bx	lr

08003c88 <callback_extInt7>:

__attribute__ ((weak)) void callback_extInt7(void){
 8003c88:	b480      	push	{r7}
 8003c8a:	af00      	add	r7, sp, #0
	__NOP();
 8003c8c:	bf00      	nop
}
 8003c8e:	bf00      	nop
 8003c90:	46bd      	mov	sp, r7
 8003c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c96:	4770      	bx	lr

08003c98 <callback_extInt8>:

__attribute__ ((weak)) void callback_extInt8(void){
 8003c98:	b480      	push	{r7}
 8003c9a:	af00      	add	r7, sp, #0
	__NOP();
 8003c9c:	bf00      	nop
}
 8003c9e:	bf00      	nop
 8003ca0:	46bd      	mov	sp, r7
 8003ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca6:	4770      	bx	lr

08003ca8 <callback_extInt9>:

__attribute__ ((weak)) void callback_extInt9(void){
 8003ca8:	b480      	push	{r7}
 8003caa:	af00      	add	r7, sp, #0
	__NOP();
 8003cac:	bf00      	nop
}
 8003cae:	bf00      	nop
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb6:	4770      	bx	lr

08003cb8 <callback_extInt10>:

__attribute__ ((weak)) void callback_extInt10(void){
 8003cb8:	b480      	push	{r7}
 8003cba:	af00      	add	r7, sp, #0
	__NOP();
 8003cbc:	bf00      	nop
}
 8003cbe:	bf00      	nop
 8003cc0:	46bd      	mov	sp, r7
 8003cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc6:	4770      	bx	lr

08003cc8 <callback_extInt11>:

__attribute__ ((weak)) void callback_extInt11(void){
 8003cc8:	b480      	push	{r7}
 8003cca:	af00      	add	r7, sp, #0
	__NOP();
 8003ccc:	bf00      	nop
}
 8003cce:	bf00      	nop
 8003cd0:	46bd      	mov	sp, r7
 8003cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd6:	4770      	bx	lr

08003cd8 <callback_extInt12>:

__attribute__ ((weak)) void callback_extInt12(void){
 8003cd8:	b480      	push	{r7}
 8003cda:	af00      	add	r7, sp, #0
	__NOP();
 8003cdc:	bf00      	nop
}
 8003cde:	bf00      	nop
 8003ce0:	46bd      	mov	sp, r7
 8003ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce6:	4770      	bx	lr

08003ce8 <callback_extInt13>:

__attribute__ ((weak)) void callback_extInt13(void){
 8003ce8:	b480      	push	{r7}
 8003cea:	af00      	add	r7, sp, #0
	__NOP();
 8003cec:	bf00      	nop
}
 8003cee:	bf00      	nop
 8003cf0:	46bd      	mov	sp, r7
 8003cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf6:	4770      	bx	lr

08003cf8 <callback_extInt14>:

__attribute__ ((weak)) void callback_extInt14(void){
 8003cf8:	b480      	push	{r7}
 8003cfa:	af00      	add	r7, sp, #0
	__NOP();
 8003cfc:	bf00      	nop
}
 8003cfe:	bf00      	nop
 8003d00:	46bd      	mov	sp, r7
 8003d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d06:	4770      	bx	lr

08003d08 <callback_extInt15>:

__attribute__ ((weak)) void callback_extInt15(void){
 8003d08:	b480      	push	{r7}
 8003d0a:	af00      	add	r7, sp, #0
	__NOP();
 8003d0c:	bf00      	nop
}
 8003d0e:	bf00      	nop
 8003d10:	46bd      	mov	sp, r7
 8003d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d16:	4770      	bx	lr

08003d18 <EXTI0_IRQHandler>:
 */
//Registro: PR    Registro donde los primeros 16 bit corresponden a los 16 EXTIx

//--------------a) EXTI0, EXTI1, EXTI2, EXTI3, EXTI4 --------------
void EXTI0_IRQHandler(void)
{
 8003d18:	b580      	push	{r7, lr}
 8003d1a:	af00      	add	r7, sp, #0
	//Evaluamos si la interrupcion que se lanza corresponde al EXTI0
	if (EXTI->PR & EXTI_PR_PR0)
 8003d1c:	4b08      	ldr	r3, [pc, #32]	; (8003d40 <EXTI0_IRQHandler+0x28>)
 8003d1e:	695b      	ldr	r3, [r3, #20]
 8003d20:	f003 0301 	and.w	r3, r3, #1
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d008      	beq.n	8003d3a <EXTI0_IRQHandler+0x22>
	{
		EXTI->PR |= (EXTI_PR_PR0); //Limpiamos la bandera
 8003d28:	4b05      	ldr	r3, [pc, #20]	; (8003d40 <EXTI0_IRQHandler+0x28>)
 8003d2a:	695b      	ldr	r3, [r3, #20]
 8003d2c:	4a04      	ldr	r2, [pc, #16]	; (8003d40 <EXTI0_IRQHandler+0x28>)
 8003d2e:	f043 0301 	orr.w	r3, r3, #1
 8003d32:	6153      	str	r3, [r2, #20]
		callback_extInt0();			//Ejecutamos la ISR
 8003d34:	f7ff ff80 	bl	8003c38 <callback_extInt0>
	}
	else
	{
		__NOP();
	}
}
 8003d38:	e000      	b.n	8003d3c <EXTI0_IRQHandler+0x24>
		__NOP();
 8003d3a:	bf00      	nop
}
 8003d3c:	bf00      	nop
 8003d3e:	bd80      	pop	{r7, pc}
 8003d40:	40013c00 	.word	0x40013c00

08003d44 <EXTI1_IRQHandler>:

void EXTI1_IRQHandler(void)
{
 8003d44:	b580      	push	{r7, lr}
 8003d46:	af00      	add	r7, sp, #0
	//Evaluamos si la interrupcion que se lanza corresponde al EXTI1
	if (EXTI->PR & EXTI_PR_PR1)
 8003d48:	4b08      	ldr	r3, [pc, #32]	; (8003d6c <EXTI1_IRQHandler+0x28>)
 8003d4a:	695b      	ldr	r3, [r3, #20]
 8003d4c:	f003 0302 	and.w	r3, r3, #2
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d008      	beq.n	8003d66 <EXTI1_IRQHandler+0x22>
	{
		EXTI->PR |= (EXTI_PR_PR1); //Limpiamos la bandera
 8003d54:	4b05      	ldr	r3, [pc, #20]	; (8003d6c <EXTI1_IRQHandler+0x28>)
 8003d56:	695b      	ldr	r3, [r3, #20]
 8003d58:	4a04      	ldr	r2, [pc, #16]	; (8003d6c <EXTI1_IRQHandler+0x28>)
 8003d5a:	f043 0302 	orr.w	r3, r3, #2
 8003d5e:	6153      	str	r3, [r2, #20]
		callback_extInt1();			//Ejecutamos la ISR
 8003d60:	f7fd ff82 	bl	8001c68 <callback_extInt1>
	}
	else
	{
		__NOP();
	}
}
 8003d64:	e000      	b.n	8003d68 <EXTI1_IRQHandler+0x24>
		__NOP();
 8003d66:	bf00      	nop
}
 8003d68:	bf00      	nop
 8003d6a:	bd80      	pop	{r7, pc}
 8003d6c:	40013c00 	.word	0x40013c00

08003d70 <EXTI2_IRQHandler>:

void EXTI2_IRQHandler(void)
{
 8003d70:	b580      	push	{r7, lr}
 8003d72:	af00      	add	r7, sp, #0
	//Evaluamos si la interrupcion que se lanza corresponde al EXTI2
	if (EXTI->PR & EXTI_PR_PR2)
 8003d74:	4b08      	ldr	r3, [pc, #32]	; (8003d98 <EXTI2_IRQHandler+0x28>)
 8003d76:	695b      	ldr	r3, [r3, #20]
 8003d78:	f003 0304 	and.w	r3, r3, #4
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d008      	beq.n	8003d92 <EXTI2_IRQHandler+0x22>
	{
		EXTI->PR |= (EXTI_PR_PR2); //Limpiamos la bandera
 8003d80:	4b05      	ldr	r3, [pc, #20]	; (8003d98 <EXTI2_IRQHandler+0x28>)
 8003d82:	695b      	ldr	r3, [r3, #20]
 8003d84:	4a04      	ldr	r2, [pc, #16]	; (8003d98 <EXTI2_IRQHandler+0x28>)
 8003d86:	f043 0304 	orr.w	r3, r3, #4
 8003d8a:	6153      	str	r3, [r2, #20]
		callback_extInt2();			//Ejecutamos la ISR
 8003d8c:	f7ff ff5c 	bl	8003c48 <callback_extInt2>
	}
	else
	{
		__NOP();
	}
}
 8003d90:	e000      	b.n	8003d94 <EXTI2_IRQHandler+0x24>
		__NOP();
 8003d92:	bf00      	nop
}
 8003d94:	bf00      	nop
 8003d96:	bd80      	pop	{r7, pc}
 8003d98:	40013c00 	.word	0x40013c00

08003d9c <EXTI3_IRQHandler>:

void EXTI3_IRQHandler(void)
{
 8003d9c:	b580      	push	{r7, lr}
 8003d9e:	af00      	add	r7, sp, #0
	//Evaluamos si la interrupcion que se lanza corresponde al EXTI3
	if (EXTI->PR & EXTI_PR_PR3)
 8003da0:	4b08      	ldr	r3, [pc, #32]	; (8003dc4 <EXTI3_IRQHandler+0x28>)
 8003da2:	695b      	ldr	r3, [r3, #20]
 8003da4:	f003 0308 	and.w	r3, r3, #8
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d008      	beq.n	8003dbe <EXTI3_IRQHandler+0x22>
	{
		EXTI->PR |= (EXTI_PR_PR3); //Limpiamos la bandera
 8003dac:	4b05      	ldr	r3, [pc, #20]	; (8003dc4 <EXTI3_IRQHandler+0x28>)
 8003dae:	695b      	ldr	r3, [r3, #20]
 8003db0:	4a04      	ldr	r2, [pc, #16]	; (8003dc4 <EXTI3_IRQHandler+0x28>)
 8003db2:	f043 0308 	orr.w	r3, r3, #8
 8003db6:	6153      	str	r3, [r2, #20]
		callback_extInt3();			//Ejecutamos la ISR
 8003db8:	f7fd ffa8 	bl	8001d0c <callback_extInt3>
	}
	else
	{
		__NOP();
	}
}
 8003dbc:	e000      	b.n	8003dc0 <EXTI3_IRQHandler+0x24>
		__NOP();
 8003dbe:	bf00      	nop
}
 8003dc0:	bf00      	nop
 8003dc2:	bd80      	pop	{r7, pc}
 8003dc4:	40013c00 	.word	0x40013c00

08003dc8 <EXTI4_IRQHandler>:

void EXTI4_IRQHandler(void)
{
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	af00      	add	r7, sp, #0
	//Evaluamos si la interrupcion que se lanza corresponde al EXTI4
	if (EXTI->PR & EXTI_PR_PR4)
 8003dcc:	4b08      	ldr	r3, [pc, #32]	; (8003df0 <EXTI4_IRQHandler+0x28>)
 8003dce:	695b      	ldr	r3, [r3, #20]
 8003dd0:	f003 0310 	and.w	r3, r3, #16
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d008      	beq.n	8003dea <EXTI4_IRQHandler+0x22>
	{
		EXTI->PR |= (EXTI_PR_PR4); //Limpiamos la bandera
 8003dd8:	4b05      	ldr	r3, [pc, #20]	; (8003df0 <EXTI4_IRQHandler+0x28>)
 8003dda:	695b      	ldr	r3, [r3, #20]
 8003ddc:	4a04      	ldr	r2, [pc, #16]	; (8003df0 <EXTI4_IRQHandler+0x28>)
 8003dde:	f043 0310 	orr.w	r3, r3, #16
 8003de2:	6153      	str	r3, [r2, #20]
		callback_extInt4();			//Ejecutamos la ISR
 8003de4:	f7ff ff38 	bl	8003c58 <callback_extInt4>
	}
	else
	{
		__NOP();
	}
}
 8003de8:	e000      	b.n	8003dec <EXTI4_IRQHandler+0x24>
		__NOP();
 8003dea:	bf00      	nop
}
 8003dec:	bf00      	nop
 8003dee:	bd80      	pop	{r7, pc}
 8003df0:	40013c00 	.word	0x40013c00

08003df4 <EXTI9_5_IRQHandler>:

//--------------b) EXTI9-5--------------
void EXTI9_5_IRQHandler(void)
{
 8003df4:	b580      	push	{r7, lr}
 8003df6:	af00      	add	r7, sp, #0
	//Evaluamos si la interrupcion que se lanza corresponde al EXTI5
	if (EXTI->PR & EXTI_PR_PR5)
 8003df8:	4b26      	ldr	r3, [pc, #152]	; (8003e94 <EXTI9_5_IRQHandler+0xa0>)
 8003dfa:	695b      	ldr	r3, [r3, #20]
 8003dfc:	f003 0320 	and.w	r3, r3, #32
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d008      	beq.n	8003e16 <EXTI9_5_IRQHandler+0x22>
	{
		EXTI->PR |= (EXTI_PR_PR5); //Limpiamos la bandera
 8003e04:	4b23      	ldr	r3, [pc, #140]	; (8003e94 <EXTI9_5_IRQHandler+0xa0>)
 8003e06:	695b      	ldr	r3, [r3, #20]
 8003e08:	4a22      	ldr	r2, [pc, #136]	; (8003e94 <EXTI9_5_IRQHandler+0xa0>)
 8003e0a:	f043 0320 	orr.w	r3, r3, #32
 8003e0e:	6153      	str	r3, [r2, #20]
		callback_extInt5();			//Ejecutamos la ISR
 8003e10:	f7ff ff2a 	bl	8003c68 <callback_extInt5>
	}
	else
	{
		__NOP();
	}
}
 8003e14:	e03c      	b.n	8003e90 <EXTI9_5_IRQHandler+0x9c>
	else if(EXTI->PR & EXTI_PR_PR6)
 8003e16:	4b1f      	ldr	r3, [pc, #124]	; (8003e94 <EXTI9_5_IRQHandler+0xa0>)
 8003e18:	695b      	ldr	r3, [r3, #20]
 8003e1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d008      	beq.n	8003e34 <EXTI9_5_IRQHandler+0x40>
		EXTI->PR |= (EXTI_PR_PR6); //Limpiamos la bandera
 8003e22:	4b1c      	ldr	r3, [pc, #112]	; (8003e94 <EXTI9_5_IRQHandler+0xa0>)
 8003e24:	695b      	ldr	r3, [r3, #20]
 8003e26:	4a1b      	ldr	r2, [pc, #108]	; (8003e94 <EXTI9_5_IRQHandler+0xa0>)
 8003e28:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003e2c:	6153      	str	r3, [r2, #20]
		callback_extInt6();			//Ejecutamos la ISR
 8003e2e:	f7ff ff23 	bl	8003c78 <callback_extInt6>
}
 8003e32:	e02d      	b.n	8003e90 <EXTI9_5_IRQHandler+0x9c>
	else if(EXTI->PR & EXTI_PR_PR7)
 8003e34:	4b17      	ldr	r3, [pc, #92]	; (8003e94 <EXTI9_5_IRQHandler+0xa0>)
 8003e36:	695b      	ldr	r3, [r3, #20]
 8003e38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d008      	beq.n	8003e52 <EXTI9_5_IRQHandler+0x5e>
		EXTI->PR |= (EXTI_PR_PR7); //Limpiamos la bandera
 8003e40:	4b14      	ldr	r3, [pc, #80]	; (8003e94 <EXTI9_5_IRQHandler+0xa0>)
 8003e42:	695b      	ldr	r3, [r3, #20]
 8003e44:	4a13      	ldr	r2, [pc, #76]	; (8003e94 <EXTI9_5_IRQHandler+0xa0>)
 8003e46:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e4a:	6153      	str	r3, [r2, #20]
		callback_extInt7();			//Ejecutamos la ISR
 8003e4c:	f7ff ff1c 	bl	8003c88 <callback_extInt7>
}
 8003e50:	e01e      	b.n	8003e90 <EXTI9_5_IRQHandler+0x9c>
	else if(EXTI->PR & EXTI_PR_PR8)
 8003e52:	4b10      	ldr	r3, [pc, #64]	; (8003e94 <EXTI9_5_IRQHandler+0xa0>)
 8003e54:	695b      	ldr	r3, [r3, #20]
 8003e56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d008      	beq.n	8003e70 <EXTI9_5_IRQHandler+0x7c>
		EXTI->PR |= (EXTI_PR_PR8); //Limpiamos la bandera
 8003e5e:	4b0d      	ldr	r3, [pc, #52]	; (8003e94 <EXTI9_5_IRQHandler+0xa0>)
 8003e60:	695b      	ldr	r3, [r3, #20]
 8003e62:	4a0c      	ldr	r2, [pc, #48]	; (8003e94 <EXTI9_5_IRQHandler+0xa0>)
 8003e64:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e68:	6153      	str	r3, [r2, #20]
		callback_extInt8();			//Ejecutamos la ISR
 8003e6a:	f7ff ff15 	bl	8003c98 <callback_extInt8>
}
 8003e6e:	e00f      	b.n	8003e90 <EXTI9_5_IRQHandler+0x9c>
	else if(EXTI->PR & EXTI_PR_PR9)
 8003e70:	4b08      	ldr	r3, [pc, #32]	; (8003e94 <EXTI9_5_IRQHandler+0xa0>)
 8003e72:	695b      	ldr	r3, [r3, #20]
 8003e74:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d008      	beq.n	8003e8e <EXTI9_5_IRQHandler+0x9a>
		EXTI->PR |= (EXTI_PR_PR9); //Limpiamos la bandera
 8003e7c:	4b05      	ldr	r3, [pc, #20]	; (8003e94 <EXTI9_5_IRQHandler+0xa0>)
 8003e7e:	695b      	ldr	r3, [r3, #20]
 8003e80:	4a04      	ldr	r2, [pc, #16]	; (8003e94 <EXTI9_5_IRQHandler+0xa0>)
 8003e82:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003e86:	6153      	str	r3, [r2, #20]
		callback_extInt9();			//Ejecutamos la ISR
 8003e88:	f7ff ff0e 	bl	8003ca8 <callback_extInt9>
}
 8003e8c:	e000      	b.n	8003e90 <EXTI9_5_IRQHandler+0x9c>
		__NOP();
 8003e8e:	bf00      	nop
}
 8003e90:	bf00      	nop
 8003e92:	bd80      	pop	{r7, pc}
 8003e94:	40013c00 	.word	0x40013c00

08003e98 <EXTI15_10_IRQHandler>:

//--------------b) EXTI15-10--------------
void EXTI15_10_IRQHandler(void)
{
 8003e98:	b580      	push	{r7, lr}
 8003e9a:	af00      	add	r7, sp, #0
	//Evaluamos si la interrupcion que se lanza corresponde al EXTI10
	if (EXTI->PR & EXTI_PR_PR10)
 8003e9c:	4b2e      	ldr	r3, [pc, #184]	; (8003f58 <EXTI15_10_IRQHandler+0xc0>)
 8003e9e:	695b      	ldr	r3, [r3, #20]
 8003ea0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d008      	beq.n	8003eba <EXTI15_10_IRQHandler+0x22>
	{
		EXTI->PR |= (EXTI_PR_PR10); //Limpiamos la bandera
 8003ea8:	4b2b      	ldr	r3, [pc, #172]	; (8003f58 <EXTI15_10_IRQHandler+0xc0>)
 8003eaa:	695b      	ldr	r3, [r3, #20]
 8003eac:	4a2a      	ldr	r2, [pc, #168]	; (8003f58 <EXTI15_10_IRQHandler+0xc0>)
 8003eae:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003eb2:	6153      	str	r3, [r2, #20]
		callback_extInt10();			//Ejecutamos la ISR
 8003eb4:	f7ff ff00 	bl	8003cb8 <callback_extInt10>
	}
	else
	{
		__NOP();
	}
}
 8003eb8:	e04b      	b.n	8003f52 <EXTI15_10_IRQHandler+0xba>
	else if(EXTI->PR & EXTI_PR_PR11)
 8003eba:	4b27      	ldr	r3, [pc, #156]	; (8003f58 <EXTI15_10_IRQHandler+0xc0>)
 8003ebc:	695b      	ldr	r3, [r3, #20]
 8003ebe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d008      	beq.n	8003ed8 <EXTI15_10_IRQHandler+0x40>
		EXTI->PR |= (EXTI_PR_PR11); //Limpiamos la bandera
 8003ec6:	4b24      	ldr	r3, [pc, #144]	; (8003f58 <EXTI15_10_IRQHandler+0xc0>)
 8003ec8:	695b      	ldr	r3, [r3, #20]
 8003eca:	4a23      	ldr	r2, [pc, #140]	; (8003f58 <EXTI15_10_IRQHandler+0xc0>)
 8003ecc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003ed0:	6153      	str	r3, [r2, #20]
		callback_extInt11();			//Ejecutamos la ISR
 8003ed2:	f7ff fef9 	bl	8003cc8 <callback_extInt11>
}
 8003ed6:	e03c      	b.n	8003f52 <EXTI15_10_IRQHandler+0xba>
	else if(EXTI->PR & EXTI_PR_PR12)
 8003ed8:	4b1f      	ldr	r3, [pc, #124]	; (8003f58 <EXTI15_10_IRQHandler+0xc0>)
 8003eda:	695b      	ldr	r3, [r3, #20]
 8003edc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d008      	beq.n	8003ef6 <EXTI15_10_IRQHandler+0x5e>
		EXTI->PR |= (EXTI_PR_PR12); //Limpiamos la bandera
 8003ee4:	4b1c      	ldr	r3, [pc, #112]	; (8003f58 <EXTI15_10_IRQHandler+0xc0>)
 8003ee6:	695b      	ldr	r3, [r3, #20]
 8003ee8:	4a1b      	ldr	r2, [pc, #108]	; (8003f58 <EXTI15_10_IRQHandler+0xc0>)
 8003eea:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003eee:	6153      	str	r3, [r2, #20]
		callback_extInt12();			//Ejecutamos la ISR
 8003ef0:	f7ff fef2 	bl	8003cd8 <callback_extInt12>
}
 8003ef4:	e02d      	b.n	8003f52 <EXTI15_10_IRQHandler+0xba>
	else if(EXTI->PR & EXTI_PR_PR13)
 8003ef6:	4b18      	ldr	r3, [pc, #96]	; (8003f58 <EXTI15_10_IRQHandler+0xc0>)
 8003ef8:	695b      	ldr	r3, [r3, #20]
 8003efa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d008      	beq.n	8003f14 <EXTI15_10_IRQHandler+0x7c>
		EXTI->PR |= (EXTI_PR_PR13); //Limpiamos la bandera
 8003f02:	4b15      	ldr	r3, [pc, #84]	; (8003f58 <EXTI15_10_IRQHandler+0xc0>)
 8003f04:	695b      	ldr	r3, [r3, #20]
 8003f06:	4a14      	ldr	r2, [pc, #80]	; (8003f58 <EXTI15_10_IRQHandler+0xc0>)
 8003f08:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003f0c:	6153      	str	r3, [r2, #20]
		callback_extInt13();			//Ejecutamos la ISR
 8003f0e:	f7ff feeb 	bl	8003ce8 <callback_extInt13>
}
 8003f12:	e01e      	b.n	8003f52 <EXTI15_10_IRQHandler+0xba>
	else if(EXTI->PR & EXTI_PR_PR14)
 8003f14:	4b10      	ldr	r3, [pc, #64]	; (8003f58 <EXTI15_10_IRQHandler+0xc0>)
 8003f16:	695b      	ldr	r3, [r3, #20]
 8003f18:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d008      	beq.n	8003f32 <EXTI15_10_IRQHandler+0x9a>
		EXTI->PR |= (EXTI_PR_PR14); //Limpiamos la bandera
 8003f20:	4b0d      	ldr	r3, [pc, #52]	; (8003f58 <EXTI15_10_IRQHandler+0xc0>)
 8003f22:	695b      	ldr	r3, [r3, #20]
 8003f24:	4a0c      	ldr	r2, [pc, #48]	; (8003f58 <EXTI15_10_IRQHandler+0xc0>)
 8003f26:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003f2a:	6153      	str	r3, [r2, #20]
		callback_extInt14();			//Ejecutamos la ISR
 8003f2c:	f7ff fee4 	bl	8003cf8 <callback_extInt14>
}
 8003f30:	e00f      	b.n	8003f52 <EXTI15_10_IRQHandler+0xba>
	else if(EXTI->PR & EXTI_PR_PR15)
 8003f32:	4b09      	ldr	r3, [pc, #36]	; (8003f58 <EXTI15_10_IRQHandler+0xc0>)
 8003f34:	695b      	ldr	r3, [r3, #20]
 8003f36:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d008      	beq.n	8003f50 <EXTI15_10_IRQHandler+0xb8>
		EXTI->PR |= (EXTI_PR_PR15); //Limpiamos la bandera
 8003f3e:	4b06      	ldr	r3, [pc, #24]	; (8003f58 <EXTI15_10_IRQHandler+0xc0>)
 8003f40:	695b      	ldr	r3, [r3, #20]
 8003f42:	4a05      	ldr	r2, [pc, #20]	; (8003f58 <EXTI15_10_IRQHandler+0xc0>)
 8003f44:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003f48:	6153      	str	r3, [r2, #20]
		callback_extInt15();			//Ejecutamos la ISR
 8003f4a:	f7ff fedd 	bl	8003d08 <callback_extInt15>
}
 8003f4e:	e000      	b.n	8003f52 <EXTI15_10_IRQHandler+0xba>
		__NOP();
 8003f50:	bf00      	nop
}
 8003f52:	bf00      	nop
 8003f54:	bd80      	pop	{r7, pc}
 8003f56:	bf00      	nop
 8003f58:	40013c00 	.word	0x40013c00

08003f5c <GPIO_PIN_Config>:

#include <GPIOxDriver.h>

//Configuracion de los registros para un pin
void GPIO_PIN_Config(GPIO_Handler_t *configuracion, uint8_t mode, uint8_t otyper, uint8_t ospeedr,uint8_t pupdr,uint8_t af)
{
 8003f5c:	b480      	push	{r7}
 8003f5e:	b083      	sub	sp, #12
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	6078      	str	r0, [r7, #4]
 8003f64:	4608      	mov	r0, r1
 8003f66:	4611      	mov	r1, r2
 8003f68:	461a      	mov	r2, r3
 8003f6a:	4603      	mov	r3, r0
 8003f6c:	70fb      	strb	r3, [r7, #3]
 8003f6e:	460b      	mov	r3, r1
 8003f70:	70bb      	strb	r3, [r7, #2]
 8003f72:	4613      	mov	r3, r2
 8003f74:	707b      	strb	r3, [r7, #1]
	configuracion->GPIO_PinConfig.GPIO_PinModer       = mode; 		// = GPIO_MODE_x->IN-0, OUT-2, ALTFN-3, ANALOG-4
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	78fa      	ldrb	r2, [r7, #3]
 8003f7a:	705a      	strb	r2, [r3, #1]
	configuracion->GPIO_PinConfig.GPIO_PinOTPype	  = otyper;		// = GPIO_OTYPER_x-> PUSHPULL-0, OPENDRAIN-1
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	78ba      	ldrb	r2, [r7, #2]
 8003f80:	709a      	strb	r2, [r3, #2]
	configuracion->GPIO_PinConfig.GPIO_PinSpeed	      = ospeedr;	// = GPIO_OSPEEDR_x-> LOW-0, MEDIUM-1, FAST-2, HIGH-3
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	787a      	ldrb	r2, [r7, #1]
 8003f86:	70da      	strb	r2, [r3, #3]
	configuracion->GPIO_PinConfig.GPIO_PinPUPdControl = pupdr; 		// = GPIO_PUPDR_x -> NOTHING-0, PULLUP-1, PULLDOWN-2, RESERVED-3
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	7c3a      	ldrb	r2, [r7, #16]
 8003f8c:	711a      	strb	r2, [r3, #4]
	configuracion->GPIO_PinConfig.GPIO_PinAltFunMode  = af;			// = AFx, 0-15
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	7d3a      	ldrb	r2, [r7, #20]
 8003f92:	715a      	strb	r2, [r3, #5]
}
 8003f94:	bf00      	nop
 8003f96:	370c      	adds	r7, #12
 8003f98:	46bd      	mov	sp, r7
 8003f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9e:	4770      	bx	lr

08003fa0 <GPIO_Config>:

//Activacion de la señal de reloj de un elemento en especifico

void GPIO_Config (GPIO_Handler_t *pGPIOHandler)
{
 8003fa0:	b480      	push	{r7}
 8003fa2:	b085      	sub	sp, #20
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	6078      	str	r0, [r7, #4]
	//variables para hacer todo paso a paso
	uint32_t auxConfig = 0;
 8003fa8:	2300      	movs	r3, #0
 8003faa:	60fb      	str	r3, [r7, #12]
	uint32_t auxPosition = 0;
 8003fac:	2300      	movs	r3, #0
 8003fae:	60bb      	str	r3, [r7, #8]

	//----------------------1) Activamos el periferico-----------------------------

	//Verificamos para GIOPA
	if (pGPIOHandler->pGPIOx == GPIOA)
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	689b      	ldr	r3, [r3, #8]
 8003fb4:	4a88      	ldr	r2, [pc, #544]	; (80041d8 <GPIO_Config+0x238>)
 8003fb6:	4293      	cmp	r3, r2
 8003fb8:	d106      	bne.n	8003fc8 <GPIO_Config+0x28>
	{
		//Escribimos 1 (SET) en la posicion correspondiente al GPIOA
		RCC->AHB1ENR |= (RCC_AHB1ENR_GPIOAEN);  //(SET << RCC_AHB1ENR_GPIOA_EN);
 8003fba:	4b88      	ldr	r3, [pc, #544]	; (80041dc <GPIO_Config+0x23c>)
 8003fbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fbe:	4a87      	ldr	r2, [pc, #540]	; (80041dc <GPIO_Config+0x23c>)
 8003fc0:	f043 0301 	orr.w	r3, r3, #1
 8003fc4:	6313      	str	r3, [r2, #48]	; 0x30
 8003fc6:	e03a      	b.n	800403e <GPIO_Config+0x9e>
		/*Modificamos el registro AHB1ENR(32 bit)presente en periferico RCC, vease el 6.3.9 RCC_AHB1ENR---AHB1
		peripheral clock enable register*/
	}

	//Verificamos para GIOPB
	else if (pGPIOHandler->pGPIOx == GPIOB)
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	689b      	ldr	r3, [r3, #8]
 8003fcc:	4a84      	ldr	r2, [pc, #528]	; (80041e0 <GPIO_Config+0x240>)
 8003fce:	4293      	cmp	r3, r2
 8003fd0:	d106      	bne.n	8003fe0 <GPIO_Config+0x40>
	{
		//Escribimos 1 (SET) en la posicion correspondiente al GPIOB
		RCC->AHB1ENR |= (RCC_AHB1ENR_GPIOBEN);  //(SET << RCC_AHB1ENR_GPIOB_EN);
 8003fd2:	4b82      	ldr	r3, [pc, #520]	; (80041dc <GPIO_Config+0x23c>)
 8003fd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fd6:	4a81      	ldr	r2, [pc, #516]	; (80041dc <GPIO_Config+0x23c>)
 8003fd8:	f043 0302 	orr.w	r3, r3, #2
 8003fdc:	6313      	str	r3, [r2, #48]	; 0x30
 8003fde:	e02e      	b.n	800403e <GPIO_Config+0x9e>
		/*Modificamos el registro AHB1ENR(32 bit)presente en periferico RCC, vease el 6.3.9 RCC_AHB1ENR---AHB1
		peripheral clock enable register*/
	}

	//Verificamos para GIOPC
	else if (pGPIOHandler->pGPIOx == GPIOC)
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	689b      	ldr	r3, [r3, #8]
 8003fe4:	4a7f      	ldr	r2, [pc, #508]	; (80041e4 <GPIO_Config+0x244>)
 8003fe6:	4293      	cmp	r3, r2
 8003fe8:	d106      	bne.n	8003ff8 <GPIO_Config+0x58>
	{
		//Escribimos 1 (SET) en la posicion correspondiente al GPIOC
		RCC->AHB1ENR |= (RCC_AHB1ENR_GPIOCEN);  //(SET << RCC_AHB1ENR_GPIOC_EN);
 8003fea:	4b7c      	ldr	r3, [pc, #496]	; (80041dc <GPIO_Config+0x23c>)
 8003fec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fee:	4a7b      	ldr	r2, [pc, #492]	; (80041dc <GPIO_Config+0x23c>)
 8003ff0:	f043 0304 	orr.w	r3, r3, #4
 8003ff4:	6313      	str	r3, [r2, #48]	; 0x30
 8003ff6:	e022      	b.n	800403e <GPIO_Config+0x9e>
		/*Modificamos el registro AHB1ENR(32 bit)presente en periferico RCC, vease el 6.3.9 RCC_AHB1ENR---AHB1
		peripheral clock enable register*/
	}

	//Verificamos para GIOPD
	else if (pGPIOHandler->pGPIOx == GPIOD)
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	689b      	ldr	r3, [r3, #8]
 8003ffc:	4a7a      	ldr	r2, [pc, #488]	; (80041e8 <GPIO_Config+0x248>)
 8003ffe:	4293      	cmp	r3, r2
 8004000:	d106      	bne.n	8004010 <GPIO_Config+0x70>
	{
		//Escribimos 1 (SET) en la posicion correspondiente al GPIOD
		RCC->AHB1ENR |= (RCC_AHB1ENR_GPIODEN);  //(SET << RCC_AHB1ENR_GPIOD_EN);
 8004002:	4b76      	ldr	r3, [pc, #472]	; (80041dc <GPIO_Config+0x23c>)
 8004004:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004006:	4a75      	ldr	r2, [pc, #468]	; (80041dc <GPIO_Config+0x23c>)
 8004008:	f043 0308 	orr.w	r3, r3, #8
 800400c:	6313      	str	r3, [r2, #48]	; 0x30
 800400e:	e016      	b.n	800403e <GPIO_Config+0x9e>
		/*Modificamos el registro AHB1ENR(32 bit)presente en periferico RCC, vease el 6.3.9 RCC_AHB1ENR---AHB1
		peripheral clock enable register*/
	}

	//Verificamos para GIOPE
	else if (pGPIOHandler->pGPIOx == GPIOE)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	689b      	ldr	r3, [r3, #8]
 8004014:	4a75      	ldr	r2, [pc, #468]	; (80041ec <GPIO_Config+0x24c>)
 8004016:	4293      	cmp	r3, r2
 8004018:	d106      	bne.n	8004028 <GPIO_Config+0x88>
	{
		//Escribimos 1 (SET) en la posicion correspondiente al GPIOE
		RCC->AHB1ENR |= (RCC_AHB1ENR_GPIOEEN);  //(SET << RCC_AHB1ENR_GPIOE_EN);
 800401a:	4b70      	ldr	r3, [pc, #448]	; (80041dc <GPIO_Config+0x23c>)
 800401c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800401e:	4a6f      	ldr	r2, [pc, #444]	; (80041dc <GPIO_Config+0x23c>)
 8004020:	f043 0310 	orr.w	r3, r3, #16
 8004024:	6313      	str	r3, [r2, #48]	; 0x30
 8004026:	e00a      	b.n	800403e <GPIO_Config+0x9e>
		/*Modificamos el registro AHB1ENR(32 bit)presente en periferico RCC, vease el 6.3.9 RCC_AHB1ENR---AHB1
		peripheral clock enable register*/
	}

	//Verificamos para GIOPH
	else if (pGPIOHandler->pGPIOx == GPIOH)
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	689b      	ldr	r3, [r3, #8]
 800402c:	4a70      	ldr	r2, [pc, #448]	; (80041f0 <GPIO_Config+0x250>)
 800402e:	4293      	cmp	r3, r2
 8004030:	d105      	bne.n	800403e <GPIO_Config+0x9e>
	{
		//Escribimos 1 (SET) en la posicion correspondiente al GPIOH
		RCC->AHB1ENR |= (RCC_AHB1ENR_GPIOHEN);  //(SET << RCC_AHB1ENR_GPIOH_EN);
 8004032:	4b6a      	ldr	r3, [pc, #424]	; (80041dc <GPIO_Config+0x23c>)
 8004034:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004036:	4a69      	ldr	r2, [pc, #420]	; (80041dc <GPIO_Config+0x23c>)
 8004038:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800403c:	6313      	str	r3, [r2, #48]	; 0x30

	//----------------2) Configurando el registro GPIOx_MODER----------------------
	//SE ENTIENDE

	//Leemos el PinNumber para mover una cantidad de veces  el pinModer
	auxConfig = (pGPIOHandler->GPIO_PinConfig.GPIO_PinModer << 2*pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	785b      	ldrb	r3, [r3, #1]
 8004042:	461a      	mov	r2, r3
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	781b      	ldrb	r3, [r3, #0]
 8004048:	005b      	lsls	r3, r3, #1
 800404a:	fa02 f303 	lsl.w	r3, r2, r3
 800404e:	60fb      	str	r3, [r7, #12]

	//Cargamos auxConfig en el registro MODER
	pGPIOHandler->pGPIOx->MODER &= ~(0b11 << 2*pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	689b      	ldr	r3, [r3, #8]
 8004054:	681a      	ldr	r2, [r3, #0]
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	781b      	ldrb	r3, [r3, #0]
 800405a:	005b      	lsls	r3, r3, #1
 800405c:	2103      	movs	r1, #3
 800405e:	fa01 f303 	lsl.w	r3, r1, r3
 8004062:	43db      	mvns	r3, r3
 8004064:	4619      	mov	r1, r3
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	689b      	ldr	r3, [r3, #8]
 800406a:	400a      	ands	r2, r1
 800406c:	601a      	str	r2, [r3, #0]
	pGPIOHandler->pGPIOx->MODER |= auxConfig;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	689b      	ldr	r3, [r3, #8]
 8004072:	6819      	ldr	r1, [r3, #0]
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	689b      	ldr	r3, [r3, #8]
 8004078:	68fa      	ldr	r2, [r7, #12]
 800407a:	430a      	orrs	r2, r1
 800407c:	601a      	str	r2, [r3, #0]

	//----------------3) Configurando el registro GPIOx_OTYPER----------------------
	//SE ENTIENDE

	//Leemos el PinNumber para mover una cantidad de veces el pinOTPype
	auxConfig = (pGPIOHandler->GPIO_PinConfig.GPIO_PinOTPype << pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	789b      	ldrb	r3, [r3, #2]
 8004082:	461a      	mov	r2, r3
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	781b      	ldrb	r3, [r3, #0]
 8004088:	fa02 f303 	lsl.w	r3, r2, r3
 800408c:	60fb      	str	r3, [r7, #12]

	//Cargamos  auxConfig en el registro OTYPER
	pGPIOHandler->pGPIOx->OTYPER &= ~(SET << pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	689b      	ldr	r3, [r3, #8]
 8004092:	685a      	ldr	r2, [r3, #4]
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	781b      	ldrb	r3, [r3, #0]
 8004098:	4619      	mov	r1, r3
 800409a:	2301      	movs	r3, #1
 800409c:	408b      	lsls	r3, r1
 800409e:	43db      	mvns	r3, r3
 80040a0:	4619      	mov	r1, r3
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	689b      	ldr	r3, [r3, #8]
 80040a6:	400a      	ands	r2, r1
 80040a8:	605a      	str	r2, [r3, #4]
	pGPIOHandler->pGPIOx->OTYPER |= auxConfig;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	689b      	ldr	r3, [r3, #8]
 80040ae:	6859      	ldr	r1, [r3, #4]
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	689b      	ldr	r3, [r3, #8]
 80040b4:	68fa      	ldr	r2, [r7, #12]
 80040b6:	430a      	orrs	r2, r1
 80040b8:	605a      	str	r2, [r3, #4]

	//----------------4) Configurando el registro GPIOx_OSPEEDR----------------------
	//SE ENTIENDE

	//Leemos el PinNumber para mover una cantidad de veces el pinSpeed
	auxConfig = (pGPIOHandler->GPIO_PinConfig.GPIO_PinSpeed << 2*pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	78db      	ldrb	r3, [r3, #3]
 80040be:	461a      	mov	r2, r3
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	781b      	ldrb	r3, [r3, #0]
 80040c4:	005b      	lsls	r3, r3, #1
 80040c6:	fa02 f303 	lsl.w	r3, r2, r3
 80040ca:	60fb      	str	r3, [r7, #12]

	//Cargamos  auxConfig en el registro OSPEEDR
	pGPIOHandler->pGPIOx->OSPEEDR &= ~(0b11 << 2*pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	689b      	ldr	r3, [r3, #8]
 80040d0:	689a      	ldr	r2, [r3, #8]
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	781b      	ldrb	r3, [r3, #0]
 80040d6:	005b      	lsls	r3, r3, #1
 80040d8:	2103      	movs	r1, #3
 80040da:	fa01 f303 	lsl.w	r3, r1, r3
 80040de:	43db      	mvns	r3, r3
 80040e0:	4619      	mov	r1, r3
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	689b      	ldr	r3, [r3, #8]
 80040e6:	400a      	ands	r2, r1
 80040e8:	609a      	str	r2, [r3, #8]
	pGPIOHandler->pGPIOx->OSPEEDR |= auxConfig;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	689b      	ldr	r3, [r3, #8]
 80040ee:	6899      	ldr	r1, [r3, #8]
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	689b      	ldr	r3, [r3, #8]
 80040f4:	68fa      	ldr	r2, [r7, #12]
 80040f6:	430a      	orrs	r2, r1
 80040f8:	609a      	str	r2, [r3, #8]

	//----------------5) Configurando el registro GPIOx_PUPDR----------------------
	//SE ENTIENDE

	//Leemos el PinNumber para mover una cantidad de veces el pinSpeed
	auxConfig = (pGPIOHandler->GPIO_PinConfig.GPIO_PinPUPdControl << 2*pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	791b      	ldrb	r3, [r3, #4]
 80040fe:	461a      	mov	r2, r3
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	781b      	ldrb	r3, [r3, #0]
 8004104:	005b      	lsls	r3, r3, #1
 8004106:	fa02 f303 	lsl.w	r3, r2, r3
 800410a:	60fb      	str	r3, [r7, #12]

	//Cargamos  auxConfig en el registro PUPDR
	pGPIOHandler->pGPIOx->PUPDR &= ~(0b11 << 2*pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	689b      	ldr	r3, [r3, #8]
 8004110:	68da      	ldr	r2, [r3, #12]
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	781b      	ldrb	r3, [r3, #0]
 8004116:	005b      	lsls	r3, r3, #1
 8004118:	2103      	movs	r1, #3
 800411a:	fa01 f303 	lsl.w	r3, r1, r3
 800411e:	43db      	mvns	r3, r3
 8004120:	4619      	mov	r1, r3
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	689b      	ldr	r3, [r3, #8]
 8004126:	400a      	ands	r2, r1
 8004128:	60da      	str	r2, [r3, #12]
	pGPIOHandler->pGPIOx->PUPDR|= auxConfig;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	689b      	ldr	r3, [r3, #8]
 800412e:	68d9      	ldr	r1, [r3, #12]
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	689b      	ldr	r3, [r3, #8]
 8004134:	68fa      	ldr	r2, [r7, #12]
 8004136:	430a      	orrs	r2, r1
 8004138:	60da      	str	r2, [r3, #12]

	//---------------- MODER: Configurando funciones alternativas----------------------

	//si el Modo de configuracion escogido es GPIO_MODE_ALTFN, entonces activamos el AF
	if(pGPIOHandler->GPIO_PinConfig.GPIO_PinModer == GPIO_MODE_ALTFN)
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	785b      	ldrb	r3, [r3, #1]
 800413e:	2b02      	cmp	r3, #2
 8004140:	d143      	bne.n	80041ca <GPIO_Config+0x22a>
	{
		//Para los pines 0 a 8 escogemos el AFRL
		if (pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber < 8)
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	781b      	ldrb	r3, [r3, #0]
 8004146:	2b07      	cmp	r3, #7
 8004148:	d81f      	bhi.n	800418a <GPIO_Config+0x1ea>
		{
			auxPosition = 4*pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	781b      	ldrb	r3, [r3, #0]
 800414e:	009b      	lsls	r3, r3, #2
 8004150:	60bb      	str	r3, [r7, #8]

			//Cargamos auxPosition en el registro AFRL
			pGPIOHandler->pGPIOx->AFR[0] &= ~(0b1111 << auxPosition);
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	689b      	ldr	r3, [r3, #8]
 8004156:	6a1a      	ldr	r2, [r3, #32]
 8004158:	210f      	movs	r1, #15
 800415a:	68bb      	ldr	r3, [r7, #8]
 800415c:	fa01 f303 	lsl.w	r3, r1, r3
 8004160:	43db      	mvns	r3, r3
 8004162:	4619      	mov	r1, r3
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	689b      	ldr	r3, [r3, #8]
 8004168:	400a      	ands	r2, r1
 800416a:	621a      	str	r2, [r3, #32]
			pGPIOHandler->pGPIOx->AFR[0] |= (pGPIOHandler->GPIO_PinConfig.GPIO_PinAltFunMode << auxPosition);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	689b      	ldr	r3, [r3, #8]
 8004170:	6a1a      	ldr	r2, [r3, #32]
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	795b      	ldrb	r3, [r3, #5]
 8004176:	4619      	mov	r1, r3
 8004178:	68bb      	ldr	r3, [r7, #8]
 800417a:	fa01 f303 	lsl.w	r3, r1, r3
 800417e:	4619      	mov	r1, r3
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	689b      	ldr	r3, [r3, #8]
 8004184:	430a      	orrs	r2, r1
 8004186:	621a      	str	r2, [r3, #32]
			//Cargamos auxPosition en el registro AFRL
			pGPIOHandler->pGPIOx->AFR[1] &= ~(0b1111 << auxPosition);
			pGPIOHandler->pGPIOx->AFR[1] |= (pGPIOHandler->GPIO_PinConfig.GPIO_PinAltFunMode << auxPosition);
		}
	}
}
 8004188:	e01f      	b.n	80041ca <GPIO_Config+0x22a>
			auxPosition = 4*(pGPIOHandler->GPIO_PinConfig.GPIO_PinNumber-8);
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	781b      	ldrb	r3, [r3, #0]
 800418e:	3b08      	subs	r3, #8
 8004190:	009b      	lsls	r3, r3, #2
 8004192:	60bb      	str	r3, [r7, #8]
			pGPIOHandler->pGPIOx->AFR[1] &= ~(0b1111 << auxPosition);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	689b      	ldr	r3, [r3, #8]
 8004198:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800419a:	210f      	movs	r1, #15
 800419c:	68bb      	ldr	r3, [r7, #8]
 800419e:	fa01 f303 	lsl.w	r3, r1, r3
 80041a2:	43db      	mvns	r3, r3
 80041a4:	4619      	mov	r1, r3
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	689b      	ldr	r3, [r3, #8]
 80041aa:	400a      	ands	r2, r1
 80041ac:	625a      	str	r2, [r3, #36]	; 0x24
			pGPIOHandler->pGPIOx->AFR[1] |= (pGPIOHandler->GPIO_PinConfig.GPIO_PinAltFunMode << auxPosition);
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	689b      	ldr	r3, [r3, #8]
 80041b2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	795b      	ldrb	r3, [r3, #5]
 80041b8:	4619      	mov	r1, r3
 80041ba:	68bb      	ldr	r3, [r7, #8]
 80041bc:	fa01 f303 	lsl.w	r3, r1, r3
 80041c0:	4619      	mov	r1, r3
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	689b      	ldr	r3, [r3, #8]
 80041c6:	430a      	orrs	r2, r1
 80041c8:	625a      	str	r2, [r3, #36]	; 0x24
}
 80041ca:	bf00      	nop
 80041cc:	3714      	adds	r7, #20
 80041ce:	46bd      	mov	sp, r7
 80041d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d4:	4770      	bx	lr
 80041d6:	bf00      	nop
 80041d8:	40020000 	.word	0x40020000
 80041dc:	40023800 	.word	0x40023800
 80041e0:	40020400 	.word	0x40020400
 80041e4:	40020800 	.word	0x40020800
 80041e8:	40020c00 	.word	0x40020c00
 80041ec:	40021000 	.word	0x40021000
 80041f0:	40021c00 	.word	0x40021c00

080041f4 <GPIO_writePin>:

//---------------- MODER: Configurando Output: Registro BSRR----------------------

void GPIO_writePin (GPIO_Handler_t *pPinHandler, uint8_t newState)
{
 80041f4:	b480      	push	{r7}
 80041f6:	b083      	sub	sp, #12
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	6078      	str	r0, [r7, #4]
 80041fc:	460b      	mov	r3, r1
 80041fe:	70fb      	strb	r3, [r7, #3]
	//Limpiamos la posicion que deseamos
	//pPinHandler->pGPIOx->ODR &= ~(SET << pPinHandler->GPIO_PinConfig.GPIO_PinNumber);
	if (newState == SET)
 8004200:	78fb      	ldrb	r3, [r7, #3]
 8004202:	2b01      	cmp	r3, #1
 8004204:	d10d      	bne.n	8004222 <GPIO_writePin+0x2e>
	{
		//Trabajamos con la parte baja del registro
		pPinHandler->pGPIOx->BSRR |= (SET<<pPinHandler->GPIO_PinConfig.GPIO_PinNumber);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	689b      	ldr	r3, [r3, #8]
 800420a:	699a      	ldr	r2, [r3, #24]
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	781b      	ldrb	r3, [r3, #0]
 8004210:	4619      	mov	r1, r3
 8004212:	2301      	movs	r3, #1
 8004214:	408b      	lsls	r3, r1
 8004216:	4619      	mov	r1, r3
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	689b      	ldr	r3, [r3, #8]
 800421c:	430a      	orrs	r2, r1
 800421e:	619a      	str	r2, [r3, #24]
	else
	{
		//Trabajamos con la parte alta del registro
		pPinHandler->pGPIOx->BSRR |= (SET<<(pPinHandler->GPIO_PinConfig.GPIO_PinNumber+16));
	}
}
 8004220:	e00d      	b.n	800423e <GPIO_writePin+0x4a>
		pPinHandler->pGPIOx->BSRR |= (SET<<(pPinHandler->GPIO_PinConfig.GPIO_PinNumber+16));
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	689b      	ldr	r3, [r3, #8]
 8004226:	699a      	ldr	r2, [r3, #24]
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	781b      	ldrb	r3, [r3, #0]
 800422c:	3310      	adds	r3, #16
 800422e:	2101      	movs	r1, #1
 8004230:	fa01 f303 	lsl.w	r3, r1, r3
 8004234:	4619      	mov	r1, r3
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	689b      	ldr	r3, [r3, #8]
 800423a:	430a      	orrs	r2, r1
 800423c:	619a      	str	r2, [r3, #24]
}
 800423e:	bf00      	nop
 8004240:	370c      	adds	r7, #12
 8004242:	46bd      	mov	sp, r7
 8004244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004248:	4770      	bx	lr

0800424a <GPIOxTooglePin>:
}


//---------------- Toogle ---------------------
void GPIOxTooglePin(GPIO_Handler_t *pPinHandler)
{
 800424a:	b480      	push	{r7}
 800424c:	b083      	sub	sp, #12
 800424e:	af00      	add	r7, sp, #0
 8004250:	6078      	str	r0, [r7, #4]
	pPinHandler->pGPIOx->ODR  ^= (SET << pPinHandler->GPIO_PinConfig.GPIO_PinNumber);
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	689b      	ldr	r3, [r3, #8]
 8004256:	695a      	ldr	r2, [r3, #20]
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	781b      	ldrb	r3, [r3, #0]
 800425c:	4619      	mov	r1, r3
 800425e:	2301      	movs	r3, #1
 8004260:	408b      	lsls	r3, r1
 8004262:	4619      	mov	r1, r3
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	689b      	ldr	r3, [r3, #8]
 8004268:	404a      	eors	r2, r1
 800426a:	615a      	str	r2, [r3, #20]
}
 800426c:	bf00      	nop
 800426e:	370c      	adds	r7, #12
 8004270:	46bd      	mov	sp, r7
 8004272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004276:	4770      	bx	lr

08004278 <configPLL>:
#include <PLLDriver.h>

uint8_t auxValue = 0;

void configPLL(uint8_t clockSpeed)
{
 8004278:	b480      	push	{r7}
 800427a:	b083      	sub	sp, #12
 800427c:	af00      	add	r7, sp, #0
 800427e:	4603      	mov	r3, r0
 8004280:	71fb      	strb	r3, [r7, #7]
	//Guardamos en una variable auxiliar la velocidad del reloj
	auxValue = clockSpeed;
 8004282:	4a39      	ldr	r2, [pc, #228]	; (8004368 <configPLL+0xf0>)
 8004284:	79fb      	ldrb	r3, [r7, #7]
 8004286:	7013      	strb	r3, [r2, #0]
	//Registro: CFGR

	/*El limite de la fuente de reloj para el bus APB1 es 50 Mhz, por tanto si la velocidad de reloj
	 * especificada es mayor a dicho se activa un preescaler de 4 para dicho bus
	*/
	if(clockSpeed<50)
 8004288:	79fb      	ldrb	r3, [r7, #7]
 800428a:	2b31      	cmp	r3, #49	; 0x31
 800428c:	d804      	bhi.n	8004298 <configPLL+0x20>
	{
		RCC->CFGR |= RCC_CFGR_PPRE1_DIV1;
 800428e:	4b37      	ldr	r3, [pc, #220]	; (800436c <configPLL+0xf4>)
 8004290:	4a36      	ldr	r2, [pc, #216]	; (800436c <configPLL+0xf4>)
 8004292:	689b      	ldr	r3, [r3, #8]
 8004294:	6093      	str	r3, [r2, #8]
 8004296:	e005      	b.n	80042a4 <configPLL+0x2c>
	}
	else
	{
		RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 8004298:	4b34      	ldr	r3, [pc, #208]	; (800436c <configPLL+0xf4>)
 800429a:	689b      	ldr	r3, [r3, #8]
 800429c:	4a33      	ldr	r2, [pc, #204]	; (800436c <configPLL+0xf4>)
 800429e:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 80042a2:	6093      	str	r3, [r2, #8]

	//adjustHSI();

	//-------------2) Seleccion del HSI como la fuente de reloj para el PLL---------------
	//Registro: PLLCFGR
	RCC->PLLCFGR &= ~(0b1<<RCC_PLLCFGR_PLLSRC_Pos);
 80042a4:	4b31      	ldr	r3, [pc, #196]	; (800436c <configPLL+0xf4>)
 80042a6:	685b      	ldr	r3, [r3, #4]
 80042a8:	4a30      	ldr	r2, [pc, #192]	; (800436c <configPLL+0xf4>)
 80042aa:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80042ae:	6053      	str	r3, [r2, #4]

	//----a) Modificacion del factor divisor M---------
	     //Señal de entrada al VCO entre 1 MHz y 2 MHz
	//De acuerdo al Manual de usuario se especifica un valor de 8 para que la señal de entrada al VCO sea de 2 Mhz; pero funciona bien con 1Mhz
	//Para el caso de 100Mhz, eston valores cambian para tener la presicion que se requiere
	RCC->PLLCFGR |= (18<<RCC_PLLCFGR_PLLM_Pos);  //16
 80042b0:	4b2e      	ldr	r3, [pc, #184]	; (800436c <configPLL+0xf4>)
 80042b2:	685b      	ldr	r3, [r3, #4]
 80042b4:	4a2d      	ldr	r2, [pc, #180]	; (800436c <configPLL+0xf4>)
 80042b6:	f043 0312 	orr.w	r3, r3, #18
 80042ba:	6053      	str	r3, [r2, #4]
         //Señal de salida al VCO entre 100 MHz y 438 MHz
		 //El valor de N sera entre de 50 y 100   ------> M=8
		 //El valor de N sera entre de 100 y 400  ------> M=16
	//De acuerdo al Manual de usuario y los calculos realizados el valor de N sera entre 100 y 400, para un valor de P de 4.
	//Para el caso de 100Mhz, eston valores cambian para tener la presicion que se requiere
	RCC->PLLCFGR |= ((clockSpeed*4-14)<<RCC_PLLCFGR_PLLN_Pos); //-14
 80042bc:	4b2b      	ldr	r3, [pc, #172]	; (800436c <configPLL+0xf4>)
 80042be:	685b      	ldr	r3, [r3, #4]
 80042c0:	79fa      	ldrb	r2, [r7, #7]
 80042c2:	0092      	lsls	r2, r2, #2
 80042c4:	3a0e      	subs	r2, #14
 80042c6:	0192      	lsls	r2, r2, #6
 80042c8:	4611      	mov	r1, r2
 80042ca:	4a28      	ldr	r2, [pc, #160]	; (800436c <configPLL+0xf4>)
 80042cc:	430b      	orrs	r3, r1
 80042ce:	6053      	str	r3, [r2, #4]

	//----c) Modificacion del factor divisor P-----
	     //Señal de salida del PLL entre 25 MHz y 100 MHz
	RCC->PLLCFGR |= (0b01<<RCC_PLLCFGR_PLLP_Pos);   //El valor establecido es 4
 80042d0:	4b26      	ldr	r3, [pc, #152]	; (800436c <configPLL+0xf4>)
 80042d2:	685b      	ldr	r3, [r3, #4]
 80042d4:	4a25      	ldr	r2, [pc, #148]	; (800436c <configPLL+0xf4>)
 80042d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80042da:	6053      	str	r3, [r2, #4]

	//---------------------------3) Activacion PLL----------------------------------
	//Registro: CR

	RCC->CR |= RCC_CR_PLLON;  //Escribimos un valor alto en el bit PLLON para su habilitacion
 80042dc:	4b23      	ldr	r3, [pc, #140]	; (800436c <configPLL+0xf4>)
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	4a22      	ldr	r2, [pc, #136]	; (800436c <configPLL+0xf4>)
 80042e2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80042e6:	6013      	str	r3, [r2, #0]

	//Espera de la activacion del PLL
	while(!(RCC->CR & RCC_CR_PLLRDY))
 80042e8:	e000      	b.n	80042ec <configPLL+0x74>
	{
		__NOP();
 80042ea:	bf00      	nop
	while(!(RCC->CR & RCC_CR_PLLRDY))
 80042ec:	4b1f      	ldr	r3, [pc, #124]	; (800436c <configPLL+0xf4>)
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d0f8      	beq.n	80042ea <configPLL+0x72>

	//---------------------------4) Valor de Latencia----------------------------------
	//Registro: ACR

	//Se define el valor de la latencia de acuerdo a la velocidad de reloj establecida
	if (90<clockSpeed && clockSpeed<=100)
 80042f8:	79fb      	ldrb	r3, [r7, #7]
 80042fa:	2b5a      	cmp	r3, #90	; 0x5a
 80042fc:	d909      	bls.n	8004312 <configPLL+0x9a>
 80042fe:	79fb      	ldrb	r3, [r7, #7]
 8004300:	2b64      	cmp	r3, #100	; 0x64
 8004302:	d806      	bhi.n	8004312 <configPLL+0x9a>
	{
		FLASH->ACR |= FLASH_ACR_LATENCY_3WS;
 8004304:	4b1a      	ldr	r3, [pc, #104]	; (8004370 <configPLL+0xf8>)
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	4a19      	ldr	r2, [pc, #100]	; (8004370 <configPLL+0xf8>)
 800430a:	f043 0303 	orr.w	r3, r3, #3
 800430e:	6013      	str	r3, [r2, #0]
 8004310:	e01d      	b.n	800434e <configPLL+0xd6>
	}
	else if (64<clockSpeed && clockSpeed<=90)
 8004312:	79fb      	ldrb	r3, [r7, #7]
 8004314:	2b40      	cmp	r3, #64	; 0x40
 8004316:	d909      	bls.n	800432c <configPLL+0xb4>
 8004318:	79fb      	ldrb	r3, [r7, #7]
 800431a:	2b5a      	cmp	r3, #90	; 0x5a
 800431c:	d806      	bhi.n	800432c <configPLL+0xb4>
	{
		FLASH->ACR |= FLASH_ACR_LATENCY_2WS;
 800431e:	4b14      	ldr	r3, [pc, #80]	; (8004370 <configPLL+0xf8>)
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	4a13      	ldr	r2, [pc, #76]	; (8004370 <configPLL+0xf8>)
 8004324:	f043 0302 	orr.w	r3, r3, #2
 8004328:	6013      	str	r3, [r2, #0]
 800432a:	e010      	b.n	800434e <configPLL+0xd6>
	}
	else if (30<clockSpeed && clockSpeed<=64)
 800432c:	79fb      	ldrb	r3, [r7, #7]
 800432e:	2b1e      	cmp	r3, #30
 8004330:	d909      	bls.n	8004346 <configPLL+0xce>
 8004332:	79fb      	ldrb	r3, [r7, #7]
 8004334:	2b40      	cmp	r3, #64	; 0x40
 8004336:	d806      	bhi.n	8004346 <configPLL+0xce>
	{
		FLASH->ACR |= FLASH_ACR_LATENCY_1WS;
 8004338:	4b0d      	ldr	r3, [pc, #52]	; (8004370 <configPLL+0xf8>)
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	4a0c      	ldr	r2, [pc, #48]	; (8004370 <configPLL+0xf8>)
 800433e:	f043 0301 	orr.w	r3, r3, #1
 8004342:	6013      	str	r3, [r2, #0]
 8004344:	e003      	b.n	800434e <configPLL+0xd6>
	}
	else
	{
		FLASH->ACR |= FLASH_ACR_LATENCY_0WS;
 8004346:	4b0a      	ldr	r3, [pc, #40]	; (8004370 <configPLL+0xf8>)
 8004348:	4a09      	ldr	r2, [pc, #36]	; (8004370 <configPLL+0xf8>)
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	6013      	str	r3, [r2, #0]
	}

	//------------------5) Seleccion del PLL como la fuente de reloj del sistema----------------------------
	//Registro: CFGR

	RCC->CFGR |= (0b10<<RCC_CFGR_SW_Pos);
 800434e:	4b07      	ldr	r3, [pc, #28]	; (800436c <configPLL+0xf4>)
 8004350:	689b      	ldr	r3, [r3, #8]
 8004352:	4a06      	ldr	r2, [pc, #24]	; (800436c <configPLL+0xf4>)
 8004354:	f043 0302 	orr.w	r3, r3, #2
 8004358:	6093      	str	r3, [r2, #8]

}
 800435a:	bf00      	nop
 800435c:	370c      	adds	r7, #12
 800435e:	46bd      	mov	sp, r7
 8004360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004364:	4770      	bx	lr
 8004366:	bf00      	nop
 8004368:	200004c0 	.word	0x200004c0
 800436c:	40023800 	.word	0x40023800
 8004370:	40023c00 	.word	0x40023c00

08004374 <getConfigPLL>:
	RCC->CR |= hsiTrimValue<<RCC_CR_HSITRIM_Pos;            //Cargamos la calibracion
}

//Funcion que retorna la velocidad de reloj entregado por el PLL o por el HSI en MHz
uint8_t getConfigPLL(void)
{
 8004374:	b480      	push	{r7}
 8004376:	b083      	sub	sp, #12
 8004378:	af00      	add	r7, sp, #0
	uint8_t clockSpeed = 0;
 800437a:	2300      	movs	r3, #0
 800437c:	71fb      	strb	r3, [r7, #7]
	//Verifica si el PLL esta activo
	if((RCC->CFGR & 0b11) == 0b10)
 800437e:	4b09      	ldr	r3, [pc, #36]	; (80043a4 <getConfigPLL+0x30>)
 8004380:	689b      	ldr	r3, [r3, #8]
 8004382:	f003 0303 	and.w	r3, r3, #3
 8004386:	2b02      	cmp	r3, #2
 8004388:	d103      	bne.n	8004392 <getConfigPLL+0x1e>
	{
		clockSpeed = auxValue;
 800438a:	4b07      	ldr	r3, [pc, #28]	; (80043a8 <getConfigPLL+0x34>)
 800438c:	781b      	ldrb	r3, [r3, #0]
 800438e:	71fb      	strb	r3, [r7, #7]
 8004390:	e001      	b.n	8004396 <getConfigPLL+0x22>
	}
	else
	{
		clockSpeed = CLOCK_SPEED_16MHZ;
 8004392:	2310      	movs	r3, #16
 8004394:	71fb      	strb	r3, [r7, #7]
	}
	return clockSpeed;
 8004396:	79fb      	ldrb	r3, [r7, #7]
}
 8004398:	4618      	mov	r0, r3
 800439a:	370c      	adds	r7, #12
 800439c:	46bd      	mov	sp, r7
 800439e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a2:	4770      	bx	lr
 80043a4:	40023800 	.word	0x40023800
 80043a8:	200004c0 	.word	0x200004c0

080043ac <getClockAPB1>:

//Funcion que retorna la velocidad de reloj entregada al bus APB1
uint8_t getClockAPB1(void)
{
 80043ac:	b580      	push	{r7, lr}
 80043ae:	b082      	sub	sp, #8
 80043b0:	af00      	add	r7, sp, #0
	uint8_t clock = getConfigPLL();  	     //Obtenemos la velocidad de reloj del sistema
 80043b2:	f7ff ffdf 	bl	8004374 <getConfigPLL>
 80043b6:	4603      	mov	r3, r0
 80043b8:	71bb      	strb	r3, [r7, #6]
	uint8_t clockAPB1 = 0;                   //Variable que guarda la velocidad de reloj entrante al bus APB1
 80043ba:	2300      	movs	r3, #0
 80043bc:	71fb      	strb	r3, [r7, #7]

	//verificamos si el preescaler de 4 estara activado deacuerdo a la frecuencia max del bus
	if(clock<50)
 80043be:	79bb      	ldrb	r3, [r7, #6]
 80043c0:	2b31      	cmp	r3, #49	; 0x31
 80043c2:	d802      	bhi.n	80043ca <getClockAPB1+0x1e>
	{
		clockAPB1 = clock;
 80043c4:	79bb      	ldrb	r3, [r7, #6]
 80043c6:	71fb      	strb	r3, [r7, #7]
 80043c8:	e002      	b.n	80043d0 <getClockAPB1+0x24>
	}
	else
	{
		clockAPB1 = clock/4;
 80043ca:	79bb      	ldrb	r3, [r7, #6]
 80043cc:	089b      	lsrs	r3, r3, #2
 80043ce:	71fb      	strb	r3, [r7, #7]
	}
	return clockAPB1;
 80043d0:	79fb      	ldrb	r3, [r7, #7]
}
 80043d2:	4618      	mov	r0, r3
 80043d4:	3708      	adds	r7, #8
 80043d6:	46bd      	mov	sp, r7
 80043d8:	bd80      	pop	{r7, pc}
	...

080043dc <configMCO2>:

//Funcion que selecciona la señal de reloj saliente del pin MCO1
void configMCO2(uint8_t value)
{
 80043dc:	b480      	push	{r7}
 80043de:	b083      	sub	sp, #12
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	4603      	mov	r3, r0
 80043e4:	71fb      	strb	r3, [r7, #7]
	RCC->CFGR &= ~(0b11<<RCC_CFGR_MCO2_Pos);
 80043e6:	4b0a      	ldr	r3, [pc, #40]	; (8004410 <configMCO2+0x34>)
 80043e8:	689b      	ldr	r3, [r3, #8]
 80043ea:	4a09      	ldr	r2, [pc, #36]	; (8004410 <configMCO2+0x34>)
 80043ec:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 80043f0:	6093      	str	r3, [r2, #8]
	RCC->CFGR |= (value<<RCC_CFGR_MCO2_Pos);
 80043f2:	4b07      	ldr	r3, [pc, #28]	; (8004410 <configMCO2+0x34>)
 80043f4:	689b      	ldr	r3, [r3, #8]
 80043f6:	79fa      	ldrb	r2, [r7, #7]
 80043f8:	0792      	lsls	r2, r2, #30
 80043fa:	4611      	mov	r1, r2
 80043fc:	4a04      	ldr	r2, [pc, #16]	; (8004410 <configMCO2+0x34>)
 80043fe:	430b      	orrs	r3, r1
 8004400:	6093      	str	r3, [r2, #8]
}
 8004402:	bf00      	nop
 8004404:	370c      	adds	r7, #12
 8004406:	46bd      	mov	sp, r7
 8004408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800440c:	4770      	bx	lr
 800440e:	bf00      	nop
 8004410:	40023800 	.word	0x40023800

08004414 <configMCO2PRE>:

//Funcion que selecciona la señal de reloj saliente del pin MCO1
void configMCO2PRE(uint8_t value)
{
 8004414:	b480      	push	{r7}
 8004416:	b083      	sub	sp, #12
 8004418:	af00      	add	r7, sp, #0
 800441a:	4603      	mov	r3, r0
 800441c:	71fb      	strb	r3, [r7, #7]
	//Selecionamos el prescaler de acuerdo al valor definido
	switch (value){
 800441e:	79fb      	ldrb	r3, [r7, #7]
 8004420:	3b01      	subs	r3, #1
 8004422:	2b04      	cmp	r3, #4
 8004424:	d84b      	bhi.n	80044be <configMCO2PRE+0xaa>
 8004426:	a201      	add	r2, pc, #4	; (adr r2, 800442c <configMCO2PRE+0x18>)
 8004428:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800442c:	08004441 	.word	0x08004441
 8004430:	08004457 	.word	0x08004457
 8004434:	08004471 	.word	0x08004471
 8004438:	0800448b 	.word	0x0800448b
 800443c:	080044a5 	.word	0x080044a5
		case 1:
		{
			RCC->CFGR &= ~(0b111<<RCC_CFGR_MCO2PRE_Pos);
 8004440:	4b23      	ldr	r3, [pc, #140]	; (80044d0 <configMCO2PRE+0xbc>)
 8004442:	689b      	ldr	r3, [r3, #8]
 8004444:	4a22      	ldr	r2, [pc, #136]	; (80044d0 <configMCO2PRE+0xbc>)
 8004446:	f023 5360 	bic.w	r3, r3, #939524096	; 0x38000000
 800444a:	6093      	str	r3, [r2, #8]
			RCC->CFGR |= (0b000<<RCC_CFGR_MCO2PRE_Pos);
 800444c:	4b20      	ldr	r3, [pc, #128]	; (80044d0 <configMCO2PRE+0xbc>)
 800444e:	4a20      	ldr	r2, [pc, #128]	; (80044d0 <configMCO2PRE+0xbc>)
 8004450:	689b      	ldr	r3, [r3, #8]
 8004452:	6093      	str	r3, [r2, #8]
			break;
 8004454:	e035      	b.n	80044c2 <configMCO2PRE+0xae>
		}
		case 2:
		{
			RCC->CFGR &= ~(0b111<<RCC_CFGR_MCO2PRE_Pos);
 8004456:	4b1e      	ldr	r3, [pc, #120]	; (80044d0 <configMCO2PRE+0xbc>)
 8004458:	689b      	ldr	r3, [r3, #8]
 800445a:	4a1d      	ldr	r2, [pc, #116]	; (80044d0 <configMCO2PRE+0xbc>)
 800445c:	f023 5360 	bic.w	r3, r3, #939524096	; 0x38000000
 8004460:	6093      	str	r3, [r2, #8]
			RCC->CFGR |= (0b100<<RCC_CFGR_MCO2PRE_Pos);
 8004462:	4b1b      	ldr	r3, [pc, #108]	; (80044d0 <configMCO2PRE+0xbc>)
 8004464:	689b      	ldr	r3, [r3, #8]
 8004466:	4a1a      	ldr	r2, [pc, #104]	; (80044d0 <configMCO2PRE+0xbc>)
 8004468:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800446c:	6093      	str	r3, [r2, #8]
			break;
 800446e:	e028      	b.n	80044c2 <configMCO2PRE+0xae>
		}
		case 3:
		{
			RCC->CFGR &= ~(0b111<<RCC_CFGR_MCO2PRE_Pos);
 8004470:	4b17      	ldr	r3, [pc, #92]	; (80044d0 <configMCO2PRE+0xbc>)
 8004472:	689b      	ldr	r3, [r3, #8]
 8004474:	4a16      	ldr	r2, [pc, #88]	; (80044d0 <configMCO2PRE+0xbc>)
 8004476:	f023 5360 	bic.w	r3, r3, #939524096	; 0x38000000
 800447a:	6093      	str	r3, [r2, #8]
			RCC->CFGR |= (0b101<<RCC_CFGR_MCO2PRE_Pos);
 800447c:	4b14      	ldr	r3, [pc, #80]	; (80044d0 <configMCO2PRE+0xbc>)
 800447e:	689b      	ldr	r3, [r3, #8]
 8004480:	4a13      	ldr	r2, [pc, #76]	; (80044d0 <configMCO2PRE+0xbc>)
 8004482:	f043 5320 	orr.w	r3, r3, #671088640	; 0x28000000
 8004486:	6093      	str	r3, [r2, #8]
			break;
 8004488:	e01b      	b.n	80044c2 <configMCO2PRE+0xae>
		}
		case 4:
		{
			RCC->CFGR &= ~(0b111<<RCC_CFGR_MCO2PRE_Pos);
 800448a:	4b11      	ldr	r3, [pc, #68]	; (80044d0 <configMCO2PRE+0xbc>)
 800448c:	689b      	ldr	r3, [r3, #8]
 800448e:	4a10      	ldr	r2, [pc, #64]	; (80044d0 <configMCO2PRE+0xbc>)
 8004490:	f023 5360 	bic.w	r3, r3, #939524096	; 0x38000000
 8004494:	6093      	str	r3, [r2, #8]
			RCC->CFGR |= (0b110<<RCC_CFGR_MCO2PRE_Pos);
 8004496:	4b0e      	ldr	r3, [pc, #56]	; (80044d0 <configMCO2PRE+0xbc>)
 8004498:	689b      	ldr	r3, [r3, #8]
 800449a:	4a0d      	ldr	r2, [pc, #52]	; (80044d0 <configMCO2PRE+0xbc>)
 800449c:	f043 5340 	orr.w	r3, r3, #805306368	; 0x30000000
 80044a0:	6093      	str	r3, [r2, #8]
			break;
 80044a2:	e00e      	b.n	80044c2 <configMCO2PRE+0xae>
		}
		case 5:
		{
			RCC->CFGR &= ~(0b111<<RCC_CFGR_MCO2PRE_Pos);
 80044a4:	4b0a      	ldr	r3, [pc, #40]	; (80044d0 <configMCO2PRE+0xbc>)
 80044a6:	689b      	ldr	r3, [r3, #8]
 80044a8:	4a09      	ldr	r2, [pc, #36]	; (80044d0 <configMCO2PRE+0xbc>)
 80044aa:	f023 5360 	bic.w	r3, r3, #939524096	; 0x38000000
 80044ae:	6093      	str	r3, [r2, #8]
			RCC->CFGR |= (0b111<<RCC_CFGR_MCO2PRE_Pos);
 80044b0:	4b07      	ldr	r3, [pc, #28]	; (80044d0 <configMCO2PRE+0xbc>)
 80044b2:	689b      	ldr	r3, [r3, #8]
 80044b4:	4a06      	ldr	r2, [pc, #24]	; (80044d0 <configMCO2PRE+0xbc>)
 80044b6:	f043 5360 	orr.w	r3, r3, #939524096	; 0x38000000
 80044ba:	6093      	str	r3, [r2, #8]
			break;
 80044bc:	e001      	b.n	80044c2 <configMCO2PRE+0xae>
		}
		default:
		{
			__NOP();
 80044be:	bf00      	nop
			break;
 80044c0:	bf00      	nop
		}
	}

}
 80044c2:	bf00      	nop
 80044c4:	370c      	adds	r7, #12
 80044c6:	46bd      	mov	sp, r7
 80044c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044cc:	4770      	bx	lr
 80044ce:	bf00      	nop
 80044d0:	40023800 	.word	0x40023800

080044d4 <pwm_Config>:

#include <PwmDriver.h>
#include <PLLDriver.h>

void pwm_Config(PWM_Handler_t *prtPwmHandler)
{
 80044d4:	b580      	push	{r7, lr}
 80044d6:	b082      	sub	sp, #8
 80044d8:	af00      	add	r7, sp, #0
 80044da:	6078      	str	r0, [r7, #4]
	//---------------------------1) Activamos la señal de reloj al periferico----------------------------------
	//Registro: APB1ENR

	//Verificamos para TIM2
	if(prtPwmHandler->ptrTIMx==TIM2)
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	689b      	ldr	r3, [r3, #8]
 80044e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044e4:	d106      	bne.n	80044f4 <pwm_Config+0x20>
	{
		/*Activamos el periferico escribiendo un 1 deacuerdo a la posicion
		* del periferico en el registro*/
		RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 80044e6:	4b81      	ldr	r3, [pc, #516]	; (80046ec <pwm_Config+0x218>)
 80044e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044ea:	4a80      	ldr	r2, [pc, #512]	; (80046ec <pwm_Config+0x218>)
 80044ec:	f043 0301 	orr.w	r3, r3, #1
 80044f0:	6413      	str	r3, [r2, #64]	; 0x40
 80044f2:	e024      	b.n	800453e <pwm_Config+0x6a>

	}
	//Verificamos para TIM3
	else if(prtPwmHandler->ptrTIMx==TIM3)
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	689b      	ldr	r3, [r3, #8]
 80044f8:	4a7d      	ldr	r2, [pc, #500]	; (80046f0 <pwm_Config+0x21c>)
 80044fa:	4293      	cmp	r3, r2
 80044fc:	d106      	bne.n	800450c <pwm_Config+0x38>
	{
		/*Activamos el periferico escribiendo un 1 deacuerdo a la posicion
		 * del periferico en el registro*/
		RCC->APB1ENR |= RCC_APB1ENR_TIM3EN;
 80044fe:	4b7b      	ldr	r3, [pc, #492]	; (80046ec <pwm_Config+0x218>)
 8004500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004502:	4a7a      	ldr	r2, [pc, #488]	; (80046ec <pwm_Config+0x218>)
 8004504:	f043 0302 	orr.w	r3, r3, #2
 8004508:	6413      	str	r3, [r2, #64]	; 0x40
 800450a:	e018      	b.n	800453e <pwm_Config+0x6a>

	}
	//Verificamos para TIM4
	else if(prtPwmHandler->ptrTIMx==TIM4)
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	689b      	ldr	r3, [r3, #8]
 8004510:	4a78      	ldr	r2, [pc, #480]	; (80046f4 <pwm_Config+0x220>)
 8004512:	4293      	cmp	r3, r2
 8004514:	d106      	bne.n	8004524 <pwm_Config+0x50>
	{
		/*Activamos el periferico escribiendo un 1 deacuerdo a la posicion
		 * del periferico en el registro*/
		RCC->APB1ENR |= RCC_APB1ENR_TIM4EN;
 8004516:	4b75      	ldr	r3, [pc, #468]	; (80046ec <pwm_Config+0x218>)
 8004518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800451a:	4a74      	ldr	r2, [pc, #464]	; (80046ec <pwm_Config+0x218>)
 800451c:	f043 0304 	orr.w	r3, r3, #4
 8004520:	6413      	str	r3, [r2, #64]	; 0x40
 8004522:	e00c      	b.n	800453e <pwm_Config+0x6a>

	}
	//Verificamos para TIM5
	else if(prtPwmHandler->ptrTIMx==TIM5)
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	689b      	ldr	r3, [r3, #8]
 8004528:	4a73      	ldr	r2, [pc, #460]	; (80046f8 <pwm_Config+0x224>)
 800452a:	4293      	cmp	r3, r2
 800452c:	d106      	bne.n	800453c <pwm_Config+0x68>
	{
		/*Activamos el periferico escribiendo un 1 deacuerdo a la posicion
		 * del periferico en el registro*/
		RCC->APB1ENR |= RCC_APB1ENR_TIM5EN;
 800452e:	4b6f      	ldr	r3, [pc, #444]	; (80046ec <pwm_Config+0x218>)
 8004530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004532:	4a6e      	ldr	r2, [pc, #440]	; (80046ec <pwm_Config+0x218>)
 8004534:	f043 0308 	orr.w	r3, r3, #8
 8004538:	6413      	str	r3, [r2, #64]	; 0x40
 800453a:	e000      	b.n	800453e <pwm_Config+0x6a>

	}
	else
	{
		__NOP();
 800453c:	bf00      	nop
	}

	//---------------------------2) Cargamos el valor del dutty------------------------------------
	//Registro: CCRx

	setDuttyCycle(prtPwmHandler);
 800453e:	6878      	ldr	r0, [r7, #4]
 8004540:	f000 fa4c 	bl	80049dc <setDuttyCycle>

	//---------------------------3) Configuracion del CCMRx------------------------------------------
	//Registro: CCMRx

	switch(prtPwmHandler->config.channel)
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	781b      	ldrb	r3, [r3, #0]
 8004548:	2b03      	cmp	r3, #3
 800454a:	f200 8118 	bhi.w	800477e <pwm_Config+0x2aa>
 800454e:	a201      	add	r2, pc, #4	; (adr r2, 8004554 <pwm_Config+0x80>)
 8004550:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004554:	08004565 	.word	0x08004565
 8004558:	080045e7 	.word	0x080045e7
 800455c:	08004669 	.word	0x08004669
 8004560:	080046fd 	.word	0x080046fd
	{
	//Configuracion del CCMR1_Channel 1
	case PWM_CHANNEL_1:
	{
		//Selecionamos el canal como salida
		prtPwmHandler->ptrTIMx->CCMR1 &= ~TIM_CCMR1_CC1S;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	689b      	ldr	r3, [r3, #8]
 8004568:	699a      	ldr	r2, [r3, #24]
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	689b      	ldr	r3, [r3, #8]
 800456e:	f022 0203 	bic.w	r2, r2, #3
 8004572:	619a      	str	r2, [r3, #24]
		//configuramos el canal como PWM
		prtPwmHandler->ptrTIMx->CCMR1 &= ~(0b111<<TIM_CCMR1_OC1M_Pos);
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	689b      	ldr	r3, [r3, #8]
 8004578:	699a      	ldr	r2, [r3, #24]
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	689b      	ldr	r3, [r3, #8]
 800457e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8004582:	619a      	str	r2, [r3, #24]
		prtPwmHandler->ptrTIMx->CCMR1 |= (0b110<<TIM_CCMR1_OC1M_Pos);
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	689b      	ldr	r3, [r3, #8]
 8004588:	699a      	ldr	r2, [r3, #24]
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	689b      	ldr	r3, [r3, #8]
 800458e:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8004592:	619a      	str	r2, [r3, #24]
		//Activamos la funcionalidad de pre-load
		prtPwmHandler->ptrTIMx->CCMR1 &= ~TIM_CCMR1_OC1PE;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	689b      	ldr	r3, [r3, #8]
 8004598:	699a      	ldr	r2, [r3, #24]
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	689b      	ldr	r3, [r3, #8]
 800459e:	f022 0208 	bic.w	r2, r2, #8
 80045a2:	619a      	str	r2, [r3, #24]
		prtPwmHandler->ptrTIMx->CCMR1 |= TIM_CCMR1_OC1PE;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	689b      	ldr	r3, [r3, #8]
 80045a8:	699a      	ldr	r2, [r3, #24]
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	689b      	ldr	r3, [r3, #8]
 80045ae:	f042 0208 	orr.w	r2, r2, #8
 80045b2:	619a      	str	r2, [r3, #24]
		//Configuracion adicional
		prtPwmHandler->ptrTIMx->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	689b      	ldr	r3, [r3, #8]
 80045b8:	699a      	ldr	r2, [r3, #24]
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	689b      	ldr	r3, [r3, #8]
 80045be:	f022 0204 	bic.w	r2, r2, #4
 80045c2:	619a      	str	r2, [r3, #24]
		prtPwmHandler->ptrTIMx->CCMR1 |= TIM_CCMR1_OC1FE;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	689b      	ldr	r3, [r3, #8]
 80045c8:	699a      	ldr	r2, [r3, #24]
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	689b      	ldr	r3, [r3, #8]
 80045ce:	f042 0204 	orr.w	r2, r2, #4
 80045d2:	619a      	str	r2, [r3, #24]
		prtPwmHandler->ptrTIMx->CCMR1 &= ~TIM_CCMR1_OC1CE;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	689b      	ldr	r3, [r3, #8]
 80045d8:	699a      	ldr	r2, [r3, #24]
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	689b      	ldr	r3, [r3, #8]
 80045de:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80045e2:	619a      	str	r2, [r3, #24]

		break;
 80045e4:	e0cc      	b.n	8004780 <pwm_Config+0x2ac>
	}
	//Configuracion del CCMR1_Channel 2
	case PWM_CHANNEL_2:
	{
		//Selecionamos el canal como salida
		prtPwmHandler->ptrTIMx->CCMR1 &= ~TIM_CCMR1_CC1S;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	689b      	ldr	r3, [r3, #8]
 80045ea:	699a      	ldr	r2, [r3, #24]
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	689b      	ldr	r3, [r3, #8]
 80045f0:	f022 0203 	bic.w	r2, r2, #3
 80045f4:	619a      	str	r2, [r3, #24]
		//configuramos el canal como PWM
		prtPwmHandler->ptrTIMx->CCMR1 &= ~(0b111<<TIM_CCMR1_OC2M_Pos);
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	689b      	ldr	r3, [r3, #8]
 80045fa:	699a      	ldr	r2, [r3, #24]
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	689b      	ldr	r3, [r3, #8]
 8004600:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8004604:	619a      	str	r2, [r3, #24]
		prtPwmHandler->ptrTIMx->CCMR1 |= (0b110<<TIM_CCMR1_OC2M_Pos);
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	689b      	ldr	r3, [r3, #8]
 800460a:	699a      	ldr	r2, [r3, #24]
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	689b      	ldr	r3, [r3, #8]
 8004610:	f442 42c0 	orr.w	r2, r2, #24576	; 0x6000
 8004614:	619a      	str	r2, [r3, #24]
		//Activamos la funcionalidad de pre-load
		prtPwmHandler->ptrTIMx->CCMR1 &= ~TIM_CCMR1_OC2PE;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	689b      	ldr	r3, [r3, #8]
 800461a:	699a      	ldr	r2, [r3, #24]
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	689b      	ldr	r3, [r3, #8]
 8004620:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004624:	619a      	str	r2, [r3, #24]
		prtPwmHandler->ptrTIMx->CCMR1 |= TIM_CCMR1_OC2PE;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	689b      	ldr	r3, [r3, #8]
 800462a:	699a      	ldr	r2, [r3, #24]
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	689b      	ldr	r3, [r3, #8]
 8004630:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004634:	619a      	str	r2, [r3, #24]
		//Configuracion adicional
		prtPwmHandler->ptrTIMx->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	689b      	ldr	r3, [r3, #8]
 800463a:	699a      	ldr	r2, [r3, #24]
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	689b      	ldr	r3, [r3, #8]
 8004640:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004644:	619a      	str	r2, [r3, #24]
		prtPwmHandler->ptrTIMx->CCMR1 |= TIM_CCMR1_OC2FE;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	689b      	ldr	r3, [r3, #8]
 800464a:	699a      	ldr	r2, [r3, #24]
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	689b      	ldr	r3, [r3, #8]
 8004650:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004654:	619a      	str	r2, [r3, #24]
		prtPwmHandler->ptrTIMx->CCMR1 &= ~TIM_CCMR1_OC2CE;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	689b      	ldr	r3, [r3, #8]
 800465a:	699a      	ldr	r2, [r3, #24]
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	689b      	ldr	r3, [r3, #8]
 8004660:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004664:	619a      	str	r2, [r3, #24]

		break;
 8004666:	e08b      	b.n	8004780 <pwm_Config+0x2ac>
	}
	//Configuracion del CCMR2_Channel 3
	case PWM_CHANNEL_3:
	{
		//Selecionamos el canal como salida
		prtPwmHandler->ptrTIMx->CCMR2 &= ~TIM_CCMR2_CC3S;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	689b      	ldr	r3, [r3, #8]
 800466c:	69da      	ldr	r2, [r3, #28]
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	689b      	ldr	r3, [r3, #8]
 8004672:	f022 0203 	bic.w	r2, r2, #3
 8004676:	61da      	str	r2, [r3, #28]
		//configuramos el canal como PWM
		prtPwmHandler->ptrTIMx->CCMR2 &= ~(0b111<<TIM_CCMR2_OC3M_Pos);
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	689b      	ldr	r3, [r3, #8]
 800467c:	69da      	ldr	r2, [r3, #28]
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	689b      	ldr	r3, [r3, #8]
 8004682:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8004686:	61da      	str	r2, [r3, #28]
		prtPwmHandler->ptrTIMx->CCMR2 |= (0b110<<TIM_CCMR2_OC3M_Pos);
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	689b      	ldr	r3, [r3, #8]
 800468c:	69da      	ldr	r2, [r3, #28]
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	689b      	ldr	r3, [r3, #8]
 8004692:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8004696:	61da      	str	r2, [r3, #28]
		//Activamos la funcionalidad de pre-load
		prtPwmHandler->ptrTIMx->CCMR2 &= ~TIM_CCMR2_OC3PE;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	689b      	ldr	r3, [r3, #8]
 800469c:	69da      	ldr	r2, [r3, #28]
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	689b      	ldr	r3, [r3, #8]
 80046a2:	f022 0208 	bic.w	r2, r2, #8
 80046a6:	61da      	str	r2, [r3, #28]
		prtPwmHandler->ptrTIMx->CCMR2 |= TIM_CCMR2_OC3PE;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	689b      	ldr	r3, [r3, #8]
 80046ac:	69da      	ldr	r2, [r3, #28]
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	689b      	ldr	r3, [r3, #8]
 80046b2:	f042 0208 	orr.w	r2, r2, #8
 80046b6:	61da      	str	r2, [r3, #28]
		//Configuracion adicional
		prtPwmHandler->ptrTIMx->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	689b      	ldr	r3, [r3, #8]
 80046bc:	69da      	ldr	r2, [r3, #28]
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	689b      	ldr	r3, [r3, #8]
 80046c2:	f022 0204 	bic.w	r2, r2, #4
 80046c6:	61da      	str	r2, [r3, #28]
		prtPwmHandler->ptrTIMx->CCMR2 |= TIM_CCMR2_OC3FE;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	689b      	ldr	r3, [r3, #8]
 80046cc:	69da      	ldr	r2, [r3, #28]
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	689b      	ldr	r3, [r3, #8]
 80046d2:	f042 0204 	orr.w	r2, r2, #4
 80046d6:	61da      	str	r2, [r3, #28]
		prtPwmHandler->ptrTIMx->CCMR2 &= ~TIM_CCMR2_OC3CE;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	689b      	ldr	r3, [r3, #8]
 80046dc:	69da      	ldr	r2, [r3, #28]
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	689b      	ldr	r3, [r3, #8]
 80046e2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80046e6:	61da      	str	r2, [r3, #28]

		break;
 80046e8:	e04a      	b.n	8004780 <pwm_Config+0x2ac>
 80046ea:	bf00      	nop
 80046ec:	40023800 	.word	0x40023800
 80046f0:	40000400 	.word	0x40000400
 80046f4:	40000800 	.word	0x40000800
 80046f8:	40000c00 	.word	0x40000c00
	}
	//Configuracion del CCMR2_Channel 4
	case PWM_CHANNEL_4:
	{
		//Selecionamos el canal como salida
		prtPwmHandler->ptrTIMx->CCMR2 &= ~TIM_CCMR2_CC4S;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	689b      	ldr	r3, [r3, #8]
 8004700:	69da      	ldr	r2, [r3, #28]
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	689b      	ldr	r3, [r3, #8]
 8004706:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800470a:	61da      	str	r2, [r3, #28]
		//configuramos el canal como PWM
		prtPwmHandler->ptrTIMx->CCMR2 &= ~(0b111<<TIM_CCMR2_OC4M_Pos);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	689b      	ldr	r3, [r3, #8]
 8004710:	69da      	ldr	r2, [r3, #28]
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	689b      	ldr	r3, [r3, #8]
 8004716:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 800471a:	61da      	str	r2, [r3, #28]
		prtPwmHandler->ptrTIMx->CCMR2 |= (0b110<<TIM_CCMR2_OC4M_Pos);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	689b      	ldr	r3, [r3, #8]
 8004720:	69da      	ldr	r2, [r3, #28]
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	689b      	ldr	r3, [r3, #8]
 8004726:	f442 42c0 	orr.w	r2, r2, #24576	; 0x6000
 800472a:	61da      	str	r2, [r3, #28]
		//Activamos la funcionalidad de pre-load
		prtPwmHandler->ptrTIMx->CCMR2 &= ~TIM_CCMR2_OC4PE;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	689b      	ldr	r3, [r3, #8]
 8004730:	69da      	ldr	r2, [r3, #28]
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	689b      	ldr	r3, [r3, #8]
 8004736:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800473a:	61da      	str	r2, [r3, #28]
		prtPwmHandler->ptrTIMx->CCMR2 |= TIM_CCMR2_OC4PE;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	689b      	ldr	r3, [r3, #8]
 8004740:	69da      	ldr	r2, [r3, #28]
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	689b      	ldr	r3, [r3, #8]
 8004746:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800474a:	61da      	str	r2, [r3, #28]
		//Configuracion adicional
		prtPwmHandler->ptrTIMx->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	689b      	ldr	r3, [r3, #8]
 8004750:	69da      	ldr	r2, [r3, #28]
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	689b      	ldr	r3, [r3, #8]
 8004756:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800475a:	61da      	str	r2, [r3, #28]
		prtPwmHandler->ptrTIMx->CCMR2 |= TIM_CCMR2_OC4FE;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	689b      	ldr	r3, [r3, #8]
 8004760:	69da      	ldr	r2, [r3, #28]
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	689b      	ldr	r3, [r3, #8]
 8004766:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800476a:	61da      	str	r2, [r3, #28]
		prtPwmHandler->ptrTIMx->CCMR2 &= ~TIM_CCMR2_OC4CE;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	689b      	ldr	r3, [r3, #8]
 8004770:	69da      	ldr	r2, [r3, #28]
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	689b      	ldr	r3, [r3, #8]
 8004776:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800477a:	61da      	str	r2, [r3, #28]

		break;
 800477c:	e000      	b.n	8004780 <pwm_Config+0x2ac>
	}
	default:
	{
		break;
 800477e:	bf00      	nop
	}

	//---------------------------4) Definicion de la polaridad------------------------------------------
	//Registro: CCER

	statusPolarityPWM(prtPwmHandler, prtPwmHandler->config.polarity);
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	791b      	ldrb	r3, [r3, #4]
 8004784:	4619      	mov	r1, r3
 8004786:	6878      	ldr	r0, [r7, #4]
 8004788:	f000 f896 	bl	80048b8 <statusPolarityPWM>

}
 800478c:	bf00      	nop
 800478e:	3708      	adds	r7, #8
 8004790:	46bd      	mov	sp, r7
 8004792:	bd80      	pop	{r7, pc}

08004794 <statusInOutPWM>:

//Activamos o desactivamos la señal PWM
void statusInOutPWM(PWM_Handler_t *prtPwmHandler, uint8_t status)
{
 8004794:	b480      	push	{r7}
 8004796:	b083      	sub	sp, #12
 8004798:	af00      	add	r7, sp, #0
 800479a:	6078      	str	r0, [r7, #4]
 800479c:	460b      	mov	r3, r1
 800479e:	70fb      	strb	r3, [r7, #3]
	switch(prtPwmHandler->config.channel)
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	781b      	ldrb	r3, [r3, #0]
 80047a4:	2b03      	cmp	r3, #3
 80047a6:	d87f      	bhi.n	80048a8 <statusInOutPWM+0x114>
 80047a8:	a201      	add	r2, pc, #4	; (adr r2, 80047b0 <statusInOutPWM+0x1c>)
 80047aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047ae:	bf00      	nop
 80047b0:	080047c1 	.word	0x080047c1
 80047b4:	080047fb 	.word	0x080047fb
 80047b8:	08004835 	.word	0x08004835
 80047bc:	0800486f 	.word	0x0800486f
	{
	//Activamos el Canal 1
	case PWM_CHANNEL_1:
	{
		if (status==CHANNEL_ENABLE)
 80047c0:	78fb      	ldrb	r3, [r7, #3]
 80047c2:	2b01      	cmp	r3, #1
 80047c4:	d110      	bne.n	80047e8 <statusInOutPWM+0x54>
		{
			//Activamos el canal 1
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC1E;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	689b      	ldr	r3, [r3, #8]
 80047ca:	6a1a      	ldr	r2, [r3, #32]
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	689b      	ldr	r3, [r3, #8]
 80047d0:	f022 0201 	bic.w	r2, r2, #1
 80047d4:	621a      	str	r2, [r3, #32]
			prtPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC1E;
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	689b      	ldr	r3, [r3, #8]
 80047da:	6a1a      	ldr	r2, [r3, #32]
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	689b      	ldr	r3, [r3, #8]
 80047e0:	f042 0201 	orr.w	r2, r2, #1
 80047e4:	621a      	str	r2, [r3, #32]
		else
		{
			//Desactivamos el canal 1
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC1E;
		}
		break;
 80047e6:	e060      	b.n	80048aa <statusInOutPWM+0x116>
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC1E;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	689b      	ldr	r3, [r3, #8]
 80047ec:	6a1a      	ldr	r2, [r3, #32]
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	689b      	ldr	r3, [r3, #8]
 80047f2:	f022 0201 	bic.w	r2, r2, #1
 80047f6:	621a      	str	r2, [r3, #32]
		break;
 80047f8:	e057      	b.n	80048aa <statusInOutPWM+0x116>
	}
	//Activamos el Canal 2
	case PWM_CHANNEL_2:
	{
		if (status==CHANNEL_ENABLE)
 80047fa:	78fb      	ldrb	r3, [r7, #3]
 80047fc:	2b01      	cmp	r3, #1
 80047fe:	d110      	bne.n	8004822 <statusInOutPWM+0x8e>
		{
			//Activamos el canal 2
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC2E;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	689b      	ldr	r3, [r3, #8]
 8004804:	6a1a      	ldr	r2, [r3, #32]
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	689b      	ldr	r3, [r3, #8]
 800480a:	f022 0210 	bic.w	r2, r2, #16
 800480e:	621a      	str	r2, [r3, #32]
			prtPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC2E;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	689b      	ldr	r3, [r3, #8]
 8004814:	6a1a      	ldr	r2, [r3, #32]
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	689b      	ldr	r3, [r3, #8]
 800481a:	f042 0210 	orr.w	r2, r2, #16
 800481e:	621a      	str	r2, [r3, #32]
		else
		{
			//Desactivamos el canal 2
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC2E;
		}
		break;
 8004820:	e043      	b.n	80048aa <statusInOutPWM+0x116>
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC2E;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	689b      	ldr	r3, [r3, #8]
 8004826:	6a1a      	ldr	r2, [r3, #32]
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	689b      	ldr	r3, [r3, #8]
 800482c:	f022 0210 	bic.w	r2, r2, #16
 8004830:	621a      	str	r2, [r3, #32]
		break;
 8004832:	e03a      	b.n	80048aa <statusInOutPWM+0x116>
	}
	//Activamos el Canal 3
	case PWM_CHANNEL_3:
	{
		if (status==CHANNEL_ENABLE)
 8004834:	78fb      	ldrb	r3, [r7, #3]
 8004836:	2b01      	cmp	r3, #1
 8004838:	d110      	bne.n	800485c <statusInOutPWM+0xc8>
		{
			//Activamos el canal 3
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC3E;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	689b      	ldr	r3, [r3, #8]
 800483e:	6a1a      	ldr	r2, [r3, #32]
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	689b      	ldr	r3, [r3, #8]
 8004844:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004848:	621a      	str	r2, [r3, #32]
			prtPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC3E;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	689b      	ldr	r3, [r3, #8]
 800484e:	6a1a      	ldr	r2, [r3, #32]
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	689b      	ldr	r3, [r3, #8]
 8004854:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004858:	621a      	str	r2, [r3, #32]
		else
		{
			//Desactivamos el canal 3
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC3E;
		}
		break;
 800485a:	e026      	b.n	80048aa <statusInOutPWM+0x116>
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC3E;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	689b      	ldr	r3, [r3, #8]
 8004860:	6a1a      	ldr	r2, [r3, #32]
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	689b      	ldr	r3, [r3, #8]
 8004866:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800486a:	621a      	str	r2, [r3, #32]
		break;
 800486c:	e01d      	b.n	80048aa <statusInOutPWM+0x116>
	}
	//Activamos el Canal 4
	case PWM_CHANNEL_4:
	{
		if (status==CHANNEL_ENABLE)
 800486e:	78fb      	ldrb	r3, [r7, #3]
 8004870:	2b01      	cmp	r3, #1
 8004872:	d110      	bne.n	8004896 <statusInOutPWM+0x102>
		{
			//Activamos el canal 4
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC4E;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	689b      	ldr	r3, [r3, #8]
 8004878:	6a1a      	ldr	r2, [r3, #32]
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	689b      	ldr	r3, [r3, #8]
 800487e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004882:	621a      	str	r2, [r3, #32]
			prtPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC4E;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	689b      	ldr	r3, [r3, #8]
 8004888:	6a1a      	ldr	r2, [r3, #32]
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	689b      	ldr	r3, [r3, #8]
 800488e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004892:	621a      	str	r2, [r3, #32]
		else
		{
			//Desactivamos el canal 4
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC4E;
		}
		break;
 8004894:	e009      	b.n	80048aa <statusInOutPWM+0x116>
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC4E;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	689b      	ldr	r3, [r3, #8]
 800489a:	6a1a      	ldr	r2, [r3, #32]
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	689b      	ldr	r3, [r3, #8]
 80048a0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80048a4:	621a      	str	r2, [r3, #32]
		break;
 80048a6:	e000      	b.n	80048aa <statusInOutPWM+0x116>
	}
	default:
	{
		break;
 80048a8:	bf00      	nop
	}
	}
}
 80048aa:	bf00      	nop
 80048ac:	370c      	adds	r7, #12
 80048ae:	46bd      	mov	sp, r7
 80048b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b4:	4770      	bx	lr
 80048b6:	bf00      	nop

080048b8 <statusPolarityPWM>:


void statusPolarityPWM(PWM_Handler_t *prtPwmHandler, uint8_t status)
{
 80048b8:	b480      	push	{r7}
 80048ba:	b083      	sub	sp, #12
 80048bc:	af00      	add	r7, sp, #0
 80048be:	6078      	str	r0, [r7, #4]
 80048c0:	460b      	mov	r3, r1
 80048c2:	70fb      	strb	r3, [r7, #3]
	switch(prtPwmHandler->config.channel)
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	781b      	ldrb	r3, [r3, #0]
 80048c8:	2b03      	cmp	r3, #3
 80048ca:	d87f      	bhi.n	80049cc <statusPolarityPWM+0x114>
 80048cc:	a201      	add	r2, pc, #4	; (adr r2, 80048d4 <statusPolarityPWM+0x1c>)
 80048ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048d2:	bf00      	nop
 80048d4:	080048e5 	.word	0x080048e5
 80048d8:	0800491f 	.word	0x0800491f
 80048dc:	08004959 	.word	0x08004959
 80048e0:	08004993 	.word	0x08004993
	{
	//Definimos la polaridad del Canal 1
	case PWM_CHANNEL_1:
	{
		if (status==POLARITY_LOW)
 80048e4:	78fb      	ldrb	r3, [r7, #3]
 80048e6:	2b01      	cmp	r3, #1
 80048e8:	d110      	bne.n	800490c <statusPolarityPWM+0x54>
		{
			//Polaridad low del canal 1
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC1P;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	689b      	ldr	r3, [r3, #8]
 80048ee:	6a1a      	ldr	r2, [r3, #32]
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	689b      	ldr	r3, [r3, #8]
 80048f4:	f022 0202 	bic.w	r2, r2, #2
 80048f8:	621a      	str	r2, [r3, #32]
			prtPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC1P;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	689b      	ldr	r3, [r3, #8]
 80048fe:	6a1a      	ldr	r2, [r3, #32]
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	689b      	ldr	r3, [r3, #8]
 8004904:	f042 0202 	orr.w	r2, r2, #2
 8004908:	621a      	str	r2, [r3, #32]
		else
		{
			//Polaridad high del canal 1
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC1P;
		}
		break;
 800490a:	e060      	b.n	80049ce <statusPolarityPWM+0x116>
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC1P;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	689b      	ldr	r3, [r3, #8]
 8004910:	6a1a      	ldr	r2, [r3, #32]
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	689b      	ldr	r3, [r3, #8]
 8004916:	f022 0202 	bic.w	r2, r2, #2
 800491a:	621a      	str	r2, [r3, #32]
		break;
 800491c:	e057      	b.n	80049ce <statusPolarityPWM+0x116>
	}
	//Definimos la polaridad del Canal 2
	case PWM_CHANNEL_2:
	{
		if (status==POLARITY_LOW)
 800491e:	78fb      	ldrb	r3, [r7, #3]
 8004920:	2b01      	cmp	r3, #1
 8004922:	d110      	bne.n	8004946 <statusPolarityPWM+0x8e>
		{
			//Polaridad low del canal 2
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC2P;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	689b      	ldr	r3, [r3, #8]
 8004928:	6a1a      	ldr	r2, [r3, #32]
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	689b      	ldr	r3, [r3, #8]
 800492e:	f022 0220 	bic.w	r2, r2, #32
 8004932:	621a      	str	r2, [r3, #32]
			prtPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC2P;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	689b      	ldr	r3, [r3, #8]
 8004938:	6a1a      	ldr	r2, [r3, #32]
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	689b      	ldr	r3, [r3, #8]
 800493e:	f042 0220 	orr.w	r2, r2, #32
 8004942:	621a      	str	r2, [r3, #32]
		else
		{
			//Polaridad high del canal 2
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC2P;
		}
		break;
 8004944:	e043      	b.n	80049ce <statusPolarityPWM+0x116>
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC2P;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	689b      	ldr	r3, [r3, #8]
 800494a:	6a1a      	ldr	r2, [r3, #32]
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	689b      	ldr	r3, [r3, #8]
 8004950:	f022 0220 	bic.w	r2, r2, #32
 8004954:	621a      	str	r2, [r3, #32]
		break;
 8004956:	e03a      	b.n	80049ce <statusPolarityPWM+0x116>
	}
	//Definimos la polaridad del Canal 3
	case PWM_CHANNEL_3:
	{
		if (status==POLARITY_LOW)
 8004958:	78fb      	ldrb	r3, [r7, #3]
 800495a:	2b01      	cmp	r3, #1
 800495c:	d110      	bne.n	8004980 <statusPolarityPWM+0xc8>
		{
			//Polaridad low del canal 3
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC3P;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	689b      	ldr	r3, [r3, #8]
 8004962:	6a1a      	ldr	r2, [r3, #32]
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	689b      	ldr	r3, [r3, #8]
 8004968:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800496c:	621a      	str	r2, [r3, #32]
			prtPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC3P;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	689b      	ldr	r3, [r3, #8]
 8004972:	6a1a      	ldr	r2, [r3, #32]
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	689b      	ldr	r3, [r3, #8]
 8004978:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800497c:	621a      	str	r2, [r3, #32]
		else
		{
			//Polaridad high del canal 3
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC3P;
		}
		break;
 800497e:	e026      	b.n	80049ce <statusPolarityPWM+0x116>
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC3P;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	689b      	ldr	r3, [r3, #8]
 8004984:	6a1a      	ldr	r2, [r3, #32]
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	689b      	ldr	r3, [r3, #8]
 800498a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800498e:	621a      	str	r2, [r3, #32]
		break;
 8004990:	e01d      	b.n	80049ce <statusPolarityPWM+0x116>
	}
	//Definimos la polaridad del Canal 4
	case PWM_CHANNEL_4:
	{
		if (status==POLARITY_LOW)
 8004992:	78fb      	ldrb	r3, [r7, #3]
 8004994:	2b01      	cmp	r3, #1
 8004996:	d110      	bne.n	80049ba <statusPolarityPWM+0x102>
		{
			//Polaridad low del canal 4
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC4P;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	689b      	ldr	r3, [r3, #8]
 800499c:	6a1a      	ldr	r2, [r3, #32]
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	689b      	ldr	r3, [r3, #8]
 80049a2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80049a6:	621a      	str	r2, [r3, #32]
			prtPwmHandler->ptrTIMx->CCER |= TIM_CCER_CC4P;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	689b      	ldr	r3, [r3, #8]
 80049ac:	6a1a      	ldr	r2, [r3, #32]
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	689b      	ldr	r3, [r3, #8]
 80049b2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80049b6:	621a      	str	r2, [r3, #32]
		else
		{
			//Polaridad high del canal 4
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC4P;
		}
		break;
 80049b8:	e009      	b.n	80049ce <statusPolarityPWM+0x116>
			prtPwmHandler->ptrTIMx->CCER &= ~TIM_CCER_CC4P;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	689b      	ldr	r3, [r3, #8]
 80049be:	6a1a      	ldr	r2, [r3, #32]
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	689b      	ldr	r3, [r3, #8]
 80049c4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80049c8:	621a      	str	r2, [r3, #32]
		break;
 80049ca:	e000      	b.n	80049ce <statusPolarityPWM+0x116>
	}
	default:
	{
		break;
 80049cc:	bf00      	nop
	}
	}

}
 80049ce:	bf00      	nop
 80049d0:	370c      	adds	r7, #12
 80049d2:	46bd      	mov	sp, r7
 80049d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d8:	4770      	bx	lr
 80049da:	bf00      	nop

080049dc <setDuttyCycle>:

//Configuracion del DuttyCicle
void setDuttyCycle(PWM_Handler_t *prtPwmHandler)
{
 80049dc:	b480      	push	{r7}
 80049de:	b083      	sub	sp, #12
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	6078      	str	r0, [r7, #4]
	//Selecionamos el canal para configurar el dutty
	switch(prtPwmHandler->config.channel)
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	781b      	ldrb	r3, [r3, #0]
 80049e8:	2b03      	cmp	r3, #3
 80049ea:	d823      	bhi.n	8004a34 <setDuttyCycle+0x58>
 80049ec:	a201      	add	r2, pc, #4	; (adr r2, 80049f4 <setDuttyCycle+0x18>)
 80049ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049f2:	bf00      	nop
 80049f4:	08004a05 	.word	0x08004a05
 80049f8:	08004a11 	.word	0x08004a11
 80049fc:	08004a1d 	.word	0x08004a1d
 8004a00:	08004a29 	.word	0x08004a29
	{

	case PWM_CHANNEL_1:
	{
		prtPwmHandler->ptrTIMx->CCR1 = prtPwmHandler->config.duttyCicle;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	885a      	ldrh	r2, [r3, #2]
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	689b      	ldr	r3, [r3, #8]
 8004a0c:	635a      	str	r2, [r3, #52]	; 0x34
		break;
 8004a0e:	e012      	b.n	8004a36 <setDuttyCycle+0x5a>
	}
	case PWM_CHANNEL_2:
	{
		prtPwmHandler->ptrTIMx->CCR2 = prtPwmHandler->config.duttyCicle;
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	885a      	ldrh	r2, [r3, #2]
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	689b      	ldr	r3, [r3, #8]
 8004a18:	639a      	str	r2, [r3, #56]	; 0x38
		break;
 8004a1a:	e00c      	b.n	8004a36 <setDuttyCycle+0x5a>
	}
	case PWM_CHANNEL_3:
	{
		prtPwmHandler->ptrTIMx->CCR3 = prtPwmHandler->config.duttyCicle;
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	885a      	ldrh	r2, [r3, #2]
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	689b      	ldr	r3, [r3, #8]
 8004a24:	63da      	str	r2, [r3, #60]	; 0x3c
		break;
 8004a26:	e006      	b.n	8004a36 <setDuttyCycle+0x5a>
	}
	case PWM_CHANNEL_4:
	{
		prtPwmHandler->ptrTIMx->CCR4 = prtPwmHandler->config.duttyCicle;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	885a      	ldrh	r2, [r3, #2]
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	689b      	ldr	r3, [r3, #8]
 8004a30:	641a      	str	r2, [r3, #64]	; 0x40
		break;
 8004a32:	e000      	b.n	8004a36 <setDuttyCycle+0x5a>
	}
	default:
	{
		break;
 8004a34:	bf00      	nop
	}
	}

}
 8004a36:	bf00      	nop
 8004a38:	370c      	adds	r7, #12
 8004a3a:	46bd      	mov	sp, r7
 8004a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a40:	4770      	bx	lr
 8004a42:	bf00      	nop

08004a44 <updateDuttyCyclePercentageFloat>:
	setDuttyCycle(prtPwmHandler);
}

//Actualizacion del Dutty con porcentaje decimal
void updateDuttyCyclePercentageFloat(PWM_Handler_t *prtPwmHandler, float newDuttyPercentage)
{
 8004a44:	b580      	push	{r7, lr}
 8004a46:	b082      	sub	sp, #8
 8004a48:	af00      	add	r7, sp, #0
 8004a4a:	6078      	str	r0, [r7, #4]
 8004a4c:	ed87 0a00 	vstr	s0, [r7]
	//Establecemos el nuevo valor del duttycicle en la configuracion del PWM
	prtPwmHandler->config.duttyCicle = (uint16_t) ((prtPwmHandler->ptrTIMx->ARR)/100)*(newDuttyPercentage);
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	689b      	ldr	r3, [r3, #8]
 8004a54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a56:	4a0d      	ldr	r2, [pc, #52]	; (8004a8c <updateDuttyCyclePercentageFloat+0x48>)
 8004a58:	fba2 2303 	umull	r2, r3, r2, r3
 8004a5c:	095b      	lsrs	r3, r3, #5
 8004a5e:	b29b      	uxth	r3, r3
 8004a60:	ee07 3a90 	vmov	s15, r3
 8004a64:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004a68:	edd7 7a00 	vldr	s15, [r7]
 8004a6c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a70:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004a74:	ee17 3a90 	vmov	r3, s15
 8004a78:	b29a      	uxth	r2, r3
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	805a      	strh	r2, [r3, #2]
	//Cargamos la nueva configuracion
	setDuttyCycle(prtPwmHandler);
 8004a7e:	6878      	ldr	r0, [r7, #4]
 8004a80:	f7ff ffac 	bl	80049dc <setDuttyCycle>
}
 8004a84:	bf00      	nop
 8004a86:	3708      	adds	r7, #8
 8004a88:	46bd      	mov	sp, r7
 8004a8a:	bd80      	pop	{r7, pc}
 8004a8c:	51eb851f 	.word	0x51eb851f

08004a90 <__NVIC_EnableIRQ>:
{
 8004a90:	b480      	push	{r7}
 8004a92:	b083      	sub	sp, #12
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	4603      	mov	r3, r0
 8004a98:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004a9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	db0b      	blt.n	8004aba <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004aa2:	79fb      	ldrb	r3, [r7, #7]
 8004aa4:	f003 021f 	and.w	r2, r3, #31
 8004aa8:	4907      	ldr	r1, [pc, #28]	; (8004ac8 <__NVIC_EnableIRQ+0x38>)
 8004aaa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004aae:	095b      	lsrs	r3, r3, #5
 8004ab0:	2001      	movs	r0, #1
 8004ab2:	fa00 f202 	lsl.w	r2, r0, r2
 8004ab6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8004aba:	bf00      	nop
 8004abc:	370c      	adds	r7, #12
 8004abe:	46bd      	mov	sp, r7
 8004ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac4:	4770      	bx	lr
 8004ac6:	bf00      	nop
 8004ac8:	e000e100 	.word	0xe000e100

08004acc <USART_Config>:
uint8_t posChar = 0;                                 //Variable para recorrer el String
uint8_t typeWriteTXE = 0;                            //Variable que selecciona el tipo entre string y caracter

//Funcion para cargar la configuracion del periferico USART
void USART_Config(USART_Handler_t *ptrUsartHandler)
{
 8004acc:	b580      	push	{r7, lr}
 8004ace:	b084      	sub	sp, #16
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	6078      	str	r0, [r7, #4]
	//---------------------------------1) Activamos el periferico------------------------------------------
	//Registro: APB1ENR
	//Registro: APB2ENR

	if(ptrUsartHandler->ptrUSARTx == USART1)
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	689b      	ldr	r3, [r3, #8]
 8004ad8:	4a8f      	ldr	r2, [pc, #572]	; (8004d18 <USART_Config+0x24c>)
 8004ada:	4293      	cmp	r3, r2
 8004adc:	d107      	bne.n	8004aee <USART_Config+0x22>
	{
		/*Activamos el periferico escribiendo un 1 deacuerdo a la posicion
		 * del periferico en el registro*/
		RCC->APB2ENR = RCC_APB2ENR_USART1EN;
 8004ade:	4b8f      	ldr	r3, [pc, #572]	; (8004d1c <USART_Config+0x250>)
 8004ae0:	2210      	movs	r2, #16
 8004ae2:	645a      	str	r2, [r3, #68]	; 0x44
		//Guardamos una referencia al periferico que estamos utilizando
		ptrUSART1Used = ptrUsartHandler->ptrUSARTx;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	689b      	ldr	r3, [r3, #8]
 8004ae8:	4a8d      	ldr	r2, [pc, #564]	; (8004d20 <USART_Config+0x254>)
 8004aea:	6013      	str	r3, [r2, #0]
 8004aec:	e019      	b.n	8004b22 <USART_Config+0x56>
	}

	else if(ptrUsartHandler->ptrUSARTx == USART2)
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	689b      	ldr	r3, [r3, #8]
 8004af2:	4a8c      	ldr	r2, [pc, #560]	; (8004d24 <USART_Config+0x258>)
 8004af4:	4293      	cmp	r3, r2
 8004af6:	d108      	bne.n	8004b0a <USART_Config+0x3e>
	{
		/*Activamos el periferico escribiendo un 1 deacuerdo a la posicion
		 * del periferico en el registro*/
		RCC->APB1ENR = RCC_APB1ENR_USART2EN;
 8004af8:	4b88      	ldr	r3, [pc, #544]	; (8004d1c <USART_Config+0x250>)
 8004afa:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004afe:	641a      	str	r2, [r3, #64]	; 0x40
		//Guardamos una referencia al periferico que estamos utilizando
		ptrUSART2Used = ptrUsartHandler->ptrUSARTx;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	689b      	ldr	r3, [r3, #8]
 8004b04:	4a88      	ldr	r2, [pc, #544]	; (8004d28 <USART_Config+0x25c>)
 8004b06:	6013      	str	r3, [r2, #0]
 8004b08:	e00b      	b.n	8004b22 <USART_Config+0x56>
	}

	else if(ptrUsartHandler->ptrUSARTx == USART6)
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	689b      	ldr	r3, [r3, #8]
 8004b0e:	4a87      	ldr	r2, [pc, #540]	; (8004d2c <USART_Config+0x260>)
 8004b10:	4293      	cmp	r3, r2
 8004b12:	d106      	bne.n	8004b22 <USART_Config+0x56>
	{
		/*Activamos el periferico escribiendo un 1 deacuerdo a la posicion
		 * del periferico en el registro*/
		RCC->APB2ENR = RCC_APB2ENR_USART6EN;
 8004b14:	4b81      	ldr	r3, [pc, #516]	; (8004d1c <USART_Config+0x250>)
 8004b16:	2220      	movs	r2, #32
 8004b18:	645a      	str	r2, [r3, #68]	; 0x44
		//Guardamos una referencia al periferico que estamos utilizando
		ptrUSART6Used = ptrUsartHandler->ptrUSARTx;
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	689b      	ldr	r3, [r3, #8]
 8004b1e:	4a84      	ldr	r2, [pc, #528]	; (8004d30 <USART_Config+0x264>)
 8004b20:	6013      	str	r3, [r2, #0]

	//-------------------------------2) Limpieza de registros ------------------------------------------
	//Registro: CR1
	//Registro: CR2

	ptrUsartHandler->ptrUSARTx->CR1 = 0;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	689b      	ldr	r3, [r3, #8]
 8004b26:	2200      	movs	r2, #0
 8004b28:	60da      	str	r2, [r3, #12]
	ptrUsartHandler->ptrUSARTx->CR2 = 0;
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	689b      	ldr	r3, [r3, #8]
 8004b2e:	2200      	movs	r2, #0
 8004b30:	611a      	str	r2, [r3, #16]

	//-------------------------3) Configuracion del parity y tamaño de dato ------------------------------
	//Registro: CR1

	//Verificamos si la paridad esta activada
	if(ptrUsartHandler->USART_Config.USART_parity != USART_PARITY_NONE)
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	789b      	ldrb	r3, [r3, #2]
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d03d      	beq.n	8004bb6 <USART_Config+0xea>
	{
		//Activamos Parity control Enable PCE
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_PCE;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	689b      	ldr	r3, [r3, #8]
 8004b3e:	68da      	ldr	r2, [r3, #12]
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	689b      	ldr	r3, [r3, #8]
 8004b44:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b48:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_PCE;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	689b      	ldr	r3, [r3, #8]
 8004b4e:	68da      	ldr	r2, [r3, #12]
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	689b      	ldr	r3, [r3, #8]
 8004b54:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004b58:	60da      	str	r2, [r3, #12]

		//Definimos un tamaño de datos de 9 bits M = 1
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_M;
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	689b      	ldr	r3, [r3, #8]
 8004b5e:	68da      	ldr	r2, [r3, #12]
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	689b      	ldr	r3, [r3, #8]
 8004b64:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004b68:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_M;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	689b      	ldr	r3, [r3, #8]
 8004b6e:	68da      	ldr	r2, [r3, #12]
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	689b      	ldr	r3, [r3, #8]
 8004b74:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004b78:	60da      	str	r2, [r3, #12]

		//Verificamos si se selecciona ODD o EVEN
		if(ptrUsartHandler->USART_Config.USART_parity == USART_PARITY_ODD)
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	789b      	ldrb	r3, [r3, #2]
 8004b7e:	2b01      	cmp	r3, #1
 8004b80:	d110      	bne.n	8004ba4 <USART_Config+0xd8>
		{
			ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_PS;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	689b      	ldr	r3, [r3, #8]
 8004b86:	68da      	ldr	r2, [r3, #12]
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	689b      	ldr	r3, [r3, #8]
 8004b8c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004b90:	60da      	str	r2, [r3, #12]
			ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_PS;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	689b      	ldr	r3, [r3, #8]
 8004b96:	68da      	ldr	r2, [r3, #12]
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	689b      	ldr	r3, [r3, #8]
 8004b9c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004ba0:	60da      	str	r2, [r3, #12]
 8004ba2:	e018      	b.n	8004bd6 <USART_Config+0x10a>
		}
		else
		{
			ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_PS;
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	689b      	ldr	r3, [r3, #8]
 8004ba8:	68da      	ldr	r2, [r3, #12]
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	689b      	ldr	r3, [r3, #8]
 8004bae:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004bb2:	60da      	str	r2, [r3, #12]
 8004bb4:	e00f      	b.n	8004bd6 <USART_Config+0x10a>

	}
	else
	{
		//Desactivamos la Parity control Enable PCE
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_PCE;
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	689b      	ldr	r3, [r3, #8]
 8004bba:	68da      	ldr	r2, [r3, #12]
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	689b      	ldr	r3, [r3, #8]
 8004bc0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004bc4:	60da      	str	r2, [r3, #12]
		//Definimos un tamaño de datos de 8 bits M = 0
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_M;
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	689b      	ldr	r3, [r3, #8]
 8004bca:	68da      	ldr	r2, [r3, #12]
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	689b      	ldr	r3, [r3, #8]
 8004bd0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004bd4:	60da      	str	r2, [r3, #12]

	//--------------------------------4) Configuracion del Stop bits--------------------------------------
	//Registro: CR2

	//Se verifica que stop bits se selecciono
	switch(ptrUsartHandler->USART_Config.USART_stopbits)
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	78db      	ldrb	r3, [r3, #3]
 8004bda:	2b03      	cmp	r3, #3
 8004bdc:	d84c      	bhi.n	8004c78 <USART_Config+0x1ac>
 8004bde:	a201      	add	r2, pc, #4	; (adr r2, 8004be4 <USART_Config+0x118>)
 8004be0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004be4:	08004bf5 	.word	0x08004bf5
 8004be8:	08004c13 	.word	0x08004c13
 8004bec:	08004c35 	.word	0x08004c35
 8004bf0:	08004c57 	.word	0x08004c57
	{
	//Para el 1 Stop bit se escribe 00
	case USART_STOPBIT_1:
	{
		ptrUsartHandler->ptrUSARTx->CR2 &= ~(0b11<<USART_CR2_STOP_Pos);
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	689b      	ldr	r3, [r3, #8]
 8004bf8:	691a      	ldr	r2, [r3, #16]
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	689b      	ldr	r3, [r3, #8]
 8004bfe:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8004c02:	611a      	str	r2, [r3, #16]
		ptrUsartHandler->ptrUSARTx->CR2 |= (0b00<<USART_CR2_STOP_Pos);
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	689a      	ldr	r2, [r3, #8]
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	689b      	ldr	r3, [r3, #8]
 8004c0c:	6912      	ldr	r2, [r2, #16]
 8004c0e:	611a      	str	r2, [r3, #16]
		break;
 8004c10:	e041      	b.n	8004c96 <USART_Config+0x1ca>
	}
	//Para el 0.5 Stop bit se escribe 01
	case USART_STOPBIT_0_5:
	{
		ptrUsartHandler->ptrUSARTx->CR2 &= ~(0b11<<USART_CR2_STOP_Pos);
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	689b      	ldr	r3, [r3, #8]
 8004c16:	691a      	ldr	r2, [r3, #16]
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	689b      	ldr	r3, [r3, #8]
 8004c1c:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8004c20:	611a      	str	r2, [r3, #16]
		ptrUsartHandler->ptrUSARTx->CR2 |= (0b01<<USART_CR2_STOP_Pos);
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	689b      	ldr	r3, [r3, #8]
 8004c26:	691a      	ldr	r2, [r3, #16]
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	689b      	ldr	r3, [r3, #8]
 8004c2c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004c30:	611a      	str	r2, [r3, #16]
		break;
 8004c32:	e030      	b.n	8004c96 <USART_Config+0x1ca>
	}
	//Para el 2 Stop bit se escribe 10
	case USART_STOPBIT_2:
	{
		ptrUsartHandler->ptrUSARTx->CR2 &= ~(0b11<<USART_CR2_STOP_Pos);
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	689b      	ldr	r3, [r3, #8]
 8004c38:	691a      	ldr	r2, [r3, #16]
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	689b      	ldr	r3, [r3, #8]
 8004c3e:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8004c42:	611a      	str	r2, [r3, #16]
		ptrUsartHandler->ptrUSARTx->CR2 |= (0b10<<USART_CR2_STOP_Pos);
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	689b      	ldr	r3, [r3, #8]
 8004c48:	691a      	ldr	r2, [r3, #16]
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	689b      	ldr	r3, [r3, #8]
 8004c4e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004c52:	611a      	str	r2, [r3, #16]
		break;
 8004c54:	e01f      	b.n	8004c96 <USART_Config+0x1ca>
	}
	//Para el 1.5 Stop bit se escribe 11
	case USART_STOPBIT_1_5:
	{
		ptrUsartHandler->ptrUSARTx->CR2 &= ~(0b11<<USART_CR2_STOP_Pos);
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	689b      	ldr	r3, [r3, #8]
 8004c5a:	691a      	ldr	r2, [r3, #16]
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	689b      	ldr	r3, [r3, #8]
 8004c60:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8004c64:	611a      	str	r2, [r3, #16]
		ptrUsartHandler->ptrUSARTx->CR2 |= (0b11<<USART_CR2_STOP_Pos);
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	689b      	ldr	r3, [r3, #8]
 8004c6a:	691a      	ldr	r2, [r3, #16]
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	689b      	ldr	r3, [r3, #8]
 8004c70:	f442 5240 	orr.w	r2, r2, #12288	; 0x3000
 8004c74:	611a      	str	r2, [r3, #16]
		break;
 8004c76:	e00e      	b.n	8004c96 <USART_Config+0x1ca>
	}
	//En caso por defecto selsccionamos un bit de paraba
	default:
	{
		ptrUsartHandler->ptrUSARTx->CR2 &= ~(0b11<<USART_CR2_STOP_Pos);
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	689b      	ldr	r3, [r3, #8]
 8004c7c:	691a      	ldr	r2, [r3, #16]
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	689b      	ldr	r3, [r3, #8]
 8004c82:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8004c86:	611a      	str	r2, [r3, #16]
		ptrUsartHandler->ptrUSARTx->CR2 |= (0b00<<USART_CR2_STOP_Pos);
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	689a      	ldr	r2, [r3, #8]
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	689b      	ldr	r3, [r3, #8]
 8004c90:	6912      	ldr	r2, [r2, #16]
 8004c92:	611a      	str	r2, [r3, #16]
		break;
 8004c94:	bf00      	nop
	}

	//-------------------5) Configuracion del Baudrate(Velocidad de Trans o Rec)-------------------------
	//Registro: BRR       //Numero de 32 bits

	uint8_t clock = 0;
 8004c96:	2300      	movs	r3, #0
 8004c98:	73fb      	strb	r3, [r7, #15]

	if(ptrUsartHandler->ptrUSARTx == USART2)
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	689b      	ldr	r3, [r3, #8]
 8004c9e:	4a21      	ldr	r2, [pc, #132]	; (8004d24 <USART_Config+0x258>)
 8004ca0:	4293      	cmp	r3, r2
 8004ca2:	d104      	bne.n	8004cae <USART_Config+0x1e2>
	{
		clock = getClockAPB1();          //Guardamos la velocidad de reloj entregada al bus APB1
 8004ca4:	f7ff fb82 	bl	80043ac <getClockAPB1>
 8004ca8:	4603      	mov	r3, r0
 8004caa:	73fb      	strb	r3, [r7, #15]
 8004cac:	e003      	b.n	8004cb6 <USART_Config+0x1ea>
	}
	else
	{
		clock = getConfigPLL();	         //Guardamos la velocidad de reloj del sistema
 8004cae:	f7ff fb61 	bl	8004374 <getConfigPLL>
 8004cb2:	4603      	mov	r3, r0
 8004cb4:	73fb      	strb	r3, [r7, #15]
	}

	//Verificamos el Baud Rate selecionado
	if(ptrUsartHandler->USART_Config.USART_baudrate == USART_BAUDRATE_9600)
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	785b      	ldrb	r3, [r3, #1]
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d10b      	bne.n	8004cd6 <USART_Config+0x20a>
	{
		//Se carga el valor de la velocidad en el registro
		ptrUsartHandler->ptrUSARTx->BRR = getValueBaudRate(clock, 9600);
 8004cbe:	7bfb      	ldrb	r3, [r7, #15]
 8004cc0:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 8004cc4:	4618      	mov	r0, r3
 8004cc6:	f000 f91f 	bl	8004f08 <getValueBaudRate>
 8004cca:	4603      	mov	r3, r0
 8004ccc:	461a      	mov	r2, r3
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	689b      	ldr	r3, [r3, #8]
 8004cd2:	609a      	str	r2, [r3, #8]
 8004cd4:	e02f      	b.n	8004d36 <USART_Config+0x26a>
	}
	else if(ptrUsartHandler->USART_Config.USART_baudrate == USART_BAUDRATE_19200)
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	785b      	ldrb	r3, [r3, #1]
 8004cda:	2b01      	cmp	r3, #1
 8004cdc:	d10b      	bne.n	8004cf6 <USART_Config+0x22a>
	{
		//Se carga el valor de la velocidad en el registro
		ptrUsartHandler->ptrUSARTx->BRR = getValueBaudRate(clock, 19200);
 8004cde:	7bfb      	ldrb	r3, [r7, #15]
 8004ce0:	f44f 4196 	mov.w	r1, #19200	; 0x4b00
 8004ce4:	4618      	mov	r0, r3
 8004ce6:	f000 f90f 	bl	8004f08 <getValueBaudRate>
 8004cea:	4603      	mov	r3, r0
 8004cec:	461a      	mov	r2, r3
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	689b      	ldr	r3, [r3, #8]
 8004cf2:	609a      	str	r2, [r3, #8]
 8004cf4:	e01f      	b.n	8004d36 <USART_Config+0x26a>
	}
	else if(ptrUsartHandler->USART_Config.USART_baudrate == USART_BAUDRATE_115200)
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	785b      	ldrb	r3, [r3, #1]
 8004cfa:	2b02      	cmp	r3, #2
 8004cfc:	d11a      	bne.n	8004d34 <USART_Config+0x268>
		{
		//Se carga el valor de la velocidad en el registro
		ptrUsartHandler->ptrUSARTx->BRR = getValueBaudRate(clock, 115200);
 8004cfe:	7bfb      	ldrb	r3, [r7, #15]
 8004d00:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 8004d04:	4618      	mov	r0, r3
 8004d06:	f000 f8ff 	bl	8004f08 <getValueBaudRate>
 8004d0a:	4603      	mov	r3, r0
 8004d0c:	461a      	mov	r2, r3
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	689b      	ldr	r3, [r3, #8]
 8004d12:	609a      	str	r2, [r3, #8]
 8004d14:	e00f      	b.n	8004d36 <USART_Config+0x26a>
 8004d16:	bf00      	nop
 8004d18:	40011000 	.word	0x40011000
 8004d1c:	40023800 	.word	0x40023800
 8004d20:	200004c4 	.word	0x200004c4
 8004d24:	40004400 	.word	0x40004400
 8004d28:	200004c8 	.word	0x200004c8
 8004d2c:	40011400 	.word	0x40011400
 8004d30:	200004cc 	.word	0x200004cc
	}
	else
	{
		__NOP();
 8004d34:	bf00      	nop
	//-------------------6) Configuramos el MODO-------------------------
	//Registro: CR1

	//MODOS: TX only, RX only, RXTX, disable

	switch(ptrUsartHandler->USART_Config.USART_mode)
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	781b      	ldrb	r3, [r3, #0]
 8004d3a:	2b03      	cmp	r3, #3
 8004d3c:	d866      	bhi.n	8004e0c <USART_Config+0x340>
 8004d3e:	a201      	add	r2, pc, #4	; (adr r2, 8004d44 <USART_Config+0x278>)
 8004d40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d44:	08004d55 	.word	0x08004d55
 8004d48:	08004d77 	.word	0x08004d77
 8004d4c:	08004d99 	.word	0x08004d99
 8004d50:	08004ddb 	.word	0x08004ddb
	{
	//Activamos la parte del sistema encargada de enviar
	case USART_MODE_TX :
	{
		//Activamos el Baud rate clock para la transmision
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_TE;
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	689b      	ldr	r3, [r3, #8]
 8004d58:	68da      	ldr	r2, [r3, #12]
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	689b      	ldr	r3, [r3, #8]
 8004d5e:	f022 0208 	bic.w	r2, r2, #8
 8004d62:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_TE;
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	689b      	ldr	r3, [r3, #8]
 8004d68:	68da      	ldr	r2, [r3, #12]
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	689b      	ldr	r3, [r3, #8]
 8004d6e:	f042 0208 	orr.w	r2, r2, #8
 8004d72:	60da      	str	r2, [r3, #12]

		break;
 8004d74:	e063      	b.n	8004e3e <USART_Config+0x372>
	}
	//Activamos la parte del sistema encargada de recibir
	case USART_MODE_RX:
	{
		//Activamos el Baud rate clock para la recepcion
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_RE;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	689b      	ldr	r3, [r3, #8]
 8004d7a:	68da      	ldr	r2, [r3, #12]
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	689b      	ldr	r3, [r3, #8]
 8004d80:	f022 0204 	bic.w	r2, r2, #4
 8004d84:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_RE;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	689b      	ldr	r3, [r3, #8]
 8004d8a:	68da      	ldr	r2, [r3, #12]
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	689b      	ldr	r3, [r3, #8]
 8004d90:	f042 0204 	orr.w	r2, r2, #4
 8004d94:	60da      	str	r2, [r3, #12]

		break;
 8004d96:	e052      	b.n	8004e3e <USART_Config+0x372>
	}
	//Activamos ambas  parte del sistema encargadas de enviar y recibir
	case USART_MODE_RXTX:
	{
		//Activamos el Baud rate clock para la transmision
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_TE;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	689b      	ldr	r3, [r3, #8]
 8004d9c:	68da      	ldr	r2, [r3, #12]
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	689b      	ldr	r3, [r3, #8]
 8004da2:	f022 0208 	bic.w	r2, r2, #8
 8004da6:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_TE;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	689b      	ldr	r3, [r3, #8]
 8004dac:	68da      	ldr	r2, [r3, #12]
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	689b      	ldr	r3, [r3, #8]
 8004db2:	f042 0208 	orr.w	r2, r2, #8
 8004db6:	60da      	str	r2, [r3, #12]
		//Activamos el Baud rate clock para la recepcion
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_RE;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	689b      	ldr	r3, [r3, #8]
 8004dbc:	68da      	ldr	r2, [r3, #12]
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	689b      	ldr	r3, [r3, #8]
 8004dc2:	f022 0204 	bic.w	r2, r2, #4
 8004dc6:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_RE;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	689b      	ldr	r3, [r3, #8]
 8004dcc:	68da      	ldr	r2, [r3, #12]
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	689b      	ldr	r3, [r3, #8]
 8004dd2:	f042 0204 	orr.w	r2, r2, #4
 8004dd6:	60da      	str	r2, [r3, #12]


		break;
 8004dd8:	e031      	b.n	8004e3e <USART_Config+0x372>
	}
	//Desativamos ambos canales
	case USART_MODE_DISABLE:
	{
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_UE;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	689b      	ldr	r3, [r3, #8]
 8004dde:	68da      	ldr	r2, [r3, #12]
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	689b      	ldr	r3, [r3, #8]
 8004de4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004de8:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_TE;
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	689b      	ldr	r3, [r3, #8]
 8004dee:	68da      	ldr	r2, [r3, #12]
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	689b      	ldr	r3, [r3, #8]
 8004df4:	f022 0208 	bic.w	r2, r2, #8
 8004df8:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_RE;
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	689b      	ldr	r3, [r3, #8]
 8004dfe:	68da      	ldr	r2, [r3, #12]
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	689b      	ldr	r3, [r3, #8]
 8004e04:	f022 0204 	bic.w	r2, r2, #4
 8004e08:	60da      	str	r2, [r3, #12]
		break;
 8004e0a:	e018      	b.n	8004e3e <USART_Config+0x372>
	}
	default:
	{
		//Actuando por defecto, desactivamos ambos canales
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_UE;
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	689b      	ldr	r3, [r3, #8]
 8004e10:	68da      	ldr	r2, [r3, #12]
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	689b      	ldr	r3, [r3, #8]
 8004e16:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004e1a:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_TE;
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	689b      	ldr	r3, [r3, #8]
 8004e20:	68da      	ldr	r2, [r3, #12]
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	689b      	ldr	r3, [r3, #8]
 8004e26:	f022 0208 	bic.w	r2, r2, #8
 8004e2a:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_RE;
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	689b      	ldr	r3, [r3, #8]
 8004e30:	68da      	ldr	r2, [r3, #12]
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	689b      	ldr	r3, [r3, #8]
 8004e36:	f022 0204 	bic.w	r2, r2, #4
 8004e3a:	60da      	str	r2, [r3, #12]
		break;
 8004e3c:	bf00      	nop
  __ASM volatile ("cpsid i" : : : "memory");
 8004e3e:	b672      	cpsid	i
}
 8004e40:	bf00      	nop

	//Desactivamos las interupciones globales
	__disable_irq();

	//Se selecciono la interrupcion para RX
	if(ptrUsartHandler->USART_Config.USART_enableIntRX ==  USART_RX_INTERRUP_ENABLE)
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	791b      	ldrb	r3, [r3, #4]
 8004e46:	2b01      	cmp	r3, #1
 8004e48:	d110      	bne.n	8004e6c <USART_Config+0x3a0>
	{
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_RXNEIE;
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	689b      	ldr	r3, [r3, #8]
 8004e4e:	68da      	ldr	r2, [r3, #12]
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	689b      	ldr	r3, [r3, #8]
 8004e54:	f022 0220 	bic.w	r2, r2, #32
 8004e58:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_RXNEIE;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	689b      	ldr	r3, [r3, #8]
 8004e5e:	68da      	ldr	r2, [r3, #12]
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	689b      	ldr	r3, [r3, #8]
 8004e64:	f042 0220 	orr.w	r2, r2, #32
 8004e68:	60da      	str	r2, [r3, #12]
 8004e6a:	e007      	b.n	8004e7c <USART_Config+0x3b0>
	}
	else
	{
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_RXNEIE;
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	689b      	ldr	r3, [r3, #8]
 8004e70:	68da      	ldr	r2, [r3, #12]
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	689b      	ldr	r3, [r3, #8]
 8004e76:	f022 0220 	bic.w	r2, r2, #32
 8004e7a:	60da      	str	r2, [r3, #12]
	}

	//Verificamos si se selecciono alguna interrupcion
	if(ptrUsartHandler->USART_Config.USART_enableIntRX ==  USART_RX_INTERRUP_ENABLE || ptrUsartHandler->USART_Config.USART_enableIntTX ==  USART_TX_INTERRUP_ENABLE)
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	791b      	ldrb	r3, [r3, #4]
 8004e80:	2b01      	cmp	r3, #1
 8004e82:	d003      	beq.n	8004e8c <USART_Config+0x3c0>
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	795b      	ldrb	r3, [r3, #5]
 8004e88:	2b01      	cmp	r3, #1
 8004e8a:	d11a      	bne.n	8004ec2 <USART_Config+0x3f6>
	{
		//Matriculamos la interrupcion en el NVIC
		if(ptrUsartHandler->ptrUSARTx == USART1)
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	689b      	ldr	r3, [r3, #8]
 8004e90:	4a1a      	ldr	r2, [pc, #104]	; (8004efc <USART_Config+0x430>)
 8004e92:	4293      	cmp	r3, r2
 8004e94:	d103      	bne.n	8004e9e <USART_Config+0x3d2>
		{
			NVIC_EnableIRQ(USART1_IRQn);
 8004e96:	2025      	movs	r0, #37	; 0x25
 8004e98:	f7ff fdfa 	bl	8004a90 <__NVIC_EnableIRQ>
		if(ptrUsartHandler->ptrUSARTx == USART1)
 8004e9c:	e013      	b.n	8004ec6 <USART_Config+0x3fa>
		}
		else if(ptrUsartHandler->ptrUSARTx == USART2)
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	689b      	ldr	r3, [r3, #8]
 8004ea2:	4a17      	ldr	r2, [pc, #92]	; (8004f00 <USART_Config+0x434>)
 8004ea4:	4293      	cmp	r3, r2
 8004ea6:	d103      	bne.n	8004eb0 <USART_Config+0x3e4>
		{
			NVIC_EnableIRQ(USART2_IRQn);
 8004ea8:	2026      	movs	r0, #38	; 0x26
 8004eaa:	f7ff fdf1 	bl	8004a90 <__NVIC_EnableIRQ>
		if(ptrUsartHandler->ptrUSARTx == USART1)
 8004eae:	e00a      	b.n	8004ec6 <USART_Config+0x3fa>
		}
		else if(ptrUsartHandler->ptrUSARTx == USART6)
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	689b      	ldr	r3, [r3, #8]
 8004eb4:	4a13      	ldr	r2, [pc, #76]	; (8004f04 <USART_Config+0x438>)
 8004eb6:	4293      	cmp	r3, r2
 8004eb8:	d105      	bne.n	8004ec6 <USART_Config+0x3fa>
		{
			NVIC_EnableIRQ(USART6_IRQn);
 8004eba:	2047      	movs	r0, #71	; 0x47
 8004ebc:	f7ff fde8 	bl	8004a90 <__NVIC_EnableIRQ>
		if(ptrUsartHandler->ptrUSARTx == USART1)
 8004ec0:	e001      	b.n	8004ec6 <USART_Config+0x3fa>
		}
	}
	else
	{
		__NOP();
 8004ec2:	bf00      	nop
 8004ec4:	e000      	b.n	8004ec8 <USART_Config+0x3fc>
		if(ptrUsartHandler->ptrUSARTx == USART1)
 8004ec6:	bf00      	nop
  __ASM volatile ("cpsie i" : : : "memory");
 8004ec8:	b662      	cpsie	i
}
 8004eca:	bf00      	nop
	__enable_irq();

	//-------------------7) Activacion del modulo Serial------------------------
	//Registro: CR1

	if(ptrUsartHandler->USART_Config.USART_mode != USART_MODE_DISABLE)
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	781b      	ldrb	r3, [r3, #0]
 8004ed0:	2b03      	cmp	r3, #3
 8004ed2:	d00f      	beq.n	8004ef4 <USART_Config+0x428>
	{
		//Activamos el modulo Serial
		ptrUsartHandler->ptrUSARTx->CR1 &= ~USART_CR1_UE;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	689b      	ldr	r3, [r3, #8]
 8004ed8:	68da      	ldr	r2, [r3, #12]
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	689b      	ldr	r3, [r3, #8]
 8004ede:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004ee2:	60da      	str	r2, [r3, #12]
		ptrUsartHandler->ptrUSARTx->CR1 |= USART_CR1_UE;
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	689b      	ldr	r3, [r3, #8]
 8004ee8:	68da      	ldr	r2, [r3, #12]
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	689b      	ldr	r3, [r3, #8]
 8004eee:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004ef2:	60da      	str	r2, [r3, #12]
	}
}
 8004ef4:	bf00      	nop
 8004ef6:	3710      	adds	r7, #16
 8004ef8:	46bd      	mov	sp, r7
 8004efa:	bd80      	pop	{r7, pc}
 8004efc:	40011000 	.word	0x40011000
 8004f00:	40004400 	.word	0x40004400
 8004f04:	40011400 	.word	0x40011400

08004f08 <getValueBaudRate>:
		__enable_irq();
}

//---------------Funcion para calcular el valor correspondiente a ingresar en el BRR----------
uint16_t getValueBaudRate(uint8_t fck, uint32_t baudRate)
{
 8004f08:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004f0c:	b086      	sub	sp, #24
 8004f0e:	af00      	add	r7, sp, #0
 8004f10:	6039      	str	r1, [r7, #0]
 8004f12:	4601      	mov	r1, r0
 8004f14:	71f9      	strb	r1, [r7, #7]
    uint32_t usartDiv = (fck*10000000000)/(16*baudRate);
 8004f16:	79f9      	ldrb	r1, [r7, #7]
 8004f18:	2000      	movs	r0, #0
 8004f1a:	460a      	mov	r2, r1
 8004f1c:	4603      	mov	r3, r0
 8004f1e:	491f      	ldr	r1, [pc, #124]	; (8004f9c <getValueBaudRate+0x94>)
 8004f20:	fb01 f003 	mul.w	r0, r1, r3
 8004f24:	2102      	movs	r1, #2
 8004f26:	fb02 f101 	mul.w	r1, r2, r1
 8004f2a:	4401      	add	r1, r0
 8004f2c:	481b      	ldr	r0, [pc, #108]	; (8004f9c <getValueBaudRate+0x94>)
 8004f2e:	fba2 4500 	umull	r4, r5, r2, r0
 8004f32:	194b      	adds	r3, r1, r5
 8004f34:	461d      	mov	r5, r3
 8004f36:	683b      	ldr	r3, [r7, #0]
 8004f38:	011b      	lsls	r3, r3, #4
 8004f3a:	2200      	movs	r2, #0
 8004f3c:	4698      	mov	r8, r3
 8004f3e:	4691      	mov	r9, r2
 8004f40:	4642      	mov	r2, r8
 8004f42:	464b      	mov	r3, r9
 8004f44:	4620      	mov	r0, r4
 8004f46:	4629      	mov	r1, r5
 8004f48:	f7fb feb6 	bl	8000cb8 <__aeabi_ldivmod>
 8004f4c:	4602      	mov	r2, r0
 8004f4e:	460b      	mov	r3, r1
 8004f50:	4613      	mov	r3, r2
 8004f52:	617b      	str	r3, [r7, #20]
    uint32_t mantiza = usartDiv/10000;
 8004f54:	697b      	ldr	r3, [r7, #20]
 8004f56:	4a12      	ldr	r2, [pc, #72]	; (8004fa0 <getValueBaudRate+0x98>)
 8004f58:	fba2 2303 	umull	r2, r3, r2, r3
 8004f5c:	0b5b      	lsrs	r3, r3, #13
 8004f5e:	613b      	str	r3, [r7, #16]
    uint32_t decimal = usartDiv-mantiza*10000;
 8004f60:	693b      	ldr	r3, [r7, #16]
 8004f62:	f242 7210 	movw	r2, #10000	; 0x2710
 8004f66:	fb02 f303 	mul.w	r3, r2, r3
 8004f6a:	697a      	ldr	r2, [r7, #20]
 8004f6c:	1ad3      	subs	r3, r2, r3
 8004f6e:	60fb      	str	r3, [r7, #12]
    uint8_t div_Fraction = (decimal-1000)/625;  //1000
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8004f76:	4a0a      	ldr	r2, [pc, #40]	; (8004fa0 <getValueBaudRate+0x98>)
 8004f78:	fba2 2303 	umull	r2, r3, r2, r3
 8004f7c:	0a5b      	lsrs	r3, r3, #9
 8004f7e:	72fb      	strb	r3, [r7, #11]
    uint16_t value  = mantiza<<USART_BRR_DIV_Mantissa_Pos | div_Fraction;
 8004f80:	693b      	ldr	r3, [r7, #16]
 8004f82:	b29b      	uxth	r3, r3
 8004f84:	011b      	lsls	r3, r3, #4
 8004f86:	b29a      	uxth	r2, r3
 8004f88:	7afb      	ldrb	r3, [r7, #11]
 8004f8a:	b29b      	uxth	r3, r3
 8004f8c:	4313      	orrs	r3, r2
 8004f8e:	813b      	strh	r3, [r7, #8]

    return value;
 8004f90:	893b      	ldrh	r3, [r7, #8]
}
 8004f92:	4618      	mov	r0, r3
 8004f94:	3718      	adds	r7, #24
 8004f96:	46bd      	mov	sp, r7
 8004f98:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8004f9c:	540be400 	.word	0x540be400
 8004fa0:	d1b71759 	.word	0xd1b71759

08004fa4 <writeMsgForTXE>:
	}
}

//Funcion para escribir un string
void writeMsgForTXE(USART_Handler_t *ptrUsartHandlerString, char *MsgtoSend)
{
 8004fa4:	b580      	push	{r7, lr}
 8004fa6:	b082      	sub	sp, #8
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	6078      	str	r0, [r7, #4]
 8004fac:	6039      	str	r1, [r7, #0]
	if (posChar == 0 && inLineTxe == 0)
 8004fae:	4b16      	ldr	r3, [pc, #88]	; (8005008 <writeMsgForTXE+0x64>)
 8004fb0:	781b      	ldrb	r3, [r3, #0]
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d111      	bne.n	8004fda <writeMsgForTXE+0x36>
 8004fb6:	4b15      	ldr	r3, [pc, #84]	; (800500c <writeMsgForTXE+0x68>)
 8004fb8:	781b      	ldrb	r3, [r3, #0]
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d10d      	bne.n	8004fda <writeMsgForTXE+0x36>
	{
		//Guardamos el string que se desea enviar en un arreglo
		sprintf(bufferMsgForTXE, MsgtoSend);
 8004fbe:	6839      	ldr	r1, [r7, #0]
 8004fc0:	4813      	ldr	r0, [pc, #76]	; (8005010 <writeMsgForTXE+0x6c>)
 8004fc2:	f001 f8a9 	bl	8006118 <siprintf>
		//cambiamos el tipo
		typeWriteTXE = 1;
 8004fc6:	4b13      	ldr	r3, [pc, #76]	; (8005014 <writeMsgForTXE+0x70>)
 8004fc8:	2201      	movs	r2, #1
 8004fca:	701a      	strb	r2, [r3, #0]
		//Activo la interrupcion
		interruptionTX(ptrUsartHandlerString->ptrUSARTx, USART_TX_INTERRUP_ENABLE);
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	689b      	ldr	r3, [r3, #8]
 8004fd0:	2101      	movs	r1, #1
 8004fd2:	4618      	mov	r0, r3
 8004fd4:	f000 f830 	bl	8005038 <interruptionTX>
 8004fd8:	e012      	b.n	8005000 <writeMsgForTXE+0x5c>
	}
	else
	{
		sprintf(bufferMsgForTXE_inLine[inLine], MsgtoSend);
 8004fda:	4b0f      	ldr	r3, [pc, #60]	; (8005018 <writeMsgForTXE+0x74>)
 8004fdc:	781b      	ldrb	r3, [r3, #0]
 8004fde:	461a      	mov	r2, r3
 8004fe0:	2364      	movs	r3, #100	; 0x64
 8004fe2:	fb02 f303 	mul.w	r3, r2, r3
 8004fe6:	4a0d      	ldr	r2, [pc, #52]	; (800501c <writeMsgForTXE+0x78>)
 8004fe8:	4413      	add	r3, r2
 8004fea:	6839      	ldr	r1, [r7, #0]
 8004fec:	4618      	mov	r0, r3
 8004fee:	f001 f893 	bl	8006118 <siprintf>
		inLine++;
 8004ff2:	4b09      	ldr	r3, [pc, #36]	; (8005018 <writeMsgForTXE+0x74>)
 8004ff4:	781b      	ldrb	r3, [r3, #0]
 8004ff6:	3301      	adds	r3, #1
 8004ff8:	b2da      	uxtb	r2, r3
 8004ffa:	4b07      	ldr	r3, [pc, #28]	; (8005018 <writeMsgForTXE+0x74>)
 8004ffc:	701a      	strb	r2, [r3, #0]
	}
}
 8004ffe:	bf00      	nop
 8005000:	bf00      	nop
 8005002:	3708      	adds	r7, #8
 8005004:	46bd      	mov	sp, r7
 8005006:	bd80      	pop	{r7, pc}
 8005008:	20000d0a 	.word	0x20000d0a
 800500c:	20000d09 	.word	0x20000d09
 8005010:	200004d4 	.word	0x200004d4
 8005014:	20000d0b 	.word	0x20000d0b
 8005018:	20000d08 	.word	0x20000d08
 800501c:	20000538 	.word	0x20000538

08005020 <getRxData>:

//Funcion para leer un char
uint8_t getRxData(void)
{
 8005020:	b480      	push	{r7}
 8005022:	af00      	add	r7, sp, #0
	return auxRxData;
 8005024:	4b03      	ldr	r3, [pc, #12]	; (8005034 <getRxData+0x14>)
 8005026:	781b      	ldrb	r3, [r3, #0]
}
 8005028:	4618      	mov	r0, r3
 800502a:	46bd      	mov	sp, r7
 800502c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005030:	4770      	bx	lr
 8005032:	bf00      	nop
 8005034:	200004d0 	.word	0x200004d0

08005038 <interruptionTX>:

//Funcion para desactivar o activar las interrupciones por  TX
void interruptionTX(USART_TypeDef *ptrUSARTxUsed, uint8_t interrupEnable)
{
 8005038:	b480      	push	{r7}
 800503a:	b083      	sub	sp, #12
 800503c:	af00      	add	r7, sp, #0
 800503e:	6078      	str	r0, [r7, #4]
 8005040:	460b      	mov	r3, r1
 8005042:	70fb      	strb	r3, [r7, #3]
	//Se selecciono la interrupcion para TX
	if(interrupEnable ==  USART_TX_INTERRUP_ENABLE)
 8005044:	78fb      	ldrb	r3, [r7, #3]
 8005046:	2b01      	cmp	r3, #1
 8005048:	d10c      	bne.n	8005064 <interruptionTX+0x2c>
	{
		ptrUSARTxUsed->CR1 &= ~USART_CR1_TXEIE;
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	68db      	ldr	r3, [r3, #12]
 800504e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	60da      	str	r2, [r3, #12]
		ptrUSARTxUsed->CR1 |= USART_CR1_TXEIE;
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	68db      	ldr	r3, [r3, #12]
 800505a:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	60da      	str	r2, [r3, #12]
	}
	else
	{
		ptrUSARTxUsed->CR1  &= ~USART_CR1_TXEIE;
	}
}
 8005062:	e005      	b.n	8005070 <interruptionTX+0x38>
		ptrUSARTxUsed->CR1  &= ~USART_CR1_TXEIE;
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	68db      	ldr	r3, [r3, #12]
 8005068:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	60da      	str	r2, [r3, #12]
}
 8005070:	bf00      	nop
 8005072:	370c      	adds	r7, #12
 8005074:	46bd      	mov	sp, r7
 8005076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800507a:	4770      	bx	lr

0800507c <BasicUSART1_Callback>:


//Definimos las funciones para cuando se genera una interrupcion del USART1-2 y 6
__attribute__((weak)) void BasicUSART1_Callback()
{
 800507c:	b480      	push	{r7}
 800507e:	af00      	add	r7, sp, #0
	__NOP();
 8005080:	bf00      	nop
}
 8005082:	bf00      	nop
 8005084:	46bd      	mov	sp, r7
 8005086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800508a:	4770      	bx	lr

0800508c <BasicUSART6_Callback>:
	__NOP();
}


__attribute__((weak)) void BasicUSART6_Callback()
{
 800508c:	b480      	push	{r7}
 800508e:	af00      	add	r7, sp, #0
	__NOP();
 8005090:	bf00      	nop
}
 8005092:	bf00      	nop
 8005094:	46bd      	mov	sp, r7
 8005096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800509a:	4770      	bx	lr

0800509c <USART1_IRQHandler>:
 * estas funciones en el vector de interrupciones respectivamente.
 * Con ello Guardamos el elemento char recibido
 */

void USART1_IRQHandler(void)
{
 800509c:	b580      	push	{r7, lr}
 800509e:	af00      	add	r7, sp, #0
	//Confirmamos que el registro RXNE esta activo
	if(ptrUSART1Used->SR & USART_SR_RXNE)
 80050a0:	4b37      	ldr	r3, [pc, #220]	; (8005180 <USART1_IRQHandler+0xe4>)
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	f003 0320 	and.w	r3, r3, #32
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d008      	beq.n	80050c0 <USART1_IRQHandler+0x24>
	{
		//Leemos el registro DR del respectivo USART
		auxRxData = (uint8_t) ptrUSART1Used->DR;
 80050ae:	4b34      	ldr	r3, [pc, #208]	; (8005180 <USART1_IRQHandler+0xe4>)
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	685b      	ldr	r3, [r3, #4]
 80050b4:	b2da      	uxtb	r2, r3
 80050b6:	4b33      	ldr	r3, [pc, #204]	; (8005184 <USART1_IRQHandler+0xe8>)
 80050b8:	701a      	strb	r2, [r3, #0]
		//Llamanos a la funcion de interrupcion
		BasicUSART1_Callback();
 80050ba:	f7ff ffdf 	bl	800507c <BasicUSART1_Callback>
	}
	else
	{
		__NOP();
	}
}
 80050be:	e05d      	b.n	800517c <USART1_IRQHandler+0xe0>
	else if (ptrUSART1Used->SR & USART_SR_TXE)
 80050c0:	4b2f      	ldr	r3, [pc, #188]	; (8005180 <USART1_IRQHandler+0xe4>)
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d055      	beq.n	800517a <USART1_IRQHandler+0xde>
		if(typeWriteTXE == 0)
 80050ce:	4b2e      	ldr	r3, [pc, #184]	; (8005188 <USART1_IRQHandler+0xec>)
 80050d0:	781b      	ldrb	r3, [r3, #0]
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d10b      	bne.n	80050ee <USART1_IRQHandler+0x52>
			ptrUSART1Used->DR = datatoSendForTXE;
 80050d6:	4b2d      	ldr	r3, [pc, #180]	; (800518c <USART1_IRQHandler+0xf0>)
 80050d8:	781a      	ldrb	r2, [r3, #0]
 80050da:	4b29      	ldr	r3, [pc, #164]	; (8005180 <USART1_IRQHandler+0xe4>)
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	605a      	str	r2, [r3, #4]
			interruptionTX(ptrUSART1Used, USART_TX_INTERRUP_DISABLE);
 80050e0:	4b27      	ldr	r3, [pc, #156]	; (8005180 <USART1_IRQHandler+0xe4>)
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	2100      	movs	r1, #0
 80050e6:	4618      	mov	r0, r3
 80050e8:	f7ff ffa6 	bl	8005038 <interruptionTX>
}
 80050ec:	e046      	b.n	800517c <USART1_IRQHandler+0xe0>
		else if(typeWriteTXE == 1)
 80050ee:	4b26      	ldr	r3, [pc, #152]	; (8005188 <USART1_IRQHandler+0xec>)
 80050f0:	781b      	ldrb	r3, [r3, #0]
 80050f2:	2b01      	cmp	r3, #1
 80050f4:	d142      	bne.n	800517c <USART1_IRQHandler+0xe0>
			if (bufferMsgForTXE[posChar] != '\0')
 80050f6:	4b26      	ldr	r3, [pc, #152]	; (8005190 <USART1_IRQHandler+0xf4>)
 80050f8:	781b      	ldrb	r3, [r3, #0]
 80050fa:	461a      	mov	r2, r3
 80050fc:	4b25      	ldr	r3, [pc, #148]	; (8005194 <USART1_IRQHandler+0xf8>)
 80050fe:	5c9b      	ldrb	r3, [r3, r2]
 8005100:	2b00      	cmp	r3, #0
 8005102:	d00e      	beq.n	8005122 <USART1_IRQHandler+0x86>
				ptrUSART1Used->DR = bufferMsgForTXE[posChar];
 8005104:	4b22      	ldr	r3, [pc, #136]	; (8005190 <USART1_IRQHandler+0xf4>)
 8005106:	781b      	ldrb	r3, [r3, #0]
 8005108:	461a      	mov	r2, r3
 800510a:	4b22      	ldr	r3, [pc, #136]	; (8005194 <USART1_IRQHandler+0xf8>)
 800510c:	5c9a      	ldrb	r2, [r3, r2]
 800510e:	4b1c      	ldr	r3, [pc, #112]	; (8005180 <USART1_IRQHandler+0xe4>)
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	605a      	str	r2, [r3, #4]
				posChar++;
 8005114:	4b1e      	ldr	r3, [pc, #120]	; (8005190 <USART1_IRQHandler+0xf4>)
 8005116:	781b      	ldrb	r3, [r3, #0]
 8005118:	3301      	adds	r3, #1
 800511a:	b2da      	uxtb	r2, r3
 800511c:	4b1c      	ldr	r3, [pc, #112]	; (8005190 <USART1_IRQHandler+0xf4>)
 800511e:	701a      	strb	r2, [r3, #0]
}
 8005120:	e02c      	b.n	800517c <USART1_IRQHandler+0xe0>
				if (inLineTxe<inLine)
 8005122:	4b1d      	ldr	r3, [pc, #116]	; (8005198 <USART1_IRQHandler+0xfc>)
 8005124:	781a      	ldrb	r2, [r3, #0]
 8005126:	4b1d      	ldr	r3, [pc, #116]	; (800519c <USART1_IRQHandler+0x100>)
 8005128:	781b      	ldrb	r3, [r3, #0]
 800512a:	429a      	cmp	r2, r3
 800512c:	d215      	bcs.n	800515a <USART1_IRQHandler+0xbe>
					sprintf(bufferMsgForTXE, bufferMsgForTXE_inLine[inLineTxe]);
 800512e:	4b1a      	ldr	r3, [pc, #104]	; (8005198 <USART1_IRQHandler+0xfc>)
 8005130:	781b      	ldrb	r3, [r3, #0]
 8005132:	461a      	mov	r2, r3
 8005134:	2364      	movs	r3, #100	; 0x64
 8005136:	fb02 f303 	mul.w	r3, r2, r3
 800513a:	4a19      	ldr	r2, [pc, #100]	; (80051a0 <USART1_IRQHandler+0x104>)
 800513c:	4413      	add	r3, r2
 800513e:	4619      	mov	r1, r3
 8005140:	4814      	ldr	r0, [pc, #80]	; (8005194 <USART1_IRQHandler+0xf8>)
 8005142:	f000 ffe9 	bl	8006118 <siprintf>
					posChar = 0;
 8005146:	4b12      	ldr	r3, [pc, #72]	; (8005190 <USART1_IRQHandler+0xf4>)
 8005148:	2200      	movs	r2, #0
 800514a:	701a      	strb	r2, [r3, #0]
					inLineTxe++;
 800514c:	4b12      	ldr	r3, [pc, #72]	; (8005198 <USART1_IRQHandler+0xfc>)
 800514e:	781b      	ldrb	r3, [r3, #0]
 8005150:	3301      	adds	r3, #1
 8005152:	b2da      	uxtb	r2, r3
 8005154:	4b10      	ldr	r3, [pc, #64]	; (8005198 <USART1_IRQHandler+0xfc>)
 8005156:	701a      	strb	r2, [r3, #0]
}
 8005158:	e010      	b.n	800517c <USART1_IRQHandler+0xe0>
					interruptionTX(ptrUSART1Used, USART_TX_INTERRUP_DISABLE);
 800515a:	4b09      	ldr	r3, [pc, #36]	; (8005180 <USART1_IRQHandler+0xe4>)
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	2100      	movs	r1, #0
 8005160:	4618      	mov	r0, r3
 8005162:	f7ff ff69 	bl	8005038 <interruptionTX>
					posChar = 0;
 8005166:	4b0a      	ldr	r3, [pc, #40]	; (8005190 <USART1_IRQHandler+0xf4>)
 8005168:	2200      	movs	r2, #0
 800516a:	701a      	strb	r2, [r3, #0]
					inLineTxe = 0;
 800516c:	4b0a      	ldr	r3, [pc, #40]	; (8005198 <USART1_IRQHandler+0xfc>)
 800516e:	2200      	movs	r2, #0
 8005170:	701a      	strb	r2, [r3, #0]
					inLine = 0;
 8005172:	4b0a      	ldr	r3, [pc, #40]	; (800519c <USART1_IRQHandler+0x100>)
 8005174:	2200      	movs	r2, #0
 8005176:	701a      	strb	r2, [r3, #0]
}
 8005178:	e000      	b.n	800517c <USART1_IRQHandler+0xe0>
		__NOP();
 800517a:	bf00      	nop
}
 800517c:	bf00      	nop
 800517e:	bd80      	pop	{r7, pc}
 8005180:	200004c4 	.word	0x200004c4
 8005184:	200004d0 	.word	0x200004d0
 8005188:	20000d0b 	.word	0x20000d0b
 800518c:	200004d1 	.word	0x200004d1
 8005190:	20000d0a 	.word	0x20000d0a
 8005194:	200004d4 	.word	0x200004d4
 8005198:	20000d09 	.word	0x20000d09
 800519c:	20000d08 	.word	0x20000d08
 80051a0:	20000538 	.word	0x20000538

080051a4 <USART2_IRQHandler>:

void USART2_IRQHandler(void)
{
 80051a4:	b580      	push	{r7, lr}
 80051a6:	af00      	add	r7, sp, #0
	//Confirmamos que el registro RXNE esta activo
	if(ptrUSART2Used->SR & USART_SR_RXNE)
 80051a8:	4b37      	ldr	r3, [pc, #220]	; (8005288 <USART2_IRQHandler+0xe4>)
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	f003 0320 	and.w	r3, r3, #32
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d008      	beq.n	80051c8 <USART2_IRQHandler+0x24>
	{
		//Leemos el registro DR del respectivo USART
		auxRxData = (uint8_t) ptrUSART2Used->DR;
 80051b6:	4b34      	ldr	r3, [pc, #208]	; (8005288 <USART2_IRQHandler+0xe4>)
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	685b      	ldr	r3, [r3, #4]
 80051bc:	b2da      	uxtb	r2, r3
 80051be:	4b33      	ldr	r3, [pc, #204]	; (800528c <USART2_IRQHandler+0xe8>)
 80051c0:	701a      	strb	r2, [r3, #0]
		//Llamanos a la funcion de interrupcion
		BasicUSART2_Callback();
 80051c2:	f7fc fd43 	bl	8001c4c <BasicUSART2_Callback>
	}
	else
	{
		__NOP();
	}
}
 80051c6:	e05d      	b.n	8005284 <USART2_IRQHandler+0xe0>
	else if (ptrUSART2Used->SR & USART_SR_TXE)
 80051c8:	4b2f      	ldr	r3, [pc, #188]	; (8005288 <USART2_IRQHandler+0xe4>)
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d055      	beq.n	8005282 <USART2_IRQHandler+0xde>
		if(typeWriteTXE == 0)
 80051d6:	4b2e      	ldr	r3, [pc, #184]	; (8005290 <USART2_IRQHandler+0xec>)
 80051d8:	781b      	ldrb	r3, [r3, #0]
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d10b      	bne.n	80051f6 <USART2_IRQHandler+0x52>
			ptrUSART2Used->DR = datatoSendForTXE;
 80051de:	4b2d      	ldr	r3, [pc, #180]	; (8005294 <USART2_IRQHandler+0xf0>)
 80051e0:	781a      	ldrb	r2, [r3, #0]
 80051e2:	4b29      	ldr	r3, [pc, #164]	; (8005288 <USART2_IRQHandler+0xe4>)
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	605a      	str	r2, [r3, #4]
			interruptionTX(ptrUSART2Used, USART_TX_INTERRUP_DISABLE);
 80051e8:	4b27      	ldr	r3, [pc, #156]	; (8005288 <USART2_IRQHandler+0xe4>)
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	2100      	movs	r1, #0
 80051ee:	4618      	mov	r0, r3
 80051f0:	f7ff ff22 	bl	8005038 <interruptionTX>
}
 80051f4:	e046      	b.n	8005284 <USART2_IRQHandler+0xe0>
		else if(typeWriteTXE == 1)
 80051f6:	4b26      	ldr	r3, [pc, #152]	; (8005290 <USART2_IRQHandler+0xec>)
 80051f8:	781b      	ldrb	r3, [r3, #0]
 80051fa:	2b01      	cmp	r3, #1
 80051fc:	d142      	bne.n	8005284 <USART2_IRQHandler+0xe0>
			if (bufferMsgForTXE[posChar] != '\0')
 80051fe:	4b26      	ldr	r3, [pc, #152]	; (8005298 <USART2_IRQHandler+0xf4>)
 8005200:	781b      	ldrb	r3, [r3, #0]
 8005202:	461a      	mov	r2, r3
 8005204:	4b25      	ldr	r3, [pc, #148]	; (800529c <USART2_IRQHandler+0xf8>)
 8005206:	5c9b      	ldrb	r3, [r3, r2]
 8005208:	2b00      	cmp	r3, #0
 800520a:	d00e      	beq.n	800522a <USART2_IRQHandler+0x86>
				ptrUSART2Used->DR = bufferMsgForTXE[posChar];
 800520c:	4b22      	ldr	r3, [pc, #136]	; (8005298 <USART2_IRQHandler+0xf4>)
 800520e:	781b      	ldrb	r3, [r3, #0]
 8005210:	461a      	mov	r2, r3
 8005212:	4b22      	ldr	r3, [pc, #136]	; (800529c <USART2_IRQHandler+0xf8>)
 8005214:	5c9a      	ldrb	r2, [r3, r2]
 8005216:	4b1c      	ldr	r3, [pc, #112]	; (8005288 <USART2_IRQHandler+0xe4>)
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	605a      	str	r2, [r3, #4]
				posChar++;
 800521c:	4b1e      	ldr	r3, [pc, #120]	; (8005298 <USART2_IRQHandler+0xf4>)
 800521e:	781b      	ldrb	r3, [r3, #0]
 8005220:	3301      	adds	r3, #1
 8005222:	b2da      	uxtb	r2, r3
 8005224:	4b1c      	ldr	r3, [pc, #112]	; (8005298 <USART2_IRQHandler+0xf4>)
 8005226:	701a      	strb	r2, [r3, #0]
}
 8005228:	e02c      	b.n	8005284 <USART2_IRQHandler+0xe0>
				if (inLineTxe<inLine)
 800522a:	4b1d      	ldr	r3, [pc, #116]	; (80052a0 <USART2_IRQHandler+0xfc>)
 800522c:	781a      	ldrb	r2, [r3, #0]
 800522e:	4b1d      	ldr	r3, [pc, #116]	; (80052a4 <USART2_IRQHandler+0x100>)
 8005230:	781b      	ldrb	r3, [r3, #0]
 8005232:	429a      	cmp	r2, r3
 8005234:	d215      	bcs.n	8005262 <USART2_IRQHandler+0xbe>
					sprintf(bufferMsgForTXE, bufferMsgForTXE_inLine[inLineTxe]);
 8005236:	4b1a      	ldr	r3, [pc, #104]	; (80052a0 <USART2_IRQHandler+0xfc>)
 8005238:	781b      	ldrb	r3, [r3, #0]
 800523a:	461a      	mov	r2, r3
 800523c:	2364      	movs	r3, #100	; 0x64
 800523e:	fb02 f303 	mul.w	r3, r2, r3
 8005242:	4a19      	ldr	r2, [pc, #100]	; (80052a8 <USART2_IRQHandler+0x104>)
 8005244:	4413      	add	r3, r2
 8005246:	4619      	mov	r1, r3
 8005248:	4814      	ldr	r0, [pc, #80]	; (800529c <USART2_IRQHandler+0xf8>)
 800524a:	f000 ff65 	bl	8006118 <siprintf>
					posChar = 0;
 800524e:	4b12      	ldr	r3, [pc, #72]	; (8005298 <USART2_IRQHandler+0xf4>)
 8005250:	2200      	movs	r2, #0
 8005252:	701a      	strb	r2, [r3, #0]
					inLineTxe++;
 8005254:	4b12      	ldr	r3, [pc, #72]	; (80052a0 <USART2_IRQHandler+0xfc>)
 8005256:	781b      	ldrb	r3, [r3, #0]
 8005258:	3301      	adds	r3, #1
 800525a:	b2da      	uxtb	r2, r3
 800525c:	4b10      	ldr	r3, [pc, #64]	; (80052a0 <USART2_IRQHandler+0xfc>)
 800525e:	701a      	strb	r2, [r3, #0]
}
 8005260:	e010      	b.n	8005284 <USART2_IRQHandler+0xe0>
					interruptionTX(ptrUSART2Used, USART_TX_INTERRUP_DISABLE);
 8005262:	4b09      	ldr	r3, [pc, #36]	; (8005288 <USART2_IRQHandler+0xe4>)
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	2100      	movs	r1, #0
 8005268:	4618      	mov	r0, r3
 800526a:	f7ff fee5 	bl	8005038 <interruptionTX>
					posChar = 0;
 800526e:	4b0a      	ldr	r3, [pc, #40]	; (8005298 <USART2_IRQHandler+0xf4>)
 8005270:	2200      	movs	r2, #0
 8005272:	701a      	strb	r2, [r3, #0]
					inLineTxe = 0;
 8005274:	4b0a      	ldr	r3, [pc, #40]	; (80052a0 <USART2_IRQHandler+0xfc>)
 8005276:	2200      	movs	r2, #0
 8005278:	701a      	strb	r2, [r3, #0]
					inLine = 0;
 800527a:	4b0a      	ldr	r3, [pc, #40]	; (80052a4 <USART2_IRQHandler+0x100>)
 800527c:	2200      	movs	r2, #0
 800527e:	701a      	strb	r2, [r3, #0]
}
 8005280:	e000      	b.n	8005284 <USART2_IRQHandler+0xe0>
		__NOP();
 8005282:	bf00      	nop
}
 8005284:	bf00      	nop
 8005286:	bd80      	pop	{r7, pc}
 8005288:	200004c8 	.word	0x200004c8
 800528c:	200004d0 	.word	0x200004d0
 8005290:	20000d0b 	.word	0x20000d0b
 8005294:	200004d1 	.word	0x200004d1
 8005298:	20000d0a 	.word	0x20000d0a
 800529c:	200004d4 	.word	0x200004d4
 80052a0:	20000d09 	.word	0x20000d09
 80052a4:	20000d08 	.word	0x20000d08
 80052a8:	20000538 	.word	0x20000538

080052ac <USART6_IRQHandler>:

void USART6_IRQHandler(void)
{
 80052ac:	b580      	push	{r7, lr}
 80052ae:	af00      	add	r7, sp, #0
	//Confirmamos que el registro RXNE esta activo
	if(ptrUSART6Used->SR & USART_SR_RXNE)
 80052b0:	4b37      	ldr	r3, [pc, #220]	; (8005390 <USART6_IRQHandler+0xe4>)
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	f003 0320 	and.w	r3, r3, #32
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d008      	beq.n	80052d0 <USART6_IRQHandler+0x24>
	{
		//Leemos el registro DR del respectivo USART
		auxRxData = (uint8_t) ptrUSART6Used->DR;
 80052be:	4b34      	ldr	r3, [pc, #208]	; (8005390 <USART6_IRQHandler+0xe4>)
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	685b      	ldr	r3, [r3, #4]
 80052c4:	b2da      	uxtb	r2, r3
 80052c6:	4b33      	ldr	r3, [pc, #204]	; (8005394 <USART6_IRQHandler+0xe8>)
 80052c8:	701a      	strb	r2, [r3, #0]
		//Llamanos a la funcion de interrupcion
		BasicUSART6_Callback();
 80052ca:	f7ff fedf 	bl	800508c <BasicUSART6_Callback>
	}
	else
	{
		__NOP();
	}
}
 80052ce:	e05d      	b.n	800538c <USART6_IRQHandler+0xe0>
	else if (ptrUSART6Used->SR & USART_SR_TXE)
 80052d0:	4b2f      	ldr	r3, [pc, #188]	; (8005390 <USART6_IRQHandler+0xe4>)
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d055      	beq.n	800538a <USART6_IRQHandler+0xde>
		if(typeWriteTXE == 0)
 80052de:	4b2e      	ldr	r3, [pc, #184]	; (8005398 <USART6_IRQHandler+0xec>)
 80052e0:	781b      	ldrb	r3, [r3, #0]
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d10b      	bne.n	80052fe <USART6_IRQHandler+0x52>
			ptrUSART6Used->DR = datatoSendForTXE;
 80052e6:	4b2d      	ldr	r3, [pc, #180]	; (800539c <USART6_IRQHandler+0xf0>)
 80052e8:	781a      	ldrb	r2, [r3, #0]
 80052ea:	4b29      	ldr	r3, [pc, #164]	; (8005390 <USART6_IRQHandler+0xe4>)
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	605a      	str	r2, [r3, #4]
			interruptionTX(ptrUSART6Used, USART_TX_INTERRUP_DISABLE);
 80052f0:	4b27      	ldr	r3, [pc, #156]	; (8005390 <USART6_IRQHandler+0xe4>)
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	2100      	movs	r1, #0
 80052f6:	4618      	mov	r0, r3
 80052f8:	f7ff fe9e 	bl	8005038 <interruptionTX>
}
 80052fc:	e046      	b.n	800538c <USART6_IRQHandler+0xe0>
		else if(typeWriteTXE == 1)
 80052fe:	4b26      	ldr	r3, [pc, #152]	; (8005398 <USART6_IRQHandler+0xec>)
 8005300:	781b      	ldrb	r3, [r3, #0]
 8005302:	2b01      	cmp	r3, #1
 8005304:	d142      	bne.n	800538c <USART6_IRQHandler+0xe0>
			if (bufferMsgForTXE[posChar] != '\0')
 8005306:	4b26      	ldr	r3, [pc, #152]	; (80053a0 <USART6_IRQHandler+0xf4>)
 8005308:	781b      	ldrb	r3, [r3, #0]
 800530a:	461a      	mov	r2, r3
 800530c:	4b25      	ldr	r3, [pc, #148]	; (80053a4 <USART6_IRQHandler+0xf8>)
 800530e:	5c9b      	ldrb	r3, [r3, r2]
 8005310:	2b00      	cmp	r3, #0
 8005312:	d00e      	beq.n	8005332 <USART6_IRQHandler+0x86>
				ptrUSART6Used->DR = bufferMsgForTXE[posChar];
 8005314:	4b22      	ldr	r3, [pc, #136]	; (80053a0 <USART6_IRQHandler+0xf4>)
 8005316:	781b      	ldrb	r3, [r3, #0]
 8005318:	461a      	mov	r2, r3
 800531a:	4b22      	ldr	r3, [pc, #136]	; (80053a4 <USART6_IRQHandler+0xf8>)
 800531c:	5c9a      	ldrb	r2, [r3, r2]
 800531e:	4b1c      	ldr	r3, [pc, #112]	; (8005390 <USART6_IRQHandler+0xe4>)
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	605a      	str	r2, [r3, #4]
				posChar++;
 8005324:	4b1e      	ldr	r3, [pc, #120]	; (80053a0 <USART6_IRQHandler+0xf4>)
 8005326:	781b      	ldrb	r3, [r3, #0]
 8005328:	3301      	adds	r3, #1
 800532a:	b2da      	uxtb	r2, r3
 800532c:	4b1c      	ldr	r3, [pc, #112]	; (80053a0 <USART6_IRQHandler+0xf4>)
 800532e:	701a      	strb	r2, [r3, #0]
}
 8005330:	e02c      	b.n	800538c <USART6_IRQHandler+0xe0>
				if (inLineTxe<inLine)
 8005332:	4b1d      	ldr	r3, [pc, #116]	; (80053a8 <USART6_IRQHandler+0xfc>)
 8005334:	781a      	ldrb	r2, [r3, #0]
 8005336:	4b1d      	ldr	r3, [pc, #116]	; (80053ac <USART6_IRQHandler+0x100>)
 8005338:	781b      	ldrb	r3, [r3, #0]
 800533a:	429a      	cmp	r2, r3
 800533c:	d215      	bcs.n	800536a <USART6_IRQHandler+0xbe>
					sprintf(bufferMsgForTXE, bufferMsgForTXE_inLine[inLineTxe]);
 800533e:	4b1a      	ldr	r3, [pc, #104]	; (80053a8 <USART6_IRQHandler+0xfc>)
 8005340:	781b      	ldrb	r3, [r3, #0]
 8005342:	461a      	mov	r2, r3
 8005344:	2364      	movs	r3, #100	; 0x64
 8005346:	fb02 f303 	mul.w	r3, r2, r3
 800534a:	4a19      	ldr	r2, [pc, #100]	; (80053b0 <USART6_IRQHandler+0x104>)
 800534c:	4413      	add	r3, r2
 800534e:	4619      	mov	r1, r3
 8005350:	4814      	ldr	r0, [pc, #80]	; (80053a4 <USART6_IRQHandler+0xf8>)
 8005352:	f000 fee1 	bl	8006118 <siprintf>
					posChar = 0;
 8005356:	4b12      	ldr	r3, [pc, #72]	; (80053a0 <USART6_IRQHandler+0xf4>)
 8005358:	2200      	movs	r2, #0
 800535a:	701a      	strb	r2, [r3, #0]
					inLineTxe++;
 800535c:	4b12      	ldr	r3, [pc, #72]	; (80053a8 <USART6_IRQHandler+0xfc>)
 800535e:	781b      	ldrb	r3, [r3, #0]
 8005360:	3301      	adds	r3, #1
 8005362:	b2da      	uxtb	r2, r3
 8005364:	4b10      	ldr	r3, [pc, #64]	; (80053a8 <USART6_IRQHandler+0xfc>)
 8005366:	701a      	strb	r2, [r3, #0]
}
 8005368:	e010      	b.n	800538c <USART6_IRQHandler+0xe0>
					interruptionTX(ptrUSART6Used, USART_TX_INTERRUP_DISABLE);
 800536a:	4b09      	ldr	r3, [pc, #36]	; (8005390 <USART6_IRQHandler+0xe4>)
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	2100      	movs	r1, #0
 8005370:	4618      	mov	r0, r3
 8005372:	f7ff fe61 	bl	8005038 <interruptionTX>
					posChar = 0;
 8005376:	4b0a      	ldr	r3, [pc, #40]	; (80053a0 <USART6_IRQHandler+0xf4>)
 8005378:	2200      	movs	r2, #0
 800537a:	701a      	strb	r2, [r3, #0]
					inLineTxe = 0;
 800537c:	4b0a      	ldr	r3, [pc, #40]	; (80053a8 <USART6_IRQHandler+0xfc>)
 800537e:	2200      	movs	r2, #0
 8005380:	701a      	strb	r2, [r3, #0]
					inLine = 0;
 8005382:	4b0a      	ldr	r3, [pc, #40]	; (80053ac <USART6_IRQHandler+0x100>)
 8005384:	2200      	movs	r2, #0
 8005386:	701a      	strb	r2, [r3, #0]
}
 8005388:	e000      	b.n	800538c <USART6_IRQHandler+0xe0>
		__NOP();
 800538a:	bf00      	nop
}
 800538c:	bf00      	nop
 800538e:	bd80      	pop	{r7, pc}
 8005390:	200004cc 	.word	0x200004cc
 8005394:	200004d0 	.word	0x200004d0
 8005398:	20000d0b 	.word	0x20000d0b
 800539c:	200004d1 	.word	0x200004d1
 80053a0:	20000d0a 	.word	0x20000d0a
 80053a4:	200004d4 	.word	0x200004d4
 80053a8:	20000d09 	.word	0x20000d09
 80053ac:	20000d08 	.word	0x20000d08
 80053b0:	20000538 	.word	0x20000538

080053b4 <__errno>:
 80053b4:	4b01      	ldr	r3, [pc, #4]	; (80053bc <__errno+0x8>)
 80053b6:	6818      	ldr	r0, [r3, #0]
 80053b8:	4770      	bx	lr
 80053ba:	bf00      	nop
 80053bc:	20000014 	.word	0x20000014

080053c0 <__libc_init_array>:
 80053c0:	b570      	push	{r4, r5, r6, lr}
 80053c2:	4d0d      	ldr	r5, [pc, #52]	; (80053f8 <__libc_init_array+0x38>)
 80053c4:	4c0d      	ldr	r4, [pc, #52]	; (80053fc <__libc_init_array+0x3c>)
 80053c6:	1b64      	subs	r4, r4, r5
 80053c8:	10a4      	asrs	r4, r4, #2
 80053ca:	2600      	movs	r6, #0
 80053cc:	42a6      	cmp	r6, r4
 80053ce:	d109      	bne.n	80053e4 <__libc_init_array+0x24>
 80053d0:	4d0b      	ldr	r5, [pc, #44]	; (8005400 <__libc_init_array+0x40>)
 80053d2:	4c0c      	ldr	r4, [pc, #48]	; (8005404 <__libc_init_array+0x44>)
 80053d4:	f006 fbde 	bl	800bb94 <_init>
 80053d8:	1b64      	subs	r4, r4, r5
 80053da:	10a4      	asrs	r4, r4, #2
 80053dc:	2600      	movs	r6, #0
 80053de:	42a6      	cmp	r6, r4
 80053e0:	d105      	bne.n	80053ee <__libc_init_array+0x2e>
 80053e2:	bd70      	pop	{r4, r5, r6, pc}
 80053e4:	f855 3b04 	ldr.w	r3, [r5], #4
 80053e8:	4798      	blx	r3
 80053ea:	3601      	adds	r6, #1
 80053ec:	e7ee      	b.n	80053cc <__libc_init_array+0xc>
 80053ee:	f855 3b04 	ldr.w	r3, [r5], #4
 80053f2:	4798      	blx	r3
 80053f4:	3601      	adds	r6, #1
 80053f6:	e7f2      	b.n	80053de <__libc_init_array+0x1e>
 80053f8:	0800c648 	.word	0x0800c648
 80053fc:	0800c648 	.word	0x0800c648
 8005400:	0800c648 	.word	0x0800c648
 8005404:	0800c64c 	.word	0x0800c64c

08005408 <memset>:
 8005408:	4402      	add	r2, r0
 800540a:	4603      	mov	r3, r0
 800540c:	4293      	cmp	r3, r2
 800540e:	d100      	bne.n	8005412 <memset+0xa>
 8005410:	4770      	bx	lr
 8005412:	f803 1b01 	strb.w	r1, [r3], #1
 8005416:	e7f9      	b.n	800540c <memset+0x4>

08005418 <__cvt>:
 8005418:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800541c:	ec55 4b10 	vmov	r4, r5, d0
 8005420:	2d00      	cmp	r5, #0
 8005422:	460e      	mov	r6, r1
 8005424:	4619      	mov	r1, r3
 8005426:	462b      	mov	r3, r5
 8005428:	bfbb      	ittet	lt
 800542a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800542e:	461d      	movlt	r5, r3
 8005430:	2300      	movge	r3, #0
 8005432:	232d      	movlt	r3, #45	; 0x2d
 8005434:	700b      	strb	r3, [r1, #0]
 8005436:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005438:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800543c:	4691      	mov	r9, r2
 800543e:	f023 0820 	bic.w	r8, r3, #32
 8005442:	bfbc      	itt	lt
 8005444:	4622      	movlt	r2, r4
 8005446:	4614      	movlt	r4, r2
 8005448:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800544c:	d005      	beq.n	800545a <__cvt+0x42>
 800544e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8005452:	d100      	bne.n	8005456 <__cvt+0x3e>
 8005454:	3601      	adds	r6, #1
 8005456:	2102      	movs	r1, #2
 8005458:	e000      	b.n	800545c <__cvt+0x44>
 800545a:	2103      	movs	r1, #3
 800545c:	ab03      	add	r3, sp, #12
 800545e:	9301      	str	r3, [sp, #4]
 8005460:	ab02      	add	r3, sp, #8
 8005462:	9300      	str	r3, [sp, #0]
 8005464:	ec45 4b10 	vmov	d0, r4, r5
 8005468:	4653      	mov	r3, sl
 800546a:	4632      	mov	r2, r6
 800546c:	f001 fe44 	bl	80070f8 <_dtoa_r>
 8005470:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005474:	4607      	mov	r7, r0
 8005476:	d102      	bne.n	800547e <__cvt+0x66>
 8005478:	f019 0f01 	tst.w	r9, #1
 800547c:	d022      	beq.n	80054c4 <__cvt+0xac>
 800547e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005482:	eb07 0906 	add.w	r9, r7, r6
 8005486:	d110      	bne.n	80054aa <__cvt+0x92>
 8005488:	783b      	ldrb	r3, [r7, #0]
 800548a:	2b30      	cmp	r3, #48	; 0x30
 800548c:	d10a      	bne.n	80054a4 <__cvt+0x8c>
 800548e:	2200      	movs	r2, #0
 8005490:	2300      	movs	r3, #0
 8005492:	4620      	mov	r0, r4
 8005494:	4629      	mov	r1, r5
 8005496:	f7fb fb2f 	bl	8000af8 <__aeabi_dcmpeq>
 800549a:	b918      	cbnz	r0, 80054a4 <__cvt+0x8c>
 800549c:	f1c6 0601 	rsb	r6, r6, #1
 80054a0:	f8ca 6000 	str.w	r6, [sl]
 80054a4:	f8da 3000 	ldr.w	r3, [sl]
 80054a8:	4499      	add	r9, r3
 80054aa:	2200      	movs	r2, #0
 80054ac:	2300      	movs	r3, #0
 80054ae:	4620      	mov	r0, r4
 80054b0:	4629      	mov	r1, r5
 80054b2:	f7fb fb21 	bl	8000af8 <__aeabi_dcmpeq>
 80054b6:	b108      	cbz	r0, 80054bc <__cvt+0xa4>
 80054b8:	f8cd 900c 	str.w	r9, [sp, #12]
 80054bc:	2230      	movs	r2, #48	; 0x30
 80054be:	9b03      	ldr	r3, [sp, #12]
 80054c0:	454b      	cmp	r3, r9
 80054c2:	d307      	bcc.n	80054d4 <__cvt+0xbc>
 80054c4:	9b03      	ldr	r3, [sp, #12]
 80054c6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80054c8:	1bdb      	subs	r3, r3, r7
 80054ca:	4638      	mov	r0, r7
 80054cc:	6013      	str	r3, [r2, #0]
 80054ce:	b004      	add	sp, #16
 80054d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80054d4:	1c59      	adds	r1, r3, #1
 80054d6:	9103      	str	r1, [sp, #12]
 80054d8:	701a      	strb	r2, [r3, #0]
 80054da:	e7f0      	b.n	80054be <__cvt+0xa6>

080054dc <__exponent>:
 80054dc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80054de:	4603      	mov	r3, r0
 80054e0:	2900      	cmp	r1, #0
 80054e2:	bfb8      	it	lt
 80054e4:	4249      	neglt	r1, r1
 80054e6:	f803 2b02 	strb.w	r2, [r3], #2
 80054ea:	bfb4      	ite	lt
 80054ec:	222d      	movlt	r2, #45	; 0x2d
 80054ee:	222b      	movge	r2, #43	; 0x2b
 80054f0:	2909      	cmp	r1, #9
 80054f2:	7042      	strb	r2, [r0, #1]
 80054f4:	dd2a      	ble.n	800554c <__exponent+0x70>
 80054f6:	f10d 0407 	add.w	r4, sp, #7
 80054fa:	46a4      	mov	ip, r4
 80054fc:	270a      	movs	r7, #10
 80054fe:	46a6      	mov	lr, r4
 8005500:	460a      	mov	r2, r1
 8005502:	fb91 f6f7 	sdiv	r6, r1, r7
 8005506:	fb07 1516 	mls	r5, r7, r6, r1
 800550a:	3530      	adds	r5, #48	; 0x30
 800550c:	2a63      	cmp	r2, #99	; 0x63
 800550e:	f104 34ff 	add.w	r4, r4, #4294967295
 8005512:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8005516:	4631      	mov	r1, r6
 8005518:	dcf1      	bgt.n	80054fe <__exponent+0x22>
 800551a:	3130      	adds	r1, #48	; 0x30
 800551c:	f1ae 0502 	sub.w	r5, lr, #2
 8005520:	f804 1c01 	strb.w	r1, [r4, #-1]
 8005524:	1c44      	adds	r4, r0, #1
 8005526:	4629      	mov	r1, r5
 8005528:	4561      	cmp	r1, ip
 800552a:	d30a      	bcc.n	8005542 <__exponent+0x66>
 800552c:	f10d 0209 	add.w	r2, sp, #9
 8005530:	eba2 020e 	sub.w	r2, r2, lr
 8005534:	4565      	cmp	r5, ip
 8005536:	bf88      	it	hi
 8005538:	2200      	movhi	r2, #0
 800553a:	4413      	add	r3, r2
 800553c:	1a18      	subs	r0, r3, r0
 800553e:	b003      	add	sp, #12
 8005540:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005542:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005546:	f804 2f01 	strb.w	r2, [r4, #1]!
 800554a:	e7ed      	b.n	8005528 <__exponent+0x4c>
 800554c:	2330      	movs	r3, #48	; 0x30
 800554e:	3130      	adds	r1, #48	; 0x30
 8005550:	7083      	strb	r3, [r0, #2]
 8005552:	70c1      	strb	r1, [r0, #3]
 8005554:	1d03      	adds	r3, r0, #4
 8005556:	e7f1      	b.n	800553c <__exponent+0x60>

08005558 <_printf_float>:
 8005558:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800555c:	ed2d 8b02 	vpush	{d8}
 8005560:	b08d      	sub	sp, #52	; 0x34
 8005562:	460c      	mov	r4, r1
 8005564:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8005568:	4616      	mov	r6, r2
 800556a:	461f      	mov	r7, r3
 800556c:	4605      	mov	r5, r0
 800556e:	f002 ff21 	bl	80083b4 <_localeconv_r>
 8005572:	f8d0 a000 	ldr.w	sl, [r0]
 8005576:	4650      	mov	r0, sl
 8005578:	f7fa fe3c 	bl	80001f4 <strlen>
 800557c:	2300      	movs	r3, #0
 800557e:	930a      	str	r3, [sp, #40]	; 0x28
 8005580:	6823      	ldr	r3, [r4, #0]
 8005582:	9305      	str	r3, [sp, #20]
 8005584:	f8d8 3000 	ldr.w	r3, [r8]
 8005588:	f894 b018 	ldrb.w	fp, [r4, #24]
 800558c:	3307      	adds	r3, #7
 800558e:	f023 0307 	bic.w	r3, r3, #7
 8005592:	f103 0208 	add.w	r2, r3, #8
 8005596:	f8c8 2000 	str.w	r2, [r8]
 800559a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800559e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80055a2:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80055a6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80055aa:	9307      	str	r3, [sp, #28]
 80055ac:	f8cd 8018 	str.w	r8, [sp, #24]
 80055b0:	ee08 0a10 	vmov	s16, r0
 80055b4:	4b9f      	ldr	r3, [pc, #636]	; (8005834 <_printf_float+0x2dc>)
 80055b6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80055ba:	f04f 32ff 	mov.w	r2, #4294967295
 80055be:	f7fb facd 	bl	8000b5c <__aeabi_dcmpun>
 80055c2:	bb88      	cbnz	r0, 8005628 <_printf_float+0xd0>
 80055c4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80055c8:	4b9a      	ldr	r3, [pc, #616]	; (8005834 <_printf_float+0x2dc>)
 80055ca:	f04f 32ff 	mov.w	r2, #4294967295
 80055ce:	f7fb faa7 	bl	8000b20 <__aeabi_dcmple>
 80055d2:	bb48      	cbnz	r0, 8005628 <_printf_float+0xd0>
 80055d4:	2200      	movs	r2, #0
 80055d6:	2300      	movs	r3, #0
 80055d8:	4640      	mov	r0, r8
 80055da:	4649      	mov	r1, r9
 80055dc:	f7fb fa96 	bl	8000b0c <__aeabi_dcmplt>
 80055e0:	b110      	cbz	r0, 80055e8 <_printf_float+0x90>
 80055e2:	232d      	movs	r3, #45	; 0x2d
 80055e4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80055e8:	4b93      	ldr	r3, [pc, #588]	; (8005838 <_printf_float+0x2e0>)
 80055ea:	4894      	ldr	r0, [pc, #592]	; (800583c <_printf_float+0x2e4>)
 80055ec:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80055f0:	bf94      	ite	ls
 80055f2:	4698      	movls	r8, r3
 80055f4:	4680      	movhi	r8, r0
 80055f6:	2303      	movs	r3, #3
 80055f8:	6123      	str	r3, [r4, #16]
 80055fa:	9b05      	ldr	r3, [sp, #20]
 80055fc:	f023 0204 	bic.w	r2, r3, #4
 8005600:	6022      	str	r2, [r4, #0]
 8005602:	f04f 0900 	mov.w	r9, #0
 8005606:	9700      	str	r7, [sp, #0]
 8005608:	4633      	mov	r3, r6
 800560a:	aa0b      	add	r2, sp, #44	; 0x2c
 800560c:	4621      	mov	r1, r4
 800560e:	4628      	mov	r0, r5
 8005610:	f000 f9d8 	bl	80059c4 <_printf_common>
 8005614:	3001      	adds	r0, #1
 8005616:	f040 8090 	bne.w	800573a <_printf_float+0x1e2>
 800561a:	f04f 30ff 	mov.w	r0, #4294967295
 800561e:	b00d      	add	sp, #52	; 0x34
 8005620:	ecbd 8b02 	vpop	{d8}
 8005624:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005628:	4642      	mov	r2, r8
 800562a:	464b      	mov	r3, r9
 800562c:	4640      	mov	r0, r8
 800562e:	4649      	mov	r1, r9
 8005630:	f7fb fa94 	bl	8000b5c <__aeabi_dcmpun>
 8005634:	b140      	cbz	r0, 8005648 <_printf_float+0xf0>
 8005636:	464b      	mov	r3, r9
 8005638:	2b00      	cmp	r3, #0
 800563a:	bfbc      	itt	lt
 800563c:	232d      	movlt	r3, #45	; 0x2d
 800563e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8005642:	487f      	ldr	r0, [pc, #508]	; (8005840 <_printf_float+0x2e8>)
 8005644:	4b7f      	ldr	r3, [pc, #508]	; (8005844 <_printf_float+0x2ec>)
 8005646:	e7d1      	b.n	80055ec <_printf_float+0x94>
 8005648:	6863      	ldr	r3, [r4, #4]
 800564a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800564e:	9206      	str	r2, [sp, #24]
 8005650:	1c5a      	adds	r2, r3, #1
 8005652:	d13f      	bne.n	80056d4 <_printf_float+0x17c>
 8005654:	2306      	movs	r3, #6
 8005656:	6063      	str	r3, [r4, #4]
 8005658:	9b05      	ldr	r3, [sp, #20]
 800565a:	6861      	ldr	r1, [r4, #4]
 800565c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8005660:	2300      	movs	r3, #0
 8005662:	9303      	str	r3, [sp, #12]
 8005664:	ab0a      	add	r3, sp, #40	; 0x28
 8005666:	e9cd b301 	strd	fp, r3, [sp, #4]
 800566a:	ab09      	add	r3, sp, #36	; 0x24
 800566c:	ec49 8b10 	vmov	d0, r8, r9
 8005670:	9300      	str	r3, [sp, #0]
 8005672:	6022      	str	r2, [r4, #0]
 8005674:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005678:	4628      	mov	r0, r5
 800567a:	f7ff fecd 	bl	8005418 <__cvt>
 800567e:	9b06      	ldr	r3, [sp, #24]
 8005680:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005682:	2b47      	cmp	r3, #71	; 0x47
 8005684:	4680      	mov	r8, r0
 8005686:	d108      	bne.n	800569a <_printf_float+0x142>
 8005688:	1cc8      	adds	r0, r1, #3
 800568a:	db02      	blt.n	8005692 <_printf_float+0x13a>
 800568c:	6863      	ldr	r3, [r4, #4]
 800568e:	4299      	cmp	r1, r3
 8005690:	dd41      	ble.n	8005716 <_printf_float+0x1be>
 8005692:	f1ab 0b02 	sub.w	fp, fp, #2
 8005696:	fa5f fb8b 	uxtb.w	fp, fp
 800569a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800569e:	d820      	bhi.n	80056e2 <_printf_float+0x18a>
 80056a0:	3901      	subs	r1, #1
 80056a2:	465a      	mov	r2, fp
 80056a4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80056a8:	9109      	str	r1, [sp, #36]	; 0x24
 80056aa:	f7ff ff17 	bl	80054dc <__exponent>
 80056ae:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80056b0:	1813      	adds	r3, r2, r0
 80056b2:	2a01      	cmp	r2, #1
 80056b4:	4681      	mov	r9, r0
 80056b6:	6123      	str	r3, [r4, #16]
 80056b8:	dc02      	bgt.n	80056c0 <_printf_float+0x168>
 80056ba:	6822      	ldr	r2, [r4, #0]
 80056bc:	07d2      	lsls	r2, r2, #31
 80056be:	d501      	bpl.n	80056c4 <_printf_float+0x16c>
 80056c0:	3301      	adds	r3, #1
 80056c2:	6123      	str	r3, [r4, #16]
 80056c4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d09c      	beq.n	8005606 <_printf_float+0xae>
 80056cc:	232d      	movs	r3, #45	; 0x2d
 80056ce:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80056d2:	e798      	b.n	8005606 <_printf_float+0xae>
 80056d4:	9a06      	ldr	r2, [sp, #24]
 80056d6:	2a47      	cmp	r2, #71	; 0x47
 80056d8:	d1be      	bne.n	8005658 <_printf_float+0x100>
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d1bc      	bne.n	8005658 <_printf_float+0x100>
 80056de:	2301      	movs	r3, #1
 80056e0:	e7b9      	b.n	8005656 <_printf_float+0xfe>
 80056e2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80056e6:	d118      	bne.n	800571a <_printf_float+0x1c2>
 80056e8:	2900      	cmp	r1, #0
 80056ea:	6863      	ldr	r3, [r4, #4]
 80056ec:	dd0b      	ble.n	8005706 <_printf_float+0x1ae>
 80056ee:	6121      	str	r1, [r4, #16]
 80056f0:	b913      	cbnz	r3, 80056f8 <_printf_float+0x1a0>
 80056f2:	6822      	ldr	r2, [r4, #0]
 80056f4:	07d0      	lsls	r0, r2, #31
 80056f6:	d502      	bpl.n	80056fe <_printf_float+0x1a6>
 80056f8:	3301      	adds	r3, #1
 80056fa:	440b      	add	r3, r1
 80056fc:	6123      	str	r3, [r4, #16]
 80056fe:	65a1      	str	r1, [r4, #88]	; 0x58
 8005700:	f04f 0900 	mov.w	r9, #0
 8005704:	e7de      	b.n	80056c4 <_printf_float+0x16c>
 8005706:	b913      	cbnz	r3, 800570e <_printf_float+0x1b6>
 8005708:	6822      	ldr	r2, [r4, #0]
 800570a:	07d2      	lsls	r2, r2, #31
 800570c:	d501      	bpl.n	8005712 <_printf_float+0x1ba>
 800570e:	3302      	adds	r3, #2
 8005710:	e7f4      	b.n	80056fc <_printf_float+0x1a4>
 8005712:	2301      	movs	r3, #1
 8005714:	e7f2      	b.n	80056fc <_printf_float+0x1a4>
 8005716:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800571a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800571c:	4299      	cmp	r1, r3
 800571e:	db05      	blt.n	800572c <_printf_float+0x1d4>
 8005720:	6823      	ldr	r3, [r4, #0]
 8005722:	6121      	str	r1, [r4, #16]
 8005724:	07d8      	lsls	r0, r3, #31
 8005726:	d5ea      	bpl.n	80056fe <_printf_float+0x1a6>
 8005728:	1c4b      	adds	r3, r1, #1
 800572a:	e7e7      	b.n	80056fc <_printf_float+0x1a4>
 800572c:	2900      	cmp	r1, #0
 800572e:	bfd4      	ite	le
 8005730:	f1c1 0202 	rsble	r2, r1, #2
 8005734:	2201      	movgt	r2, #1
 8005736:	4413      	add	r3, r2
 8005738:	e7e0      	b.n	80056fc <_printf_float+0x1a4>
 800573a:	6823      	ldr	r3, [r4, #0]
 800573c:	055a      	lsls	r2, r3, #21
 800573e:	d407      	bmi.n	8005750 <_printf_float+0x1f8>
 8005740:	6923      	ldr	r3, [r4, #16]
 8005742:	4642      	mov	r2, r8
 8005744:	4631      	mov	r1, r6
 8005746:	4628      	mov	r0, r5
 8005748:	47b8      	blx	r7
 800574a:	3001      	adds	r0, #1
 800574c:	d12c      	bne.n	80057a8 <_printf_float+0x250>
 800574e:	e764      	b.n	800561a <_printf_float+0xc2>
 8005750:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005754:	f240 80e0 	bls.w	8005918 <_printf_float+0x3c0>
 8005758:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800575c:	2200      	movs	r2, #0
 800575e:	2300      	movs	r3, #0
 8005760:	f7fb f9ca 	bl	8000af8 <__aeabi_dcmpeq>
 8005764:	2800      	cmp	r0, #0
 8005766:	d034      	beq.n	80057d2 <_printf_float+0x27a>
 8005768:	4a37      	ldr	r2, [pc, #220]	; (8005848 <_printf_float+0x2f0>)
 800576a:	2301      	movs	r3, #1
 800576c:	4631      	mov	r1, r6
 800576e:	4628      	mov	r0, r5
 8005770:	47b8      	blx	r7
 8005772:	3001      	adds	r0, #1
 8005774:	f43f af51 	beq.w	800561a <_printf_float+0xc2>
 8005778:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800577c:	429a      	cmp	r2, r3
 800577e:	db02      	blt.n	8005786 <_printf_float+0x22e>
 8005780:	6823      	ldr	r3, [r4, #0]
 8005782:	07d8      	lsls	r0, r3, #31
 8005784:	d510      	bpl.n	80057a8 <_printf_float+0x250>
 8005786:	ee18 3a10 	vmov	r3, s16
 800578a:	4652      	mov	r2, sl
 800578c:	4631      	mov	r1, r6
 800578e:	4628      	mov	r0, r5
 8005790:	47b8      	blx	r7
 8005792:	3001      	adds	r0, #1
 8005794:	f43f af41 	beq.w	800561a <_printf_float+0xc2>
 8005798:	f04f 0800 	mov.w	r8, #0
 800579c:	f104 091a 	add.w	r9, r4, #26
 80057a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80057a2:	3b01      	subs	r3, #1
 80057a4:	4543      	cmp	r3, r8
 80057a6:	dc09      	bgt.n	80057bc <_printf_float+0x264>
 80057a8:	6823      	ldr	r3, [r4, #0]
 80057aa:	079b      	lsls	r3, r3, #30
 80057ac:	f100 8105 	bmi.w	80059ba <_printf_float+0x462>
 80057b0:	68e0      	ldr	r0, [r4, #12]
 80057b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80057b4:	4298      	cmp	r0, r3
 80057b6:	bfb8      	it	lt
 80057b8:	4618      	movlt	r0, r3
 80057ba:	e730      	b.n	800561e <_printf_float+0xc6>
 80057bc:	2301      	movs	r3, #1
 80057be:	464a      	mov	r2, r9
 80057c0:	4631      	mov	r1, r6
 80057c2:	4628      	mov	r0, r5
 80057c4:	47b8      	blx	r7
 80057c6:	3001      	adds	r0, #1
 80057c8:	f43f af27 	beq.w	800561a <_printf_float+0xc2>
 80057cc:	f108 0801 	add.w	r8, r8, #1
 80057d0:	e7e6      	b.n	80057a0 <_printf_float+0x248>
 80057d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	dc39      	bgt.n	800584c <_printf_float+0x2f4>
 80057d8:	4a1b      	ldr	r2, [pc, #108]	; (8005848 <_printf_float+0x2f0>)
 80057da:	2301      	movs	r3, #1
 80057dc:	4631      	mov	r1, r6
 80057de:	4628      	mov	r0, r5
 80057e0:	47b8      	blx	r7
 80057e2:	3001      	adds	r0, #1
 80057e4:	f43f af19 	beq.w	800561a <_printf_float+0xc2>
 80057e8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80057ec:	4313      	orrs	r3, r2
 80057ee:	d102      	bne.n	80057f6 <_printf_float+0x29e>
 80057f0:	6823      	ldr	r3, [r4, #0]
 80057f2:	07d9      	lsls	r1, r3, #31
 80057f4:	d5d8      	bpl.n	80057a8 <_printf_float+0x250>
 80057f6:	ee18 3a10 	vmov	r3, s16
 80057fa:	4652      	mov	r2, sl
 80057fc:	4631      	mov	r1, r6
 80057fe:	4628      	mov	r0, r5
 8005800:	47b8      	blx	r7
 8005802:	3001      	adds	r0, #1
 8005804:	f43f af09 	beq.w	800561a <_printf_float+0xc2>
 8005808:	f04f 0900 	mov.w	r9, #0
 800580c:	f104 0a1a 	add.w	sl, r4, #26
 8005810:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005812:	425b      	negs	r3, r3
 8005814:	454b      	cmp	r3, r9
 8005816:	dc01      	bgt.n	800581c <_printf_float+0x2c4>
 8005818:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800581a:	e792      	b.n	8005742 <_printf_float+0x1ea>
 800581c:	2301      	movs	r3, #1
 800581e:	4652      	mov	r2, sl
 8005820:	4631      	mov	r1, r6
 8005822:	4628      	mov	r0, r5
 8005824:	47b8      	blx	r7
 8005826:	3001      	adds	r0, #1
 8005828:	f43f aef7 	beq.w	800561a <_printf_float+0xc2>
 800582c:	f109 0901 	add.w	r9, r9, #1
 8005830:	e7ee      	b.n	8005810 <_printf_float+0x2b8>
 8005832:	bf00      	nop
 8005834:	7fefffff 	.word	0x7fefffff
 8005838:	0800bf40 	.word	0x0800bf40
 800583c:	0800bf44 	.word	0x0800bf44
 8005840:	0800bf4c 	.word	0x0800bf4c
 8005844:	0800bf48 	.word	0x0800bf48
 8005848:	0800c341 	.word	0x0800c341
 800584c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800584e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005850:	429a      	cmp	r2, r3
 8005852:	bfa8      	it	ge
 8005854:	461a      	movge	r2, r3
 8005856:	2a00      	cmp	r2, #0
 8005858:	4691      	mov	r9, r2
 800585a:	dc37      	bgt.n	80058cc <_printf_float+0x374>
 800585c:	f04f 0b00 	mov.w	fp, #0
 8005860:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005864:	f104 021a 	add.w	r2, r4, #26
 8005868:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800586a:	9305      	str	r3, [sp, #20]
 800586c:	eba3 0309 	sub.w	r3, r3, r9
 8005870:	455b      	cmp	r3, fp
 8005872:	dc33      	bgt.n	80058dc <_printf_float+0x384>
 8005874:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005878:	429a      	cmp	r2, r3
 800587a:	db3b      	blt.n	80058f4 <_printf_float+0x39c>
 800587c:	6823      	ldr	r3, [r4, #0]
 800587e:	07da      	lsls	r2, r3, #31
 8005880:	d438      	bmi.n	80058f4 <_printf_float+0x39c>
 8005882:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005884:	9a05      	ldr	r2, [sp, #20]
 8005886:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005888:	1a9a      	subs	r2, r3, r2
 800588a:	eba3 0901 	sub.w	r9, r3, r1
 800588e:	4591      	cmp	r9, r2
 8005890:	bfa8      	it	ge
 8005892:	4691      	movge	r9, r2
 8005894:	f1b9 0f00 	cmp.w	r9, #0
 8005898:	dc35      	bgt.n	8005906 <_printf_float+0x3ae>
 800589a:	f04f 0800 	mov.w	r8, #0
 800589e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80058a2:	f104 0a1a 	add.w	sl, r4, #26
 80058a6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80058aa:	1a9b      	subs	r3, r3, r2
 80058ac:	eba3 0309 	sub.w	r3, r3, r9
 80058b0:	4543      	cmp	r3, r8
 80058b2:	f77f af79 	ble.w	80057a8 <_printf_float+0x250>
 80058b6:	2301      	movs	r3, #1
 80058b8:	4652      	mov	r2, sl
 80058ba:	4631      	mov	r1, r6
 80058bc:	4628      	mov	r0, r5
 80058be:	47b8      	blx	r7
 80058c0:	3001      	adds	r0, #1
 80058c2:	f43f aeaa 	beq.w	800561a <_printf_float+0xc2>
 80058c6:	f108 0801 	add.w	r8, r8, #1
 80058ca:	e7ec      	b.n	80058a6 <_printf_float+0x34e>
 80058cc:	4613      	mov	r3, r2
 80058ce:	4631      	mov	r1, r6
 80058d0:	4642      	mov	r2, r8
 80058d2:	4628      	mov	r0, r5
 80058d4:	47b8      	blx	r7
 80058d6:	3001      	adds	r0, #1
 80058d8:	d1c0      	bne.n	800585c <_printf_float+0x304>
 80058da:	e69e      	b.n	800561a <_printf_float+0xc2>
 80058dc:	2301      	movs	r3, #1
 80058de:	4631      	mov	r1, r6
 80058e0:	4628      	mov	r0, r5
 80058e2:	9205      	str	r2, [sp, #20]
 80058e4:	47b8      	blx	r7
 80058e6:	3001      	adds	r0, #1
 80058e8:	f43f ae97 	beq.w	800561a <_printf_float+0xc2>
 80058ec:	9a05      	ldr	r2, [sp, #20]
 80058ee:	f10b 0b01 	add.w	fp, fp, #1
 80058f2:	e7b9      	b.n	8005868 <_printf_float+0x310>
 80058f4:	ee18 3a10 	vmov	r3, s16
 80058f8:	4652      	mov	r2, sl
 80058fa:	4631      	mov	r1, r6
 80058fc:	4628      	mov	r0, r5
 80058fe:	47b8      	blx	r7
 8005900:	3001      	adds	r0, #1
 8005902:	d1be      	bne.n	8005882 <_printf_float+0x32a>
 8005904:	e689      	b.n	800561a <_printf_float+0xc2>
 8005906:	9a05      	ldr	r2, [sp, #20]
 8005908:	464b      	mov	r3, r9
 800590a:	4442      	add	r2, r8
 800590c:	4631      	mov	r1, r6
 800590e:	4628      	mov	r0, r5
 8005910:	47b8      	blx	r7
 8005912:	3001      	adds	r0, #1
 8005914:	d1c1      	bne.n	800589a <_printf_float+0x342>
 8005916:	e680      	b.n	800561a <_printf_float+0xc2>
 8005918:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800591a:	2a01      	cmp	r2, #1
 800591c:	dc01      	bgt.n	8005922 <_printf_float+0x3ca>
 800591e:	07db      	lsls	r3, r3, #31
 8005920:	d538      	bpl.n	8005994 <_printf_float+0x43c>
 8005922:	2301      	movs	r3, #1
 8005924:	4642      	mov	r2, r8
 8005926:	4631      	mov	r1, r6
 8005928:	4628      	mov	r0, r5
 800592a:	47b8      	blx	r7
 800592c:	3001      	adds	r0, #1
 800592e:	f43f ae74 	beq.w	800561a <_printf_float+0xc2>
 8005932:	ee18 3a10 	vmov	r3, s16
 8005936:	4652      	mov	r2, sl
 8005938:	4631      	mov	r1, r6
 800593a:	4628      	mov	r0, r5
 800593c:	47b8      	blx	r7
 800593e:	3001      	adds	r0, #1
 8005940:	f43f ae6b 	beq.w	800561a <_printf_float+0xc2>
 8005944:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005948:	2200      	movs	r2, #0
 800594a:	2300      	movs	r3, #0
 800594c:	f7fb f8d4 	bl	8000af8 <__aeabi_dcmpeq>
 8005950:	b9d8      	cbnz	r0, 800598a <_printf_float+0x432>
 8005952:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005954:	f108 0201 	add.w	r2, r8, #1
 8005958:	3b01      	subs	r3, #1
 800595a:	4631      	mov	r1, r6
 800595c:	4628      	mov	r0, r5
 800595e:	47b8      	blx	r7
 8005960:	3001      	adds	r0, #1
 8005962:	d10e      	bne.n	8005982 <_printf_float+0x42a>
 8005964:	e659      	b.n	800561a <_printf_float+0xc2>
 8005966:	2301      	movs	r3, #1
 8005968:	4652      	mov	r2, sl
 800596a:	4631      	mov	r1, r6
 800596c:	4628      	mov	r0, r5
 800596e:	47b8      	blx	r7
 8005970:	3001      	adds	r0, #1
 8005972:	f43f ae52 	beq.w	800561a <_printf_float+0xc2>
 8005976:	f108 0801 	add.w	r8, r8, #1
 800597a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800597c:	3b01      	subs	r3, #1
 800597e:	4543      	cmp	r3, r8
 8005980:	dcf1      	bgt.n	8005966 <_printf_float+0x40e>
 8005982:	464b      	mov	r3, r9
 8005984:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005988:	e6dc      	b.n	8005744 <_printf_float+0x1ec>
 800598a:	f04f 0800 	mov.w	r8, #0
 800598e:	f104 0a1a 	add.w	sl, r4, #26
 8005992:	e7f2      	b.n	800597a <_printf_float+0x422>
 8005994:	2301      	movs	r3, #1
 8005996:	4642      	mov	r2, r8
 8005998:	e7df      	b.n	800595a <_printf_float+0x402>
 800599a:	2301      	movs	r3, #1
 800599c:	464a      	mov	r2, r9
 800599e:	4631      	mov	r1, r6
 80059a0:	4628      	mov	r0, r5
 80059a2:	47b8      	blx	r7
 80059a4:	3001      	adds	r0, #1
 80059a6:	f43f ae38 	beq.w	800561a <_printf_float+0xc2>
 80059aa:	f108 0801 	add.w	r8, r8, #1
 80059ae:	68e3      	ldr	r3, [r4, #12]
 80059b0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80059b2:	1a5b      	subs	r3, r3, r1
 80059b4:	4543      	cmp	r3, r8
 80059b6:	dcf0      	bgt.n	800599a <_printf_float+0x442>
 80059b8:	e6fa      	b.n	80057b0 <_printf_float+0x258>
 80059ba:	f04f 0800 	mov.w	r8, #0
 80059be:	f104 0919 	add.w	r9, r4, #25
 80059c2:	e7f4      	b.n	80059ae <_printf_float+0x456>

080059c4 <_printf_common>:
 80059c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80059c8:	4616      	mov	r6, r2
 80059ca:	4699      	mov	r9, r3
 80059cc:	688a      	ldr	r2, [r1, #8]
 80059ce:	690b      	ldr	r3, [r1, #16]
 80059d0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80059d4:	4293      	cmp	r3, r2
 80059d6:	bfb8      	it	lt
 80059d8:	4613      	movlt	r3, r2
 80059da:	6033      	str	r3, [r6, #0]
 80059dc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80059e0:	4607      	mov	r7, r0
 80059e2:	460c      	mov	r4, r1
 80059e4:	b10a      	cbz	r2, 80059ea <_printf_common+0x26>
 80059e6:	3301      	adds	r3, #1
 80059e8:	6033      	str	r3, [r6, #0]
 80059ea:	6823      	ldr	r3, [r4, #0]
 80059ec:	0699      	lsls	r1, r3, #26
 80059ee:	bf42      	ittt	mi
 80059f0:	6833      	ldrmi	r3, [r6, #0]
 80059f2:	3302      	addmi	r3, #2
 80059f4:	6033      	strmi	r3, [r6, #0]
 80059f6:	6825      	ldr	r5, [r4, #0]
 80059f8:	f015 0506 	ands.w	r5, r5, #6
 80059fc:	d106      	bne.n	8005a0c <_printf_common+0x48>
 80059fe:	f104 0a19 	add.w	sl, r4, #25
 8005a02:	68e3      	ldr	r3, [r4, #12]
 8005a04:	6832      	ldr	r2, [r6, #0]
 8005a06:	1a9b      	subs	r3, r3, r2
 8005a08:	42ab      	cmp	r3, r5
 8005a0a:	dc26      	bgt.n	8005a5a <_printf_common+0x96>
 8005a0c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005a10:	1e13      	subs	r3, r2, #0
 8005a12:	6822      	ldr	r2, [r4, #0]
 8005a14:	bf18      	it	ne
 8005a16:	2301      	movne	r3, #1
 8005a18:	0692      	lsls	r2, r2, #26
 8005a1a:	d42b      	bmi.n	8005a74 <_printf_common+0xb0>
 8005a1c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005a20:	4649      	mov	r1, r9
 8005a22:	4638      	mov	r0, r7
 8005a24:	47c0      	blx	r8
 8005a26:	3001      	adds	r0, #1
 8005a28:	d01e      	beq.n	8005a68 <_printf_common+0xa4>
 8005a2a:	6823      	ldr	r3, [r4, #0]
 8005a2c:	68e5      	ldr	r5, [r4, #12]
 8005a2e:	6832      	ldr	r2, [r6, #0]
 8005a30:	f003 0306 	and.w	r3, r3, #6
 8005a34:	2b04      	cmp	r3, #4
 8005a36:	bf08      	it	eq
 8005a38:	1aad      	subeq	r5, r5, r2
 8005a3a:	68a3      	ldr	r3, [r4, #8]
 8005a3c:	6922      	ldr	r2, [r4, #16]
 8005a3e:	bf0c      	ite	eq
 8005a40:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005a44:	2500      	movne	r5, #0
 8005a46:	4293      	cmp	r3, r2
 8005a48:	bfc4      	itt	gt
 8005a4a:	1a9b      	subgt	r3, r3, r2
 8005a4c:	18ed      	addgt	r5, r5, r3
 8005a4e:	2600      	movs	r6, #0
 8005a50:	341a      	adds	r4, #26
 8005a52:	42b5      	cmp	r5, r6
 8005a54:	d11a      	bne.n	8005a8c <_printf_common+0xc8>
 8005a56:	2000      	movs	r0, #0
 8005a58:	e008      	b.n	8005a6c <_printf_common+0xa8>
 8005a5a:	2301      	movs	r3, #1
 8005a5c:	4652      	mov	r2, sl
 8005a5e:	4649      	mov	r1, r9
 8005a60:	4638      	mov	r0, r7
 8005a62:	47c0      	blx	r8
 8005a64:	3001      	adds	r0, #1
 8005a66:	d103      	bne.n	8005a70 <_printf_common+0xac>
 8005a68:	f04f 30ff 	mov.w	r0, #4294967295
 8005a6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a70:	3501      	adds	r5, #1
 8005a72:	e7c6      	b.n	8005a02 <_printf_common+0x3e>
 8005a74:	18e1      	adds	r1, r4, r3
 8005a76:	1c5a      	adds	r2, r3, #1
 8005a78:	2030      	movs	r0, #48	; 0x30
 8005a7a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005a7e:	4422      	add	r2, r4
 8005a80:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005a84:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005a88:	3302      	adds	r3, #2
 8005a8a:	e7c7      	b.n	8005a1c <_printf_common+0x58>
 8005a8c:	2301      	movs	r3, #1
 8005a8e:	4622      	mov	r2, r4
 8005a90:	4649      	mov	r1, r9
 8005a92:	4638      	mov	r0, r7
 8005a94:	47c0      	blx	r8
 8005a96:	3001      	adds	r0, #1
 8005a98:	d0e6      	beq.n	8005a68 <_printf_common+0xa4>
 8005a9a:	3601      	adds	r6, #1
 8005a9c:	e7d9      	b.n	8005a52 <_printf_common+0x8e>
	...

08005aa0 <_printf_i>:
 8005aa0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005aa4:	7e0f      	ldrb	r7, [r1, #24]
 8005aa6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005aa8:	2f78      	cmp	r7, #120	; 0x78
 8005aaa:	4691      	mov	r9, r2
 8005aac:	4680      	mov	r8, r0
 8005aae:	460c      	mov	r4, r1
 8005ab0:	469a      	mov	sl, r3
 8005ab2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005ab6:	d807      	bhi.n	8005ac8 <_printf_i+0x28>
 8005ab8:	2f62      	cmp	r7, #98	; 0x62
 8005aba:	d80a      	bhi.n	8005ad2 <_printf_i+0x32>
 8005abc:	2f00      	cmp	r7, #0
 8005abe:	f000 80d8 	beq.w	8005c72 <_printf_i+0x1d2>
 8005ac2:	2f58      	cmp	r7, #88	; 0x58
 8005ac4:	f000 80a3 	beq.w	8005c0e <_printf_i+0x16e>
 8005ac8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005acc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005ad0:	e03a      	b.n	8005b48 <_printf_i+0xa8>
 8005ad2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005ad6:	2b15      	cmp	r3, #21
 8005ad8:	d8f6      	bhi.n	8005ac8 <_printf_i+0x28>
 8005ada:	a101      	add	r1, pc, #4	; (adr r1, 8005ae0 <_printf_i+0x40>)
 8005adc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005ae0:	08005b39 	.word	0x08005b39
 8005ae4:	08005b4d 	.word	0x08005b4d
 8005ae8:	08005ac9 	.word	0x08005ac9
 8005aec:	08005ac9 	.word	0x08005ac9
 8005af0:	08005ac9 	.word	0x08005ac9
 8005af4:	08005ac9 	.word	0x08005ac9
 8005af8:	08005b4d 	.word	0x08005b4d
 8005afc:	08005ac9 	.word	0x08005ac9
 8005b00:	08005ac9 	.word	0x08005ac9
 8005b04:	08005ac9 	.word	0x08005ac9
 8005b08:	08005ac9 	.word	0x08005ac9
 8005b0c:	08005c59 	.word	0x08005c59
 8005b10:	08005b7d 	.word	0x08005b7d
 8005b14:	08005c3b 	.word	0x08005c3b
 8005b18:	08005ac9 	.word	0x08005ac9
 8005b1c:	08005ac9 	.word	0x08005ac9
 8005b20:	08005c7b 	.word	0x08005c7b
 8005b24:	08005ac9 	.word	0x08005ac9
 8005b28:	08005b7d 	.word	0x08005b7d
 8005b2c:	08005ac9 	.word	0x08005ac9
 8005b30:	08005ac9 	.word	0x08005ac9
 8005b34:	08005c43 	.word	0x08005c43
 8005b38:	682b      	ldr	r3, [r5, #0]
 8005b3a:	1d1a      	adds	r2, r3, #4
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	602a      	str	r2, [r5, #0]
 8005b40:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005b44:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005b48:	2301      	movs	r3, #1
 8005b4a:	e0a3      	b.n	8005c94 <_printf_i+0x1f4>
 8005b4c:	6820      	ldr	r0, [r4, #0]
 8005b4e:	6829      	ldr	r1, [r5, #0]
 8005b50:	0606      	lsls	r6, r0, #24
 8005b52:	f101 0304 	add.w	r3, r1, #4
 8005b56:	d50a      	bpl.n	8005b6e <_printf_i+0xce>
 8005b58:	680e      	ldr	r6, [r1, #0]
 8005b5a:	602b      	str	r3, [r5, #0]
 8005b5c:	2e00      	cmp	r6, #0
 8005b5e:	da03      	bge.n	8005b68 <_printf_i+0xc8>
 8005b60:	232d      	movs	r3, #45	; 0x2d
 8005b62:	4276      	negs	r6, r6
 8005b64:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005b68:	485e      	ldr	r0, [pc, #376]	; (8005ce4 <_printf_i+0x244>)
 8005b6a:	230a      	movs	r3, #10
 8005b6c:	e019      	b.n	8005ba2 <_printf_i+0x102>
 8005b6e:	680e      	ldr	r6, [r1, #0]
 8005b70:	602b      	str	r3, [r5, #0]
 8005b72:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005b76:	bf18      	it	ne
 8005b78:	b236      	sxthne	r6, r6
 8005b7a:	e7ef      	b.n	8005b5c <_printf_i+0xbc>
 8005b7c:	682b      	ldr	r3, [r5, #0]
 8005b7e:	6820      	ldr	r0, [r4, #0]
 8005b80:	1d19      	adds	r1, r3, #4
 8005b82:	6029      	str	r1, [r5, #0]
 8005b84:	0601      	lsls	r1, r0, #24
 8005b86:	d501      	bpl.n	8005b8c <_printf_i+0xec>
 8005b88:	681e      	ldr	r6, [r3, #0]
 8005b8a:	e002      	b.n	8005b92 <_printf_i+0xf2>
 8005b8c:	0646      	lsls	r6, r0, #25
 8005b8e:	d5fb      	bpl.n	8005b88 <_printf_i+0xe8>
 8005b90:	881e      	ldrh	r6, [r3, #0]
 8005b92:	4854      	ldr	r0, [pc, #336]	; (8005ce4 <_printf_i+0x244>)
 8005b94:	2f6f      	cmp	r7, #111	; 0x6f
 8005b96:	bf0c      	ite	eq
 8005b98:	2308      	moveq	r3, #8
 8005b9a:	230a      	movne	r3, #10
 8005b9c:	2100      	movs	r1, #0
 8005b9e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005ba2:	6865      	ldr	r5, [r4, #4]
 8005ba4:	60a5      	str	r5, [r4, #8]
 8005ba6:	2d00      	cmp	r5, #0
 8005ba8:	bfa2      	ittt	ge
 8005baa:	6821      	ldrge	r1, [r4, #0]
 8005bac:	f021 0104 	bicge.w	r1, r1, #4
 8005bb0:	6021      	strge	r1, [r4, #0]
 8005bb2:	b90e      	cbnz	r6, 8005bb8 <_printf_i+0x118>
 8005bb4:	2d00      	cmp	r5, #0
 8005bb6:	d04d      	beq.n	8005c54 <_printf_i+0x1b4>
 8005bb8:	4615      	mov	r5, r2
 8005bba:	fbb6 f1f3 	udiv	r1, r6, r3
 8005bbe:	fb03 6711 	mls	r7, r3, r1, r6
 8005bc2:	5dc7      	ldrb	r7, [r0, r7]
 8005bc4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005bc8:	4637      	mov	r7, r6
 8005bca:	42bb      	cmp	r3, r7
 8005bcc:	460e      	mov	r6, r1
 8005bce:	d9f4      	bls.n	8005bba <_printf_i+0x11a>
 8005bd0:	2b08      	cmp	r3, #8
 8005bd2:	d10b      	bne.n	8005bec <_printf_i+0x14c>
 8005bd4:	6823      	ldr	r3, [r4, #0]
 8005bd6:	07de      	lsls	r6, r3, #31
 8005bd8:	d508      	bpl.n	8005bec <_printf_i+0x14c>
 8005bda:	6923      	ldr	r3, [r4, #16]
 8005bdc:	6861      	ldr	r1, [r4, #4]
 8005bde:	4299      	cmp	r1, r3
 8005be0:	bfde      	ittt	le
 8005be2:	2330      	movle	r3, #48	; 0x30
 8005be4:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005be8:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005bec:	1b52      	subs	r2, r2, r5
 8005bee:	6122      	str	r2, [r4, #16]
 8005bf0:	f8cd a000 	str.w	sl, [sp]
 8005bf4:	464b      	mov	r3, r9
 8005bf6:	aa03      	add	r2, sp, #12
 8005bf8:	4621      	mov	r1, r4
 8005bfa:	4640      	mov	r0, r8
 8005bfc:	f7ff fee2 	bl	80059c4 <_printf_common>
 8005c00:	3001      	adds	r0, #1
 8005c02:	d14c      	bne.n	8005c9e <_printf_i+0x1fe>
 8005c04:	f04f 30ff 	mov.w	r0, #4294967295
 8005c08:	b004      	add	sp, #16
 8005c0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c0e:	4835      	ldr	r0, [pc, #212]	; (8005ce4 <_printf_i+0x244>)
 8005c10:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005c14:	6829      	ldr	r1, [r5, #0]
 8005c16:	6823      	ldr	r3, [r4, #0]
 8005c18:	f851 6b04 	ldr.w	r6, [r1], #4
 8005c1c:	6029      	str	r1, [r5, #0]
 8005c1e:	061d      	lsls	r5, r3, #24
 8005c20:	d514      	bpl.n	8005c4c <_printf_i+0x1ac>
 8005c22:	07df      	lsls	r7, r3, #31
 8005c24:	bf44      	itt	mi
 8005c26:	f043 0320 	orrmi.w	r3, r3, #32
 8005c2a:	6023      	strmi	r3, [r4, #0]
 8005c2c:	b91e      	cbnz	r6, 8005c36 <_printf_i+0x196>
 8005c2e:	6823      	ldr	r3, [r4, #0]
 8005c30:	f023 0320 	bic.w	r3, r3, #32
 8005c34:	6023      	str	r3, [r4, #0]
 8005c36:	2310      	movs	r3, #16
 8005c38:	e7b0      	b.n	8005b9c <_printf_i+0xfc>
 8005c3a:	6823      	ldr	r3, [r4, #0]
 8005c3c:	f043 0320 	orr.w	r3, r3, #32
 8005c40:	6023      	str	r3, [r4, #0]
 8005c42:	2378      	movs	r3, #120	; 0x78
 8005c44:	4828      	ldr	r0, [pc, #160]	; (8005ce8 <_printf_i+0x248>)
 8005c46:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005c4a:	e7e3      	b.n	8005c14 <_printf_i+0x174>
 8005c4c:	0659      	lsls	r1, r3, #25
 8005c4e:	bf48      	it	mi
 8005c50:	b2b6      	uxthmi	r6, r6
 8005c52:	e7e6      	b.n	8005c22 <_printf_i+0x182>
 8005c54:	4615      	mov	r5, r2
 8005c56:	e7bb      	b.n	8005bd0 <_printf_i+0x130>
 8005c58:	682b      	ldr	r3, [r5, #0]
 8005c5a:	6826      	ldr	r6, [r4, #0]
 8005c5c:	6961      	ldr	r1, [r4, #20]
 8005c5e:	1d18      	adds	r0, r3, #4
 8005c60:	6028      	str	r0, [r5, #0]
 8005c62:	0635      	lsls	r5, r6, #24
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	d501      	bpl.n	8005c6c <_printf_i+0x1cc>
 8005c68:	6019      	str	r1, [r3, #0]
 8005c6a:	e002      	b.n	8005c72 <_printf_i+0x1d2>
 8005c6c:	0670      	lsls	r0, r6, #25
 8005c6e:	d5fb      	bpl.n	8005c68 <_printf_i+0x1c8>
 8005c70:	8019      	strh	r1, [r3, #0]
 8005c72:	2300      	movs	r3, #0
 8005c74:	6123      	str	r3, [r4, #16]
 8005c76:	4615      	mov	r5, r2
 8005c78:	e7ba      	b.n	8005bf0 <_printf_i+0x150>
 8005c7a:	682b      	ldr	r3, [r5, #0]
 8005c7c:	1d1a      	adds	r2, r3, #4
 8005c7e:	602a      	str	r2, [r5, #0]
 8005c80:	681d      	ldr	r5, [r3, #0]
 8005c82:	6862      	ldr	r2, [r4, #4]
 8005c84:	2100      	movs	r1, #0
 8005c86:	4628      	mov	r0, r5
 8005c88:	f7fa fac2 	bl	8000210 <memchr>
 8005c8c:	b108      	cbz	r0, 8005c92 <_printf_i+0x1f2>
 8005c8e:	1b40      	subs	r0, r0, r5
 8005c90:	6060      	str	r0, [r4, #4]
 8005c92:	6863      	ldr	r3, [r4, #4]
 8005c94:	6123      	str	r3, [r4, #16]
 8005c96:	2300      	movs	r3, #0
 8005c98:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005c9c:	e7a8      	b.n	8005bf0 <_printf_i+0x150>
 8005c9e:	6923      	ldr	r3, [r4, #16]
 8005ca0:	462a      	mov	r2, r5
 8005ca2:	4649      	mov	r1, r9
 8005ca4:	4640      	mov	r0, r8
 8005ca6:	47d0      	blx	sl
 8005ca8:	3001      	adds	r0, #1
 8005caa:	d0ab      	beq.n	8005c04 <_printf_i+0x164>
 8005cac:	6823      	ldr	r3, [r4, #0]
 8005cae:	079b      	lsls	r3, r3, #30
 8005cb0:	d413      	bmi.n	8005cda <_printf_i+0x23a>
 8005cb2:	68e0      	ldr	r0, [r4, #12]
 8005cb4:	9b03      	ldr	r3, [sp, #12]
 8005cb6:	4298      	cmp	r0, r3
 8005cb8:	bfb8      	it	lt
 8005cba:	4618      	movlt	r0, r3
 8005cbc:	e7a4      	b.n	8005c08 <_printf_i+0x168>
 8005cbe:	2301      	movs	r3, #1
 8005cc0:	4632      	mov	r2, r6
 8005cc2:	4649      	mov	r1, r9
 8005cc4:	4640      	mov	r0, r8
 8005cc6:	47d0      	blx	sl
 8005cc8:	3001      	adds	r0, #1
 8005cca:	d09b      	beq.n	8005c04 <_printf_i+0x164>
 8005ccc:	3501      	adds	r5, #1
 8005cce:	68e3      	ldr	r3, [r4, #12]
 8005cd0:	9903      	ldr	r1, [sp, #12]
 8005cd2:	1a5b      	subs	r3, r3, r1
 8005cd4:	42ab      	cmp	r3, r5
 8005cd6:	dcf2      	bgt.n	8005cbe <_printf_i+0x21e>
 8005cd8:	e7eb      	b.n	8005cb2 <_printf_i+0x212>
 8005cda:	2500      	movs	r5, #0
 8005cdc:	f104 0619 	add.w	r6, r4, #25
 8005ce0:	e7f5      	b.n	8005cce <_printf_i+0x22e>
 8005ce2:	bf00      	nop
 8005ce4:	0800bf50 	.word	0x0800bf50
 8005ce8:	0800bf61 	.word	0x0800bf61

08005cec <_scanf_float>:
 8005cec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005cf0:	b087      	sub	sp, #28
 8005cf2:	4617      	mov	r7, r2
 8005cf4:	9303      	str	r3, [sp, #12]
 8005cf6:	688b      	ldr	r3, [r1, #8]
 8005cf8:	1e5a      	subs	r2, r3, #1
 8005cfa:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8005cfe:	bf83      	ittte	hi
 8005d00:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8005d04:	195b      	addhi	r3, r3, r5
 8005d06:	9302      	strhi	r3, [sp, #8]
 8005d08:	2300      	movls	r3, #0
 8005d0a:	bf86      	itte	hi
 8005d0c:	f240 135d 	movwhi	r3, #349	; 0x15d
 8005d10:	608b      	strhi	r3, [r1, #8]
 8005d12:	9302      	strls	r3, [sp, #8]
 8005d14:	680b      	ldr	r3, [r1, #0]
 8005d16:	468b      	mov	fp, r1
 8005d18:	2500      	movs	r5, #0
 8005d1a:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8005d1e:	f84b 3b1c 	str.w	r3, [fp], #28
 8005d22:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8005d26:	4680      	mov	r8, r0
 8005d28:	460c      	mov	r4, r1
 8005d2a:	465e      	mov	r6, fp
 8005d2c:	46aa      	mov	sl, r5
 8005d2e:	46a9      	mov	r9, r5
 8005d30:	9501      	str	r5, [sp, #4]
 8005d32:	68a2      	ldr	r2, [r4, #8]
 8005d34:	b152      	cbz	r2, 8005d4c <_scanf_float+0x60>
 8005d36:	683b      	ldr	r3, [r7, #0]
 8005d38:	781b      	ldrb	r3, [r3, #0]
 8005d3a:	2b4e      	cmp	r3, #78	; 0x4e
 8005d3c:	d864      	bhi.n	8005e08 <_scanf_float+0x11c>
 8005d3e:	2b40      	cmp	r3, #64	; 0x40
 8005d40:	d83c      	bhi.n	8005dbc <_scanf_float+0xd0>
 8005d42:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8005d46:	b2c8      	uxtb	r0, r1
 8005d48:	280e      	cmp	r0, #14
 8005d4a:	d93a      	bls.n	8005dc2 <_scanf_float+0xd6>
 8005d4c:	f1b9 0f00 	cmp.w	r9, #0
 8005d50:	d003      	beq.n	8005d5a <_scanf_float+0x6e>
 8005d52:	6823      	ldr	r3, [r4, #0]
 8005d54:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005d58:	6023      	str	r3, [r4, #0]
 8005d5a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005d5e:	f1ba 0f01 	cmp.w	sl, #1
 8005d62:	f200 8113 	bhi.w	8005f8c <_scanf_float+0x2a0>
 8005d66:	455e      	cmp	r6, fp
 8005d68:	f200 8105 	bhi.w	8005f76 <_scanf_float+0x28a>
 8005d6c:	2501      	movs	r5, #1
 8005d6e:	4628      	mov	r0, r5
 8005d70:	b007      	add	sp, #28
 8005d72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d76:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8005d7a:	2a0d      	cmp	r2, #13
 8005d7c:	d8e6      	bhi.n	8005d4c <_scanf_float+0x60>
 8005d7e:	a101      	add	r1, pc, #4	; (adr r1, 8005d84 <_scanf_float+0x98>)
 8005d80:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8005d84:	08005ec3 	.word	0x08005ec3
 8005d88:	08005d4d 	.word	0x08005d4d
 8005d8c:	08005d4d 	.word	0x08005d4d
 8005d90:	08005d4d 	.word	0x08005d4d
 8005d94:	08005f23 	.word	0x08005f23
 8005d98:	08005efb 	.word	0x08005efb
 8005d9c:	08005d4d 	.word	0x08005d4d
 8005da0:	08005d4d 	.word	0x08005d4d
 8005da4:	08005ed1 	.word	0x08005ed1
 8005da8:	08005d4d 	.word	0x08005d4d
 8005dac:	08005d4d 	.word	0x08005d4d
 8005db0:	08005d4d 	.word	0x08005d4d
 8005db4:	08005d4d 	.word	0x08005d4d
 8005db8:	08005e89 	.word	0x08005e89
 8005dbc:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8005dc0:	e7db      	b.n	8005d7a <_scanf_float+0x8e>
 8005dc2:	290e      	cmp	r1, #14
 8005dc4:	d8c2      	bhi.n	8005d4c <_scanf_float+0x60>
 8005dc6:	a001      	add	r0, pc, #4	; (adr r0, 8005dcc <_scanf_float+0xe0>)
 8005dc8:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8005dcc:	08005e7b 	.word	0x08005e7b
 8005dd0:	08005d4d 	.word	0x08005d4d
 8005dd4:	08005e7b 	.word	0x08005e7b
 8005dd8:	08005f0f 	.word	0x08005f0f
 8005ddc:	08005d4d 	.word	0x08005d4d
 8005de0:	08005e29 	.word	0x08005e29
 8005de4:	08005e65 	.word	0x08005e65
 8005de8:	08005e65 	.word	0x08005e65
 8005dec:	08005e65 	.word	0x08005e65
 8005df0:	08005e65 	.word	0x08005e65
 8005df4:	08005e65 	.word	0x08005e65
 8005df8:	08005e65 	.word	0x08005e65
 8005dfc:	08005e65 	.word	0x08005e65
 8005e00:	08005e65 	.word	0x08005e65
 8005e04:	08005e65 	.word	0x08005e65
 8005e08:	2b6e      	cmp	r3, #110	; 0x6e
 8005e0a:	d809      	bhi.n	8005e20 <_scanf_float+0x134>
 8005e0c:	2b60      	cmp	r3, #96	; 0x60
 8005e0e:	d8b2      	bhi.n	8005d76 <_scanf_float+0x8a>
 8005e10:	2b54      	cmp	r3, #84	; 0x54
 8005e12:	d077      	beq.n	8005f04 <_scanf_float+0x218>
 8005e14:	2b59      	cmp	r3, #89	; 0x59
 8005e16:	d199      	bne.n	8005d4c <_scanf_float+0x60>
 8005e18:	2d07      	cmp	r5, #7
 8005e1a:	d197      	bne.n	8005d4c <_scanf_float+0x60>
 8005e1c:	2508      	movs	r5, #8
 8005e1e:	e029      	b.n	8005e74 <_scanf_float+0x188>
 8005e20:	2b74      	cmp	r3, #116	; 0x74
 8005e22:	d06f      	beq.n	8005f04 <_scanf_float+0x218>
 8005e24:	2b79      	cmp	r3, #121	; 0x79
 8005e26:	e7f6      	b.n	8005e16 <_scanf_float+0x12a>
 8005e28:	6821      	ldr	r1, [r4, #0]
 8005e2a:	05c8      	lsls	r0, r1, #23
 8005e2c:	d51a      	bpl.n	8005e64 <_scanf_float+0x178>
 8005e2e:	9b02      	ldr	r3, [sp, #8]
 8005e30:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8005e34:	6021      	str	r1, [r4, #0]
 8005e36:	f109 0901 	add.w	r9, r9, #1
 8005e3a:	b11b      	cbz	r3, 8005e44 <_scanf_float+0x158>
 8005e3c:	3b01      	subs	r3, #1
 8005e3e:	3201      	adds	r2, #1
 8005e40:	9302      	str	r3, [sp, #8]
 8005e42:	60a2      	str	r2, [r4, #8]
 8005e44:	68a3      	ldr	r3, [r4, #8]
 8005e46:	3b01      	subs	r3, #1
 8005e48:	60a3      	str	r3, [r4, #8]
 8005e4a:	6923      	ldr	r3, [r4, #16]
 8005e4c:	3301      	adds	r3, #1
 8005e4e:	6123      	str	r3, [r4, #16]
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	3b01      	subs	r3, #1
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	607b      	str	r3, [r7, #4]
 8005e58:	f340 8084 	ble.w	8005f64 <_scanf_float+0x278>
 8005e5c:	683b      	ldr	r3, [r7, #0]
 8005e5e:	3301      	adds	r3, #1
 8005e60:	603b      	str	r3, [r7, #0]
 8005e62:	e766      	b.n	8005d32 <_scanf_float+0x46>
 8005e64:	eb1a 0f05 	cmn.w	sl, r5
 8005e68:	f47f af70 	bne.w	8005d4c <_scanf_float+0x60>
 8005e6c:	6822      	ldr	r2, [r4, #0]
 8005e6e:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8005e72:	6022      	str	r2, [r4, #0]
 8005e74:	f806 3b01 	strb.w	r3, [r6], #1
 8005e78:	e7e4      	b.n	8005e44 <_scanf_float+0x158>
 8005e7a:	6822      	ldr	r2, [r4, #0]
 8005e7c:	0610      	lsls	r0, r2, #24
 8005e7e:	f57f af65 	bpl.w	8005d4c <_scanf_float+0x60>
 8005e82:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005e86:	e7f4      	b.n	8005e72 <_scanf_float+0x186>
 8005e88:	f1ba 0f00 	cmp.w	sl, #0
 8005e8c:	d10e      	bne.n	8005eac <_scanf_float+0x1c0>
 8005e8e:	f1b9 0f00 	cmp.w	r9, #0
 8005e92:	d10e      	bne.n	8005eb2 <_scanf_float+0x1c6>
 8005e94:	6822      	ldr	r2, [r4, #0]
 8005e96:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8005e9a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8005e9e:	d108      	bne.n	8005eb2 <_scanf_float+0x1c6>
 8005ea0:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8005ea4:	6022      	str	r2, [r4, #0]
 8005ea6:	f04f 0a01 	mov.w	sl, #1
 8005eaa:	e7e3      	b.n	8005e74 <_scanf_float+0x188>
 8005eac:	f1ba 0f02 	cmp.w	sl, #2
 8005eb0:	d055      	beq.n	8005f5e <_scanf_float+0x272>
 8005eb2:	2d01      	cmp	r5, #1
 8005eb4:	d002      	beq.n	8005ebc <_scanf_float+0x1d0>
 8005eb6:	2d04      	cmp	r5, #4
 8005eb8:	f47f af48 	bne.w	8005d4c <_scanf_float+0x60>
 8005ebc:	3501      	adds	r5, #1
 8005ebe:	b2ed      	uxtb	r5, r5
 8005ec0:	e7d8      	b.n	8005e74 <_scanf_float+0x188>
 8005ec2:	f1ba 0f01 	cmp.w	sl, #1
 8005ec6:	f47f af41 	bne.w	8005d4c <_scanf_float+0x60>
 8005eca:	f04f 0a02 	mov.w	sl, #2
 8005ece:	e7d1      	b.n	8005e74 <_scanf_float+0x188>
 8005ed0:	b97d      	cbnz	r5, 8005ef2 <_scanf_float+0x206>
 8005ed2:	f1b9 0f00 	cmp.w	r9, #0
 8005ed6:	f47f af3c 	bne.w	8005d52 <_scanf_float+0x66>
 8005eda:	6822      	ldr	r2, [r4, #0]
 8005edc:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8005ee0:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8005ee4:	f47f af39 	bne.w	8005d5a <_scanf_float+0x6e>
 8005ee8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8005eec:	6022      	str	r2, [r4, #0]
 8005eee:	2501      	movs	r5, #1
 8005ef0:	e7c0      	b.n	8005e74 <_scanf_float+0x188>
 8005ef2:	2d03      	cmp	r5, #3
 8005ef4:	d0e2      	beq.n	8005ebc <_scanf_float+0x1d0>
 8005ef6:	2d05      	cmp	r5, #5
 8005ef8:	e7de      	b.n	8005eb8 <_scanf_float+0x1cc>
 8005efa:	2d02      	cmp	r5, #2
 8005efc:	f47f af26 	bne.w	8005d4c <_scanf_float+0x60>
 8005f00:	2503      	movs	r5, #3
 8005f02:	e7b7      	b.n	8005e74 <_scanf_float+0x188>
 8005f04:	2d06      	cmp	r5, #6
 8005f06:	f47f af21 	bne.w	8005d4c <_scanf_float+0x60>
 8005f0a:	2507      	movs	r5, #7
 8005f0c:	e7b2      	b.n	8005e74 <_scanf_float+0x188>
 8005f0e:	6822      	ldr	r2, [r4, #0]
 8005f10:	0591      	lsls	r1, r2, #22
 8005f12:	f57f af1b 	bpl.w	8005d4c <_scanf_float+0x60>
 8005f16:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8005f1a:	6022      	str	r2, [r4, #0]
 8005f1c:	f8cd 9004 	str.w	r9, [sp, #4]
 8005f20:	e7a8      	b.n	8005e74 <_scanf_float+0x188>
 8005f22:	6822      	ldr	r2, [r4, #0]
 8005f24:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8005f28:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8005f2c:	d006      	beq.n	8005f3c <_scanf_float+0x250>
 8005f2e:	0550      	lsls	r0, r2, #21
 8005f30:	f57f af0c 	bpl.w	8005d4c <_scanf_float+0x60>
 8005f34:	f1b9 0f00 	cmp.w	r9, #0
 8005f38:	f43f af0f 	beq.w	8005d5a <_scanf_float+0x6e>
 8005f3c:	0591      	lsls	r1, r2, #22
 8005f3e:	bf58      	it	pl
 8005f40:	9901      	ldrpl	r1, [sp, #4]
 8005f42:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8005f46:	bf58      	it	pl
 8005f48:	eba9 0101 	subpl.w	r1, r9, r1
 8005f4c:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8005f50:	bf58      	it	pl
 8005f52:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8005f56:	6022      	str	r2, [r4, #0]
 8005f58:	f04f 0900 	mov.w	r9, #0
 8005f5c:	e78a      	b.n	8005e74 <_scanf_float+0x188>
 8005f5e:	f04f 0a03 	mov.w	sl, #3
 8005f62:	e787      	b.n	8005e74 <_scanf_float+0x188>
 8005f64:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8005f68:	4639      	mov	r1, r7
 8005f6a:	4640      	mov	r0, r8
 8005f6c:	4798      	blx	r3
 8005f6e:	2800      	cmp	r0, #0
 8005f70:	f43f aedf 	beq.w	8005d32 <_scanf_float+0x46>
 8005f74:	e6ea      	b.n	8005d4c <_scanf_float+0x60>
 8005f76:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005f7a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005f7e:	463a      	mov	r2, r7
 8005f80:	4640      	mov	r0, r8
 8005f82:	4798      	blx	r3
 8005f84:	6923      	ldr	r3, [r4, #16]
 8005f86:	3b01      	subs	r3, #1
 8005f88:	6123      	str	r3, [r4, #16]
 8005f8a:	e6ec      	b.n	8005d66 <_scanf_float+0x7a>
 8005f8c:	1e6b      	subs	r3, r5, #1
 8005f8e:	2b06      	cmp	r3, #6
 8005f90:	d825      	bhi.n	8005fde <_scanf_float+0x2f2>
 8005f92:	2d02      	cmp	r5, #2
 8005f94:	d836      	bhi.n	8006004 <_scanf_float+0x318>
 8005f96:	455e      	cmp	r6, fp
 8005f98:	f67f aee8 	bls.w	8005d6c <_scanf_float+0x80>
 8005f9c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005fa0:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005fa4:	463a      	mov	r2, r7
 8005fa6:	4640      	mov	r0, r8
 8005fa8:	4798      	blx	r3
 8005faa:	6923      	ldr	r3, [r4, #16]
 8005fac:	3b01      	subs	r3, #1
 8005fae:	6123      	str	r3, [r4, #16]
 8005fb0:	e7f1      	b.n	8005f96 <_scanf_float+0x2aa>
 8005fb2:	9802      	ldr	r0, [sp, #8]
 8005fb4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005fb8:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8005fbc:	9002      	str	r0, [sp, #8]
 8005fbe:	463a      	mov	r2, r7
 8005fc0:	4640      	mov	r0, r8
 8005fc2:	4798      	blx	r3
 8005fc4:	6923      	ldr	r3, [r4, #16]
 8005fc6:	3b01      	subs	r3, #1
 8005fc8:	6123      	str	r3, [r4, #16]
 8005fca:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005fce:	fa5f fa8a 	uxtb.w	sl, sl
 8005fd2:	f1ba 0f02 	cmp.w	sl, #2
 8005fd6:	d1ec      	bne.n	8005fb2 <_scanf_float+0x2c6>
 8005fd8:	3d03      	subs	r5, #3
 8005fda:	b2ed      	uxtb	r5, r5
 8005fdc:	1b76      	subs	r6, r6, r5
 8005fde:	6823      	ldr	r3, [r4, #0]
 8005fe0:	05da      	lsls	r2, r3, #23
 8005fe2:	d52f      	bpl.n	8006044 <_scanf_float+0x358>
 8005fe4:	055b      	lsls	r3, r3, #21
 8005fe6:	d510      	bpl.n	800600a <_scanf_float+0x31e>
 8005fe8:	455e      	cmp	r6, fp
 8005fea:	f67f aebf 	bls.w	8005d6c <_scanf_float+0x80>
 8005fee:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005ff2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005ff6:	463a      	mov	r2, r7
 8005ff8:	4640      	mov	r0, r8
 8005ffa:	4798      	blx	r3
 8005ffc:	6923      	ldr	r3, [r4, #16]
 8005ffe:	3b01      	subs	r3, #1
 8006000:	6123      	str	r3, [r4, #16]
 8006002:	e7f1      	b.n	8005fe8 <_scanf_float+0x2fc>
 8006004:	46aa      	mov	sl, r5
 8006006:	9602      	str	r6, [sp, #8]
 8006008:	e7df      	b.n	8005fca <_scanf_float+0x2de>
 800600a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800600e:	6923      	ldr	r3, [r4, #16]
 8006010:	2965      	cmp	r1, #101	; 0x65
 8006012:	f103 33ff 	add.w	r3, r3, #4294967295
 8006016:	f106 35ff 	add.w	r5, r6, #4294967295
 800601a:	6123      	str	r3, [r4, #16]
 800601c:	d00c      	beq.n	8006038 <_scanf_float+0x34c>
 800601e:	2945      	cmp	r1, #69	; 0x45
 8006020:	d00a      	beq.n	8006038 <_scanf_float+0x34c>
 8006022:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006026:	463a      	mov	r2, r7
 8006028:	4640      	mov	r0, r8
 800602a:	4798      	blx	r3
 800602c:	6923      	ldr	r3, [r4, #16]
 800602e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8006032:	3b01      	subs	r3, #1
 8006034:	1eb5      	subs	r5, r6, #2
 8006036:	6123      	str	r3, [r4, #16]
 8006038:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800603c:	463a      	mov	r2, r7
 800603e:	4640      	mov	r0, r8
 8006040:	4798      	blx	r3
 8006042:	462e      	mov	r6, r5
 8006044:	6825      	ldr	r5, [r4, #0]
 8006046:	f015 0510 	ands.w	r5, r5, #16
 800604a:	d159      	bne.n	8006100 <_scanf_float+0x414>
 800604c:	7035      	strb	r5, [r6, #0]
 800604e:	6823      	ldr	r3, [r4, #0]
 8006050:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006054:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006058:	d11b      	bne.n	8006092 <_scanf_float+0x3a6>
 800605a:	9b01      	ldr	r3, [sp, #4]
 800605c:	454b      	cmp	r3, r9
 800605e:	eba3 0209 	sub.w	r2, r3, r9
 8006062:	d123      	bne.n	80060ac <_scanf_float+0x3c0>
 8006064:	2200      	movs	r2, #0
 8006066:	4659      	mov	r1, fp
 8006068:	4640      	mov	r0, r8
 800606a:	f000 ff0b 	bl	8006e84 <_strtod_r>
 800606e:	6822      	ldr	r2, [r4, #0]
 8006070:	9b03      	ldr	r3, [sp, #12]
 8006072:	f012 0f02 	tst.w	r2, #2
 8006076:	ec57 6b10 	vmov	r6, r7, d0
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	d021      	beq.n	80060c2 <_scanf_float+0x3d6>
 800607e:	9903      	ldr	r1, [sp, #12]
 8006080:	1d1a      	adds	r2, r3, #4
 8006082:	600a      	str	r2, [r1, #0]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	e9c3 6700 	strd	r6, r7, [r3]
 800608a:	68e3      	ldr	r3, [r4, #12]
 800608c:	3301      	adds	r3, #1
 800608e:	60e3      	str	r3, [r4, #12]
 8006090:	e66d      	b.n	8005d6e <_scanf_float+0x82>
 8006092:	9b04      	ldr	r3, [sp, #16]
 8006094:	2b00      	cmp	r3, #0
 8006096:	d0e5      	beq.n	8006064 <_scanf_float+0x378>
 8006098:	9905      	ldr	r1, [sp, #20]
 800609a:	230a      	movs	r3, #10
 800609c:	462a      	mov	r2, r5
 800609e:	3101      	adds	r1, #1
 80060a0:	4640      	mov	r0, r8
 80060a2:	f000 ff77 	bl	8006f94 <_strtol_r>
 80060a6:	9b04      	ldr	r3, [sp, #16]
 80060a8:	9e05      	ldr	r6, [sp, #20]
 80060aa:	1ac2      	subs	r2, r0, r3
 80060ac:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80060b0:	429e      	cmp	r6, r3
 80060b2:	bf28      	it	cs
 80060b4:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 80060b8:	4912      	ldr	r1, [pc, #72]	; (8006104 <_scanf_float+0x418>)
 80060ba:	4630      	mov	r0, r6
 80060bc:	f000 f82c 	bl	8006118 <siprintf>
 80060c0:	e7d0      	b.n	8006064 <_scanf_float+0x378>
 80060c2:	9903      	ldr	r1, [sp, #12]
 80060c4:	f012 0f04 	tst.w	r2, #4
 80060c8:	f103 0204 	add.w	r2, r3, #4
 80060cc:	600a      	str	r2, [r1, #0]
 80060ce:	d1d9      	bne.n	8006084 <_scanf_float+0x398>
 80060d0:	f8d3 8000 	ldr.w	r8, [r3]
 80060d4:	ee10 2a10 	vmov	r2, s0
 80060d8:	ee10 0a10 	vmov	r0, s0
 80060dc:	463b      	mov	r3, r7
 80060de:	4639      	mov	r1, r7
 80060e0:	f7fa fd3c 	bl	8000b5c <__aeabi_dcmpun>
 80060e4:	b128      	cbz	r0, 80060f2 <_scanf_float+0x406>
 80060e6:	4808      	ldr	r0, [pc, #32]	; (8006108 <_scanf_float+0x41c>)
 80060e8:	f000 f810 	bl	800610c <nanf>
 80060ec:	ed88 0a00 	vstr	s0, [r8]
 80060f0:	e7cb      	b.n	800608a <_scanf_float+0x39e>
 80060f2:	4630      	mov	r0, r6
 80060f4:	4639      	mov	r1, r7
 80060f6:	f7fa fd8f 	bl	8000c18 <__aeabi_d2f>
 80060fa:	f8c8 0000 	str.w	r0, [r8]
 80060fe:	e7c4      	b.n	800608a <_scanf_float+0x39e>
 8006100:	2500      	movs	r5, #0
 8006102:	e634      	b.n	8005d6e <_scanf_float+0x82>
 8006104:	0800bf72 	.word	0x0800bf72
 8006108:	0800c393 	.word	0x0800c393

0800610c <nanf>:
 800610c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8006114 <nanf+0x8>
 8006110:	4770      	bx	lr
 8006112:	bf00      	nop
 8006114:	7fc00000 	.word	0x7fc00000

08006118 <siprintf>:
 8006118:	b40e      	push	{r1, r2, r3}
 800611a:	b500      	push	{lr}
 800611c:	b09c      	sub	sp, #112	; 0x70
 800611e:	ab1d      	add	r3, sp, #116	; 0x74
 8006120:	9002      	str	r0, [sp, #8]
 8006122:	9006      	str	r0, [sp, #24]
 8006124:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006128:	4809      	ldr	r0, [pc, #36]	; (8006150 <siprintf+0x38>)
 800612a:	9107      	str	r1, [sp, #28]
 800612c:	9104      	str	r1, [sp, #16]
 800612e:	4909      	ldr	r1, [pc, #36]	; (8006154 <siprintf+0x3c>)
 8006130:	f853 2b04 	ldr.w	r2, [r3], #4
 8006134:	9105      	str	r1, [sp, #20]
 8006136:	6800      	ldr	r0, [r0, #0]
 8006138:	9301      	str	r3, [sp, #4]
 800613a:	a902      	add	r1, sp, #8
 800613c:	f002 ff8c 	bl	8009058 <_svfiprintf_r>
 8006140:	9b02      	ldr	r3, [sp, #8]
 8006142:	2200      	movs	r2, #0
 8006144:	701a      	strb	r2, [r3, #0]
 8006146:	b01c      	add	sp, #112	; 0x70
 8006148:	f85d eb04 	ldr.w	lr, [sp], #4
 800614c:	b003      	add	sp, #12
 800614e:	4770      	bx	lr
 8006150:	20000014 	.word	0x20000014
 8006154:	ffff0208 	.word	0xffff0208

08006158 <siscanf>:
 8006158:	b40e      	push	{r1, r2, r3}
 800615a:	b510      	push	{r4, lr}
 800615c:	b09f      	sub	sp, #124	; 0x7c
 800615e:	ac21      	add	r4, sp, #132	; 0x84
 8006160:	f44f 7101 	mov.w	r1, #516	; 0x204
 8006164:	f854 2b04 	ldr.w	r2, [r4], #4
 8006168:	9201      	str	r2, [sp, #4]
 800616a:	f8ad 101c 	strh.w	r1, [sp, #28]
 800616e:	9004      	str	r0, [sp, #16]
 8006170:	9008      	str	r0, [sp, #32]
 8006172:	f7fa f83f 	bl	80001f4 <strlen>
 8006176:	4b0c      	ldr	r3, [pc, #48]	; (80061a8 <siscanf+0x50>)
 8006178:	9005      	str	r0, [sp, #20]
 800617a:	9009      	str	r0, [sp, #36]	; 0x24
 800617c:	930d      	str	r3, [sp, #52]	; 0x34
 800617e:	480b      	ldr	r0, [pc, #44]	; (80061ac <siscanf+0x54>)
 8006180:	9a01      	ldr	r2, [sp, #4]
 8006182:	6800      	ldr	r0, [r0, #0]
 8006184:	9403      	str	r4, [sp, #12]
 8006186:	2300      	movs	r3, #0
 8006188:	9311      	str	r3, [sp, #68]	; 0x44
 800618a:	9316      	str	r3, [sp, #88]	; 0x58
 800618c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006190:	f8ad 301e 	strh.w	r3, [sp, #30]
 8006194:	a904      	add	r1, sp, #16
 8006196:	4623      	mov	r3, r4
 8006198:	f003 f8b8 	bl	800930c <__ssvfiscanf_r>
 800619c:	b01f      	add	sp, #124	; 0x7c
 800619e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80061a2:	b003      	add	sp, #12
 80061a4:	4770      	bx	lr
 80061a6:	bf00      	nop
 80061a8:	080061d3 	.word	0x080061d3
 80061ac:	20000014 	.word	0x20000014

080061b0 <__sread>:
 80061b0:	b510      	push	{r4, lr}
 80061b2:	460c      	mov	r4, r1
 80061b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80061b8:	f003 fb72 	bl	80098a0 <_read_r>
 80061bc:	2800      	cmp	r0, #0
 80061be:	bfab      	itete	ge
 80061c0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80061c2:	89a3      	ldrhlt	r3, [r4, #12]
 80061c4:	181b      	addge	r3, r3, r0
 80061c6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80061ca:	bfac      	ite	ge
 80061cc:	6563      	strge	r3, [r4, #84]	; 0x54
 80061ce:	81a3      	strhlt	r3, [r4, #12]
 80061d0:	bd10      	pop	{r4, pc}

080061d2 <__seofread>:
 80061d2:	2000      	movs	r0, #0
 80061d4:	4770      	bx	lr

080061d6 <__swrite>:
 80061d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80061da:	461f      	mov	r7, r3
 80061dc:	898b      	ldrh	r3, [r1, #12]
 80061de:	05db      	lsls	r3, r3, #23
 80061e0:	4605      	mov	r5, r0
 80061e2:	460c      	mov	r4, r1
 80061e4:	4616      	mov	r6, r2
 80061e6:	d505      	bpl.n	80061f4 <__swrite+0x1e>
 80061e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80061ec:	2302      	movs	r3, #2
 80061ee:	2200      	movs	r2, #0
 80061f0:	f002 f8e4 	bl	80083bc <_lseek_r>
 80061f4:	89a3      	ldrh	r3, [r4, #12]
 80061f6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80061fa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80061fe:	81a3      	strh	r3, [r4, #12]
 8006200:	4632      	mov	r2, r6
 8006202:	463b      	mov	r3, r7
 8006204:	4628      	mov	r0, r5
 8006206:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800620a:	f000 bec5 	b.w	8006f98 <_write_r>

0800620e <__sseek>:
 800620e:	b510      	push	{r4, lr}
 8006210:	460c      	mov	r4, r1
 8006212:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006216:	f002 f8d1 	bl	80083bc <_lseek_r>
 800621a:	1c43      	adds	r3, r0, #1
 800621c:	89a3      	ldrh	r3, [r4, #12]
 800621e:	bf15      	itete	ne
 8006220:	6560      	strne	r0, [r4, #84]	; 0x54
 8006222:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006226:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800622a:	81a3      	strheq	r3, [r4, #12]
 800622c:	bf18      	it	ne
 800622e:	81a3      	strhne	r3, [r4, #12]
 8006230:	bd10      	pop	{r4, pc}

08006232 <__sclose>:
 8006232:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006236:	f000 bec1 	b.w	8006fbc <_close_r>

0800623a <sulp>:
 800623a:	b570      	push	{r4, r5, r6, lr}
 800623c:	4604      	mov	r4, r0
 800623e:	460d      	mov	r5, r1
 8006240:	ec45 4b10 	vmov	d0, r4, r5
 8006244:	4616      	mov	r6, r2
 8006246:	f002 fc65 	bl	8008b14 <__ulp>
 800624a:	ec51 0b10 	vmov	r0, r1, d0
 800624e:	b17e      	cbz	r6, 8006270 <sulp+0x36>
 8006250:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8006254:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8006258:	2b00      	cmp	r3, #0
 800625a:	dd09      	ble.n	8006270 <sulp+0x36>
 800625c:	051b      	lsls	r3, r3, #20
 800625e:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8006262:	2400      	movs	r4, #0
 8006264:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8006268:	4622      	mov	r2, r4
 800626a:	462b      	mov	r3, r5
 800626c:	f7fa f9dc 	bl	8000628 <__aeabi_dmul>
 8006270:	bd70      	pop	{r4, r5, r6, pc}
 8006272:	0000      	movs	r0, r0
 8006274:	0000      	movs	r0, r0
	...

08006278 <_strtod_l>:
 8006278:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800627c:	ed2d 8b02 	vpush	{d8}
 8006280:	b09d      	sub	sp, #116	; 0x74
 8006282:	461f      	mov	r7, r3
 8006284:	2300      	movs	r3, #0
 8006286:	9318      	str	r3, [sp, #96]	; 0x60
 8006288:	4ba2      	ldr	r3, [pc, #648]	; (8006514 <_strtod_l+0x29c>)
 800628a:	9213      	str	r2, [sp, #76]	; 0x4c
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	9305      	str	r3, [sp, #20]
 8006290:	4604      	mov	r4, r0
 8006292:	4618      	mov	r0, r3
 8006294:	4688      	mov	r8, r1
 8006296:	f7f9 ffad 	bl	80001f4 <strlen>
 800629a:	f04f 0a00 	mov.w	sl, #0
 800629e:	4605      	mov	r5, r0
 80062a0:	f04f 0b00 	mov.w	fp, #0
 80062a4:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 80062a8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80062aa:	781a      	ldrb	r2, [r3, #0]
 80062ac:	2a2b      	cmp	r2, #43	; 0x2b
 80062ae:	d04e      	beq.n	800634e <_strtod_l+0xd6>
 80062b0:	d83b      	bhi.n	800632a <_strtod_l+0xb2>
 80062b2:	2a0d      	cmp	r2, #13
 80062b4:	d834      	bhi.n	8006320 <_strtod_l+0xa8>
 80062b6:	2a08      	cmp	r2, #8
 80062b8:	d834      	bhi.n	8006324 <_strtod_l+0xac>
 80062ba:	2a00      	cmp	r2, #0
 80062bc:	d03e      	beq.n	800633c <_strtod_l+0xc4>
 80062be:	2300      	movs	r3, #0
 80062c0:	930a      	str	r3, [sp, #40]	; 0x28
 80062c2:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 80062c4:	7833      	ldrb	r3, [r6, #0]
 80062c6:	2b30      	cmp	r3, #48	; 0x30
 80062c8:	f040 80b0 	bne.w	800642c <_strtod_l+0x1b4>
 80062cc:	7873      	ldrb	r3, [r6, #1]
 80062ce:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80062d2:	2b58      	cmp	r3, #88	; 0x58
 80062d4:	d168      	bne.n	80063a8 <_strtod_l+0x130>
 80062d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80062d8:	9301      	str	r3, [sp, #4]
 80062da:	ab18      	add	r3, sp, #96	; 0x60
 80062dc:	9702      	str	r7, [sp, #8]
 80062de:	9300      	str	r3, [sp, #0]
 80062e0:	4a8d      	ldr	r2, [pc, #564]	; (8006518 <_strtod_l+0x2a0>)
 80062e2:	ab19      	add	r3, sp, #100	; 0x64
 80062e4:	a917      	add	r1, sp, #92	; 0x5c
 80062e6:	4620      	mov	r0, r4
 80062e8:	f001 fd5c 	bl	8007da4 <__gethex>
 80062ec:	f010 0707 	ands.w	r7, r0, #7
 80062f0:	4605      	mov	r5, r0
 80062f2:	d005      	beq.n	8006300 <_strtod_l+0x88>
 80062f4:	2f06      	cmp	r7, #6
 80062f6:	d12c      	bne.n	8006352 <_strtod_l+0xda>
 80062f8:	3601      	adds	r6, #1
 80062fa:	2300      	movs	r3, #0
 80062fc:	9617      	str	r6, [sp, #92]	; 0x5c
 80062fe:	930a      	str	r3, [sp, #40]	; 0x28
 8006300:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006302:	2b00      	cmp	r3, #0
 8006304:	f040 8590 	bne.w	8006e28 <_strtod_l+0xbb0>
 8006308:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800630a:	b1eb      	cbz	r3, 8006348 <_strtod_l+0xd0>
 800630c:	4652      	mov	r2, sl
 800630e:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8006312:	ec43 2b10 	vmov	d0, r2, r3
 8006316:	b01d      	add	sp, #116	; 0x74
 8006318:	ecbd 8b02 	vpop	{d8}
 800631c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006320:	2a20      	cmp	r2, #32
 8006322:	d1cc      	bne.n	80062be <_strtod_l+0x46>
 8006324:	3301      	adds	r3, #1
 8006326:	9317      	str	r3, [sp, #92]	; 0x5c
 8006328:	e7be      	b.n	80062a8 <_strtod_l+0x30>
 800632a:	2a2d      	cmp	r2, #45	; 0x2d
 800632c:	d1c7      	bne.n	80062be <_strtod_l+0x46>
 800632e:	2201      	movs	r2, #1
 8006330:	920a      	str	r2, [sp, #40]	; 0x28
 8006332:	1c5a      	adds	r2, r3, #1
 8006334:	9217      	str	r2, [sp, #92]	; 0x5c
 8006336:	785b      	ldrb	r3, [r3, #1]
 8006338:	2b00      	cmp	r3, #0
 800633a:	d1c2      	bne.n	80062c2 <_strtod_l+0x4a>
 800633c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800633e:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8006342:	2b00      	cmp	r3, #0
 8006344:	f040 856e 	bne.w	8006e24 <_strtod_l+0xbac>
 8006348:	4652      	mov	r2, sl
 800634a:	465b      	mov	r3, fp
 800634c:	e7e1      	b.n	8006312 <_strtod_l+0x9a>
 800634e:	2200      	movs	r2, #0
 8006350:	e7ee      	b.n	8006330 <_strtod_l+0xb8>
 8006352:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8006354:	b13a      	cbz	r2, 8006366 <_strtod_l+0xee>
 8006356:	2135      	movs	r1, #53	; 0x35
 8006358:	a81a      	add	r0, sp, #104	; 0x68
 800635a:	f002 fce6 	bl	8008d2a <__copybits>
 800635e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8006360:	4620      	mov	r0, r4
 8006362:	f002 f8a5 	bl	80084b0 <_Bfree>
 8006366:	3f01      	subs	r7, #1
 8006368:	2f04      	cmp	r7, #4
 800636a:	d806      	bhi.n	800637a <_strtod_l+0x102>
 800636c:	e8df f007 	tbb	[pc, r7]
 8006370:	1714030a 	.word	0x1714030a
 8006374:	0a          	.byte	0x0a
 8006375:	00          	.byte	0x00
 8006376:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 800637a:	0728      	lsls	r0, r5, #28
 800637c:	d5c0      	bpl.n	8006300 <_strtod_l+0x88>
 800637e:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8006382:	e7bd      	b.n	8006300 <_strtod_l+0x88>
 8006384:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8006388:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800638a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800638e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8006392:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8006396:	e7f0      	b.n	800637a <_strtod_l+0x102>
 8006398:	f8df b180 	ldr.w	fp, [pc, #384]	; 800651c <_strtod_l+0x2a4>
 800639c:	e7ed      	b.n	800637a <_strtod_l+0x102>
 800639e:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 80063a2:	f04f 3aff 	mov.w	sl, #4294967295
 80063a6:	e7e8      	b.n	800637a <_strtod_l+0x102>
 80063a8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80063aa:	1c5a      	adds	r2, r3, #1
 80063ac:	9217      	str	r2, [sp, #92]	; 0x5c
 80063ae:	785b      	ldrb	r3, [r3, #1]
 80063b0:	2b30      	cmp	r3, #48	; 0x30
 80063b2:	d0f9      	beq.n	80063a8 <_strtod_l+0x130>
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d0a3      	beq.n	8006300 <_strtod_l+0x88>
 80063b8:	2301      	movs	r3, #1
 80063ba:	f04f 0900 	mov.w	r9, #0
 80063be:	9304      	str	r3, [sp, #16]
 80063c0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80063c2:	9308      	str	r3, [sp, #32]
 80063c4:	f8cd 901c 	str.w	r9, [sp, #28]
 80063c8:	464f      	mov	r7, r9
 80063ca:	220a      	movs	r2, #10
 80063cc:	9817      	ldr	r0, [sp, #92]	; 0x5c
 80063ce:	7806      	ldrb	r6, [r0, #0]
 80063d0:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 80063d4:	b2d9      	uxtb	r1, r3
 80063d6:	2909      	cmp	r1, #9
 80063d8:	d92a      	bls.n	8006430 <_strtod_l+0x1b8>
 80063da:	9905      	ldr	r1, [sp, #20]
 80063dc:	462a      	mov	r2, r5
 80063de:	f003 fac3 	bl	8009968 <strncmp>
 80063e2:	b398      	cbz	r0, 800644c <_strtod_l+0x1d4>
 80063e4:	2000      	movs	r0, #0
 80063e6:	4632      	mov	r2, r6
 80063e8:	463d      	mov	r5, r7
 80063ea:	9005      	str	r0, [sp, #20]
 80063ec:	4603      	mov	r3, r0
 80063ee:	2a65      	cmp	r2, #101	; 0x65
 80063f0:	d001      	beq.n	80063f6 <_strtod_l+0x17e>
 80063f2:	2a45      	cmp	r2, #69	; 0x45
 80063f4:	d118      	bne.n	8006428 <_strtod_l+0x1b0>
 80063f6:	b91d      	cbnz	r5, 8006400 <_strtod_l+0x188>
 80063f8:	9a04      	ldr	r2, [sp, #16]
 80063fa:	4302      	orrs	r2, r0
 80063fc:	d09e      	beq.n	800633c <_strtod_l+0xc4>
 80063fe:	2500      	movs	r5, #0
 8006400:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 8006404:	f108 0201 	add.w	r2, r8, #1
 8006408:	9217      	str	r2, [sp, #92]	; 0x5c
 800640a:	f898 2001 	ldrb.w	r2, [r8, #1]
 800640e:	2a2b      	cmp	r2, #43	; 0x2b
 8006410:	d075      	beq.n	80064fe <_strtod_l+0x286>
 8006412:	2a2d      	cmp	r2, #45	; 0x2d
 8006414:	d07b      	beq.n	800650e <_strtod_l+0x296>
 8006416:	f04f 0c00 	mov.w	ip, #0
 800641a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800641e:	2909      	cmp	r1, #9
 8006420:	f240 8082 	bls.w	8006528 <_strtod_l+0x2b0>
 8006424:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8006428:	2600      	movs	r6, #0
 800642a:	e09d      	b.n	8006568 <_strtod_l+0x2f0>
 800642c:	2300      	movs	r3, #0
 800642e:	e7c4      	b.n	80063ba <_strtod_l+0x142>
 8006430:	2f08      	cmp	r7, #8
 8006432:	bfd8      	it	le
 8006434:	9907      	ldrle	r1, [sp, #28]
 8006436:	f100 0001 	add.w	r0, r0, #1
 800643a:	bfda      	itte	le
 800643c:	fb02 3301 	mlale	r3, r2, r1, r3
 8006440:	9307      	strle	r3, [sp, #28]
 8006442:	fb02 3909 	mlagt	r9, r2, r9, r3
 8006446:	3701      	adds	r7, #1
 8006448:	9017      	str	r0, [sp, #92]	; 0x5c
 800644a:	e7bf      	b.n	80063cc <_strtod_l+0x154>
 800644c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800644e:	195a      	adds	r2, r3, r5
 8006450:	9217      	str	r2, [sp, #92]	; 0x5c
 8006452:	5d5a      	ldrb	r2, [r3, r5]
 8006454:	2f00      	cmp	r7, #0
 8006456:	d037      	beq.n	80064c8 <_strtod_l+0x250>
 8006458:	9005      	str	r0, [sp, #20]
 800645a:	463d      	mov	r5, r7
 800645c:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8006460:	2b09      	cmp	r3, #9
 8006462:	d912      	bls.n	800648a <_strtod_l+0x212>
 8006464:	2301      	movs	r3, #1
 8006466:	e7c2      	b.n	80063ee <_strtod_l+0x176>
 8006468:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800646a:	1c5a      	adds	r2, r3, #1
 800646c:	9217      	str	r2, [sp, #92]	; 0x5c
 800646e:	785a      	ldrb	r2, [r3, #1]
 8006470:	3001      	adds	r0, #1
 8006472:	2a30      	cmp	r2, #48	; 0x30
 8006474:	d0f8      	beq.n	8006468 <_strtod_l+0x1f0>
 8006476:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800647a:	2b08      	cmp	r3, #8
 800647c:	f200 84d9 	bhi.w	8006e32 <_strtod_l+0xbba>
 8006480:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006482:	9005      	str	r0, [sp, #20]
 8006484:	2000      	movs	r0, #0
 8006486:	9308      	str	r3, [sp, #32]
 8006488:	4605      	mov	r5, r0
 800648a:	3a30      	subs	r2, #48	; 0x30
 800648c:	f100 0301 	add.w	r3, r0, #1
 8006490:	d014      	beq.n	80064bc <_strtod_l+0x244>
 8006492:	9905      	ldr	r1, [sp, #20]
 8006494:	4419      	add	r1, r3
 8006496:	9105      	str	r1, [sp, #20]
 8006498:	462b      	mov	r3, r5
 800649a:	eb00 0e05 	add.w	lr, r0, r5
 800649e:	210a      	movs	r1, #10
 80064a0:	4573      	cmp	r3, lr
 80064a2:	d113      	bne.n	80064cc <_strtod_l+0x254>
 80064a4:	182b      	adds	r3, r5, r0
 80064a6:	2b08      	cmp	r3, #8
 80064a8:	f105 0501 	add.w	r5, r5, #1
 80064ac:	4405      	add	r5, r0
 80064ae:	dc1c      	bgt.n	80064ea <_strtod_l+0x272>
 80064b0:	9907      	ldr	r1, [sp, #28]
 80064b2:	230a      	movs	r3, #10
 80064b4:	fb03 2301 	mla	r3, r3, r1, r2
 80064b8:	9307      	str	r3, [sp, #28]
 80064ba:	2300      	movs	r3, #0
 80064bc:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80064be:	1c51      	adds	r1, r2, #1
 80064c0:	9117      	str	r1, [sp, #92]	; 0x5c
 80064c2:	7852      	ldrb	r2, [r2, #1]
 80064c4:	4618      	mov	r0, r3
 80064c6:	e7c9      	b.n	800645c <_strtod_l+0x1e4>
 80064c8:	4638      	mov	r0, r7
 80064ca:	e7d2      	b.n	8006472 <_strtod_l+0x1fa>
 80064cc:	2b08      	cmp	r3, #8
 80064ce:	dc04      	bgt.n	80064da <_strtod_l+0x262>
 80064d0:	9e07      	ldr	r6, [sp, #28]
 80064d2:	434e      	muls	r6, r1
 80064d4:	9607      	str	r6, [sp, #28]
 80064d6:	3301      	adds	r3, #1
 80064d8:	e7e2      	b.n	80064a0 <_strtod_l+0x228>
 80064da:	f103 0c01 	add.w	ip, r3, #1
 80064de:	f1bc 0f10 	cmp.w	ip, #16
 80064e2:	bfd8      	it	le
 80064e4:	fb01 f909 	mulle.w	r9, r1, r9
 80064e8:	e7f5      	b.n	80064d6 <_strtod_l+0x25e>
 80064ea:	2d10      	cmp	r5, #16
 80064ec:	bfdc      	itt	le
 80064ee:	230a      	movle	r3, #10
 80064f0:	fb03 2909 	mlale	r9, r3, r9, r2
 80064f4:	e7e1      	b.n	80064ba <_strtod_l+0x242>
 80064f6:	2300      	movs	r3, #0
 80064f8:	9305      	str	r3, [sp, #20]
 80064fa:	2301      	movs	r3, #1
 80064fc:	e77c      	b.n	80063f8 <_strtod_l+0x180>
 80064fe:	f04f 0c00 	mov.w	ip, #0
 8006502:	f108 0202 	add.w	r2, r8, #2
 8006506:	9217      	str	r2, [sp, #92]	; 0x5c
 8006508:	f898 2002 	ldrb.w	r2, [r8, #2]
 800650c:	e785      	b.n	800641a <_strtod_l+0x1a2>
 800650e:	f04f 0c01 	mov.w	ip, #1
 8006512:	e7f6      	b.n	8006502 <_strtod_l+0x28a>
 8006514:	0800c1c0 	.word	0x0800c1c0
 8006518:	0800bf78 	.word	0x0800bf78
 800651c:	7ff00000 	.word	0x7ff00000
 8006520:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8006522:	1c51      	adds	r1, r2, #1
 8006524:	9117      	str	r1, [sp, #92]	; 0x5c
 8006526:	7852      	ldrb	r2, [r2, #1]
 8006528:	2a30      	cmp	r2, #48	; 0x30
 800652a:	d0f9      	beq.n	8006520 <_strtod_l+0x2a8>
 800652c:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8006530:	2908      	cmp	r1, #8
 8006532:	f63f af79 	bhi.w	8006428 <_strtod_l+0x1b0>
 8006536:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800653a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800653c:	9206      	str	r2, [sp, #24]
 800653e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8006540:	1c51      	adds	r1, r2, #1
 8006542:	9117      	str	r1, [sp, #92]	; 0x5c
 8006544:	7852      	ldrb	r2, [r2, #1]
 8006546:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800654a:	2e09      	cmp	r6, #9
 800654c:	d937      	bls.n	80065be <_strtod_l+0x346>
 800654e:	9e06      	ldr	r6, [sp, #24]
 8006550:	1b89      	subs	r1, r1, r6
 8006552:	2908      	cmp	r1, #8
 8006554:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8006558:	dc02      	bgt.n	8006560 <_strtod_l+0x2e8>
 800655a:	4576      	cmp	r6, lr
 800655c:	bfa8      	it	ge
 800655e:	4676      	movge	r6, lr
 8006560:	f1bc 0f00 	cmp.w	ip, #0
 8006564:	d000      	beq.n	8006568 <_strtod_l+0x2f0>
 8006566:	4276      	negs	r6, r6
 8006568:	2d00      	cmp	r5, #0
 800656a:	d14d      	bne.n	8006608 <_strtod_l+0x390>
 800656c:	9904      	ldr	r1, [sp, #16]
 800656e:	4301      	orrs	r1, r0
 8006570:	f47f aec6 	bne.w	8006300 <_strtod_l+0x88>
 8006574:	2b00      	cmp	r3, #0
 8006576:	f47f aee1 	bne.w	800633c <_strtod_l+0xc4>
 800657a:	2a69      	cmp	r2, #105	; 0x69
 800657c:	d027      	beq.n	80065ce <_strtod_l+0x356>
 800657e:	dc24      	bgt.n	80065ca <_strtod_l+0x352>
 8006580:	2a49      	cmp	r2, #73	; 0x49
 8006582:	d024      	beq.n	80065ce <_strtod_l+0x356>
 8006584:	2a4e      	cmp	r2, #78	; 0x4e
 8006586:	f47f aed9 	bne.w	800633c <_strtod_l+0xc4>
 800658a:	499f      	ldr	r1, [pc, #636]	; (8006808 <_strtod_l+0x590>)
 800658c:	a817      	add	r0, sp, #92	; 0x5c
 800658e:	f001 fe61 	bl	8008254 <__match>
 8006592:	2800      	cmp	r0, #0
 8006594:	f43f aed2 	beq.w	800633c <_strtod_l+0xc4>
 8006598:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800659a:	781b      	ldrb	r3, [r3, #0]
 800659c:	2b28      	cmp	r3, #40	; 0x28
 800659e:	d12d      	bne.n	80065fc <_strtod_l+0x384>
 80065a0:	499a      	ldr	r1, [pc, #616]	; (800680c <_strtod_l+0x594>)
 80065a2:	aa1a      	add	r2, sp, #104	; 0x68
 80065a4:	a817      	add	r0, sp, #92	; 0x5c
 80065a6:	f001 fe69 	bl	800827c <__hexnan>
 80065aa:	2805      	cmp	r0, #5
 80065ac:	d126      	bne.n	80065fc <_strtod_l+0x384>
 80065ae:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80065b0:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 80065b4:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 80065b8:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 80065bc:	e6a0      	b.n	8006300 <_strtod_l+0x88>
 80065be:	210a      	movs	r1, #10
 80065c0:	fb01 2e0e 	mla	lr, r1, lr, r2
 80065c4:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 80065c8:	e7b9      	b.n	800653e <_strtod_l+0x2c6>
 80065ca:	2a6e      	cmp	r2, #110	; 0x6e
 80065cc:	e7db      	b.n	8006586 <_strtod_l+0x30e>
 80065ce:	4990      	ldr	r1, [pc, #576]	; (8006810 <_strtod_l+0x598>)
 80065d0:	a817      	add	r0, sp, #92	; 0x5c
 80065d2:	f001 fe3f 	bl	8008254 <__match>
 80065d6:	2800      	cmp	r0, #0
 80065d8:	f43f aeb0 	beq.w	800633c <_strtod_l+0xc4>
 80065dc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80065de:	498d      	ldr	r1, [pc, #564]	; (8006814 <_strtod_l+0x59c>)
 80065e0:	3b01      	subs	r3, #1
 80065e2:	a817      	add	r0, sp, #92	; 0x5c
 80065e4:	9317      	str	r3, [sp, #92]	; 0x5c
 80065e6:	f001 fe35 	bl	8008254 <__match>
 80065ea:	b910      	cbnz	r0, 80065f2 <_strtod_l+0x37a>
 80065ec:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80065ee:	3301      	adds	r3, #1
 80065f0:	9317      	str	r3, [sp, #92]	; 0x5c
 80065f2:	f8df b230 	ldr.w	fp, [pc, #560]	; 8006824 <_strtod_l+0x5ac>
 80065f6:	f04f 0a00 	mov.w	sl, #0
 80065fa:	e681      	b.n	8006300 <_strtod_l+0x88>
 80065fc:	4886      	ldr	r0, [pc, #536]	; (8006818 <_strtod_l+0x5a0>)
 80065fe:	f003 f963 	bl	80098c8 <nan>
 8006602:	ec5b ab10 	vmov	sl, fp, d0
 8006606:	e67b      	b.n	8006300 <_strtod_l+0x88>
 8006608:	9b05      	ldr	r3, [sp, #20]
 800660a:	9807      	ldr	r0, [sp, #28]
 800660c:	1af3      	subs	r3, r6, r3
 800660e:	2f00      	cmp	r7, #0
 8006610:	bf08      	it	eq
 8006612:	462f      	moveq	r7, r5
 8006614:	2d10      	cmp	r5, #16
 8006616:	9306      	str	r3, [sp, #24]
 8006618:	46a8      	mov	r8, r5
 800661a:	bfa8      	it	ge
 800661c:	f04f 0810 	movge.w	r8, #16
 8006620:	f7f9 ff88 	bl	8000534 <__aeabi_ui2d>
 8006624:	2d09      	cmp	r5, #9
 8006626:	4682      	mov	sl, r0
 8006628:	468b      	mov	fp, r1
 800662a:	dd13      	ble.n	8006654 <_strtod_l+0x3dc>
 800662c:	4b7b      	ldr	r3, [pc, #492]	; (800681c <_strtod_l+0x5a4>)
 800662e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8006632:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8006636:	f7f9 fff7 	bl	8000628 <__aeabi_dmul>
 800663a:	4682      	mov	sl, r0
 800663c:	4648      	mov	r0, r9
 800663e:	468b      	mov	fp, r1
 8006640:	f7f9 ff78 	bl	8000534 <__aeabi_ui2d>
 8006644:	4602      	mov	r2, r0
 8006646:	460b      	mov	r3, r1
 8006648:	4650      	mov	r0, sl
 800664a:	4659      	mov	r1, fp
 800664c:	f7f9 fe36 	bl	80002bc <__adddf3>
 8006650:	4682      	mov	sl, r0
 8006652:	468b      	mov	fp, r1
 8006654:	2d0f      	cmp	r5, #15
 8006656:	dc38      	bgt.n	80066ca <_strtod_l+0x452>
 8006658:	9b06      	ldr	r3, [sp, #24]
 800665a:	2b00      	cmp	r3, #0
 800665c:	f43f ae50 	beq.w	8006300 <_strtod_l+0x88>
 8006660:	dd24      	ble.n	80066ac <_strtod_l+0x434>
 8006662:	2b16      	cmp	r3, #22
 8006664:	dc0b      	bgt.n	800667e <_strtod_l+0x406>
 8006666:	496d      	ldr	r1, [pc, #436]	; (800681c <_strtod_l+0x5a4>)
 8006668:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800666c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006670:	4652      	mov	r2, sl
 8006672:	465b      	mov	r3, fp
 8006674:	f7f9 ffd8 	bl	8000628 <__aeabi_dmul>
 8006678:	4682      	mov	sl, r0
 800667a:	468b      	mov	fp, r1
 800667c:	e640      	b.n	8006300 <_strtod_l+0x88>
 800667e:	9a06      	ldr	r2, [sp, #24]
 8006680:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8006684:	4293      	cmp	r3, r2
 8006686:	db20      	blt.n	80066ca <_strtod_l+0x452>
 8006688:	4c64      	ldr	r4, [pc, #400]	; (800681c <_strtod_l+0x5a4>)
 800668a:	f1c5 050f 	rsb	r5, r5, #15
 800668e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8006692:	4652      	mov	r2, sl
 8006694:	465b      	mov	r3, fp
 8006696:	e9d1 0100 	ldrd	r0, r1, [r1]
 800669a:	f7f9 ffc5 	bl	8000628 <__aeabi_dmul>
 800669e:	9b06      	ldr	r3, [sp, #24]
 80066a0:	1b5d      	subs	r5, r3, r5
 80066a2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80066a6:	e9d4 2300 	ldrd	r2, r3, [r4]
 80066aa:	e7e3      	b.n	8006674 <_strtod_l+0x3fc>
 80066ac:	9b06      	ldr	r3, [sp, #24]
 80066ae:	3316      	adds	r3, #22
 80066b0:	db0b      	blt.n	80066ca <_strtod_l+0x452>
 80066b2:	9b05      	ldr	r3, [sp, #20]
 80066b4:	1b9e      	subs	r6, r3, r6
 80066b6:	4b59      	ldr	r3, [pc, #356]	; (800681c <_strtod_l+0x5a4>)
 80066b8:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 80066bc:	e9d6 2300 	ldrd	r2, r3, [r6]
 80066c0:	4650      	mov	r0, sl
 80066c2:	4659      	mov	r1, fp
 80066c4:	f7fa f8da 	bl	800087c <__aeabi_ddiv>
 80066c8:	e7d6      	b.n	8006678 <_strtod_l+0x400>
 80066ca:	9b06      	ldr	r3, [sp, #24]
 80066cc:	eba5 0808 	sub.w	r8, r5, r8
 80066d0:	4498      	add	r8, r3
 80066d2:	f1b8 0f00 	cmp.w	r8, #0
 80066d6:	dd74      	ble.n	80067c2 <_strtod_l+0x54a>
 80066d8:	f018 030f 	ands.w	r3, r8, #15
 80066dc:	d00a      	beq.n	80066f4 <_strtod_l+0x47c>
 80066de:	494f      	ldr	r1, [pc, #316]	; (800681c <_strtod_l+0x5a4>)
 80066e0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80066e4:	4652      	mov	r2, sl
 80066e6:	465b      	mov	r3, fp
 80066e8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80066ec:	f7f9 ff9c 	bl	8000628 <__aeabi_dmul>
 80066f0:	4682      	mov	sl, r0
 80066f2:	468b      	mov	fp, r1
 80066f4:	f038 080f 	bics.w	r8, r8, #15
 80066f8:	d04f      	beq.n	800679a <_strtod_l+0x522>
 80066fa:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 80066fe:	dd22      	ble.n	8006746 <_strtod_l+0x4ce>
 8006700:	2500      	movs	r5, #0
 8006702:	462e      	mov	r6, r5
 8006704:	9507      	str	r5, [sp, #28]
 8006706:	9505      	str	r5, [sp, #20]
 8006708:	2322      	movs	r3, #34	; 0x22
 800670a:	f8df b118 	ldr.w	fp, [pc, #280]	; 8006824 <_strtod_l+0x5ac>
 800670e:	6023      	str	r3, [r4, #0]
 8006710:	f04f 0a00 	mov.w	sl, #0
 8006714:	9b07      	ldr	r3, [sp, #28]
 8006716:	2b00      	cmp	r3, #0
 8006718:	f43f adf2 	beq.w	8006300 <_strtod_l+0x88>
 800671c:	9918      	ldr	r1, [sp, #96]	; 0x60
 800671e:	4620      	mov	r0, r4
 8006720:	f001 fec6 	bl	80084b0 <_Bfree>
 8006724:	9905      	ldr	r1, [sp, #20]
 8006726:	4620      	mov	r0, r4
 8006728:	f001 fec2 	bl	80084b0 <_Bfree>
 800672c:	4631      	mov	r1, r6
 800672e:	4620      	mov	r0, r4
 8006730:	f001 febe 	bl	80084b0 <_Bfree>
 8006734:	9907      	ldr	r1, [sp, #28]
 8006736:	4620      	mov	r0, r4
 8006738:	f001 feba 	bl	80084b0 <_Bfree>
 800673c:	4629      	mov	r1, r5
 800673e:	4620      	mov	r0, r4
 8006740:	f001 feb6 	bl	80084b0 <_Bfree>
 8006744:	e5dc      	b.n	8006300 <_strtod_l+0x88>
 8006746:	4b36      	ldr	r3, [pc, #216]	; (8006820 <_strtod_l+0x5a8>)
 8006748:	9304      	str	r3, [sp, #16]
 800674a:	2300      	movs	r3, #0
 800674c:	ea4f 1828 	mov.w	r8, r8, asr #4
 8006750:	4650      	mov	r0, sl
 8006752:	4659      	mov	r1, fp
 8006754:	4699      	mov	r9, r3
 8006756:	f1b8 0f01 	cmp.w	r8, #1
 800675a:	dc21      	bgt.n	80067a0 <_strtod_l+0x528>
 800675c:	b10b      	cbz	r3, 8006762 <_strtod_l+0x4ea>
 800675e:	4682      	mov	sl, r0
 8006760:	468b      	mov	fp, r1
 8006762:	4b2f      	ldr	r3, [pc, #188]	; (8006820 <_strtod_l+0x5a8>)
 8006764:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8006768:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800676c:	4652      	mov	r2, sl
 800676e:	465b      	mov	r3, fp
 8006770:	e9d9 0100 	ldrd	r0, r1, [r9]
 8006774:	f7f9 ff58 	bl	8000628 <__aeabi_dmul>
 8006778:	4b2a      	ldr	r3, [pc, #168]	; (8006824 <_strtod_l+0x5ac>)
 800677a:	460a      	mov	r2, r1
 800677c:	400b      	ands	r3, r1
 800677e:	492a      	ldr	r1, [pc, #168]	; (8006828 <_strtod_l+0x5b0>)
 8006780:	428b      	cmp	r3, r1
 8006782:	4682      	mov	sl, r0
 8006784:	d8bc      	bhi.n	8006700 <_strtod_l+0x488>
 8006786:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800678a:	428b      	cmp	r3, r1
 800678c:	bf86      	itte	hi
 800678e:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 800682c <_strtod_l+0x5b4>
 8006792:	f04f 3aff 	movhi.w	sl, #4294967295
 8006796:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800679a:	2300      	movs	r3, #0
 800679c:	9304      	str	r3, [sp, #16]
 800679e:	e084      	b.n	80068aa <_strtod_l+0x632>
 80067a0:	f018 0f01 	tst.w	r8, #1
 80067a4:	d005      	beq.n	80067b2 <_strtod_l+0x53a>
 80067a6:	9b04      	ldr	r3, [sp, #16]
 80067a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067ac:	f7f9 ff3c 	bl	8000628 <__aeabi_dmul>
 80067b0:	2301      	movs	r3, #1
 80067b2:	9a04      	ldr	r2, [sp, #16]
 80067b4:	3208      	adds	r2, #8
 80067b6:	f109 0901 	add.w	r9, r9, #1
 80067ba:	ea4f 0868 	mov.w	r8, r8, asr #1
 80067be:	9204      	str	r2, [sp, #16]
 80067c0:	e7c9      	b.n	8006756 <_strtod_l+0x4de>
 80067c2:	d0ea      	beq.n	800679a <_strtod_l+0x522>
 80067c4:	f1c8 0800 	rsb	r8, r8, #0
 80067c8:	f018 020f 	ands.w	r2, r8, #15
 80067cc:	d00a      	beq.n	80067e4 <_strtod_l+0x56c>
 80067ce:	4b13      	ldr	r3, [pc, #76]	; (800681c <_strtod_l+0x5a4>)
 80067d0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80067d4:	4650      	mov	r0, sl
 80067d6:	4659      	mov	r1, fp
 80067d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067dc:	f7fa f84e 	bl	800087c <__aeabi_ddiv>
 80067e0:	4682      	mov	sl, r0
 80067e2:	468b      	mov	fp, r1
 80067e4:	ea5f 1828 	movs.w	r8, r8, asr #4
 80067e8:	d0d7      	beq.n	800679a <_strtod_l+0x522>
 80067ea:	f1b8 0f1f 	cmp.w	r8, #31
 80067ee:	dd1f      	ble.n	8006830 <_strtod_l+0x5b8>
 80067f0:	2500      	movs	r5, #0
 80067f2:	462e      	mov	r6, r5
 80067f4:	9507      	str	r5, [sp, #28]
 80067f6:	9505      	str	r5, [sp, #20]
 80067f8:	2322      	movs	r3, #34	; 0x22
 80067fa:	f04f 0a00 	mov.w	sl, #0
 80067fe:	f04f 0b00 	mov.w	fp, #0
 8006802:	6023      	str	r3, [r4, #0]
 8006804:	e786      	b.n	8006714 <_strtod_l+0x49c>
 8006806:	bf00      	nop
 8006808:	0800bf4d 	.word	0x0800bf4d
 800680c:	0800bf8c 	.word	0x0800bf8c
 8006810:	0800bf45 	.word	0x0800bf45
 8006814:	0800c0cc 	.word	0x0800c0cc
 8006818:	0800c393 	.word	0x0800c393
 800681c:	0800c258 	.word	0x0800c258
 8006820:	0800c230 	.word	0x0800c230
 8006824:	7ff00000 	.word	0x7ff00000
 8006828:	7ca00000 	.word	0x7ca00000
 800682c:	7fefffff 	.word	0x7fefffff
 8006830:	f018 0310 	ands.w	r3, r8, #16
 8006834:	bf18      	it	ne
 8006836:	236a      	movne	r3, #106	; 0x6a
 8006838:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 8006be8 <_strtod_l+0x970>
 800683c:	9304      	str	r3, [sp, #16]
 800683e:	4650      	mov	r0, sl
 8006840:	4659      	mov	r1, fp
 8006842:	2300      	movs	r3, #0
 8006844:	f018 0f01 	tst.w	r8, #1
 8006848:	d004      	beq.n	8006854 <_strtod_l+0x5dc>
 800684a:	e9d9 2300 	ldrd	r2, r3, [r9]
 800684e:	f7f9 feeb 	bl	8000628 <__aeabi_dmul>
 8006852:	2301      	movs	r3, #1
 8006854:	ea5f 0868 	movs.w	r8, r8, asr #1
 8006858:	f109 0908 	add.w	r9, r9, #8
 800685c:	d1f2      	bne.n	8006844 <_strtod_l+0x5cc>
 800685e:	b10b      	cbz	r3, 8006864 <_strtod_l+0x5ec>
 8006860:	4682      	mov	sl, r0
 8006862:	468b      	mov	fp, r1
 8006864:	9b04      	ldr	r3, [sp, #16]
 8006866:	b1c3      	cbz	r3, 800689a <_strtod_l+0x622>
 8006868:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800686c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8006870:	2b00      	cmp	r3, #0
 8006872:	4659      	mov	r1, fp
 8006874:	dd11      	ble.n	800689a <_strtod_l+0x622>
 8006876:	2b1f      	cmp	r3, #31
 8006878:	f340 8124 	ble.w	8006ac4 <_strtod_l+0x84c>
 800687c:	2b34      	cmp	r3, #52	; 0x34
 800687e:	bfde      	ittt	le
 8006880:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8006884:	f04f 33ff 	movle.w	r3, #4294967295
 8006888:	fa03 f202 	lslle.w	r2, r3, r2
 800688c:	f04f 0a00 	mov.w	sl, #0
 8006890:	bfcc      	ite	gt
 8006892:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8006896:	ea02 0b01 	andle.w	fp, r2, r1
 800689a:	2200      	movs	r2, #0
 800689c:	2300      	movs	r3, #0
 800689e:	4650      	mov	r0, sl
 80068a0:	4659      	mov	r1, fp
 80068a2:	f7fa f929 	bl	8000af8 <__aeabi_dcmpeq>
 80068a6:	2800      	cmp	r0, #0
 80068a8:	d1a2      	bne.n	80067f0 <_strtod_l+0x578>
 80068aa:	9b07      	ldr	r3, [sp, #28]
 80068ac:	9300      	str	r3, [sp, #0]
 80068ae:	9908      	ldr	r1, [sp, #32]
 80068b0:	462b      	mov	r3, r5
 80068b2:	463a      	mov	r2, r7
 80068b4:	4620      	mov	r0, r4
 80068b6:	f001 fe63 	bl	8008580 <__s2b>
 80068ba:	9007      	str	r0, [sp, #28]
 80068bc:	2800      	cmp	r0, #0
 80068be:	f43f af1f 	beq.w	8006700 <_strtod_l+0x488>
 80068c2:	9b05      	ldr	r3, [sp, #20]
 80068c4:	1b9e      	subs	r6, r3, r6
 80068c6:	9b06      	ldr	r3, [sp, #24]
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	bfb4      	ite	lt
 80068cc:	4633      	movlt	r3, r6
 80068ce:	2300      	movge	r3, #0
 80068d0:	930c      	str	r3, [sp, #48]	; 0x30
 80068d2:	9b06      	ldr	r3, [sp, #24]
 80068d4:	2500      	movs	r5, #0
 80068d6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80068da:	9312      	str	r3, [sp, #72]	; 0x48
 80068dc:	462e      	mov	r6, r5
 80068de:	9b07      	ldr	r3, [sp, #28]
 80068e0:	4620      	mov	r0, r4
 80068e2:	6859      	ldr	r1, [r3, #4]
 80068e4:	f001 fda4 	bl	8008430 <_Balloc>
 80068e8:	9005      	str	r0, [sp, #20]
 80068ea:	2800      	cmp	r0, #0
 80068ec:	f43f af0c 	beq.w	8006708 <_strtod_l+0x490>
 80068f0:	9b07      	ldr	r3, [sp, #28]
 80068f2:	691a      	ldr	r2, [r3, #16]
 80068f4:	3202      	adds	r2, #2
 80068f6:	f103 010c 	add.w	r1, r3, #12
 80068fa:	0092      	lsls	r2, r2, #2
 80068fc:	300c      	adds	r0, #12
 80068fe:	f001 fd89 	bl	8008414 <memcpy>
 8006902:	ec4b ab10 	vmov	d0, sl, fp
 8006906:	aa1a      	add	r2, sp, #104	; 0x68
 8006908:	a919      	add	r1, sp, #100	; 0x64
 800690a:	4620      	mov	r0, r4
 800690c:	f002 f97e 	bl	8008c0c <__d2b>
 8006910:	ec4b ab18 	vmov	d8, sl, fp
 8006914:	9018      	str	r0, [sp, #96]	; 0x60
 8006916:	2800      	cmp	r0, #0
 8006918:	f43f aef6 	beq.w	8006708 <_strtod_l+0x490>
 800691c:	2101      	movs	r1, #1
 800691e:	4620      	mov	r0, r4
 8006920:	f001 fec8 	bl	80086b4 <__i2b>
 8006924:	4606      	mov	r6, r0
 8006926:	2800      	cmp	r0, #0
 8006928:	f43f aeee 	beq.w	8006708 <_strtod_l+0x490>
 800692c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800692e:	9904      	ldr	r1, [sp, #16]
 8006930:	2b00      	cmp	r3, #0
 8006932:	bfab      	itete	ge
 8006934:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 8006936:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8006938:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800693a:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 800693e:	bfac      	ite	ge
 8006940:	eb03 0902 	addge.w	r9, r3, r2
 8006944:	1ad7      	sublt	r7, r2, r3
 8006946:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8006948:	eba3 0801 	sub.w	r8, r3, r1
 800694c:	4490      	add	r8, r2
 800694e:	4ba1      	ldr	r3, [pc, #644]	; (8006bd4 <_strtod_l+0x95c>)
 8006950:	f108 38ff 	add.w	r8, r8, #4294967295
 8006954:	4598      	cmp	r8, r3
 8006956:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800695a:	f280 80c7 	bge.w	8006aec <_strtod_l+0x874>
 800695e:	eba3 0308 	sub.w	r3, r3, r8
 8006962:	2b1f      	cmp	r3, #31
 8006964:	eba2 0203 	sub.w	r2, r2, r3
 8006968:	f04f 0101 	mov.w	r1, #1
 800696c:	f300 80b1 	bgt.w	8006ad2 <_strtod_l+0x85a>
 8006970:	fa01 f303 	lsl.w	r3, r1, r3
 8006974:	930d      	str	r3, [sp, #52]	; 0x34
 8006976:	2300      	movs	r3, #0
 8006978:	9308      	str	r3, [sp, #32]
 800697a:	eb09 0802 	add.w	r8, r9, r2
 800697e:	9b04      	ldr	r3, [sp, #16]
 8006980:	45c1      	cmp	r9, r8
 8006982:	4417      	add	r7, r2
 8006984:	441f      	add	r7, r3
 8006986:	464b      	mov	r3, r9
 8006988:	bfa8      	it	ge
 800698a:	4643      	movge	r3, r8
 800698c:	42bb      	cmp	r3, r7
 800698e:	bfa8      	it	ge
 8006990:	463b      	movge	r3, r7
 8006992:	2b00      	cmp	r3, #0
 8006994:	bfc2      	ittt	gt
 8006996:	eba8 0803 	subgt.w	r8, r8, r3
 800699a:	1aff      	subgt	r7, r7, r3
 800699c:	eba9 0903 	subgt.w	r9, r9, r3
 80069a0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	dd17      	ble.n	80069d6 <_strtod_l+0x75e>
 80069a6:	4631      	mov	r1, r6
 80069a8:	461a      	mov	r2, r3
 80069aa:	4620      	mov	r0, r4
 80069ac:	f001 ff42 	bl	8008834 <__pow5mult>
 80069b0:	4606      	mov	r6, r0
 80069b2:	2800      	cmp	r0, #0
 80069b4:	f43f aea8 	beq.w	8006708 <_strtod_l+0x490>
 80069b8:	4601      	mov	r1, r0
 80069ba:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80069bc:	4620      	mov	r0, r4
 80069be:	f001 fe8f 	bl	80086e0 <__multiply>
 80069c2:	900b      	str	r0, [sp, #44]	; 0x2c
 80069c4:	2800      	cmp	r0, #0
 80069c6:	f43f ae9f 	beq.w	8006708 <_strtod_l+0x490>
 80069ca:	9918      	ldr	r1, [sp, #96]	; 0x60
 80069cc:	4620      	mov	r0, r4
 80069ce:	f001 fd6f 	bl	80084b0 <_Bfree>
 80069d2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80069d4:	9318      	str	r3, [sp, #96]	; 0x60
 80069d6:	f1b8 0f00 	cmp.w	r8, #0
 80069da:	f300 808c 	bgt.w	8006af6 <_strtod_l+0x87e>
 80069de:	9b06      	ldr	r3, [sp, #24]
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	dd08      	ble.n	80069f6 <_strtod_l+0x77e>
 80069e4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80069e6:	9905      	ldr	r1, [sp, #20]
 80069e8:	4620      	mov	r0, r4
 80069ea:	f001 ff23 	bl	8008834 <__pow5mult>
 80069ee:	9005      	str	r0, [sp, #20]
 80069f0:	2800      	cmp	r0, #0
 80069f2:	f43f ae89 	beq.w	8006708 <_strtod_l+0x490>
 80069f6:	2f00      	cmp	r7, #0
 80069f8:	dd08      	ble.n	8006a0c <_strtod_l+0x794>
 80069fa:	9905      	ldr	r1, [sp, #20]
 80069fc:	463a      	mov	r2, r7
 80069fe:	4620      	mov	r0, r4
 8006a00:	f001 ff72 	bl	80088e8 <__lshift>
 8006a04:	9005      	str	r0, [sp, #20]
 8006a06:	2800      	cmp	r0, #0
 8006a08:	f43f ae7e 	beq.w	8006708 <_strtod_l+0x490>
 8006a0c:	f1b9 0f00 	cmp.w	r9, #0
 8006a10:	dd08      	ble.n	8006a24 <_strtod_l+0x7ac>
 8006a12:	4631      	mov	r1, r6
 8006a14:	464a      	mov	r2, r9
 8006a16:	4620      	mov	r0, r4
 8006a18:	f001 ff66 	bl	80088e8 <__lshift>
 8006a1c:	4606      	mov	r6, r0
 8006a1e:	2800      	cmp	r0, #0
 8006a20:	f43f ae72 	beq.w	8006708 <_strtod_l+0x490>
 8006a24:	9a05      	ldr	r2, [sp, #20]
 8006a26:	9918      	ldr	r1, [sp, #96]	; 0x60
 8006a28:	4620      	mov	r0, r4
 8006a2a:	f001 ffe9 	bl	8008a00 <__mdiff>
 8006a2e:	4605      	mov	r5, r0
 8006a30:	2800      	cmp	r0, #0
 8006a32:	f43f ae69 	beq.w	8006708 <_strtod_l+0x490>
 8006a36:	68c3      	ldr	r3, [r0, #12]
 8006a38:	930b      	str	r3, [sp, #44]	; 0x2c
 8006a3a:	2300      	movs	r3, #0
 8006a3c:	60c3      	str	r3, [r0, #12]
 8006a3e:	4631      	mov	r1, r6
 8006a40:	f001 ffc2 	bl	80089c8 <__mcmp>
 8006a44:	2800      	cmp	r0, #0
 8006a46:	da60      	bge.n	8006b0a <_strtod_l+0x892>
 8006a48:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006a4a:	ea53 030a 	orrs.w	r3, r3, sl
 8006a4e:	f040 8082 	bne.w	8006b56 <_strtod_l+0x8de>
 8006a52:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d17d      	bne.n	8006b56 <_strtod_l+0x8de>
 8006a5a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8006a5e:	0d1b      	lsrs	r3, r3, #20
 8006a60:	051b      	lsls	r3, r3, #20
 8006a62:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8006a66:	d976      	bls.n	8006b56 <_strtod_l+0x8de>
 8006a68:	696b      	ldr	r3, [r5, #20]
 8006a6a:	b913      	cbnz	r3, 8006a72 <_strtod_l+0x7fa>
 8006a6c:	692b      	ldr	r3, [r5, #16]
 8006a6e:	2b01      	cmp	r3, #1
 8006a70:	dd71      	ble.n	8006b56 <_strtod_l+0x8de>
 8006a72:	4629      	mov	r1, r5
 8006a74:	2201      	movs	r2, #1
 8006a76:	4620      	mov	r0, r4
 8006a78:	f001 ff36 	bl	80088e8 <__lshift>
 8006a7c:	4631      	mov	r1, r6
 8006a7e:	4605      	mov	r5, r0
 8006a80:	f001 ffa2 	bl	80089c8 <__mcmp>
 8006a84:	2800      	cmp	r0, #0
 8006a86:	dd66      	ble.n	8006b56 <_strtod_l+0x8de>
 8006a88:	9904      	ldr	r1, [sp, #16]
 8006a8a:	4a53      	ldr	r2, [pc, #332]	; (8006bd8 <_strtod_l+0x960>)
 8006a8c:	465b      	mov	r3, fp
 8006a8e:	2900      	cmp	r1, #0
 8006a90:	f000 8081 	beq.w	8006b96 <_strtod_l+0x91e>
 8006a94:	ea02 010b 	and.w	r1, r2, fp
 8006a98:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8006a9c:	dc7b      	bgt.n	8006b96 <_strtod_l+0x91e>
 8006a9e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8006aa2:	f77f aea9 	ble.w	80067f8 <_strtod_l+0x580>
 8006aa6:	4b4d      	ldr	r3, [pc, #308]	; (8006bdc <_strtod_l+0x964>)
 8006aa8:	4650      	mov	r0, sl
 8006aaa:	4659      	mov	r1, fp
 8006aac:	2200      	movs	r2, #0
 8006aae:	f7f9 fdbb 	bl	8000628 <__aeabi_dmul>
 8006ab2:	460b      	mov	r3, r1
 8006ab4:	4303      	orrs	r3, r0
 8006ab6:	bf08      	it	eq
 8006ab8:	2322      	moveq	r3, #34	; 0x22
 8006aba:	4682      	mov	sl, r0
 8006abc:	468b      	mov	fp, r1
 8006abe:	bf08      	it	eq
 8006ac0:	6023      	streq	r3, [r4, #0]
 8006ac2:	e62b      	b.n	800671c <_strtod_l+0x4a4>
 8006ac4:	f04f 32ff 	mov.w	r2, #4294967295
 8006ac8:	fa02 f303 	lsl.w	r3, r2, r3
 8006acc:	ea03 0a0a 	and.w	sl, r3, sl
 8006ad0:	e6e3      	b.n	800689a <_strtod_l+0x622>
 8006ad2:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8006ad6:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8006ada:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8006ade:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8006ae2:	fa01 f308 	lsl.w	r3, r1, r8
 8006ae6:	9308      	str	r3, [sp, #32]
 8006ae8:	910d      	str	r1, [sp, #52]	; 0x34
 8006aea:	e746      	b.n	800697a <_strtod_l+0x702>
 8006aec:	2300      	movs	r3, #0
 8006aee:	9308      	str	r3, [sp, #32]
 8006af0:	2301      	movs	r3, #1
 8006af2:	930d      	str	r3, [sp, #52]	; 0x34
 8006af4:	e741      	b.n	800697a <_strtod_l+0x702>
 8006af6:	9918      	ldr	r1, [sp, #96]	; 0x60
 8006af8:	4642      	mov	r2, r8
 8006afa:	4620      	mov	r0, r4
 8006afc:	f001 fef4 	bl	80088e8 <__lshift>
 8006b00:	9018      	str	r0, [sp, #96]	; 0x60
 8006b02:	2800      	cmp	r0, #0
 8006b04:	f47f af6b 	bne.w	80069de <_strtod_l+0x766>
 8006b08:	e5fe      	b.n	8006708 <_strtod_l+0x490>
 8006b0a:	465f      	mov	r7, fp
 8006b0c:	d16e      	bne.n	8006bec <_strtod_l+0x974>
 8006b0e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006b10:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006b14:	b342      	cbz	r2, 8006b68 <_strtod_l+0x8f0>
 8006b16:	4a32      	ldr	r2, [pc, #200]	; (8006be0 <_strtod_l+0x968>)
 8006b18:	4293      	cmp	r3, r2
 8006b1a:	d128      	bne.n	8006b6e <_strtod_l+0x8f6>
 8006b1c:	9b04      	ldr	r3, [sp, #16]
 8006b1e:	4651      	mov	r1, sl
 8006b20:	b1eb      	cbz	r3, 8006b5e <_strtod_l+0x8e6>
 8006b22:	4b2d      	ldr	r3, [pc, #180]	; (8006bd8 <_strtod_l+0x960>)
 8006b24:	403b      	ands	r3, r7
 8006b26:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8006b2a:	f04f 32ff 	mov.w	r2, #4294967295
 8006b2e:	d819      	bhi.n	8006b64 <_strtod_l+0x8ec>
 8006b30:	0d1b      	lsrs	r3, r3, #20
 8006b32:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8006b36:	fa02 f303 	lsl.w	r3, r2, r3
 8006b3a:	4299      	cmp	r1, r3
 8006b3c:	d117      	bne.n	8006b6e <_strtod_l+0x8f6>
 8006b3e:	4b29      	ldr	r3, [pc, #164]	; (8006be4 <_strtod_l+0x96c>)
 8006b40:	429f      	cmp	r7, r3
 8006b42:	d102      	bne.n	8006b4a <_strtod_l+0x8d2>
 8006b44:	3101      	adds	r1, #1
 8006b46:	f43f addf 	beq.w	8006708 <_strtod_l+0x490>
 8006b4a:	4b23      	ldr	r3, [pc, #140]	; (8006bd8 <_strtod_l+0x960>)
 8006b4c:	403b      	ands	r3, r7
 8006b4e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8006b52:	f04f 0a00 	mov.w	sl, #0
 8006b56:	9b04      	ldr	r3, [sp, #16]
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d1a4      	bne.n	8006aa6 <_strtod_l+0x82e>
 8006b5c:	e5de      	b.n	800671c <_strtod_l+0x4a4>
 8006b5e:	f04f 33ff 	mov.w	r3, #4294967295
 8006b62:	e7ea      	b.n	8006b3a <_strtod_l+0x8c2>
 8006b64:	4613      	mov	r3, r2
 8006b66:	e7e8      	b.n	8006b3a <_strtod_l+0x8c2>
 8006b68:	ea53 030a 	orrs.w	r3, r3, sl
 8006b6c:	d08c      	beq.n	8006a88 <_strtod_l+0x810>
 8006b6e:	9b08      	ldr	r3, [sp, #32]
 8006b70:	b1db      	cbz	r3, 8006baa <_strtod_l+0x932>
 8006b72:	423b      	tst	r3, r7
 8006b74:	d0ef      	beq.n	8006b56 <_strtod_l+0x8de>
 8006b76:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006b78:	9a04      	ldr	r2, [sp, #16]
 8006b7a:	4650      	mov	r0, sl
 8006b7c:	4659      	mov	r1, fp
 8006b7e:	b1c3      	cbz	r3, 8006bb2 <_strtod_l+0x93a>
 8006b80:	f7ff fb5b 	bl	800623a <sulp>
 8006b84:	4602      	mov	r2, r0
 8006b86:	460b      	mov	r3, r1
 8006b88:	ec51 0b18 	vmov	r0, r1, d8
 8006b8c:	f7f9 fb96 	bl	80002bc <__adddf3>
 8006b90:	4682      	mov	sl, r0
 8006b92:	468b      	mov	fp, r1
 8006b94:	e7df      	b.n	8006b56 <_strtod_l+0x8de>
 8006b96:	4013      	ands	r3, r2
 8006b98:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8006b9c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8006ba0:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8006ba4:	f04f 3aff 	mov.w	sl, #4294967295
 8006ba8:	e7d5      	b.n	8006b56 <_strtod_l+0x8de>
 8006baa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006bac:	ea13 0f0a 	tst.w	r3, sl
 8006bb0:	e7e0      	b.n	8006b74 <_strtod_l+0x8fc>
 8006bb2:	f7ff fb42 	bl	800623a <sulp>
 8006bb6:	4602      	mov	r2, r0
 8006bb8:	460b      	mov	r3, r1
 8006bba:	ec51 0b18 	vmov	r0, r1, d8
 8006bbe:	f7f9 fb7b 	bl	80002b8 <__aeabi_dsub>
 8006bc2:	2200      	movs	r2, #0
 8006bc4:	2300      	movs	r3, #0
 8006bc6:	4682      	mov	sl, r0
 8006bc8:	468b      	mov	fp, r1
 8006bca:	f7f9 ff95 	bl	8000af8 <__aeabi_dcmpeq>
 8006bce:	2800      	cmp	r0, #0
 8006bd0:	d0c1      	beq.n	8006b56 <_strtod_l+0x8de>
 8006bd2:	e611      	b.n	80067f8 <_strtod_l+0x580>
 8006bd4:	fffffc02 	.word	0xfffffc02
 8006bd8:	7ff00000 	.word	0x7ff00000
 8006bdc:	39500000 	.word	0x39500000
 8006be0:	000fffff 	.word	0x000fffff
 8006be4:	7fefffff 	.word	0x7fefffff
 8006be8:	0800bfa0 	.word	0x0800bfa0
 8006bec:	4631      	mov	r1, r6
 8006bee:	4628      	mov	r0, r5
 8006bf0:	f002 f868 	bl	8008cc4 <__ratio>
 8006bf4:	ec59 8b10 	vmov	r8, r9, d0
 8006bf8:	ee10 0a10 	vmov	r0, s0
 8006bfc:	2200      	movs	r2, #0
 8006bfe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006c02:	4649      	mov	r1, r9
 8006c04:	f7f9 ff8c 	bl	8000b20 <__aeabi_dcmple>
 8006c08:	2800      	cmp	r0, #0
 8006c0a:	d07a      	beq.n	8006d02 <_strtod_l+0xa8a>
 8006c0c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d04a      	beq.n	8006ca8 <_strtod_l+0xa30>
 8006c12:	4b95      	ldr	r3, [pc, #596]	; (8006e68 <_strtod_l+0xbf0>)
 8006c14:	2200      	movs	r2, #0
 8006c16:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8006c1a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8006e68 <_strtod_l+0xbf0>
 8006c1e:	f04f 0800 	mov.w	r8, #0
 8006c22:	4b92      	ldr	r3, [pc, #584]	; (8006e6c <_strtod_l+0xbf4>)
 8006c24:	403b      	ands	r3, r7
 8006c26:	930d      	str	r3, [sp, #52]	; 0x34
 8006c28:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006c2a:	4b91      	ldr	r3, [pc, #580]	; (8006e70 <_strtod_l+0xbf8>)
 8006c2c:	429a      	cmp	r2, r3
 8006c2e:	f040 80b0 	bne.w	8006d92 <_strtod_l+0xb1a>
 8006c32:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8006c36:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8006c3a:	ec4b ab10 	vmov	d0, sl, fp
 8006c3e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8006c42:	f001 ff67 	bl	8008b14 <__ulp>
 8006c46:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8006c4a:	ec53 2b10 	vmov	r2, r3, d0
 8006c4e:	f7f9 fceb 	bl	8000628 <__aeabi_dmul>
 8006c52:	4652      	mov	r2, sl
 8006c54:	465b      	mov	r3, fp
 8006c56:	f7f9 fb31 	bl	80002bc <__adddf3>
 8006c5a:	460b      	mov	r3, r1
 8006c5c:	4983      	ldr	r1, [pc, #524]	; (8006e6c <_strtod_l+0xbf4>)
 8006c5e:	4a85      	ldr	r2, [pc, #532]	; (8006e74 <_strtod_l+0xbfc>)
 8006c60:	4019      	ands	r1, r3
 8006c62:	4291      	cmp	r1, r2
 8006c64:	4682      	mov	sl, r0
 8006c66:	d960      	bls.n	8006d2a <_strtod_l+0xab2>
 8006c68:	ee18 3a90 	vmov	r3, s17
 8006c6c:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8006c70:	4293      	cmp	r3, r2
 8006c72:	d104      	bne.n	8006c7e <_strtod_l+0xa06>
 8006c74:	ee18 3a10 	vmov	r3, s16
 8006c78:	3301      	adds	r3, #1
 8006c7a:	f43f ad45 	beq.w	8006708 <_strtod_l+0x490>
 8006c7e:	f8df b200 	ldr.w	fp, [pc, #512]	; 8006e80 <_strtod_l+0xc08>
 8006c82:	f04f 3aff 	mov.w	sl, #4294967295
 8006c86:	9918      	ldr	r1, [sp, #96]	; 0x60
 8006c88:	4620      	mov	r0, r4
 8006c8a:	f001 fc11 	bl	80084b0 <_Bfree>
 8006c8e:	9905      	ldr	r1, [sp, #20]
 8006c90:	4620      	mov	r0, r4
 8006c92:	f001 fc0d 	bl	80084b0 <_Bfree>
 8006c96:	4631      	mov	r1, r6
 8006c98:	4620      	mov	r0, r4
 8006c9a:	f001 fc09 	bl	80084b0 <_Bfree>
 8006c9e:	4629      	mov	r1, r5
 8006ca0:	4620      	mov	r0, r4
 8006ca2:	f001 fc05 	bl	80084b0 <_Bfree>
 8006ca6:	e61a      	b.n	80068de <_strtod_l+0x666>
 8006ca8:	f1ba 0f00 	cmp.w	sl, #0
 8006cac:	d11b      	bne.n	8006ce6 <_strtod_l+0xa6e>
 8006cae:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006cb2:	b9f3      	cbnz	r3, 8006cf2 <_strtod_l+0xa7a>
 8006cb4:	4b6c      	ldr	r3, [pc, #432]	; (8006e68 <_strtod_l+0xbf0>)
 8006cb6:	2200      	movs	r2, #0
 8006cb8:	4640      	mov	r0, r8
 8006cba:	4649      	mov	r1, r9
 8006cbc:	f7f9 ff26 	bl	8000b0c <__aeabi_dcmplt>
 8006cc0:	b9d0      	cbnz	r0, 8006cf8 <_strtod_l+0xa80>
 8006cc2:	4640      	mov	r0, r8
 8006cc4:	4649      	mov	r1, r9
 8006cc6:	4b6c      	ldr	r3, [pc, #432]	; (8006e78 <_strtod_l+0xc00>)
 8006cc8:	2200      	movs	r2, #0
 8006cca:	f7f9 fcad 	bl	8000628 <__aeabi_dmul>
 8006cce:	4680      	mov	r8, r0
 8006cd0:	4689      	mov	r9, r1
 8006cd2:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8006cd6:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 8006cda:	9315      	str	r3, [sp, #84]	; 0x54
 8006cdc:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8006ce0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8006ce4:	e79d      	b.n	8006c22 <_strtod_l+0x9aa>
 8006ce6:	f1ba 0f01 	cmp.w	sl, #1
 8006cea:	d102      	bne.n	8006cf2 <_strtod_l+0xa7a>
 8006cec:	2f00      	cmp	r7, #0
 8006cee:	f43f ad83 	beq.w	80067f8 <_strtod_l+0x580>
 8006cf2:	4b62      	ldr	r3, [pc, #392]	; (8006e7c <_strtod_l+0xc04>)
 8006cf4:	2200      	movs	r2, #0
 8006cf6:	e78e      	b.n	8006c16 <_strtod_l+0x99e>
 8006cf8:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8006e78 <_strtod_l+0xc00>
 8006cfc:	f04f 0800 	mov.w	r8, #0
 8006d00:	e7e7      	b.n	8006cd2 <_strtod_l+0xa5a>
 8006d02:	4b5d      	ldr	r3, [pc, #372]	; (8006e78 <_strtod_l+0xc00>)
 8006d04:	4640      	mov	r0, r8
 8006d06:	4649      	mov	r1, r9
 8006d08:	2200      	movs	r2, #0
 8006d0a:	f7f9 fc8d 	bl	8000628 <__aeabi_dmul>
 8006d0e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006d10:	4680      	mov	r8, r0
 8006d12:	4689      	mov	r9, r1
 8006d14:	b933      	cbnz	r3, 8006d24 <_strtod_l+0xaac>
 8006d16:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006d1a:	900e      	str	r0, [sp, #56]	; 0x38
 8006d1c:	930f      	str	r3, [sp, #60]	; 0x3c
 8006d1e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8006d22:	e7dd      	b.n	8006ce0 <_strtod_l+0xa68>
 8006d24:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8006d28:	e7f9      	b.n	8006d1e <_strtod_l+0xaa6>
 8006d2a:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8006d2e:	9b04      	ldr	r3, [sp, #16]
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d1a8      	bne.n	8006c86 <_strtod_l+0xa0e>
 8006d34:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8006d38:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006d3a:	0d1b      	lsrs	r3, r3, #20
 8006d3c:	051b      	lsls	r3, r3, #20
 8006d3e:	429a      	cmp	r2, r3
 8006d40:	d1a1      	bne.n	8006c86 <_strtod_l+0xa0e>
 8006d42:	4640      	mov	r0, r8
 8006d44:	4649      	mov	r1, r9
 8006d46:	f7fa f807 	bl	8000d58 <__aeabi_d2lz>
 8006d4a:	f7f9 fc3f 	bl	80005cc <__aeabi_l2d>
 8006d4e:	4602      	mov	r2, r0
 8006d50:	460b      	mov	r3, r1
 8006d52:	4640      	mov	r0, r8
 8006d54:	4649      	mov	r1, r9
 8006d56:	f7f9 faaf 	bl	80002b8 <__aeabi_dsub>
 8006d5a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006d5c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006d60:	ea43 030a 	orr.w	r3, r3, sl
 8006d64:	4313      	orrs	r3, r2
 8006d66:	4680      	mov	r8, r0
 8006d68:	4689      	mov	r9, r1
 8006d6a:	d055      	beq.n	8006e18 <_strtod_l+0xba0>
 8006d6c:	a336      	add	r3, pc, #216	; (adr r3, 8006e48 <_strtod_l+0xbd0>)
 8006d6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d72:	f7f9 fecb 	bl	8000b0c <__aeabi_dcmplt>
 8006d76:	2800      	cmp	r0, #0
 8006d78:	f47f acd0 	bne.w	800671c <_strtod_l+0x4a4>
 8006d7c:	a334      	add	r3, pc, #208	; (adr r3, 8006e50 <_strtod_l+0xbd8>)
 8006d7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d82:	4640      	mov	r0, r8
 8006d84:	4649      	mov	r1, r9
 8006d86:	f7f9 fedf 	bl	8000b48 <__aeabi_dcmpgt>
 8006d8a:	2800      	cmp	r0, #0
 8006d8c:	f43f af7b 	beq.w	8006c86 <_strtod_l+0xa0e>
 8006d90:	e4c4      	b.n	800671c <_strtod_l+0x4a4>
 8006d92:	9b04      	ldr	r3, [sp, #16]
 8006d94:	b333      	cbz	r3, 8006de4 <_strtod_l+0xb6c>
 8006d96:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006d98:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8006d9c:	d822      	bhi.n	8006de4 <_strtod_l+0xb6c>
 8006d9e:	a32e      	add	r3, pc, #184	; (adr r3, 8006e58 <_strtod_l+0xbe0>)
 8006da0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006da4:	4640      	mov	r0, r8
 8006da6:	4649      	mov	r1, r9
 8006da8:	f7f9 feba 	bl	8000b20 <__aeabi_dcmple>
 8006dac:	b1a0      	cbz	r0, 8006dd8 <_strtod_l+0xb60>
 8006dae:	4649      	mov	r1, r9
 8006db0:	4640      	mov	r0, r8
 8006db2:	f7f9 ff11 	bl	8000bd8 <__aeabi_d2uiz>
 8006db6:	2801      	cmp	r0, #1
 8006db8:	bf38      	it	cc
 8006dba:	2001      	movcc	r0, #1
 8006dbc:	f7f9 fbba 	bl	8000534 <__aeabi_ui2d>
 8006dc0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006dc2:	4680      	mov	r8, r0
 8006dc4:	4689      	mov	r9, r1
 8006dc6:	bb23      	cbnz	r3, 8006e12 <_strtod_l+0xb9a>
 8006dc8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006dcc:	9010      	str	r0, [sp, #64]	; 0x40
 8006dce:	9311      	str	r3, [sp, #68]	; 0x44
 8006dd0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006dd4:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8006dd8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006dda:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006ddc:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8006de0:	1a9b      	subs	r3, r3, r2
 8006de2:	9309      	str	r3, [sp, #36]	; 0x24
 8006de4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8006de8:	eeb0 0a48 	vmov.f32	s0, s16
 8006dec:	eef0 0a68 	vmov.f32	s1, s17
 8006df0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8006df4:	f001 fe8e 	bl	8008b14 <__ulp>
 8006df8:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8006dfc:	ec53 2b10 	vmov	r2, r3, d0
 8006e00:	f7f9 fc12 	bl	8000628 <__aeabi_dmul>
 8006e04:	ec53 2b18 	vmov	r2, r3, d8
 8006e08:	f7f9 fa58 	bl	80002bc <__adddf3>
 8006e0c:	4682      	mov	sl, r0
 8006e0e:	468b      	mov	fp, r1
 8006e10:	e78d      	b.n	8006d2e <_strtod_l+0xab6>
 8006e12:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 8006e16:	e7db      	b.n	8006dd0 <_strtod_l+0xb58>
 8006e18:	a311      	add	r3, pc, #68	; (adr r3, 8006e60 <_strtod_l+0xbe8>)
 8006e1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e1e:	f7f9 fe75 	bl	8000b0c <__aeabi_dcmplt>
 8006e22:	e7b2      	b.n	8006d8a <_strtod_l+0xb12>
 8006e24:	2300      	movs	r3, #0
 8006e26:	930a      	str	r3, [sp, #40]	; 0x28
 8006e28:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8006e2a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006e2c:	6013      	str	r3, [r2, #0]
 8006e2e:	f7ff ba6b 	b.w	8006308 <_strtod_l+0x90>
 8006e32:	2a65      	cmp	r2, #101	; 0x65
 8006e34:	f43f ab5f 	beq.w	80064f6 <_strtod_l+0x27e>
 8006e38:	2a45      	cmp	r2, #69	; 0x45
 8006e3a:	f43f ab5c 	beq.w	80064f6 <_strtod_l+0x27e>
 8006e3e:	2301      	movs	r3, #1
 8006e40:	f7ff bb94 	b.w	800656c <_strtod_l+0x2f4>
 8006e44:	f3af 8000 	nop.w
 8006e48:	94a03595 	.word	0x94a03595
 8006e4c:	3fdfffff 	.word	0x3fdfffff
 8006e50:	35afe535 	.word	0x35afe535
 8006e54:	3fe00000 	.word	0x3fe00000
 8006e58:	ffc00000 	.word	0xffc00000
 8006e5c:	41dfffff 	.word	0x41dfffff
 8006e60:	94a03595 	.word	0x94a03595
 8006e64:	3fcfffff 	.word	0x3fcfffff
 8006e68:	3ff00000 	.word	0x3ff00000
 8006e6c:	7ff00000 	.word	0x7ff00000
 8006e70:	7fe00000 	.word	0x7fe00000
 8006e74:	7c9fffff 	.word	0x7c9fffff
 8006e78:	3fe00000 	.word	0x3fe00000
 8006e7c:	bff00000 	.word	0xbff00000
 8006e80:	7fefffff 	.word	0x7fefffff

08006e84 <_strtod_r>:
 8006e84:	4b01      	ldr	r3, [pc, #4]	; (8006e8c <_strtod_r+0x8>)
 8006e86:	f7ff b9f7 	b.w	8006278 <_strtod_l>
 8006e8a:	bf00      	nop
 8006e8c:	2000007c 	.word	0x2000007c

08006e90 <_strtol_l.constprop.0>:
 8006e90:	2b01      	cmp	r3, #1
 8006e92:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006e96:	d001      	beq.n	8006e9c <_strtol_l.constprop.0+0xc>
 8006e98:	2b24      	cmp	r3, #36	; 0x24
 8006e9a:	d906      	bls.n	8006eaa <_strtol_l.constprop.0+0x1a>
 8006e9c:	f7fe fa8a 	bl	80053b4 <__errno>
 8006ea0:	2316      	movs	r3, #22
 8006ea2:	6003      	str	r3, [r0, #0]
 8006ea4:	2000      	movs	r0, #0
 8006ea6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006eaa:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8006f90 <_strtol_l.constprop.0+0x100>
 8006eae:	460d      	mov	r5, r1
 8006eb0:	462e      	mov	r6, r5
 8006eb2:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006eb6:	f814 700c 	ldrb.w	r7, [r4, ip]
 8006eba:	f017 0708 	ands.w	r7, r7, #8
 8006ebe:	d1f7      	bne.n	8006eb0 <_strtol_l.constprop.0+0x20>
 8006ec0:	2c2d      	cmp	r4, #45	; 0x2d
 8006ec2:	d132      	bne.n	8006f2a <_strtol_l.constprop.0+0x9a>
 8006ec4:	782c      	ldrb	r4, [r5, #0]
 8006ec6:	2701      	movs	r7, #1
 8006ec8:	1cb5      	adds	r5, r6, #2
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d05b      	beq.n	8006f86 <_strtol_l.constprop.0+0xf6>
 8006ece:	2b10      	cmp	r3, #16
 8006ed0:	d109      	bne.n	8006ee6 <_strtol_l.constprop.0+0x56>
 8006ed2:	2c30      	cmp	r4, #48	; 0x30
 8006ed4:	d107      	bne.n	8006ee6 <_strtol_l.constprop.0+0x56>
 8006ed6:	782c      	ldrb	r4, [r5, #0]
 8006ed8:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8006edc:	2c58      	cmp	r4, #88	; 0x58
 8006ede:	d14d      	bne.n	8006f7c <_strtol_l.constprop.0+0xec>
 8006ee0:	786c      	ldrb	r4, [r5, #1]
 8006ee2:	2310      	movs	r3, #16
 8006ee4:	3502      	adds	r5, #2
 8006ee6:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8006eea:	f108 38ff 	add.w	r8, r8, #4294967295
 8006eee:	f04f 0c00 	mov.w	ip, #0
 8006ef2:	fbb8 f9f3 	udiv	r9, r8, r3
 8006ef6:	4666      	mov	r6, ip
 8006ef8:	fb03 8a19 	mls	sl, r3, r9, r8
 8006efc:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8006f00:	f1be 0f09 	cmp.w	lr, #9
 8006f04:	d816      	bhi.n	8006f34 <_strtol_l.constprop.0+0xa4>
 8006f06:	4674      	mov	r4, lr
 8006f08:	42a3      	cmp	r3, r4
 8006f0a:	dd24      	ble.n	8006f56 <_strtol_l.constprop.0+0xc6>
 8006f0c:	f1bc 0f00 	cmp.w	ip, #0
 8006f10:	db1e      	blt.n	8006f50 <_strtol_l.constprop.0+0xc0>
 8006f12:	45b1      	cmp	r9, r6
 8006f14:	d31c      	bcc.n	8006f50 <_strtol_l.constprop.0+0xc0>
 8006f16:	d101      	bne.n	8006f1c <_strtol_l.constprop.0+0x8c>
 8006f18:	45a2      	cmp	sl, r4
 8006f1a:	db19      	blt.n	8006f50 <_strtol_l.constprop.0+0xc0>
 8006f1c:	fb06 4603 	mla	r6, r6, r3, r4
 8006f20:	f04f 0c01 	mov.w	ip, #1
 8006f24:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006f28:	e7e8      	b.n	8006efc <_strtol_l.constprop.0+0x6c>
 8006f2a:	2c2b      	cmp	r4, #43	; 0x2b
 8006f2c:	bf04      	itt	eq
 8006f2e:	782c      	ldrbeq	r4, [r5, #0]
 8006f30:	1cb5      	addeq	r5, r6, #2
 8006f32:	e7ca      	b.n	8006eca <_strtol_l.constprop.0+0x3a>
 8006f34:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8006f38:	f1be 0f19 	cmp.w	lr, #25
 8006f3c:	d801      	bhi.n	8006f42 <_strtol_l.constprop.0+0xb2>
 8006f3e:	3c37      	subs	r4, #55	; 0x37
 8006f40:	e7e2      	b.n	8006f08 <_strtol_l.constprop.0+0x78>
 8006f42:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8006f46:	f1be 0f19 	cmp.w	lr, #25
 8006f4a:	d804      	bhi.n	8006f56 <_strtol_l.constprop.0+0xc6>
 8006f4c:	3c57      	subs	r4, #87	; 0x57
 8006f4e:	e7db      	b.n	8006f08 <_strtol_l.constprop.0+0x78>
 8006f50:	f04f 3cff 	mov.w	ip, #4294967295
 8006f54:	e7e6      	b.n	8006f24 <_strtol_l.constprop.0+0x94>
 8006f56:	f1bc 0f00 	cmp.w	ip, #0
 8006f5a:	da05      	bge.n	8006f68 <_strtol_l.constprop.0+0xd8>
 8006f5c:	2322      	movs	r3, #34	; 0x22
 8006f5e:	6003      	str	r3, [r0, #0]
 8006f60:	4646      	mov	r6, r8
 8006f62:	b942      	cbnz	r2, 8006f76 <_strtol_l.constprop.0+0xe6>
 8006f64:	4630      	mov	r0, r6
 8006f66:	e79e      	b.n	8006ea6 <_strtol_l.constprop.0+0x16>
 8006f68:	b107      	cbz	r7, 8006f6c <_strtol_l.constprop.0+0xdc>
 8006f6a:	4276      	negs	r6, r6
 8006f6c:	2a00      	cmp	r2, #0
 8006f6e:	d0f9      	beq.n	8006f64 <_strtol_l.constprop.0+0xd4>
 8006f70:	f1bc 0f00 	cmp.w	ip, #0
 8006f74:	d000      	beq.n	8006f78 <_strtol_l.constprop.0+0xe8>
 8006f76:	1e69      	subs	r1, r5, #1
 8006f78:	6011      	str	r1, [r2, #0]
 8006f7a:	e7f3      	b.n	8006f64 <_strtol_l.constprop.0+0xd4>
 8006f7c:	2430      	movs	r4, #48	; 0x30
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d1b1      	bne.n	8006ee6 <_strtol_l.constprop.0+0x56>
 8006f82:	2308      	movs	r3, #8
 8006f84:	e7af      	b.n	8006ee6 <_strtol_l.constprop.0+0x56>
 8006f86:	2c30      	cmp	r4, #48	; 0x30
 8006f88:	d0a5      	beq.n	8006ed6 <_strtol_l.constprop.0+0x46>
 8006f8a:	230a      	movs	r3, #10
 8006f8c:	e7ab      	b.n	8006ee6 <_strtol_l.constprop.0+0x56>
 8006f8e:	bf00      	nop
 8006f90:	0800bfc9 	.word	0x0800bfc9

08006f94 <_strtol_r>:
 8006f94:	f7ff bf7c 	b.w	8006e90 <_strtol_l.constprop.0>

08006f98 <_write_r>:
 8006f98:	b538      	push	{r3, r4, r5, lr}
 8006f9a:	4d07      	ldr	r5, [pc, #28]	; (8006fb8 <_write_r+0x20>)
 8006f9c:	4604      	mov	r4, r0
 8006f9e:	4608      	mov	r0, r1
 8006fa0:	4611      	mov	r1, r2
 8006fa2:	2200      	movs	r2, #0
 8006fa4:	602a      	str	r2, [r5, #0]
 8006fa6:	461a      	mov	r2, r3
 8006fa8:	f7fb fd10 	bl	80029cc <_write>
 8006fac:	1c43      	adds	r3, r0, #1
 8006fae:	d102      	bne.n	8006fb6 <_write_r+0x1e>
 8006fb0:	682b      	ldr	r3, [r5, #0]
 8006fb2:	b103      	cbz	r3, 8006fb6 <_write_r+0x1e>
 8006fb4:	6023      	str	r3, [r4, #0]
 8006fb6:	bd38      	pop	{r3, r4, r5, pc}
 8006fb8:	20000d14 	.word	0x20000d14

08006fbc <_close_r>:
 8006fbc:	b538      	push	{r3, r4, r5, lr}
 8006fbe:	4d06      	ldr	r5, [pc, #24]	; (8006fd8 <_close_r+0x1c>)
 8006fc0:	2300      	movs	r3, #0
 8006fc2:	4604      	mov	r4, r0
 8006fc4:	4608      	mov	r0, r1
 8006fc6:	602b      	str	r3, [r5, #0]
 8006fc8:	f7fb fd1c 	bl	8002a04 <_close>
 8006fcc:	1c43      	adds	r3, r0, #1
 8006fce:	d102      	bne.n	8006fd6 <_close_r+0x1a>
 8006fd0:	682b      	ldr	r3, [r5, #0]
 8006fd2:	b103      	cbz	r3, 8006fd6 <_close_r+0x1a>
 8006fd4:	6023      	str	r3, [r4, #0]
 8006fd6:	bd38      	pop	{r3, r4, r5, pc}
 8006fd8:	20000d14 	.word	0x20000d14

08006fdc <quorem>:
 8006fdc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006fe0:	6903      	ldr	r3, [r0, #16]
 8006fe2:	690c      	ldr	r4, [r1, #16]
 8006fe4:	42a3      	cmp	r3, r4
 8006fe6:	4607      	mov	r7, r0
 8006fe8:	f2c0 8081 	blt.w	80070ee <quorem+0x112>
 8006fec:	3c01      	subs	r4, #1
 8006fee:	f101 0814 	add.w	r8, r1, #20
 8006ff2:	f100 0514 	add.w	r5, r0, #20
 8006ff6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006ffa:	9301      	str	r3, [sp, #4]
 8006ffc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007000:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007004:	3301      	adds	r3, #1
 8007006:	429a      	cmp	r2, r3
 8007008:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800700c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007010:	fbb2 f6f3 	udiv	r6, r2, r3
 8007014:	d331      	bcc.n	800707a <quorem+0x9e>
 8007016:	f04f 0e00 	mov.w	lr, #0
 800701a:	4640      	mov	r0, r8
 800701c:	46ac      	mov	ip, r5
 800701e:	46f2      	mov	sl, lr
 8007020:	f850 2b04 	ldr.w	r2, [r0], #4
 8007024:	b293      	uxth	r3, r2
 8007026:	fb06 e303 	mla	r3, r6, r3, lr
 800702a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800702e:	b29b      	uxth	r3, r3
 8007030:	ebaa 0303 	sub.w	r3, sl, r3
 8007034:	f8dc a000 	ldr.w	sl, [ip]
 8007038:	0c12      	lsrs	r2, r2, #16
 800703a:	fa13 f38a 	uxtah	r3, r3, sl
 800703e:	fb06 e202 	mla	r2, r6, r2, lr
 8007042:	9300      	str	r3, [sp, #0]
 8007044:	9b00      	ldr	r3, [sp, #0]
 8007046:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800704a:	b292      	uxth	r2, r2
 800704c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8007050:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007054:	f8bd 3000 	ldrh.w	r3, [sp]
 8007058:	4581      	cmp	r9, r0
 800705a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800705e:	f84c 3b04 	str.w	r3, [ip], #4
 8007062:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8007066:	d2db      	bcs.n	8007020 <quorem+0x44>
 8007068:	f855 300b 	ldr.w	r3, [r5, fp]
 800706c:	b92b      	cbnz	r3, 800707a <quorem+0x9e>
 800706e:	9b01      	ldr	r3, [sp, #4]
 8007070:	3b04      	subs	r3, #4
 8007072:	429d      	cmp	r5, r3
 8007074:	461a      	mov	r2, r3
 8007076:	d32e      	bcc.n	80070d6 <quorem+0xfa>
 8007078:	613c      	str	r4, [r7, #16]
 800707a:	4638      	mov	r0, r7
 800707c:	f001 fca4 	bl	80089c8 <__mcmp>
 8007080:	2800      	cmp	r0, #0
 8007082:	db24      	blt.n	80070ce <quorem+0xf2>
 8007084:	3601      	adds	r6, #1
 8007086:	4628      	mov	r0, r5
 8007088:	f04f 0c00 	mov.w	ip, #0
 800708c:	f858 2b04 	ldr.w	r2, [r8], #4
 8007090:	f8d0 e000 	ldr.w	lr, [r0]
 8007094:	b293      	uxth	r3, r2
 8007096:	ebac 0303 	sub.w	r3, ip, r3
 800709a:	0c12      	lsrs	r2, r2, #16
 800709c:	fa13 f38e 	uxtah	r3, r3, lr
 80070a0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80070a4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80070a8:	b29b      	uxth	r3, r3
 80070aa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80070ae:	45c1      	cmp	r9, r8
 80070b0:	f840 3b04 	str.w	r3, [r0], #4
 80070b4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80070b8:	d2e8      	bcs.n	800708c <quorem+0xb0>
 80070ba:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80070be:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80070c2:	b922      	cbnz	r2, 80070ce <quorem+0xf2>
 80070c4:	3b04      	subs	r3, #4
 80070c6:	429d      	cmp	r5, r3
 80070c8:	461a      	mov	r2, r3
 80070ca:	d30a      	bcc.n	80070e2 <quorem+0x106>
 80070cc:	613c      	str	r4, [r7, #16]
 80070ce:	4630      	mov	r0, r6
 80070d0:	b003      	add	sp, #12
 80070d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80070d6:	6812      	ldr	r2, [r2, #0]
 80070d8:	3b04      	subs	r3, #4
 80070da:	2a00      	cmp	r2, #0
 80070dc:	d1cc      	bne.n	8007078 <quorem+0x9c>
 80070de:	3c01      	subs	r4, #1
 80070e0:	e7c7      	b.n	8007072 <quorem+0x96>
 80070e2:	6812      	ldr	r2, [r2, #0]
 80070e4:	3b04      	subs	r3, #4
 80070e6:	2a00      	cmp	r2, #0
 80070e8:	d1f0      	bne.n	80070cc <quorem+0xf0>
 80070ea:	3c01      	subs	r4, #1
 80070ec:	e7eb      	b.n	80070c6 <quorem+0xea>
 80070ee:	2000      	movs	r0, #0
 80070f0:	e7ee      	b.n	80070d0 <quorem+0xf4>
 80070f2:	0000      	movs	r0, r0
 80070f4:	0000      	movs	r0, r0
	...

080070f8 <_dtoa_r>:
 80070f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80070fc:	ed2d 8b04 	vpush	{d8-d9}
 8007100:	ec57 6b10 	vmov	r6, r7, d0
 8007104:	b093      	sub	sp, #76	; 0x4c
 8007106:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007108:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800710c:	9106      	str	r1, [sp, #24]
 800710e:	ee10 aa10 	vmov	sl, s0
 8007112:	4604      	mov	r4, r0
 8007114:	9209      	str	r2, [sp, #36]	; 0x24
 8007116:	930c      	str	r3, [sp, #48]	; 0x30
 8007118:	46bb      	mov	fp, r7
 800711a:	b975      	cbnz	r5, 800713a <_dtoa_r+0x42>
 800711c:	2010      	movs	r0, #16
 800711e:	f001 f95f 	bl	80083e0 <malloc>
 8007122:	4602      	mov	r2, r0
 8007124:	6260      	str	r0, [r4, #36]	; 0x24
 8007126:	b920      	cbnz	r0, 8007132 <_dtoa_r+0x3a>
 8007128:	4ba7      	ldr	r3, [pc, #668]	; (80073c8 <_dtoa_r+0x2d0>)
 800712a:	21ea      	movs	r1, #234	; 0xea
 800712c:	48a7      	ldr	r0, [pc, #668]	; (80073cc <_dtoa_r+0x2d4>)
 800712e:	f002 fceb 	bl	8009b08 <__assert_func>
 8007132:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007136:	6005      	str	r5, [r0, #0]
 8007138:	60c5      	str	r5, [r0, #12]
 800713a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800713c:	6819      	ldr	r1, [r3, #0]
 800713e:	b151      	cbz	r1, 8007156 <_dtoa_r+0x5e>
 8007140:	685a      	ldr	r2, [r3, #4]
 8007142:	604a      	str	r2, [r1, #4]
 8007144:	2301      	movs	r3, #1
 8007146:	4093      	lsls	r3, r2
 8007148:	608b      	str	r3, [r1, #8]
 800714a:	4620      	mov	r0, r4
 800714c:	f001 f9b0 	bl	80084b0 <_Bfree>
 8007150:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007152:	2200      	movs	r2, #0
 8007154:	601a      	str	r2, [r3, #0]
 8007156:	1e3b      	subs	r3, r7, #0
 8007158:	bfaa      	itet	ge
 800715a:	2300      	movge	r3, #0
 800715c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8007160:	f8c8 3000 	strge.w	r3, [r8]
 8007164:	4b9a      	ldr	r3, [pc, #616]	; (80073d0 <_dtoa_r+0x2d8>)
 8007166:	bfbc      	itt	lt
 8007168:	2201      	movlt	r2, #1
 800716a:	f8c8 2000 	strlt.w	r2, [r8]
 800716e:	ea33 030b 	bics.w	r3, r3, fp
 8007172:	d11b      	bne.n	80071ac <_dtoa_r+0xb4>
 8007174:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007176:	f242 730f 	movw	r3, #9999	; 0x270f
 800717a:	6013      	str	r3, [r2, #0]
 800717c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007180:	4333      	orrs	r3, r6
 8007182:	f000 8592 	beq.w	8007caa <_dtoa_r+0xbb2>
 8007186:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007188:	b963      	cbnz	r3, 80071a4 <_dtoa_r+0xac>
 800718a:	4b92      	ldr	r3, [pc, #584]	; (80073d4 <_dtoa_r+0x2dc>)
 800718c:	e022      	b.n	80071d4 <_dtoa_r+0xdc>
 800718e:	4b92      	ldr	r3, [pc, #584]	; (80073d8 <_dtoa_r+0x2e0>)
 8007190:	9301      	str	r3, [sp, #4]
 8007192:	3308      	adds	r3, #8
 8007194:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007196:	6013      	str	r3, [r2, #0]
 8007198:	9801      	ldr	r0, [sp, #4]
 800719a:	b013      	add	sp, #76	; 0x4c
 800719c:	ecbd 8b04 	vpop	{d8-d9}
 80071a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80071a4:	4b8b      	ldr	r3, [pc, #556]	; (80073d4 <_dtoa_r+0x2dc>)
 80071a6:	9301      	str	r3, [sp, #4]
 80071a8:	3303      	adds	r3, #3
 80071aa:	e7f3      	b.n	8007194 <_dtoa_r+0x9c>
 80071ac:	2200      	movs	r2, #0
 80071ae:	2300      	movs	r3, #0
 80071b0:	4650      	mov	r0, sl
 80071b2:	4659      	mov	r1, fp
 80071b4:	f7f9 fca0 	bl	8000af8 <__aeabi_dcmpeq>
 80071b8:	ec4b ab19 	vmov	d9, sl, fp
 80071bc:	4680      	mov	r8, r0
 80071be:	b158      	cbz	r0, 80071d8 <_dtoa_r+0xe0>
 80071c0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80071c2:	2301      	movs	r3, #1
 80071c4:	6013      	str	r3, [r2, #0]
 80071c6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	f000 856b 	beq.w	8007ca4 <_dtoa_r+0xbac>
 80071ce:	4883      	ldr	r0, [pc, #524]	; (80073dc <_dtoa_r+0x2e4>)
 80071d0:	6018      	str	r0, [r3, #0]
 80071d2:	1e43      	subs	r3, r0, #1
 80071d4:	9301      	str	r3, [sp, #4]
 80071d6:	e7df      	b.n	8007198 <_dtoa_r+0xa0>
 80071d8:	ec4b ab10 	vmov	d0, sl, fp
 80071dc:	aa10      	add	r2, sp, #64	; 0x40
 80071de:	a911      	add	r1, sp, #68	; 0x44
 80071e0:	4620      	mov	r0, r4
 80071e2:	f001 fd13 	bl	8008c0c <__d2b>
 80071e6:	f3cb 550a 	ubfx	r5, fp, #20, #11
 80071ea:	ee08 0a10 	vmov	s16, r0
 80071ee:	2d00      	cmp	r5, #0
 80071f0:	f000 8084 	beq.w	80072fc <_dtoa_r+0x204>
 80071f4:	ee19 3a90 	vmov	r3, s19
 80071f8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80071fc:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8007200:	4656      	mov	r6, sl
 8007202:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8007206:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800720a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800720e:	4b74      	ldr	r3, [pc, #464]	; (80073e0 <_dtoa_r+0x2e8>)
 8007210:	2200      	movs	r2, #0
 8007212:	4630      	mov	r0, r6
 8007214:	4639      	mov	r1, r7
 8007216:	f7f9 f84f 	bl	80002b8 <__aeabi_dsub>
 800721a:	a365      	add	r3, pc, #404	; (adr r3, 80073b0 <_dtoa_r+0x2b8>)
 800721c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007220:	f7f9 fa02 	bl	8000628 <__aeabi_dmul>
 8007224:	a364      	add	r3, pc, #400	; (adr r3, 80073b8 <_dtoa_r+0x2c0>)
 8007226:	e9d3 2300 	ldrd	r2, r3, [r3]
 800722a:	f7f9 f847 	bl	80002bc <__adddf3>
 800722e:	4606      	mov	r6, r0
 8007230:	4628      	mov	r0, r5
 8007232:	460f      	mov	r7, r1
 8007234:	f7f9 f98e 	bl	8000554 <__aeabi_i2d>
 8007238:	a361      	add	r3, pc, #388	; (adr r3, 80073c0 <_dtoa_r+0x2c8>)
 800723a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800723e:	f7f9 f9f3 	bl	8000628 <__aeabi_dmul>
 8007242:	4602      	mov	r2, r0
 8007244:	460b      	mov	r3, r1
 8007246:	4630      	mov	r0, r6
 8007248:	4639      	mov	r1, r7
 800724a:	f7f9 f837 	bl	80002bc <__adddf3>
 800724e:	4606      	mov	r6, r0
 8007250:	460f      	mov	r7, r1
 8007252:	f7f9 fc99 	bl	8000b88 <__aeabi_d2iz>
 8007256:	2200      	movs	r2, #0
 8007258:	9000      	str	r0, [sp, #0]
 800725a:	2300      	movs	r3, #0
 800725c:	4630      	mov	r0, r6
 800725e:	4639      	mov	r1, r7
 8007260:	f7f9 fc54 	bl	8000b0c <__aeabi_dcmplt>
 8007264:	b150      	cbz	r0, 800727c <_dtoa_r+0x184>
 8007266:	9800      	ldr	r0, [sp, #0]
 8007268:	f7f9 f974 	bl	8000554 <__aeabi_i2d>
 800726c:	4632      	mov	r2, r6
 800726e:	463b      	mov	r3, r7
 8007270:	f7f9 fc42 	bl	8000af8 <__aeabi_dcmpeq>
 8007274:	b910      	cbnz	r0, 800727c <_dtoa_r+0x184>
 8007276:	9b00      	ldr	r3, [sp, #0]
 8007278:	3b01      	subs	r3, #1
 800727a:	9300      	str	r3, [sp, #0]
 800727c:	9b00      	ldr	r3, [sp, #0]
 800727e:	2b16      	cmp	r3, #22
 8007280:	d85a      	bhi.n	8007338 <_dtoa_r+0x240>
 8007282:	9a00      	ldr	r2, [sp, #0]
 8007284:	4b57      	ldr	r3, [pc, #348]	; (80073e4 <_dtoa_r+0x2ec>)
 8007286:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800728a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800728e:	ec51 0b19 	vmov	r0, r1, d9
 8007292:	f7f9 fc3b 	bl	8000b0c <__aeabi_dcmplt>
 8007296:	2800      	cmp	r0, #0
 8007298:	d050      	beq.n	800733c <_dtoa_r+0x244>
 800729a:	9b00      	ldr	r3, [sp, #0]
 800729c:	3b01      	subs	r3, #1
 800729e:	9300      	str	r3, [sp, #0]
 80072a0:	2300      	movs	r3, #0
 80072a2:	930b      	str	r3, [sp, #44]	; 0x2c
 80072a4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80072a6:	1b5d      	subs	r5, r3, r5
 80072a8:	1e6b      	subs	r3, r5, #1
 80072aa:	9305      	str	r3, [sp, #20]
 80072ac:	bf45      	ittet	mi
 80072ae:	f1c5 0301 	rsbmi	r3, r5, #1
 80072b2:	9304      	strmi	r3, [sp, #16]
 80072b4:	2300      	movpl	r3, #0
 80072b6:	2300      	movmi	r3, #0
 80072b8:	bf4c      	ite	mi
 80072ba:	9305      	strmi	r3, [sp, #20]
 80072bc:	9304      	strpl	r3, [sp, #16]
 80072be:	9b00      	ldr	r3, [sp, #0]
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	db3d      	blt.n	8007340 <_dtoa_r+0x248>
 80072c4:	9b05      	ldr	r3, [sp, #20]
 80072c6:	9a00      	ldr	r2, [sp, #0]
 80072c8:	920a      	str	r2, [sp, #40]	; 0x28
 80072ca:	4413      	add	r3, r2
 80072cc:	9305      	str	r3, [sp, #20]
 80072ce:	2300      	movs	r3, #0
 80072d0:	9307      	str	r3, [sp, #28]
 80072d2:	9b06      	ldr	r3, [sp, #24]
 80072d4:	2b09      	cmp	r3, #9
 80072d6:	f200 8089 	bhi.w	80073ec <_dtoa_r+0x2f4>
 80072da:	2b05      	cmp	r3, #5
 80072dc:	bfc4      	itt	gt
 80072de:	3b04      	subgt	r3, #4
 80072e0:	9306      	strgt	r3, [sp, #24]
 80072e2:	9b06      	ldr	r3, [sp, #24]
 80072e4:	f1a3 0302 	sub.w	r3, r3, #2
 80072e8:	bfcc      	ite	gt
 80072ea:	2500      	movgt	r5, #0
 80072ec:	2501      	movle	r5, #1
 80072ee:	2b03      	cmp	r3, #3
 80072f0:	f200 8087 	bhi.w	8007402 <_dtoa_r+0x30a>
 80072f4:	e8df f003 	tbb	[pc, r3]
 80072f8:	59383a2d 	.word	0x59383a2d
 80072fc:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8007300:	441d      	add	r5, r3
 8007302:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8007306:	2b20      	cmp	r3, #32
 8007308:	bfc1      	itttt	gt
 800730a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800730e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8007312:	fa0b f303 	lslgt.w	r3, fp, r3
 8007316:	fa26 f000 	lsrgt.w	r0, r6, r0
 800731a:	bfda      	itte	le
 800731c:	f1c3 0320 	rsble	r3, r3, #32
 8007320:	fa06 f003 	lslle.w	r0, r6, r3
 8007324:	4318      	orrgt	r0, r3
 8007326:	f7f9 f905 	bl	8000534 <__aeabi_ui2d>
 800732a:	2301      	movs	r3, #1
 800732c:	4606      	mov	r6, r0
 800732e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8007332:	3d01      	subs	r5, #1
 8007334:	930e      	str	r3, [sp, #56]	; 0x38
 8007336:	e76a      	b.n	800720e <_dtoa_r+0x116>
 8007338:	2301      	movs	r3, #1
 800733a:	e7b2      	b.n	80072a2 <_dtoa_r+0x1aa>
 800733c:	900b      	str	r0, [sp, #44]	; 0x2c
 800733e:	e7b1      	b.n	80072a4 <_dtoa_r+0x1ac>
 8007340:	9b04      	ldr	r3, [sp, #16]
 8007342:	9a00      	ldr	r2, [sp, #0]
 8007344:	1a9b      	subs	r3, r3, r2
 8007346:	9304      	str	r3, [sp, #16]
 8007348:	4253      	negs	r3, r2
 800734a:	9307      	str	r3, [sp, #28]
 800734c:	2300      	movs	r3, #0
 800734e:	930a      	str	r3, [sp, #40]	; 0x28
 8007350:	e7bf      	b.n	80072d2 <_dtoa_r+0x1da>
 8007352:	2300      	movs	r3, #0
 8007354:	9308      	str	r3, [sp, #32]
 8007356:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007358:	2b00      	cmp	r3, #0
 800735a:	dc55      	bgt.n	8007408 <_dtoa_r+0x310>
 800735c:	2301      	movs	r3, #1
 800735e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007362:	461a      	mov	r2, r3
 8007364:	9209      	str	r2, [sp, #36]	; 0x24
 8007366:	e00c      	b.n	8007382 <_dtoa_r+0x28a>
 8007368:	2301      	movs	r3, #1
 800736a:	e7f3      	b.n	8007354 <_dtoa_r+0x25c>
 800736c:	2300      	movs	r3, #0
 800736e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007370:	9308      	str	r3, [sp, #32]
 8007372:	9b00      	ldr	r3, [sp, #0]
 8007374:	4413      	add	r3, r2
 8007376:	9302      	str	r3, [sp, #8]
 8007378:	3301      	adds	r3, #1
 800737a:	2b01      	cmp	r3, #1
 800737c:	9303      	str	r3, [sp, #12]
 800737e:	bfb8      	it	lt
 8007380:	2301      	movlt	r3, #1
 8007382:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8007384:	2200      	movs	r2, #0
 8007386:	6042      	str	r2, [r0, #4]
 8007388:	2204      	movs	r2, #4
 800738a:	f102 0614 	add.w	r6, r2, #20
 800738e:	429e      	cmp	r6, r3
 8007390:	6841      	ldr	r1, [r0, #4]
 8007392:	d93d      	bls.n	8007410 <_dtoa_r+0x318>
 8007394:	4620      	mov	r0, r4
 8007396:	f001 f84b 	bl	8008430 <_Balloc>
 800739a:	9001      	str	r0, [sp, #4]
 800739c:	2800      	cmp	r0, #0
 800739e:	d13b      	bne.n	8007418 <_dtoa_r+0x320>
 80073a0:	4b11      	ldr	r3, [pc, #68]	; (80073e8 <_dtoa_r+0x2f0>)
 80073a2:	4602      	mov	r2, r0
 80073a4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80073a8:	e6c0      	b.n	800712c <_dtoa_r+0x34>
 80073aa:	2301      	movs	r3, #1
 80073ac:	e7df      	b.n	800736e <_dtoa_r+0x276>
 80073ae:	bf00      	nop
 80073b0:	636f4361 	.word	0x636f4361
 80073b4:	3fd287a7 	.word	0x3fd287a7
 80073b8:	8b60c8b3 	.word	0x8b60c8b3
 80073bc:	3fc68a28 	.word	0x3fc68a28
 80073c0:	509f79fb 	.word	0x509f79fb
 80073c4:	3fd34413 	.word	0x3fd34413
 80073c8:	0800c0d6 	.word	0x0800c0d6
 80073cc:	0800c0ed 	.word	0x0800c0ed
 80073d0:	7ff00000 	.word	0x7ff00000
 80073d4:	0800c0d2 	.word	0x0800c0d2
 80073d8:	0800c0c9 	.word	0x0800c0c9
 80073dc:	0800c342 	.word	0x0800c342
 80073e0:	3ff80000 	.word	0x3ff80000
 80073e4:	0800c258 	.word	0x0800c258
 80073e8:	0800c148 	.word	0x0800c148
 80073ec:	2501      	movs	r5, #1
 80073ee:	2300      	movs	r3, #0
 80073f0:	9306      	str	r3, [sp, #24]
 80073f2:	9508      	str	r5, [sp, #32]
 80073f4:	f04f 33ff 	mov.w	r3, #4294967295
 80073f8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80073fc:	2200      	movs	r2, #0
 80073fe:	2312      	movs	r3, #18
 8007400:	e7b0      	b.n	8007364 <_dtoa_r+0x26c>
 8007402:	2301      	movs	r3, #1
 8007404:	9308      	str	r3, [sp, #32]
 8007406:	e7f5      	b.n	80073f4 <_dtoa_r+0x2fc>
 8007408:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800740a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800740e:	e7b8      	b.n	8007382 <_dtoa_r+0x28a>
 8007410:	3101      	adds	r1, #1
 8007412:	6041      	str	r1, [r0, #4]
 8007414:	0052      	lsls	r2, r2, #1
 8007416:	e7b8      	b.n	800738a <_dtoa_r+0x292>
 8007418:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800741a:	9a01      	ldr	r2, [sp, #4]
 800741c:	601a      	str	r2, [r3, #0]
 800741e:	9b03      	ldr	r3, [sp, #12]
 8007420:	2b0e      	cmp	r3, #14
 8007422:	f200 809d 	bhi.w	8007560 <_dtoa_r+0x468>
 8007426:	2d00      	cmp	r5, #0
 8007428:	f000 809a 	beq.w	8007560 <_dtoa_r+0x468>
 800742c:	9b00      	ldr	r3, [sp, #0]
 800742e:	2b00      	cmp	r3, #0
 8007430:	dd32      	ble.n	8007498 <_dtoa_r+0x3a0>
 8007432:	4ab7      	ldr	r2, [pc, #732]	; (8007710 <_dtoa_r+0x618>)
 8007434:	f003 030f 	and.w	r3, r3, #15
 8007438:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800743c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007440:	9b00      	ldr	r3, [sp, #0]
 8007442:	05d8      	lsls	r0, r3, #23
 8007444:	ea4f 1723 	mov.w	r7, r3, asr #4
 8007448:	d516      	bpl.n	8007478 <_dtoa_r+0x380>
 800744a:	4bb2      	ldr	r3, [pc, #712]	; (8007714 <_dtoa_r+0x61c>)
 800744c:	ec51 0b19 	vmov	r0, r1, d9
 8007450:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007454:	f7f9 fa12 	bl	800087c <__aeabi_ddiv>
 8007458:	f007 070f 	and.w	r7, r7, #15
 800745c:	4682      	mov	sl, r0
 800745e:	468b      	mov	fp, r1
 8007460:	2503      	movs	r5, #3
 8007462:	4eac      	ldr	r6, [pc, #688]	; (8007714 <_dtoa_r+0x61c>)
 8007464:	b957      	cbnz	r7, 800747c <_dtoa_r+0x384>
 8007466:	4642      	mov	r2, r8
 8007468:	464b      	mov	r3, r9
 800746a:	4650      	mov	r0, sl
 800746c:	4659      	mov	r1, fp
 800746e:	f7f9 fa05 	bl	800087c <__aeabi_ddiv>
 8007472:	4682      	mov	sl, r0
 8007474:	468b      	mov	fp, r1
 8007476:	e028      	b.n	80074ca <_dtoa_r+0x3d2>
 8007478:	2502      	movs	r5, #2
 800747a:	e7f2      	b.n	8007462 <_dtoa_r+0x36a>
 800747c:	07f9      	lsls	r1, r7, #31
 800747e:	d508      	bpl.n	8007492 <_dtoa_r+0x39a>
 8007480:	4640      	mov	r0, r8
 8007482:	4649      	mov	r1, r9
 8007484:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007488:	f7f9 f8ce 	bl	8000628 <__aeabi_dmul>
 800748c:	3501      	adds	r5, #1
 800748e:	4680      	mov	r8, r0
 8007490:	4689      	mov	r9, r1
 8007492:	107f      	asrs	r7, r7, #1
 8007494:	3608      	adds	r6, #8
 8007496:	e7e5      	b.n	8007464 <_dtoa_r+0x36c>
 8007498:	f000 809b 	beq.w	80075d2 <_dtoa_r+0x4da>
 800749c:	9b00      	ldr	r3, [sp, #0]
 800749e:	4f9d      	ldr	r7, [pc, #628]	; (8007714 <_dtoa_r+0x61c>)
 80074a0:	425e      	negs	r6, r3
 80074a2:	4b9b      	ldr	r3, [pc, #620]	; (8007710 <_dtoa_r+0x618>)
 80074a4:	f006 020f 	and.w	r2, r6, #15
 80074a8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80074ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074b0:	ec51 0b19 	vmov	r0, r1, d9
 80074b4:	f7f9 f8b8 	bl	8000628 <__aeabi_dmul>
 80074b8:	1136      	asrs	r6, r6, #4
 80074ba:	4682      	mov	sl, r0
 80074bc:	468b      	mov	fp, r1
 80074be:	2300      	movs	r3, #0
 80074c0:	2502      	movs	r5, #2
 80074c2:	2e00      	cmp	r6, #0
 80074c4:	d17a      	bne.n	80075bc <_dtoa_r+0x4c4>
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d1d3      	bne.n	8007472 <_dtoa_r+0x37a>
 80074ca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	f000 8082 	beq.w	80075d6 <_dtoa_r+0x4de>
 80074d2:	4b91      	ldr	r3, [pc, #580]	; (8007718 <_dtoa_r+0x620>)
 80074d4:	2200      	movs	r2, #0
 80074d6:	4650      	mov	r0, sl
 80074d8:	4659      	mov	r1, fp
 80074da:	f7f9 fb17 	bl	8000b0c <__aeabi_dcmplt>
 80074de:	2800      	cmp	r0, #0
 80074e0:	d079      	beq.n	80075d6 <_dtoa_r+0x4de>
 80074e2:	9b03      	ldr	r3, [sp, #12]
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d076      	beq.n	80075d6 <_dtoa_r+0x4de>
 80074e8:	9b02      	ldr	r3, [sp, #8]
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	dd36      	ble.n	800755c <_dtoa_r+0x464>
 80074ee:	9b00      	ldr	r3, [sp, #0]
 80074f0:	4650      	mov	r0, sl
 80074f2:	4659      	mov	r1, fp
 80074f4:	1e5f      	subs	r7, r3, #1
 80074f6:	2200      	movs	r2, #0
 80074f8:	4b88      	ldr	r3, [pc, #544]	; (800771c <_dtoa_r+0x624>)
 80074fa:	f7f9 f895 	bl	8000628 <__aeabi_dmul>
 80074fe:	9e02      	ldr	r6, [sp, #8]
 8007500:	4682      	mov	sl, r0
 8007502:	468b      	mov	fp, r1
 8007504:	3501      	adds	r5, #1
 8007506:	4628      	mov	r0, r5
 8007508:	f7f9 f824 	bl	8000554 <__aeabi_i2d>
 800750c:	4652      	mov	r2, sl
 800750e:	465b      	mov	r3, fp
 8007510:	f7f9 f88a 	bl	8000628 <__aeabi_dmul>
 8007514:	4b82      	ldr	r3, [pc, #520]	; (8007720 <_dtoa_r+0x628>)
 8007516:	2200      	movs	r2, #0
 8007518:	f7f8 fed0 	bl	80002bc <__adddf3>
 800751c:	46d0      	mov	r8, sl
 800751e:	46d9      	mov	r9, fp
 8007520:	4682      	mov	sl, r0
 8007522:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8007526:	2e00      	cmp	r6, #0
 8007528:	d158      	bne.n	80075dc <_dtoa_r+0x4e4>
 800752a:	4b7e      	ldr	r3, [pc, #504]	; (8007724 <_dtoa_r+0x62c>)
 800752c:	2200      	movs	r2, #0
 800752e:	4640      	mov	r0, r8
 8007530:	4649      	mov	r1, r9
 8007532:	f7f8 fec1 	bl	80002b8 <__aeabi_dsub>
 8007536:	4652      	mov	r2, sl
 8007538:	465b      	mov	r3, fp
 800753a:	4680      	mov	r8, r0
 800753c:	4689      	mov	r9, r1
 800753e:	f7f9 fb03 	bl	8000b48 <__aeabi_dcmpgt>
 8007542:	2800      	cmp	r0, #0
 8007544:	f040 8295 	bne.w	8007a72 <_dtoa_r+0x97a>
 8007548:	4652      	mov	r2, sl
 800754a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800754e:	4640      	mov	r0, r8
 8007550:	4649      	mov	r1, r9
 8007552:	f7f9 fadb 	bl	8000b0c <__aeabi_dcmplt>
 8007556:	2800      	cmp	r0, #0
 8007558:	f040 8289 	bne.w	8007a6e <_dtoa_r+0x976>
 800755c:	ec5b ab19 	vmov	sl, fp, d9
 8007560:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007562:	2b00      	cmp	r3, #0
 8007564:	f2c0 8148 	blt.w	80077f8 <_dtoa_r+0x700>
 8007568:	9a00      	ldr	r2, [sp, #0]
 800756a:	2a0e      	cmp	r2, #14
 800756c:	f300 8144 	bgt.w	80077f8 <_dtoa_r+0x700>
 8007570:	4b67      	ldr	r3, [pc, #412]	; (8007710 <_dtoa_r+0x618>)
 8007572:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007576:	e9d3 8900 	ldrd	r8, r9, [r3]
 800757a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800757c:	2b00      	cmp	r3, #0
 800757e:	f280 80d5 	bge.w	800772c <_dtoa_r+0x634>
 8007582:	9b03      	ldr	r3, [sp, #12]
 8007584:	2b00      	cmp	r3, #0
 8007586:	f300 80d1 	bgt.w	800772c <_dtoa_r+0x634>
 800758a:	f040 826f 	bne.w	8007a6c <_dtoa_r+0x974>
 800758e:	4b65      	ldr	r3, [pc, #404]	; (8007724 <_dtoa_r+0x62c>)
 8007590:	2200      	movs	r2, #0
 8007592:	4640      	mov	r0, r8
 8007594:	4649      	mov	r1, r9
 8007596:	f7f9 f847 	bl	8000628 <__aeabi_dmul>
 800759a:	4652      	mov	r2, sl
 800759c:	465b      	mov	r3, fp
 800759e:	f7f9 fac9 	bl	8000b34 <__aeabi_dcmpge>
 80075a2:	9e03      	ldr	r6, [sp, #12]
 80075a4:	4637      	mov	r7, r6
 80075a6:	2800      	cmp	r0, #0
 80075a8:	f040 8245 	bne.w	8007a36 <_dtoa_r+0x93e>
 80075ac:	9d01      	ldr	r5, [sp, #4]
 80075ae:	2331      	movs	r3, #49	; 0x31
 80075b0:	f805 3b01 	strb.w	r3, [r5], #1
 80075b4:	9b00      	ldr	r3, [sp, #0]
 80075b6:	3301      	adds	r3, #1
 80075b8:	9300      	str	r3, [sp, #0]
 80075ba:	e240      	b.n	8007a3e <_dtoa_r+0x946>
 80075bc:	07f2      	lsls	r2, r6, #31
 80075be:	d505      	bpl.n	80075cc <_dtoa_r+0x4d4>
 80075c0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80075c4:	f7f9 f830 	bl	8000628 <__aeabi_dmul>
 80075c8:	3501      	adds	r5, #1
 80075ca:	2301      	movs	r3, #1
 80075cc:	1076      	asrs	r6, r6, #1
 80075ce:	3708      	adds	r7, #8
 80075d0:	e777      	b.n	80074c2 <_dtoa_r+0x3ca>
 80075d2:	2502      	movs	r5, #2
 80075d4:	e779      	b.n	80074ca <_dtoa_r+0x3d2>
 80075d6:	9f00      	ldr	r7, [sp, #0]
 80075d8:	9e03      	ldr	r6, [sp, #12]
 80075da:	e794      	b.n	8007506 <_dtoa_r+0x40e>
 80075dc:	9901      	ldr	r1, [sp, #4]
 80075de:	4b4c      	ldr	r3, [pc, #304]	; (8007710 <_dtoa_r+0x618>)
 80075e0:	4431      	add	r1, r6
 80075e2:	910d      	str	r1, [sp, #52]	; 0x34
 80075e4:	9908      	ldr	r1, [sp, #32]
 80075e6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80075ea:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80075ee:	2900      	cmp	r1, #0
 80075f0:	d043      	beq.n	800767a <_dtoa_r+0x582>
 80075f2:	494d      	ldr	r1, [pc, #308]	; (8007728 <_dtoa_r+0x630>)
 80075f4:	2000      	movs	r0, #0
 80075f6:	f7f9 f941 	bl	800087c <__aeabi_ddiv>
 80075fa:	4652      	mov	r2, sl
 80075fc:	465b      	mov	r3, fp
 80075fe:	f7f8 fe5b 	bl	80002b8 <__aeabi_dsub>
 8007602:	9d01      	ldr	r5, [sp, #4]
 8007604:	4682      	mov	sl, r0
 8007606:	468b      	mov	fp, r1
 8007608:	4649      	mov	r1, r9
 800760a:	4640      	mov	r0, r8
 800760c:	f7f9 fabc 	bl	8000b88 <__aeabi_d2iz>
 8007610:	4606      	mov	r6, r0
 8007612:	f7f8 ff9f 	bl	8000554 <__aeabi_i2d>
 8007616:	4602      	mov	r2, r0
 8007618:	460b      	mov	r3, r1
 800761a:	4640      	mov	r0, r8
 800761c:	4649      	mov	r1, r9
 800761e:	f7f8 fe4b 	bl	80002b8 <__aeabi_dsub>
 8007622:	3630      	adds	r6, #48	; 0x30
 8007624:	f805 6b01 	strb.w	r6, [r5], #1
 8007628:	4652      	mov	r2, sl
 800762a:	465b      	mov	r3, fp
 800762c:	4680      	mov	r8, r0
 800762e:	4689      	mov	r9, r1
 8007630:	f7f9 fa6c 	bl	8000b0c <__aeabi_dcmplt>
 8007634:	2800      	cmp	r0, #0
 8007636:	d163      	bne.n	8007700 <_dtoa_r+0x608>
 8007638:	4642      	mov	r2, r8
 800763a:	464b      	mov	r3, r9
 800763c:	4936      	ldr	r1, [pc, #216]	; (8007718 <_dtoa_r+0x620>)
 800763e:	2000      	movs	r0, #0
 8007640:	f7f8 fe3a 	bl	80002b8 <__aeabi_dsub>
 8007644:	4652      	mov	r2, sl
 8007646:	465b      	mov	r3, fp
 8007648:	f7f9 fa60 	bl	8000b0c <__aeabi_dcmplt>
 800764c:	2800      	cmp	r0, #0
 800764e:	f040 80b5 	bne.w	80077bc <_dtoa_r+0x6c4>
 8007652:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007654:	429d      	cmp	r5, r3
 8007656:	d081      	beq.n	800755c <_dtoa_r+0x464>
 8007658:	4b30      	ldr	r3, [pc, #192]	; (800771c <_dtoa_r+0x624>)
 800765a:	2200      	movs	r2, #0
 800765c:	4650      	mov	r0, sl
 800765e:	4659      	mov	r1, fp
 8007660:	f7f8 ffe2 	bl	8000628 <__aeabi_dmul>
 8007664:	4b2d      	ldr	r3, [pc, #180]	; (800771c <_dtoa_r+0x624>)
 8007666:	4682      	mov	sl, r0
 8007668:	468b      	mov	fp, r1
 800766a:	4640      	mov	r0, r8
 800766c:	4649      	mov	r1, r9
 800766e:	2200      	movs	r2, #0
 8007670:	f7f8 ffda 	bl	8000628 <__aeabi_dmul>
 8007674:	4680      	mov	r8, r0
 8007676:	4689      	mov	r9, r1
 8007678:	e7c6      	b.n	8007608 <_dtoa_r+0x510>
 800767a:	4650      	mov	r0, sl
 800767c:	4659      	mov	r1, fp
 800767e:	f7f8 ffd3 	bl	8000628 <__aeabi_dmul>
 8007682:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007684:	9d01      	ldr	r5, [sp, #4]
 8007686:	930f      	str	r3, [sp, #60]	; 0x3c
 8007688:	4682      	mov	sl, r0
 800768a:	468b      	mov	fp, r1
 800768c:	4649      	mov	r1, r9
 800768e:	4640      	mov	r0, r8
 8007690:	f7f9 fa7a 	bl	8000b88 <__aeabi_d2iz>
 8007694:	4606      	mov	r6, r0
 8007696:	f7f8 ff5d 	bl	8000554 <__aeabi_i2d>
 800769a:	3630      	adds	r6, #48	; 0x30
 800769c:	4602      	mov	r2, r0
 800769e:	460b      	mov	r3, r1
 80076a0:	4640      	mov	r0, r8
 80076a2:	4649      	mov	r1, r9
 80076a4:	f7f8 fe08 	bl	80002b8 <__aeabi_dsub>
 80076a8:	f805 6b01 	strb.w	r6, [r5], #1
 80076ac:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80076ae:	429d      	cmp	r5, r3
 80076b0:	4680      	mov	r8, r0
 80076b2:	4689      	mov	r9, r1
 80076b4:	f04f 0200 	mov.w	r2, #0
 80076b8:	d124      	bne.n	8007704 <_dtoa_r+0x60c>
 80076ba:	4b1b      	ldr	r3, [pc, #108]	; (8007728 <_dtoa_r+0x630>)
 80076bc:	4650      	mov	r0, sl
 80076be:	4659      	mov	r1, fp
 80076c0:	f7f8 fdfc 	bl	80002bc <__adddf3>
 80076c4:	4602      	mov	r2, r0
 80076c6:	460b      	mov	r3, r1
 80076c8:	4640      	mov	r0, r8
 80076ca:	4649      	mov	r1, r9
 80076cc:	f7f9 fa3c 	bl	8000b48 <__aeabi_dcmpgt>
 80076d0:	2800      	cmp	r0, #0
 80076d2:	d173      	bne.n	80077bc <_dtoa_r+0x6c4>
 80076d4:	4652      	mov	r2, sl
 80076d6:	465b      	mov	r3, fp
 80076d8:	4913      	ldr	r1, [pc, #76]	; (8007728 <_dtoa_r+0x630>)
 80076da:	2000      	movs	r0, #0
 80076dc:	f7f8 fdec 	bl	80002b8 <__aeabi_dsub>
 80076e0:	4602      	mov	r2, r0
 80076e2:	460b      	mov	r3, r1
 80076e4:	4640      	mov	r0, r8
 80076e6:	4649      	mov	r1, r9
 80076e8:	f7f9 fa10 	bl	8000b0c <__aeabi_dcmplt>
 80076ec:	2800      	cmp	r0, #0
 80076ee:	f43f af35 	beq.w	800755c <_dtoa_r+0x464>
 80076f2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80076f4:	1e6b      	subs	r3, r5, #1
 80076f6:	930f      	str	r3, [sp, #60]	; 0x3c
 80076f8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80076fc:	2b30      	cmp	r3, #48	; 0x30
 80076fe:	d0f8      	beq.n	80076f2 <_dtoa_r+0x5fa>
 8007700:	9700      	str	r7, [sp, #0]
 8007702:	e049      	b.n	8007798 <_dtoa_r+0x6a0>
 8007704:	4b05      	ldr	r3, [pc, #20]	; (800771c <_dtoa_r+0x624>)
 8007706:	f7f8 ff8f 	bl	8000628 <__aeabi_dmul>
 800770a:	4680      	mov	r8, r0
 800770c:	4689      	mov	r9, r1
 800770e:	e7bd      	b.n	800768c <_dtoa_r+0x594>
 8007710:	0800c258 	.word	0x0800c258
 8007714:	0800c230 	.word	0x0800c230
 8007718:	3ff00000 	.word	0x3ff00000
 800771c:	40240000 	.word	0x40240000
 8007720:	401c0000 	.word	0x401c0000
 8007724:	40140000 	.word	0x40140000
 8007728:	3fe00000 	.word	0x3fe00000
 800772c:	9d01      	ldr	r5, [sp, #4]
 800772e:	4656      	mov	r6, sl
 8007730:	465f      	mov	r7, fp
 8007732:	4642      	mov	r2, r8
 8007734:	464b      	mov	r3, r9
 8007736:	4630      	mov	r0, r6
 8007738:	4639      	mov	r1, r7
 800773a:	f7f9 f89f 	bl	800087c <__aeabi_ddiv>
 800773e:	f7f9 fa23 	bl	8000b88 <__aeabi_d2iz>
 8007742:	4682      	mov	sl, r0
 8007744:	f7f8 ff06 	bl	8000554 <__aeabi_i2d>
 8007748:	4642      	mov	r2, r8
 800774a:	464b      	mov	r3, r9
 800774c:	f7f8 ff6c 	bl	8000628 <__aeabi_dmul>
 8007750:	4602      	mov	r2, r0
 8007752:	460b      	mov	r3, r1
 8007754:	4630      	mov	r0, r6
 8007756:	4639      	mov	r1, r7
 8007758:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800775c:	f7f8 fdac 	bl	80002b8 <__aeabi_dsub>
 8007760:	f805 6b01 	strb.w	r6, [r5], #1
 8007764:	9e01      	ldr	r6, [sp, #4]
 8007766:	9f03      	ldr	r7, [sp, #12]
 8007768:	1bae      	subs	r6, r5, r6
 800776a:	42b7      	cmp	r7, r6
 800776c:	4602      	mov	r2, r0
 800776e:	460b      	mov	r3, r1
 8007770:	d135      	bne.n	80077de <_dtoa_r+0x6e6>
 8007772:	f7f8 fda3 	bl	80002bc <__adddf3>
 8007776:	4642      	mov	r2, r8
 8007778:	464b      	mov	r3, r9
 800777a:	4606      	mov	r6, r0
 800777c:	460f      	mov	r7, r1
 800777e:	f7f9 f9e3 	bl	8000b48 <__aeabi_dcmpgt>
 8007782:	b9d0      	cbnz	r0, 80077ba <_dtoa_r+0x6c2>
 8007784:	4642      	mov	r2, r8
 8007786:	464b      	mov	r3, r9
 8007788:	4630      	mov	r0, r6
 800778a:	4639      	mov	r1, r7
 800778c:	f7f9 f9b4 	bl	8000af8 <__aeabi_dcmpeq>
 8007790:	b110      	cbz	r0, 8007798 <_dtoa_r+0x6a0>
 8007792:	f01a 0f01 	tst.w	sl, #1
 8007796:	d110      	bne.n	80077ba <_dtoa_r+0x6c2>
 8007798:	4620      	mov	r0, r4
 800779a:	ee18 1a10 	vmov	r1, s16
 800779e:	f000 fe87 	bl	80084b0 <_Bfree>
 80077a2:	2300      	movs	r3, #0
 80077a4:	9800      	ldr	r0, [sp, #0]
 80077a6:	702b      	strb	r3, [r5, #0]
 80077a8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80077aa:	3001      	adds	r0, #1
 80077ac:	6018      	str	r0, [r3, #0]
 80077ae:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	f43f acf1 	beq.w	8007198 <_dtoa_r+0xa0>
 80077b6:	601d      	str	r5, [r3, #0]
 80077b8:	e4ee      	b.n	8007198 <_dtoa_r+0xa0>
 80077ba:	9f00      	ldr	r7, [sp, #0]
 80077bc:	462b      	mov	r3, r5
 80077be:	461d      	mov	r5, r3
 80077c0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80077c4:	2a39      	cmp	r2, #57	; 0x39
 80077c6:	d106      	bne.n	80077d6 <_dtoa_r+0x6de>
 80077c8:	9a01      	ldr	r2, [sp, #4]
 80077ca:	429a      	cmp	r2, r3
 80077cc:	d1f7      	bne.n	80077be <_dtoa_r+0x6c6>
 80077ce:	9901      	ldr	r1, [sp, #4]
 80077d0:	2230      	movs	r2, #48	; 0x30
 80077d2:	3701      	adds	r7, #1
 80077d4:	700a      	strb	r2, [r1, #0]
 80077d6:	781a      	ldrb	r2, [r3, #0]
 80077d8:	3201      	adds	r2, #1
 80077da:	701a      	strb	r2, [r3, #0]
 80077dc:	e790      	b.n	8007700 <_dtoa_r+0x608>
 80077de:	4ba6      	ldr	r3, [pc, #664]	; (8007a78 <_dtoa_r+0x980>)
 80077e0:	2200      	movs	r2, #0
 80077e2:	f7f8 ff21 	bl	8000628 <__aeabi_dmul>
 80077e6:	2200      	movs	r2, #0
 80077e8:	2300      	movs	r3, #0
 80077ea:	4606      	mov	r6, r0
 80077ec:	460f      	mov	r7, r1
 80077ee:	f7f9 f983 	bl	8000af8 <__aeabi_dcmpeq>
 80077f2:	2800      	cmp	r0, #0
 80077f4:	d09d      	beq.n	8007732 <_dtoa_r+0x63a>
 80077f6:	e7cf      	b.n	8007798 <_dtoa_r+0x6a0>
 80077f8:	9a08      	ldr	r2, [sp, #32]
 80077fa:	2a00      	cmp	r2, #0
 80077fc:	f000 80d7 	beq.w	80079ae <_dtoa_r+0x8b6>
 8007800:	9a06      	ldr	r2, [sp, #24]
 8007802:	2a01      	cmp	r2, #1
 8007804:	f300 80ba 	bgt.w	800797c <_dtoa_r+0x884>
 8007808:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800780a:	2a00      	cmp	r2, #0
 800780c:	f000 80b2 	beq.w	8007974 <_dtoa_r+0x87c>
 8007810:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007814:	9e07      	ldr	r6, [sp, #28]
 8007816:	9d04      	ldr	r5, [sp, #16]
 8007818:	9a04      	ldr	r2, [sp, #16]
 800781a:	441a      	add	r2, r3
 800781c:	9204      	str	r2, [sp, #16]
 800781e:	9a05      	ldr	r2, [sp, #20]
 8007820:	2101      	movs	r1, #1
 8007822:	441a      	add	r2, r3
 8007824:	4620      	mov	r0, r4
 8007826:	9205      	str	r2, [sp, #20]
 8007828:	f000 ff44 	bl	80086b4 <__i2b>
 800782c:	4607      	mov	r7, r0
 800782e:	2d00      	cmp	r5, #0
 8007830:	dd0c      	ble.n	800784c <_dtoa_r+0x754>
 8007832:	9b05      	ldr	r3, [sp, #20]
 8007834:	2b00      	cmp	r3, #0
 8007836:	dd09      	ble.n	800784c <_dtoa_r+0x754>
 8007838:	42ab      	cmp	r3, r5
 800783a:	9a04      	ldr	r2, [sp, #16]
 800783c:	bfa8      	it	ge
 800783e:	462b      	movge	r3, r5
 8007840:	1ad2      	subs	r2, r2, r3
 8007842:	9204      	str	r2, [sp, #16]
 8007844:	9a05      	ldr	r2, [sp, #20]
 8007846:	1aed      	subs	r5, r5, r3
 8007848:	1ad3      	subs	r3, r2, r3
 800784a:	9305      	str	r3, [sp, #20]
 800784c:	9b07      	ldr	r3, [sp, #28]
 800784e:	b31b      	cbz	r3, 8007898 <_dtoa_r+0x7a0>
 8007850:	9b08      	ldr	r3, [sp, #32]
 8007852:	2b00      	cmp	r3, #0
 8007854:	f000 80af 	beq.w	80079b6 <_dtoa_r+0x8be>
 8007858:	2e00      	cmp	r6, #0
 800785a:	dd13      	ble.n	8007884 <_dtoa_r+0x78c>
 800785c:	4639      	mov	r1, r7
 800785e:	4632      	mov	r2, r6
 8007860:	4620      	mov	r0, r4
 8007862:	f000 ffe7 	bl	8008834 <__pow5mult>
 8007866:	ee18 2a10 	vmov	r2, s16
 800786a:	4601      	mov	r1, r0
 800786c:	4607      	mov	r7, r0
 800786e:	4620      	mov	r0, r4
 8007870:	f000 ff36 	bl	80086e0 <__multiply>
 8007874:	ee18 1a10 	vmov	r1, s16
 8007878:	4680      	mov	r8, r0
 800787a:	4620      	mov	r0, r4
 800787c:	f000 fe18 	bl	80084b0 <_Bfree>
 8007880:	ee08 8a10 	vmov	s16, r8
 8007884:	9b07      	ldr	r3, [sp, #28]
 8007886:	1b9a      	subs	r2, r3, r6
 8007888:	d006      	beq.n	8007898 <_dtoa_r+0x7a0>
 800788a:	ee18 1a10 	vmov	r1, s16
 800788e:	4620      	mov	r0, r4
 8007890:	f000 ffd0 	bl	8008834 <__pow5mult>
 8007894:	ee08 0a10 	vmov	s16, r0
 8007898:	2101      	movs	r1, #1
 800789a:	4620      	mov	r0, r4
 800789c:	f000 ff0a 	bl	80086b4 <__i2b>
 80078a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	4606      	mov	r6, r0
 80078a6:	f340 8088 	ble.w	80079ba <_dtoa_r+0x8c2>
 80078aa:	461a      	mov	r2, r3
 80078ac:	4601      	mov	r1, r0
 80078ae:	4620      	mov	r0, r4
 80078b0:	f000 ffc0 	bl	8008834 <__pow5mult>
 80078b4:	9b06      	ldr	r3, [sp, #24]
 80078b6:	2b01      	cmp	r3, #1
 80078b8:	4606      	mov	r6, r0
 80078ba:	f340 8081 	ble.w	80079c0 <_dtoa_r+0x8c8>
 80078be:	f04f 0800 	mov.w	r8, #0
 80078c2:	6933      	ldr	r3, [r6, #16]
 80078c4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80078c8:	6918      	ldr	r0, [r3, #16]
 80078ca:	f000 fea3 	bl	8008614 <__hi0bits>
 80078ce:	f1c0 0020 	rsb	r0, r0, #32
 80078d2:	9b05      	ldr	r3, [sp, #20]
 80078d4:	4418      	add	r0, r3
 80078d6:	f010 001f 	ands.w	r0, r0, #31
 80078da:	f000 8092 	beq.w	8007a02 <_dtoa_r+0x90a>
 80078de:	f1c0 0320 	rsb	r3, r0, #32
 80078e2:	2b04      	cmp	r3, #4
 80078e4:	f340 808a 	ble.w	80079fc <_dtoa_r+0x904>
 80078e8:	f1c0 001c 	rsb	r0, r0, #28
 80078ec:	9b04      	ldr	r3, [sp, #16]
 80078ee:	4403      	add	r3, r0
 80078f0:	9304      	str	r3, [sp, #16]
 80078f2:	9b05      	ldr	r3, [sp, #20]
 80078f4:	4403      	add	r3, r0
 80078f6:	4405      	add	r5, r0
 80078f8:	9305      	str	r3, [sp, #20]
 80078fa:	9b04      	ldr	r3, [sp, #16]
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	dd07      	ble.n	8007910 <_dtoa_r+0x818>
 8007900:	ee18 1a10 	vmov	r1, s16
 8007904:	461a      	mov	r2, r3
 8007906:	4620      	mov	r0, r4
 8007908:	f000 ffee 	bl	80088e8 <__lshift>
 800790c:	ee08 0a10 	vmov	s16, r0
 8007910:	9b05      	ldr	r3, [sp, #20]
 8007912:	2b00      	cmp	r3, #0
 8007914:	dd05      	ble.n	8007922 <_dtoa_r+0x82a>
 8007916:	4631      	mov	r1, r6
 8007918:	461a      	mov	r2, r3
 800791a:	4620      	mov	r0, r4
 800791c:	f000 ffe4 	bl	80088e8 <__lshift>
 8007920:	4606      	mov	r6, r0
 8007922:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007924:	2b00      	cmp	r3, #0
 8007926:	d06e      	beq.n	8007a06 <_dtoa_r+0x90e>
 8007928:	ee18 0a10 	vmov	r0, s16
 800792c:	4631      	mov	r1, r6
 800792e:	f001 f84b 	bl	80089c8 <__mcmp>
 8007932:	2800      	cmp	r0, #0
 8007934:	da67      	bge.n	8007a06 <_dtoa_r+0x90e>
 8007936:	9b00      	ldr	r3, [sp, #0]
 8007938:	3b01      	subs	r3, #1
 800793a:	ee18 1a10 	vmov	r1, s16
 800793e:	9300      	str	r3, [sp, #0]
 8007940:	220a      	movs	r2, #10
 8007942:	2300      	movs	r3, #0
 8007944:	4620      	mov	r0, r4
 8007946:	f000 fdd5 	bl	80084f4 <__multadd>
 800794a:	9b08      	ldr	r3, [sp, #32]
 800794c:	ee08 0a10 	vmov	s16, r0
 8007950:	2b00      	cmp	r3, #0
 8007952:	f000 81b1 	beq.w	8007cb8 <_dtoa_r+0xbc0>
 8007956:	2300      	movs	r3, #0
 8007958:	4639      	mov	r1, r7
 800795a:	220a      	movs	r2, #10
 800795c:	4620      	mov	r0, r4
 800795e:	f000 fdc9 	bl	80084f4 <__multadd>
 8007962:	9b02      	ldr	r3, [sp, #8]
 8007964:	2b00      	cmp	r3, #0
 8007966:	4607      	mov	r7, r0
 8007968:	f300 808e 	bgt.w	8007a88 <_dtoa_r+0x990>
 800796c:	9b06      	ldr	r3, [sp, #24]
 800796e:	2b02      	cmp	r3, #2
 8007970:	dc51      	bgt.n	8007a16 <_dtoa_r+0x91e>
 8007972:	e089      	b.n	8007a88 <_dtoa_r+0x990>
 8007974:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007976:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800797a:	e74b      	b.n	8007814 <_dtoa_r+0x71c>
 800797c:	9b03      	ldr	r3, [sp, #12]
 800797e:	1e5e      	subs	r6, r3, #1
 8007980:	9b07      	ldr	r3, [sp, #28]
 8007982:	42b3      	cmp	r3, r6
 8007984:	bfbf      	itttt	lt
 8007986:	9b07      	ldrlt	r3, [sp, #28]
 8007988:	9607      	strlt	r6, [sp, #28]
 800798a:	1af2      	sublt	r2, r6, r3
 800798c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800798e:	bfb6      	itet	lt
 8007990:	189b      	addlt	r3, r3, r2
 8007992:	1b9e      	subge	r6, r3, r6
 8007994:	930a      	strlt	r3, [sp, #40]	; 0x28
 8007996:	9b03      	ldr	r3, [sp, #12]
 8007998:	bfb8      	it	lt
 800799a:	2600      	movlt	r6, #0
 800799c:	2b00      	cmp	r3, #0
 800799e:	bfb7      	itett	lt
 80079a0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 80079a4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 80079a8:	1a9d      	sublt	r5, r3, r2
 80079aa:	2300      	movlt	r3, #0
 80079ac:	e734      	b.n	8007818 <_dtoa_r+0x720>
 80079ae:	9e07      	ldr	r6, [sp, #28]
 80079b0:	9d04      	ldr	r5, [sp, #16]
 80079b2:	9f08      	ldr	r7, [sp, #32]
 80079b4:	e73b      	b.n	800782e <_dtoa_r+0x736>
 80079b6:	9a07      	ldr	r2, [sp, #28]
 80079b8:	e767      	b.n	800788a <_dtoa_r+0x792>
 80079ba:	9b06      	ldr	r3, [sp, #24]
 80079bc:	2b01      	cmp	r3, #1
 80079be:	dc18      	bgt.n	80079f2 <_dtoa_r+0x8fa>
 80079c0:	f1ba 0f00 	cmp.w	sl, #0
 80079c4:	d115      	bne.n	80079f2 <_dtoa_r+0x8fa>
 80079c6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80079ca:	b993      	cbnz	r3, 80079f2 <_dtoa_r+0x8fa>
 80079cc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80079d0:	0d1b      	lsrs	r3, r3, #20
 80079d2:	051b      	lsls	r3, r3, #20
 80079d4:	b183      	cbz	r3, 80079f8 <_dtoa_r+0x900>
 80079d6:	9b04      	ldr	r3, [sp, #16]
 80079d8:	3301      	adds	r3, #1
 80079da:	9304      	str	r3, [sp, #16]
 80079dc:	9b05      	ldr	r3, [sp, #20]
 80079de:	3301      	adds	r3, #1
 80079e0:	9305      	str	r3, [sp, #20]
 80079e2:	f04f 0801 	mov.w	r8, #1
 80079e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	f47f af6a 	bne.w	80078c2 <_dtoa_r+0x7ca>
 80079ee:	2001      	movs	r0, #1
 80079f0:	e76f      	b.n	80078d2 <_dtoa_r+0x7da>
 80079f2:	f04f 0800 	mov.w	r8, #0
 80079f6:	e7f6      	b.n	80079e6 <_dtoa_r+0x8ee>
 80079f8:	4698      	mov	r8, r3
 80079fa:	e7f4      	b.n	80079e6 <_dtoa_r+0x8ee>
 80079fc:	f43f af7d 	beq.w	80078fa <_dtoa_r+0x802>
 8007a00:	4618      	mov	r0, r3
 8007a02:	301c      	adds	r0, #28
 8007a04:	e772      	b.n	80078ec <_dtoa_r+0x7f4>
 8007a06:	9b03      	ldr	r3, [sp, #12]
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	dc37      	bgt.n	8007a7c <_dtoa_r+0x984>
 8007a0c:	9b06      	ldr	r3, [sp, #24]
 8007a0e:	2b02      	cmp	r3, #2
 8007a10:	dd34      	ble.n	8007a7c <_dtoa_r+0x984>
 8007a12:	9b03      	ldr	r3, [sp, #12]
 8007a14:	9302      	str	r3, [sp, #8]
 8007a16:	9b02      	ldr	r3, [sp, #8]
 8007a18:	b96b      	cbnz	r3, 8007a36 <_dtoa_r+0x93e>
 8007a1a:	4631      	mov	r1, r6
 8007a1c:	2205      	movs	r2, #5
 8007a1e:	4620      	mov	r0, r4
 8007a20:	f000 fd68 	bl	80084f4 <__multadd>
 8007a24:	4601      	mov	r1, r0
 8007a26:	4606      	mov	r6, r0
 8007a28:	ee18 0a10 	vmov	r0, s16
 8007a2c:	f000 ffcc 	bl	80089c8 <__mcmp>
 8007a30:	2800      	cmp	r0, #0
 8007a32:	f73f adbb 	bgt.w	80075ac <_dtoa_r+0x4b4>
 8007a36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a38:	9d01      	ldr	r5, [sp, #4]
 8007a3a:	43db      	mvns	r3, r3
 8007a3c:	9300      	str	r3, [sp, #0]
 8007a3e:	f04f 0800 	mov.w	r8, #0
 8007a42:	4631      	mov	r1, r6
 8007a44:	4620      	mov	r0, r4
 8007a46:	f000 fd33 	bl	80084b0 <_Bfree>
 8007a4a:	2f00      	cmp	r7, #0
 8007a4c:	f43f aea4 	beq.w	8007798 <_dtoa_r+0x6a0>
 8007a50:	f1b8 0f00 	cmp.w	r8, #0
 8007a54:	d005      	beq.n	8007a62 <_dtoa_r+0x96a>
 8007a56:	45b8      	cmp	r8, r7
 8007a58:	d003      	beq.n	8007a62 <_dtoa_r+0x96a>
 8007a5a:	4641      	mov	r1, r8
 8007a5c:	4620      	mov	r0, r4
 8007a5e:	f000 fd27 	bl	80084b0 <_Bfree>
 8007a62:	4639      	mov	r1, r7
 8007a64:	4620      	mov	r0, r4
 8007a66:	f000 fd23 	bl	80084b0 <_Bfree>
 8007a6a:	e695      	b.n	8007798 <_dtoa_r+0x6a0>
 8007a6c:	2600      	movs	r6, #0
 8007a6e:	4637      	mov	r7, r6
 8007a70:	e7e1      	b.n	8007a36 <_dtoa_r+0x93e>
 8007a72:	9700      	str	r7, [sp, #0]
 8007a74:	4637      	mov	r7, r6
 8007a76:	e599      	b.n	80075ac <_dtoa_r+0x4b4>
 8007a78:	40240000 	.word	0x40240000
 8007a7c:	9b08      	ldr	r3, [sp, #32]
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	f000 80ca 	beq.w	8007c18 <_dtoa_r+0xb20>
 8007a84:	9b03      	ldr	r3, [sp, #12]
 8007a86:	9302      	str	r3, [sp, #8]
 8007a88:	2d00      	cmp	r5, #0
 8007a8a:	dd05      	ble.n	8007a98 <_dtoa_r+0x9a0>
 8007a8c:	4639      	mov	r1, r7
 8007a8e:	462a      	mov	r2, r5
 8007a90:	4620      	mov	r0, r4
 8007a92:	f000 ff29 	bl	80088e8 <__lshift>
 8007a96:	4607      	mov	r7, r0
 8007a98:	f1b8 0f00 	cmp.w	r8, #0
 8007a9c:	d05b      	beq.n	8007b56 <_dtoa_r+0xa5e>
 8007a9e:	6879      	ldr	r1, [r7, #4]
 8007aa0:	4620      	mov	r0, r4
 8007aa2:	f000 fcc5 	bl	8008430 <_Balloc>
 8007aa6:	4605      	mov	r5, r0
 8007aa8:	b928      	cbnz	r0, 8007ab6 <_dtoa_r+0x9be>
 8007aaa:	4b87      	ldr	r3, [pc, #540]	; (8007cc8 <_dtoa_r+0xbd0>)
 8007aac:	4602      	mov	r2, r0
 8007aae:	f240 21ea 	movw	r1, #746	; 0x2ea
 8007ab2:	f7ff bb3b 	b.w	800712c <_dtoa_r+0x34>
 8007ab6:	693a      	ldr	r2, [r7, #16]
 8007ab8:	3202      	adds	r2, #2
 8007aba:	0092      	lsls	r2, r2, #2
 8007abc:	f107 010c 	add.w	r1, r7, #12
 8007ac0:	300c      	adds	r0, #12
 8007ac2:	f000 fca7 	bl	8008414 <memcpy>
 8007ac6:	2201      	movs	r2, #1
 8007ac8:	4629      	mov	r1, r5
 8007aca:	4620      	mov	r0, r4
 8007acc:	f000 ff0c 	bl	80088e8 <__lshift>
 8007ad0:	9b01      	ldr	r3, [sp, #4]
 8007ad2:	f103 0901 	add.w	r9, r3, #1
 8007ad6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8007ada:	4413      	add	r3, r2
 8007adc:	9305      	str	r3, [sp, #20]
 8007ade:	f00a 0301 	and.w	r3, sl, #1
 8007ae2:	46b8      	mov	r8, r7
 8007ae4:	9304      	str	r3, [sp, #16]
 8007ae6:	4607      	mov	r7, r0
 8007ae8:	4631      	mov	r1, r6
 8007aea:	ee18 0a10 	vmov	r0, s16
 8007aee:	f7ff fa75 	bl	8006fdc <quorem>
 8007af2:	4641      	mov	r1, r8
 8007af4:	9002      	str	r0, [sp, #8]
 8007af6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8007afa:	ee18 0a10 	vmov	r0, s16
 8007afe:	f000 ff63 	bl	80089c8 <__mcmp>
 8007b02:	463a      	mov	r2, r7
 8007b04:	9003      	str	r0, [sp, #12]
 8007b06:	4631      	mov	r1, r6
 8007b08:	4620      	mov	r0, r4
 8007b0a:	f000 ff79 	bl	8008a00 <__mdiff>
 8007b0e:	68c2      	ldr	r2, [r0, #12]
 8007b10:	f109 3bff 	add.w	fp, r9, #4294967295
 8007b14:	4605      	mov	r5, r0
 8007b16:	bb02      	cbnz	r2, 8007b5a <_dtoa_r+0xa62>
 8007b18:	4601      	mov	r1, r0
 8007b1a:	ee18 0a10 	vmov	r0, s16
 8007b1e:	f000 ff53 	bl	80089c8 <__mcmp>
 8007b22:	4602      	mov	r2, r0
 8007b24:	4629      	mov	r1, r5
 8007b26:	4620      	mov	r0, r4
 8007b28:	9207      	str	r2, [sp, #28]
 8007b2a:	f000 fcc1 	bl	80084b0 <_Bfree>
 8007b2e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8007b32:	ea43 0102 	orr.w	r1, r3, r2
 8007b36:	9b04      	ldr	r3, [sp, #16]
 8007b38:	430b      	orrs	r3, r1
 8007b3a:	464d      	mov	r5, r9
 8007b3c:	d10f      	bne.n	8007b5e <_dtoa_r+0xa66>
 8007b3e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007b42:	d02a      	beq.n	8007b9a <_dtoa_r+0xaa2>
 8007b44:	9b03      	ldr	r3, [sp, #12]
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	dd02      	ble.n	8007b50 <_dtoa_r+0xa58>
 8007b4a:	9b02      	ldr	r3, [sp, #8]
 8007b4c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8007b50:	f88b a000 	strb.w	sl, [fp]
 8007b54:	e775      	b.n	8007a42 <_dtoa_r+0x94a>
 8007b56:	4638      	mov	r0, r7
 8007b58:	e7ba      	b.n	8007ad0 <_dtoa_r+0x9d8>
 8007b5a:	2201      	movs	r2, #1
 8007b5c:	e7e2      	b.n	8007b24 <_dtoa_r+0xa2c>
 8007b5e:	9b03      	ldr	r3, [sp, #12]
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	db04      	blt.n	8007b6e <_dtoa_r+0xa76>
 8007b64:	9906      	ldr	r1, [sp, #24]
 8007b66:	430b      	orrs	r3, r1
 8007b68:	9904      	ldr	r1, [sp, #16]
 8007b6a:	430b      	orrs	r3, r1
 8007b6c:	d122      	bne.n	8007bb4 <_dtoa_r+0xabc>
 8007b6e:	2a00      	cmp	r2, #0
 8007b70:	ddee      	ble.n	8007b50 <_dtoa_r+0xa58>
 8007b72:	ee18 1a10 	vmov	r1, s16
 8007b76:	2201      	movs	r2, #1
 8007b78:	4620      	mov	r0, r4
 8007b7a:	f000 feb5 	bl	80088e8 <__lshift>
 8007b7e:	4631      	mov	r1, r6
 8007b80:	ee08 0a10 	vmov	s16, r0
 8007b84:	f000 ff20 	bl	80089c8 <__mcmp>
 8007b88:	2800      	cmp	r0, #0
 8007b8a:	dc03      	bgt.n	8007b94 <_dtoa_r+0xa9c>
 8007b8c:	d1e0      	bne.n	8007b50 <_dtoa_r+0xa58>
 8007b8e:	f01a 0f01 	tst.w	sl, #1
 8007b92:	d0dd      	beq.n	8007b50 <_dtoa_r+0xa58>
 8007b94:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007b98:	d1d7      	bne.n	8007b4a <_dtoa_r+0xa52>
 8007b9a:	2339      	movs	r3, #57	; 0x39
 8007b9c:	f88b 3000 	strb.w	r3, [fp]
 8007ba0:	462b      	mov	r3, r5
 8007ba2:	461d      	mov	r5, r3
 8007ba4:	3b01      	subs	r3, #1
 8007ba6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8007baa:	2a39      	cmp	r2, #57	; 0x39
 8007bac:	d071      	beq.n	8007c92 <_dtoa_r+0xb9a>
 8007bae:	3201      	adds	r2, #1
 8007bb0:	701a      	strb	r2, [r3, #0]
 8007bb2:	e746      	b.n	8007a42 <_dtoa_r+0x94a>
 8007bb4:	2a00      	cmp	r2, #0
 8007bb6:	dd07      	ble.n	8007bc8 <_dtoa_r+0xad0>
 8007bb8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007bbc:	d0ed      	beq.n	8007b9a <_dtoa_r+0xaa2>
 8007bbe:	f10a 0301 	add.w	r3, sl, #1
 8007bc2:	f88b 3000 	strb.w	r3, [fp]
 8007bc6:	e73c      	b.n	8007a42 <_dtoa_r+0x94a>
 8007bc8:	9b05      	ldr	r3, [sp, #20]
 8007bca:	f809 ac01 	strb.w	sl, [r9, #-1]
 8007bce:	4599      	cmp	r9, r3
 8007bd0:	d047      	beq.n	8007c62 <_dtoa_r+0xb6a>
 8007bd2:	ee18 1a10 	vmov	r1, s16
 8007bd6:	2300      	movs	r3, #0
 8007bd8:	220a      	movs	r2, #10
 8007bda:	4620      	mov	r0, r4
 8007bdc:	f000 fc8a 	bl	80084f4 <__multadd>
 8007be0:	45b8      	cmp	r8, r7
 8007be2:	ee08 0a10 	vmov	s16, r0
 8007be6:	f04f 0300 	mov.w	r3, #0
 8007bea:	f04f 020a 	mov.w	r2, #10
 8007bee:	4641      	mov	r1, r8
 8007bf0:	4620      	mov	r0, r4
 8007bf2:	d106      	bne.n	8007c02 <_dtoa_r+0xb0a>
 8007bf4:	f000 fc7e 	bl	80084f4 <__multadd>
 8007bf8:	4680      	mov	r8, r0
 8007bfa:	4607      	mov	r7, r0
 8007bfc:	f109 0901 	add.w	r9, r9, #1
 8007c00:	e772      	b.n	8007ae8 <_dtoa_r+0x9f0>
 8007c02:	f000 fc77 	bl	80084f4 <__multadd>
 8007c06:	4639      	mov	r1, r7
 8007c08:	4680      	mov	r8, r0
 8007c0a:	2300      	movs	r3, #0
 8007c0c:	220a      	movs	r2, #10
 8007c0e:	4620      	mov	r0, r4
 8007c10:	f000 fc70 	bl	80084f4 <__multadd>
 8007c14:	4607      	mov	r7, r0
 8007c16:	e7f1      	b.n	8007bfc <_dtoa_r+0xb04>
 8007c18:	9b03      	ldr	r3, [sp, #12]
 8007c1a:	9302      	str	r3, [sp, #8]
 8007c1c:	9d01      	ldr	r5, [sp, #4]
 8007c1e:	ee18 0a10 	vmov	r0, s16
 8007c22:	4631      	mov	r1, r6
 8007c24:	f7ff f9da 	bl	8006fdc <quorem>
 8007c28:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8007c2c:	9b01      	ldr	r3, [sp, #4]
 8007c2e:	f805 ab01 	strb.w	sl, [r5], #1
 8007c32:	1aea      	subs	r2, r5, r3
 8007c34:	9b02      	ldr	r3, [sp, #8]
 8007c36:	4293      	cmp	r3, r2
 8007c38:	dd09      	ble.n	8007c4e <_dtoa_r+0xb56>
 8007c3a:	ee18 1a10 	vmov	r1, s16
 8007c3e:	2300      	movs	r3, #0
 8007c40:	220a      	movs	r2, #10
 8007c42:	4620      	mov	r0, r4
 8007c44:	f000 fc56 	bl	80084f4 <__multadd>
 8007c48:	ee08 0a10 	vmov	s16, r0
 8007c4c:	e7e7      	b.n	8007c1e <_dtoa_r+0xb26>
 8007c4e:	9b02      	ldr	r3, [sp, #8]
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	bfc8      	it	gt
 8007c54:	461d      	movgt	r5, r3
 8007c56:	9b01      	ldr	r3, [sp, #4]
 8007c58:	bfd8      	it	le
 8007c5a:	2501      	movle	r5, #1
 8007c5c:	441d      	add	r5, r3
 8007c5e:	f04f 0800 	mov.w	r8, #0
 8007c62:	ee18 1a10 	vmov	r1, s16
 8007c66:	2201      	movs	r2, #1
 8007c68:	4620      	mov	r0, r4
 8007c6a:	f000 fe3d 	bl	80088e8 <__lshift>
 8007c6e:	4631      	mov	r1, r6
 8007c70:	ee08 0a10 	vmov	s16, r0
 8007c74:	f000 fea8 	bl	80089c8 <__mcmp>
 8007c78:	2800      	cmp	r0, #0
 8007c7a:	dc91      	bgt.n	8007ba0 <_dtoa_r+0xaa8>
 8007c7c:	d102      	bne.n	8007c84 <_dtoa_r+0xb8c>
 8007c7e:	f01a 0f01 	tst.w	sl, #1
 8007c82:	d18d      	bne.n	8007ba0 <_dtoa_r+0xaa8>
 8007c84:	462b      	mov	r3, r5
 8007c86:	461d      	mov	r5, r3
 8007c88:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007c8c:	2a30      	cmp	r2, #48	; 0x30
 8007c8e:	d0fa      	beq.n	8007c86 <_dtoa_r+0xb8e>
 8007c90:	e6d7      	b.n	8007a42 <_dtoa_r+0x94a>
 8007c92:	9a01      	ldr	r2, [sp, #4]
 8007c94:	429a      	cmp	r2, r3
 8007c96:	d184      	bne.n	8007ba2 <_dtoa_r+0xaaa>
 8007c98:	9b00      	ldr	r3, [sp, #0]
 8007c9a:	3301      	adds	r3, #1
 8007c9c:	9300      	str	r3, [sp, #0]
 8007c9e:	2331      	movs	r3, #49	; 0x31
 8007ca0:	7013      	strb	r3, [r2, #0]
 8007ca2:	e6ce      	b.n	8007a42 <_dtoa_r+0x94a>
 8007ca4:	4b09      	ldr	r3, [pc, #36]	; (8007ccc <_dtoa_r+0xbd4>)
 8007ca6:	f7ff ba95 	b.w	80071d4 <_dtoa_r+0xdc>
 8007caa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	f47f aa6e 	bne.w	800718e <_dtoa_r+0x96>
 8007cb2:	4b07      	ldr	r3, [pc, #28]	; (8007cd0 <_dtoa_r+0xbd8>)
 8007cb4:	f7ff ba8e 	b.w	80071d4 <_dtoa_r+0xdc>
 8007cb8:	9b02      	ldr	r3, [sp, #8]
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	dcae      	bgt.n	8007c1c <_dtoa_r+0xb24>
 8007cbe:	9b06      	ldr	r3, [sp, #24]
 8007cc0:	2b02      	cmp	r3, #2
 8007cc2:	f73f aea8 	bgt.w	8007a16 <_dtoa_r+0x91e>
 8007cc6:	e7a9      	b.n	8007c1c <_dtoa_r+0xb24>
 8007cc8:	0800c148 	.word	0x0800c148
 8007ccc:	0800c341 	.word	0x0800c341
 8007cd0:	0800c0c9 	.word	0x0800c0c9

08007cd4 <rshift>:
 8007cd4:	6903      	ldr	r3, [r0, #16]
 8007cd6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8007cda:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007cde:	ea4f 1261 	mov.w	r2, r1, asr #5
 8007ce2:	f100 0414 	add.w	r4, r0, #20
 8007ce6:	dd45      	ble.n	8007d74 <rshift+0xa0>
 8007ce8:	f011 011f 	ands.w	r1, r1, #31
 8007cec:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8007cf0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8007cf4:	d10c      	bne.n	8007d10 <rshift+0x3c>
 8007cf6:	f100 0710 	add.w	r7, r0, #16
 8007cfa:	4629      	mov	r1, r5
 8007cfc:	42b1      	cmp	r1, r6
 8007cfe:	d334      	bcc.n	8007d6a <rshift+0x96>
 8007d00:	1a9b      	subs	r3, r3, r2
 8007d02:	009b      	lsls	r3, r3, #2
 8007d04:	1eea      	subs	r2, r5, #3
 8007d06:	4296      	cmp	r6, r2
 8007d08:	bf38      	it	cc
 8007d0a:	2300      	movcc	r3, #0
 8007d0c:	4423      	add	r3, r4
 8007d0e:	e015      	b.n	8007d3c <rshift+0x68>
 8007d10:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8007d14:	f1c1 0820 	rsb	r8, r1, #32
 8007d18:	40cf      	lsrs	r7, r1
 8007d1a:	f105 0e04 	add.w	lr, r5, #4
 8007d1e:	46a1      	mov	r9, r4
 8007d20:	4576      	cmp	r6, lr
 8007d22:	46f4      	mov	ip, lr
 8007d24:	d815      	bhi.n	8007d52 <rshift+0x7e>
 8007d26:	1a9a      	subs	r2, r3, r2
 8007d28:	0092      	lsls	r2, r2, #2
 8007d2a:	3a04      	subs	r2, #4
 8007d2c:	3501      	adds	r5, #1
 8007d2e:	42ae      	cmp	r6, r5
 8007d30:	bf38      	it	cc
 8007d32:	2200      	movcc	r2, #0
 8007d34:	18a3      	adds	r3, r4, r2
 8007d36:	50a7      	str	r7, [r4, r2]
 8007d38:	b107      	cbz	r7, 8007d3c <rshift+0x68>
 8007d3a:	3304      	adds	r3, #4
 8007d3c:	1b1a      	subs	r2, r3, r4
 8007d3e:	42a3      	cmp	r3, r4
 8007d40:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8007d44:	bf08      	it	eq
 8007d46:	2300      	moveq	r3, #0
 8007d48:	6102      	str	r2, [r0, #16]
 8007d4a:	bf08      	it	eq
 8007d4c:	6143      	streq	r3, [r0, #20]
 8007d4e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007d52:	f8dc c000 	ldr.w	ip, [ip]
 8007d56:	fa0c fc08 	lsl.w	ip, ip, r8
 8007d5a:	ea4c 0707 	orr.w	r7, ip, r7
 8007d5e:	f849 7b04 	str.w	r7, [r9], #4
 8007d62:	f85e 7b04 	ldr.w	r7, [lr], #4
 8007d66:	40cf      	lsrs	r7, r1
 8007d68:	e7da      	b.n	8007d20 <rshift+0x4c>
 8007d6a:	f851 cb04 	ldr.w	ip, [r1], #4
 8007d6e:	f847 cf04 	str.w	ip, [r7, #4]!
 8007d72:	e7c3      	b.n	8007cfc <rshift+0x28>
 8007d74:	4623      	mov	r3, r4
 8007d76:	e7e1      	b.n	8007d3c <rshift+0x68>

08007d78 <__hexdig_fun>:
 8007d78:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8007d7c:	2b09      	cmp	r3, #9
 8007d7e:	d802      	bhi.n	8007d86 <__hexdig_fun+0xe>
 8007d80:	3820      	subs	r0, #32
 8007d82:	b2c0      	uxtb	r0, r0
 8007d84:	4770      	bx	lr
 8007d86:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8007d8a:	2b05      	cmp	r3, #5
 8007d8c:	d801      	bhi.n	8007d92 <__hexdig_fun+0x1a>
 8007d8e:	3847      	subs	r0, #71	; 0x47
 8007d90:	e7f7      	b.n	8007d82 <__hexdig_fun+0xa>
 8007d92:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8007d96:	2b05      	cmp	r3, #5
 8007d98:	d801      	bhi.n	8007d9e <__hexdig_fun+0x26>
 8007d9a:	3827      	subs	r0, #39	; 0x27
 8007d9c:	e7f1      	b.n	8007d82 <__hexdig_fun+0xa>
 8007d9e:	2000      	movs	r0, #0
 8007da0:	4770      	bx	lr
	...

08007da4 <__gethex>:
 8007da4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007da8:	ed2d 8b02 	vpush	{d8}
 8007dac:	b089      	sub	sp, #36	; 0x24
 8007dae:	ee08 0a10 	vmov	s16, r0
 8007db2:	9304      	str	r3, [sp, #16]
 8007db4:	4bb4      	ldr	r3, [pc, #720]	; (8008088 <__gethex+0x2e4>)
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	9301      	str	r3, [sp, #4]
 8007dba:	4618      	mov	r0, r3
 8007dbc:	468b      	mov	fp, r1
 8007dbe:	4690      	mov	r8, r2
 8007dc0:	f7f8 fa18 	bl	80001f4 <strlen>
 8007dc4:	9b01      	ldr	r3, [sp, #4]
 8007dc6:	f8db 2000 	ldr.w	r2, [fp]
 8007dca:	4403      	add	r3, r0
 8007dcc:	4682      	mov	sl, r0
 8007dce:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8007dd2:	9305      	str	r3, [sp, #20]
 8007dd4:	1c93      	adds	r3, r2, #2
 8007dd6:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8007dda:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8007dde:	32fe      	adds	r2, #254	; 0xfe
 8007de0:	18d1      	adds	r1, r2, r3
 8007de2:	461f      	mov	r7, r3
 8007de4:	f813 0b01 	ldrb.w	r0, [r3], #1
 8007de8:	9100      	str	r1, [sp, #0]
 8007dea:	2830      	cmp	r0, #48	; 0x30
 8007dec:	d0f8      	beq.n	8007de0 <__gethex+0x3c>
 8007dee:	f7ff ffc3 	bl	8007d78 <__hexdig_fun>
 8007df2:	4604      	mov	r4, r0
 8007df4:	2800      	cmp	r0, #0
 8007df6:	d13a      	bne.n	8007e6e <__gethex+0xca>
 8007df8:	9901      	ldr	r1, [sp, #4]
 8007dfa:	4652      	mov	r2, sl
 8007dfc:	4638      	mov	r0, r7
 8007dfe:	f001 fdb3 	bl	8009968 <strncmp>
 8007e02:	4605      	mov	r5, r0
 8007e04:	2800      	cmp	r0, #0
 8007e06:	d168      	bne.n	8007eda <__gethex+0x136>
 8007e08:	f817 000a 	ldrb.w	r0, [r7, sl]
 8007e0c:	eb07 060a 	add.w	r6, r7, sl
 8007e10:	f7ff ffb2 	bl	8007d78 <__hexdig_fun>
 8007e14:	2800      	cmp	r0, #0
 8007e16:	d062      	beq.n	8007ede <__gethex+0x13a>
 8007e18:	4633      	mov	r3, r6
 8007e1a:	7818      	ldrb	r0, [r3, #0]
 8007e1c:	2830      	cmp	r0, #48	; 0x30
 8007e1e:	461f      	mov	r7, r3
 8007e20:	f103 0301 	add.w	r3, r3, #1
 8007e24:	d0f9      	beq.n	8007e1a <__gethex+0x76>
 8007e26:	f7ff ffa7 	bl	8007d78 <__hexdig_fun>
 8007e2a:	2301      	movs	r3, #1
 8007e2c:	fab0 f480 	clz	r4, r0
 8007e30:	0964      	lsrs	r4, r4, #5
 8007e32:	4635      	mov	r5, r6
 8007e34:	9300      	str	r3, [sp, #0]
 8007e36:	463a      	mov	r2, r7
 8007e38:	4616      	mov	r6, r2
 8007e3a:	3201      	adds	r2, #1
 8007e3c:	7830      	ldrb	r0, [r6, #0]
 8007e3e:	f7ff ff9b 	bl	8007d78 <__hexdig_fun>
 8007e42:	2800      	cmp	r0, #0
 8007e44:	d1f8      	bne.n	8007e38 <__gethex+0x94>
 8007e46:	9901      	ldr	r1, [sp, #4]
 8007e48:	4652      	mov	r2, sl
 8007e4a:	4630      	mov	r0, r6
 8007e4c:	f001 fd8c 	bl	8009968 <strncmp>
 8007e50:	b980      	cbnz	r0, 8007e74 <__gethex+0xd0>
 8007e52:	b94d      	cbnz	r5, 8007e68 <__gethex+0xc4>
 8007e54:	eb06 050a 	add.w	r5, r6, sl
 8007e58:	462a      	mov	r2, r5
 8007e5a:	4616      	mov	r6, r2
 8007e5c:	3201      	adds	r2, #1
 8007e5e:	7830      	ldrb	r0, [r6, #0]
 8007e60:	f7ff ff8a 	bl	8007d78 <__hexdig_fun>
 8007e64:	2800      	cmp	r0, #0
 8007e66:	d1f8      	bne.n	8007e5a <__gethex+0xb6>
 8007e68:	1bad      	subs	r5, r5, r6
 8007e6a:	00ad      	lsls	r5, r5, #2
 8007e6c:	e004      	b.n	8007e78 <__gethex+0xd4>
 8007e6e:	2400      	movs	r4, #0
 8007e70:	4625      	mov	r5, r4
 8007e72:	e7e0      	b.n	8007e36 <__gethex+0x92>
 8007e74:	2d00      	cmp	r5, #0
 8007e76:	d1f7      	bne.n	8007e68 <__gethex+0xc4>
 8007e78:	7833      	ldrb	r3, [r6, #0]
 8007e7a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8007e7e:	2b50      	cmp	r3, #80	; 0x50
 8007e80:	d13b      	bne.n	8007efa <__gethex+0x156>
 8007e82:	7873      	ldrb	r3, [r6, #1]
 8007e84:	2b2b      	cmp	r3, #43	; 0x2b
 8007e86:	d02c      	beq.n	8007ee2 <__gethex+0x13e>
 8007e88:	2b2d      	cmp	r3, #45	; 0x2d
 8007e8a:	d02e      	beq.n	8007eea <__gethex+0x146>
 8007e8c:	1c71      	adds	r1, r6, #1
 8007e8e:	f04f 0900 	mov.w	r9, #0
 8007e92:	7808      	ldrb	r0, [r1, #0]
 8007e94:	f7ff ff70 	bl	8007d78 <__hexdig_fun>
 8007e98:	1e43      	subs	r3, r0, #1
 8007e9a:	b2db      	uxtb	r3, r3
 8007e9c:	2b18      	cmp	r3, #24
 8007e9e:	d82c      	bhi.n	8007efa <__gethex+0x156>
 8007ea0:	f1a0 0210 	sub.w	r2, r0, #16
 8007ea4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8007ea8:	f7ff ff66 	bl	8007d78 <__hexdig_fun>
 8007eac:	1e43      	subs	r3, r0, #1
 8007eae:	b2db      	uxtb	r3, r3
 8007eb0:	2b18      	cmp	r3, #24
 8007eb2:	d91d      	bls.n	8007ef0 <__gethex+0x14c>
 8007eb4:	f1b9 0f00 	cmp.w	r9, #0
 8007eb8:	d000      	beq.n	8007ebc <__gethex+0x118>
 8007eba:	4252      	negs	r2, r2
 8007ebc:	4415      	add	r5, r2
 8007ebe:	f8cb 1000 	str.w	r1, [fp]
 8007ec2:	b1e4      	cbz	r4, 8007efe <__gethex+0x15a>
 8007ec4:	9b00      	ldr	r3, [sp, #0]
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	bf14      	ite	ne
 8007eca:	2700      	movne	r7, #0
 8007ecc:	2706      	moveq	r7, #6
 8007ece:	4638      	mov	r0, r7
 8007ed0:	b009      	add	sp, #36	; 0x24
 8007ed2:	ecbd 8b02 	vpop	{d8}
 8007ed6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007eda:	463e      	mov	r6, r7
 8007edc:	4625      	mov	r5, r4
 8007ede:	2401      	movs	r4, #1
 8007ee0:	e7ca      	b.n	8007e78 <__gethex+0xd4>
 8007ee2:	f04f 0900 	mov.w	r9, #0
 8007ee6:	1cb1      	adds	r1, r6, #2
 8007ee8:	e7d3      	b.n	8007e92 <__gethex+0xee>
 8007eea:	f04f 0901 	mov.w	r9, #1
 8007eee:	e7fa      	b.n	8007ee6 <__gethex+0x142>
 8007ef0:	230a      	movs	r3, #10
 8007ef2:	fb03 0202 	mla	r2, r3, r2, r0
 8007ef6:	3a10      	subs	r2, #16
 8007ef8:	e7d4      	b.n	8007ea4 <__gethex+0x100>
 8007efa:	4631      	mov	r1, r6
 8007efc:	e7df      	b.n	8007ebe <__gethex+0x11a>
 8007efe:	1bf3      	subs	r3, r6, r7
 8007f00:	3b01      	subs	r3, #1
 8007f02:	4621      	mov	r1, r4
 8007f04:	2b07      	cmp	r3, #7
 8007f06:	dc0b      	bgt.n	8007f20 <__gethex+0x17c>
 8007f08:	ee18 0a10 	vmov	r0, s16
 8007f0c:	f000 fa90 	bl	8008430 <_Balloc>
 8007f10:	4604      	mov	r4, r0
 8007f12:	b940      	cbnz	r0, 8007f26 <__gethex+0x182>
 8007f14:	4b5d      	ldr	r3, [pc, #372]	; (800808c <__gethex+0x2e8>)
 8007f16:	4602      	mov	r2, r0
 8007f18:	21de      	movs	r1, #222	; 0xde
 8007f1a:	485d      	ldr	r0, [pc, #372]	; (8008090 <__gethex+0x2ec>)
 8007f1c:	f001 fdf4 	bl	8009b08 <__assert_func>
 8007f20:	3101      	adds	r1, #1
 8007f22:	105b      	asrs	r3, r3, #1
 8007f24:	e7ee      	b.n	8007f04 <__gethex+0x160>
 8007f26:	f100 0914 	add.w	r9, r0, #20
 8007f2a:	f04f 0b00 	mov.w	fp, #0
 8007f2e:	f1ca 0301 	rsb	r3, sl, #1
 8007f32:	f8cd 9008 	str.w	r9, [sp, #8]
 8007f36:	f8cd b000 	str.w	fp, [sp]
 8007f3a:	9306      	str	r3, [sp, #24]
 8007f3c:	42b7      	cmp	r7, r6
 8007f3e:	d340      	bcc.n	8007fc2 <__gethex+0x21e>
 8007f40:	9802      	ldr	r0, [sp, #8]
 8007f42:	9b00      	ldr	r3, [sp, #0]
 8007f44:	f840 3b04 	str.w	r3, [r0], #4
 8007f48:	eba0 0009 	sub.w	r0, r0, r9
 8007f4c:	1080      	asrs	r0, r0, #2
 8007f4e:	0146      	lsls	r6, r0, #5
 8007f50:	6120      	str	r0, [r4, #16]
 8007f52:	4618      	mov	r0, r3
 8007f54:	f000 fb5e 	bl	8008614 <__hi0bits>
 8007f58:	1a30      	subs	r0, r6, r0
 8007f5a:	f8d8 6000 	ldr.w	r6, [r8]
 8007f5e:	42b0      	cmp	r0, r6
 8007f60:	dd63      	ble.n	800802a <__gethex+0x286>
 8007f62:	1b87      	subs	r7, r0, r6
 8007f64:	4639      	mov	r1, r7
 8007f66:	4620      	mov	r0, r4
 8007f68:	f000 ff02 	bl	8008d70 <__any_on>
 8007f6c:	4682      	mov	sl, r0
 8007f6e:	b1a8      	cbz	r0, 8007f9c <__gethex+0x1f8>
 8007f70:	1e7b      	subs	r3, r7, #1
 8007f72:	1159      	asrs	r1, r3, #5
 8007f74:	f003 021f 	and.w	r2, r3, #31
 8007f78:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8007f7c:	f04f 0a01 	mov.w	sl, #1
 8007f80:	fa0a f202 	lsl.w	r2, sl, r2
 8007f84:	420a      	tst	r2, r1
 8007f86:	d009      	beq.n	8007f9c <__gethex+0x1f8>
 8007f88:	4553      	cmp	r3, sl
 8007f8a:	dd05      	ble.n	8007f98 <__gethex+0x1f4>
 8007f8c:	1eb9      	subs	r1, r7, #2
 8007f8e:	4620      	mov	r0, r4
 8007f90:	f000 feee 	bl	8008d70 <__any_on>
 8007f94:	2800      	cmp	r0, #0
 8007f96:	d145      	bne.n	8008024 <__gethex+0x280>
 8007f98:	f04f 0a02 	mov.w	sl, #2
 8007f9c:	4639      	mov	r1, r7
 8007f9e:	4620      	mov	r0, r4
 8007fa0:	f7ff fe98 	bl	8007cd4 <rshift>
 8007fa4:	443d      	add	r5, r7
 8007fa6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007faa:	42ab      	cmp	r3, r5
 8007fac:	da4c      	bge.n	8008048 <__gethex+0x2a4>
 8007fae:	ee18 0a10 	vmov	r0, s16
 8007fb2:	4621      	mov	r1, r4
 8007fb4:	f000 fa7c 	bl	80084b0 <_Bfree>
 8007fb8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8007fba:	2300      	movs	r3, #0
 8007fbc:	6013      	str	r3, [r2, #0]
 8007fbe:	27a3      	movs	r7, #163	; 0xa3
 8007fc0:	e785      	b.n	8007ece <__gethex+0x12a>
 8007fc2:	1e73      	subs	r3, r6, #1
 8007fc4:	9a05      	ldr	r2, [sp, #20]
 8007fc6:	9303      	str	r3, [sp, #12]
 8007fc8:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8007fcc:	4293      	cmp	r3, r2
 8007fce:	d019      	beq.n	8008004 <__gethex+0x260>
 8007fd0:	f1bb 0f20 	cmp.w	fp, #32
 8007fd4:	d107      	bne.n	8007fe6 <__gethex+0x242>
 8007fd6:	9b02      	ldr	r3, [sp, #8]
 8007fd8:	9a00      	ldr	r2, [sp, #0]
 8007fda:	f843 2b04 	str.w	r2, [r3], #4
 8007fde:	9302      	str	r3, [sp, #8]
 8007fe0:	2300      	movs	r3, #0
 8007fe2:	9300      	str	r3, [sp, #0]
 8007fe4:	469b      	mov	fp, r3
 8007fe6:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8007fea:	f7ff fec5 	bl	8007d78 <__hexdig_fun>
 8007fee:	9b00      	ldr	r3, [sp, #0]
 8007ff0:	f000 000f 	and.w	r0, r0, #15
 8007ff4:	fa00 f00b 	lsl.w	r0, r0, fp
 8007ff8:	4303      	orrs	r3, r0
 8007ffa:	9300      	str	r3, [sp, #0]
 8007ffc:	f10b 0b04 	add.w	fp, fp, #4
 8008000:	9b03      	ldr	r3, [sp, #12]
 8008002:	e00d      	b.n	8008020 <__gethex+0x27c>
 8008004:	9b03      	ldr	r3, [sp, #12]
 8008006:	9a06      	ldr	r2, [sp, #24]
 8008008:	4413      	add	r3, r2
 800800a:	42bb      	cmp	r3, r7
 800800c:	d3e0      	bcc.n	8007fd0 <__gethex+0x22c>
 800800e:	4618      	mov	r0, r3
 8008010:	9901      	ldr	r1, [sp, #4]
 8008012:	9307      	str	r3, [sp, #28]
 8008014:	4652      	mov	r2, sl
 8008016:	f001 fca7 	bl	8009968 <strncmp>
 800801a:	9b07      	ldr	r3, [sp, #28]
 800801c:	2800      	cmp	r0, #0
 800801e:	d1d7      	bne.n	8007fd0 <__gethex+0x22c>
 8008020:	461e      	mov	r6, r3
 8008022:	e78b      	b.n	8007f3c <__gethex+0x198>
 8008024:	f04f 0a03 	mov.w	sl, #3
 8008028:	e7b8      	b.n	8007f9c <__gethex+0x1f8>
 800802a:	da0a      	bge.n	8008042 <__gethex+0x29e>
 800802c:	1a37      	subs	r7, r6, r0
 800802e:	4621      	mov	r1, r4
 8008030:	ee18 0a10 	vmov	r0, s16
 8008034:	463a      	mov	r2, r7
 8008036:	f000 fc57 	bl	80088e8 <__lshift>
 800803a:	1bed      	subs	r5, r5, r7
 800803c:	4604      	mov	r4, r0
 800803e:	f100 0914 	add.w	r9, r0, #20
 8008042:	f04f 0a00 	mov.w	sl, #0
 8008046:	e7ae      	b.n	8007fa6 <__gethex+0x202>
 8008048:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800804c:	42a8      	cmp	r0, r5
 800804e:	dd72      	ble.n	8008136 <__gethex+0x392>
 8008050:	1b45      	subs	r5, r0, r5
 8008052:	42ae      	cmp	r6, r5
 8008054:	dc36      	bgt.n	80080c4 <__gethex+0x320>
 8008056:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800805a:	2b02      	cmp	r3, #2
 800805c:	d02a      	beq.n	80080b4 <__gethex+0x310>
 800805e:	2b03      	cmp	r3, #3
 8008060:	d02c      	beq.n	80080bc <__gethex+0x318>
 8008062:	2b01      	cmp	r3, #1
 8008064:	d11c      	bne.n	80080a0 <__gethex+0x2fc>
 8008066:	42ae      	cmp	r6, r5
 8008068:	d11a      	bne.n	80080a0 <__gethex+0x2fc>
 800806a:	2e01      	cmp	r6, #1
 800806c:	d112      	bne.n	8008094 <__gethex+0x2f0>
 800806e:	9a04      	ldr	r2, [sp, #16]
 8008070:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8008074:	6013      	str	r3, [r2, #0]
 8008076:	2301      	movs	r3, #1
 8008078:	6123      	str	r3, [r4, #16]
 800807a:	f8c9 3000 	str.w	r3, [r9]
 800807e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008080:	2762      	movs	r7, #98	; 0x62
 8008082:	601c      	str	r4, [r3, #0]
 8008084:	e723      	b.n	8007ece <__gethex+0x12a>
 8008086:	bf00      	nop
 8008088:	0800c1c0 	.word	0x0800c1c0
 800808c:	0800c148 	.word	0x0800c148
 8008090:	0800c159 	.word	0x0800c159
 8008094:	1e71      	subs	r1, r6, #1
 8008096:	4620      	mov	r0, r4
 8008098:	f000 fe6a 	bl	8008d70 <__any_on>
 800809c:	2800      	cmp	r0, #0
 800809e:	d1e6      	bne.n	800806e <__gethex+0x2ca>
 80080a0:	ee18 0a10 	vmov	r0, s16
 80080a4:	4621      	mov	r1, r4
 80080a6:	f000 fa03 	bl	80084b0 <_Bfree>
 80080aa:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80080ac:	2300      	movs	r3, #0
 80080ae:	6013      	str	r3, [r2, #0]
 80080b0:	2750      	movs	r7, #80	; 0x50
 80080b2:	e70c      	b.n	8007ece <__gethex+0x12a>
 80080b4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d1f2      	bne.n	80080a0 <__gethex+0x2fc>
 80080ba:	e7d8      	b.n	800806e <__gethex+0x2ca>
 80080bc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d1d5      	bne.n	800806e <__gethex+0x2ca>
 80080c2:	e7ed      	b.n	80080a0 <__gethex+0x2fc>
 80080c4:	1e6f      	subs	r7, r5, #1
 80080c6:	f1ba 0f00 	cmp.w	sl, #0
 80080ca:	d131      	bne.n	8008130 <__gethex+0x38c>
 80080cc:	b127      	cbz	r7, 80080d8 <__gethex+0x334>
 80080ce:	4639      	mov	r1, r7
 80080d0:	4620      	mov	r0, r4
 80080d2:	f000 fe4d 	bl	8008d70 <__any_on>
 80080d6:	4682      	mov	sl, r0
 80080d8:	117b      	asrs	r3, r7, #5
 80080da:	2101      	movs	r1, #1
 80080dc:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 80080e0:	f007 071f 	and.w	r7, r7, #31
 80080e4:	fa01 f707 	lsl.w	r7, r1, r7
 80080e8:	421f      	tst	r7, r3
 80080ea:	4629      	mov	r1, r5
 80080ec:	4620      	mov	r0, r4
 80080ee:	bf18      	it	ne
 80080f0:	f04a 0a02 	orrne.w	sl, sl, #2
 80080f4:	1b76      	subs	r6, r6, r5
 80080f6:	f7ff fded 	bl	8007cd4 <rshift>
 80080fa:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80080fe:	2702      	movs	r7, #2
 8008100:	f1ba 0f00 	cmp.w	sl, #0
 8008104:	d048      	beq.n	8008198 <__gethex+0x3f4>
 8008106:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800810a:	2b02      	cmp	r3, #2
 800810c:	d015      	beq.n	800813a <__gethex+0x396>
 800810e:	2b03      	cmp	r3, #3
 8008110:	d017      	beq.n	8008142 <__gethex+0x39e>
 8008112:	2b01      	cmp	r3, #1
 8008114:	d109      	bne.n	800812a <__gethex+0x386>
 8008116:	f01a 0f02 	tst.w	sl, #2
 800811a:	d006      	beq.n	800812a <__gethex+0x386>
 800811c:	f8d9 0000 	ldr.w	r0, [r9]
 8008120:	ea4a 0a00 	orr.w	sl, sl, r0
 8008124:	f01a 0f01 	tst.w	sl, #1
 8008128:	d10e      	bne.n	8008148 <__gethex+0x3a4>
 800812a:	f047 0710 	orr.w	r7, r7, #16
 800812e:	e033      	b.n	8008198 <__gethex+0x3f4>
 8008130:	f04f 0a01 	mov.w	sl, #1
 8008134:	e7d0      	b.n	80080d8 <__gethex+0x334>
 8008136:	2701      	movs	r7, #1
 8008138:	e7e2      	b.n	8008100 <__gethex+0x35c>
 800813a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800813c:	f1c3 0301 	rsb	r3, r3, #1
 8008140:	9315      	str	r3, [sp, #84]	; 0x54
 8008142:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008144:	2b00      	cmp	r3, #0
 8008146:	d0f0      	beq.n	800812a <__gethex+0x386>
 8008148:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800814c:	f104 0314 	add.w	r3, r4, #20
 8008150:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8008154:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8008158:	f04f 0c00 	mov.w	ip, #0
 800815c:	4618      	mov	r0, r3
 800815e:	f853 2b04 	ldr.w	r2, [r3], #4
 8008162:	f1b2 3fff 	cmp.w	r2, #4294967295
 8008166:	d01c      	beq.n	80081a2 <__gethex+0x3fe>
 8008168:	3201      	adds	r2, #1
 800816a:	6002      	str	r2, [r0, #0]
 800816c:	2f02      	cmp	r7, #2
 800816e:	f104 0314 	add.w	r3, r4, #20
 8008172:	d13f      	bne.n	80081f4 <__gethex+0x450>
 8008174:	f8d8 2000 	ldr.w	r2, [r8]
 8008178:	3a01      	subs	r2, #1
 800817a:	42b2      	cmp	r2, r6
 800817c:	d10a      	bne.n	8008194 <__gethex+0x3f0>
 800817e:	1171      	asrs	r1, r6, #5
 8008180:	2201      	movs	r2, #1
 8008182:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008186:	f006 061f 	and.w	r6, r6, #31
 800818a:	fa02 f606 	lsl.w	r6, r2, r6
 800818e:	421e      	tst	r6, r3
 8008190:	bf18      	it	ne
 8008192:	4617      	movne	r7, r2
 8008194:	f047 0720 	orr.w	r7, r7, #32
 8008198:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800819a:	601c      	str	r4, [r3, #0]
 800819c:	9b04      	ldr	r3, [sp, #16]
 800819e:	601d      	str	r5, [r3, #0]
 80081a0:	e695      	b.n	8007ece <__gethex+0x12a>
 80081a2:	4299      	cmp	r1, r3
 80081a4:	f843 cc04 	str.w	ip, [r3, #-4]
 80081a8:	d8d8      	bhi.n	800815c <__gethex+0x3b8>
 80081aa:	68a3      	ldr	r3, [r4, #8]
 80081ac:	459b      	cmp	fp, r3
 80081ae:	db19      	blt.n	80081e4 <__gethex+0x440>
 80081b0:	6861      	ldr	r1, [r4, #4]
 80081b2:	ee18 0a10 	vmov	r0, s16
 80081b6:	3101      	adds	r1, #1
 80081b8:	f000 f93a 	bl	8008430 <_Balloc>
 80081bc:	4681      	mov	r9, r0
 80081be:	b918      	cbnz	r0, 80081c8 <__gethex+0x424>
 80081c0:	4b1a      	ldr	r3, [pc, #104]	; (800822c <__gethex+0x488>)
 80081c2:	4602      	mov	r2, r0
 80081c4:	2184      	movs	r1, #132	; 0x84
 80081c6:	e6a8      	b.n	8007f1a <__gethex+0x176>
 80081c8:	6922      	ldr	r2, [r4, #16]
 80081ca:	3202      	adds	r2, #2
 80081cc:	f104 010c 	add.w	r1, r4, #12
 80081d0:	0092      	lsls	r2, r2, #2
 80081d2:	300c      	adds	r0, #12
 80081d4:	f000 f91e 	bl	8008414 <memcpy>
 80081d8:	4621      	mov	r1, r4
 80081da:	ee18 0a10 	vmov	r0, s16
 80081de:	f000 f967 	bl	80084b0 <_Bfree>
 80081e2:	464c      	mov	r4, r9
 80081e4:	6923      	ldr	r3, [r4, #16]
 80081e6:	1c5a      	adds	r2, r3, #1
 80081e8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80081ec:	6122      	str	r2, [r4, #16]
 80081ee:	2201      	movs	r2, #1
 80081f0:	615a      	str	r2, [r3, #20]
 80081f2:	e7bb      	b.n	800816c <__gethex+0x3c8>
 80081f4:	6922      	ldr	r2, [r4, #16]
 80081f6:	455a      	cmp	r2, fp
 80081f8:	dd0b      	ble.n	8008212 <__gethex+0x46e>
 80081fa:	2101      	movs	r1, #1
 80081fc:	4620      	mov	r0, r4
 80081fe:	f7ff fd69 	bl	8007cd4 <rshift>
 8008202:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008206:	3501      	adds	r5, #1
 8008208:	42ab      	cmp	r3, r5
 800820a:	f6ff aed0 	blt.w	8007fae <__gethex+0x20a>
 800820e:	2701      	movs	r7, #1
 8008210:	e7c0      	b.n	8008194 <__gethex+0x3f0>
 8008212:	f016 061f 	ands.w	r6, r6, #31
 8008216:	d0fa      	beq.n	800820e <__gethex+0x46a>
 8008218:	4453      	add	r3, sl
 800821a:	f1c6 0620 	rsb	r6, r6, #32
 800821e:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8008222:	f000 f9f7 	bl	8008614 <__hi0bits>
 8008226:	42b0      	cmp	r0, r6
 8008228:	dbe7      	blt.n	80081fa <__gethex+0x456>
 800822a:	e7f0      	b.n	800820e <__gethex+0x46a>
 800822c:	0800c148 	.word	0x0800c148

08008230 <L_shift>:
 8008230:	f1c2 0208 	rsb	r2, r2, #8
 8008234:	0092      	lsls	r2, r2, #2
 8008236:	b570      	push	{r4, r5, r6, lr}
 8008238:	f1c2 0620 	rsb	r6, r2, #32
 800823c:	6843      	ldr	r3, [r0, #4]
 800823e:	6804      	ldr	r4, [r0, #0]
 8008240:	fa03 f506 	lsl.w	r5, r3, r6
 8008244:	432c      	orrs	r4, r5
 8008246:	40d3      	lsrs	r3, r2
 8008248:	6004      	str	r4, [r0, #0]
 800824a:	f840 3f04 	str.w	r3, [r0, #4]!
 800824e:	4288      	cmp	r0, r1
 8008250:	d3f4      	bcc.n	800823c <L_shift+0xc>
 8008252:	bd70      	pop	{r4, r5, r6, pc}

08008254 <__match>:
 8008254:	b530      	push	{r4, r5, lr}
 8008256:	6803      	ldr	r3, [r0, #0]
 8008258:	3301      	adds	r3, #1
 800825a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800825e:	b914      	cbnz	r4, 8008266 <__match+0x12>
 8008260:	6003      	str	r3, [r0, #0]
 8008262:	2001      	movs	r0, #1
 8008264:	bd30      	pop	{r4, r5, pc}
 8008266:	f813 2b01 	ldrb.w	r2, [r3], #1
 800826a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800826e:	2d19      	cmp	r5, #25
 8008270:	bf98      	it	ls
 8008272:	3220      	addls	r2, #32
 8008274:	42a2      	cmp	r2, r4
 8008276:	d0f0      	beq.n	800825a <__match+0x6>
 8008278:	2000      	movs	r0, #0
 800827a:	e7f3      	b.n	8008264 <__match+0x10>

0800827c <__hexnan>:
 800827c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008280:	680b      	ldr	r3, [r1, #0]
 8008282:	115e      	asrs	r6, r3, #5
 8008284:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8008288:	f013 031f 	ands.w	r3, r3, #31
 800828c:	b087      	sub	sp, #28
 800828e:	bf18      	it	ne
 8008290:	3604      	addne	r6, #4
 8008292:	2500      	movs	r5, #0
 8008294:	1f37      	subs	r7, r6, #4
 8008296:	4690      	mov	r8, r2
 8008298:	6802      	ldr	r2, [r0, #0]
 800829a:	9301      	str	r3, [sp, #4]
 800829c:	4682      	mov	sl, r0
 800829e:	f846 5c04 	str.w	r5, [r6, #-4]
 80082a2:	46b9      	mov	r9, r7
 80082a4:	463c      	mov	r4, r7
 80082a6:	9502      	str	r5, [sp, #8]
 80082a8:	46ab      	mov	fp, r5
 80082aa:	7851      	ldrb	r1, [r2, #1]
 80082ac:	1c53      	adds	r3, r2, #1
 80082ae:	9303      	str	r3, [sp, #12]
 80082b0:	b341      	cbz	r1, 8008304 <__hexnan+0x88>
 80082b2:	4608      	mov	r0, r1
 80082b4:	9205      	str	r2, [sp, #20]
 80082b6:	9104      	str	r1, [sp, #16]
 80082b8:	f7ff fd5e 	bl	8007d78 <__hexdig_fun>
 80082bc:	2800      	cmp	r0, #0
 80082be:	d14f      	bne.n	8008360 <__hexnan+0xe4>
 80082c0:	9904      	ldr	r1, [sp, #16]
 80082c2:	9a05      	ldr	r2, [sp, #20]
 80082c4:	2920      	cmp	r1, #32
 80082c6:	d818      	bhi.n	80082fa <__hexnan+0x7e>
 80082c8:	9b02      	ldr	r3, [sp, #8]
 80082ca:	459b      	cmp	fp, r3
 80082cc:	dd13      	ble.n	80082f6 <__hexnan+0x7a>
 80082ce:	454c      	cmp	r4, r9
 80082d0:	d206      	bcs.n	80082e0 <__hexnan+0x64>
 80082d2:	2d07      	cmp	r5, #7
 80082d4:	dc04      	bgt.n	80082e0 <__hexnan+0x64>
 80082d6:	462a      	mov	r2, r5
 80082d8:	4649      	mov	r1, r9
 80082da:	4620      	mov	r0, r4
 80082dc:	f7ff ffa8 	bl	8008230 <L_shift>
 80082e0:	4544      	cmp	r4, r8
 80082e2:	d950      	bls.n	8008386 <__hexnan+0x10a>
 80082e4:	2300      	movs	r3, #0
 80082e6:	f1a4 0904 	sub.w	r9, r4, #4
 80082ea:	f844 3c04 	str.w	r3, [r4, #-4]
 80082ee:	f8cd b008 	str.w	fp, [sp, #8]
 80082f2:	464c      	mov	r4, r9
 80082f4:	461d      	mov	r5, r3
 80082f6:	9a03      	ldr	r2, [sp, #12]
 80082f8:	e7d7      	b.n	80082aa <__hexnan+0x2e>
 80082fa:	2929      	cmp	r1, #41	; 0x29
 80082fc:	d156      	bne.n	80083ac <__hexnan+0x130>
 80082fe:	3202      	adds	r2, #2
 8008300:	f8ca 2000 	str.w	r2, [sl]
 8008304:	f1bb 0f00 	cmp.w	fp, #0
 8008308:	d050      	beq.n	80083ac <__hexnan+0x130>
 800830a:	454c      	cmp	r4, r9
 800830c:	d206      	bcs.n	800831c <__hexnan+0xa0>
 800830e:	2d07      	cmp	r5, #7
 8008310:	dc04      	bgt.n	800831c <__hexnan+0xa0>
 8008312:	462a      	mov	r2, r5
 8008314:	4649      	mov	r1, r9
 8008316:	4620      	mov	r0, r4
 8008318:	f7ff ff8a 	bl	8008230 <L_shift>
 800831c:	4544      	cmp	r4, r8
 800831e:	d934      	bls.n	800838a <__hexnan+0x10e>
 8008320:	f1a8 0204 	sub.w	r2, r8, #4
 8008324:	4623      	mov	r3, r4
 8008326:	f853 1b04 	ldr.w	r1, [r3], #4
 800832a:	f842 1f04 	str.w	r1, [r2, #4]!
 800832e:	429f      	cmp	r7, r3
 8008330:	d2f9      	bcs.n	8008326 <__hexnan+0xaa>
 8008332:	1b3b      	subs	r3, r7, r4
 8008334:	f023 0303 	bic.w	r3, r3, #3
 8008338:	3304      	adds	r3, #4
 800833a:	3401      	adds	r4, #1
 800833c:	3e03      	subs	r6, #3
 800833e:	42b4      	cmp	r4, r6
 8008340:	bf88      	it	hi
 8008342:	2304      	movhi	r3, #4
 8008344:	4443      	add	r3, r8
 8008346:	2200      	movs	r2, #0
 8008348:	f843 2b04 	str.w	r2, [r3], #4
 800834c:	429f      	cmp	r7, r3
 800834e:	d2fb      	bcs.n	8008348 <__hexnan+0xcc>
 8008350:	683b      	ldr	r3, [r7, #0]
 8008352:	b91b      	cbnz	r3, 800835c <__hexnan+0xe0>
 8008354:	4547      	cmp	r7, r8
 8008356:	d127      	bne.n	80083a8 <__hexnan+0x12c>
 8008358:	2301      	movs	r3, #1
 800835a:	603b      	str	r3, [r7, #0]
 800835c:	2005      	movs	r0, #5
 800835e:	e026      	b.n	80083ae <__hexnan+0x132>
 8008360:	3501      	adds	r5, #1
 8008362:	2d08      	cmp	r5, #8
 8008364:	f10b 0b01 	add.w	fp, fp, #1
 8008368:	dd06      	ble.n	8008378 <__hexnan+0xfc>
 800836a:	4544      	cmp	r4, r8
 800836c:	d9c3      	bls.n	80082f6 <__hexnan+0x7a>
 800836e:	2300      	movs	r3, #0
 8008370:	f844 3c04 	str.w	r3, [r4, #-4]
 8008374:	2501      	movs	r5, #1
 8008376:	3c04      	subs	r4, #4
 8008378:	6822      	ldr	r2, [r4, #0]
 800837a:	f000 000f 	and.w	r0, r0, #15
 800837e:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8008382:	6022      	str	r2, [r4, #0]
 8008384:	e7b7      	b.n	80082f6 <__hexnan+0x7a>
 8008386:	2508      	movs	r5, #8
 8008388:	e7b5      	b.n	80082f6 <__hexnan+0x7a>
 800838a:	9b01      	ldr	r3, [sp, #4]
 800838c:	2b00      	cmp	r3, #0
 800838e:	d0df      	beq.n	8008350 <__hexnan+0xd4>
 8008390:	f04f 32ff 	mov.w	r2, #4294967295
 8008394:	f1c3 0320 	rsb	r3, r3, #32
 8008398:	fa22 f303 	lsr.w	r3, r2, r3
 800839c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80083a0:	401a      	ands	r2, r3
 80083a2:	f846 2c04 	str.w	r2, [r6, #-4]
 80083a6:	e7d3      	b.n	8008350 <__hexnan+0xd4>
 80083a8:	3f04      	subs	r7, #4
 80083aa:	e7d1      	b.n	8008350 <__hexnan+0xd4>
 80083ac:	2004      	movs	r0, #4
 80083ae:	b007      	add	sp, #28
 80083b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080083b4 <_localeconv_r>:
 80083b4:	4800      	ldr	r0, [pc, #0]	; (80083b8 <_localeconv_r+0x4>)
 80083b6:	4770      	bx	lr
 80083b8:	2000016c 	.word	0x2000016c

080083bc <_lseek_r>:
 80083bc:	b538      	push	{r3, r4, r5, lr}
 80083be:	4d07      	ldr	r5, [pc, #28]	; (80083dc <_lseek_r+0x20>)
 80083c0:	4604      	mov	r4, r0
 80083c2:	4608      	mov	r0, r1
 80083c4:	4611      	mov	r1, r2
 80083c6:	2200      	movs	r2, #0
 80083c8:	602a      	str	r2, [r5, #0]
 80083ca:	461a      	mov	r2, r3
 80083cc:	f7fa fb41 	bl	8002a52 <_lseek>
 80083d0:	1c43      	adds	r3, r0, #1
 80083d2:	d102      	bne.n	80083da <_lseek_r+0x1e>
 80083d4:	682b      	ldr	r3, [r5, #0]
 80083d6:	b103      	cbz	r3, 80083da <_lseek_r+0x1e>
 80083d8:	6023      	str	r3, [r4, #0]
 80083da:	bd38      	pop	{r3, r4, r5, pc}
 80083dc:	20000d14 	.word	0x20000d14

080083e0 <malloc>:
 80083e0:	4b02      	ldr	r3, [pc, #8]	; (80083ec <malloc+0xc>)
 80083e2:	4601      	mov	r1, r0
 80083e4:	6818      	ldr	r0, [r3, #0]
 80083e6:	f000 bd67 	b.w	8008eb8 <_malloc_r>
 80083ea:	bf00      	nop
 80083ec:	20000014 	.word	0x20000014

080083f0 <__ascii_mbtowc>:
 80083f0:	b082      	sub	sp, #8
 80083f2:	b901      	cbnz	r1, 80083f6 <__ascii_mbtowc+0x6>
 80083f4:	a901      	add	r1, sp, #4
 80083f6:	b142      	cbz	r2, 800840a <__ascii_mbtowc+0x1a>
 80083f8:	b14b      	cbz	r3, 800840e <__ascii_mbtowc+0x1e>
 80083fa:	7813      	ldrb	r3, [r2, #0]
 80083fc:	600b      	str	r3, [r1, #0]
 80083fe:	7812      	ldrb	r2, [r2, #0]
 8008400:	1e10      	subs	r0, r2, #0
 8008402:	bf18      	it	ne
 8008404:	2001      	movne	r0, #1
 8008406:	b002      	add	sp, #8
 8008408:	4770      	bx	lr
 800840a:	4610      	mov	r0, r2
 800840c:	e7fb      	b.n	8008406 <__ascii_mbtowc+0x16>
 800840e:	f06f 0001 	mvn.w	r0, #1
 8008412:	e7f8      	b.n	8008406 <__ascii_mbtowc+0x16>

08008414 <memcpy>:
 8008414:	440a      	add	r2, r1
 8008416:	4291      	cmp	r1, r2
 8008418:	f100 33ff 	add.w	r3, r0, #4294967295
 800841c:	d100      	bne.n	8008420 <memcpy+0xc>
 800841e:	4770      	bx	lr
 8008420:	b510      	push	{r4, lr}
 8008422:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008426:	f803 4f01 	strb.w	r4, [r3, #1]!
 800842a:	4291      	cmp	r1, r2
 800842c:	d1f9      	bne.n	8008422 <memcpy+0xe>
 800842e:	bd10      	pop	{r4, pc}

08008430 <_Balloc>:
 8008430:	b570      	push	{r4, r5, r6, lr}
 8008432:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008434:	4604      	mov	r4, r0
 8008436:	460d      	mov	r5, r1
 8008438:	b976      	cbnz	r6, 8008458 <_Balloc+0x28>
 800843a:	2010      	movs	r0, #16
 800843c:	f7ff ffd0 	bl	80083e0 <malloc>
 8008440:	4602      	mov	r2, r0
 8008442:	6260      	str	r0, [r4, #36]	; 0x24
 8008444:	b920      	cbnz	r0, 8008450 <_Balloc+0x20>
 8008446:	4b18      	ldr	r3, [pc, #96]	; (80084a8 <_Balloc+0x78>)
 8008448:	4818      	ldr	r0, [pc, #96]	; (80084ac <_Balloc+0x7c>)
 800844a:	2166      	movs	r1, #102	; 0x66
 800844c:	f001 fb5c 	bl	8009b08 <__assert_func>
 8008450:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008454:	6006      	str	r6, [r0, #0]
 8008456:	60c6      	str	r6, [r0, #12]
 8008458:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800845a:	68f3      	ldr	r3, [r6, #12]
 800845c:	b183      	cbz	r3, 8008480 <_Balloc+0x50>
 800845e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008460:	68db      	ldr	r3, [r3, #12]
 8008462:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008466:	b9b8      	cbnz	r0, 8008498 <_Balloc+0x68>
 8008468:	2101      	movs	r1, #1
 800846a:	fa01 f605 	lsl.w	r6, r1, r5
 800846e:	1d72      	adds	r2, r6, #5
 8008470:	0092      	lsls	r2, r2, #2
 8008472:	4620      	mov	r0, r4
 8008474:	f000 fc9d 	bl	8008db2 <_calloc_r>
 8008478:	b160      	cbz	r0, 8008494 <_Balloc+0x64>
 800847a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800847e:	e00e      	b.n	800849e <_Balloc+0x6e>
 8008480:	2221      	movs	r2, #33	; 0x21
 8008482:	2104      	movs	r1, #4
 8008484:	4620      	mov	r0, r4
 8008486:	f000 fc94 	bl	8008db2 <_calloc_r>
 800848a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800848c:	60f0      	str	r0, [r6, #12]
 800848e:	68db      	ldr	r3, [r3, #12]
 8008490:	2b00      	cmp	r3, #0
 8008492:	d1e4      	bne.n	800845e <_Balloc+0x2e>
 8008494:	2000      	movs	r0, #0
 8008496:	bd70      	pop	{r4, r5, r6, pc}
 8008498:	6802      	ldr	r2, [r0, #0]
 800849a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800849e:	2300      	movs	r3, #0
 80084a0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80084a4:	e7f7      	b.n	8008496 <_Balloc+0x66>
 80084a6:	bf00      	nop
 80084a8:	0800c0d6 	.word	0x0800c0d6
 80084ac:	0800c1d4 	.word	0x0800c1d4

080084b0 <_Bfree>:
 80084b0:	b570      	push	{r4, r5, r6, lr}
 80084b2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80084b4:	4605      	mov	r5, r0
 80084b6:	460c      	mov	r4, r1
 80084b8:	b976      	cbnz	r6, 80084d8 <_Bfree+0x28>
 80084ba:	2010      	movs	r0, #16
 80084bc:	f7ff ff90 	bl	80083e0 <malloc>
 80084c0:	4602      	mov	r2, r0
 80084c2:	6268      	str	r0, [r5, #36]	; 0x24
 80084c4:	b920      	cbnz	r0, 80084d0 <_Bfree+0x20>
 80084c6:	4b09      	ldr	r3, [pc, #36]	; (80084ec <_Bfree+0x3c>)
 80084c8:	4809      	ldr	r0, [pc, #36]	; (80084f0 <_Bfree+0x40>)
 80084ca:	218a      	movs	r1, #138	; 0x8a
 80084cc:	f001 fb1c 	bl	8009b08 <__assert_func>
 80084d0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80084d4:	6006      	str	r6, [r0, #0]
 80084d6:	60c6      	str	r6, [r0, #12]
 80084d8:	b13c      	cbz	r4, 80084ea <_Bfree+0x3a>
 80084da:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80084dc:	6862      	ldr	r2, [r4, #4]
 80084de:	68db      	ldr	r3, [r3, #12]
 80084e0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80084e4:	6021      	str	r1, [r4, #0]
 80084e6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80084ea:	bd70      	pop	{r4, r5, r6, pc}
 80084ec:	0800c0d6 	.word	0x0800c0d6
 80084f0:	0800c1d4 	.word	0x0800c1d4

080084f4 <__multadd>:
 80084f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80084f8:	690d      	ldr	r5, [r1, #16]
 80084fa:	4607      	mov	r7, r0
 80084fc:	460c      	mov	r4, r1
 80084fe:	461e      	mov	r6, r3
 8008500:	f101 0c14 	add.w	ip, r1, #20
 8008504:	2000      	movs	r0, #0
 8008506:	f8dc 3000 	ldr.w	r3, [ip]
 800850a:	b299      	uxth	r1, r3
 800850c:	fb02 6101 	mla	r1, r2, r1, r6
 8008510:	0c1e      	lsrs	r6, r3, #16
 8008512:	0c0b      	lsrs	r3, r1, #16
 8008514:	fb02 3306 	mla	r3, r2, r6, r3
 8008518:	b289      	uxth	r1, r1
 800851a:	3001      	adds	r0, #1
 800851c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008520:	4285      	cmp	r5, r0
 8008522:	f84c 1b04 	str.w	r1, [ip], #4
 8008526:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800852a:	dcec      	bgt.n	8008506 <__multadd+0x12>
 800852c:	b30e      	cbz	r6, 8008572 <__multadd+0x7e>
 800852e:	68a3      	ldr	r3, [r4, #8]
 8008530:	42ab      	cmp	r3, r5
 8008532:	dc19      	bgt.n	8008568 <__multadd+0x74>
 8008534:	6861      	ldr	r1, [r4, #4]
 8008536:	4638      	mov	r0, r7
 8008538:	3101      	adds	r1, #1
 800853a:	f7ff ff79 	bl	8008430 <_Balloc>
 800853e:	4680      	mov	r8, r0
 8008540:	b928      	cbnz	r0, 800854e <__multadd+0x5a>
 8008542:	4602      	mov	r2, r0
 8008544:	4b0c      	ldr	r3, [pc, #48]	; (8008578 <__multadd+0x84>)
 8008546:	480d      	ldr	r0, [pc, #52]	; (800857c <__multadd+0x88>)
 8008548:	21b5      	movs	r1, #181	; 0xb5
 800854a:	f001 fadd 	bl	8009b08 <__assert_func>
 800854e:	6922      	ldr	r2, [r4, #16]
 8008550:	3202      	adds	r2, #2
 8008552:	f104 010c 	add.w	r1, r4, #12
 8008556:	0092      	lsls	r2, r2, #2
 8008558:	300c      	adds	r0, #12
 800855a:	f7ff ff5b 	bl	8008414 <memcpy>
 800855e:	4621      	mov	r1, r4
 8008560:	4638      	mov	r0, r7
 8008562:	f7ff ffa5 	bl	80084b0 <_Bfree>
 8008566:	4644      	mov	r4, r8
 8008568:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800856c:	3501      	adds	r5, #1
 800856e:	615e      	str	r6, [r3, #20]
 8008570:	6125      	str	r5, [r4, #16]
 8008572:	4620      	mov	r0, r4
 8008574:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008578:	0800c148 	.word	0x0800c148
 800857c:	0800c1d4 	.word	0x0800c1d4

08008580 <__s2b>:
 8008580:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008584:	460c      	mov	r4, r1
 8008586:	4615      	mov	r5, r2
 8008588:	461f      	mov	r7, r3
 800858a:	2209      	movs	r2, #9
 800858c:	3308      	adds	r3, #8
 800858e:	4606      	mov	r6, r0
 8008590:	fb93 f3f2 	sdiv	r3, r3, r2
 8008594:	2100      	movs	r1, #0
 8008596:	2201      	movs	r2, #1
 8008598:	429a      	cmp	r2, r3
 800859a:	db09      	blt.n	80085b0 <__s2b+0x30>
 800859c:	4630      	mov	r0, r6
 800859e:	f7ff ff47 	bl	8008430 <_Balloc>
 80085a2:	b940      	cbnz	r0, 80085b6 <__s2b+0x36>
 80085a4:	4602      	mov	r2, r0
 80085a6:	4b19      	ldr	r3, [pc, #100]	; (800860c <__s2b+0x8c>)
 80085a8:	4819      	ldr	r0, [pc, #100]	; (8008610 <__s2b+0x90>)
 80085aa:	21ce      	movs	r1, #206	; 0xce
 80085ac:	f001 faac 	bl	8009b08 <__assert_func>
 80085b0:	0052      	lsls	r2, r2, #1
 80085b2:	3101      	adds	r1, #1
 80085b4:	e7f0      	b.n	8008598 <__s2b+0x18>
 80085b6:	9b08      	ldr	r3, [sp, #32]
 80085b8:	6143      	str	r3, [r0, #20]
 80085ba:	2d09      	cmp	r5, #9
 80085bc:	f04f 0301 	mov.w	r3, #1
 80085c0:	6103      	str	r3, [r0, #16]
 80085c2:	dd16      	ble.n	80085f2 <__s2b+0x72>
 80085c4:	f104 0909 	add.w	r9, r4, #9
 80085c8:	46c8      	mov	r8, r9
 80085ca:	442c      	add	r4, r5
 80085cc:	f818 3b01 	ldrb.w	r3, [r8], #1
 80085d0:	4601      	mov	r1, r0
 80085d2:	3b30      	subs	r3, #48	; 0x30
 80085d4:	220a      	movs	r2, #10
 80085d6:	4630      	mov	r0, r6
 80085d8:	f7ff ff8c 	bl	80084f4 <__multadd>
 80085dc:	45a0      	cmp	r8, r4
 80085de:	d1f5      	bne.n	80085cc <__s2b+0x4c>
 80085e0:	f1a5 0408 	sub.w	r4, r5, #8
 80085e4:	444c      	add	r4, r9
 80085e6:	1b2d      	subs	r5, r5, r4
 80085e8:	1963      	adds	r3, r4, r5
 80085ea:	42bb      	cmp	r3, r7
 80085ec:	db04      	blt.n	80085f8 <__s2b+0x78>
 80085ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80085f2:	340a      	adds	r4, #10
 80085f4:	2509      	movs	r5, #9
 80085f6:	e7f6      	b.n	80085e6 <__s2b+0x66>
 80085f8:	f814 3b01 	ldrb.w	r3, [r4], #1
 80085fc:	4601      	mov	r1, r0
 80085fe:	3b30      	subs	r3, #48	; 0x30
 8008600:	220a      	movs	r2, #10
 8008602:	4630      	mov	r0, r6
 8008604:	f7ff ff76 	bl	80084f4 <__multadd>
 8008608:	e7ee      	b.n	80085e8 <__s2b+0x68>
 800860a:	bf00      	nop
 800860c:	0800c148 	.word	0x0800c148
 8008610:	0800c1d4 	.word	0x0800c1d4

08008614 <__hi0bits>:
 8008614:	0c03      	lsrs	r3, r0, #16
 8008616:	041b      	lsls	r3, r3, #16
 8008618:	b9d3      	cbnz	r3, 8008650 <__hi0bits+0x3c>
 800861a:	0400      	lsls	r0, r0, #16
 800861c:	2310      	movs	r3, #16
 800861e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8008622:	bf04      	itt	eq
 8008624:	0200      	lsleq	r0, r0, #8
 8008626:	3308      	addeq	r3, #8
 8008628:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800862c:	bf04      	itt	eq
 800862e:	0100      	lsleq	r0, r0, #4
 8008630:	3304      	addeq	r3, #4
 8008632:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8008636:	bf04      	itt	eq
 8008638:	0080      	lsleq	r0, r0, #2
 800863a:	3302      	addeq	r3, #2
 800863c:	2800      	cmp	r0, #0
 800863e:	db05      	blt.n	800864c <__hi0bits+0x38>
 8008640:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8008644:	f103 0301 	add.w	r3, r3, #1
 8008648:	bf08      	it	eq
 800864a:	2320      	moveq	r3, #32
 800864c:	4618      	mov	r0, r3
 800864e:	4770      	bx	lr
 8008650:	2300      	movs	r3, #0
 8008652:	e7e4      	b.n	800861e <__hi0bits+0xa>

08008654 <__lo0bits>:
 8008654:	6803      	ldr	r3, [r0, #0]
 8008656:	f013 0207 	ands.w	r2, r3, #7
 800865a:	4601      	mov	r1, r0
 800865c:	d00b      	beq.n	8008676 <__lo0bits+0x22>
 800865e:	07da      	lsls	r2, r3, #31
 8008660:	d423      	bmi.n	80086aa <__lo0bits+0x56>
 8008662:	0798      	lsls	r0, r3, #30
 8008664:	bf49      	itett	mi
 8008666:	085b      	lsrmi	r3, r3, #1
 8008668:	089b      	lsrpl	r3, r3, #2
 800866a:	2001      	movmi	r0, #1
 800866c:	600b      	strmi	r3, [r1, #0]
 800866e:	bf5c      	itt	pl
 8008670:	600b      	strpl	r3, [r1, #0]
 8008672:	2002      	movpl	r0, #2
 8008674:	4770      	bx	lr
 8008676:	b298      	uxth	r0, r3
 8008678:	b9a8      	cbnz	r0, 80086a6 <__lo0bits+0x52>
 800867a:	0c1b      	lsrs	r3, r3, #16
 800867c:	2010      	movs	r0, #16
 800867e:	b2da      	uxtb	r2, r3
 8008680:	b90a      	cbnz	r2, 8008686 <__lo0bits+0x32>
 8008682:	3008      	adds	r0, #8
 8008684:	0a1b      	lsrs	r3, r3, #8
 8008686:	071a      	lsls	r2, r3, #28
 8008688:	bf04      	itt	eq
 800868a:	091b      	lsreq	r3, r3, #4
 800868c:	3004      	addeq	r0, #4
 800868e:	079a      	lsls	r2, r3, #30
 8008690:	bf04      	itt	eq
 8008692:	089b      	lsreq	r3, r3, #2
 8008694:	3002      	addeq	r0, #2
 8008696:	07da      	lsls	r2, r3, #31
 8008698:	d403      	bmi.n	80086a2 <__lo0bits+0x4e>
 800869a:	085b      	lsrs	r3, r3, #1
 800869c:	f100 0001 	add.w	r0, r0, #1
 80086a0:	d005      	beq.n	80086ae <__lo0bits+0x5a>
 80086a2:	600b      	str	r3, [r1, #0]
 80086a4:	4770      	bx	lr
 80086a6:	4610      	mov	r0, r2
 80086a8:	e7e9      	b.n	800867e <__lo0bits+0x2a>
 80086aa:	2000      	movs	r0, #0
 80086ac:	4770      	bx	lr
 80086ae:	2020      	movs	r0, #32
 80086b0:	4770      	bx	lr
	...

080086b4 <__i2b>:
 80086b4:	b510      	push	{r4, lr}
 80086b6:	460c      	mov	r4, r1
 80086b8:	2101      	movs	r1, #1
 80086ba:	f7ff feb9 	bl	8008430 <_Balloc>
 80086be:	4602      	mov	r2, r0
 80086c0:	b928      	cbnz	r0, 80086ce <__i2b+0x1a>
 80086c2:	4b05      	ldr	r3, [pc, #20]	; (80086d8 <__i2b+0x24>)
 80086c4:	4805      	ldr	r0, [pc, #20]	; (80086dc <__i2b+0x28>)
 80086c6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80086ca:	f001 fa1d 	bl	8009b08 <__assert_func>
 80086ce:	2301      	movs	r3, #1
 80086d0:	6144      	str	r4, [r0, #20]
 80086d2:	6103      	str	r3, [r0, #16]
 80086d4:	bd10      	pop	{r4, pc}
 80086d6:	bf00      	nop
 80086d8:	0800c148 	.word	0x0800c148
 80086dc:	0800c1d4 	.word	0x0800c1d4

080086e0 <__multiply>:
 80086e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80086e4:	4691      	mov	r9, r2
 80086e6:	690a      	ldr	r2, [r1, #16]
 80086e8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80086ec:	429a      	cmp	r2, r3
 80086ee:	bfb8      	it	lt
 80086f0:	460b      	movlt	r3, r1
 80086f2:	460c      	mov	r4, r1
 80086f4:	bfbc      	itt	lt
 80086f6:	464c      	movlt	r4, r9
 80086f8:	4699      	movlt	r9, r3
 80086fa:	6927      	ldr	r7, [r4, #16]
 80086fc:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8008700:	68a3      	ldr	r3, [r4, #8]
 8008702:	6861      	ldr	r1, [r4, #4]
 8008704:	eb07 060a 	add.w	r6, r7, sl
 8008708:	42b3      	cmp	r3, r6
 800870a:	b085      	sub	sp, #20
 800870c:	bfb8      	it	lt
 800870e:	3101      	addlt	r1, #1
 8008710:	f7ff fe8e 	bl	8008430 <_Balloc>
 8008714:	b930      	cbnz	r0, 8008724 <__multiply+0x44>
 8008716:	4602      	mov	r2, r0
 8008718:	4b44      	ldr	r3, [pc, #272]	; (800882c <__multiply+0x14c>)
 800871a:	4845      	ldr	r0, [pc, #276]	; (8008830 <__multiply+0x150>)
 800871c:	f240 115d 	movw	r1, #349	; 0x15d
 8008720:	f001 f9f2 	bl	8009b08 <__assert_func>
 8008724:	f100 0514 	add.w	r5, r0, #20
 8008728:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800872c:	462b      	mov	r3, r5
 800872e:	2200      	movs	r2, #0
 8008730:	4543      	cmp	r3, r8
 8008732:	d321      	bcc.n	8008778 <__multiply+0x98>
 8008734:	f104 0314 	add.w	r3, r4, #20
 8008738:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800873c:	f109 0314 	add.w	r3, r9, #20
 8008740:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8008744:	9202      	str	r2, [sp, #8]
 8008746:	1b3a      	subs	r2, r7, r4
 8008748:	3a15      	subs	r2, #21
 800874a:	f022 0203 	bic.w	r2, r2, #3
 800874e:	3204      	adds	r2, #4
 8008750:	f104 0115 	add.w	r1, r4, #21
 8008754:	428f      	cmp	r7, r1
 8008756:	bf38      	it	cc
 8008758:	2204      	movcc	r2, #4
 800875a:	9201      	str	r2, [sp, #4]
 800875c:	9a02      	ldr	r2, [sp, #8]
 800875e:	9303      	str	r3, [sp, #12]
 8008760:	429a      	cmp	r2, r3
 8008762:	d80c      	bhi.n	800877e <__multiply+0x9e>
 8008764:	2e00      	cmp	r6, #0
 8008766:	dd03      	ble.n	8008770 <__multiply+0x90>
 8008768:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800876c:	2b00      	cmp	r3, #0
 800876e:	d05a      	beq.n	8008826 <__multiply+0x146>
 8008770:	6106      	str	r6, [r0, #16]
 8008772:	b005      	add	sp, #20
 8008774:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008778:	f843 2b04 	str.w	r2, [r3], #4
 800877c:	e7d8      	b.n	8008730 <__multiply+0x50>
 800877e:	f8b3 a000 	ldrh.w	sl, [r3]
 8008782:	f1ba 0f00 	cmp.w	sl, #0
 8008786:	d024      	beq.n	80087d2 <__multiply+0xf2>
 8008788:	f104 0e14 	add.w	lr, r4, #20
 800878c:	46a9      	mov	r9, r5
 800878e:	f04f 0c00 	mov.w	ip, #0
 8008792:	f85e 2b04 	ldr.w	r2, [lr], #4
 8008796:	f8d9 1000 	ldr.w	r1, [r9]
 800879a:	fa1f fb82 	uxth.w	fp, r2
 800879e:	b289      	uxth	r1, r1
 80087a0:	fb0a 110b 	mla	r1, sl, fp, r1
 80087a4:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80087a8:	f8d9 2000 	ldr.w	r2, [r9]
 80087ac:	4461      	add	r1, ip
 80087ae:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80087b2:	fb0a c20b 	mla	r2, sl, fp, ip
 80087b6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80087ba:	b289      	uxth	r1, r1
 80087bc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80087c0:	4577      	cmp	r7, lr
 80087c2:	f849 1b04 	str.w	r1, [r9], #4
 80087c6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80087ca:	d8e2      	bhi.n	8008792 <__multiply+0xb2>
 80087cc:	9a01      	ldr	r2, [sp, #4]
 80087ce:	f845 c002 	str.w	ip, [r5, r2]
 80087d2:	9a03      	ldr	r2, [sp, #12]
 80087d4:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80087d8:	3304      	adds	r3, #4
 80087da:	f1b9 0f00 	cmp.w	r9, #0
 80087de:	d020      	beq.n	8008822 <__multiply+0x142>
 80087e0:	6829      	ldr	r1, [r5, #0]
 80087e2:	f104 0c14 	add.w	ip, r4, #20
 80087e6:	46ae      	mov	lr, r5
 80087e8:	f04f 0a00 	mov.w	sl, #0
 80087ec:	f8bc b000 	ldrh.w	fp, [ip]
 80087f0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80087f4:	fb09 220b 	mla	r2, r9, fp, r2
 80087f8:	4492      	add	sl, r2
 80087fa:	b289      	uxth	r1, r1
 80087fc:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8008800:	f84e 1b04 	str.w	r1, [lr], #4
 8008804:	f85c 2b04 	ldr.w	r2, [ip], #4
 8008808:	f8be 1000 	ldrh.w	r1, [lr]
 800880c:	0c12      	lsrs	r2, r2, #16
 800880e:	fb09 1102 	mla	r1, r9, r2, r1
 8008812:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8008816:	4567      	cmp	r7, ip
 8008818:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800881c:	d8e6      	bhi.n	80087ec <__multiply+0x10c>
 800881e:	9a01      	ldr	r2, [sp, #4]
 8008820:	50a9      	str	r1, [r5, r2]
 8008822:	3504      	adds	r5, #4
 8008824:	e79a      	b.n	800875c <__multiply+0x7c>
 8008826:	3e01      	subs	r6, #1
 8008828:	e79c      	b.n	8008764 <__multiply+0x84>
 800882a:	bf00      	nop
 800882c:	0800c148 	.word	0x0800c148
 8008830:	0800c1d4 	.word	0x0800c1d4

08008834 <__pow5mult>:
 8008834:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008838:	4615      	mov	r5, r2
 800883a:	f012 0203 	ands.w	r2, r2, #3
 800883e:	4606      	mov	r6, r0
 8008840:	460f      	mov	r7, r1
 8008842:	d007      	beq.n	8008854 <__pow5mult+0x20>
 8008844:	4c25      	ldr	r4, [pc, #148]	; (80088dc <__pow5mult+0xa8>)
 8008846:	3a01      	subs	r2, #1
 8008848:	2300      	movs	r3, #0
 800884a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800884e:	f7ff fe51 	bl	80084f4 <__multadd>
 8008852:	4607      	mov	r7, r0
 8008854:	10ad      	asrs	r5, r5, #2
 8008856:	d03d      	beq.n	80088d4 <__pow5mult+0xa0>
 8008858:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800885a:	b97c      	cbnz	r4, 800887c <__pow5mult+0x48>
 800885c:	2010      	movs	r0, #16
 800885e:	f7ff fdbf 	bl	80083e0 <malloc>
 8008862:	4602      	mov	r2, r0
 8008864:	6270      	str	r0, [r6, #36]	; 0x24
 8008866:	b928      	cbnz	r0, 8008874 <__pow5mult+0x40>
 8008868:	4b1d      	ldr	r3, [pc, #116]	; (80088e0 <__pow5mult+0xac>)
 800886a:	481e      	ldr	r0, [pc, #120]	; (80088e4 <__pow5mult+0xb0>)
 800886c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8008870:	f001 f94a 	bl	8009b08 <__assert_func>
 8008874:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008878:	6004      	str	r4, [r0, #0]
 800887a:	60c4      	str	r4, [r0, #12]
 800887c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8008880:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008884:	b94c      	cbnz	r4, 800889a <__pow5mult+0x66>
 8008886:	f240 2171 	movw	r1, #625	; 0x271
 800888a:	4630      	mov	r0, r6
 800888c:	f7ff ff12 	bl	80086b4 <__i2b>
 8008890:	2300      	movs	r3, #0
 8008892:	f8c8 0008 	str.w	r0, [r8, #8]
 8008896:	4604      	mov	r4, r0
 8008898:	6003      	str	r3, [r0, #0]
 800889a:	f04f 0900 	mov.w	r9, #0
 800889e:	07eb      	lsls	r3, r5, #31
 80088a0:	d50a      	bpl.n	80088b8 <__pow5mult+0x84>
 80088a2:	4639      	mov	r1, r7
 80088a4:	4622      	mov	r2, r4
 80088a6:	4630      	mov	r0, r6
 80088a8:	f7ff ff1a 	bl	80086e0 <__multiply>
 80088ac:	4639      	mov	r1, r7
 80088ae:	4680      	mov	r8, r0
 80088b0:	4630      	mov	r0, r6
 80088b2:	f7ff fdfd 	bl	80084b0 <_Bfree>
 80088b6:	4647      	mov	r7, r8
 80088b8:	106d      	asrs	r5, r5, #1
 80088ba:	d00b      	beq.n	80088d4 <__pow5mult+0xa0>
 80088bc:	6820      	ldr	r0, [r4, #0]
 80088be:	b938      	cbnz	r0, 80088d0 <__pow5mult+0x9c>
 80088c0:	4622      	mov	r2, r4
 80088c2:	4621      	mov	r1, r4
 80088c4:	4630      	mov	r0, r6
 80088c6:	f7ff ff0b 	bl	80086e0 <__multiply>
 80088ca:	6020      	str	r0, [r4, #0]
 80088cc:	f8c0 9000 	str.w	r9, [r0]
 80088d0:	4604      	mov	r4, r0
 80088d2:	e7e4      	b.n	800889e <__pow5mult+0x6a>
 80088d4:	4638      	mov	r0, r7
 80088d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80088da:	bf00      	nop
 80088dc:	0800c320 	.word	0x0800c320
 80088e0:	0800c0d6 	.word	0x0800c0d6
 80088e4:	0800c1d4 	.word	0x0800c1d4

080088e8 <__lshift>:
 80088e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80088ec:	460c      	mov	r4, r1
 80088ee:	6849      	ldr	r1, [r1, #4]
 80088f0:	6923      	ldr	r3, [r4, #16]
 80088f2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80088f6:	68a3      	ldr	r3, [r4, #8]
 80088f8:	4607      	mov	r7, r0
 80088fa:	4691      	mov	r9, r2
 80088fc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008900:	f108 0601 	add.w	r6, r8, #1
 8008904:	42b3      	cmp	r3, r6
 8008906:	db0b      	blt.n	8008920 <__lshift+0x38>
 8008908:	4638      	mov	r0, r7
 800890a:	f7ff fd91 	bl	8008430 <_Balloc>
 800890e:	4605      	mov	r5, r0
 8008910:	b948      	cbnz	r0, 8008926 <__lshift+0x3e>
 8008912:	4602      	mov	r2, r0
 8008914:	4b2a      	ldr	r3, [pc, #168]	; (80089c0 <__lshift+0xd8>)
 8008916:	482b      	ldr	r0, [pc, #172]	; (80089c4 <__lshift+0xdc>)
 8008918:	f240 11d9 	movw	r1, #473	; 0x1d9
 800891c:	f001 f8f4 	bl	8009b08 <__assert_func>
 8008920:	3101      	adds	r1, #1
 8008922:	005b      	lsls	r3, r3, #1
 8008924:	e7ee      	b.n	8008904 <__lshift+0x1c>
 8008926:	2300      	movs	r3, #0
 8008928:	f100 0114 	add.w	r1, r0, #20
 800892c:	f100 0210 	add.w	r2, r0, #16
 8008930:	4618      	mov	r0, r3
 8008932:	4553      	cmp	r3, sl
 8008934:	db37      	blt.n	80089a6 <__lshift+0xbe>
 8008936:	6920      	ldr	r0, [r4, #16]
 8008938:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800893c:	f104 0314 	add.w	r3, r4, #20
 8008940:	f019 091f 	ands.w	r9, r9, #31
 8008944:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008948:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800894c:	d02f      	beq.n	80089ae <__lshift+0xc6>
 800894e:	f1c9 0e20 	rsb	lr, r9, #32
 8008952:	468a      	mov	sl, r1
 8008954:	f04f 0c00 	mov.w	ip, #0
 8008958:	681a      	ldr	r2, [r3, #0]
 800895a:	fa02 f209 	lsl.w	r2, r2, r9
 800895e:	ea42 020c 	orr.w	r2, r2, ip
 8008962:	f84a 2b04 	str.w	r2, [sl], #4
 8008966:	f853 2b04 	ldr.w	r2, [r3], #4
 800896a:	4298      	cmp	r0, r3
 800896c:	fa22 fc0e 	lsr.w	ip, r2, lr
 8008970:	d8f2      	bhi.n	8008958 <__lshift+0x70>
 8008972:	1b03      	subs	r3, r0, r4
 8008974:	3b15      	subs	r3, #21
 8008976:	f023 0303 	bic.w	r3, r3, #3
 800897a:	3304      	adds	r3, #4
 800897c:	f104 0215 	add.w	r2, r4, #21
 8008980:	4290      	cmp	r0, r2
 8008982:	bf38      	it	cc
 8008984:	2304      	movcc	r3, #4
 8008986:	f841 c003 	str.w	ip, [r1, r3]
 800898a:	f1bc 0f00 	cmp.w	ip, #0
 800898e:	d001      	beq.n	8008994 <__lshift+0xac>
 8008990:	f108 0602 	add.w	r6, r8, #2
 8008994:	3e01      	subs	r6, #1
 8008996:	4638      	mov	r0, r7
 8008998:	612e      	str	r6, [r5, #16]
 800899a:	4621      	mov	r1, r4
 800899c:	f7ff fd88 	bl	80084b0 <_Bfree>
 80089a0:	4628      	mov	r0, r5
 80089a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80089a6:	f842 0f04 	str.w	r0, [r2, #4]!
 80089aa:	3301      	adds	r3, #1
 80089ac:	e7c1      	b.n	8008932 <__lshift+0x4a>
 80089ae:	3904      	subs	r1, #4
 80089b0:	f853 2b04 	ldr.w	r2, [r3], #4
 80089b4:	f841 2f04 	str.w	r2, [r1, #4]!
 80089b8:	4298      	cmp	r0, r3
 80089ba:	d8f9      	bhi.n	80089b0 <__lshift+0xc8>
 80089bc:	e7ea      	b.n	8008994 <__lshift+0xac>
 80089be:	bf00      	nop
 80089c0:	0800c148 	.word	0x0800c148
 80089c4:	0800c1d4 	.word	0x0800c1d4

080089c8 <__mcmp>:
 80089c8:	b530      	push	{r4, r5, lr}
 80089ca:	6902      	ldr	r2, [r0, #16]
 80089cc:	690c      	ldr	r4, [r1, #16]
 80089ce:	1b12      	subs	r2, r2, r4
 80089d0:	d10e      	bne.n	80089f0 <__mcmp+0x28>
 80089d2:	f100 0314 	add.w	r3, r0, #20
 80089d6:	3114      	adds	r1, #20
 80089d8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80089dc:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80089e0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80089e4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80089e8:	42a5      	cmp	r5, r4
 80089ea:	d003      	beq.n	80089f4 <__mcmp+0x2c>
 80089ec:	d305      	bcc.n	80089fa <__mcmp+0x32>
 80089ee:	2201      	movs	r2, #1
 80089f0:	4610      	mov	r0, r2
 80089f2:	bd30      	pop	{r4, r5, pc}
 80089f4:	4283      	cmp	r3, r0
 80089f6:	d3f3      	bcc.n	80089e0 <__mcmp+0x18>
 80089f8:	e7fa      	b.n	80089f0 <__mcmp+0x28>
 80089fa:	f04f 32ff 	mov.w	r2, #4294967295
 80089fe:	e7f7      	b.n	80089f0 <__mcmp+0x28>

08008a00 <__mdiff>:
 8008a00:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a04:	460c      	mov	r4, r1
 8008a06:	4606      	mov	r6, r0
 8008a08:	4611      	mov	r1, r2
 8008a0a:	4620      	mov	r0, r4
 8008a0c:	4690      	mov	r8, r2
 8008a0e:	f7ff ffdb 	bl	80089c8 <__mcmp>
 8008a12:	1e05      	subs	r5, r0, #0
 8008a14:	d110      	bne.n	8008a38 <__mdiff+0x38>
 8008a16:	4629      	mov	r1, r5
 8008a18:	4630      	mov	r0, r6
 8008a1a:	f7ff fd09 	bl	8008430 <_Balloc>
 8008a1e:	b930      	cbnz	r0, 8008a2e <__mdiff+0x2e>
 8008a20:	4b3a      	ldr	r3, [pc, #232]	; (8008b0c <__mdiff+0x10c>)
 8008a22:	4602      	mov	r2, r0
 8008a24:	f240 2132 	movw	r1, #562	; 0x232
 8008a28:	4839      	ldr	r0, [pc, #228]	; (8008b10 <__mdiff+0x110>)
 8008a2a:	f001 f86d 	bl	8009b08 <__assert_func>
 8008a2e:	2301      	movs	r3, #1
 8008a30:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008a34:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a38:	bfa4      	itt	ge
 8008a3a:	4643      	movge	r3, r8
 8008a3c:	46a0      	movge	r8, r4
 8008a3e:	4630      	mov	r0, r6
 8008a40:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8008a44:	bfa6      	itte	ge
 8008a46:	461c      	movge	r4, r3
 8008a48:	2500      	movge	r5, #0
 8008a4a:	2501      	movlt	r5, #1
 8008a4c:	f7ff fcf0 	bl	8008430 <_Balloc>
 8008a50:	b920      	cbnz	r0, 8008a5c <__mdiff+0x5c>
 8008a52:	4b2e      	ldr	r3, [pc, #184]	; (8008b0c <__mdiff+0x10c>)
 8008a54:	4602      	mov	r2, r0
 8008a56:	f44f 7110 	mov.w	r1, #576	; 0x240
 8008a5a:	e7e5      	b.n	8008a28 <__mdiff+0x28>
 8008a5c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8008a60:	6926      	ldr	r6, [r4, #16]
 8008a62:	60c5      	str	r5, [r0, #12]
 8008a64:	f104 0914 	add.w	r9, r4, #20
 8008a68:	f108 0514 	add.w	r5, r8, #20
 8008a6c:	f100 0e14 	add.w	lr, r0, #20
 8008a70:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8008a74:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8008a78:	f108 0210 	add.w	r2, r8, #16
 8008a7c:	46f2      	mov	sl, lr
 8008a7e:	2100      	movs	r1, #0
 8008a80:	f859 3b04 	ldr.w	r3, [r9], #4
 8008a84:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8008a88:	fa1f f883 	uxth.w	r8, r3
 8008a8c:	fa11 f18b 	uxtah	r1, r1, fp
 8008a90:	0c1b      	lsrs	r3, r3, #16
 8008a92:	eba1 0808 	sub.w	r8, r1, r8
 8008a96:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008a9a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8008a9e:	fa1f f888 	uxth.w	r8, r8
 8008aa2:	1419      	asrs	r1, r3, #16
 8008aa4:	454e      	cmp	r6, r9
 8008aa6:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8008aaa:	f84a 3b04 	str.w	r3, [sl], #4
 8008aae:	d8e7      	bhi.n	8008a80 <__mdiff+0x80>
 8008ab0:	1b33      	subs	r3, r6, r4
 8008ab2:	3b15      	subs	r3, #21
 8008ab4:	f023 0303 	bic.w	r3, r3, #3
 8008ab8:	3304      	adds	r3, #4
 8008aba:	3415      	adds	r4, #21
 8008abc:	42a6      	cmp	r6, r4
 8008abe:	bf38      	it	cc
 8008ac0:	2304      	movcc	r3, #4
 8008ac2:	441d      	add	r5, r3
 8008ac4:	4473      	add	r3, lr
 8008ac6:	469e      	mov	lr, r3
 8008ac8:	462e      	mov	r6, r5
 8008aca:	4566      	cmp	r6, ip
 8008acc:	d30e      	bcc.n	8008aec <__mdiff+0xec>
 8008ace:	f10c 0203 	add.w	r2, ip, #3
 8008ad2:	1b52      	subs	r2, r2, r5
 8008ad4:	f022 0203 	bic.w	r2, r2, #3
 8008ad8:	3d03      	subs	r5, #3
 8008ada:	45ac      	cmp	ip, r5
 8008adc:	bf38      	it	cc
 8008ade:	2200      	movcc	r2, #0
 8008ae0:	441a      	add	r2, r3
 8008ae2:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8008ae6:	b17b      	cbz	r3, 8008b08 <__mdiff+0x108>
 8008ae8:	6107      	str	r7, [r0, #16]
 8008aea:	e7a3      	b.n	8008a34 <__mdiff+0x34>
 8008aec:	f856 8b04 	ldr.w	r8, [r6], #4
 8008af0:	fa11 f288 	uxtah	r2, r1, r8
 8008af4:	1414      	asrs	r4, r2, #16
 8008af6:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8008afa:	b292      	uxth	r2, r2
 8008afc:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8008b00:	f84e 2b04 	str.w	r2, [lr], #4
 8008b04:	1421      	asrs	r1, r4, #16
 8008b06:	e7e0      	b.n	8008aca <__mdiff+0xca>
 8008b08:	3f01      	subs	r7, #1
 8008b0a:	e7ea      	b.n	8008ae2 <__mdiff+0xe2>
 8008b0c:	0800c148 	.word	0x0800c148
 8008b10:	0800c1d4 	.word	0x0800c1d4

08008b14 <__ulp>:
 8008b14:	b082      	sub	sp, #8
 8008b16:	ed8d 0b00 	vstr	d0, [sp]
 8008b1a:	9b01      	ldr	r3, [sp, #4]
 8008b1c:	4912      	ldr	r1, [pc, #72]	; (8008b68 <__ulp+0x54>)
 8008b1e:	4019      	ands	r1, r3
 8008b20:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8008b24:	2900      	cmp	r1, #0
 8008b26:	dd05      	ble.n	8008b34 <__ulp+0x20>
 8008b28:	2200      	movs	r2, #0
 8008b2a:	460b      	mov	r3, r1
 8008b2c:	ec43 2b10 	vmov	d0, r2, r3
 8008b30:	b002      	add	sp, #8
 8008b32:	4770      	bx	lr
 8008b34:	4249      	negs	r1, r1
 8008b36:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8008b3a:	ea4f 5021 	mov.w	r0, r1, asr #20
 8008b3e:	f04f 0200 	mov.w	r2, #0
 8008b42:	f04f 0300 	mov.w	r3, #0
 8008b46:	da04      	bge.n	8008b52 <__ulp+0x3e>
 8008b48:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8008b4c:	fa41 f300 	asr.w	r3, r1, r0
 8008b50:	e7ec      	b.n	8008b2c <__ulp+0x18>
 8008b52:	f1a0 0114 	sub.w	r1, r0, #20
 8008b56:	291e      	cmp	r1, #30
 8008b58:	bfda      	itte	le
 8008b5a:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8008b5e:	fa20 f101 	lsrle.w	r1, r0, r1
 8008b62:	2101      	movgt	r1, #1
 8008b64:	460a      	mov	r2, r1
 8008b66:	e7e1      	b.n	8008b2c <__ulp+0x18>
 8008b68:	7ff00000 	.word	0x7ff00000

08008b6c <__b2d>:
 8008b6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b6e:	6905      	ldr	r5, [r0, #16]
 8008b70:	f100 0714 	add.w	r7, r0, #20
 8008b74:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8008b78:	1f2e      	subs	r6, r5, #4
 8008b7a:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8008b7e:	4620      	mov	r0, r4
 8008b80:	f7ff fd48 	bl	8008614 <__hi0bits>
 8008b84:	f1c0 0320 	rsb	r3, r0, #32
 8008b88:	280a      	cmp	r0, #10
 8008b8a:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8008c08 <__b2d+0x9c>
 8008b8e:	600b      	str	r3, [r1, #0]
 8008b90:	dc14      	bgt.n	8008bbc <__b2d+0x50>
 8008b92:	f1c0 0e0b 	rsb	lr, r0, #11
 8008b96:	fa24 f10e 	lsr.w	r1, r4, lr
 8008b9a:	42b7      	cmp	r7, r6
 8008b9c:	ea41 030c 	orr.w	r3, r1, ip
 8008ba0:	bf34      	ite	cc
 8008ba2:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8008ba6:	2100      	movcs	r1, #0
 8008ba8:	3015      	adds	r0, #21
 8008baa:	fa04 f000 	lsl.w	r0, r4, r0
 8008bae:	fa21 f10e 	lsr.w	r1, r1, lr
 8008bb2:	ea40 0201 	orr.w	r2, r0, r1
 8008bb6:	ec43 2b10 	vmov	d0, r2, r3
 8008bba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008bbc:	42b7      	cmp	r7, r6
 8008bbe:	bf3a      	itte	cc
 8008bc0:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8008bc4:	f1a5 0608 	subcc.w	r6, r5, #8
 8008bc8:	2100      	movcs	r1, #0
 8008bca:	380b      	subs	r0, #11
 8008bcc:	d017      	beq.n	8008bfe <__b2d+0x92>
 8008bce:	f1c0 0c20 	rsb	ip, r0, #32
 8008bd2:	fa04 f500 	lsl.w	r5, r4, r0
 8008bd6:	42be      	cmp	r6, r7
 8008bd8:	fa21 f40c 	lsr.w	r4, r1, ip
 8008bdc:	ea45 0504 	orr.w	r5, r5, r4
 8008be0:	bf8c      	ite	hi
 8008be2:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8008be6:	2400      	movls	r4, #0
 8008be8:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8008bec:	fa01 f000 	lsl.w	r0, r1, r0
 8008bf0:	fa24 f40c 	lsr.w	r4, r4, ip
 8008bf4:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8008bf8:	ea40 0204 	orr.w	r2, r0, r4
 8008bfc:	e7db      	b.n	8008bb6 <__b2d+0x4a>
 8008bfe:	ea44 030c 	orr.w	r3, r4, ip
 8008c02:	460a      	mov	r2, r1
 8008c04:	e7d7      	b.n	8008bb6 <__b2d+0x4a>
 8008c06:	bf00      	nop
 8008c08:	3ff00000 	.word	0x3ff00000

08008c0c <__d2b>:
 8008c0c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008c10:	4689      	mov	r9, r1
 8008c12:	2101      	movs	r1, #1
 8008c14:	ec57 6b10 	vmov	r6, r7, d0
 8008c18:	4690      	mov	r8, r2
 8008c1a:	f7ff fc09 	bl	8008430 <_Balloc>
 8008c1e:	4604      	mov	r4, r0
 8008c20:	b930      	cbnz	r0, 8008c30 <__d2b+0x24>
 8008c22:	4602      	mov	r2, r0
 8008c24:	4b25      	ldr	r3, [pc, #148]	; (8008cbc <__d2b+0xb0>)
 8008c26:	4826      	ldr	r0, [pc, #152]	; (8008cc0 <__d2b+0xb4>)
 8008c28:	f240 310a 	movw	r1, #778	; 0x30a
 8008c2c:	f000 ff6c 	bl	8009b08 <__assert_func>
 8008c30:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8008c34:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008c38:	bb35      	cbnz	r5, 8008c88 <__d2b+0x7c>
 8008c3a:	2e00      	cmp	r6, #0
 8008c3c:	9301      	str	r3, [sp, #4]
 8008c3e:	d028      	beq.n	8008c92 <__d2b+0x86>
 8008c40:	4668      	mov	r0, sp
 8008c42:	9600      	str	r6, [sp, #0]
 8008c44:	f7ff fd06 	bl	8008654 <__lo0bits>
 8008c48:	9900      	ldr	r1, [sp, #0]
 8008c4a:	b300      	cbz	r0, 8008c8e <__d2b+0x82>
 8008c4c:	9a01      	ldr	r2, [sp, #4]
 8008c4e:	f1c0 0320 	rsb	r3, r0, #32
 8008c52:	fa02 f303 	lsl.w	r3, r2, r3
 8008c56:	430b      	orrs	r3, r1
 8008c58:	40c2      	lsrs	r2, r0
 8008c5a:	6163      	str	r3, [r4, #20]
 8008c5c:	9201      	str	r2, [sp, #4]
 8008c5e:	9b01      	ldr	r3, [sp, #4]
 8008c60:	61a3      	str	r3, [r4, #24]
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	bf14      	ite	ne
 8008c66:	2202      	movne	r2, #2
 8008c68:	2201      	moveq	r2, #1
 8008c6a:	6122      	str	r2, [r4, #16]
 8008c6c:	b1d5      	cbz	r5, 8008ca4 <__d2b+0x98>
 8008c6e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8008c72:	4405      	add	r5, r0
 8008c74:	f8c9 5000 	str.w	r5, [r9]
 8008c78:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008c7c:	f8c8 0000 	str.w	r0, [r8]
 8008c80:	4620      	mov	r0, r4
 8008c82:	b003      	add	sp, #12
 8008c84:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008c88:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008c8c:	e7d5      	b.n	8008c3a <__d2b+0x2e>
 8008c8e:	6161      	str	r1, [r4, #20]
 8008c90:	e7e5      	b.n	8008c5e <__d2b+0x52>
 8008c92:	a801      	add	r0, sp, #4
 8008c94:	f7ff fcde 	bl	8008654 <__lo0bits>
 8008c98:	9b01      	ldr	r3, [sp, #4]
 8008c9a:	6163      	str	r3, [r4, #20]
 8008c9c:	2201      	movs	r2, #1
 8008c9e:	6122      	str	r2, [r4, #16]
 8008ca0:	3020      	adds	r0, #32
 8008ca2:	e7e3      	b.n	8008c6c <__d2b+0x60>
 8008ca4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008ca8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008cac:	f8c9 0000 	str.w	r0, [r9]
 8008cb0:	6918      	ldr	r0, [r3, #16]
 8008cb2:	f7ff fcaf 	bl	8008614 <__hi0bits>
 8008cb6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008cba:	e7df      	b.n	8008c7c <__d2b+0x70>
 8008cbc:	0800c148 	.word	0x0800c148
 8008cc0:	0800c1d4 	.word	0x0800c1d4

08008cc4 <__ratio>:
 8008cc4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008cc8:	4688      	mov	r8, r1
 8008cca:	4669      	mov	r1, sp
 8008ccc:	4681      	mov	r9, r0
 8008cce:	f7ff ff4d 	bl	8008b6c <__b2d>
 8008cd2:	a901      	add	r1, sp, #4
 8008cd4:	4640      	mov	r0, r8
 8008cd6:	ec55 4b10 	vmov	r4, r5, d0
 8008cda:	f7ff ff47 	bl	8008b6c <__b2d>
 8008cde:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008ce2:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8008ce6:	eba3 0c02 	sub.w	ip, r3, r2
 8008cea:	e9dd 3200 	ldrd	r3, r2, [sp]
 8008cee:	1a9b      	subs	r3, r3, r2
 8008cf0:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8008cf4:	ec51 0b10 	vmov	r0, r1, d0
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	bfd6      	itet	le
 8008cfc:	460a      	movle	r2, r1
 8008cfe:	462a      	movgt	r2, r5
 8008d00:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8008d04:	468b      	mov	fp, r1
 8008d06:	462f      	mov	r7, r5
 8008d08:	bfd4      	ite	le
 8008d0a:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8008d0e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8008d12:	4620      	mov	r0, r4
 8008d14:	ee10 2a10 	vmov	r2, s0
 8008d18:	465b      	mov	r3, fp
 8008d1a:	4639      	mov	r1, r7
 8008d1c:	f7f7 fdae 	bl	800087c <__aeabi_ddiv>
 8008d20:	ec41 0b10 	vmov	d0, r0, r1
 8008d24:	b003      	add	sp, #12
 8008d26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008d2a <__copybits>:
 8008d2a:	3901      	subs	r1, #1
 8008d2c:	b570      	push	{r4, r5, r6, lr}
 8008d2e:	1149      	asrs	r1, r1, #5
 8008d30:	6914      	ldr	r4, [r2, #16]
 8008d32:	3101      	adds	r1, #1
 8008d34:	f102 0314 	add.w	r3, r2, #20
 8008d38:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8008d3c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8008d40:	1f05      	subs	r5, r0, #4
 8008d42:	42a3      	cmp	r3, r4
 8008d44:	d30c      	bcc.n	8008d60 <__copybits+0x36>
 8008d46:	1aa3      	subs	r3, r4, r2
 8008d48:	3b11      	subs	r3, #17
 8008d4a:	f023 0303 	bic.w	r3, r3, #3
 8008d4e:	3211      	adds	r2, #17
 8008d50:	42a2      	cmp	r2, r4
 8008d52:	bf88      	it	hi
 8008d54:	2300      	movhi	r3, #0
 8008d56:	4418      	add	r0, r3
 8008d58:	2300      	movs	r3, #0
 8008d5a:	4288      	cmp	r0, r1
 8008d5c:	d305      	bcc.n	8008d6a <__copybits+0x40>
 8008d5e:	bd70      	pop	{r4, r5, r6, pc}
 8008d60:	f853 6b04 	ldr.w	r6, [r3], #4
 8008d64:	f845 6f04 	str.w	r6, [r5, #4]!
 8008d68:	e7eb      	b.n	8008d42 <__copybits+0x18>
 8008d6a:	f840 3b04 	str.w	r3, [r0], #4
 8008d6e:	e7f4      	b.n	8008d5a <__copybits+0x30>

08008d70 <__any_on>:
 8008d70:	f100 0214 	add.w	r2, r0, #20
 8008d74:	6900      	ldr	r0, [r0, #16]
 8008d76:	114b      	asrs	r3, r1, #5
 8008d78:	4298      	cmp	r0, r3
 8008d7a:	b510      	push	{r4, lr}
 8008d7c:	db11      	blt.n	8008da2 <__any_on+0x32>
 8008d7e:	dd0a      	ble.n	8008d96 <__any_on+0x26>
 8008d80:	f011 011f 	ands.w	r1, r1, #31
 8008d84:	d007      	beq.n	8008d96 <__any_on+0x26>
 8008d86:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8008d8a:	fa24 f001 	lsr.w	r0, r4, r1
 8008d8e:	fa00 f101 	lsl.w	r1, r0, r1
 8008d92:	428c      	cmp	r4, r1
 8008d94:	d10b      	bne.n	8008dae <__any_on+0x3e>
 8008d96:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008d9a:	4293      	cmp	r3, r2
 8008d9c:	d803      	bhi.n	8008da6 <__any_on+0x36>
 8008d9e:	2000      	movs	r0, #0
 8008da0:	bd10      	pop	{r4, pc}
 8008da2:	4603      	mov	r3, r0
 8008da4:	e7f7      	b.n	8008d96 <__any_on+0x26>
 8008da6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008daa:	2900      	cmp	r1, #0
 8008dac:	d0f5      	beq.n	8008d9a <__any_on+0x2a>
 8008dae:	2001      	movs	r0, #1
 8008db0:	e7f6      	b.n	8008da0 <__any_on+0x30>

08008db2 <_calloc_r>:
 8008db2:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008db4:	fba1 2402 	umull	r2, r4, r1, r2
 8008db8:	b94c      	cbnz	r4, 8008dce <_calloc_r+0x1c>
 8008dba:	4611      	mov	r1, r2
 8008dbc:	9201      	str	r2, [sp, #4]
 8008dbe:	f000 f87b 	bl	8008eb8 <_malloc_r>
 8008dc2:	9a01      	ldr	r2, [sp, #4]
 8008dc4:	4605      	mov	r5, r0
 8008dc6:	b930      	cbnz	r0, 8008dd6 <_calloc_r+0x24>
 8008dc8:	4628      	mov	r0, r5
 8008dca:	b003      	add	sp, #12
 8008dcc:	bd30      	pop	{r4, r5, pc}
 8008dce:	220c      	movs	r2, #12
 8008dd0:	6002      	str	r2, [r0, #0]
 8008dd2:	2500      	movs	r5, #0
 8008dd4:	e7f8      	b.n	8008dc8 <_calloc_r+0x16>
 8008dd6:	4621      	mov	r1, r4
 8008dd8:	f7fc fb16 	bl	8005408 <memset>
 8008ddc:	e7f4      	b.n	8008dc8 <_calloc_r+0x16>
	...

08008de0 <_free_r>:
 8008de0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008de2:	2900      	cmp	r1, #0
 8008de4:	d044      	beq.n	8008e70 <_free_r+0x90>
 8008de6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008dea:	9001      	str	r0, [sp, #4]
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	f1a1 0404 	sub.w	r4, r1, #4
 8008df2:	bfb8      	it	lt
 8008df4:	18e4      	addlt	r4, r4, r3
 8008df6:	f001 f88b 	bl	8009f10 <__malloc_lock>
 8008dfa:	4a1e      	ldr	r2, [pc, #120]	; (8008e74 <_free_r+0x94>)
 8008dfc:	9801      	ldr	r0, [sp, #4]
 8008dfe:	6813      	ldr	r3, [r2, #0]
 8008e00:	b933      	cbnz	r3, 8008e10 <_free_r+0x30>
 8008e02:	6063      	str	r3, [r4, #4]
 8008e04:	6014      	str	r4, [r2, #0]
 8008e06:	b003      	add	sp, #12
 8008e08:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008e0c:	f001 b886 	b.w	8009f1c <__malloc_unlock>
 8008e10:	42a3      	cmp	r3, r4
 8008e12:	d908      	bls.n	8008e26 <_free_r+0x46>
 8008e14:	6825      	ldr	r5, [r4, #0]
 8008e16:	1961      	adds	r1, r4, r5
 8008e18:	428b      	cmp	r3, r1
 8008e1a:	bf01      	itttt	eq
 8008e1c:	6819      	ldreq	r1, [r3, #0]
 8008e1e:	685b      	ldreq	r3, [r3, #4]
 8008e20:	1949      	addeq	r1, r1, r5
 8008e22:	6021      	streq	r1, [r4, #0]
 8008e24:	e7ed      	b.n	8008e02 <_free_r+0x22>
 8008e26:	461a      	mov	r2, r3
 8008e28:	685b      	ldr	r3, [r3, #4]
 8008e2a:	b10b      	cbz	r3, 8008e30 <_free_r+0x50>
 8008e2c:	42a3      	cmp	r3, r4
 8008e2e:	d9fa      	bls.n	8008e26 <_free_r+0x46>
 8008e30:	6811      	ldr	r1, [r2, #0]
 8008e32:	1855      	adds	r5, r2, r1
 8008e34:	42a5      	cmp	r5, r4
 8008e36:	d10b      	bne.n	8008e50 <_free_r+0x70>
 8008e38:	6824      	ldr	r4, [r4, #0]
 8008e3a:	4421      	add	r1, r4
 8008e3c:	1854      	adds	r4, r2, r1
 8008e3e:	42a3      	cmp	r3, r4
 8008e40:	6011      	str	r1, [r2, #0]
 8008e42:	d1e0      	bne.n	8008e06 <_free_r+0x26>
 8008e44:	681c      	ldr	r4, [r3, #0]
 8008e46:	685b      	ldr	r3, [r3, #4]
 8008e48:	6053      	str	r3, [r2, #4]
 8008e4a:	4421      	add	r1, r4
 8008e4c:	6011      	str	r1, [r2, #0]
 8008e4e:	e7da      	b.n	8008e06 <_free_r+0x26>
 8008e50:	d902      	bls.n	8008e58 <_free_r+0x78>
 8008e52:	230c      	movs	r3, #12
 8008e54:	6003      	str	r3, [r0, #0]
 8008e56:	e7d6      	b.n	8008e06 <_free_r+0x26>
 8008e58:	6825      	ldr	r5, [r4, #0]
 8008e5a:	1961      	adds	r1, r4, r5
 8008e5c:	428b      	cmp	r3, r1
 8008e5e:	bf04      	itt	eq
 8008e60:	6819      	ldreq	r1, [r3, #0]
 8008e62:	685b      	ldreq	r3, [r3, #4]
 8008e64:	6063      	str	r3, [r4, #4]
 8008e66:	bf04      	itt	eq
 8008e68:	1949      	addeq	r1, r1, r5
 8008e6a:	6021      	streq	r1, [r4, #0]
 8008e6c:	6054      	str	r4, [r2, #4]
 8008e6e:	e7ca      	b.n	8008e06 <_free_r+0x26>
 8008e70:	b003      	add	sp, #12
 8008e72:	bd30      	pop	{r4, r5, pc}
 8008e74:	20000d0c 	.word	0x20000d0c

08008e78 <sbrk_aligned>:
 8008e78:	b570      	push	{r4, r5, r6, lr}
 8008e7a:	4e0e      	ldr	r6, [pc, #56]	; (8008eb4 <sbrk_aligned+0x3c>)
 8008e7c:	460c      	mov	r4, r1
 8008e7e:	6831      	ldr	r1, [r6, #0]
 8008e80:	4605      	mov	r5, r0
 8008e82:	b911      	cbnz	r1, 8008e8a <sbrk_aligned+0x12>
 8008e84:	f000 fd28 	bl	80098d8 <_sbrk_r>
 8008e88:	6030      	str	r0, [r6, #0]
 8008e8a:	4621      	mov	r1, r4
 8008e8c:	4628      	mov	r0, r5
 8008e8e:	f000 fd23 	bl	80098d8 <_sbrk_r>
 8008e92:	1c43      	adds	r3, r0, #1
 8008e94:	d00a      	beq.n	8008eac <sbrk_aligned+0x34>
 8008e96:	1cc4      	adds	r4, r0, #3
 8008e98:	f024 0403 	bic.w	r4, r4, #3
 8008e9c:	42a0      	cmp	r0, r4
 8008e9e:	d007      	beq.n	8008eb0 <sbrk_aligned+0x38>
 8008ea0:	1a21      	subs	r1, r4, r0
 8008ea2:	4628      	mov	r0, r5
 8008ea4:	f000 fd18 	bl	80098d8 <_sbrk_r>
 8008ea8:	3001      	adds	r0, #1
 8008eaa:	d101      	bne.n	8008eb0 <sbrk_aligned+0x38>
 8008eac:	f04f 34ff 	mov.w	r4, #4294967295
 8008eb0:	4620      	mov	r0, r4
 8008eb2:	bd70      	pop	{r4, r5, r6, pc}
 8008eb4:	20000d10 	.word	0x20000d10

08008eb8 <_malloc_r>:
 8008eb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008ebc:	1ccd      	adds	r5, r1, #3
 8008ebe:	f025 0503 	bic.w	r5, r5, #3
 8008ec2:	3508      	adds	r5, #8
 8008ec4:	2d0c      	cmp	r5, #12
 8008ec6:	bf38      	it	cc
 8008ec8:	250c      	movcc	r5, #12
 8008eca:	2d00      	cmp	r5, #0
 8008ecc:	4607      	mov	r7, r0
 8008ece:	db01      	blt.n	8008ed4 <_malloc_r+0x1c>
 8008ed0:	42a9      	cmp	r1, r5
 8008ed2:	d905      	bls.n	8008ee0 <_malloc_r+0x28>
 8008ed4:	230c      	movs	r3, #12
 8008ed6:	603b      	str	r3, [r7, #0]
 8008ed8:	2600      	movs	r6, #0
 8008eda:	4630      	mov	r0, r6
 8008edc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008ee0:	4e2e      	ldr	r6, [pc, #184]	; (8008f9c <_malloc_r+0xe4>)
 8008ee2:	f001 f815 	bl	8009f10 <__malloc_lock>
 8008ee6:	6833      	ldr	r3, [r6, #0]
 8008ee8:	461c      	mov	r4, r3
 8008eea:	bb34      	cbnz	r4, 8008f3a <_malloc_r+0x82>
 8008eec:	4629      	mov	r1, r5
 8008eee:	4638      	mov	r0, r7
 8008ef0:	f7ff ffc2 	bl	8008e78 <sbrk_aligned>
 8008ef4:	1c43      	adds	r3, r0, #1
 8008ef6:	4604      	mov	r4, r0
 8008ef8:	d14d      	bne.n	8008f96 <_malloc_r+0xde>
 8008efa:	6834      	ldr	r4, [r6, #0]
 8008efc:	4626      	mov	r6, r4
 8008efe:	2e00      	cmp	r6, #0
 8008f00:	d140      	bne.n	8008f84 <_malloc_r+0xcc>
 8008f02:	6823      	ldr	r3, [r4, #0]
 8008f04:	4631      	mov	r1, r6
 8008f06:	4638      	mov	r0, r7
 8008f08:	eb04 0803 	add.w	r8, r4, r3
 8008f0c:	f000 fce4 	bl	80098d8 <_sbrk_r>
 8008f10:	4580      	cmp	r8, r0
 8008f12:	d13a      	bne.n	8008f8a <_malloc_r+0xd2>
 8008f14:	6821      	ldr	r1, [r4, #0]
 8008f16:	3503      	adds	r5, #3
 8008f18:	1a6d      	subs	r5, r5, r1
 8008f1a:	f025 0503 	bic.w	r5, r5, #3
 8008f1e:	3508      	adds	r5, #8
 8008f20:	2d0c      	cmp	r5, #12
 8008f22:	bf38      	it	cc
 8008f24:	250c      	movcc	r5, #12
 8008f26:	4629      	mov	r1, r5
 8008f28:	4638      	mov	r0, r7
 8008f2a:	f7ff ffa5 	bl	8008e78 <sbrk_aligned>
 8008f2e:	3001      	adds	r0, #1
 8008f30:	d02b      	beq.n	8008f8a <_malloc_r+0xd2>
 8008f32:	6823      	ldr	r3, [r4, #0]
 8008f34:	442b      	add	r3, r5
 8008f36:	6023      	str	r3, [r4, #0]
 8008f38:	e00e      	b.n	8008f58 <_malloc_r+0xa0>
 8008f3a:	6822      	ldr	r2, [r4, #0]
 8008f3c:	1b52      	subs	r2, r2, r5
 8008f3e:	d41e      	bmi.n	8008f7e <_malloc_r+0xc6>
 8008f40:	2a0b      	cmp	r2, #11
 8008f42:	d916      	bls.n	8008f72 <_malloc_r+0xba>
 8008f44:	1961      	adds	r1, r4, r5
 8008f46:	42a3      	cmp	r3, r4
 8008f48:	6025      	str	r5, [r4, #0]
 8008f4a:	bf18      	it	ne
 8008f4c:	6059      	strne	r1, [r3, #4]
 8008f4e:	6863      	ldr	r3, [r4, #4]
 8008f50:	bf08      	it	eq
 8008f52:	6031      	streq	r1, [r6, #0]
 8008f54:	5162      	str	r2, [r4, r5]
 8008f56:	604b      	str	r3, [r1, #4]
 8008f58:	4638      	mov	r0, r7
 8008f5a:	f104 060b 	add.w	r6, r4, #11
 8008f5e:	f000 ffdd 	bl	8009f1c <__malloc_unlock>
 8008f62:	f026 0607 	bic.w	r6, r6, #7
 8008f66:	1d23      	adds	r3, r4, #4
 8008f68:	1af2      	subs	r2, r6, r3
 8008f6a:	d0b6      	beq.n	8008eda <_malloc_r+0x22>
 8008f6c:	1b9b      	subs	r3, r3, r6
 8008f6e:	50a3      	str	r3, [r4, r2]
 8008f70:	e7b3      	b.n	8008eda <_malloc_r+0x22>
 8008f72:	6862      	ldr	r2, [r4, #4]
 8008f74:	42a3      	cmp	r3, r4
 8008f76:	bf0c      	ite	eq
 8008f78:	6032      	streq	r2, [r6, #0]
 8008f7a:	605a      	strne	r2, [r3, #4]
 8008f7c:	e7ec      	b.n	8008f58 <_malloc_r+0xa0>
 8008f7e:	4623      	mov	r3, r4
 8008f80:	6864      	ldr	r4, [r4, #4]
 8008f82:	e7b2      	b.n	8008eea <_malloc_r+0x32>
 8008f84:	4634      	mov	r4, r6
 8008f86:	6876      	ldr	r6, [r6, #4]
 8008f88:	e7b9      	b.n	8008efe <_malloc_r+0x46>
 8008f8a:	230c      	movs	r3, #12
 8008f8c:	603b      	str	r3, [r7, #0]
 8008f8e:	4638      	mov	r0, r7
 8008f90:	f000 ffc4 	bl	8009f1c <__malloc_unlock>
 8008f94:	e7a1      	b.n	8008eda <_malloc_r+0x22>
 8008f96:	6025      	str	r5, [r4, #0]
 8008f98:	e7de      	b.n	8008f58 <_malloc_r+0xa0>
 8008f9a:	bf00      	nop
 8008f9c:	20000d0c 	.word	0x20000d0c

08008fa0 <__ssputs_r>:
 8008fa0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008fa4:	688e      	ldr	r6, [r1, #8]
 8008fa6:	429e      	cmp	r6, r3
 8008fa8:	4682      	mov	sl, r0
 8008faa:	460c      	mov	r4, r1
 8008fac:	4690      	mov	r8, r2
 8008fae:	461f      	mov	r7, r3
 8008fb0:	d838      	bhi.n	8009024 <__ssputs_r+0x84>
 8008fb2:	898a      	ldrh	r2, [r1, #12]
 8008fb4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008fb8:	d032      	beq.n	8009020 <__ssputs_r+0x80>
 8008fba:	6825      	ldr	r5, [r4, #0]
 8008fbc:	6909      	ldr	r1, [r1, #16]
 8008fbe:	eba5 0901 	sub.w	r9, r5, r1
 8008fc2:	6965      	ldr	r5, [r4, #20]
 8008fc4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008fc8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008fcc:	3301      	adds	r3, #1
 8008fce:	444b      	add	r3, r9
 8008fd0:	106d      	asrs	r5, r5, #1
 8008fd2:	429d      	cmp	r5, r3
 8008fd4:	bf38      	it	cc
 8008fd6:	461d      	movcc	r5, r3
 8008fd8:	0553      	lsls	r3, r2, #21
 8008fda:	d531      	bpl.n	8009040 <__ssputs_r+0xa0>
 8008fdc:	4629      	mov	r1, r5
 8008fde:	f7ff ff6b 	bl	8008eb8 <_malloc_r>
 8008fe2:	4606      	mov	r6, r0
 8008fe4:	b950      	cbnz	r0, 8008ffc <__ssputs_r+0x5c>
 8008fe6:	230c      	movs	r3, #12
 8008fe8:	f8ca 3000 	str.w	r3, [sl]
 8008fec:	89a3      	ldrh	r3, [r4, #12]
 8008fee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008ff2:	81a3      	strh	r3, [r4, #12]
 8008ff4:	f04f 30ff 	mov.w	r0, #4294967295
 8008ff8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008ffc:	6921      	ldr	r1, [r4, #16]
 8008ffe:	464a      	mov	r2, r9
 8009000:	f7ff fa08 	bl	8008414 <memcpy>
 8009004:	89a3      	ldrh	r3, [r4, #12]
 8009006:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800900a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800900e:	81a3      	strh	r3, [r4, #12]
 8009010:	6126      	str	r6, [r4, #16]
 8009012:	6165      	str	r5, [r4, #20]
 8009014:	444e      	add	r6, r9
 8009016:	eba5 0509 	sub.w	r5, r5, r9
 800901a:	6026      	str	r6, [r4, #0]
 800901c:	60a5      	str	r5, [r4, #8]
 800901e:	463e      	mov	r6, r7
 8009020:	42be      	cmp	r6, r7
 8009022:	d900      	bls.n	8009026 <__ssputs_r+0x86>
 8009024:	463e      	mov	r6, r7
 8009026:	6820      	ldr	r0, [r4, #0]
 8009028:	4632      	mov	r2, r6
 800902a:	4641      	mov	r1, r8
 800902c:	f000 ff56 	bl	8009edc <memmove>
 8009030:	68a3      	ldr	r3, [r4, #8]
 8009032:	1b9b      	subs	r3, r3, r6
 8009034:	60a3      	str	r3, [r4, #8]
 8009036:	6823      	ldr	r3, [r4, #0]
 8009038:	4433      	add	r3, r6
 800903a:	6023      	str	r3, [r4, #0]
 800903c:	2000      	movs	r0, #0
 800903e:	e7db      	b.n	8008ff8 <__ssputs_r+0x58>
 8009040:	462a      	mov	r2, r5
 8009042:	f000 ff71 	bl	8009f28 <_realloc_r>
 8009046:	4606      	mov	r6, r0
 8009048:	2800      	cmp	r0, #0
 800904a:	d1e1      	bne.n	8009010 <__ssputs_r+0x70>
 800904c:	6921      	ldr	r1, [r4, #16]
 800904e:	4650      	mov	r0, sl
 8009050:	f7ff fec6 	bl	8008de0 <_free_r>
 8009054:	e7c7      	b.n	8008fe6 <__ssputs_r+0x46>
	...

08009058 <_svfiprintf_r>:
 8009058:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800905c:	4698      	mov	r8, r3
 800905e:	898b      	ldrh	r3, [r1, #12]
 8009060:	061b      	lsls	r3, r3, #24
 8009062:	b09d      	sub	sp, #116	; 0x74
 8009064:	4607      	mov	r7, r0
 8009066:	460d      	mov	r5, r1
 8009068:	4614      	mov	r4, r2
 800906a:	d50e      	bpl.n	800908a <_svfiprintf_r+0x32>
 800906c:	690b      	ldr	r3, [r1, #16]
 800906e:	b963      	cbnz	r3, 800908a <_svfiprintf_r+0x32>
 8009070:	2140      	movs	r1, #64	; 0x40
 8009072:	f7ff ff21 	bl	8008eb8 <_malloc_r>
 8009076:	6028      	str	r0, [r5, #0]
 8009078:	6128      	str	r0, [r5, #16]
 800907a:	b920      	cbnz	r0, 8009086 <_svfiprintf_r+0x2e>
 800907c:	230c      	movs	r3, #12
 800907e:	603b      	str	r3, [r7, #0]
 8009080:	f04f 30ff 	mov.w	r0, #4294967295
 8009084:	e0d1      	b.n	800922a <_svfiprintf_r+0x1d2>
 8009086:	2340      	movs	r3, #64	; 0x40
 8009088:	616b      	str	r3, [r5, #20]
 800908a:	2300      	movs	r3, #0
 800908c:	9309      	str	r3, [sp, #36]	; 0x24
 800908e:	2320      	movs	r3, #32
 8009090:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009094:	f8cd 800c 	str.w	r8, [sp, #12]
 8009098:	2330      	movs	r3, #48	; 0x30
 800909a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8009244 <_svfiprintf_r+0x1ec>
 800909e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80090a2:	f04f 0901 	mov.w	r9, #1
 80090a6:	4623      	mov	r3, r4
 80090a8:	469a      	mov	sl, r3
 80090aa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80090ae:	b10a      	cbz	r2, 80090b4 <_svfiprintf_r+0x5c>
 80090b0:	2a25      	cmp	r2, #37	; 0x25
 80090b2:	d1f9      	bne.n	80090a8 <_svfiprintf_r+0x50>
 80090b4:	ebba 0b04 	subs.w	fp, sl, r4
 80090b8:	d00b      	beq.n	80090d2 <_svfiprintf_r+0x7a>
 80090ba:	465b      	mov	r3, fp
 80090bc:	4622      	mov	r2, r4
 80090be:	4629      	mov	r1, r5
 80090c0:	4638      	mov	r0, r7
 80090c2:	f7ff ff6d 	bl	8008fa0 <__ssputs_r>
 80090c6:	3001      	adds	r0, #1
 80090c8:	f000 80aa 	beq.w	8009220 <_svfiprintf_r+0x1c8>
 80090cc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80090ce:	445a      	add	r2, fp
 80090d0:	9209      	str	r2, [sp, #36]	; 0x24
 80090d2:	f89a 3000 	ldrb.w	r3, [sl]
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	f000 80a2 	beq.w	8009220 <_svfiprintf_r+0x1c8>
 80090dc:	2300      	movs	r3, #0
 80090de:	f04f 32ff 	mov.w	r2, #4294967295
 80090e2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80090e6:	f10a 0a01 	add.w	sl, sl, #1
 80090ea:	9304      	str	r3, [sp, #16]
 80090ec:	9307      	str	r3, [sp, #28]
 80090ee:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80090f2:	931a      	str	r3, [sp, #104]	; 0x68
 80090f4:	4654      	mov	r4, sl
 80090f6:	2205      	movs	r2, #5
 80090f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80090fc:	4851      	ldr	r0, [pc, #324]	; (8009244 <_svfiprintf_r+0x1ec>)
 80090fe:	f7f7 f887 	bl	8000210 <memchr>
 8009102:	9a04      	ldr	r2, [sp, #16]
 8009104:	b9d8      	cbnz	r0, 800913e <_svfiprintf_r+0xe6>
 8009106:	06d0      	lsls	r0, r2, #27
 8009108:	bf44      	itt	mi
 800910a:	2320      	movmi	r3, #32
 800910c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009110:	0711      	lsls	r1, r2, #28
 8009112:	bf44      	itt	mi
 8009114:	232b      	movmi	r3, #43	; 0x2b
 8009116:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800911a:	f89a 3000 	ldrb.w	r3, [sl]
 800911e:	2b2a      	cmp	r3, #42	; 0x2a
 8009120:	d015      	beq.n	800914e <_svfiprintf_r+0xf6>
 8009122:	9a07      	ldr	r2, [sp, #28]
 8009124:	4654      	mov	r4, sl
 8009126:	2000      	movs	r0, #0
 8009128:	f04f 0c0a 	mov.w	ip, #10
 800912c:	4621      	mov	r1, r4
 800912e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009132:	3b30      	subs	r3, #48	; 0x30
 8009134:	2b09      	cmp	r3, #9
 8009136:	d94e      	bls.n	80091d6 <_svfiprintf_r+0x17e>
 8009138:	b1b0      	cbz	r0, 8009168 <_svfiprintf_r+0x110>
 800913a:	9207      	str	r2, [sp, #28]
 800913c:	e014      	b.n	8009168 <_svfiprintf_r+0x110>
 800913e:	eba0 0308 	sub.w	r3, r0, r8
 8009142:	fa09 f303 	lsl.w	r3, r9, r3
 8009146:	4313      	orrs	r3, r2
 8009148:	9304      	str	r3, [sp, #16]
 800914a:	46a2      	mov	sl, r4
 800914c:	e7d2      	b.n	80090f4 <_svfiprintf_r+0x9c>
 800914e:	9b03      	ldr	r3, [sp, #12]
 8009150:	1d19      	adds	r1, r3, #4
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	9103      	str	r1, [sp, #12]
 8009156:	2b00      	cmp	r3, #0
 8009158:	bfbb      	ittet	lt
 800915a:	425b      	neglt	r3, r3
 800915c:	f042 0202 	orrlt.w	r2, r2, #2
 8009160:	9307      	strge	r3, [sp, #28]
 8009162:	9307      	strlt	r3, [sp, #28]
 8009164:	bfb8      	it	lt
 8009166:	9204      	strlt	r2, [sp, #16]
 8009168:	7823      	ldrb	r3, [r4, #0]
 800916a:	2b2e      	cmp	r3, #46	; 0x2e
 800916c:	d10c      	bne.n	8009188 <_svfiprintf_r+0x130>
 800916e:	7863      	ldrb	r3, [r4, #1]
 8009170:	2b2a      	cmp	r3, #42	; 0x2a
 8009172:	d135      	bne.n	80091e0 <_svfiprintf_r+0x188>
 8009174:	9b03      	ldr	r3, [sp, #12]
 8009176:	1d1a      	adds	r2, r3, #4
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	9203      	str	r2, [sp, #12]
 800917c:	2b00      	cmp	r3, #0
 800917e:	bfb8      	it	lt
 8009180:	f04f 33ff 	movlt.w	r3, #4294967295
 8009184:	3402      	adds	r4, #2
 8009186:	9305      	str	r3, [sp, #20]
 8009188:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009254 <_svfiprintf_r+0x1fc>
 800918c:	7821      	ldrb	r1, [r4, #0]
 800918e:	2203      	movs	r2, #3
 8009190:	4650      	mov	r0, sl
 8009192:	f7f7 f83d 	bl	8000210 <memchr>
 8009196:	b140      	cbz	r0, 80091aa <_svfiprintf_r+0x152>
 8009198:	2340      	movs	r3, #64	; 0x40
 800919a:	eba0 000a 	sub.w	r0, r0, sl
 800919e:	fa03 f000 	lsl.w	r0, r3, r0
 80091a2:	9b04      	ldr	r3, [sp, #16]
 80091a4:	4303      	orrs	r3, r0
 80091a6:	3401      	adds	r4, #1
 80091a8:	9304      	str	r3, [sp, #16]
 80091aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80091ae:	4826      	ldr	r0, [pc, #152]	; (8009248 <_svfiprintf_r+0x1f0>)
 80091b0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80091b4:	2206      	movs	r2, #6
 80091b6:	f7f7 f82b 	bl	8000210 <memchr>
 80091ba:	2800      	cmp	r0, #0
 80091bc:	d038      	beq.n	8009230 <_svfiprintf_r+0x1d8>
 80091be:	4b23      	ldr	r3, [pc, #140]	; (800924c <_svfiprintf_r+0x1f4>)
 80091c0:	bb1b      	cbnz	r3, 800920a <_svfiprintf_r+0x1b2>
 80091c2:	9b03      	ldr	r3, [sp, #12]
 80091c4:	3307      	adds	r3, #7
 80091c6:	f023 0307 	bic.w	r3, r3, #7
 80091ca:	3308      	adds	r3, #8
 80091cc:	9303      	str	r3, [sp, #12]
 80091ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80091d0:	4433      	add	r3, r6
 80091d2:	9309      	str	r3, [sp, #36]	; 0x24
 80091d4:	e767      	b.n	80090a6 <_svfiprintf_r+0x4e>
 80091d6:	fb0c 3202 	mla	r2, ip, r2, r3
 80091da:	460c      	mov	r4, r1
 80091dc:	2001      	movs	r0, #1
 80091de:	e7a5      	b.n	800912c <_svfiprintf_r+0xd4>
 80091e0:	2300      	movs	r3, #0
 80091e2:	3401      	adds	r4, #1
 80091e4:	9305      	str	r3, [sp, #20]
 80091e6:	4619      	mov	r1, r3
 80091e8:	f04f 0c0a 	mov.w	ip, #10
 80091ec:	4620      	mov	r0, r4
 80091ee:	f810 2b01 	ldrb.w	r2, [r0], #1
 80091f2:	3a30      	subs	r2, #48	; 0x30
 80091f4:	2a09      	cmp	r2, #9
 80091f6:	d903      	bls.n	8009200 <_svfiprintf_r+0x1a8>
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	d0c5      	beq.n	8009188 <_svfiprintf_r+0x130>
 80091fc:	9105      	str	r1, [sp, #20]
 80091fe:	e7c3      	b.n	8009188 <_svfiprintf_r+0x130>
 8009200:	fb0c 2101 	mla	r1, ip, r1, r2
 8009204:	4604      	mov	r4, r0
 8009206:	2301      	movs	r3, #1
 8009208:	e7f0      	b.n	80091ec <_svfiprintf_r+0x194>
 800920a:	ab03      	add	r3, sp, #12
 800920c:	9300      	str	r3, [sp, #0]
 800920e:	462a      	mov	r2, r5
 8009210:	4b0f      	ldr	r3, [pc, #60]	; (8009250 <_svfiprintf_r+0x1f8>)
 8009212:	a904      	add	r1, sp, #16
 8009214:	4638      	mov	r0, r7
 8009216:	f7fc f99f 	bl	8005558 <_printf_float>
 800921a:	1c42      	adds	r2, r0, #1
 800921c:	4606      	mov	r6, r0
 800921e:	d1d6      	bne.n	80091ce <_svfiprintf_r+0x176>
 8009220:	89ab      	ldrh	r3, [r5, #12]
 8009222:	065b      	lsls	r3, r3, #25
 8009224:	f53f af2c 	bmi.w	8009080 <_svfiprintf_r+0x28>
 8009228:	9809      	ldr	r0, [sp, #36]	; 0x24
 800922a:	b01d      	add	sp, #116	; 0x74
 800922c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009230:	ab03      	add	r3, sp, #12
 8009232:	9300      	str	r3, [sp, #0]
 8009234:	462a      	mov	r2, r5
 8009236:	4b06      	ldr	r3, [pc, #24]	; (8009250 <_svfiprintf_r+0x1f8>)
 8009238:	a904      	add	r1, sp, #16
 800923a:	4638      	mov	r0, r7
 800923c:	f7fc fc30 	bl	8005aa0 <_printf_i>
 8009240:	e7eb      	b.n	800921a <_svfiprintf_r+0x1c2>
 8009242:	bf00      	nop
 8009244:	0800c32c 	.word	0x0800c32c
 8009248:	0800c336 	.word	0x0800c336
 800924c:	08005559 	.word	0x08005559
 8009250:	08008fa1 	.word	0x08008fa1
 8009254:	0800c332 	.word	0x0800c332

08009258 <_sungetc_r>:
 8009258:	b538      	push	{r3, r4, r5, lr}
 800925a:	1c4b      	adds	r3, r1, #1
 800925c:	4614      	mov	r4, r2
 800925e:	d103      	bne.n	8009268 <_sungetc_r+0x10>
 8009260:	f04f 35ff 	mov.w	r5, #4294967295
 8009264:	4628      	mov	r0, r5
 8009266:	bd38      	pop	{r3, r4, r5, pc}
 8009268:	8993      	ldrh	r3, [r2, #12]
 800926a:	f023 0320 	bic.w	r3, r3, #32
 800926e:	8193      	strh	r3, [r2, #12]
 8009270:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009272:	6852      	ldr	r2, [r2, #4]
 8009274:	b2cd      	uxtb	r5, r1
 8009276:	b18b      	cbz	r3, 800929c <_sungetc_r+0x44>
 8009278:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800927a:	4293      	cmp	r3, r2
 800927c:	dd08      	ble.n	8009290 <_sungetc_r+0x38>
 800927e:	6823      	ldr	r3, [r4, #0]
 8009280:	1e5a      	subs	r2, r3, #1
 8009282:	6022      	str	r2, [r4, #0]
 8009284:	f803 5c01 	strb.w	r5, [r3, #-1]
 8009288:	6863      	ldr	r3, [r4, #4]
 800928a:	3301      	adds	r3, #1
 800928c:	6063      	str	r3, [r4, #4]
 800928e:	e7e9      	b.n	8009264 <_sungetc_r+0xc>
 8009290:	4621      	mov	r1, r4
 8009292:	f000 fbf1 	bl	8009a78 <__submore>
 8009296:	2800      	cmp	r0, #0
 8009298:	d0f1      	beq.n	800927e <_sungetc_r+0x26>
 800929a:	e7e1      	b.n	8009260 <_sungetc_r+0x8>
 800929c:	6921      	ldr	r1, [r4, #16]
 800929e:	6823      	ldr	r3, [r4, #0]
 80092a0:	b151      	cbz	r1, 80092b8 <_sungetc_r+0x60>
 80092a2:	4299      	cmp	r1, r3
 80092a4:	d208      	bcs.n	80092b8 <_sungetc_r+0x60>
 80092a6:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 80092aa:	42a9      	cmp	r1, r5
 80092ac:	d104      	bne.n	80092b8 <_sungetc_r+0x60>
 80092ae:	3b01      	subs	r3, #1
 80092b0:	3201      	adds	r2, #1
 80092b2:	6023      	str	r3, [r4, #0]
 80092b4:	6062      	str	r2, [r4, #4]
 80092b6:	e7d5      	b.n	8009264 <_sungetc_r+0xc>
 80092b8:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 80092bc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80092c0:	6363      	str	r3, [r4, #52]	; 0x34
 80092c2:	2303      	movs	r3, #3
 80092c4:	63a3      	str	r3, [r4, #56]	; 0x38
 80092c6:	4623      	mov	r3, r4
 80092c8:	f803 5f46 	strb.w	r5, [r3, #70]!
 80092cc:	6023      	str	r3, [r4, #0]
 80092ce:	2301      	movs	r3, #1
 80092d0:	e7dc      	b.n	800928c <_sungetc_r+0x34>

080092d2 <__ssrefill_r>:
 80092d2:	b510      	push	{r4, lr}
 80092d4:	460c      	mov	r4, r1
 80092d6:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80092d8:	b169      	cbz	r1, 80092f6 <__ssrefill_r+0x24>
 80092da:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80092de:	4299      	cmp	r1, r3
 80092e0:	d001      	beq.n	80092e6 <__ssrefill_r+0x14>
 80092e2:	f7ff fd7d 	bl	8008de0 <_free_r>
 80092e6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80092e8:	6063      	str	r3, [r4, #4]
 80092ea:	2000      	movs	r0, #0
 80092ec:	6360      	str	r0, [r4, #52]	; 0x34
 80092ee:	b113      	cbz	r3, 80092f6 <__ssrefill_r+0x24>
 80092f0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80092f2:	6023      	str	r3, [r4, #0]
 80092f4:	bd10      	pop	{r4, pc}
 80092f6:	6923      	ldr	r3, [r4, #16]
 80092f8:	6023      	str	r3, [r4, #0]
 80092fa:	2300      	movs	r3, #0
 80092fc:	6063      	str	r3, [r4, #4]
 80092fe:	89a3      	ldrh	r3, [r4, #12]
 8009300:	f043 0320 	orr.w	r3, r3, #32
 8009304:	81a3      	strh	r3, [r4, #12]
 8009306:	f04f 30ff 	mov.w	r0, #4294967295
 800930a:	e7f3      	b.n	80092f4 <__ssrefill_r+0x22>

0800930c <__ssvfiscanf_r>:
 800930c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009310:	460c      	mov	r4, r1
 8009312:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 8009316:	2100      	movs	r1, #0
 8009318:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 800931c:	49a6      	ldr	r1, [pc, #664]	; (80095b8 <__ssvfiscanf_r+0x2ac>)
 800931e:	91a0      	str	r1, [sp, #640]	; 0x280
 8009320:	f10d 0804 	add.w	r8, sp, #4
 8009324:	49a5      	ldr	r1, [pc, #660]	; (80095bc <__ssvfiscanf_r+0x2b0>)
 8009326:	4fa6      	ldr	r7, [pc, #664]	; (80095c0 <__ssvfiscanf_r+0x2b4>)
 8009328:	f8df 9298 	ldr.w	r9, [pc, #664]	; 80095c4 <__ssvfiscanf_r+0x2b8>
 800932c:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8009330:	4606      	mov	r6, r0
 8009332:	91a1      	str	r1, [sp, #644]	; 0x284
 8009334:	9300      	str	r3, [sp, #0]
 8009336:	7813      	ldrb	r3, [r2, #0]
 8009338:	2b00      	cmp	r3, #0
 800933a:	f000 815a 	beq.w	80095f2 <__ssvfiscanf_r+0x2e6>
 800933e:	5dd9      	ldrb	r1, [r3, r7]
 8009340:	f011 0108 	ands.w	r1, r1, #8
 8009344:	f102 0501 	add.w	r5, r2, #1
 8009348:	d019      	beq.n	800937e <__ssvfiscanf_r+0x72>
 800934a:	6863      	ldr	r3, [r4, #4]
 800934c:	2b00      	cmp	r3, #0
 800934e:	dd0f      	ble.n	8009370 <__ssvfiscanf_r+0x64>
 8009350:	6823      	ldr	r3, [r4, #0]
 8009352:	781a      	ldrb	r2, [r3, #0]
 8009354:	5cba      	ldrb	r2, [r7, r2]
 8009356:	0712      	lsls	r2, r2, #28
 8009358:	d401      	bmi.n	800935e <__ssvfiscanf_r+0x52>
 800935a:	462a      	mov	r2, r5
 800935c:	e7eb      	b.n	8009336 <__ssvfiscanf_r+0x2a>
 800935e:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8009360:	3201      	adds	r2, #1
 8009362:	9245      	str	r2, [sp, #276]	; 0x114
 8009364:	6862      	ldr	r2, [r4, #4]
 8009366:	3301      	adds	r3, #1
 8009368:	3a01      	subs	r2, #1
 800936a:	6062      	str	r2, [r4, #4]
 800936c:	6023      	str	r3, [r4, #0]
 800936e:	e7ec      	b.n	800934a <__ssvfiscanf_r+0x3e>
 8009370:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8009372:	4621      	mov	r1, r4
 8009374:	4630      	mov	r0, r6
 8009376:	4798      	blx	r3
 8009378:	2800      	cmp	r0, #0
 800937a:	d0e9      	beq.n	8009350 <__ssvfiscanf_r+0x44>
 800937c:	e7ed      	b.n	800935a <__ssvfiscanf_r+0x4e>
 800937e:	2b25      	cmp	r3, #37	; 0x25
 8009380:	d012      	beq.n	80093a8 <__ssvfiscanf_r+0x9c>
 8009382:	469a      	mov	sl, r3
 8009384:	6863      	ldr	r3, [r4, #4]
 8009386:	2b00      	cmp	r3, #0
 8009388:	f340 8091 	ble.w	80094ae <__ssvfiscanf_r+0x1a2>
 800938c:	6822      	ldr	r2, [r4, #0]
 800938e:	7813      	ldrb	r3, [r2, #0]
 8009390:	4553      	cmp	r3, sl
 8009392:	f040 812e 	bne.w	80095f2 <__ssvfiscanf_r+0x2e6>
 8009396:	6863      	ldr	r3, [r4, #4]
 8009398:	3b01      	subs	r3, #1
 800939a:	6063      	str	r3, [r4, #4]
 800939c:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800939e:	3201      	adds	r2, #1
 80093a0:	3301      	adds	r3, #1
 80093a2:	6022      	str	r2, [r4, #0]
 80093a4:	9345      	str	r3, [sp, #276]	; 0x114
 80093a6:	e7d8      	b.n	800935a <__ssvfiscanf_r+0x4e>
 80093a8:	9141      	str	r1, [sp, #260]	; 0x104
 80093aa:	9143      	str	r1, [sp, #268]	; 0x10c
 80093ac:	7853      	ldrb	r3, [r2, #1]
 80093ae:	2b2a      	cmp	r3, #42	; 0x2a
 80093b0:	bf02      	ittt	eq
 80093b2:	2310      	moveq	r3, #16
 80093b4:	1c95      	addeq	r5, r2, #2
 80093b6:	9341      	streq	r3, [sp, #260]	; 0x104
 80093b8:	220a      	movs	r2, #10
 80093ba:	46aa      	mov	sl, r5
 80093bc:	f81a 1b01 	ldrb.w	r1, [sl], #1
 80093c0:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 80093c4:	2b09      	cmp	r3, #9
 80093c6:	d91d      	bls.n	8009404 <__ssvfiscanf_r+0xf8>
 80093c8:	487e      	ldr	r0, [pc, #504]	; (80095c4 <__ssvfiscanf_r+0x2b8>)
 80093ca:	2203      	movs	r2, #3
 80093cc:	f7f6 ff20 	bl	8000210 <memchr>
 80093d0:	b140      	cbz	r0, 80093e4 <__ssvfiscanf_r+0xd8>
 80093d2:	2301      	movs	r3, #1
 80093d4:	eba0 0009 	sub.w	r0, r0, r9
 80093d8:	fa03 f000 	lsl.w	r0, r3, r0
 80093dc:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80093de:	4318      	orrs	r0, r3
 80093e0:	9041      	str	r0, [sp, #260]	; 0x104
 80093e2:	4655      	mov	r5, sl
 80093e4:	f815 3b01 	ldrb.w	r3, [r5], #1
 80093e8:	2b78      	cmp	r3, #120	; 0x78
 80093ea:	d806      	bhi.n	80093fa <__ssvfiscanf_r+0xee>
 80093ec:	2b57      	cmp	r3, #87	; 0x57
 80093ee:	d810      	bhi.n	8009412 <__ssvfiscanf_r+0x106>
 80093f0:	2b25      	cmp	r3, #37	; 0x25
 80093f2:	d0c6      	beq.n	8009382 <__ssvfiscanf_r+0x76>
 80093f4:	d856      	bhi.n	80094a4 <__ssvfiscanf_r+0x198>
 80093f6:	2b00      	cmp	r3, #0
 80093f8:	d064      	beq.n	80094c4 <__ssvfiscanf_r+0x1b8>
 80093fa:	2303      	movs	r3, #3
 80093fc:	9347      	str	r3, [sp, #284]	; 0x11c
 80093fe:	230a      	movs	r3, #10
 8009400:	9342      	str	r3, [sp, #264]	; 0x108
 8009402:	e071      	b.n	80094e8 <__ssvfiscanf_r+0x1dc>
 8009404:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8009406:	fb02 1103 	mla	r1, r2, r3, r1
 800940a:	3930      	subs	r1, #48	; 0x30
 800940c:	9143      	str	r1, [sp, #268]	; 0x10c
 800940e:	4655      	mov	r5, sl
 8009410:	e7d3      	b.n	80093ba <__ssvfiscanf_r+0xae>
 8009412:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8009416:	2a20      	cmp	r2, #32
 8009418:	d8ef      	bhi.n	80093fa <__ssvfiscanf_r+0xee>
 800941a:	a101      	add	r1, pc, #4	; (adr r1, 8009420 <__ssvfiscanf_r+0x114>)
 800941c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8009420:	080094d3 	.word	0x080094d3
 8009424:	080093fb 	.word	0x080093fb
 8009428:	080093fb 	.word	0x080093fb
 800942c:	08009531 	.word	0x08009531
 8009430:	080093fb 	.word	0x080093fb
 8009434:	080093fb 	.word	0x080093fb
 8009438:	080093fb 	.word	0x080093fb
 800943c:	080093fb 	.word	0x080093fb
 8009440:	080093fb 	.word	0x080093fb
 8009444:	080093fb 	.word	0x080093fb
 8009448:	080093fb 	.word	0x080093fb
 800944c:	08009547 	.word	0x08009547
 8009450:	0800951d 	.word	0x0800951d
 8009454:	080094ab 	.word	0x080094ab
 8009458:	080094ab 	.word	0x080094ab
 800945c:	080094ab 	.word	0x080094ab
 8009460:	080093fb 	.word	0x080093fb
 8009464:	08009521 	.word	0x08009521
 8009468:	080093fb 	.word	0x080093fb
 800946c:	080093fb 	.word	0x080093fb
 8009470:	080093fb 	.word	0x080093fb
 8009474:	080093fb 	.word	0x080093fb
 8009478:	08009557 	.word	0x08009557
 800947c:	08009529 	.word	0x08009529
 8009480:	080094cb 	.word	0x080094cb
 8009484:	080093fb 	.word	0x080093fb
 8009488:	080093fb 	.word	0x080093fb
 800948c:	08009553 	.word	0x08009553
 8009490:	080093fb 	.word	0x080093fb
 8009494:	0800951d 	.word	0x0800951d
 8009498:	080093fb 	.word	0x080093fb
 800949c:	080093fb 	.word	0x080093fb
 80094a0:	080094d3 	.word	0x080094d3
 80094a4:	3b45      	subs	r3, #69	; 0x45
 80094a6:	2b02      	cmp	r3, #2
 80094a8:	d8a7      	bhi.n	80093fa <__ssvfiscanf_r+0xee>
 80094aa:	2305      	movs	r3, #5
 80094ac:	e01b      	b.n	80094e6 <__ssvfiscanf_r+0x1da>
 80094ae:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80094b0:	4621      	mov	r1, r4
 80094b2:	4630      	mov	r0, r6
 80094b4:	4798      	blx	r3
 80094b6:	2800      	cmp	r0, #0
 80094b8:	f43f af68 	beq.w	800938c <__ssvfiscanf_r+0x80>
 80094bc:	9844      	ldr	r0, [sp, #272]	; 0x110
 80094be:	2800      	cmp	r0, #0
 80094c0:	f040 808d 	bne.w	80095de <__ssvfiscanf_r+0x2d2>
 80094c4:	f04f 30ff 	mov.w	r0, #4294967295
 80094c8:	e08f      	b.n	80095ea <__ssvfiscanf_r+0x2de>
 80094ca:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80094cc:	f042 0220 	orr.w	r2, r2, #32
 80094d0:	9241      	str	r2, [sp, #260]	; 0x104
 80094d2:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80094d4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80094d8:	9241      	str	r2, [sp, #260]	; 0x104
 80094da:	2210      	movs	r2, #16
 80094dc:	2b6f      	cmp	r3, #111	; 0x6f
 80094de:	9242      	str	r2, [sp, #264]	; 0x108
 80094e0:	bf34      	ite	cc
 80094e2:	2303      	movcc	r3, #3
 80094e4:	2304      	movcs	r3, #4
 80094e6:	9347      	str	r3, [sp, #284]	; 0x11c
 80094e8:	6863      	ldr	r3, [r4, #4]
 80094ea:	2b00      	cmp	r3, #0
 80094ec:	dd42      	ble.n	8009574 <__ssvfiscanf_r+0x268>
 80094ee:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80094f0:	0659      	lsls	r1, r3, #25
 80094f2:	d404      	bmi.n	80094fe <__ssvfiscanf_r+0x1f2>
 80094f4:	6823      	ldr	r3, [r4, #0]
 80094f6:	781a      	ldrb	r2, [r3, #0]
 80094f8:	5cba      	ldrb	r2, [r7, r2]
 80094fa:	0712      	lsls	r2, r2, #28
 80094fc:	d441      	bmi.n	8009582 <__ssvfiscanf_r+0x276>
 80094fe:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8009500:	2b02      	cmp	r3, #2
 8009502:	dc50      	bgt.n	80095a6 <__ssvfiscanf_r+0x29a>
 8009504:	466b      	mov	r3, sp
 8009506:	4622      	mov	r2, r4
 8009508:	a941      	add	r1, sp, #260	; 0x104
 800950a:	4630      	mov	r0, r6
 800950c:	f000 f876 	bl	80095fc <_scanf_chars>
 8009510:	2801      	cmp	r0, #1
 8009512:	d06e      	beq.n	80095f2 <__ssvfiscanf_r+0x2e6>
 8009514:	2802      	cmp	r0, #2
 8009516:	f47f af20 	bne.w	800935a <__ssvfiscanf_r+0x4e>
 800951a:	e7cf      	b.n	80094bc <__ssvfiscanf_r+0x1b0>
 800951c:	220a      	movs	r2, #10
 800951e:	e7dd      	b.n	80094dc <__ssvfiscanf_r+0x1d0>
 8009520:	2300      	movs	r3, #0
 8009522:	9342      	str	r3, [sp, #264]	; 0x108
 8009524:	2303      	movs	r3, #3
 8009526:	e7de      	b.n	80094e6 <__ssvfiscanf_r+0x1da>
 8009528:	2308      	movs	r3, #8
 800952a:	9342      	str	r3, [sp, #264]	; 0x108
 800952c:	2304      	movs	r3, #4
 800952e:	e7da      	b.n	80094e6 <__ssvfiscanf_r+0x1da>
 8009530:	4629      	mov	r1, r5
 8009532:	4640      	mov	r0, r8
 8009534:	f000 f9e0 	bl	80098f8 <__sccl>
 8009538:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800953a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800953e:	9341      	str	r3, [sp, #260]	; 0x104
 8009540:	4605      	mov	r5, r0
 8009542:	2301      	movs	r3, #1
 8009544:	e7cf      	b.n	80094e6 <__ssvfiscanf_r+0x1da>
 8009546:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8009548:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800954c:	9341      	str	r3, [sp, #260]	; 0x104
 800954e:	2300      	movs	r3, #0
 8009550:	e7c9      	b.n	80094e6 <__ssvfiscanf_r+0x1da>
 8009552:	2302      	movs	r3, #2
 8009554:	e7c7      	b.n	80094e6 <__ssvfiscanf_r+0x1da>
 8009556:	9841      	ldr	r0, [sp, #260]	; 0x104
 8009558:	06c3      	lsls	r3, r0, #27
 800955a:	f53f aefe 	bmi.w	800935a <__ssvfiscanf_r+0x4e>
 800955e:	9b00      	ldr	r3, [sp, #0]
 8009560:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8009562:	1d19      	adds	r1, r3, #4
 8009564:	9100      	str	r1, [sp, #0]
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	f010 0f01 	tst.w	r0, #1
 800956c:	bf14      	ite	ne
 800956e:	801a      	strhne	r2, [r3, #0]
 8009570:	601a      	streq	r2, [r3, #0]
 8009572:	e6f2      	b.n	800935a <__ssvfiscanf_r+0x4e>
 8009574:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8009576:	4621      	mov	r1, r4
 8009578:	4630      	mov	r0, r6
 800957a:	4798      	blx	r3
 800957c:	2800      	cmp	r0, #0
 800957e:	d0b6      	beq.n	80094ee <__ssvfiscanf_r+0x1e2>
 8009580:	e79c      	b.n	80094bc <__ssvfiscanf_r+0x1b0>
 8009582:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8009584:	3201      	adds	r2, #1
 8009586:	9245      	str	r2, [sp, #276]	; 0x114
 8009588:	6862      	ldr	r2, [r4, #4]
 800958a:	3a01      	subs	r2, #1
 800958c:	2a00      	cmp	r2, #0
 800958e:	6062      	str	r2, [r4, #4]
 8009590:	dd02      	ble.n	8009598 <__ssvfiscanf_r+0x28c>
 8009592:	3301      	adds	r3, #1
 8009594:	6023      	str	r3, [r4, #0]
 8009596:	e7ad      	b.n	80094f4 <__ssvfiscanf_r+0x1e8>
 8009598:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800959a:	4621      	mov	r1, r4
 800959c:	4630      	mov	r0, r6
 800959e:	4798      	blx	r3
 80095a0:	2800      	cmp	r0, #0
 80095a2:	d0a7      	beq.n	80094f4 <__ssvfiscanf_r+0x1e8>
 80095a4:	e78a      	b.n	80094bc <__ssvfiscanf_r+0x1b0>
 80095a6:	2b04      	cmp	r3, #4
 80095a8:	dc0e      	bgt.n	80095c8 <__ssvfiscanf_r+0x2bc>
 80095aa:	466b      	mov	r3, sp
 80095ac:	4622      	mov	r2, r4
 80095ae:	a941      	add	r1, sp, #260	; 0x104
 80095b0:	4630      	mov	r0, r6
 80095b2:	f000 f87d 	bl	80096b0 <_scanf_i>
 80095b6:	e7ab      	b.n	8009510 <__ssvfiscanf_r+0x204>
 80095b8:	08009259 	.word	0x08009259
 80095bc:	080092d3 	.word	0x080092d3
 80095c0:	0800bfc9 	.word	0x0800bfc9
 80095c4:	0800c332 	.word	0x0800c332
 80095c8:	4b0b      	ldr	r3, [pc, #44]	; (80095f8 <__ssvfiscanf_r+0x2ec>)
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	f43f aec5 	beq.w	800935a <__ssvfiscanf_r+0x4e>
 80095d0:	466b      	mov	r3, sp
 80095d2:	4622      	mov	r2, r4
 80095d4:	a941      	add	r1, sp, #260	; 0x104
 80095d6:	4630      	mov	r0, r6
 80095d8:	f7fc fb88 	bl	8005cec <_scanf_float>
 80095dc:	e798      	b.n	8009510 <__ssvfiscanf_r+0x204>
 80095de:	89a3      	ldrh	r3, [r4, #12]
 80095e0:	f013 0f40 	tst.w	r3, #64	; 0x40
 80095e4:	bf18      	it	ne
 80095e6:	f04f 30ff 	movne.w	r0, #4294967295
 80095ea:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 80095ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80095f2:	9844      	ldr	r0, [sp, #272]	; 0x110
 80095f4:	e7f9      	b.n	80095ea <__ssvfiscanf_r+0x2de>
 80095f6:	bf00      	nop
 80095f8:	08005ced 	.word	0x08005ced

080095fc <_scanf_chars>:
 80095fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009600:	4615      	mov	r5, r2
 8009602:	688a      	ldr	r2, [r1, #8]
 8009604:	4680      	mov	r8, r0
 8009606:	460c      	mov	r4, r1
 8009608:	b932      	cbnz	r2, 8009618 <_scanf_chars+0x1c>
 800960a:	698a      	ldr	r2, [r1, #24]
 800960c:	2a00      	cmp	r2, #0
 800960e:	bf0c      	ite	eq
 8009610:	2201      	moveq	r2, #1
 8009612:	f04f 32ff 	movne.w	r2, #4294967295
 8009616:	608a      	str	r2, [r1, #8]
 8009618:	6822      	ldr	r2, [r4, #0]
 800961a:	f8df 9090 	ldr.w	r9, [pc, #144]	; 80096ac <_scanf_chars+0xb0>
 800961e:	06d1      	lsls	r1, r2, #27
 8009620:	bf5f      	itttt	pl
 8009622:	681a      	ldrpl	r2, [r3, #0]
 8009624:	1d11      	addpl	r1, r2, #4
 8009626:	6019      	strpl	r1, [r3, #0]
 8009628:	6816      	ldrpl	r6, [r2, #0]
 800962a:	2700      	movs	r7, #0
 800962c:	69a0      	ldr	r0, [r4, #24]
 800962e:	b188      	cbz	r0, 8009654 <_scanf_chars+0x58>
 8009630:	2801      	cmp	r0, #1
 8009632:	d107      	bne.n	8009644 <_scanf_chars+0x48>
 8009634:	682a      	ldr	r2, [r5, #0]
 8009636:	7811      	ldrb	r1, [r2, #0]
 8009638:	6962      	ldr	r2, [r4, #20]
 800963a:	5c52      	ldrb	r2, [r2, r1]
 800963c:	b952      	cbnz	r2, 8009654 <_scanf_chars+0x58>
 800963e:	2f00      	cmp	r7, #0
 8009640:	d031      	beq.n	80096a6 <_scanf_chars+0xaa>
 8009642:	e022      	b.n	800968a <_scanf_chars+0x8e>
 8009644:	2802      	cmp	r0, #2
 8009646:	d120      	bne.n	800968a <_scanf_chars+0x8e>
 8009648:	682b      	ldr	r3, [r5, #0]
 800964a:	781b      	ldrb	r3, [r3, #0]
 800964c:	f813 3009 	ldrb.w	r3, [r3, r9]
 8009650:	071b      	lsls	r3, r3, #28
 8009652:	d41a      	bmi.n	800968a <_scanf_chars+0x8e>
 8009654:	6823      	ldr	r3, [r4, #0]
 8009656:	06da      	lsls	r2, r3, #27
 8009658:	bf5e      	ittt	pl
 800965a:	682b      	ldrpl	r3, [r5, #0]
 800965c:	781b      	ldrbpl	r3, [r3, #0]
 800965e:	f806 3b01 	strbpl.w	r3, [r6], #1
 8009662:	682a      	ldr	r2, [r5, #0]
 8009664:	686b      	ldr	r3, [r5, #4]
 8009666:	3201      	adds	r2, #1
 8009668:	602a      	str	r2, [r5, #0]
 800966a:	68a2      	ldr	r2, [r4, #8]
 800966c:	3b01      	subs	r3, #1
 800966e:	3a01      	subs	r2, #1
 8009670:	606b      	str	r3, [r5, #4]
 8009672:	3701      	adds	r7, #1
 8009674:	60a2      	str	r2, [r4, #8]
 8009676:	b142      	cbz	r2, 800968a <_scanf_chars+0x8e>
 8009678:	2b00      	cmp	r3, #0
 800967a:	dcd7      	bgt.n	800962c <_scanf_chars+0x30>
 800967c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8009680:	4629      	mov	r1, r5
 8009682:	4640      	mov	r0, r8
 8009684:	4798      	blx	r3
 8009686:	2800      	cmp	r0, #0
 8009688:	d0d0      	beq.n	800962c <_scanf_chars+0x30>
 800968a:	6823      	ldr	r3, [r4, #0]
 800968c:	f013 0310 	ands.w	r3, r3, #16
 8009690:	d105      	bne.n	800969e <_scanf_chars+0xa2>
 8009692:	68e2      	ldr	r2, [r4, #12]
 8009694:	3201      	adds	r2, #1
 8009696:	60e2      	str	r2, [r4, #12]
 8009698:	69a2      	ldr	r2, [r4, #24]
 800969a:	b102      	cbz	r2, 800969e <_scanf_chars+0xa2>
 800969c:	7033      	strb	r3, [r6, #0]
 800969e:	6923      	ldr	r3, [r4, #16]
 80096a0:	443b      	add	r3, r7
 80096a2:	6123      	str	r3, [r4, #16]
 80096a4:	2000      	movs	r0, #0
 80096a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80096aa:	bf00      	nop
 80096ac:	0800bfc9 	.word	0x0800bfc9

080096b0 <_scanf_i>:
 80096b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80096b4:	4698      	mov	r8, r3
 80096b6:	4b76      	ldr	r3, [pc, #472]	; (8009890 <_scanf_i+0x1e0>)
 80096b8:	460c      	mov	r4, r1
 80096ba:	4682      	mov	sl, r0
 80096bc:	4616      	mov	r6, r2
 80096be:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80096c2:	b087      	sub	sp, #28
 80096c4:	ab03      	add	r3, sp, #12
 80096c6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80096ca:	4b72      	ldr	r3, [pc, #456]	; (8009894 <_scanf_i+0x1e4>)
 80096cc:	69a1      	ldr	r1, [r4, #24]
 80096ce:	4a72      	ldr	r2, [pc, #456]	; (8009898 <_scanf_i+0x1e8>)
 80096d0:	2903      	cmp	r1, #3
 80096d2:	bf18      	it	ne
 80096d4:	461a      	movne	r2, r3
 80096d6:	68a3      	ldr	r3, [r4, #8]
 80096d8:	9201      	str	r2, [sp, #4]
 80096da:	1e5a      	subs	r2, r3, #1
 80096dc:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80096e0:	bf88      	it	hi
 80096e2:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80096e6:	4627      	mov	r7, r4
 80096e8:	bf82      	ittt	hi
 80096ea:	eb03 0905 	addhi.w	r9, r3, r5
 80096ee:	f240 135d 	movwhi	r3, #349	; 0x15d
 80096f2:	60a3      	strhi	r3, [r4, #8]
 80096f4:	f857 3b1c 	ldr.w	r3, [r7], #28
 80096f8:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 80096fc:	bf98      	it	ls
 80096fe:	f04f 0900 	movls.w	r9, #0
 8009702:	6023      	str	r3, [r4, #0]
 8009704:	463d      	mov	r5, r7
 8009706:	f04f 0b00 	mov.w	fp, #0
 800970a:	6831      	ldr	r1, [r6, #0]
 800970c:	ab03      	add	r3, sp, #12
 800970e:	7809      	ldrb	r1, [r1, #0]
 8009710:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8009714:	2202      	movs	r2, #2
 8009716:	f7f6 fd7b 	bl	8000210 <memchr>
 800971a:	b328      	cbz	r0, 8009768 <_scanf_i+0xb8>
 800971c:	f1bb 0f01 	cmp.w	fp, #1
 8009720:	d159      	bne.n	80097d6 <_scanf_i+0x126>
 8009722:	6862      	ldr	r2, [r4, #4]
 8009724:	b92a      	cbnz	r2, 8009732 <_scanf_i+0x82>
 8009726:	6822      	ldr	r2, [r4, #0]
 8009728:	2308      	movs	r3, #8
 800972a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800972e:	6063      	str	r3, [r4, #4]
 8009730:	6022      	str	r2, [r4, #0]
 8009732:	6822      	ldr	r2, [r4, #0]
 8009734:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8009738:	6022      	str	r2, [r4, #0]
 800973a:	68a2      	ldr	r2, [r4, #8]
 800973c:	1e51      	subs	r1, r2, #1
 800973e:	60a1      	str	r1, [r4, #8]
 8009740:	b192      	cbz	r2, 8009768 <_scanf_i+0xb8>
 8009742:	6832      	ldr	r2, [r6, #0]
 8009744:	1c51      	adds	r1, r2, #1
 8009746:	6031      	str	r1, [r6, #0]
 8009748:	7812      	ldrb	r2, [r2, #0]
 800974a:	f805 2b01 	strb.w	r2, [r5], #1
 800974e:	6872      	ldr	r2, [r6, #4]
 8009750:	3a01      	subs	r2, #1
 8009752:	2a00      	cmp	r2, #0
 8009754:	6072      	str	r2, [r6, #4]
 8009756:	dc07      	bgt.n	8009768 <_scanf_i+0xb8>
 8009758:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 800975c:	4631      	mov	r1, r6
 800975e:	4650      	mov	r0, sl
 8009760:	4790      	blx	r2
 8009762:	2800      	cmp	r0, #0
 8009764:	f040 8085 	bne.w	8009872 <_scanf_i+0x1c2>
 8009768:	f10b 0b01 	add.w	fp, fp, #1
 800976c:	f1bb 0f03 	cmp.w	fp, #3
 8009770:	d1cb      	bne.n	800970a <_scanf_i+0x5a>
 8009772:	6863      	ldr	r3, [r4, #4]
 8009774:	b90b      	cbnz	r3, 800977a <_scanf_i+0xca>
 8009776:	230a      	movs	r3, #10
 8009778:	6063      	str	r3, [r4, #4]
 800977a:	6863      	ldr	r3, [r4, #4]
 800977c:	4947      	ldr	r1, [pc, #284]	; (800989c <_scanf_i+0x1ec>)
 800977e:	6960      	ldr	r0, [r4, #20]
 8009780:	1ac9      	subs	r1, r1, r3
 8009782:	f000 f8b9 	bl	80098f8 <__sccl>
 8009786:	f04f 0b00 	mov.w	fp, #0
 800978a:	68a3      	ldr	r3, [r4, #8]
 800978c:	6822      	ldr	r2, [r4, #0]
 800978e:	2b00      	cmp	r3, #0
 8009790:	d03d      	beq.n	800980e <_scanf_i+0x15e>
 8009792:	6831      	ldr	r1, [r6, #0]
 8009794:	6960      	ldr	r0, [r4, #20]
 8009796:	f891 c000 	ldrb.w	ip, [r1]
 800979a:	f810 000c 	ldrb.w	r0, [r0, ip]
 800979e:	2800      	cmp	r0, #0
 80097a0:	d035      	beq.n	800980e <_scanf_i+0x15e>
 80097a2:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 80097a6:	d124      	bne.n	80097f2 <_scanf_i+0x142>
 80097a8:	0510      	lsls	r0, r2, #20
 80097aa:	d522      	bpl.n	80097f2 <_scanf_i+0x142>
 80097ac:	f10b 0b01 	add.w	fp, fp, #1
 80097b0:	f1b9 0f00 	cmp.w	r9, #0
 80097b4:	d003      	beq.n	80097be <_scanf_i+0x10e>
 80097b6:	3301      	adds	r3, #1
 80097b8:	f109 39ff 	add.w	r9, r9, #4294967295
 80097bc:	60a3      	str	r3, [r4, #8]
 80097be:	6873      	ldr	r3, [r6, #4]
 80097c0:	3b01      	subs	r3, #1
 80097c2:	2b00      	cmp	r3, #0
 80097c4:	6073      	str	r3, [r6, #4]
 80097c6:	dd1b      	ble.n	8009800 <_scanf_i+0x150>
 80097c8:	6833      	ldr	r3, [r6, #0]
 80097ca:	3301      	adds	r3, #1
 80097cc:	6033      	str	r3, [r6, #0]
 80097ce:	68a3      	ldr	r3, [r4, #8]
 80097d0:	3b01      	subs	r3, #1
 80097d2:	60a3      	str	r3, [r4, #8]
 80097d4:	e7d9      	b.n	800978a <_scanf_i+0xda>
 80097d6:	f1bb 0f02 	cmp.w	fp, #2
 80097da:	d1ae      	bne.n	800973a <_scanf_i+0x8a>
 80097dc:	6822      	ldr	r2, [r4, #0]
 80097de:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 80097e2:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 80097e6:	d1bf      	bne.n	8009768 <_scanf_i+0xb8>
 80097e8:	2310      	movs	r3, #16
 80097ea:	6063      	str	r3, [r4, #4]
 80097ec:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80097f0:	e7a2      	b.n	8009738 <_scanf_i+0x88>
 80097f2:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 80097f6:	6022      	str	r2, [r4, #0]
 80097f8:	780b      	ldrb	r3, [r1, #0]
 80097fa:	f805 3b01 	strb.w	r3, [r5], #1
 80097fe:	e7de      	b.n	80097be <_scanf_i+0x10e>
 8009800:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8009804:	4631      	mov	r1, r6
 8009806:	4650      	mov	r0, sl
 8009808:	4798      	blx	r3
 800980a:	2800      	cmp	r0, #0
 800980c:	d0df      	beq.n	80097ce <_scanf_i+0x11e>
 800980e:	6823      	ldr	r3, [r4, #0]
 8009810:	05db      	lsls	r3, r3, #23
 8009812:	d50d      	bpl.n	8009830 <_scanf_i+0x180>
 8009814:	42bd      	cmp	r5, r7
 8009816:	d909      	bls.n	800982c <_scanf_i+0x17c>
 8009818:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800981c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009820:	4632      	mov	r2, r6
 8009822:	4650      	mov	r0, sl
 8009824:	4798      	blx	r3
 8009826:	f105 39ff 	add.w	r9, r5, #4294967295
 800982a:	464d      	mov	r5, r9
 800982c:	42bd      	cmp	r5, r7
 800982e:	d02d      	beq.n	800988c <_scanf_i+0x1dc>
 8009830:	6822      	ldr	r2, [r4, #0]
 8009832:	f012 0210 	ands.w	r2, r2, #16
 8009836:	d113      	bne.n	8009860 <_scanf_i+0x1b0>
 8009838:	702a      	strb	r2, [r5, #0]
 800983a:	6863      	ldr	r3, [r4, #4]
 800983c:	9e01      	ldr	r6, [sp, #4]
 800983e:	4639      	mov	r1, r7
 8009840:	4650      	mov	r0, sl
 8009842:	47b0      	blx	r6
 8009844:	6821      	ldr	r1, [r4, #0]
 8009846:	f8d8 3000 	ldr.w	r3, [r8]
 800984a:	f011 0f20 	tst.w	r1, #32
 800984e:	d013      	beq.n	8009878 <_scanf_i+0x1c8>
 8009850:	1d1a      	adds	r2, r3, #4
 8009852:	f8c8 2000 	str.w	r2, [r8]
 8009856:	681b      	ldr	r3, [r3, #0]
 8009858:	6018      	str	r0, [r3, #0]
 800985a:	68e3      	ldr	r3, [r4, #12]
 800985c:	3301      	adds	r3, #1
 800985e:	60e3      	str	r3, [r4, #12]
 8009860:	1bed      	subs	r5, r5, r7
 8009862:	44ab      	add	fp, r5
 8009864:	6925      	ldr	r5, [r4, #16]
 8009866:	445d      	add	r5, fp
 8009868:	6125      	str	r5, [r4, #16]
 800986a:	2000      	movs	r0, #0
 800986c:	b007      	add	sp, #28
 800986e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009872:	f04f 0b00 	mov.w	fp, #0
 8009876:	e7ca      	b.n	800980e <_scanf_i+0x15e>
 8009878:	1d1a      	adds	r2, r3, #4
 800987a:	f8c8 2000 	str.w	r2, [r8]
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	f011 0f01 	tst.w	r1, #1
 8009884:	bf14      	ite	ne
 8009886:	8018      	strhne	r0, [r3, #0]
 8009888:	6018      	streq	r0, [r3, #0]
 800988a:	e7e6      	b.n	800985a <_scanf_i+0x1aa>
 800988c:	2001      	movs	r0, #1
 800988e:	e7ed      	b.n	800986c <_scanf_i+0x1bc>
 8009890:	0800bf30 	.word	0x0800bf30
 8009894:	08009a75 	.word	0x08009a75
 8009898:	08006f95 	.word	0x08006f95
 800989c:	0800c356 	.word	0x0800c356

080098a0 <_read_r>:
 80098a0:	b538      	push	{r3, r4, r5, lr}
 80098a2:	4d07      	ldr	r5, [pc, #28]	; (80098c0 <_read_r+0x20>)
 80098a4:	4604      	mov	r4, r0
 80098a6:	4608      	mov	r0, r1
 80098a8:	4611      	mov	r1, r2
 80098aa:	2200      	movs	r2, #0
 80098ac:	602a      	str	r2, [r5, #0]
 80098ae:	461a      	mov	r2, r3
 80098b0:	f7f9 f86f 	bl	8002992 <_read>
 80098b4:	1c43      	adds	r3, r0, #1
 80098b6:	d102      	bne.n	80098be <_read_r+0x1e>
 80098b8:	682b      	ldr	r3, [r5, #0]
 80098ba:	b103      	cbz	r3, 80098be <_read_r+0x1e>
 80098bc:	6023      	str	r3, [r4, #0]
 80098be:	bd38      	pop	{r3, r4, r5, pc}
 80098c0:	20000d14 	.word	0x20000d14
 80098c4:	00000000 	.word	0x00000000

080098c8 <nan>:
 80098c8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80098d0 <nan+0x8>
 80098cc:	4770      	bx	lr
 80098ce:	bf00      	nop
 80098d0:	00000000 	.word	0x00000000
 80098d4:	7ff80000 	.word	0x7ff80000

080098d8 <_sbrk_r>:
 80098d8:	b538      	push	{r3, r4, r5, lr}
 80098da:	4d06      	ldr	r5, [pc, #24]	; (80098f4 <_sbrk_r+0x1c>)
 80098dc:	2300      	movs	r3, #0
 80098de:	4604      	mov	r4, r0
 80098e0:	4608      	mov	r0, r1
 80098e2:	602b      	str	r3, [r5, #0]
 80098e4:	f7f9 f8c2 	bl	8002a6c <_sbrk>
 80098e8:	1c43      	adds	r3, r0, #1
 80098ea:	d102      	bne.n	80098f2 <_sbrk_r+0x1a>
 80098ec:	682b      	ldr	r3, [r5, #0]
 80098ee:	b103      	cbz	r3, 80098f2 <_sbrk_r+0x1a>
 80098f0:	6023      	str	r3, [r4, #0]
 80098f2:	bd38      	pop	{r3, r4, r5, pc}
 80098f4:	20000d14 	.word	0x20000d14

080098f8 <__sccl>:
 80098f8:	b570      	push	{r4, r5, r6, lr}
 80098fa:	780b      	ldrb	r3, [r1, #0]
 80098fc:	4604      	mov	r4, r0
 80098fe:	2b5e      	cmp	r3, #94	; 0x5e
 8009900:	bf0b      	itete	eq
 8009902:	784b      	ldrbeq	r3, [r1, #1]
 8009904:	1c48      	addne	r0, r1, #1
 8009906:	1c88      	addeq	r0, r1, #2
 8009908:	2200      	movne	r2, #0
 800990a:	bf08      	it	eq
 800990c:	2201      	moveq	r2, #1
 800990e:	1e61      	subs	r1, r4, #1
 8009910:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8009914:	f801 2f01 	strb.w	r2, [r1, #1]!
 8009918:	42a9      	cmp	r1, r5
 800991a:	d1fb      	bne.n	8009914 <__sccl+0x1c>
 800991c:	b90b      	cbnz	r3, 8009922 <__sccl+0x2a>
 800991e:	3801      	subs	r0, #1
 8009920:	bd70      	pop	{r4, r5, r6, pc}
 8009922:	f082 0201 	eor.w	r2, r2, #1
 8009926:	54e2      	strb	r2, [r4, r3]
 8009928:	4605      	mov	r5, r0
 800992a:	4628      	mov	r0, r5
 800992c:	f810 1b01 	ldrb.w	r1, [r0], #1
 8009930:	292d      	cmp	r1, #45	; 0x2d
 8009932:	d006      	beq.n	8009942 <__sccl+0x4a>
 8009934:	295d      	cmp	r1, #93	; 0x5d
 8009936:	d0f3      	beq.n	8009920 <__sccl+0x28>
 8009938:	b909      	cbnz	r1, 800993e <__sccl+0x46>
 800993a:	4628      	mov	r0, r5
 800993c:	e7f0      	b.n	8009920 <__sccl+0x28>
 800993e:	460b      	mov	r3, r1
 8009940:	e7f1      	b.n	8009926 <__sccl+0x2e>
 8009942:	786e      	ldrb	r6, [r5, #1]
 8009944:	2e5d      	cmp	r6, #93	; 0x5d
 8009946:	d0fa      	beq.n	800993e <__sccl+0x46>
 8009948:	42b3      	cmp	r3, r6
 800994a:	dcf8      	bgt.n	800993e <__sccl+0x46>
 800994c:	3502      	adds	r5, #2
 800994e:	4619      	mov	r1, r3
 8009950:	3101      	adds	r1, #1
 8009952:	428e      	cmp	r6, r1
 8009954:	5462      	strb	r2, [r4, r1]
 8009956:	dcfb      	bgt.n	8009950 <__sccl+0x58>
 8009958:	1af1      	subs	r1, r6, r3
 800995a:	3901      	subs	r1, #1
 800995c:	1c58      	adds	r0, r3, #1
 800995e:	42b3      	cmp	r3, r6
 8009960:	bfa8      	it	ge
 8009962:	2100      	movge	r1, #0
 8009964:	1843      	adds	r3, r0, r1
 8009966:	e7e0      	b.n	800992a <__sccl+0x32>

08009968 <strncmp>:
 8009968:	b510      	push	{r4, lr}
 800996a:	b17a      	cbz	r2, 800998c <strncmp+0x24>
 800996c:	4603      	mov	r3, r0
 800996e:	3901      	subs	r1, #1
 8009970:	1884      	adds	r4, r0, r2
 8009972:	f813 0b01 	ldrb.w	r0, [r3], #1
 8009976:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800997a:	4290      	cmp	r0, r2
 800997c:	d101      	bne.n	8009982 <strncmp+0x1a>
 800997e:	42a3      	cmp	r3, r4
 8009980:	d101      	bne.n	8009986 <strncmp+0x1e>
 8009982:	1a80      	subs	r0, r0, r2
 8009984:	bd10      	pop	{r4, pc}
 8009986:	2800      	cmp	r0, #0
 8009988:	d1f3      	bne.n	8009972 <strncmp+0xa>
 800998a:	e7fa      	b.n	8009982 <strncmp+0x1a>
 800998c:	4610      	mov	r0, r2
 800998e:	e7f9      	b.n	8009984 <strncmp+0x1c>

08009990 <_strtoul_l.constprop.0>:
 8009990:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009994:	4f36      	ldr	r7, [pc, #216]	; (8009a70 <_strtoul_l.constprop.0+0xe0>)
 8009996:	4686      	mov	lr, r0
 8009998:	460d      	mov	r5, r1
 800999a:	4628      	mov	r0, r5
 800999c:	f815 4b01 	ldrb.w	r4, [r5], #1
 80099a0:	5de6      	ldrb	r6, [r4, r7]
 80099a2:	f016 0608 	ands.w	r6, r6, #8
 80099a6:	d1f8      	bne.n	800999a <_strtoul_l.constprop.0+0xa>
 80099a8:	2c2d      	cmp	r4, #45	; 0x2d
 80099aa:	d12f      	bne.n	8009a0c <_strtoul_l.constprop.0+0x7c>
 80099ac:	782c      	ldrb	r4, [r5, #0]
 80099ae:	2601      	movs	r6, #1
 80099b0:	1c85      	adds	r5, r0, #2
 80099b2:	2b00      	cmp	r3, #0
 80099b4:	d057      	beq.n	8009a66 <_strtoul_l.constprop.0+0xd6>
 80099b6:	2b10      	cmp	r3, #16
 80099b8:	d109      	bne.n	80099ce <_strtoul_l.constprop.0+0x3e>
 80099ba:	2c30      	cmp	r4, #48	; 0x30
 80099bc:	d107      	bne.n	80099ce <_strtoul_l.constprop.0+0x3e>
 80099be:	7828      	ldrb	r0, [r5, #0]
 80099c0:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80099c4:	2858      	cmp	r0, #88	; 0x58
 80099c6:	d149      	bne.n	8009a5c <_strtoul_l.constprop.0+0xcc>
 80099c8:	786c      	ldrb	r4, [r5, #1]
 80099ca:	2310      	movs	r3, #16
 80099cc:	3502      	adds	r5, #2
 80099ce:	f04f 38ff 	mov.w	r8, #4294967295
 80099d2:	2700      	movs	r7, #0
 80099d4:	fbb8 f8f3 	udiv	r8, r8, r3
 80099d8:	fb03 f908 	mul.w	r9, r3, r8
 80099dc:	ea6f 0909 	mvn.w	r9, r9
 80099e0:	4638      	mov	r0, r7
 80099e2:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 80099e6:	f1bc 0f09 	cmp.w	ip, #9
 80099ea:	d814      	bhi.n	8009a16 <_strtoul_l.constprop.0+0x86>
 80099ec:	4664      	mov	r4, ip
 80099ee:	42a3      	cmp	r3, r4
 80099f0:	dd22      	ble.n	8009a38 <_strtoul_l.constprop.0+0xa8>
 80099f2:	2f00      	cmp	r7, #0
 80099f4:	db1d      	blt.n	8009a32 <_strtoul_l.constprop.0+0xa2>
 80099f6:	4580      	cmp	r8, r0
 80099f8:	d31b      	bcc.n	8009a32 <_strtoul_l.constprop.0+0xa2>
 80099fa:	d101      	bne.n	8009a00 <_strtoul_l.constprop.0+0x70>
 80099fc:	45a1      	cmp	r9, r4
 80099fe:	db18      	blt.n	8009a32 <_strtoul_l.constprop.0+0xa2>
 8009a00:	fb00 4003 	mla	r0, r0, r3, r4
 8009a04:	2701      	movs	r7, #1
 8009a06:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009a0a:	e7ea      	b.n	80099e2 <_strtoul_l.constprop.0+0x52>
 8009a0c:	2c2b      	cmp	r4, #43	; 0x2b
 8009a0e:	bf04      	itt	eq
 8009a10:	782c      	ldrbeq	r4, [r5, #0]
 8009a12:	1c85      	addeq	r5, r0, #2
 8009a14:	e7cd      	b.n	80099b2 <_strtoul_l.constprop.0+0x22>
 8009a16:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8009a1a:	f1bc 0f19 	cmp.w	ip, #25
 8009a1e:	d801      	bhi.n	8009a24 <_strtoul_l.constprop.0+0x94>
 8009a20:	3c37      	subs	r4, #55	; 0x37
 8009a22:	e7e4      	b.n	80099ee <_strtoul_l.constprop.0+0x5e>
 8009a24:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8009a28:	f1bc 0f19 	cmp.w	ip, #25
 8009a2c:	d804      	bhi.n	8009a38 <_strtoul_l.constprop.0+0xa8>
 8009a2e:	3c57      	subs	r4, #87	; 0x57
 8009a30:	e7dd      	b.n	80099ee <_strtoul_l.constprop.0+0x5e>
 8009a32:	f04f 37ff 	mov.w	r7, #4294967295
 8009a36:	e7e6      	b.n	8009a06 <_strtoul_l.constprop.0+0x76>
 8009a38:	2f00      	cmp	r7, #0
 8009a3a:	da07      	bge.n	8009a4c <_strtoul_l.constprop.0+0xbc>
 8009a3c:	2322      	movs	r3, #34	; 0x22
 8009a3e:	f8ce 3000 	str.w	r3, [lr]
 8009a42:	f04f 30ff 	mov.w	r0, #4294967295
 8009a46:	b932      	cbnz	r2, 8009a56 <_strtoul_l.constprop.0+0xc6>
 8009a48:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009a4c:	b106      	cbz	r6, 8009a50 <_strtoul_l.constprop.0+0xc0>
 8009a4e:	4240      	negs	r0, r0
 8009a50:	2a00      	cmp	r2, #0
 8009a52:	d0f9      	beq.n	8009a48 <_strtoul_l.constprop.0+0xb8>
 8009a54:	b107      	cbz	r7, 8009a58 <_strtoul_l.constprop.0+0xc8>
 8009a56:	1e69      	subs	r1, r5, #1
 8009a58:	6011      	str	r1, [r2, #0]
 8009a5a:	e7f5      	b.n	8009a48 <_strtoul_l.constprop.0+0xb8>
 8009a5c:	2430      	movs	r4, #48	; 0x30
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	d1b5      	bne.n	80099ce <_strtoul_l.constprop.0+0x3e>
 8009a62:	2308      	movs	r3, #8
 8009a64:	e7b3      	b.n	80099ce <_strtoul_l.constprop.0+0x3e>
 8009a66:	2c30      	cmp	r4, #48	; 0x30
 8009a68:	d0a9      	beq.n	80099be <_strtoul_l.constprop.0+0x2e>
 8009a6a:	230a      	movs	r3, #10
 8009a6c:	e7af      	b.n	80099ce <_strtoul_l.constprop.0+0x3e>
 8009a6e:	bf00      	nop
 8009a70:	0800bfc9 	.word	0x0800bfc9

08009a74 <_strtoul_r>:
 8009a74:	f7ff bf8c 	b.w	8009990 <_strtoul_l.constprop.0>

08009a78 <__submore>:
 8009a78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009a7c:	460c      	mov	r4, r1
 8009a7e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8009a80:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009a84:	4299      	cmp	r1, r3
 8009a86:	d11d      	bne.n	8009ac4 <__submore+0x4c>
 8009a88:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8009a8c:	f7ff fa14 	bl	8008eb8 <_malloc_r>
 8009a90:	b918      	cbnz	r0, 8009a9a <__submore+0x22>
 8009a92:	f04f 30ff 	mov.w	r0, #4294967295
 8009a96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009a9a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009a9e:	63a3      	str	r3, [r4, #56]	; 0x38
 8009aa0:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8009aa4:	6360      	str	r0, [r4, #52]	; 0x34
 8009aa6:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8009aaa:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8009aae:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8009ab2:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8009ab6:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8009aba:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8009abe:	6020      	str	r0, [r4, #0]
 8009ac0:	2000      	movs	r0, #0
 8009ac2:	e7e8      	b.n	8009a96 <__submore+0x1e>
 8009ac4:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8009ac6:	0077      	lsls	r7, r6, #1
 8009ac8:	463a      	mov	r2, r7
 8009aca:	f000 fa2d 	bl	8009f28 <_realloc_r>
 8009ace:	4605      	mov	r5, r0
 8009ad0:	2800      	cmp	r0, #0
 8009ad2:	d0de      	beq.n	8009a92 <__submore+0x1a>
 8009ad4:	eb00 0806 	add.w	r8, r0, r6
 8009ad8:	4601      	mov	r1, r0
 8009ada:	4632      	mov	r2, r6
 8009adc:	4640      	mov	r0, r8
 8009ade:	f7fe fc99 	bl	8008414 <memcpy>
 8009ae2:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8009ae6:	f8c4 8000 	str.w	r8, [r4]
 8009aea:	e7e9      	b.n	8009ac0 <__submore+0x48>

08009aec <__ascii_wctomb>:
 8009aec:	b149      	cbz	r1, 8009b02 <__ascii_wctomb+0x16>
 8009aee:	2aff      	cmp	r2, #255	; 0xff
 8009af0:	bf85      	ittet	hi
 8009af2:	238a      	movhi	r3, #138	; 0x8a
 8009af4:	6003      	strhi	r3, [r0, #0]
 8009af6:	700a      	strbls	r2, [r1, #0]
 8009af8:	f04f 30ff 	movhi.w	r0, #4294967295
 8009afc:	bf98      	it	ls
 8009afe:	2001      	movls	r0, #1
 8009b00:	4770      	bx	lr
 8009b02:	4608      	mov	r0, r1
 8009b04:	4770      	bx	lr
	...

08009b08 <__assert_func>:
 8009b08:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009b0a:	4614      	mov	r4, r2
 8009b0c:	461a      	mov	r2, r3
 8009b0e:	4b09      	ldr	r3, [pc, #36]	; (8009b34 <__assert_func+0x2c>)
 8009b10:	681b      	ldr	r3, [r3, #0]
 8009b12:	4605      	mov	r5, r0
 8009b14:	68d8      	ldr	r0, [r3, #12]
 8009b16:	b14c      	cbz	r4, 8009b2c <__assert_func+0x24>
 8009b18:	4b07      	ldr	r3, [pc, #28]	; (8009b38 <__assert_func+0x30>)
 8009b1a:	9100      	str	r1, [sp, #0]
 8009b1c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009b20:	4906      	ldr	r1, [pc, #24]	; (8009b3c <__assert_func+0x34>)
 8009b22:	462b      	mov	r3, r5
 8009b24:	f000 f9a6 	bl	8009e74 <fiprintf>
 8009b28:	f000 fc46 	bl	800a3b8 <abort>
 8009b2c:	4b04      	ldr	r3, [pc, #16]	; (8009b40 <__assert_func+0x38>)
 8009b2e:	461c      	mov	r4, r3
 8009b30:	e7f3      	b.n	8009b1a <__assert_func+0x12>
 8009b32:	bf00      	nop
 8009b34:	20000014 	.word	0x20000014
 8009b38:	0800c358 	.word	0x0800c358
 8009b3c:	0800c365 	.word	0x0800c365
 8009b40:	0800c393 	.word	0x0800c393

08009b44 <__sflush_r>:
 8009b44:	898a      	ldrh	r2, [r1, #12]
 8009b46:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009b4a:	4605      	mov	r5, r0
 8009b4c:	0710      	lsls	r0, r2, #28
 8009b4e:	460c      	mov	r4, r1
 8009b50:	d458      	bmi.n	8009c04 <__sflush_r+0xc0>
 8009b52:	684b      	ldr	r3, [r1, #4]
 8009b54:	2b00      	cmp	r3, #0
 8009b56:	dc05      	bgt.n	8009b64 <__sflush_r+0x20>
 8009b58:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009b5a:	2b00      	cmp	r3, #0
 8009b5c:	dc02      	bgt.n	8009b64 <__sflush_r+0x20>
 8009b5e:	2000      	movs	r0, #0
 8009b60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009b64:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009b66:	2e00      	cmp	r6, #0
 8009b68:	d0f9      	beq.n	8009b5e <__sflush_r+0x1a>
 8009b6a:	2300      	movs	r3, #0
 8009b6c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009b70:	682f      	ldr	r7, [r5, #0]
 8009b72:	602b      	str	r3, [r5, #0]
 8009b74:	d032      	beq.n	8009bdc <__sflush_r+0x98>
 8009b76:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009b78:	89a3      	ldrh	r3, [r4, #12]
 8009b7a:	075a      	lsls	r2, r3, #29
 8009b7c:	d505      	bpl.n	8009b8a <__sflush_r+0x46>
 8009b7e:	6863      	ldr	r3, [r4, #4]
 8009b80:	1ac0      	subs	r0, r0, r3
 8009b82:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009b84:	b10b      	cbz	r3, 8009b8a <__sflush_r+0x46>
 8009b86:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009b88:	1ac0      	subs	r0, r0, r3
 8009b8a:	2300      	movs	r3, #0
 8009b8c:	4602      	mov	r2, r0
 8009b8e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009b90:	6a21      	ldr	r1, [r4, #32]
 8009b92:	4628      	mov	r0, r5
 8009b94:	47b0      	blx	r6
 8009b96:	1c43      	adds	r3, r0, #1
 8009b98:	89a3      	ldrh	r3, [r4, #12]
 8009b9a:	d106      	bne.n	8009baa <__sflush_r+0x66>
 8009b9c:	6829      	ldr	r1, [r5, #0]
 8009b9e:	291d      	cmp	r1, #29
 8009ba0:	d82c      	bhi.n	8009bfc <__sflush_r+0xb8>
 8009ba2:	4a2a      	ldr	r2, [pc, #168]	; (8009c4c <__sflush_r+0x108>)
 8009ba4:	40ca      	lsrs	r2, r1
 8009ba6:	07d6      	lsls	r6, r2, #31
 8009ba8:	d528      	bpl.n	8009bfc <__sflush_r+0xb8>
 8009baa:	2200      	movs	r2, #0
 8009bac:	6062      	str	r2, [r4, #4]
 8009bae:	04d9      	lsls	r1, r3, #19
 8009bb0:	6922      	ldr	r2, [r4, #16]
 8009bb2:	6022      	str	r2, [r4, #0]
 8009bb4:	d504      	bpl.n	8009bc0 <__sflush_r+0x7c>
 8009bb6:	1c42      	adds	r2, r0, #1
 8009bb8:	d101      	bne.n	8009bbe <__sflush_r+0x7a>
 8009bba:	682b      	ldr	r3, [r5, #0]
 8009bbc:	b903      	cbnz	r3, 8009bc0 <__sflush_r+0x7c>
 8009bbe:	6560      	str	r0, [r4, #84]	; 0x54
 8009bc0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009bc2:	602f      	str	r7, [r5, #0]
 8009bc4:	2900      	cmp	r1, #0
 8009bc6:	d0ca      	beq.n	8009b5e <__sflush_r+0x1a>
 8009bc8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009bcc:	4299      	cmp	r1, r3
 8009bce:	d002      	beq.n	8009bd6 <__sflush_r+0x92>
 8009bd0:	4628      	mov	r0, r5
 8009bd2:	f7ff f905 	bl	8008de0 <_free_r>
 8009bd6:	2000      	movs	r0, #0
 8009bd8:	6360      	str	r0, [r4, #52]	; 0x34
 8009bda:	e7c1      	b.n	8009b60 <__sflush_r+0x1c>
 8009bdc:	6a21      	ldr	r1, [r4, #32]
 8009bde:	2301      	movs	r3, #1
 8009be0:	4628      	mov	r0, r5
 8009be2:	47b0      	blx	r6
 8009be4:	1c41      	adds	r1, r0, #1
 8009be6:	d1c7      	bne.n	8009b78 <__sflush_r+0x34>
 8009be8:	682b      	ldr	r3, [r5, #0]
 8009bea:	2b00      	cmp	r3, #0
 8009bec:	d0c4      	beq.n	8009b78 <__sflush_r+0x34>
 8009bee:	2b1d      	cmp	r3, #29
 8009bf0:	d001      	beq.n	8009bf6 <__sflush_r+0xb2>
 8009bf2:	2b16      	cmp	r3, #22
 8009bf4:	d101      	bne.n	8009bfa <__sflush_r+0xb6>
 8009bf6:	602f      	str	r7, [r5, #0]
 8009bf8:	e7b1      	b.n	8009b5e <__sflush_r+0x1a>
 8009bfa:	89a3      	ldrh	r3, [r4, #12]
 8009bfc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009c00:	81a3      	strh	r3, [r4, #12]
 8009c02:	e7ad      	b.n	8009b60 <__sflush_r+0x1c>
 8009c04:	690f      	ldr	r7, [r1, #16]
 8009c06:	2f00      	cmp	r7, #0
 8009c08:	d0a9      	beq.n	8009b5e <__sflush_r+0x1a>
 8009c0a:	0793      	lsls	r3, r2, #30
 8009c0c:	680e      	ldr	r6, [r1, #0]
 8009c0e:	bf08      	it	eq
 8009c10:	694b      	ldreq	r3, [r1, #20]
 8009c12:	600f      	str	r7, [r1, #0]
 8009c14:	bf18      	it	ne
 8009c16:	2300      	movne	r3, #0
 8009c18:	eba6 0807 	sub.w	r8, r6, r7
 8009c1c:	608b      	str	r3, [r1, #8]
 8009c1e:	f1b8 0f00 	cmp.w	r8, #0
 8009c22:	dd9c      	ble.n	8009b5e <__sflush_r+0x1a>
 8009c24:	6a21      	ldr	r1, [r4, #32]
 8009c26:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009c28:	4643      	mov	r3, r8
 8009c2a:	463a      	mov	r2, r7
 8009c2c:	4628      	mov	r0, r5
 8009c2e:	47b0      	blx	r6
 8009c30:	2800      	cmp	r0, #0
 8009c32:	dc06      	bgt.n	8009c42 <__sflush_r+0xfe>
 8009c34:	89a3      	ldrh	r3, [r4, #12]
 8009c36:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009c3a:	81a3      	strh	r3, [r4, #12]
 8009c3c:	f04f 30ff 	mov.w	r0, #4294967295
 8009c40:	e78e      	b.n	8009b60 <__sflush_r+0x1c>
 8009c42:	4407      	add	r7, r0
 8009c44:	eba8 0800 	sub.w	r8, r8, r0
 8009c48:	e7e9      	b.n	8009c1e <__sflush_r+0xda>
 8009c4a:	bf00      	nop
 8009c4c:	20400001 	.word	0x20400001

08009c50 <_fflush_r>:
 8009c50:	b538      	push	{r3, r4, r5, lr}
 8009c52:	690b      	ldr	r3, [r1, #16]
 8009c54:	4605      	mov	r5, r0
 8009c56:	460c      	mov	r4, r1
 8009c58:	b913      	cbnz	r3, 8009c60 <_fflush_r+0x10>
 8009c5a:	2500      	movs	r5, #0
 8009c5c:	4628      	mov	r0, r5
 8009c5e:	bd38      	pop	{r3, r4, r5, pc}
 8009c60:	b118      	cbz	r0, 8009c6a <_fflush_r+0x1a>
 8009c62:	6983      	ldr	r3, [r0, #24]
 8009c64:	b90b      	cbnz	r3, 8009c6a <_fflush_r+0x1a>
 8009c66:	f000 f887 	bl	8009d78 <__sinit>
 8009c6a:	4b14      	ldr	r3, [pc, #80]	; (8009cbc <_fflush_r+0x6c>)
 8009c6c:	429c      	cmp	r4, r3
 8009c6e:	d11b      	bne.n	8009ca8 <_fflush_r+0x58>
 8009c70:	686c      	ldr	r4, [r5, #4]
 8009c72:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009c76:	2b00      	cmp	r3, #0
 8009c78:	d0ef      	beq.n	8009c5a <_fflush_r+0xa>
 8009c7a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009c7c:	07d0      	lsls	r0, r2, #31
 8009c7e:	d404      	bmi.n	8009c8a <_fflush_r+0x3a>
 8009c80:	0599      	lsls	r1, r3, #22
 8009c82:	d402      	bmi.n	8009c8a <_fflush_r+0x3a>
 8009c84:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009c86:	f000 f927 	bl	8009ed8 <__retarget_lock_acquire_recursive>
 8009c8a:	4628      	mov	r0, r5
 8009c8c:	4621      	mov	r1, r4
 8009c8e:	f7ff ff59 	bl	8009b44 <__sflush_r>
 8009c92:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009c94:	07da      	lsls	r2, r3, #31
 8009c96:	4605      	mov	r5, r0
 8009c98:	d4e0      	bmi.n	8009c5c <_fflush_r+0xc>
 8009c9a:	89a3      	ldrh	r3, [r4, #12]
 8009c9c:	059b      	lsls	r3, r3, #22
 8009c9e:	d4dd      	bmi.n	8009c5c <_fflush_r+0xc>
 8009ca0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009ca2:	f000 f91a 	bl	8009eda <__retarget_lock_release_recursive>
 8009ca6:	e7d9      	b.n	8009c5c <_fflush_r+0xc>
 8009ca8:	4b05      	ldr	r3, [pc, #20]	; (8009cc0 <_fflush_r+0x70>)
 8009caa:	429c      	cmp	r4, r3
 8009cac:	d101      	bne.n	8009cb2 <_fflush_r+0x62>
 8009cae:	68ac      	ldr	r4, [r5, #8]
 8009cb0:	e7df      	b.n	8009c72 <_fflush_r+0x22>
 8009cb2:	4b04      	ldr	r3, [pc, #16]	; (8009cc4 <_fflush_r+0x74>)
 8009cb4:	429c      	cmp	r4, r3
 8009cb6:	bf08      	it	eq
 8009cb8:	68ec      	ldreq	r4, [r5, #12]
 8009cba:	e7da      	b.n	8009c72 <_fflush_r+0x22>
 8009cbc:	0800c3b4 	.word	0x0800c3b4
 8009cc0:	0800c3d4 	.word	0x0800c3d4
 8009cc4:	0800c394 	.word	0x0800c394

08009cc8 <std>:
 8009cc8:	2300      	movs	r3, #0
 8009cca:	b510      	push	{r4, lr}
 8009ccc:	4604      	mov	r4, r0
 8009cce:	e9c0 3300 	strd	r3, r3, [r0]
 8009cd2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009cd6:	6083      	str	r3, [r0, #8]
 8009cd8:	8181      	strh	r1, [r0, #12]
 8009cda:	6643      	str	r3, [r0, #100]	; 0x64
 8009cdc:	81c2      	strh	r2, [r0, #14]
 8009cde:	6183      	str	r3, [r0, #24]
 8009ce0:	4619      	mov	r1, r3
 8009ce2:	2208      	movs	r2, #8
 8009ce4:	305c      	adds	r0, #92	; 0x5c
 8009ce6:	f7fb fb8f 	bl	8005408 <memset>
 8009cea:	4b05      	ldr	r3, [pc, #20]	; (8009d00 <std+0x38>)
 8009cec:	6263      	str	r3, [r4, #36]	; 0x24
 8009cee:	4b05      	ldr	r3, [pc, #20]	; (8009d04 <std+0x3c>)
 8009cf0:	62a3      	str	r3, [r4, #40]	; 0x28
 8009cf2:	4b05      	ldr	r3, [pc, #20]	; (8009d08 <std+0x40>)
 8009cf4:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009cf6:	4b05      	ldr	r3, [pc, #20]	; (8009d0c <std+0x44>)
 8009cf8:	6224      	str	r4, [r4, #32]
 8009cfa:	6323      	str	r3, [r4, #48]	; 0x30
 8009cfc:	bd10      	pop	{r4, pc}
 8009cfe:	bf00      	nop
 8009d00:	080061b1 	.word	0x080061b1
 8009d04:	080061d7 	.word	0x080061d7
 8009d08:	0800620f 	.word	0x0800620f
 8009d0c:	08006233 	.word	0x08006233

08009d10 <_cleanup_r>:
 8009d10:	4901      	ldr	r1, [pc, #4]	; (8009d18 <_cleanup_r+0x8>)
 8009d12:	f000 b8c1 	b.w	8009e98 <_fwalk_reent>
 8009d16:	bf00      	nop
 8009d18:	08009c51 	.word	0x08009c51

08009d1c <__sfmoreglue>:
 8009d1c:	b570      	push	{r4, r5, r6, lr}
 8009d1e:	2268      	movs	r2, #104	; 0x68
 8009d20:	1e4d      	subs	r5, r1, #1
 8009d22:	4355      	muls	r5, r2
 8009d24:	460e      	mov	r6, r1
 8009d26:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009d2a:	f7ff f8c5 	bl	8008eb8 <_malloc_r>
 8009d2e:	4604      	mov	r4, r0
 8009d30:	b140      	cbz	r0, 8009d44 <__sfmoreglue+0x28>
 8009d32:	2100      	movs	r1, #0
 8009d34:	e9c0 1600 	strd	r1, r6, [r0]
 8009d38:	300c      	adds	r0, #12
 8009d3a:	60a0      	str	r0, [r4, #8]
 8009d3c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009d40:	f7fb fb62 	bl	8005408 <memset>
 8009d44:	4620      	mov	r0, r4
 8009d46:	bd70      	pop	{r4, r5, r6, pc}

08009d48 <__sfp_lock_acquire>:
 8009d48:	4801      	ldr	r0, [pc, #4]	; (8009d50 <__sfp_lock_acquire+0x8>)
 8009d4a:	f000 b8c5 	b.w	8009ed8 <__retarget_lock_acquire_recursive>
 8009d4e:	bf00      	nop
 8009d50:	20000d19 	.word	0x20000d19

08009d54 <__sfp_lock_release>:
 8009d54:	4801      	ldr	r0, [pc, #4]	; (8009d5c <__sfp_lock_release+0x8>)
 8009d56:	f000 b8c0 	b.w	8009eda <__retarget_lock_release_recursive>
 8009d5a:	bf00      	nop
 8009d5c:	20000d19 	.word	0x20000d19

08009d60 <__sinit_lock_acquire>:
 8009d60:	4801      	ldr	r0, [pc, #4]	; (8009d68 <__sinit_lock_acquire+0x8>)
 8009d62:	f000 b8b9 	b.w	8009ed8 <__retarget_lock_acquire_recursive>
 8009d66:	bf00      	nop
 8009d68:	20000d1a 	.word	0x20000d1a

08009d6c <__sinit_lock_release>:
 8009d6c:	4801      	ldr	r0, [pc, #4]	; (8009d74 <__sinit_lock_release+0x8>)
 8009d6e:	f000 b8b4 	b.w	8009eda <__retarget_lock_release_recursive>
 8009d72:	bf00      	nop
 8009d74:	20000d1a 	.word	0x20000d1a

08009d78 <__sinit>:
 8009d78:	b510      	push	{r4, lr}
 8009d7a:	4604      	mov	r4, r0
 8009d7c:	f7ff fff0 	bl	8009d60 <__sinit_lock_acquire>
 8009d80:	69a3      	ldr	r3, [r4, #24]
 8009d82:	b11b      	cbz	r3, 8009d8c <__sinit+0x14>
 8009d84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009d88:	f7ff bff0 	b.w	8009d6c <__sinit_lock_release>
 8009d8c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009d90:	6523      	str	r3, [r4, #80]	; 0x50
 8009d92:	4b13      	ldr	r3, [pc, #76]	; (8009de0 <__sinit+0x68>)
 8009d94:	4a13      	ldr	r2, [pc, #76]	; (8009de4 <__sinit+0x6c>)
 8009d96:	681b      	ldr	r3, [r3, #0]
 8009d98:	62a2      	str	r2, [r4, #40]	; 0x28
 8009d9a:	42a3      	cmp	r3, r4
 8009d9c:	bf04      	itt	eq
 8009d9e:	2301      	moveq	r3, #1
 8009da0:	61a3      	streq	r3, [r4, #24]
 8009da2:	4620      	mov	r0, r4
 8009da4:	f000 f820 	bl	8009de8 <__sfp>
 8009da8:	6060      	str	r0, [r4, #4]
 8009daa:	4620      	mov	r0, r4
 8009dac:	f000 f81c 	bl	8009de8 <__sfp>
 8009db0:	60a0      	str	r0, [r4, #8]
 8009db2:	4620      	mov	r0, r4
 8009db4:	f000 f818 	bl	8009de8 <__sfp>
 8009db8:	2200      	movs	r2, #0
 8009dba:	60e0      	str	r0, [r4, #12]
 8009dbc:	2104      	movs	r1, #4
 8009dbe:	6860      	ldr	r0, [r4, #4]
 8009dc0:	f7ff ff82 	bl	8009cc8 <std>
 8009dc4:	68a0      	ldr	r0, [r4, #8]
 8009dc6:	2201      	movs	r2, #1
 8009dc8:	2109      	movs	r1, #9
 8009dca:	f7ff ff7d 	bl	8009cc8 <std>
 8009dce:	68e0      	ldr	r0, [r4, #12]
 8009dd0:	2202      	movs	r2, #2
 8009dd2:	2112      	movs	r1, #18
 8009dd4:	f7ff ff78 	bl	8009cc8 <std>
 8009dd8:	2301      	movs	r3, #1
 8009dda:	61a3      	str	r3, [r4, #24]
 8009ddc:	e7d2      	b.n	8009d84 <__sinit+0xc>
 8009dde:	bf00      	nop
 8009de0:	0800bf3c 	.word	0x0800bf3c
 8009de4:	08009d11 	.word	0x08009d11

08009de8 <__sfp>:
 8009de8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009dea:	4607      	mov	r7, r0
 8009dec:	f7ff ffac 	bl	8009d48 <__sfp_lock_acquire>
 8009df0:	4b1e      	ldr	r3, [pc, #120]	; (8009e6c <__sfp+0x84>)
 8009df2:	681e      	ldr	r6, [r3, #0]
 8009df4:	69b3      	ldr	r3, [r6, #24]
 8009df6:	b913      	cbnz	r3, 8009dfe <__sfp+0x16>
 8009df8:	4630      	mov	r0, r6
 8009dfa:	f7ff ffbd 	bl	8009d78 <__sinit>
 8009dfe:	3648      	adds	r6, #72	; 0x48
 8009e00:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009e04:	3b01      	subs	r3, #1
 8009e06:	d503      	bpl.n	8009e10 <__sfp+0x28>
 8009e08:	6833      	ldr	r3, [r6, #0]
 8009e0a:	b30b      	cbz	r3, 8009e50 <__sfp+0x68>
 8009e0c:	6836      	ldr	r6, [r6, #0]
 8009e0e:	e7f7      	b.n	8009e00 <__sfp+0x18>
 8009e10:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009e14:	b9d5      	cbnz	r5, 8009e4c <__sfp+0x64>
 8009e16:	4b16      	ldr	r3, [pc, #88]	; (8009e70 <__sfp+0x88>)
 8009e18:	60e3      	str	r3, [r4, #12]
 8009e1a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009e1e:	6665      	str	r5, [r4, #100]	; 0x64
 8009e20:	f000 f859 	bl	8009ed6 <__retarget_lock_init_recursive>
 8009e24:	f7ff ff96 	bl	8009d54 <__sfp_lock_release>
 8009e28:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009e2c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009e30:	6025      	str	r5, [r4, #0]
 8009e32:	61a5      	str	r5, [r4, #24]
 8009e34:	2208      	movs	r2, #8
 8009e36:	4629      	mov	r1, r5
 8009e38:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009e3c:	f7fb fae4 	bl	8005408 <memset>
 8009e40:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009e44:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009e48:	4620      	mov	r0, r4
 8009e4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009e4c:	3468      	adds	r4, #104	; 0x68
 8009e4e:	e7d9      	b.n	8009e04 <__sfp+0x1c>
 8009e50:	2104      	movs	r1, #4
 8009e52:	4638      	mov	r0, r7
 8009e54:	f7ff ff62 	bl	8009d1c <__sfmoreglue>
 8009e58:	4604      	mov	r4, r0
 8009e5a:	6030      	str	r0, [r6, #0]
 8009e5c:	2800      	cmp	r0, #0
 8009e5e:	d1d5      	bne.n	8009e0c <__sfp+0x24>
 8009e60:	f7ff ff78 	bl	8009d54 <__sfp_lock_release>
 8009e64:	230c      	movs	r3, #12
 8009e66:	603b      	str	r3, [r7, #0]
 8009e68:	e7ee      	b.n	8009e48 <__sfp+0x60>
 8009e6a:	bf00      	nop
 8009e6c:	0800bf3c 	.word	0x0800bf3c
 8009e70:	ffff0001 	.word	0xffff0001

08009e74 <fiprintf>:
 8009e74:	b40e      	push	{r1, r2, r3}
 8009e76:	b503      	push	{r0, r1, lr}
 8009e78:	4601      	mov	r1, r0
 8009e7a:	ab03      	add	r3, sp, #12
 8009e7c:	4805      	ldr	r0, [pc, #20]	; (8009e94 <fiprintf+0x20>)
 8009e7e:	f853 2b04 	ldr.w	r2, [r3], #4
 8009e82:	6800      	ldr	r0, [r0, #0]
 8009e84:	9301      	str	r3, [sp, #4]
 8009e86:	f000 f8a7 	bl	8009fd8 <_vfiprintf_r>
 8009e8a:	b002      	add	sp, #8
 8009e8c:	f85d eb04 	ldr.w	lr, [sp], #4
 8009e90:	b003      	add	sp, #12
 8009e92:	4770      	bx	lr
 8009e94:	20000014 	.word	0x20000014

08009e98 <_fwalk_reent>:
 8009e98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009e9c:	4606      	mov	r6, r0
 8009e9e:	4688      	mov	r8, r1
 8009ea0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009ea4:	2700      	movs	r7, #0
 8009ea6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009eaa:	f1b9 0901 	subs.w	r9, r9, #1
 8009eae:	d505      	bpl.n	8009ebc <_fwalk_reent+0x24>
 8009eb0:	6824      	ldr	r4, [r4, #0]
 8009eb2:	2c00      	cmp	r4, #0
 8009eb4:	d1f7      	bne.n	8009ea6 <_fwalk_reent+0xe>
 8009eb6:	4638      	mov	r0, r7
 8009eb8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009ebc:	89ab      	ldrh	r3, [r5, #12]
 8009ebe:	2b01      	cmp	r3, #1
 8009ec0:	d907      	bls.n	8009ed2 <_fwalk_reent+0x3a>
 8009ec2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009ec6:	3301      	adds	r3, #1
 8009ec8:	d003      	beq.n	8009ed2 <_fwalk_reent+0x3a>
 8009eca:	4629      	mov	r1, r5
 8009ecc:	4630      	mov	r0, r6
 8009ece:	47c0      	blx	r8
 8009ed0:	4307      	orrs	r7, r0
 8009ed2:	3568      	adds	r5, #104	; 0x68
 8009ed4:	e7e9      	b.n	8009eaa <_fwalk_reent+0x12>

08009ed6 <__retarget_lock_init_recursive>:
 8009ed6:	4770      	bx	lr

08009ed8 <__retarget_lock_acquire_recursive>:
 8009ed8:	4770      	bx	lr

08009eda <__retarget_lock_release_recursive>:
 8009eda:	4770      	bx	lr

08009edc <memmove>:
 8009edc:	4288      	cmp	r0, r1
 8009ede:	b510      	push	{r4, lr}
 8009ee0:	eb01 0402 	add.w	r4, r1, r2
 8009ee4:	d902      	bls.n	8009eec <memmove+0x10>
 8009ee6:	4284      	cmp	r4, r0
 8009ee8:	4623      	mov	r3, r4
 8009eea:	d807      	bhi.n	8009efc <memmove+0x20>
 8009eec:	1e43      	subs	r3, r0, #1
 8009eee:	42a1      	cmp	r1, r4
 8009ef0:	d008      	beq.n	8009f04 <memmove+0x28>
 8009ef2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009ef6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009efa:	e7f8      	b.n	8009eee <memmove+0x12>
 8009efc:	4402      	add	r2, r0
 8009efe:	4601      	mov	r1, r0
 8009f00:	428a      	cmp	r2, r1
 8009f02:	d100      	bne.n	8009f06 <memmove+0x2a>
 8009f04:	bd10      	pop	{r4, pc}
 8009f06:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009f0a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009f0e:	e7f7      	b.n	8009f00 <memmove+0x24>

08009f10 <__malloc_lock>:
 8009f10:	4801      	ldr	r0, [pc, #4]	; (8009f18 <__malloc_lock+0x8>)
 8009f12:	f7ff bfe1 	b.w	8009ed8 <__retarget_lock_acquire_recursive>
 8009f16:	bf00      	nop
 8009f18:	20000d18 	.word	0x20000d18

08009f1c <__malloc_unlock>:
 8009f1c:	4801      	ldr	r0, [pc, #4]	; (8009f24 <__malloc_unlock+0x8>)
 8009f1e:	f7ff bfdc 	b.w	8009eda <__retarget_lock_release_recursive>
 8009f22:	bf00      	nop
 8009f24:	20000d18 	.word	0x20000d18

08009f28 <_realloc_r>:
 8009f28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009f2c:	4680      	mov	r8, r0
 8009f2e:	4614      	mov	r4, r2
 8009f30:	460e      	mov	r6, r1
 8009f32:	b921      	cbnz	r1, 8009f3e <_realloc_r+0x16>
 8009f34:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009f38:	4611      	mov	r1, r2
 8009f3a:	f7fe bfbd 	b.w	8008eb8 <_malloc_r>
 8009f3e:	b92a      	cbnz	r2, 8009f4c <_realloc_r+0x24>
 8009f40:	f7fe ff4e 	bl	8008de0 <_free_r>
 8009f44:	4625      	mov	r5, r4
 8009f46:	4628      	mov	r0, r5
 8009f48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009f4c:	f000 faa0 	bl	800a490 <_malloc_usable_size_r>
 8009f50:	4284      	cmp	r4, r0
 8009f52:	4607      	mov	r7, r0
 8009f54:	d802      	bhi.n	8009f5c <_realloc_r+0x34>
 8009f56:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009f5a:	d812      	bhi.n	8009f82 <_realloc_r+0x5a>
 8009f5c:	4621      	mov	r1, r4
 8009f5e:	4640      	mov	r0, r8
 8009f60:	f7fe ffaa 	bl	8008eb8 <_malloc_r>
 8009f64:	4605      	mov	r5, r0
 8009f66:	2800      	cmp	r0, #0
 8009f68:	d0ed      	beq.n	8009f46 <_realloc_r+0x1e>
 8009f6a:	42bc      	cmp	r4, r7
 8009f6c:	4622      	mov	r2, r4
 8009f6e:	4631      	mov	r1, r6
 8009f70:	bf28      	it	cs
 8009f72:	463a      	movcs	r2, r7
 8009f74:	f7fe fa4e 	bl	8008414 <memcpy>
 8009f78:	4631      	mov	r1, r6
 8009f7a:	4640      	mov	r0, r8
 8009f7c:	f7fe ff30 	bl	8008de0 <_free_r>
 8009f80:	e7e1      	b.n	8009f46 <_realloc_r+0x1e>
 8009f82:	4635      	mov	r5, r6
 8009f84:	e7df      	b.n	8009f46 <_realloc_r+0x1e>

08009f86 <__sfputc_r>:
 8009f86:	6893      	ldr	r3, [r2, #8]
 8009f88:	3b01      	subs	r3, #1
 8009f8a:	2b00      	cmp	r3, #0
 8009f8c:	b410      	push	{r4}
 8009f8e:	6093      	str	r3, [r2, #8]
 8009f90:	da08      	bge.n	8009fa4 <__sfputc_r+0x1e>
 8009f92:	6994      	ldr	r4, [r2, #24]
 8009f94:	42a3      	cmp	r3, r4
 8009f96:	db01      	blt.n	8009f9c <__sfputc_r+0x16>
 8009f98:	290a      	cmp	r1, #10
 8009f9a:	d103      	bne.n	8009fa4 <__sfputc_r+0x1e>
 8009f9c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009fa0:	f000 b94a 	b.w	800a238 <__swbuf_r>
 8009fa4:	6813      	ldr	r3, [r2, #0]
 8009fa6:	1c58      	adds	r0, r3, #1
 8009fa8:	6010      	str	r0, [r2, #0]
 8009faa:	7019      	strb	r1, [r3, #0]
 8009fac:	4608      	mov	r0, r1
 8009fae:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009fb2:	4770      	bx	lr

08009fb4 <__sfputs_r>:
 8009fb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009fb6:	4606      	mov	r6, r0
 8009fb8:	460f      	mov	r7, r1
 8009fba:	4614      	mov	r4, r2
 8009fbc:	18d5      	adds	r5, r2, r3
 8009fbe:	42ac      	cmp	r4, r5
 8009fc0:	d101      	bne.n	8009fc6 <__sfputs_r+0x12>
 8009fc2:	2000      	movs	r0, #0
 8009fc4:	e007      	b.n	8009fd6 <__sfputs_r+0x22>
 8009fc6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009fca:	463a      	mov	r2, r7
 8009fcc:	4630      	mov	r0, r6
 8009fce:	f7ff ffda 	bl	8009f86 <__sfputc_r>
 8009fd2:	1c43      	adds	r3, r0, #1
 8009fd4:	d1f3      	bne.n	8009fbe <__sfputs_r+0xa>
 8009fd6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009fd8 <_vfiprintf_r>:
 8009fd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009fdc:	460d      	mov	r5, r1
 8009fde:	b09d      	sub	sp, #116	; 0x74
 8009fe0:	4614      	mov	r4, r2
 8009fe2:	4698      	mov	r8, r3
 8009fe4:	4606      	mov	r6, r0
 8009fe6:	b118      	cbz	r0, 8009ff0 <_vfiprintf_r+0x18>
 8009fe8:	6983      	ldr	r3, [r0, #24]
 8009fea:	b90b      	cbnz	r3, 8009ff0 <_vfiprintf_r+0x18>
 8009fec:	f7ff fec4 	bl	8009d78 <__sinit>
 8009ff0:	4b89      	ldr	r3, [pc, #548]	; (800a218 <_vfiprintf_r+0x240>)
 8009ff2:	429d      	cmp	r5, r3
 8009ff4:	d11b      	bne.n	800a02e <_vfiprintf_r+0x56>
 8009ff6:	6875      	ldr	r5, [r6, #4]
 8009ff8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009ffa:	07d9      	lsls	r1, r3, #31
 8009ffc:	d405      	bmi.n	800a00a <_vfiprintf_r+0x32>
 8009ffe:	89ab      	ldrh	r3, [r5, #12]
 800a000:	059a      	lsls	r2, r3, #22
 800a002:	d402      	bmi.n	800a00a <_vfiprintf_r+0x32>
 800a004:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a006:	f7ff ff67 	bl	8009ed8 <__retarget_lock_acquire_recursive>
 800a00a:	89ab      	ldrh	r3, [r5, #12]
 800a00c:	071b      	lsls	r3, r3, #28
 800a00e:	d501      	bpl.n	800a014 <_vfiprintf_r+0x3c>
 800a010:	692b      	ldr	r3, [r5, #16]
 800a012:	b9eb      	cbnz	r3, 800a050 <_vfiprintf_r+0x78>
 800a014:	4629      	mov	r1, r5
 800a016:	4630      	mov	r0, r6
 800a018:	f000 f960 	bl	800a2dc <__swsetup_r>
 800a01c:	b1c0      	cbz	r0, 800a050 <_vfiprintf_r+0x78>
 800a01e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a020:	07dc      	lsls	r4, r3, #31
 800a022:	d50e      	bpl.n	800a042 <_vfiprintf_r+0x6a>
 800a024:	f04f 30ff 	mov.w	r0, #4294967295
 800a028:	b01d      	add	sp, #116	; 0x74
 800a02a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a02e:	4b7b      	ldr	r3, [pc, #492]	; (800a21c <_vfiprintf_r+0x244>)
 800a030:	429d      	cmp	r5, r3
 800a032:	d101      	bne.n	800a038 <_vfiprintf_r+0x60>
 800a034:	68b5      	ldr	r5, [r6, #8]
 800a036:	e7df      	b.n	8009ff8 <_vfiprintf_r+0x20>
 800a038:	4b79      	ldr	r3, [pc, #484]	; (800a220 <_vfiprintf_r+0x248>)
 800a03a:	429d      	cmp	r5, r3
 800a03c:	bf08      	it	eq
 800a03e:	68f5      	ldreq	r5, [r6, #12]
 800a040:	e7da      	b.n	8009ff8 <_vfiprintf_r+0x20>
 800a042:	89ab      	ldrh	r3, [r5, #12]
 800a044:	0598      	lsls	r0, r3, #22
 800a046:	d4ed      	bmi.n	800a024 <_vfiprintf_r+0x4c>
 800a048:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a04a:	f7ff ff46 	bl	8009eda <__retarget_lock_release_recursive>
 800a04e:	e7e9      	b.n	800a024 <_vfiprintf_r+0x4c>
 800a050:	2300      	movs	r3, #0
 800a052:	9309      	str	r3, [sp, #36]	; 0x24
 800a054:	2320      	movs	r3, #32
 800a056:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a05a:	f8cd 800c 	str.w	r8, [sp, #12]
 800a05e:	2330      	movs	r3, #48	; 0x30
 800a060:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800a224 <_vfiprintf_r+0x24c>
 800a064:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a068:	f04f 0901 	mov.w	r9, #1
 800a06c:	4623      	mov	r3, r4
 800a06e:	469a      	mov	sl, r3
 800a070:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a074:	b10a      	cbz	r2, 800a07a <_vfiprintf_r+0xa2>
 800a076:	2a25      	cmp	r2, #37	; 0x25
 800a078:	d1f9      	bne.n	800a06e <_vfiprintf_r+0x96>
 800a07a:	ebba 0b04 	subs.w	fp, sl, r4
 800a07e:	d00b      	beq.n	800a098 <_vfiprintf_r+0xc0>
 800a080:	465b      	mov	r3, fp
 800a082:	4622      	mov	r2, r4
 800a084:	4629      	mov	r1, r5
 800a086:	4630      	mov	r0, r6
 800a088:	f7ff ff94 	bl	8009fb4 <__sfputs_r>
 800a08c:	3001      	adds	r0, #1
 800a08e:	f000 80aa 	beq.w	800a1e6 <_vfiprintf_r+0x20e>
 800a092:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a094:	445a      	add	r2, fp
 800a096:	9209      	str	r2, [sp, #36]	; 0x24
 800a098:	f89a 3000 	ldrb.w	r3, [sl]
 800a09c:	2b00      	cmp	r3, #0
 800a09e:	f000 80a2 	beq.w	800a1e6 <_vfiprintf_r+0x20e>
 800a0a2:	2300      	movs	r3, #0
 800a0a4:	f04f 32ff 	mov.w	r2, #4294967295
 800a0a8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a0ac:	f10a 0a01 	add.w	sl, sl, #1
 800a0b0:	9304      	str	r3, [sp, #16]
 800a0b2:	9307      	str	r3, [sp, #28]
 800a0b4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a0b8:	931a      	str	r3, [sp, #104]	; 0x68
 800a0ba:	4654      	mov	r4, sl
 800a0bc:	2205      	movs	r2, #5
 800a0be:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a0c2:	4858      	ldr	r0, [pc, #352]	; (800a224 <_vfiprintf_r+0x24c>)
 800a0c4:	f7f6 f8a4 	bl	8000210 <memchr>
 800a0c8:	9a04      	ldr	r2, [sp, #16]
 800a0ca:	b9d8      	cbnz	r0, 800a104 <_vfiprintf_r+0x12c>
 800a0cc:	06d1      	lsls	r1, r2, #27
 800a0ce:	bf44      	itt	mi
 800a0d0:	2320      	movmi	r3, #32
 800a0d2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a0d6:	0713      	lsls	r3, r2, #28
 800a0d8:	bf44      	itt	mi
 800a0da:	232b      	movmi	r3, #43	; 0x2b
 800a0dc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a0e0:	f89a 3000 	ldrb.w	r3, [sl]
 800a0e4:	2b2a      	cmp	r3, #42	; 0x2a
 800a0e6:	d015      	beq.n	800a114 <_vfiprintf_r+0x13c>
 800a0e8:	9a07      	ldr	r2, [sp, #28]
 800a0ea:	4654      	mov	r4, sl
 800a0ec:	2000      	movs	r0, #0
 800a0ee:	f04f 0c0a 	mov.w	ip, #10
 800a0f2:	4621      	mov	r1, r4
 800a0f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a0f8:	3b30      	subs	r3, #48	; 0x30
 800a0fa:	2b09      	cmp	r3, #9
 800a0fc:	d94e      	bls.n	800a19c <_vfiprintf_r+0x1c4>
 800a0fe:	b1b0      	cbz	r0, 800a12e <_vfiprintf_r+0x156>
 800a100:	9207      	str	r2, [sp, #28]
 800a102:	e014      	b.n	800a12e <_vfiprintf_r+0x156>
 800a104:	eba0 0308 	sub.w	r3, r0, r8
 800a108:	fa09 f303 	lsl.w	r3, r9, r3
 800a10c:	4313      	orrs	r3, r2
 800a10e:	9304      	str	r3, [sp, #16]
 800a110:	46a2      	mov	sl, r4
 800a112:	e7d2      	b.n	800a0ba <_vfiprintf_r+0xe2>
 800a114:	9b03      	ldr	r3, [sp, #12]
 800a116:	1d19      	adds	r1, r3, #4
 800a118:	681b      	ldr	r3, [r3, #0]
 800a11a:	9103      	str	r1, [sp, #12]
 800a11c:	2b00      	cmp	r3, #0
 800a11e:	bfbb      	ittet	lt
 800a120:	425b      	neglt	r3, r3
 800a122:	f042 0202 	orrlt.w	r2, r2, #2
 800a126:	9307      	strge	r3, [sp, #28]
 800a128:	9307      	strlt	r3, [sp, #28]
 800a12a:	bfb8      	it	lt
 800a12c:	9204      	strlt	r2, [sp, #16]
 800a12e:	7823      	ldrb	r3, [r4, #0]
 800a130:	2b2e      	cmp	r3, #46	; 0x2e
 800a132:	d10c      	bne.n	800a14e <_vfiprintf_r+0x176>
 800a134:	7863      	ldrb	r3, [r4, #1]
 800a136:	2b2a      	cmp	r3, #42	; 0x2a
 800a138:	d135      	bne.n	800a1a6 <_vfiprintf_r+0x1ce>
 800a13a:	9b03      	ldr	r3, [sp, #12]
 800a13c:	1d1a      	adds	r2, r3, #4
 800a13e:	681b      	ldr	r3, [r3, #0]
 800a140:	9203      	str	r2, [sp, #12]
 800a142:	2b00      	cmp	r3, #0
 800a144:	bfb8      	it	lt
 800a146:	f04f 33ff 	movlt.w	r3, #4294967295
 800a14a:	3402      	adds	r4, #2
 800a14c:	9305      	str	r3, [sp, #20]
 800a14e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800a234 <_vfiprintf_r+0x25c>
 800a152:	7821      	ldrb	r1, [r4, #0]
 800a154:	2203      	movs	r2, #3
 800a156:	4650      	mov	r0, sl
 800a158:	f7f6 f85a 	bl	8000210 <memchr>
 800a15c:	b140      	cbz	r0, 800a170 <_vfiprintf_r+0x198>
 800a15e:	2340      	movs	r3, #64	; 0x40
 800a160:	eba0 000a 	sub.w	r0, r0, sl
 800a164:	fa03 f000 	lsl.w	r0, r3, r0
 800a168:	9b04      	ldr	r3, [sp, #16]
 800a16a:	4303      	orrs	r3, r0
 800a16c:	3401      	adds	r4, #1
 800a16e:	9304      	str	r3, [sp, #16]
 800a170:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a174:	482c      	ldr	r0, [pc, #176]	; (800a228 <_vfiprintf_r+0x250>)
 800a176:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a17a:	2206      	movs	r2, #6
 800a17c:	f7f6 f848 	bl	8000210 <memchr>
 800a180:	2800      	cmp	r0, #0
 800a182:	d03f      	beq.n	800a204 <_vfiprintf_r+0x22c>
 800a184:	4b29      	ldr	r3, [pc, #164]	; (800a22c <_vfiprintf_r+0x254>)
 800a186:	bb1b      	cbnz	r3, 800a1d0 <_vfiprintf_r+0x1f8>
 800a188:	9b03      	ldr	r3, [sp, #12]
 800a18a:	3307      	adds	r3, #7
 800a18c:	f023 0307 	bic.w	r3, r3, #7
 800a190:	3308      	adds	r3, #8
 800a192:	9303      	str	r3, [sp, #12]
 800a194:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a196:	443b      	add	r3, r7
 800a198:	9309      	str	r3, [sp, #36]	; 0x24
 800a19a:	e767      	b.n	800a06c <_vfiprintf_r+0x94>
 800a19c:	fb0c 3202 	mla	r2, ip, r2, r3
 800a1a0:	460c      	mov	r4, r1
 800a1a2:	2001      	movs	r0, #1
 800a1a4:	e7a5      	b.n	800a0f2 <_vfiprintf_r+0x11a>
 800a1a6:	2300      	movs	r3, #0
 800a1a8:	3401      	adds	r4, #1
 800a1aa:	9305      	str	r3, [sp, #20]
 800a1ac:	4619      	mov	r1, r3
 800a1ae:	f04f 0c0a 	mov.w	ip, #10
 800a1b2:	4620      	mov	r0, r4
 800a1b4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a1b8:	3a30      	subs	r2, #48	; 0x30
 800a1ba:	2a09      	cmp	r2, #9
 800a1bc:	d903      	bls.n	800a1c6 <_vfiprintf_r+0x1ee>
 800a1be:	2b00      	cmp	r3, #0
 800a1c0:	d0c5      	beq.n	800a14e <_vfiprintf_r+0x176>
 800a1c2:	9105      	str	r1, [sp, #20]
 800a1c4:	e7c3      	b.n	800a14e <_vfiprintf_r+0x176>
 800a1c6:	fb0c 2101 	mla	r1, ip, r1, r2
 800a1ca:	4604      	mov	r4, r0
 800a1cc:	2301      	movs	r3, #1
 800a1ce:	e7f0      	b.n	800a1b2 <_vfiprintf_r+0x1da>
 800a1d0:	ab03      	add	r3, sp, #12
 800a1d2:	9300      	str	r3, [sp, #0]
 800a1d4:	462a      	mov	r2, r5
 800a1d6:	4b16      	ldr	r3, [pc, #88]	; (800a230 <_vfiprintf_r+0x258>)
 800a1d8:	a904      	add	r1, sp, #16
 800a1da:	4630      	mov	r0, r6
 800a1dc:	f7fb f9bc 	bl	8005558 <_printf_float>
 800a1e0:	4607      	mov	r7, r0
 800a1e2:	1c78      	adds	r0, r7, #1
 800a1e4:	d1d6      	bne.n	800a194 <_vfiprintf_r+0x1bc>
 800a1e6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a1e8:	07d9      	lsls	r1, r3, #31
 800a1ea:	d405      	bmi.n	800a1f8 <_vfiprintf_r+0x220>
 800a1ec:	89ab      	ldrh	r3, [r5, #12]
 800a1ee:	059a      	lsls	r2, r3, #22
 800a1f0:	d402      	bmi.n	800a1f8 <_vfiprintf_r+0x220>
 800a1f2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a1f4:	f7ff fe71 	bl	8009eda <__retarget_lock_release_recursive>
 800a1f8:	89ab      	ldrh	r3, [r5, #12]
 800a1fa:	065b      	lsls	r3, r3, #25
 800a1fc:	f53f af12 	bmi.w	800a024 <_vfiprintf_r+0x4c>
 800a200:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a202:	e711      	b.n	800a028 <_vfiprintf_r+0x50>
 800a204:	ab03      	add	r3, sp, #12
 800a206:	9300      	str	r3, [sp, #0]
 800a208:	462a      	mov	r2, r5
 800a20a:	4b09      	ldr	r3, [pc, #36]	; (800a230 <_vfiprintf_r+0x258>)
 800a20c:	a904      	add	r1, sp, #16
 800a20e:	4630      	mov	r0, r6
 800a210:	f7fb fc46 	bl	8005aa0 <_printf_i>
 800a214:	e7e4      	b.n	800a1e0 <_vfiprintf_r+0x208>
 800a216:	bf00      	nop
 800a218:	0800c3b4 	.word	0x0800c3b4
 800a21c:	0800c3d4 	.word	0x0800c3d4
 800a220:	0800c394 	.word	0x0800c394
 800a224:	0800c32c 	.word	0x0800c32c
 800a228:	0800c336 	.word	0x0800c336
 800a22c:	08005559 	.word	0x08005559
 800a230:	08009fb5 	.word	0x08009fb5
 800a234:	0800c332 	.word	0x0800c332

0800a238 <__swbuf_r>:
 800a238:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a23a:	460e      	mov	r6, r1
 800a23c:	4614      	mov	r4, r2
 800a23e:	4605      	mov	r5, r0
 800a240:	b118      	cbz	r0, 800a24a <__swbuf_r+0x12>
 800a242:	6983      	ldr	r3, [r0, #24]
 800a244:	b90b      	cbnz	r3, 800a24a <__swbuf_r+0x12>
 800a246:	f7ff fd97 	bl	8009d78 <__sinit>
 800a24a:	4b21      	ldr	r3, [pc, #132]	; (800a2d0 <__swbuf_r+0x98>)
 800a24c:	429c      	cmp	r4, r3
 800a24e:	d12b      	bne.n	800a2a8 <__swbuf_r+0x70>
 800a250:	686c      	ldr	r4, [r5, #4]
 800a252:	69a3      	ldr	r3, [r4, #24]
 800a254:	60a3      	str	r3, [r4, #8]
 800a256:	89a3      	ldrh	r3, [r4, #12]
 800a258:	071a      	lsls	r2, r3, #28
 800a25a:	d52f      	bpl.n	800a2bc <__swbuf_r+0x84>
 800a25c:	6923      	ldr	r3, [r4, #16]
 800a25e:	b36b      	cbz	r3, 800a2bc <__swbuf_r+0x84>
 800a260:	6923      	ldr	r3, [r4, #16]
 800a262:	6820      	ldr	r0, [r4, #0]
 800a264:	1ac0      	subs	r0, r0, r3
 800a266:	6963      	ldr	r3, [r4, #20]
 800a268:	b2f6      	uxtb	r6, r6
 800a26a:	4283      	cmp	r3, r0
 800a26c:	4637      	mov	r7, r6
 800a26e:	dc04      	bgt.n	800a27a <__swbuf_r+0x42>
 800a270:	4621      	mov	r1, r4
 800a272:	4628      	mov	r0, r5
 800a274:	f7ff fcec 	bl	8009c50 <_fflush_r>
 800a278:	bb30      	cbnz	r0, 800a2c8 <__swbuf_r+0x90>
 800a27a:	68a3      	ldr	r3, [r4, #8]
 800a27c:	3b01      	subs	r3, #1
 800a27e:	60a3      	str	r3, [r4, #8]
 800a280:	6823      	ldr	r3, [r4, #0]
 800a282:	1c5a      	adds	r2, r3, #1
 800a284:	6022      	str	r2, [r4, #0]
 800a286:	701e      	strb	r6, [r3, #0]
 800a288:	6963      	ldr	r3, [r4, #20]
 800a28a:	3001      	adds	r0, #1
 800a28c:	4283      	cmp	r3, r0
 800a28e:	d004      	beq.n	800a29a <__swbuf_r+0x62>
 800a290:	89a3      	ldrh	r3, [r4, #12]
 800a292:	07db      	lsls	r3, r3, #31
 800a294:	d506      	bpl.n	800a2a4 <__swbuf_r+0x6c>
 800a296:	2e0a      	cmp	r6, #10
 800a298:	d104      	bne.n	800a2a4 <__swbuf_r+0x6c>
 800a29a:	4621      	mov	r1, r4
 800a29c:	4628      	mov	r0, r5
 800a29e:	f7ff fcd7 	bl	8009c50 <_fflush_r>
 800a2a2:	b988      	cbnz	r0, 800a2c8 <__swbuf_r+0x90>
 800a2a4:	4638      	mov	r0, r7
 800a2a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a2a8:	4b0a      	ldr	r3, [pc, #40]	; (800a2d4 <__swbuf_r+0x9c>)
 800a2aa:	429c      	cmp	r4, r3
 800a2ac:	d101      	bne.n	800a2b2 <__swbuf_r+0x7a>
 800a2ae:	68ac      	ldr	r4, [r5, #8]
 800a2b0:	e7cf      	b.n	800a252 <__swbuf_r+0x1a>
 800a2b2:	4b09      	ldr	r3, [pc, #36]	; (800a2d8 <__swbuf_r+0xa0>)
 800a2b4:	429c      	cmp	r4, r3
 800a2b6:	bf08      	it	eq
 800a2b8:	68ec      	ldreq	r4, [r5, #12]
 800a2ba:	e7ca      	b.n	800a252 <__swbuf_r+0x1a>
 800a2bc:	4621      	mov	r1, r4
 800a2be:	4628      	mov	r0, r5
 800a2c0:	f000 f80c 	bl	800a2dc <__swsetup_r>
 800a2c4:	2800      	cmp	r0, #0
 800a2c6:	d0cb      	beq.n	800a260 <__swbuf_r+0x28>
 800a2c8:	f04f 37ff 	mov.w	r7, #4294967295
 800a2cc:	e7ea      	b.n	800a2a4 <__swbuf_r+0x6c>
 800a2ce:	bf00      	nop
 800a2d0:	0800c3b4 	.word	0x0800c3b4
 800a2d4:	0800c3d4 	.word	0x0800c3d4
 800a2d8:	0800c394 	.word	0x0800c394

0800a2dc <__swsetup_r>:
 800a2dc:	4b32      	ldr	r3, [pc, #200]	; (800a3a8 <__swsetup_r+0xcc>)
 800a2de:	b570      	push	{r4, r5, r6, lr}
 800a2e0:	681d      	ldr	r5, [r3, #0]
 800a2e2:	4606      	mov	r6, r0
 800a2e4:	460c      	mov	r4, r1
 800a2e6:	b125      	cbz	r5, 800a2f2 <__swsetup_r+0x16>
 800a2e8:	69ab      	ldr	r3, [r5, #24]
 800a2ea:	b913      	cbnz	r3, 800a2f2 <__swsetup_r+0x16>
 800a2ec:	4628      	mov	r0, r5
 800a2ee:	f7ff fd43 	bl	8009d78 <__sinit>
 800a2f2:	4b2e      	ldr	r3, [pc, #184]	; (800a3ac <__swsetup_r+0xd0>)
 800a2f4:	429c      	cmp	r4, r3
 800a2f6:	d10f      	bne.n	800a318 <__swsetup_r+0x3c>
 800a2f8:	686c      	ldr	r4, [r5, #4]
 800a2fa:	89a3      	ldrh	r3, [r4, #12]
 800a2fc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a300:	0719      	lsls	r1, r3, #28
 800a302:	d42c      	bmi.n	800a35e <__swsetup_r+0x82>
 800a304:	06dd      	lsls	r5, r3, #27
 800a306:	d411      	bmi.n	800a32c <__swsetup_r+0x50>
 800a308:	2309      	movs	r3, #9
 800a30a:	6033      	str	r3, [r6, #0]
 800a30c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a310:	81a3      	strh	r3, [r4, #12]
 800a312:	f04f 30ff 	mov.w	r0, #4294967295
 800a316:	e03e      	b.n	800a396 <__swsetup_r+0xba>
 800a318:	4b25      	ldr	r3, [pc, #148]	; (800a3b0 <__swsetup_r+0xd4>)
 800a31a:	429c      	cmp	r4, r3
 800a31c:	d101      	bne.n	800a322 <__swsetup_r+0x46>
 800a31e:	68ac      	ldr	r4, [r5, #8]
 800a320:	e7eb      	b.n	800a2fa <__swsetup_r+0x1e>
 800a322:	4b24      	ldr	r3, [pc, #144]	; (800a3b4 <__swsetup_r+0xd8>)
 800a324:	429c      	cmp	r4, r3
 800a326:	bf08      	it	eq
 800a328:	68ec      	ldreq	r4, [r5, #12]
 800a32a:	e7e6      	b.n	800a2fa <__swsetup_r+0x1e>
 800a32c:	0758      	lsls	r0, r3, #29
 800a32e:	d512      	bpl.n	800a356 <__swsetup_r+0x7a>
 800a330:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a332:	b141      	cbz	r1, 800a346 <__swsetup_r+0x6a>
 800a334:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a338:	4299      	cmp	r1, r3
 800a33a:	d002      	beq.n	800a342 <__swsetup_r+0x66>
 800a33c:	4630      	mov	r0, r6
 800a33e:	f7fe fd4f 	bl	8008de0 <_free_r>
 800a342:	2300      	movs	r3, #0
 800a344:	6363      	str	r3, [r4, #52]	; 0x34
 800a346:	89a3      	ldrh	r3, [r4, #12]
 800a348:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a34c:	81a3      	strh	r3, [r4, #12]
 800a34e:	2300      	movs	r3, #0
 800a350:	6063      	str	r3, [r4, #4]
 800a352:	6923      	ldr	r3, [r4, #16]
 800a354:	6023      	str	r3, [r4, #0]
 800a356:	89a3      	ldrh	r3, [r4, #12]
 800a358:	f043 0308 	orr.w	r3, r3, #8
 800a35c:	81a3      	strh	r3, [r4, #12]
 800a35e:	6923      	ldr	r3, [r4, #16]
 800a360:	b94b      	cbnz	r3, 800a376 <__swsetup_r+0x9a>
 800a362:	89a3      	ldrh	r3, [r4, #12]
 800a364:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a368:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a36c:	d003      	beq.n	800a376 <__swsetup_r+0x9a>
 800a36e:	4621      	mov	r1, r4
 800a370:	4630      	mov	r0, r6
 800a372:	f000 f84d 	bl	800a410 <__smakebuf_r>
 800a376:	89a0      	ldrh	r0, [r4, #12]
 800a378:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a37c:	f010 0301 	ands.w	r3, r0, #1
 800a380:	d00a      	beq.n	800a398 <__swsetup_r+0xbc>
 800a382:	2300      	movs	r3, #0
 800a384:	60a3      	str	r3, [r4, #8]
 800a386:	6963      	ldr	r3, [r4, #20]
 800a388:	425b      	negs	r3, r3
 800a38a:	61a3      	str	r3, [r4, #24]
 800a38c:	6923      	ldr	r3, [r4, #16]
 800a38e:	b943      	cbnz	r3, 800a3a2 <__swsetup_r+0xc6>
 800a390:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a394:	d1ba      	bne.n	800a30c <__swsetup_r+0x30>
 800a396:	bd70      	pop	{r4, r5, r6, pc}
 800a398:	0781      	lsls	r1, r0, #30
 800a39a:	bf58      	it	pl
 800a39c:	6963      	ldrpl	r3, [r4, #20]
 800a39e:	60a3      	str	r3, [r4, #8]
 800a3a0:	e7f4      	b.n	800a38c <__swsetup_r+0xb0>
 800a3a2:	2000      	movs	r0, #0
 800a3a4:	e7f7      	b.n	800a396 <__swsetup_r+0xba>
 800a3a6:	bf00      	nop
 800a3a8:	20000014 	.word	0x20000014
 800a3ac:	0800c3b4 	.word	0x0800c3b4
 800a3b0:	0800c3d4 	.word	0x0800c3d4
 800a3b4:	0800c394 	.word	0x0800c394

0800a3b8 <abort>:
 800a3b8:	b508      	push	{r3, lr}
 800a3ba:	2006      	movs	r0, #6
 800a3bc:	f000 f898 	bl	800a4f0 <raise>
 800a3c0:	2001      	movs	r0, #1
 800a3c2:	f7f8 fadc 	bl	800297e <_exit>

0800a3c6 <__swhatbuf_r>:
 800a3c6:	b570      	push	{r4, r5, r6, lr}
 800a3c8:	460e      	mov	r6, r1
 800a3ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a3ce:	2900      	cmp	r1, #0
 800a3d0:	b096      	sub	sp, #88	; 0x58
 800a3d2:	4614      	mov	r4, r2
 800a3d4:	461d      	mov	r5, r3
 800a3d6:	da08      	bge.n	800a3ea <__swhatbuf_r+0x24>
 800a3d8:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800a3dc:	2200      	movs	r2, #0
 800a3de:	602a      	str	r2, [r5, #0]
 800a3e0:	061a      	lsls	r2, r3, #24
 800a3e2:	d410      	bmi.n	800a406 <__swhatbuf_r+0x40>
 800a3e4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a3e8:	e00e      	b.n	800a408 <__swhatbuf_r+0x42>
 800a3ea:	466a      	mov	r2, sp
 800a3ec:	f000 f89c 	bl	800a528 <_fstat_r>
 800a3f0:	2800      	cmp	r0, #0
 800a3f2:	dbf1      	blt.n	800a3d8 <__swhatbuf_r+0x12>
 800a3f4:	9a01      	ldr	r2, [sp, #4]
 800a3f6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a3fa:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a3fe:	425a      	negs	r2, r3
 800a400:	415a      	adcs	r2, r3
 800a402:	602a      	str	r2, [r5, #0]
 800a404:	e7ee      	b.n	800a3e4 <__swhatbuf_r+0x1e>
 800a406:	2340      	movs	r3, #64	; 0x40
 800a408:	2000      	movs	r0, #0
 800a40a:	6023      	str	r3, [r4, #0]
 800a40c:	b016      	add	sp, #88	; 0x58
 800a40e:	bd70      	pop	{r4, r5, r6, pc}

0800a410 <__smakebuf_r>:
 800a410:	898b      	ldrh	r3, [r1, #12]
 800a412:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a414:	079d      	lsls	r5, r3, #30
 800a416:	4606      	mov	r6, r0
 800a418:	460c      	mov	r4, r1
 800a41a:	d507      	bpl.n	800a42c <__smakebuf_r+0x1c>
 800a41c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a420:	6023      	str	r3, [r4, #0]
 800a422:	6123      	str	r3, [r4, #16]
 800a424:	2301      	movs	r3, #1
 800a426:	6163      	str	r3, [r4, #20]
 800a428:	b002      	add	sp, #8
 800a42a:	bd70      	pop	{r4, r5, r6, pc}
 800a42c:	ab01      	add	r3, sp, #4
 800a42e:	466a      	mov	r2, sp
 800a430:	f7ff ffc9 	bl	800a3c6 <__swhatbuf_r>
 800a434:	9900      	ldr	r1, [sp, #0]
 800a436:	4605      	mov	r5, r0
 800a438:	4630      	mov	r0, r6
 800a43a:	f7fe fd3d 	bl	8008eb8 <_malloc_r>
 800a43e:	b948      	cbnz	r0, 800a454 <__smakebuf_r+0x44>
 800a440:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a444:	059a      	lsls	r2, r3, #22
 800a446:	d4ef      	bmi.n	800a428 <__smakebuf_r+0x18>
 800a448:	f023 0303 	bic.w	r3, r3, #3
 800a44c:	f043 0302 	orr.w	r3, r3, #2
 800a450:	81a3      	strh	r3, [r4, #12]
 800a452:	e7e3      	b.n	800a41c <__smakebuf_r+0xc>
 800a454:	4b0d      	ldr	r3, [pc, #52]	; (800a48c <__smakebuf_r+0x7c>)
 800a456:	62b3      	str	r3, [r6, #40]	; 0x28
 800a458:	89a3      	ldrh	r3, [r4, #12]
 800a45a:	6020      	str	r0, [r4, #0]
 800a45c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a460:	81a3      	strh	r3, [r4, #12]
 800a462:	9b00      	ldr	r3, [sp, #0]
 800a464:	6163      	str	r3, [r4, #20]
 800a466:	9b01      	ldr	r3, [sp, #4]
 800a468:	6120      	str	r0, [r4, #16]
 800a46a:	b15b      	cbz	r3, 800a484 <__smakebuf_r+0x74>
 800a46c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a470:	4630      	mov	r0, r6
 800a472:	f000 f86b 	bl	800a54c <_isatty_r>
 800a476:	b128      	cbz	r0, 800a484 <__smakebuf_r+0x74>
 800a478:	89a3      	ldrh	r3, [r4, #12]
 800a47a:	f023 0303 	bic.w	r3, r3, #3
 800a47e:	f043 0301 	orr.w	r3, r3, #1
 800a482:	81a3      	strh	r3, [r4, #12]
 800a484:	89a0      	ldrh	r0, [r4, #12]
 800a486:	4305      	orrs	r5, r0
 800a488:	81a5      	strh	r5, [r4, #12]
 800a48a:	e7cd      	b.n	800a428 <__smakebuf_r+0x18>
 800a48c:	08009d11 	.word	0x08009d11

0800a490 <_malloc_usable_size_r>:
 800a490:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a494:	1f18      	subs	r0, r3, #4
 800a496:	2b00      	cmp	r3, #0
 800a498:	bfbc      	itt	lt
 800a49a:	580b      	ldrlt	r3, [r1, r0]
 800a49c:	18c0      	addlt	r0, r0, r3
 800a49e:	4770      	bx	lr

0800a4a0 <_raise_r>:
 800a4a0:	291f      	cmp	r1, #31
 800a4a2:	b538      	push	{r3, r4, r5, lr}
 800a4a4:	4604      	mov	r4, r0
 800a4a6:	460d      	mov	r5, r1
 800a4a8:	d904      	bls.n	800a4b4 <_raise_r+0x14>
 800a4aa:	2316      	movs	r3, #22
 800a4ac:	6003      	str	r3, [r0, #0]
 800a4ae:	f04f 30ff 	mov.w	r0, #4294967295
 800a4b2:	bd38      	pop	{r3, r4, r5, pc}
 800a4b4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800a4b6:	b112      	cbz	r2, 800a4be <_raise_r+0x1e>
 800a4b8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a4bc:	b94b      	cbnz	r3, 800a4d2 <_raise_r+0x32>
 800a4be:	4620      	mov	r0, r4
 800a4c0:	f000 f830 	bl	800a524 <_getpid_r>
 800a4c4:	462a      	mov	r2, r5
 800a4c6:	4601      	mov	r1, r0
 800a4c8:	4620      	mov	r0, r4
 800a4ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a4ce:	f000 b817 	b.w	800a500 <_kill_r>
 800a4d2:	2b01      	cmp	r3, #1
 800a4d4:	d00a      	beq.n	800a4ec <_raise_r+0x4c>
 800a4d6:	1c59      	adds	r1, r3, #1
 800a4d8:	d103      	bne.n	800a4e2 <_raise_r+0x42>
 800a4da:	2316      	movs	r3, #22
 800a4dc:	6003      	str	r3, [r0, #0]
 800a4de:	2001      	movs	r0, #1
 800a4e0:	e7e7      	b.n	800a4b2 <_raise_r+0x12>
 800a4e2:	2400      	movs	r4, #0
 800a4e4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a4e8:	4628      	mov	r0, r5
 800a4ea:	4798      	blx	r3
 800a4ec:	2000      	movs	r0, #0
 800a4ee:	e7e0      	b.n	800a4b2 <_raise_r+0x12>

0800a4f0 <raise>:
 800a4f0:	4b02      	ldr	r3, [pc, #8]	; (800a4fc <raise+0xc>)
 800a4f2:	4601      	mov	r1, r0
 800a4f4:	6818      	ldr	r0, [r3, #0]
 800a4f6:	f7ff bfd3 	b.w	800a4a0 <_raise_r>
 800a4fa:	bf00      	nop
 800a4fc:	20000014 	.word	0x20000014

0800a500 <_kill_r>:
 800a500:	b538      	push	{r3, r4, r5, lr}
 800a502:	4d07      	ldr	r5, [pc, #28]	; (800a520 <_kill_r+0x20>)
 800a504:	2300      	movs	r3, #0
 800a506:	4604      	mov	r4, r0
 800a508:	4608      	mov	r0, r1
 800a50a:	4611      	mov	r1, r2
 800a50c:	602b      	str	r3, [r5, #0]
 800a50e:	f7f8 fa26 	bl	800295e <_kill>
 800a512:	1c43      	adds	r3, r0, #1
 800a514:	d102      	bne.n	800a51c <_kill_r+0x1c>
 800a516:	682b      	ldr	r3, [r5, #0]
 800a518:	b103      	cbz	r3, 800a51c <_kill_r+0x1c>
 800a51a:	6023      	str	r3, [r4, #0]
 800a51c:	bd38      	pop	{r3, r4, r5, pc}
 800a51e:	bf00      	nop
 800a520:	20000d14 	.word	0x20000d14

0800a524 <_getpid_r>:
 800a524:	f7f8 ba13 	b.w	800294e <_getpid>

0800a528 <_fstat_r>:
 800a528:	b538      	push	{r3, r4, r5, lr}
 800a52a:	4d07      	ldr	r5, [pc, #28]	; (800a548 <_fstat_r+0x20>)
 800a52c:	2300      	movs	r3, #0
 800a52e:	4604      	mov	r4, r0
 800a530:	4608      	mov	r0, r1
 800a532:	4611      	mov	r1, r2
 800a534:	602b      	str	r3, [r5, #0]
 800a536:	f7f8 fa71 	bl	8002a1c <_fstat>
 800a53a:	1c43      	adds	r3, r0, #1
 800a53c:	d102      	bne.n	800a544 <_fstat_r+0x1c>
 800a53e:	682b      	ldr	r3, [r5, #0]
 800a540:	b103      	cbz	r3, 800a544 <_fstat_r+0x1c>
 800a542:	6023      	str	r3, [r4, #0]
 800a544:	bd38      	pop	{r3, r4, r5, pc}
 800a546:	bf00      	nop
 800a548:	20000d14 	.word	0x20000d14

0800a54c <_isatty_r>:
 800a54c:	b538      	push	{r3, r4, r5, lr}
 800a54e:	4d06      	ldr	r5, [pc, #24]	; (800a568 <_isatty_r+0x1c>)
 800a550:	2300      	movs	r3, #0
 800a552:	4604      	mov	r4, r0
 800a554:	4608      	mov	r0, r1
 800a556:	602b      	str	r3, [r5, #0]
 800a558:	f7f8 fa70 	bl	8002a3c <_isatty>
 800a55c:	1c43      	adds	r3, r0, #1
 800a55e:	d102      	bne.n	800a566 <_isatty_r+0x1a>
 800a560:	682b      	ldr	r3, [r5, #0]
 800a562:	b103      	cbz	r3, 800a566 <_isatty_r+0x1a>
 800a564:	6023      	str	r3, [r4, #0]
 800a566:	bd38      	pop	{r3, r4, r5, pc}
 800a568:	20000d14 	.word	0x20000d14
 800a56c:	00000000 	.word	0x00000000

0800a570 <cos>:
 800a570:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a572:	ec53 2b10 	vmov	r2, r3, d0
 800a576:	4826      	ldr	r0, [pc, #152]	; (800a610 <cos+0xa0>)
 800a578:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800a57c:	4281      	cmp	r1, r0
 800a57e:	dc06      	bgt.n	800a58e <cos+0x1e>
 800a580:	ed9f 1b21 	vldr	d1, [pc, #132]	; 800a608 <cos+0x98>
 800a584:	b005      	add	sp, #20
 800a586:	f85d eb04 	ldr.w	lr, [sp], #4
 800a58a:	f000 bb79 	b.w	800ac80 <__kernel_cos>
 800a58e:	4821      	ldr	r0, [pc, #132]	; (800a614 <cos+0xa4>)
 800a590:	4281      	cmp	r1, r0
 800a592:	dd09      	ble.n	800a5a8 <cos+0x38>
 800a594:	ee10 0a10 	vmov	r0, s0
 800a598:	4619      	mov	r1, r3
 800a59a:	f7f5 fe8d 	bl	80002b8 <__aeabi_dsub>
 800a59e:	ec41 0b10 	vmov	d0, r0, r1
 800a5a2:	b005      	add	sp, #20
 800a5a4:	f85d fb04 	ldr.w	pc, [sp], #4
 800a5a8:	4668      	mov	r0, sp
 800a5aa:	f000 f95d 	bl	800a868 <__ieee754_rem_pio2>
 800a5ae:	f000 0003 	and.w	r0, r0, #3
 800a5b2:	2801      	cmp	r0, #1
 800a5b4:	d00b      	beq.n	800a5ce <cos+0x5e>
 800a5b6:	2802      	cmp	r0, #2
 800a5b8:	d016      	beq.n	800a5e8 <cos+0x78>
 800a5ba:	b9e0      	cbnz	r0, 800a5f6 <cos+0x86>
 800a5bc:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a5c0:	ed9d 0b00 	vldr	d0, [sp]
 800a5c4:	f000 fb5c 	bl	800ac80 <__kernel_cos>
 800a5c8:	ec51 0b10 	vmov	r0, r1, d0
 800a5cc:	e7e7      	b.n	800a59e <cos+0x2e>
 800a5ce:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a5d2:	ed9d 0b00 	vldr	d0, [sp]
 800a5d6:	f000 ff6b 	bl	800b4b0 <__kernel_sin>
 800a5da:	ec53 2b10 	vmov	r2, r3, d0
 800a5de:	ee10 0a10 	vmov	r0, s0
 800a5e2:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800a5e6:	e7da      	b.n	800a59e <cos+0x2e>
 800a5e8:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a5ec:	ed9d 0b00 	vldr	d0, [sp]
 800a5f0:	f000 fb46 	bl	800ac80 <__kernel_cos>
 800a5f4:	e7f1      	b.n	800a5da <cos+0x6a>
 800a5f6:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a5fa:	ed9d 0b00 	vldr	d0, [sp]
 800a5fe:	2001      	movs	r0, #1
 800a600:	f000 ff56 	bl	800b4b0 <__kernel_sin>
 800a604:	e7e0      	b.n	800a5c8 <cos+0x58>
 800a606:	bf00      	nop
	...
 800a610:	3fe921fb 	.word	0x3fe921fb
 800a614:	7fefffff 	.word	0x7fefffff

0800a618 <sin>:
 800a618:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a61a:	ec53 2b10 	vmov	r2, r3, d0
 800a61e:	4828      	ldr	r0, [pc, #160]	; (800a6c0 <sin+0xa8>)
 800a620:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800a624:	4281      	cmp	r1, r0
 800a626:	dc07      	bgt.n	800a638 <sin+0x20>
 800a628:	ed9f 1b23 	vldr	d1, [pc, #140]	; 800a6b8 <sin+0xa0>
 800a62c:	2000      	movs	r0, #0
 800a62e:	b005      	add	sp, #20
 800a630:	f85d eb04 	ldr.w	lr, [sp], #4
 800a634:	f000 bf3c 	b.w	800b4b0 <__kernel_sin>
 800a638:	4822      	ldr	r0, [pc, #136]	; (800a6c4 <sin+0xac>)
 800a63a:	4281      	cmp	r1, r0
 800a63c:	dd09      	ble.n	800a652 <sin+0x3a>
 800a63e:	ee10 0a10 	vmov	r0, s0
 800a642:	4619      	mov	r1, r3
 800a644:	f7f5 fe38 	bl	80002b8 <__aeabi_dsub>
 800a648:	ec41 0b10 	vmov	d0, r0, r1
 800a64c:	b005      	add	sp, #20
 800a64e:	f85d fb04 	ldr.w	pc, [sp], #4
 800a652:	4668      	mov	r0, sp
 800a654:	f000 f908 	bl	800a868 <__ieee754_rem_pio2>
 800a658:	f000 0003 	and.w	r0, r0, #3
 800a65c:	2801      	cmp	r0, #1
 800a65e:	d00c      	beq.n	800a67a <sin+0x62>
 800a660:	2802      	cmp	r0, #2
 800a662:	d011      	beq.n	800a688 <sin+0x70>
 800a664:	b9f0      	cbnz	r0, 800a6a4 <sin+0x8c>
 800a666:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a66a:	ed9d 0b00 	vldr	d0, [sp]
 800a66e:	2001      	movs	r0, #1
 800a670:	f000 ff1e 	bl	800b4b0 <__kernel_sin>
 800a674:	ec51 0b10 	vmov	r0, r1, d0
 800a678:	e7e6      	b.n	800a648 <sin+0x30>
 800a67a:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a67e:	ed9d 0b00 	vldr	d0, [sp]
 800a682:	f000 fafd 	bl	800ac80 <__kernel_cos>
 800a686:	e7f5      	b.n	800a674 <sin+0x5c>
 800a688:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a68c:	ed9d 0b00 	vldr	d0, [sp]
 800a690:	2001      	movs	r0, #1
 800a692:	f000 ff0d 	bl	800b4b0 <__kernel_sin>
 800a696:	ec53 2b10 	vmov	r2, r3, d0
 800a69a:	ee10 0a10 	vmov	r0, s0
 800a69e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800a6a2:	e7d1      	b.n	800a648 <sin+0x30>
 800a6a4:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a6a8:	ed9d 0b00 	vldr	d0, [sp]
 800a6ac:	f000 fae8 	bl	800ac80 <__kernel_cos>
 800a6b0:	e7f1      	b.n	800a696 <sin+0x7e>
 800a6b2:	bf00      	nop
 800a6b4:	f3af 8000 	nop.w
	...
 800a6c0:	3fe921fb 	.word	0x3fe921fb
 800a6c4:	7fefffff 	.word	0x7fefffff

0800a6c8 <atan2>:
 800a6c8:	f000 b802 	b.w	800a6d0 <__ieee754_atan2>
 800a6cc:	0000      	movs	r0, r0
	...

0800a6d0 <__ieee754_atan2>:
 800a6d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a6d4:	ec57 6b11 	vmov	r6, r7, d1
 800a6d8:	4273      	negs	r3, r6
 800a6da:	f8df e184 	ldr.w	lr, [pc, #388]	; 800a860 <__ieee754_atan2+0x190>
 800a6de:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 800a6e2:	4333      	orrs	r3, r6
 800a6e4:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800a6e8:	4573      	cmp	r3, lr
 800a6ea:	ec51 0b10 	vmov	r0, r1, d0
 800a6ee:	ee11 8a10 	vmov	r8, s2
 800a6f2:	d80a      	bhi.n	800a70a <__ieee754_atan2+0x3a>
 800a6f4:	4244      	negs	r4, r0
 800a6f6:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800a6fa:	4304      	orrs	r4, r0
 800a6fc:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 800a700:	4574      	cmp	r4, lr
 800a702:	ee10 9a10 	vmov	r9, s0
 800a706:	468c      	mov	ip, r1
 800a708:	d907      	bls.n	800a71a <__ieee754_atan2+0x4a>
 800a70a:	4632      	mov	r2, r6
 800a70c:	463b      	mov	r3, r7
 800a70e:	f7f5 fdd5 	bl	80002bc <__adddf3>
 800a712:	ec41 0b10 	vmov	d0, r0, r1
 800a716:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a71a:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 800a71e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800a722:	4334      	orrs	r4, r6
 800a724:	d103      	bne.n	800a72e <__ieee754_atan2+0x5e>
 800a726:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a72a:	f000 bf81 	b.w	800b630 <atan>
 800a72e:	17bc      	asrs	r4, r7, #30
 800a730:	f004 0402 	and.w	r4, r4, #2
 800a734:	ea53 0909 	orrs.w	r9, r3, r9
 800a738:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800a73c:	d107      	bne.n	800a74e <__ieee754_atan2+0x7e>
 800a73e:	2c02      	cmp	r4, #2
 800a740:	d060      	beq.n	800a804 <__ieee754_atan2+0x134>
 800a742:	2c03      	cmp	r4, #3
 800a744:	d1e5      	bne.n	800a712 <__ieee754_atan2+0x42>
 800a746:	a142      	add	r1, pc, #264	; (adr r1, 800a850 <__ieee754_atan2+0x180>)
 800a748:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a74c:	e7e1      	b.n	800a712 <__ieee754_atan2+0x42>
 800a74e:	ea52 0808 	orrs.w	r8, r2, r8
 800a752:	d106      	bne.n	800a762 <__ieee754_atan2+0x92>
 800a754:	f1bc 0f00 	cmp.w	ip, #0
 800a758:	da5f      	bge.n	800a81a <__ieee754_atan2+0x14a>
 800a75a:	a13f      	add	r1, pc, #252	; (adr r1, 800a858 <__ieee754_atan2+0x188>)
 800a75c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a760:	e7d7      	b.n	800a712 <__ieee754_atan2+0x42>
 800a762:	4572      	cmp	r2, lr
 800a764:	d10f      	bne.n	800a786 <__ieee754_atan2+0xb6>
 800a766:	4293      	cmp	r3, r2
 800a768:	f104 34ff 	add.w	r4, r4, #4294967295
 800a76c:	d107      	bne.n	800a77e <__ieee754_atan2+0xae>
 800a76e:	2c02      	cmp	r4, #2
 800a770:	d84c      	bhi.n	800a80c <__ieee754_atan2+0x13c>
 800a772:	4b35      	ldr	r3, [pc, #212]	; (800a848 <__ieee754_atan2+0x178>)
 800a774:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 800a778:	e9d4 0100 	ldrd	r0, r1, [r4]
 800a77c:	e7c9      	b.n	800a712 <__ieee754_atan2+0x42>
 800a77e:	2c02      	cmp	r4, #2
 800a780:	d848      	bhi.n	800a814 <__ieee754_atan2+0x144>
 800a782:	4b32      	ldr	r3, [pc, #200]	; (800a84c <__ieee754_atan2+0x17c>)
 800a784:	e7f6      	b.n	800a774 <__ieee754_atan2+0xa4>
 800a786:	4573      	cmp	r3, lr
 800a788:	d0e4      	beq.n	800a754 <__ieee754_atan2+0x84>
 800a78a:	1a9b      	subs	r3, r3, r2
 800a78c:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 800a790:	ea4f 5223 	mov.w	r2, r3, asr #20
 800a794:	da1e      	bge.n	800a7d4 <__ieee754_atan2+0x104>
 800a796:	2f00      	cmp	r7, #0
 800a798:	da01      	bge.n	800a79e <__ieee754_atan2+0xce>
 800a79a:	323c      	adds	r2, #60	; 0x3c
 800a79c:	db1e      	blt.n	800a7dc <__ieee754_atan2+0x10c>
 800a79e:	4632      	mov	r2, r6
 800a7a0:	463b      	mov	r3, r7
 800a7a2:	f7f6 f86b 	bl	800087c <__aeabi_ddiv>
 800a7a6:	ec41 0b10 	vmov	d0, r0, r1
 800a7aa:	f001 f8e1 	bl	800b970 <fabs>
 800a7ae:	f000 ff3f 	bl	800b630 <atan>
 800a7b2:	ec51 0b10 	vmov	r0, r1, d0
 800a7b6:	2c01      	cmp	r4, #1
 800a7b8:	d013      	beq.n	800a7e2 <__ieee754_atan2+0x112>
 800a7ba:	2c02      	cmp	r4, #2
 800a7bc:	d015      	beq.n	800a7ea <__ieee754_atan2+0x11a>
 800a7be:	2c00      	cmp	r4, #0
 800a7c0:	d0a7      	beq.n	800a712 <__ieee754_atan2+0x42>
 800a7c2:	a319      	add	r3, pc, #100	; (adr r3, 800a828 <__ieee754_atan2+0x158>)
 800a7c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7c8:	f7f5 fd76 	bl	80002b8 <__aeabi_dsub>
 800a7cc:	a318      	add	r3, pc, #96	; (adr r3, 800a830 <__ieee754_atan2+0x160>)
 800a7ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7d2:	e014      	b.n	800a7fe <__ieee754_atan2+0x12e>
 800a7d4:	a118      	add	r1, pc, #96	; (adr r1, 800a838 <__ieee754_atan2+0x168>)
 800a7d6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a7da:	e7ec      	b.n	800a7b6 <__ieee754_atan2+0xe6>
 800a7dc:	2000      	movs	r0, #0
 800a7de:	2100      	movs	r1, #0
 800a7e0:	e7e9      	b.n	800a7b6 <__ieee754_atan2+0xe6>
 800a7e2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a7e6:	4619      	mov	r1, r3
 800a7e8:	e793      	b.n	800a712 <__ieee754_atan2+0x42>
 800a7ea:	a30f      	add	r3, pc, #60	; (adr r3, 800a828 <__ieee754_atan2+0x158>)
 800a7ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7f0:	f7f5 fd62 	bl	80002b8 <__aeabi_dsub>
 800a7f4:	4602      	mov	r2, r0
 800a7f6:	460b      	mov	r3, r1
 800a7f8:	a10d      	add	r1, pc, #52	; (adr r1, 800a830 <__ieee754_atan2+0x160>)
 800a7fa:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a7fe:	f7f5 fd5b 	bl	80002b8 <__aeabi_dsub>
 800a802:	e786      	b.n	800a712 <__ieee754_atan2+0x42>
 800a804:	a10a      	add	r1, pc, #40	; (adr r1, 800a830 <__ieee754_atan2+0x160>)
 800a806:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a80a:	e782      	b.n	800a712 <__ieee754_atan2+0x42>
 800a80c:	a10c      	add	r1, pc, #48	; (adr r1, 800a840 <__ieee754_atan2+0x170>)
 800a80e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a812:	e77e      	b.n	800a712 <__ieee754_atan2+0x42>
 800a814:	2000      	movs	r0, #0
 800a816:	2100      	movs	r1, #0
 800a818:	e77b      	b.n	800a712 <__ieee754_atan2+0x42>
 800a81a:	a107      	add	r1, pc, #28	; (adr r1, 800a838 <__ieee754_atan2+0x168>)
 800a81c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a820:	e777      	b.n	800a712 <__ieee754_atan2+0x42>
 800a822:	bf00      	nop
 800a824:	f3af 8000 	nop.w
 800a828:	33145c07 	.word	0x33145c07
 800a82c:	3ca1a626 	.word	0x3ca1a626
 800a830:	54442d18 	.word	0x54442d18
 800a834:	400921fb 	.word	0x400921fb
 800a838:	54442d18 	.word	0x54442d18
 800a83c:	3ff921fb 	.word	0x3ff921fb
 800a840:	54442d18 	.word	0x54442d18
 800a844:	3fe921fb 	.word	0x3fe921fb
 800a848:	0800c3f8 	.word	0x0800c3f8
 800a84c:	0800c410 	.word	0x0800c410
 800a850:	54442d18 	.word	0x54442d18
 800a854:	c00921fb 	.word	0xc00921fb
 800a858:	54442d18 	.word	0x54442d18
 800a85c:	bff921fb 	.word	0xbff921fb
 800a860:	7ff00000 	.word	0x7ff00000
 800a864:	00000000 	.word	0x00000000

0800a868 <__ieee754_rem_pio2>:
 800a868:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a86c:	ed2d 8b02 	vpush	{d8}
 800a870:	ec55 4b10 	vmov	r4, r5, d0
 800a874:	4bca      	ldr	r3, [pc, #808]	; (800aba0 <__ieee754_rem_pio2+0x338>)
 800a876:	b08b      	sub	sp, #44	; 0x2c
 800a878:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800a87c:	4598      	cmp	r8, r3
 800a87e:	4682      	mov	sl, r0
 800a880:	9502      	str	r5, [sp, #8]
 800a882:	dc08      	bgt.n	800a896 <__ieee754_rem_pio2+0x2e>
 800a884:	2200      	movs	r2, #0
 800a886:	2300      	movs	r3, #0
 800a888:	ed80 0b00 	vstr	d0, [r0]
 800a88c:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800a890:	f04f 0b00 	mov.w	fp, #0
 800a894:	e028      	b.n	800a8e8 <__ieee754_rem_pio2+0x80>
 800a896:	4bc3      	ldr	r3, [pc, #780]	; (800aba4 <__ieee754_rem_pio2+0x33c>)
 800a898:	4598      	cmp	r8, r3
 800a89a:	dc78      	bgt.n	800a98e <__ieee754_rem_pio2+0x126>
 800a89c:	9b02      	ldr	r3, [sp, #8]
 800a89e:	4ec2      	ldr	r6, [pc, #776]	; (800aba8 <__ieee754_rem_pio2+0x340>)
 800a8a0:	2b00      	cmp	r3, #0
 800a8a2:	ee10 0a10 	vmov	r0, s0
 800a8a6:	a3b0      	add	r3, pc, #704	; (adr r3, 800ab68 <__ieee754_rem_pio2+0x300>)
 800a8a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8ac:	4629      	mov	r1, r5
 800a8ae:	dd39      	ble.n	800a924 <__ieee754_rem_pio2+0xbc>
 800a8b0:	f7f5 fd02 	bl	80002b8 <__aeabi_dsub>
 800a8b4:	45b0      	cmp	r8, r6
 800a8b6:	4604      	mov	r4, r0
 800a8b8:	460d      	mov	r5, r1
 800a8ba:	d01b      	beq.n	800a8f4 <__ieee754_rem_pio2+0x8c>
 800a8bc:	a3ac      	add	r3, pc, #688	; (adr r3, 800ab70 <__ieee754_rem_pio2+0x308>)
 800a8be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8c2:	f7f5 fcf9 	bl	80002b8 <__aeabi_dsub>
 800a8c6:	4602      	mov	r2, r0
 800a8c8:	460b      	mov	r3, r1
 800a8ca:	e9ca 2300 	strd	r2, r3, [sl]
 800a8ce:	4620      	mov	r0, r4
 800a8d0:	4629      	mov	r1, r5
 800a8d2:	f7f5 fcf1 	bl	80002b8 <__aeabi_dsub>
 800a8d6:	a3a6      	add	r3, pc, #664	; (adr r3, 800ab70 <__ieee754_rem_pio2+0x308>)
 800a8d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8dc:	f7f5 fcec 	bl	80002b8 <__aeabi_dsub>
 800a8e0:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800a8e4:	f04f 0b01 	mov.w	fp, #1
 800a8e8:	4658      	mov	r0, fp
 800a8ea:	b00b      	add	sp, #44	; 0x2c
 800a8ec:	ecbd 8b02 	vpop	{d8}
 800a8f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a8f4:	a3a0      	add	r3, pc, #640	; (adr r3, 800ab78 <__ieee754_rem_pio2+0x310>)
 800a8f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8fa:	f7f5 fcdd 	bl	80002b8 <__aeabi_dsub>
 800a8fe:	a3a0      	add	r3, pc, #640	; (adr r3, 800ab80 <__ieee754_rem_pio2+0x318>)
 800a900:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a904:	4604      	mov	r4, r0
 800a906:	460d      	mov	r5, r1
 800a908:	f7f5 fcd6 	bl	80002b8 <__aeabi_dsub>
 800a90c:	4602      	mov	r2, r0
 800a90e:	460b      	mov	r3, r1
 800a910:	e9ca 2300 	strd	r2, r3, [sl]
 800a914:	4620      	mov	r0, r4
 800a916:	4629      	mov	r1, r5
 800a918:	f7f5 fcce 	bl	80002b8 <__aeabi_dsub>
 800a91c:	a398      	add	r3, pc, #608	; (adr r3, 800ab80 <__ieee754_rem_pio2+0x318>)
 800a91e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a922:	e7db      	b.n	800a8dc <__ieee754_rem_pio2+0x74>
 800a924:	f7f5 fcca 	bl	80002bc <__adddf3>
 800a928:	45b0      	cmp	r8, r6
 800a92a:	4604      	mov	r4, r0
 800a92c:	460d      	mov	r5, r1
 800a92e:	d016      	beq.n	800a95e <__ieee754_rem_pio2+0xf6>
 800a930:	a38f      	add	r3, pc, #572	; (adr r3, 800ab70 <__ieee754_rem_pio2+0x308>)
 800a932:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a936:	f7f5 fcc1 	bl	80002bc <__adddf3>
 800a93a:	4602      	mov	r2, r0
 800a93c:	460b      	mov	r3, r1
 800a93e:	e9ca 2300 	strd	r2, r3, [sl]
 800a942:	4620      	mov	r0, r4
 800a944:	4629      	mov	r1, r5
 800a946:	f7f5 fcb7 	bl	80002b8 <__aeabi_dsub>
 800a94a:	a389      	add	r3, pc, #548	; (adr r3, 800ab70 <__ieee754_rem_pio2+0x308>)
 800a94c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a950:	f7f5 fcb4 	bl	80002bc <__adddf3>
 800a954:	f04f 3bff 	mov.w	fp, #4294967295
 800a958:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800a95c:	e7c4      	b.n	800a8e8 <__ieee754_rem_pio2+0x80>
 800a95e:	a386      	add	r3, pc, #536	; (adr r3, 800ab78 <__ieee754_rem_pio2+0x310>)
 800a960:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a964:	f7f5 fcaa 	bl	80002bc <__adddf3>
 800a968:	a385      	add	r3, pc, #532	; (adr r3, 800ab80 <__ieee754_rem_pio2+0x318>)
 800a96a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a96e:	4604      	mov	r4, r0
 800a970:	460d      	mov	r5, r1
 800a972:	f7f5 fca3 	bl	80002bc <__adddf3>
 800a976:	4602      	mov	r2, r0
 800a978:	460b      	mov	r3, r1
 800a97a:	e9ca 2300 	strd	r2, r3, [sl]
 800a97e:	4620      	mov	r0, r4
 800a980:	4629      	mov	r1, r5
 800a982:	f7f5 fc99 	bl	80002b8 <__aeabi_dsub>
 800a986:	a37e      	add	r3, pc, #504	; (adr r3, 800ab80 <__ieee754_rem_pio2+0x318>)
 800a988:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a98c:	e7e0      	b.n	800a950 <__ieee754_rem_pio2+0xe8>
 800a98e:	4b87      	ldr	r3, [pc, #540]	; (800abac <__ieee754_rem_pio2+0x344>)
 800a990:	4598      	cmp	r8, r3
 800a992:	f300 80d9 	bgt.w	800ab48 <__ieee754_rem_pio2+0x2e0>
 800a996:	f000 ffeb 	bl	800b970 <fabs>
 800a99a:	ec55 4b10 	vmov	r4, r5, d0
 800a99e:	ee10 0a10 	vmov	r0, s0
 800a9a2:	a379      	add	r3, pc, #484	; (adr r3, 800ab88 <__ieee754_rem_pio2+0x320>)
 800a9a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9a8:	4629      	mov	r1, r5
 800a9aa:	f7f5 fe3d 	bl	8000628 <__aeabi_dmul>
 800a9ae:	4b80      	ldr	r3, [pc, #512]	; (800abb0 <__ieee754_rem_pio2+0x348>)
 800a9b0:	2200      	movs	r2, #0
 800a9b2:	f7f5 fc83 	bl	80002bc <__adddf3>
 800a9b6:	f7f6 f8e7 	bl	8000b88 <__aeabi_d2iz>
 800a9ba:	4683      	mov	fp, r0
 800a9bc:	f7f5 fdca 	bl	8000554 <__aeabi_i2d>
 800a9c0:	4602      	mov	r2, r0
 800a9c2:	460b      	mov	r3, r1
 800a9c4:	ec43 2b18 	vmov	d8, r2, r3
 800a9c8:	a367      	add	r3, pc, #412	; (adr r3, 800ab68 <__ieee754_rem_pio2+0x300>)
 800a9ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9ce:	f7f5 fe2b 	bl	8000628 <__aeabi_dmul>
 800a9d2:	4602      	mov	r2, r0
 800a9d4:	460b      	mov	r3, r1
 800a9d6:	4620      	mov	r0, r4
 800a9d8:	4629      	mov	r1, r5
 800a9da:	f7f5 fc6d 	bl	80002b8 <__aeabi_dsub>
 800a9de:	a364      	add	r3, pc, #400	; (adr r3, 800ab70 <__ieee754_rem_pio2+0x308>)
 800a9e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9e4:	4606      	mov	r6, r0
 800a9e6:	460f      	mov	r7, r1
 800a9e8:	ec51 0b18 	vmov	r0, r1, d8
 800a9ec:	f7f5 fe1c 	bl	8000628 <__aeabi_dmul>
 800a9f0:	f1bb 0f1f 	cmp.w	fp, #31
 800a9f4:	4604      	mov	r4, r0
 800a9f6:	460d      	mov	r5, r1
 800a9f8:	dc0d      	bgt.n	800aa16 <__ieee754_rem_pio2+0x1ae>
 800a9fa:	4b6e      	ldr	r3, [pc, #440]	; (800abb4 <__ieee754_rem_pio2+0x34c>)
 800a9fc:	f10b 32ff 	add.w	r2, fp, #4294967295
 800aa00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aa04:	4543      	cmp	r3, r8
 800aa06:	d006      	beq.n	800aa16 <__ieee754_rem_pio2+0x1ae>
 800aa08:	4622      	mov	r2, r4
 800aa0a:	462b      	mov	r3, r5
 800aa0c:	4630      	mov	r0, r6
 800aa0e:	4639      	mov	r1, r7
 800aa10:	f7f5 fc52 	bl	80002b8 <__aeabi_dsub>
 800aa14:	e00f      	b.n	800aa36 <__ieee754_rem_pio2+0x1ce>
 800aa16:	462b      	mov	r3, r5
 800aa18:	4622      	mov	r2, r4
 800aa1a:	4630      	mov	r0, r6
 800aa1c:	4639      	mov	r1, r7
 800aa1e:	f7f5 fc4b 	bl	80002b8 <__aeabi_dsub>
 800aa22:	ea4f 5328 	mov.w	r3, r8, asr #20
 800aa26:	9303      	str	r3, [sp, #12]
 800aa28:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800aa2c:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 800aa30:	f1b8 0f10 	cmp.w	r8, #16
 800aa34:	dc02      	bgt.n	800aa3c <__ieee754_rem_pio2+0x1d4>
 800aa36:	e9ca 0100 	strd	r0, r1, [sl]
 800aa3a:	e039      	b.n	800aab0 <__ieee754_rem_pio2+0x248>
 800aa3c:	a34e      	add	r3, pc, #312	; (adr r3, 800ab78 <__ieee754_rem_pio2+0x310>)
 800aa3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa42:	ec51 0b18 	vmov	r0, r1, d8
 800aa46:	f7f5 fdef 	bl	8000628 <__aeabi_dmul>
 800aa4a:	4604      	mov	r4, r0
 800aa4c:	460d      	mov	r5, r1
 800aa4e:	4602      	mov	r2, r0
 800aa50:	460b      	mov	r3, r1
 800aa52:	4630      	mov	r0, r6
 800aa54:	4639      	mov	r1, r7
 800aa56:	f7f5 fc2f 	bl	80002b8 <__aeabi_dsub>
 800aa5a:	4602      	mov	r2, r0
 800aa5c:	460b      	mov	r3, r1
 800aa5e:	4680      	mov	r8, r0
 800aa60:	4689      	mov	r9, r1
 800aa62:	4630      	mov	r0, r6
 800aa64:	4639      	mov	r1, r7
 800aa66:	f7f5 fc27 	bl	80002b8 <__aeabi_dsub>
 800aa6a:	4622      	mov	r2, r4
 800aa6c:	462b      	mov	r3, r5
 800aa6e:	f7f5 fc23 	bl	80002b8 <__aeabi_dsub>
 800aa72:	a343      	add	r3, pc, #268	; (adr r3, 800ab80 <__ieee754_rem_pio2+0x318>)
 800aa74:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa78:	4604      	mov	r4, r0
 800aa7a:	460d      	mov	r5, r1
 800aa7c:	ec51 0b18 	vmov	r0, r1, d8
 800aa80:	f7f5 fdd2 	bl	8000628 <__aeabi_dmul>
 800aa84:	4622      	mov	r2, r4
 800aa86:	462b      	mov	r3, r5
 800aa88:	f7f5 fc16 	bl	80002b8 <__aeabi_dsub>
 800aa8c:	4602      	mov	r2, r0
 800aa8e:	460b      	mov	r3, r1
 800aa90:	4604      	mov	r4, r0
 800aa92:	460d      	mov	r5, r1
 800aa94:	4640      	mov	r0, r8
 800aa96:	4649      	mov	r1, r9
 800aa98:	f7f5 fc0e 	bl	80002b8 <__aeabi_dsub>
 800aa9c:	9a03      	ldr	r2, [sp, #12]
 800aa9e:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800aaa2:	1ad3      	subs	r3, r2, r3
 800aaa4:	2b31      	cmp	r3, #49	; 0x31
 800aaa6:	dc24      	bgt.n	800aaf2 <__ieee754_rem_pio2+0x28a>
 800aaa8:	e9ca 0100 	strd	r0, r1, [sl]
 800aaac:	4646      	mov	r6, r8
 800aaae:	464f      	mov	r7, r9
 800aab0:	e9da 8900 	ldrd	r8, r9, [sl]
 800aab4:	4630      	mov	r0, r6
 800aab6:	4642      	mov	r2, r8
 800aab8:	464b      	mov	r3, r9
 800aaba:	4639      	mov	r1, r7
 800aabc:	f7f5 fbfc 	bl	80002b8 <__aeabi_dsub>
 800aac0:	462b      	mov	r3, r5
 800aac2:	4622      	mov	r2, r4
 800aac4:	f7f5 fbf8 	bl	80002b8 <__aeabi_dsub>
 800aac8:	9b02      	ldr	r3, [sp, #8]
 800aaca:	2b00      	cmp	r3, #0
 800aacc:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800aad0:	f6bf af0a 	bge.w	800a8e8 <__ieee754_rem_pio2+0x80>
 800aad4:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800aad8:	f8ca 3004 	str.w	r3, [sl, #4]
 800aadc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800aae0:	f8ca 8000 	str.w	r8, [sl]
 800aae4:	f8ca 0008 	str.w	r0, [sl, #8]
 800aae8:	f8ca 300c 	str.w	r3, [sl, #12]
 800aaec:	f1cb 0b00 	rsb	fp, fp, #0
 800aaf0:	e6fa      	b.n	800a8e8 <__ieee754_rem_pio2+0x80>
 800aaf2:	a327      	add	r3, pc, #156	; (adr r3, 800ab90 <__ieee754_rem_pio2+0x328>)
 800aaf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aaf8:	ec51 0b18 	vmov	r0, r1, d8
 800aafc:	f7f5 fd94 	bl	8000628 <__aeabi_dmul>
 800ab00:	4604      	mov	r4, r0
 800ab02:	460d      	mov	r5, r1
 800ab04:	4602      	mov	r2, r0
 800ab06:	460b      	mov	r3, r1
 800ab08:	4640      	mov	r0, r8
 800ab0a:	4649      	mov	r1, r9
 800ab0c:	f7f5 fbd4 	bl	80002b8 <__aeabi_dsub>
 800ab10:	4602      	mov	r2, r0
 800ab12:	460b      	mov	r3, r1
 800ab14:	4606      	mov	r6, r0
 800ab16:	460f      	mov	r7, r1
 800ab18:	4640      	mov	r0, r8
 800ab1a:	4649      	mov	r1, r9
 800ab1c:	f7f5 fbcc 	bl	80002b8 <__aeabi_dsub>
 800ab20:	4622      	mov	r2, r4
 800ab22:	462b      	mov	r3, r5
 800ab24:	f7f5 fbc8 	bl	80002b8 <__aeabi_dsub>
 800ab28:	a31b      	add	r3, pc, #108	; (adr r3, 800ab98 <__ieee754_rem_pio2+0x330>)
 800ab2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab2e:	4604      	mov	r4, r0
 800ab30:	460d      	mov	r5, r1
 800ab32:	ec51 0b18 	vmov	r0, r1, d8
 800ab36:	f7f5 fd77 	bl	8000628 <__aeabi_dmul>
 800ab3a:	4622      	mov	r2, r4
 800ab3c:	462b      	mov	r3, r5
 800ab3e:	f7f5 fbbb 	bl	80002b8 <__aeabi_dsub>
 800ab42:	4604      	mov	r4, r0
 800ab44:	460d      	mov	r5, r1
 800ab46:	e75f      	b.n	800aa08 <__ieee754_rem_pio2+0x1a0>
 800ab48:	4b1b      	ldr	r3, [pc, #108]	; (800abb8 <__ieee754_rem_pio2+0x350>)
 800ab4a:	4598      	cmp	r8, r3
 800ab4c:	dd36      	ble.n	800abbc <__ieee754_rem_pio2+0x354>
 800ab4e:	ee10 2a10 	vmov	r2, s0
 800ab52:	462b      	mov	r3, r5
 800ab54:	4620      	mov	r0, r4
 800ab56:	4629      	mov	r1, r5
 800ab58:	f7f5 fbae 	bl	80002b8 <__aeabi_dsub>
 800ab5c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800ab60:	e9ca 0100 	strd	r0, r1, [sl]
 800ab64:	e694      	b.n	800a890 <__ieee754_rem_pio2+0x28>
 800ab66:	bf00      	nop
 800ab68:	54400000 	.word	0x54400000
 800ab6c:	3ff921fb 	.word	0x3ff921fb
 800ab70:	1a626331 	.word	0x1a626331
 800ab74:	3dd0b461 	.word	0x3dd0b461
 800ab78:	1a600000 	.word	0x1a600000
 800ab7c:	3dd0b461 	.word	0x3dd0b461
 800ab80:	2e037073 	.word	0x2e037073
 800ab84:	3ba3198a 	.word	0x3ba3198a
 800ab88:	6dc9c883 	.word	0x6dc9c883
 800ab8c:	3fe45f30 	.word	0x3fe45f30
 800ab90:	2e000000 	.word	0x2e000000
 800ab94:	3ba3198a 	.word	0x3ba3198a
 800ab98:	252049c1 	.word	0x252049c1
 800ab9c:	397b839a 	.word	0x397b839a
 800aba0:	3fe921fb 	.word	0x3fe921fb
 800aba4:	4002d97b 	.word	0x4002d97b
 800aba8:	3ff921fb 	.word	0x3ff921fb
 800abac:	413921fb 	.word	0x413921fb
 800abb0:	3fe00000 	.word	0x3fe00000
 800abb4:	0800c428 	.word	0x0800c428
 800abb8:	7fefffff 	.word	0x7fefffff
 800abbc:	ea4f 5428 	mov.w	r4, r8, asr #20
 800abc0:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 800abc4:	ee10 0a10 	vmov	r0, s0
 800abc8:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 800abcc:	ee10 6a10 	vmov	r6, s0
 800abd0:	460f      	mov	r7, r1
 800abd2:	f7f5 ffd9 	bl	8000b88 <__aeabi_d2iz>
 800abd6:	f7f5 fcbd 	bl	8000554 <__aeabi_i2d>
 800abda:	4602      	mov	r2, r0
 800abdc:	460b      	mov	r3, r1
 800abde:	4630      	mov	r0, r6
 800abe0:	4639      	mov	r1, r7
 800abe2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800abe6:	f7f5 fb67 	bl	80002b8 <__aeabi_dsub>
 800abea:	4b23      	ldr	r3, [pc, #140]	; (800ac78 <__ieee754_rem_pio2+0x410>)
 800abec:	2200      	movs	r2, #0
 800abee:	f7f5 fd1b 	bl	8000628 <__aeabi_dmul>
 800abf2:	460f      	mov	r7, r1
 800abf4:	4606      	mov	r6, r0
 800abf6:	f7f5 ffc7 	bl	8000b88 <__aeabi_d2iz>
 800abfa:	f7f5 fcab 	bl	8000554 <__aeabi_i2d>
 800abfe:	4602      	mov	r2, r0
 800ac00:	460b      	mov	r3, r1
 800ac02:	4630      	mov	r0, r6
 800ac04:	4639      	mov	r1, r7
 800ac06:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800ac0a:	f7f5 fb55 	bl	80002b8 <__aeabi_dsub>
 800ac0e:	4b1a      	ldr	r3, [pc, #104]	; (800ac78 <__ieee754_rem_pio2+0x410>)
 800ac10:	2200      	movs	r2, #0
 800ac12:	f7f5 fd09 	bl	8000628 <__aeabi_dmul>
 800ac16:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800ac1a:	ad04      	add	r5, sp, #16
 800ac1c:	f04f 0803 	mov.w	r8, #3
 800ac20:	46a9      	mov	r9, r5
 800ac22:	2600      	movs	r6, #0
 800ac24:	2700      	movs	r7, #0
 800ac26:	4632      	mov	r2, r6
 800ac28:	463b      	mov	r3, r7
 800ac2a:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 800ac2e:	46c3      	mov	fp, r8
 800ac30:	3d08      	subs	r5, #8
 800ac32:	f108 38ff 	add.w	r8, r8, #4294967295
 800ac36:	f7f5 ff5f 	bl	8000af8 <__aeabi_dcmpeq>
 800ac3a:	2800      	cmp	r0, #0
 800ac3c:	d1f3      	bne.n	800ac26 <__ieee754_rem_pio2+0x3be>
 800ac3e:	4b0f      	ldr	r3, [pc, #60]	; (800ac7c <__ieee754_rem_pio2+0x414>)
 800ac40:	9301      	str	r3, [sp, #4]
 800ac42:	2302      	movs	r3, #2
 800ac44:	9300      	str	r3, [sp, #0]
 800ac46:	4622      	mov	r2, r4
 800ac48:	465b      	mov	r3, fp
 800ac4a:	4651      	mov	r1, sl
 800ac4c:	4648      	mov	r0, r9
 800ac4e:	f000 f8df 	bl	800ae10 <__kernel_rem_pio2>
 800ac52:	9b02      	ldr	r3, [sp, #8]
 800ac54:	2b00      	cmp	r3, #0
 800ac56:	4683      	mov	fp, r0
 800ac58:	f6bf ae46 	bge.w	800a8e8 <__ieee754_rem_pio2+0x80>
 800ac5c:	e9da 2100 	ldrd	r2, r1, [sl]
 800ac60:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ac64:	e9ca 2300 	strd	r2, r3, [sl]
 800ac68:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 800ac6c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ac70:	e9ca 2302 	strd	r2, r3, [sl, #8]
 800ac74:	e73a      	b.n	800aaec <__ieee754_rem_pio2+0x284>
 800ac76:	bf00      	nop
 800ac78:	41700000 	.word	0x41700000
 800ac7c:	0800c4a8 	.word	0x0800c4a8

0800ac80 <__kernel_cos>:
 800ac80:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac84:	ec57 6b10 	vmov	r6, r7, d0
 800ac88:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800ac8c:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 800ac90:	ed8d 1b00 	vstr	d1, [sp]
 800ac94:	da07      	bge.n	800aca6 <__kernel_cos+0x26>
 800ac96:	ee10 0a10 	vmov	r0, s0
 800ac9a:	4639      	mov	r1, r7
 800ac9c:	f7f5 ff74 	bl	8000b88 <__aeabi_d2iz>
 800aca0:	2800      	cmp	r0, #0
 800aca2:	f000 8088 	beq.w	800adb6 <__kernel_cos+0x136>
 800aca6:	4632      	mov	r2, r6
 800aca8:	463b      	mov	r3, r7
 800acaa:	4630      	mov	r0, r6
 800acac:	4639      	mov	r1, r7
 800acae:	f7f5 fcbb 	bl	8000628 <__aeabi_dmul>
 800acb2:	4b51      	ldr	r3, [pc, #324]	; (800adf8 <__kernel_cos+0x178>)
 800acb4:	2200      	movs	r2, #0
 800acb6:	4604      	mov	r4, r0
 800acb8:	460d      	mov	r5, r1
 800acba:	f7f5 fcb5 	bl	8000628 <__aeabi_dmul>
 800acbe:	a340      	add	r3, pc, #256	; (adr r3, 800adc0 <__kernel_cos+0x140>)
 800acc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acc4:	4682      	mov	sl, r0
 800acc6:	468b      	mov	fp, r1
 800acc8:	4620      	mov	r0, r4
 800acca:	4629      	mov	r1, r5
 800accc:	f7f5 fcac 	bl	8000628 <__aeabi_dmul>
 800acd0:	a33d      	add	r3, pc, #244	; (adr r3, 800adc8 <__kernel_cos+0x148>)
 800acd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acd6:	f7f5 faf1 	bl	80002bc <__adddf3>
 800acda:	4622      	mov	r2, r4
 800acdc:	462b      	mov	r3, r5
 800acde:	f7f5 fca3 	bl	8000628 <__aeabi_dmul>
 800ace2:	a33b      	add	r3, pc, #236	; (adr r3, 800add0 <__kernel_cos+0x150>)
 800ace4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ace8:	f7f5 fae6 	bl	80002b8 <__aeabi_dsub>
 800acec:	4622      	mov	r2, r4
 800acee:	462b      	mov	r3, r5
 800acf0:	f7f5 fc9a 	bl	8000628 <__aeabi_dmul>
 800acf4:	a338      	add	r3, pc, #224	; (adr r3, 800add8 <__kernel_cos+0x158>)
 800acf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acfa:	f7f5 fadf 	bl	80002bc <__adddf3>
 800acfe:	4622      	mov	r2, r4
 800ad00:	462b      	mov	r3, r5
 800ad02:	f7f5 fc91 	bl	8000628 <__aeabi_dmul>
 800ad06:	a336      	add	r3, pc, #216	; (adr r3, 800ade0 <__kernel_cos+0x160>)
 800ad08:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad0c:	f7f5 fad4 	bl	80002b8 <__aeabi_dsub>
 800ad10:	4622      	mov	r2, r4
 800ad12:	462b      	mov	r3, r5
 800ad14:	f7f5 fc88 	bl	8000628 <__aeabi_dmul>
 800ad18:	a333      	add	r3, pc, #204	; (adr r3, 800ade8 <__kernel_cos+0x168>)
 800ad1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad1e:	f7f5 facd 	bl	80002bc <__adddf3>
 800ad22:	4622      	mov	r2, r4
 800ad24:	462b      	mov	r3, r5
 800ad26:	f7f5 fc7f 	bl	8000628 <__aeabi_dmul>
 800ad2a:	4622      	mov	r2, r4
 800ad2c:	462b      	mov	r3, r5
 800ad2e:	f7f5 fc7b 	bl	8000628 <__aeabi_dmul>
 800ad32:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ad36:	4604      	mov	r4, r0
 800ad38:	460d      	mov	r5, r1
 800ad3a:	4630      	mov	r0, r6
 800ad3c:	4639      	mov	r1, r7
 800ad3e:	f7f5 fc73 	bl	8000628 <__aeabi_dmul>
 800ad42:	460b      	mov	r3, r1
 800ad44:	4602      	mov	r2, r0
 800ad46:	4629      	mov	r1, r5
 800ad48:	4620      	mov	r0, r4
 800ad4a:	f7f5 fab5 	bl	80002b8 <__aeabi_dsub>
 800ad4e:	4b2b      	ldr	r3, [pc, #172]	; (800adfc <__kernel_cos+0x17c>)
 800ad50:	4598      	cmp	r8, r3
 800ad52:	4606      	mov	r6, r0
 800ad54:	460f      	mov	r7, r1
 800ad56:	dc10      	bgt.n	800ad7a <__kernel_cos+0xfa>
 800ad58:	4602      	mov	r2, r0
 800ad5a:	460b      	mov	r3, r1
 800ad5c:	4650      	mov	r0, sl
 800ad5e:	4659      	mov	r1, fp
 800ad60:	f7f5 faaa 	bl	80002b8 <__aeabi_dsub>
 800ad64:	460b      	mov	r3, r1
 800ad66:	4926      	ldr	r1, [pc, #152]	; (800ae00 <__kernel_cos+0x180>)
 800ad68:	4602      	mov	r2, r0
 800ad6a:	2000      	movs	r0, #0
 800ad6c:	f7f5 faa4 	bl	80002b8 <__aeabi_dsub>
 800ad70:	ec41 0b10 	vmov	d0, r0, r1
 800ad74:	b003      	add	sp, #12
 800ad76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad7a:	4b22      	ldr	r3, [pc, #136]	; (800ae04 <__kernel_cos+0x184>)
 800ad7c:	4920      	ldr	r1, [pc, #128]	; (800ae00 <__kernel_cos+0x180>)
 800ad7e:	4598      	cmp	r8, r3
 800ad80:	bfcc      	ite	gt
 800ad82:	4d21      	ldrgt	r5, [pc, #132]	; (800ae08 <__kernel_cos+0x188>)
 800ad84:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 800ad88:	2400      	movs	r4, #0
 800ad8a:	4622      	mov	r2, r4
 800ad8c:	462b      	mov	r3, r5
 800ad8e:	2000      	movs	r0, #0
 800ad90:	f7f5 fa92 	bl	80002b8 <__aeabi_dsub>
 800ad94:	4622      	mov	r2, r4
 800ad96:	4680      	mov	r8, r0
 800ad98:	4689      	mov	r9, r1
 800ad9a:	462b      	mov	r3, r5
 800ad9c:	4650      	mov	r0, sl
 800ad9e:	4659      	mov	r1, fp
 800ada0:	f7f5 fa8a 	bl	80002b8 <__aeabi_dsub>
 800ada4:	4632      	mov	r2, r6
 800ada6:	463b      	mov	r3, r7
 800ada8:	f7f5 fa86 	bl	80002b8 <__aeabi_dsub>
 800adac:	4602      	mov	r2, r0
 800adae:	460b      	mov	r3, r1
 800adb0:	4640      	mov	r0, r8
 800adb2:	4649      	mov	r1, r9
 800adb4:	e7da      	b.n	800ad6c <__kernel_cos+0xec>
 800adb6:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 800adf0 <__kernel_cos+0x170>
 800adba:	e7db      	b.n	800ad74 <__kernel_cos+0xf4>
 800adbc:	f3af 8000 	nop.w
 800adc0:	be8838d4 	.word	0xbe8838d4
 800adc4:	bda8fae9 	.word	0xbda8fae9
 800adc8:	bdb4b1c4 	.word	0xbdb4b1c4
 800adcc:	3e21ee9e 	.word	0x3e21ee9e
 800add0:	809c52ad 	.word	0x809c52ad
 800add4:	3e927e4f 	.word	0x3e927e4f
 800add8:	19cb1590 	.word	0x19cb1590
 800addc:	3efa01a0 	.word	0x3efa01a0
 800ade0:	16c15177 	.word	0x16c15177
 800ade4:	3f56c16c 	.word	0x3f56c16c
 800ade8:	5555554c 	.word	0x5555554c
 800adec:	3fa55555 	.word	0x3fa55555
 800adf0:	00000000 	.word	0x00000000
 800adf4:	3ff00000 	.word	0x3ff00000
 800adf8:	3fe00000 	.word	0x3fe00000
 800adfc:	3fd33332 	.word	0x3fd33332
 800ae00:	3ff00000 	.word	0x3ff00000
 800ae04:	3fe90000 	.word	0x3fe90000
 800ae08:	3fd20000 	.word	0x3fd20000
 800ae0c:	00000000 	.word	0x00000000

0800ae10 <__kernel_rem_pio2>:
 800ae10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae14:	ed2d 8b02 	vpush	{d8}
 800ae18:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 800ae1c:	f112 0f14 	cmn.w	r2, #20
 800ae20:	9308      	str	r3, [sp, #32]
 800ae22:	9101      	str	r1, [sp, #4]
 800ae24:	4bc4      	ldr	r3, [pc, #784]	; (800b138 <__kernel_rem_pio2+0x328>)
 800ae26:	99a6      	ldr	r1, [sp, #664]	; 0x298
 800ae28:	900b      	str	r0, [sp, #44]	; 0x2c
 800ae2a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800ae2e:	9302      	str	r3, [sp, #8]
 800ae30:	9b08      	ldr	r3, [sp, #32]
 800ae32:	f103 33ff 	add.w	r3, r3, #4294967295
 800ae36:	bfa8      	it	ge
 800ae38:	1ed4      	subge	r4, r2, #3
 800ae3a:	9306      	str	r3, [sp, #24]
 800ae3c:	bfb2      	itee	lt
 800ae3e:	2400      	movlt	r4, #0
 800ae40:	2318      	movge	r3, #24
 800ae42:	fb94 f4f3 	sdivge	r4, r4, r3
 800ae46:	f06f 0317 	mvn.w	r3, #23
 800ae4a:	fb04 3303 	mla	r3, r4, r3, r3
 800ae4e:	eb03 0a02 	add.w	sl, r3, r2
 800ae52:	9b02      	ldr	r3, [sp, #8]
 800ae54:	9a06      	ldr	r2, [sp, #24]
 800ae56:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 800b128 <__kernel_rem_pio2+0x318>
 800ae5a:	eb03 0802 	add.w	r8, r3, r2
 800ae5e:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800ae60:	1aa7      	subs	r7, r4, r2
 800ae62:	ae22      	add	r6, sp, #136	; 0x88
 800ae64:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800ae68:	2500      	movs	r5, #0
 800ae6a:	4545      	cmp	r5, r8
 800ae6c:	dd13      	ble.n	800ae96 <__kernel_rem_pio2+0x86>
 800ae6e:	9b08      	ldr	r3, [sp, #32]
 800ae70:	ed9f 8bad 	vldr	d8, [pc, #692]	; 800b128 <__kernel_rem_pio2+0x318>
 800ae74:	aa22      	add	r2, sp, #136	; 0x88
 800ae76:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800ae7a:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 800ae7e:	f04f 0800 	mov.w	r8, #0
 800ae82:	9b02      	ldr	r3, [sp, #8]
 800ae84:	4598      	cmp	r8, r3
 800ae86:	dc2f      	bgt.n	800aee8 <__kernel_rem_pio2+0xd8>
 800ae88:	ed8d 8b04 	vstr	d8, [sp, #16]
 800ae8c:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 800ae90:	462f      	mov	r7, r5
 800ae92:	2600      	movs	r6, #0
 800ae94:	e01b      	b.n	800aece <__kernel_rem_pio2+0xbe>
 800ae96:	42ef      	cmn	r7, r5
 800ae98:	d407      	bmi.n	800aeaa <__kernel_rem_pio2+0x9a>
 800ae9a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800ae9e:	f7f5 fb59 	bl	8000554 <__aeabi_i2d>
 800aea2:	e8e6 0102 	strd	r0, r1, [r6], #8
 800aea6:	3501      	adds	r5, #1
 800aea8:	e7df      	b.n	800ae6a <__kernel_rem_pio2+0x5a>
 800aeaa:	ec51 0b18 	vmov	r0, r1, d8
 800aeae:	e7f8      	b.n	800aea2 <__kernel_rem_pio2+0x92>
 800aeb0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800aeb4:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800aeb8:	f7f5 fbb6 	bl	8000628 <__aeabi_dmul>
 800aebc:	4602      	mov	r2, r0
 800aebe:	460b      	mov	r3, r1
 800aec0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800aec4:	f7f5 f9fa 	bl	80002bc <__adddf3>
 800aec8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800aecc:	3601      	adds	r6, #1
 800aece:	9b06      	ldr	r3, [sp, #24]
 800aed0:	429e      	cmp	r6, r3
 800aed2:	f1a7 0708 	sub.w	r7, r7, #8
 800aed6:	ddeb      	ble.n	800aeb0 <__kernel_rem_pio2+0xa0>
 800aed8:	ed9d 7b04 	vldr	d7, [sp, #16]
 800aedc:	f108 0801 	add.w	r8, r8, #1
 800aee0:	ecab 7b02 	vstmia	fp!, {d7}
 800aee4:	3508      	adds	r5, #8
 800aee6:	e7cc      	b.n	800ae82 <__kernel_rem_pio2+0x72>
 800aee8:	9b02      	ldr	r3, [sp, #8]
 800aeea:	aa0e      	add	r2, sp, #56	; 0x38
 800aeec:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800aef0:	930d      	str	r3, [sp, #52]	; 0x34
 800aef2:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800aef4:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800aef8:	9c02      	ldr	r4, [sp, #8]
 800aefa:	930c      	str	r3, [sp, #48]	; 0x30
 800aefc:	00e3      	lsls	r3, r4, #3
 800aefe:	930a      	str	r3, [sp, #40]	; 0x28
 800af00:	ab9a      	add	r3, sp, #616	; 0x268
 800af02:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800af06:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 800af0a:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 800af0e:	ab72      	add	r3, sp, #456	; 0x1c8
 800af10:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 800af14:	46c3      	mov	fp, r8
 800af16:	46a1      	mov	r9, r4
 800af18:	f1b9 0f00 	cmp.w	r9, #0
 800af1c:	f1a5 0508 	sub.w	r5, r5, #8
 800af20:	dc77      	bgt.n	800b012 <__kernel_rem_pio2+0x202>
 800af22:	ec47 6b10 	vmov	d0, r6, r7
 800af26:	4650      	mov	r0, sl
 800af28:	f000 fdae 	bl	800ba88 <scalbn>
 800af2c:	ec57 6b10 	vmov	r6, r7, d0
 800af30:	2200      	movs	r2, #0
 800af32:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800af36:	ee10 0a10 	vmov	r0, s0
 800af3a:	4639      	mov	r1, r7
 800af3c:	f7f5 fb74 	bl	8000628 <__aeabi_dmul>
 800af40:	ec41 0b10 	vmov	d0, r0, r1
 800af44:	f000 fd20 	bl	800b988 <floor>
 800af48:	4b7c      	ldr	r3, [pc, #496]	; (800b13c <__kernel_rem_pio2+0x32c>)
 800af4a:	ec51 0b10 	vmov	r0, r1, d0
 800af4e:	2200      	movs	r2, #0
 800af50:	f7f5 fb6a 	bl	8000628 <__aeabi_dmul>
 800af54:	4602      	mov	r2, r0
 800af56:	460b      	mov	r3, r1
 800af58:	4630      	mov	r0, r6
 800af5a:	4639      	mov	r1, r7
 800af5c:	f7f5 f9ac 	bl	80002b8 <__aeabi_dsub>
 800af60:	460f      	mov	r7, r1
 800af62:	4606      	mov	r6, r0
 800af64:	f7f5 fe10 	bl	8000b88 <__aeabi_d2iz>
 800af68:	9004      	str	r0, [sp, #16]
 800af6a:	f7f5 faf3 	bl	8000554 <__aeabi_i2d>
 800af6e:	4602      	mov	r2, r0
 800af70:	460b      	mov	r3, r1
 800af72:	4630      	mov	r0, r6
 800af74:	4639      	mov	r1, r7
 800af76:	f7f5 f99f 	bl	80002b8 <__aeabi_dsub>
 800af7a:	f1ba 0f00 	cmp.w	sl, #0
 800af7e:	4606      	mov	r6, r0
 800af80:	460f      	mov	r7, r1
 800af82:	dd6d      	ble.n	800b060 <__kernel_rem_pio2+0x250>
 800af84:	1e62      	subs	r2, r4, #1
 800af86:	ab0e      	add	r3, sp, #56	; 0x38
 800af88:	9d04      	ldr	r5, [sp, #16]
 800af8a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800af8e:	f1ca 0118 	rsb	r1, sl, #24
 800af92:	fa40 f301 	asr.w	r3, r0, r1
 800af96:	441d      	add	r5, r3
 800af98:	408b      	lsls	r3, r1
 800af9a:	1ac0      	subs	r0, r0, r3
 800af9c:	ab0e      	add	r3, sp, #56	; 0x38
 800af9e:	9504      	str	r5, [sp, #16]
 800afa0:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800afa4:	f1ca 0317 	rsb	r3, sl, #23
 800afa8:	fa40 fb03 	asr.w	fp, r0, r3
 800afac:	f1bb 0f00 	cmp.w	fp, #0
 800afb0:	dd65      	ble.n	800b07e <__kernel_rem_pio2+0x26e>
 800afb2:	9b04      	ldr	r3, [sp, #16]
 800afb4:	2200      	movs	r2, #0
 800afb6:	3301      	adds	r3, #1
 800afb8:	9304      	str	r3, [sp, #16]
 800afba:	4615      	mov	r5, r2
 800afbc:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800afc0:	4294      	cmp	r4, r2
 800afc2:	f300 809c 	bgt.w	800b0fe <__kernel_rem_pio2+0x2ee>
 800afc6:	f1ba 0f00 	cmp.w	sl, #0
 800afca:	dd07      	ble.n	800afdc <__kernel_rem_pio2+0x1cc>
 800afcc:	f1ba 0f01 	cmp.w	sl, #1
 800afd0:	f000 80c0 	beq.w	800b154 <__kernel_rem_pio2+0x344>
 800afd4:	f1ba 0f02 	cmp.w	sl, #2
 800afd8:	f000 80c6 	beq.w	800b168 <__kernel_rem_pio2+0x358>
 800afdc:	f1bb 0f02 	cmp.w	fp, #2
 800afe0:	d14d      	bne.n	800b07e <__kernel_rem_pio2+0x26e>
 800afe2:	4632      	mov	r2, r6
 800afe4:	463b      	mov	r3, r7
 800afe6:	4956      	ldr	r1, [pc, #344]	; (800b140 <__kernel_rem_pio2+0x330>)
 800afe8:	2000      	movs	r0, #0
 800afea:	f7f5 f965 	bl	80002b8 <__aeabi_dsub>
 800afee:	4606      	mov	r6, r0
 800aff0:	460f      	mov	r7, r1
 800aff2:	2d00      	cmp	r5, #0
 800aff4:	d043      	beq.n	800b07e <__kernel_rem_pio2+0x26e>
 800aff6:	4650      	mov	r0, sl
 800aff8:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 800b130 <__kernel_rem_pio2+0x320>
 800affc:	f000 fd44 	bl	800ba88 <scalbn>
 800b000:	4630      	mov	r0, r6
 800b002:	4639      	mov	r1, r7
 800b004:	ec53 2b10 	vmov	r2, r3, d0
 800b008:	f7f5 f956 	bl	80002b8 <__aeabi_dsub>
 800b00c:	4606      	mov	r6, r0
 800b00e:	460f      	mov	r7, r1
 800b010:	e035      	b.n	800b07e <__kernel_rem_pio2+0x26e>
 800b012:	4b4c      	ldr	r3, [pc, #304]	; (800b144 <__kernel_rem_pio2+0x334>)
 800b014:	2200      	movs	r2, #0
 800b016:	4630      	mov	r0, r6
 800b018:	4639      	mov	r1, r7
 800b01a:	f7f5 fb05 	bl	8000628 <__aeabi_dmul>
 800b01e:	f7f5 fdb3 	bl	8000b88 <__aeabi_d2iz>
 800b022:	f7f5 fa97 	bl	8000554 <__aeabi_i2d>
 800b026:	4602      	mov	r2, r0
 800b028:	460b      	mov	r3, r1
 800b02a:	ec43 2b18 	vmov	d8, r2, r3
 800b02e:	4b46      	ldr	r3, [pc, #280]	; (800b148 <__kernel_rem_pio2+0x338>)
 800b030:	2200      	movs	r2, #0
 800b032:	f7f5 faf9 	bl	8000628 <__aeabi_dmul>
 800b036:	4602      	mov	r2, r0
 800b038:	460b      	mov	r3, r1
 800b03a:	4630      	mov	r0, r6
 800b03c:	4639      	mov	r1, r7
 800b03e:	f7f5 f93b 	bl	80002b8 <__aeabi_dsub>
 800b042:	f7f5 fda1 	bl	8000b88 <__aeabi_d2iz>
 800b046:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b04a:	f84b 0b04 	str.w	r0, [fp], #4
 800b04e:	ec51 0b18 	vmov	r0, r1, d8
 800b052:	f7f5 f933 	bl	80002bc <__adddf3>
 800b056:	f109 39ff 	add.w	r9, r9, #4294967295
 800b05a:	4606      	mov	r6, r0
 800b05c:	460f      	mov	r7, r1
 800b05e:	e75b      	b.n	800af18 <__kernel_rem_pio2+0x108>
 800b060:	d106      	bne.n	800b070 <__kernel_rem_pio2+0x260>
 800b062:	1e63      	subs	r3, r4, #1
 800b064:	aa0e      	add	r2, sp, #56	; 0x38
 800b066:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800b06a:	ea4f 5be0 	mov.w	fp, r0, asr #23
 800b06e:	e79d      	b.n	800afac <__kernel_rem_pio2+0x19c>
 800b070:	4b36      	ldr	r3, [pc, #216]	; (800b14c <__kernel_rem_pio2+0x33c>)
 800b072:	2200      	movs	r2, #0
 800b074:	f7f5 fd5e 	bl	8000b34 <__aeabi_dcmpge>
 800b078:	2800      	cmp	r0, #0
 800b07a:	d13d      	bne.n	800b0f8 <__kernel_rem_pio2+0x2e8>
 800b07c:	4683      	mov	fp, r0
 800b07e:	2200      	movs	r2, #0
 800b080:	2300      	movs	r3, #0
 800b082:	4630      	mov	r0, r6
 800b084:	4639      	mov	r1, r7
 800b086:	f7f5 fd37 	bl	8000af8 <__aeabi_dcmpeq>
 800b08a:	2800      	cmp	r0, #0
 800b08c:	f000 80c0 	beq.w	800b210 <__kernel_rem_pio2+0x400>
 800b090:	1e65      	subs	r5, r4, #1
 800b092:	462b      	mov	r3, r5
 800b094:	2200      	movs	r2, #0
 800b096:	9902      	ldr	r1, [sp, #8]
 800b098:	428b      	cmp	r3, r1
 800b09a:	da6c      	bge.n	800b176 <__kernel_rem_pio2+0x366>
 800b09c:	2a00      	cmp	r2, #0
 800b09e:	f000 8089 	beq.w	800b1b4 <__kernel_rem_pio2+0x3a4>
 800b0a2:	ab0e      	add	r3, sp, #56	; 0x38
 800b0a4:	f1aa 0a18 	sub.w	sl, sl, #24
 800b0a8:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800b0ac:	2b00      	cmp	r3, #0
 800b0ae:	f000 80ad 	beq.w	800b20c <__kernel_rem_pio2+0x3fc>
 800b0b2:	4650      	mov	r0, sl
 800b0b4:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 800b130 <__kernel_rem_pio2+0x320>
 800b0b8:	f000 fce6 	bl	800ba88 <scalbn>
 800b0bc:	ab9a      	add	r3, sp, #616	; 0x268
 800b0be:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800b0c2:	ec57 6b10 	vmov	r6, r7, d0
 800b0c6:	00ec      	lsls	r4, r5, #3
 800b0c8:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 800b0cc:	46aa      	mov	sl, r5
 800b0ce:	f1ba 0f00 	cmp.w	sl, #0
 800b0d2:	f280 80d6 	bge.w	800b282 <__kernel_rem_pio2+0x472>
 800b0d6:	ed9f 8b14 	vldr	d8, [pc, #80]	; 800b128 <__kernel_rem_pio2+0x318>
 800b0da:	462e      	mov	r6, r5
 800b0dc:	2e00      	cmp	r6, #0
 800b0de:	f2c0 8104 	blt.w	800b2ea <__kernel_rem_pio2+0x4da>
 800b0e2:	ab72      	add	r3, sp, #456	; 0x1c8
 800b0e4:	ed8d 8b06 	vstr	d8, [sp, #24]
 800b0e8:	f8df a064 	ldr.w	sl, [pc, #100]	; 800b150 <__kernel_rem_pio2+0x340>
 800b0ec:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 800b0f0:	f04f 0800 	mov.w	r8, #0
 800b0f4:	1baf      	subs	r7, r5, r6
 800b0f6:	e0ea      	b.n	800b2ce <__kernel_rem_pio2+0x4be>
 800b0f8:	f04f 0b02 	mov.w	fp, #2
 800b0fc:	e759      	b.n	800afb2 <__kernel_rem_pio2+0x1a2>
 800b0fe:	f8d8 3000 	ldr.w	r3, [r8]
 800b102:	b955      	cbnz	r5, 800b11a <__kernel_rem_pio2+0x30a>
 800b104:	b123      	cbz	r3, 800b110 <__kernel_rem_pio2+0x300>
 800b106:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800b10a:	f8c8 3000 	str.w	r3, [r8]
 800b10e:	2301      	movs	r3, #1
 800b110:	3201      	adds	r2, #1
 800b112:	f108 0804 	add.w	r8, r8, #4
 800b116:	461d      	mov	r5, r3
 800b118:	e752      	b.n	800afc0 <__kernel_rem_pio2+0x1b0>
 800b11a:	1acb      	subs	r3, r1, r3
 800b11c:	f8c8 3000 	str.w	r3, [r8]
 800b120:	462b      	mov	r3, r5
 800b122:	e7f5      	b.n	800b110 <__kernel_rem_pio2+0x300>
 800b124:	f3af 8000 	nop.w
	...
 800b134:	3ff00000 	.word	0x3ff00000
 800b138:	0800c5f0 	.word	0x0800c5f0
 800b13c:	40200000 	.word	0x40200000
 800b140:	3ff00000 	.word	0x3ff00000
 800b144:	3e700000 	.word	0x3e700000
 800b148:	41700000 	.word	0x41700000
 800b14c:	3fe00000 	.word	0x3fe00000
 800b150:	0800c5b0 	.word	0x0800c5b0
 800b154:	1e62      	subs	r2, r4, #1
 800b156:	ab0e      	add	r3, sp, #56	; 0x38
 800b158:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b15c:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800b160:	a90e      	add	r1, sp, #56	; 0x38
 800b162:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800b166:	e739      	b.n	800afdc <__kernel_rem_pio2+0x1cc>
 800b168:	1e62      	subs	r2, r4, #1
 800b16a:	ab0e      	add	r3, sp, #56	; 0x38
 800b16c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b170:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800b174:	e7f4      	b.n	800b160 <__kernel_rem_pio2+0x350>
 800b176:	a90e      	add	r1, sp, #56	; 0x38
 800b178:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800b17c:	3b01      	subs	r3, #1
 800b17e:	430a      	orrs	r2, r1
 800b180:	e789      	b.n	800b096 <__kernel_rem_pio2+0x286>
 800b182:	3301      	adds	r3, #1
 800b184:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800b188:	2900      	cmp	r1, #0
 800b18a:	d0fa      	beq.n	800b182 <__kernel_rem_pio2+0x372>
 800b18c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b18e:	f502 721a 	add.w	r2, r2, #616	; 0x268
 800b192:	446a      	add	r2, sp
 800b194:	3a98      	subs	r2, #152	; 0x98
 800b196:	920a      	str	r2, [sp, #40]	; 0x28
 800b198:	9a08      	ldr	r2, [sp, #32]
 800b19a:	18e3      	adds	r3, r4, r3
 800b19c:	18a5      	adds	r5, r4, r2
 800b19e:	aa22      	add	r2, sp, #136	; 0x88
 800b1a0:	f104 0801 	add.w	r8, r4, #1
 800b1a4:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 800b1a8:	9304      	str	r3, [sp, #16]
 800b1aa:	9b04      	ldr	r3, [sp, #16]
 800b1ac:	4543      	cmp	r3, r8
 800b1ae:	da04      	bge.n	800b1ba <__kernel_rem_pio2+0x3aa>
 800b1b0:	461c      	mov	r4, r3
 800b1b2:	e6a3      	b.n	800aefc <__kernel_rem_pio2+0xec>
 800b1b4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b1b6:	2301      	movs	r3, #1
 800b1b8:	e7e4      	b.n	800b184 <__kernel_rem_pio2+0x374>
 800b1ba:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b1bc:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800b1c0:	f7f5 f9c8 	bl	8000554 <__aeabi_i2d>
 800b1c4:	e8e5 0102 	strd	r0, r1, [r5], #8
 800b1c8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b1ca:	46ab      	mov	fp, r5
 800b1cc:	461c      	mov	r4, r3
 800b1ce:	f04f 0900 	mov.w	r9, #0
 800b1d2:	2600      	movs	r6, #0
 800b1d4:	2700      	movs	r7, #0
 800b1d6:	9b06      	ldr	r3, [sp, #24]
 800b1d8:	4599      	cmp	r9, r3
 800b1da:	dd06      	ble.n	800b1ea <__kernel_rem_pio2+0x3da>
 800b1dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b1de:	e8e3 6702 	strd	r6, r7, [r3], #8
 800b1e2:	f108 0801 	add.w	r8, r8, #1
 800b1e6:	930a      	str	r3, [sp, #40]	; 0x28
 800b1e8:	e7df      	b.n	800b1aa <__kernel_rem_pio2+0x39a>
 800b1ea:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800b1ee:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800b1f2:	f7f5 fa19 	bl	8000628 <__aeabi_dmul>
 800b1f6:	4602      	mov	r2, r0
 800b1f8:	460b      	mov	r3, r1
 800b1fa:	4630      	mov	r0, r6
 800b1fc:	4639      	mov	r1, r7
 800b1fe:	f7f5 f85d 	bl	80002bc <__adddf3>
 800b202:	f109 0901 	add.w	r9, r9, #1
 800b206:	4606      	mov	r6, r0
 800b208:	460f      	mov	r7, r1
 800b20a:	e7e4      	b.n	800b1d6 <__kernel_rem_pio2+0x3c6>
 800b20c:	3d01      	subs	r5, #1
 800b20e:	e748      	b.n	800b0a2 <__kernel_rem_pio2+0x292>
 800b210:	ec47 6b10 	vmov	d0, r6, r7
 800b214:	f1ca 0000 	rsb	r0, sl, #0
 800b218:	f000 fc36 	bl	800ba88 <scalbn>
 800b21c:	ec57 6b10 	vmov	r6, r7, d0
 800b220:	4ba0      	ldr	r3, [pc, #640]	; (800b4a4 <__kernel_rem_pio2+0x694>)
 800b222:	ee10 0a10 	vmov	r0, s0
 800b226:	2200      	movs	r2, #0
 800b228:	4639      	mov	r1, r7
 800b22a:	f7f5 fc83 	bl	8000b34 <__aeabi_dcmpge>
 800b22e:	b1f8      	cbz	r0, 800b270 <__kernel_rem_pio2+0x460>
 800b230:	4b9d      	ldr	r3, [pc, #628]	; (800b4a8 <__kernel_rem_pio2+0x698>)
 800b232:	2200      	movs	r2, #0
 800b234:	4630      	mov	r0, r6
 800b236:	4639      	mov	r1, r7
 800b238:	f7f5 f9f6 	bl	8000628 <__aeabi_dmul>
 800b23c:	f7f5 fca4 	bl	8000b88 <__aeabi_d2iz>
 800b240:	4680      	mov	r8, r0
 800b242:	f7f5 f987 	bl	8000554 <__aeabi_i2d>
 800b246:	4b97      	ldr	r3, [pc, #604]	; (800b4a4 <__kernel_rem_pio2+0x694>)
 800b248:	2200      	movs	r2, #0
 800b24a:	f7f5 f9ed 	bl	8000628 <__aeabi_dmul>
 800b24e:	460b      	mov	r3, r1
 800b250:	4602      	mov	r2, r0
 800b252:	4639      	mov	r1, r7
 800b254:	4630      	mov	r0, r6
 800b256:	f7f5 f82f 	bl	80002b8 <__aeabi_dsub>
 800b25a:	f7f5 fc95 	bl	8000b88 <__aeabi_d2iz>
 800b25e:	1c65      	adds	r5, r4, #1
 800b260:	ab0e      	add	r3, sp, #56	; 0x38
 800b262:	f10a 0a18 	add.w	sl, sl, #24
 800b266:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800b26a:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 800b26e:	e720      	b.n	800b0b2 <__kernel_rem_pio2+0x2a2>
 800b270:	4630      	mov	r0, r6
 800b272:	4639      	mov	r1, r7
 800b274:	f7f5 fc88 	bl	8000b88 <__aeabi_d2iz>
 800b278:	ab0e      	add	r3, sp, #56	; 0x38
 800b27a:	4625      	mov	r5, r4
 800b27c:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800b280:	e717      	b.n	800b0b2 <__kernel_rem_pio2+0x2a2>
 800b282:	ab0e      	add	r3, sp, #56	; 0x38
 800b284:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 800b288:	f7f5 f964 	bl	8000554 <__aeabi_i2d>
 800b28c:	4632      	mov	r2, r6
 800b28e:	463b      	mov	r3, r7
 800b290:	f7f5 f9ca 	bl	8000628 <__aeabi_dmul>
 800b294:	4b84      	ldr	r3, [pc, #528]	; (800b4a8 <__kernel_rem_pio2+0x698>)
 800b296:	e968 0102 	strd	r0, r1, [r8, #-8]!
 800b29a:	2200      	movs	r2, #0
 800b29c:	4630      	mov	r0, r6
 800b29e:	4639      	mov	r1, r7
 800b2a0:	f7f5 f9c2 	bl	8000628 <__aeabi_dmul>
 800b2a4:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b2a8:	4606      	mov	r6, r0
 800b2aa:	460f      	mov	r7, r1
 800b2ac:	e70f      	b.n	800b0ce <__kernel_rem_pio2+0x2be>
 800b2ae:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 800b2b2:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 800b2b6:	f7f5 f9b7 	bl	8000628 <__aeabi_dmul>
 800b2ba:	4602      	mov	r2, r0
 800b2bc:	460b      	mov	r3, r1
 800b2be:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b2c2:	f7f4 fffb 	bl	80002bc <__adddf3>
 800b2c6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800b2ca:	f108 0801 	add.w	r8, r8, #1
 800b2ce:	9b02      	ldr	r3, [sp, #8]
 800b2d0:	4598      	cmp	r8, r3
 800b2d2:	dc01      	bgt.n	800b2d8 <__kernel_rem_pio2+0x4c8>
 800b2d4:	45b8      	cmp	r8, r7
 800b2d6:	ddea      	ble.n	800b2ae <__kernel_rem_pio2+0x49e>
 800b2d8:	ed9d 7b06 	vldr	d7, [sp, #24]
 800b2dc:	ab4a      	add	r3, sp, #296	; 0x128
 800b2de:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800b2e2:	ed87 7b00 	vstr	d7, [r7]
 800b2e6:	3e01      	subs	r6, #1
 800b2e8:	e6f8      	b.n	800b0dc <__kernel_rem_pio2+0x2cc>
 800b2ea:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800b2ec:	2b02      	cmp	r3, #2
 800b2ee:	dc0b      	bgt.n	800b308 <__kernel_rem_pio2+0x4f8>
 800b2f0:	2b00      	cmp	r3, #0
 800b2f2:	dc35      	bgt.n	800b360 <__kernel_rem_pio2+0x550>
 800b2f4:	d059      	beq.n	800b3aa <__kernel_rem_pio2+0x59a>
 800b2f6:	9b04      	ldr	r3, [sp, #16]
 800b2f8:	f003 0007 	and.w	r0, r3, #7
 800b2fc:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 800b300:	ecbd 8b02 	vpop	{d8}
 800b304:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b308:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800b30a:	2b03      	cmp	r3, #3
 800b30c:	d1f3      	bne.n	800b2f6 <__kernel_rem_pio2+0x4e6>
 800b30e:	ab4a      	add	r3, sp, #296	; 0x128
 800b310:	4423      	add	r3, r4
 800b312:	9306      	str	r3, [sp, #24]
 800b314:	461c      	mov	r4, r3
 800b316:	469a      	mov	sl, r3
 800b318:	9502      	str	r5, [sp, #8]
 800b31a:	9b02      	ldr	r3, [sp, #8]
 800b31c:	2b00      	cmp	r3, #0
 800b31e:	f1aa 0a08 	sub.w	sl, sl, #8
 800b322:	dc6b      	bgt.n	800b3fc <__kernel_rem_pio2+0x5ec>
 800b324:	46aa      	mov	sl, r5
 800b326:	f1ba 0f01 	cmp.w	sl, #1
 800b32a:	f1a4 0408 	sub.w	r4, r4, #8
 800b32e:	f300 8085 	bgt.w	800b43c <__kernel_rem_pio2+0x62c>
 800b332:	9c06      	ldr	r4, [sp, #24]
 800b334:	2000      	movs	r0, #0
 800b336:	3408      	adds	r4, #8
 800b338:	2100      	movs	r1, #0
 800b33a:	2d01      	cmp	r5, #1
 800b33c:	f300 809d 	bgt.w	800b47a <__kernel_rem_pio2+0x66a>
 800b340:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 800b344:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 800b348:	f1bb 0f00 	cmp.w	fp, #0
 800b34c:	f040 809b 	bne.w	800b486 <__kernel_rem_pio2+0x676>
 800b350:	9b01      	ldr	r3, [sp, #4]
 800b352:	e9c3 5600 	strd	r5, r6, [r3]
 800b356:	e9c3 7802 	strd	r7, r8, [r3, #8]
 800b35a:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800b35e:	e7ca      	b.n	800b2f6 <__kernel_rem_pio2+0x4e6>
 800b360:	3408      	adds	r4, #8
 800b362:	ab4a      	add	r3, sp, #296	; 0x128
 800b364:	441c      	add	r4, r3
 800b366:	462e      	mov	r6, r5
 800b368:	2000      	movs	r0, #0
 800b36a:	2100      	movs	r1, #0
 800b36c:	2e00      	cmp	r6, #0
 800b36e:	da36      	bge.n	800b3de <__kernel_rem_pio2+0x5ce>
 800b370:	f1bb 0f00 	cmp.w	fp, #0
 800b374:	d039      	beq.n	800b3ea <__kernel_rem_pio2+0x5da>
 800b376:	4602      	mov	r2, r0
 800b378:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b37c:	9c01      	ldr	r4, [sp, #4]
 800b37e:	e9c4 2300 	strd	r2, r3, [r4]
 800b382:	4602      	mov	r2, r0
 800b384:	460b      	mov	r3, r1
 800b386:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 800b38a:	f7f4 ff95 	bl	80002b8 <__aeabi_dsub>
 800b38e:	ae4c      	add	r6, sp, #304	; 0x130
 800b390:	2401      	movs	r4, #1
 800b392:	42a5      	cmp	r5, r4
 800b394:	da2c      	bge.n	800b3f0 <__kernel_rem_pio2+0x5e0>
 800b396:	f1bb 0f00 	cmp.w	fp, #0
 800b39a:	d002      	beq.n	800b3a2 <__kernel_rem_pio2+0x592>
 800b39c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b3a0:	4619      	mov	r1, r3
 800b3a2:	9b01      	ldr	r3, [sp, #4]
 800b3a4:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800b3a8:	e7a5      	b.n	800b2f6 <__kernel_rem_pio2+0x4e6>
 800b3aa:	f504 731a 	add.w	r3, r4, #616	; 0x268
 800b3ae:	eb0d 0403 	add.w	r4, sp, r3
 800b3b2:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 800b3b6:	2000      	movs	r0, #0
 800b3b8:	2100      	movs	r1, #0
 800b3ba:	2d00      	cmp	r5, #0
 800b3bc:	da09      	bge.n	800b3d2 <__kernel_rem_pio2+0x5c2>
 800b3be:	f1bb 0f00 	cmp.w	fp, #0
 800b3c2:	d002      	beq.n	800b3ca <__kernel_rem_pio2+0x5ba>
 800b3c4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b3c8:	4619      	mov	r1, r3
 800b3ca:	9b01      	ldr	r3, [sp, #4]
 800b3cc:	e9c3 0100 	strd	r0, r1, [r3]
 800b3d0:	e791      	b.n	800b2f6 <__kernel_rem_pio2+0x4e6>
 800b3d2:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800b3d6:	f7f4 ff71 	bl	80002bc <__adddf3>
 800b3da:	3d01      	subs	r5, #1
 800b3dc:	e7ed      	b.n	800b3ba <__kernel_rem_pio2+0x5aa>
 800b3de:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800b3e2:	f7f4 ff6b 	bl	80002bc <__adddf3>
 800b3e6:	3e01      	subs	r6, #1
 800b3e8:	e7c0      	b.n	800b36c <__kernel_rem_pio2+0x55c>
 800b3ea:	4602      	mov	r2, r0
 800b3ec:	460b      	mov	r3, r1
 800b3ee:	e7c5      	b.n	800b37c <__kernel_rem_pio2+0x56c>
 800b3f0:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800b3f4:	f7f4 ff62 	bl	80002bc <__adddf3>
 800b3f8:	3401      	adds	r4, #1
 800b3fa:	e7ca      	b.n	800b392 <__kernel_rem_pio2+0x582>
 800b3fc:	e9da 8900 	ldrd	r8, r9, [sl]
 800b400:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 800b404:	9b02      	ldr	r3, [sp, #8]
 800b406:	3b01      	subs	r3, #1
 800b408:	9302      	str	r3, [sp, #8]
 800b40a:	4632      	mov	r2, r6
 800b40c:	463b      	mov	r3, r7
 800b40e:	4640      	mov	r0, r8
 800b410:	4649      	mov	r1, r9
 800b412:	f7f4 ff53 	bl	80002bc <__adddf3>
 800b416:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800b41a:	4602      	mov	r2, r0
 800b41c:	460b      	mov	r3, r1
 800b41e:	4640      	mov	r0, r8
 800b420:	4649      	mov	r1, r9
 800b422:	f7f4 ff49 	bl	80002b8 <__aeabi_dsub>
 800b426:	4632      	mov	r2, r6
 800b428:	463b      	mov	r3, r7
 800b42a:	f7f4 ff47 	bl	80002bc <__adddf3>
 800b42e:	ed9d 7b08 	vldr	d7, [sp, #32]
 800b432:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800b436:	ed8a 7b00 	vstr	d7, [sl]
 800b43a:	e76e      	b.n	800b31a <__kernel_rem_pio2+0x50a>
 800b43c:	e9d4 8900 	ldrd	r8, r9, [r4]
 800b440:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 800b444:	4640      	mov	r0, r8
 800b446:	4632      	mov	r2, r6
 800b448:	463b      	mov	r3, r7
 800b44a:	4649      	mov	r1, r9
 800b44c:	f7f4 ff36 	bl	80002bc <__adddf3>
 800b450:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b454:	4602      	mov	r2, r0
 800b456:	460b      	mov	r3, r1
 800b458:	4640      	mov	r0, r8
 800b45a:	4649      	mov	r1, r9
 800b45c:	f7f4 ff2c 	bl	80002b8 <__aeabi_dsub>
 800b460:	4632      	mov	r2, r6
 800b462:	463b      	mov	r3, r7
 800b464:	f7f4 ff2a 	bl	80002bc <__adddf3>
 800b468:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b46c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800b470:	ed84 7b00 	vstr	d7, [r4]
 800b474:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b478:	e755      	b.n	800b326 <__kernel_rem_pio2+0x516>
 800b47a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800b47e:	f7f4 ff1d 	bl	80002bc <__adddf3>
 800b482:	3d01      	subs	r5, #1
 800b484:	e759      	b.n	800b33a <__kernel_rem_pio2+0x52a>
 800b486:	9b01      	ldr	r3, [sp, #4]
 800b488:	9a01      	ldr	r2, [sp, #4]
 800b48a:	601d      	str	r5, [r3, #0]
 800b48c:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 800b490:	605c      	str	r4, [r3, #4]
 800b492:	609f      	str	r7, [r3, #8]
 800b494:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 800b498:	60d3      	str	r3, [r2, #12]
 800b49a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b49e:	6110      	str	r0, [r2, #16]
 800b4a0:	6153      	str	r3, [r2, #20]
 800b4a2:	e728      	b.n	800b2f6 <__kernel_rem_pio2+0x4e6>
 800b4a4:	41700000 	.word	0x41700000
 800b4a8:	3e700000 	.word	0x3e700000
 800b4ac:	00000000 	.word	0x00000000

0800b4b0 <__kernel_sin>:
 800b4b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b4b4:	ed2d 8b04 	vpush	{d8-d9}
 800b4b8:	eeb0 8a41 	vmov.f32	s16, s2
 800b4bc:	eef0 8a61 	vmov.f32	s17, s3
 800b4c0:	ec55 4b10 	vmov	r4, r5, d0
 800b4c4:	b083      	sub	sp, #12
 800b4c6:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800b4ca:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800b4ce:	9001      	str	r0, [sp, #4]
 800b4d0:	da06      	bge.n	800b4e0 <__kernel_sin+0x30>
 800b4d2:	ee10 0a10 	vmov	r0, s0
 800b4d6:	4629      	mov	r1, r5
 800b4d8:	f7f5 fb56 	bl	8000b88 <__aeabi_d2iz>
 800b4dc:	2800      	cmp	r0, #0
 800b4de:	d051      	beq.n	800b584 <__kernel_sin+0xd4>
 800b4e0:	4622      	mov	r2, r4
 800b4e2:	462b      	mov	r3, r5
 800b4e4:	4620      	mov	r0, r4
 800b4e6:	4629      	mov	r1, r5
 800b4e8:	f7f5 f89e 	bl	8000628 <__aeabi_dmul>
 800b4ec:	4682      	mov	sl, r0
 800b4ee:	468b      	mov	fp, r1
 800b4f0:	4602      	mov	r2, r0
 800b4f2:	460b      	mov	r3, r1
 800b4f4:	4620      	mov	r0, r4
 800b4f6:	4629      	mov	r1, r5
 800b4f8:	f7f5 f896 	bl	8000628 <__aeabi_dmul>
 800b4fc:	a341      	add	r3, pc, #260	; (adr r3, 800b604 <__kernel_sin+0x154>)
 800b4fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b502:	4680      	mov	r8, r0
 800b504:	4689      	mov	r9, r1
 800b506:	4650      	mov	r0, sl
 800b508:	4659      	mov	r1, fp
 800b50a:	f7f5 f88d 	bl	8000628 <__aeabi_dmul>
 800b50e:	a33f      	add	r3, pc, #252	; (adr r3, 800b60c <__kernel_sin+0x15c>)
 800b510:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b514:	f7f4 fed0 	bl	80002b8 <__aeabi_dsub>
 800b518:	4652      	mov	r2, sl
 800b51a:	465b      	mov	r3, fp
 800b51c:	f7f5 f884 	bl	8000628 <__aeabi_dmul>
 800b520:	a33c      	add	r3, pc, #240	; (adr r3, 800b614 <__kernel_sin+0x164>)
 800b522:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b526:	f7f4 fec9 	bl	80002bc <__adddf3>
 800b52a:	4652      	mov	r2, sl
 800b52c:	465b      	mov	r3, fp
 800b52e:	f7f5 f87b 	bl	8000628 <__aeabi_dmul>
 800b532:	a33a      	add	r3, pc, #232	; (adr r3, 800b61c <__kernel_sin+0x16c>)
 800b534:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b538:	f7f4 febe 	bl	80002b8 <__aeabi_dsub>
 800b53c:	4652      	mov	r2, sl
 800b53e:	465b      	mov	r3, fp
 800b540:	f7f5 f872 	bl	8000628 <__aeabi_dmul>
 800b544:	a337      	add	r3, pc, #220	; (adr r3, 800b624 <__kernel_sin+0x174>)
 800b546:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b54a:	f7f4 feb7 	bl	80002bc <__adddf3>
 800b54e:	9b01      	ldr	r3, [sp, #4]
 800b550:	4606      	mov	r6, r0
 800b552:	460f      	mov	r7, r1
 800b554:	b9eb      	cbnz	r3, 800b592 <__kernel_sin+0xe2>
 800b556:	4602      	mov	r2, r0
 800b558:	460b      	mov	r3, r1
 800b55a:	4650      	mov	r0, sl
 800b55c:	4659      	mov	r1, fp
 800b55e:	f7f5 f863 	bl	8000628 <__aeabi_dmul>
 800b562:	a325      	add	r3, pc, #148	; (adr r3, 800b5f8 <__kernel_sin+0x148>)
 800b564:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b568:	f7f4 fea6 	bl	80002b8 <__aeabi_dsub>
 800b56c:	4642      	mov	r2, r8
 800b56e:	464b      	mov	r3, r9
 800b570:	f7f5 f85a 	bl	8000628 <__aeabi_dmul>
 800b574:	4602      	mov	r2, r0
 800b576:	460b      	mov	r3, r1
 800b578:	4620      	mov	r0, r4
 800b57a:	4629      	mov	r1, r5
 800b57c:	f7f4 fe9e 	bl	80002bc <__adddf3>
 800b580:	4604      	mov	r4, r0
 800b582:	460d      	mov	r5, r1
 800b584:	ec45 4b10 	vmov	d0, r4, r5
 800b588:	b003      	add	sp, #12
 800b58a:	ecbd 8b04 	vpop	{d8-d9}
 800b58e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b592:	4b1b      	ldr	r3, [pc, #108]	; (800b600 <__kernel_sin+0x150>)
 800b594:	ec51 0b18 	vmov	r0, r1, d8
 800b598:	2200      	movs	r2, #0
 800b59a:	f7f5 f845 	bl	8000628 <__aeabi_dmul>
 800b59e:	4632      	mov	r2, r6
 800b5a0:	ec41 0b19 	vmov	d9, r0, r1
 800b5a4:	463b      	mov	r3, r7
 800b5a6:	4640      	mov	r0, r8
 800b5a8:	4649      	mov	r1, r9
 800b5aa:	f7f5 f83d 	bl	8000628 <__aeabi_dmul>
 800b5ae:	4602      	mov	r2, r0
 800b5b0:	460b      	mov	r3, r1
 800b5b2:	ec51 0b19 	vmov	r0, r1, d9
 800b5b6:	f7f4 fe7f 	bl	80002b8 <__aeabi_dsub>
 800b5ba:	4652      	mov	r2, sl
 800b5bc:	465b      	mov	r3, fp
 800b5be:	f7f5 f833 	bl	8000628 <__aeabi_dmul>
 800b5c2:	ec53 2b18 	vmov	r2, r3, d8
 800b5c6:	f7f4 fe77 	bl	80002b8 <__aeabi_dsub>
 800b5ca:	a30b      	add	r3, pc, #44	; (adr r3, 800b5f8 <__kernel_sin+0x148>)
 800b5cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5d0:	4606      	mov	r6, r0
 800b5d2:	460f      	mov	r7, r1
 800b5d4:	4640      	mov	r0, r8
 800b5d6:	4649      	mov	r1, r9
 800b5d8:	f7f5 f826 	bl	8000628 <__aeabi_dmul>
 800b5dc:	4602      	mov	r2, r0
 800b5de:	460b      	mov	r3, r1
 800b5e0:	4630      	mov	r0, r6
 800b5e2:	4639      	mov	r1, r7
 800b5e4:	f7f4 fe6a 	bl	80002bc <__adddf3>
 800b5e8:	4602      	mov	r2, r0
 800b5ea:	460b      	mov	r3, r1
 800b5ec:	4620      	mov	r0, r4
 800b5ee:	4629      	mov	r1, r5
 800b5f0:	f7f4 fe62 	bl	80002b8 <__aeabi_dsub>
 800b5f4:	e7c4      	b.n	800b580 <__kernel_sin+0xd0>
 800b5f6:	bf00      	nop
 800b5f8:	55555549 	.word	0x55555549
 800b5fc:	3fc55555 	.word	0x3fc55555
 800b600:	3fe00000 	.word	0x3fe00000
 800b604:	5acfd57c 	.word	0x5acfd57c
 800b608:	3de5d93a 	.word	0x3de5d93a
 800b60c:	8a2b9ceb 	.word	0x8a2b9ceb
 800b610:	3e5ae5e6 	.word	0x3e5ae5e6
 800b614:	57b1fe7d 	.word	0x57b1fe7d
 800b618:	3ec71de3 	.word	0x3ec71de3
 800b61c:	19c161d5 	.word	0x19c161d5
 800b620:	3f2a01a0 	.word	0x3f2a01a0
 800b624:	1110f8a6 	.word	0x1110f8a6
 800b628:	3f811111 	.word	0x3f811111
 800b62c:	00000000 	.word	0x00000000

0800b630 <atan>:
 800b630:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b634:	ec55 4b10 	vmov	r4, r5, d0
 800b638:	4bc3      	ldr	r3, [pc, #780]	; (800b948 <atan+0x318>)
 800b63a:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800b63e:	429e      	cmp	r6, r3
 800b640:	46ab      	mov	fp, r5
 800b642:	dd18      	ble.n	800b676 <atan+0x46>
 800b644:	4bc1      	ldr	r3, [pc, #772]	; (800b94c <atan+0x31c>)
 800b646:	429e      	cmp	r6, r3
 800b648:	dc01      	bgt.n	800b64e <atan+0x1e>
 800b64a:	d109      	bne.n	800b660 <atan+0x30>
 800b64c:	b144      	cbz	r4, 800b660 <atan+0x30>
 800b64e:	4622      	mov	r2, r4
 800b650:	462b      	mov	r3, r5
 800b652:	4620      	mov	r0, r4
 800b654:	4629      	mov	r1, r5
 800b656:	f7f4 fe31 	bl	80002bc <__adddf3>
 800b65a:	4604      	mov	r4, r0
 800b65c:	460d      	mov	r5, r1
 800b65e:	e006      	b.n	800b66e <atan+0x3e>
 800b660:	f1bb 0f00 	cmp.w	fp, #0
 800b664:	f300 8131 	bgt.w	800b8ca <atan+0x29a>
 800b668:	a59b      	add	r5, pc, #620	; (adr r5, 800b8d8 <atan+0x2a8>)
 800b66a:	e9d5 4500 	ldrd	r4, r5, [r5]
 800b66e:	ec45 4b10 	vmov	d0, r4, r5
 800b672:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b676:	4bb6      	ldr	r3, [pc, #728]	; (800b950 <atan+0x320>)
 800b678:	429e      	cmp	r6, r3
 800b67a:	dc14      	bgt.n	800b6a6 <atan+0x76>
 800b67c:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800b680:	429e      	cmp	r6, r3
 800b682:	dc0d      	bgt.n	800b6a0 <atan+0x70>
 800b684:	a396      	add	r3, pc, #600	; (adr r3, 800b8e0 <atan+0x2b0>)
 800b686:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b68a:	ee10 0a10 	vmov	r0, s0
 800b68e:	4629      	mov	r1, r5
 800b690:	f7f4 fe14 	bl	80002bc <__adddf3>
 800b694:	4baf      	ldr	r3, [pc, #700]	; (800b954 <atan+0x324>)
 800b696:	2200      	movs	r2, #0
 800b698:	f7f5 fa56 	bl	8000b48 <__aeabi_dcmpgt>
 800b69c:	2800      	cmp	r0, #0
 800b69e:	d1e6      	bne.n	800b66e <atan+0x3e>
 800b6a0:	f04f 3aff 	mov.w	sl, #4294967295
 800b6a4:	e02b      	b.n	800b6fe <atan+0xce>
 800b6a6:	f000 f963 	bl	800b970 <fabs>
 800b6aa:	4bab      	ldr	r3, [pc, #684]	; (800b958 <atan+0x328>)
 800b6ac:	429e      	cmp	r6, r3
 800b6ae:	ec55 4b10 	vmov	r4, r5, d0
 800b6b2:	f300 80bf 	bgt.w	800b834 <atan+0x204>
 800b6b6:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800b6ba:	429e      	cmp	r6, r3
 800b6bc:	f300 80a0 	bgt.w	800b800 <atan+0x1d0>
 800b6c0:	ee10 2a10 	vmov	r2, s0
 800b6c4:	ee10 0a10 	vmov	r0, s0
 800b6c8:	462b      	mov	r3, r5
 800b6ca:	4629      	mov	r1, r5
 800b6cc:	f7f4 fdf6 	bl	80002bc <__adddf3>
 800b6d0:	4ba0      	ldr	r3, [pc, #640]	; (800b954 <atan+0x324>)
 800b6d2:	2200      	movs	r2, #0
 800b6d4:	f7f4 fdf0 	bl	80002b8 <__aeabi_dsub>
 800b6d8:	2200      	movs	r2, #0
 800b6da:	4606      	mov	r6, r0
 800b6dc:	460f      	mov	r7, r1
 800b6de:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b6e2:	4620      	mov	r0, r4
 800b6e4:	4629      	mov	r1, r5
 800b6e6:	f7f4 fde9 	bl	80002bc <__adddf3>
 800b6ea:	4602      	mov	r2, r0
 800b6ec:	460b      	mov	r3, r1
 800b6ee:	4630      	mov	r0, r6
 800b6f0:	4639      	mov	r1, r7
 800b6f2:	f7f5 f8c3 	bl	800087c <__aeabi_ddiv>
 800b6f6:	f04f 0a00 	mov.w	sl, #0
 800b6fa:	4604      	mov	r4, r0
 800b6fc:	460d      	mov	r5, r1
 800b6fe:	4622      	mov	r2, r4
 800b700:	462b      	mov	r3, r5
 800b702:	4620      	mov	r0, r4
 800b704:	4629      	mov	r1, r5
 800b706:	f7f4 ff8f 	bl	8000628 <__aeabi_dmul>
 800b70a:	4602      	mov	r2, r0
 800b70c:	460b      	mov	r3, r1
 800b70e:	4680      	mov	r8, r0
 800b710:	4689      	mov	r9, r1
 800b712:	f7f4 ff89 	bl	8000628 <__aeabi_dmul>
 800b716:	a374      	add	r3, pc, #464	; (adr r3, 800b8e8 <atan+0x2b8>)
 800b718:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b71c:	4606      	mov	r6, r0
 800b71e:	460f      	mov	r7, r1
 800b720:	f7f4 ff82 	bl	8000628 <__aeabi_dmul>
 800b724:	a372      	add	r3, pc, #456	; (adr r3, 800b8f0 <atan+0x2c0>)
 800b726:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b72a:	f7f4 fdc7 	bl	80002bc <__adddf3>
 800b72e:	4632      	mov	r2, r6
 800b730:	463b      	mov	r3, r7
 800b732:	f7f4 ff79 	bl	8000628 <__aeabi_dmul>
 800b736:	a370      	add	r3, pc, #448	; (adr r3, 800b8f8 <atan+0x2c8>)
 800b738:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b73c:	f7f4 fdbe 	bl	80002bc <__adddf3>
 800b740:	4632      	mov	r2, r6
 800b742:	463b      	mov	r3, r7
 800b744:	f7f4 ff70 	bl	8000628 <__aeabi_dmul>
 800b748:	a36d      	add	r3, pc, #436	; (adr r3, 800b900 <atan+0x2d0>)
 800b74a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b74e:	f7f4 fdb5 	bl	80002bc <__adddf3>
 800b752:	4632      	mov	r2, r6
 800b754:	463b      	mov	r3, r7
 800b756:	f7f4 ff67 	bl	8000628 <__aeabi_dmul>
 800b75a:	a36b      	add	r3, pc, #428	; (adr r3, 800b908 <atan+0x2d8>)
 800b75c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b760:	f7f4 fdac 	bl	80002bc <__adddf3>
 800b764:	4632      	mov	r2, r6
 800b766:	463b      	mov	r3, r7
 800b768:	f7f4 ff5e 	bl	8000628 <__aeabi_dmul>
 800b76c:	a368      	add	r3, pc, #416	; (adr r3, 800b910 <atan+0x2e0>)
 800b76e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b772:	f7f4 fda3 	bl	80002bc <__adddf3>
 800b776:	4642      	mov	r2, r8
 800b778:	464b      	mov	r3, r9
 800b77a:	f7f4 ff55 	bl	8000628 <__aeabi_dmul>
 800b77e:	a366      	add	r3, pc, #408	; (adr r3, 800b918 <atan+0x2e8>)
 800b780:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b784:	4680      	mov	r8, r0
 800b786:	4689      	mov	r9, r1
 800b788:	4630      	mov	r0, r6
 800b78a:	4639      	mov	r1, r7
 800b78c:	f7f4 ff4c 	bl	8000628 <__aeabi_dmul>
 800b790:	a363      	add	r3, pc, #396	; (adr r3, 800b920 <atan+0x2f0>)
 800b792:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b796:	f7f4 fd8f 	bl	80002b8 <__aeabi_dsub>
 800b79a:	4632      	mov	r2, r6
 800b79c:	463b      	mov	r3, r7
 800b79e:	f7f4 ff43 	bl	8000628 <__aeabi_dmul>
 800b7a2:	a361      	add	r3, pc, #388	; (adr r3, 800b928 <atan+0x2f8>)
 800b7a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7a8:	f7f4 fd86 	bl	80002b8 <__aeabi_dsub>
 800b7ac:	4632      	mov	r2, r6
 800b7ae:	463b      	mov	r3, r7
 800b7b0:	f7f4 ff3a 	bl	8000628 <__aeabi_dmul>
 800b7b4:	a35e      	add	r3, pc, #376	; (adr r3, 800b930 <atan+0x300>)
 800b7b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7ba:	f7f4 fd7d 	bl	80002b8 <__aeabi_dsub>
 800b7be:	4632      	mov	r2, r6
 800b7c0:	463b      	mov	r3, r7
 800b7c2:	f7f4 ff31 	bl	8000628 <__aeabi_dmul>
 800b7c6:	a35c      	add	r3, pc, #368	; (adr r3, 800b938 <atan+0x308>)
 800b7c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7cc:	f7f4 fd74 	bl	80002b8 <__aeabi_dsub>
 800b7d0:	4632      	mov	r2, r6
 800b7d2:	463b      	mov	r3, r7
 800b7d4:	f7f4 ff28 	bl	8000628 <__aeabi_dmul>
 800b7d8:	4602      	mov	r2, r0
 800b7da:	460b      	mov	r3, r1
 800b7dc:	4640      	mov	r0, r8
 800b7de:	4649      	mov	r1, r9
 800b7e0:	f7f4 fd6c 	bl	80002bc <__adddf3>
 800b7e4:	4622      	mov	r2, r4
 800b7e6:	462b      	mov	r3, r5
 800b7e8:	f7f4 ff1e 	bl	8000628 <__aeabi_dmul>
 800b7ec:	f1ba 3fff 	cmp.w	sl, #4294967295
 800b7f0:	4602      	mov	r2, r0
 800b7f2:	460b      	mov	r3, r1
 800b7f4:	d14b      	bne.n	800b88e <atan+0x25e>
 800b7f6:	4620      	mov	r0, r4
 800b7f8:	4629      	mov	r1, r5
 800b7fa:	f7f4 fd5d 	bl	80002b8 <__aeabi_dsub>
 800b7fe:	e72c      	b.n	800b65a <atan+0x2a>
 800b800:	ee10 0a10 	vmov	r0, s0
 800b804:	4b53      	ldr	r3, [pc, #332]	; (800b954 <atan+0x324>)
 800b806:	2200      	movs	r2, #0
 800b808:	4629      	mov	r1, r5
 800b80a:	f7f4 fd55 	bl	80002b8 <__aeabi_dsub>
 800b80e:	4b51      	ldr	r3, [pc, #324]	; (800b954 <atan+0x324>)
 800b810:	4606      	mov	r6, r0
 800b812:	460f      	mov	r7, r1
 800b814:	2200      	movs	r2, #0
 800b816:	4620      	mov	r0, r4
 800b818:	4629      	mov	r1, r5
 800b81a:	f7f4 fd4f 	bl	80002bc <__adddf3>
 800b81e:	4602      	mov	r2, r0
 800b820:	460b      	mov	r3, r1
 800b822:	4630      	mov	r0, r6
 800b824:	4639      	mov	r1, r7
 800b826:	f7f5 f829 	bl	800087c <__aeabi_ddiv>
 800b82a:	f04f 0a01 	mov.w	sl, #1
 800b82e:	4604      	mov	r4, r0
 800b830:	460d      	mov	r5, r1
 800b832:	e764      	b.n	800b6fe <atan+0xce>
 800b834:	4b49      	ldr	r3, [pc, #292]	; (800b95c <atan+0x32c>)
 800b836:	429e      	cmp	r6, r3
 800b838:	da1d      	bge.n	800b876 <atan+0x246>
 800b83a:	ee10 0a10 	vmov	r0, s0
 800b83e:	4b48      	ldr	r3, [pc, #288]	; (800b960 <atan+0x330>)
 800b840:	2200      	movs	r2, #0
 800b842:	4629      	mov	r1, r5
 800b844:	f7f4 fd38 	bl	80002b8 <__aeabi_dsub>
 800b848:	4b45      	ldr	r3, [pc, #276]	; (800b960 <atan+0x330>)
 800b84a:	4606      	mov	r6, r0
 800b84c:	460f      	mov	r7, r1
 800b84e:	2200      	movs	r2, #0
 800b850:	4620      	mov	r0, r4
 800b852:	4629      	mov	r1, r5
 800b854:	f7f4 fee8 	bl	8000628 <__aeabi_dmul>
 800b858:	4b3e      	ldr	r3, [pc, #248]	; (800b954 <atan+0x324>)
 800b85a:	2200      	movs	r2, #0
 800b85c:	f7f4 fd2e 	bl	80002bc <__adddf3>
 800b860:	4602      	mov	r2, r0
 800b862:	460b      	mov	r3, r1
 800b864:	4630      	mov	r0, r6
 800b866:	4639      	mov	r1, r7
 800b868:	f7f5 f808 	bl	800087c <__aeabi_ddiv>
 800b86c:	f04f 0a02 	mov.w	sl, #2
 800b870:	4604      	mov	r4, r0
 800b872:	460d      	mov	r5, r1
 800b874:	e743      	b.n	800b6fe <atan+0xce>
 800b876:	462b      	mov	r3, r5
 800b878:	ee10 2a10 	vmov	r2, s0
 800b87c:	4939      	ldr	r1, [pc, #228]	; (800b964 <atan+0x334>)
 800b87e:	2000      	movs	r0, #0
 800b880:	f7f4 fffc 	bl	800087c <__aeabi_ddiv>
 800b884:	f04f 0a03 	mov.w	sl, #3
 800b888:	4604      	mov	r4, r0
 800b88a:	460d      	mov	r5, r1
 800b88c:	e737      	b.n	800b6fe <atan+0xce>
 800b88e:	4b36      	ldr	r3, [pc, #216]	; (800b968 <atan+0x338>)
 800b890:	4e36      	ldr	r6, [pc, #216]	; (800b96c <atan+0x33c>)
 800b892:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800b896:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 800b89a:	e9da 2300 	ldrd	r2, r3, [sl]
 800b89e:	f7f4 fd0b 	bl	80002b8 <__aeabi_dsub>
 800b8a2:	4622      	mov	r2, r4
 800b8a4:	462b      	mov	r3, r5
 800b8a6:	f7f4 fd07 	bl	80002b8 <__aeabi_dsub>
 800b8aa:	4602      	mov	r2, r0
 800b8ac:	460b      	mov	r3, r1
 800b8ae:	e9d6 0100 	ldrd	r0, r1, [r6]
 800b8b2:	f7f4 fd01 	bl	80002b8 <__aeabi_dsub>
 800b8b6:	f1bb 0f00 	cmp.w	fp, #0
 800b8ba:	4604      	mov	r4, r0
 800b8bc:	460d      	mov	r5, r1
 800b8be:	f6bf aed6 	bge.w	800b66e <atan+0x3e>
 800b8c2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b8c6:	461d      	mov	r5, r3
 800b8c8:	e6d1      	b.n	800b66e <atan+0x3e>
 800b8ca:	a51d      	add	r5, pc, #116	; (adr r5, 800b940 <atan+0x310>)
 800b8cc:	e9d5 4500 	ldrd	r4, r5, [r5]
 800b8d0:	e6cd      	b.n	800b66e <atan+0x3e>
 800b8d2:	bf00      	nop
 800b8d4:	f3af 8000 	nop.w
 800b8d8:	54442d18 	.word	0x54442d18
 800b8dc:	bff921fb 	.word	0xbff921fb
 800b8e0:	8800759c 	.word	0x8800759c
 800b8e4:	7e37e43c 	.word	0x7e37e43c
 800b8e8:	e322da11 	.word	0xe322da11
 800b8ec:	3f90ad3a 	.word	0x3f90ad3a
 800b8f0:	24760deb 	.word	0x24760deb
 800b8f4:	3fa97b4b 	.word	0x3fa97b4b
 800b8f8:	a0d03d51 	.word	0xa0d03d51
 800b8fc:	3fb10d66 	.word	0x3fb10d66
 800b900:	c54c206e 	.word	0xc54c206e
 800b904:	3fb745cd 	.word	0x3fb745cd
 800b908:	920083ff 	.word	0x920083ff
 800b90c:	3fc24924 	.word	0x3fc24924
 800b910:	5555550d 	.word	0x5555550d
 800b914:	3fd55555 	.word	0x3fd55555
 800b918:	2c6a6c2f 	.word	0x2c6a6c2f
 800b91c:	bfa2b444 	.word	0xbfa2b444
 800b920:	52defd9a 	.word	0x52defd9a
 800b924:	3fadde2d 	.word	0x3fadde2d
 800b928:	af749a6d 	.word	0xaf749a6d
 800b92c:	3fb3b0f2 	.word	0x3fb3b0f2
 800b930:	fe231671 	.word	0xfe231671
 800b934:	3fbc71c6 	.word	0x3fbc71c6
 800b938:	9998ebc4 	.word	0x9998ebc4
 800b93c:	3fc99999 	.word	0x3fc99999
 800b940:	54442d18 	.word	0x54442d18
 800b944:	3ff921fb 	.word	0x3ff921fb
 800b948:	440fffff 	.word	0x440fffff
 800b94c:	7ff00000 	.word	0x7ff00000
 800b950:	3fdbffff 	.word	0x3fdbffff
 800b954:	3ff00000 	.word	0x3ff00000
 800b958:	3ff2ffff 	.word	0x3ff2ffff
 800b95c:	40038000 	.word	0x40038000
 800b960:	3ff80000 	.word	0x3ff80000
 800b964:	bff00000 	.word	0xbff00000
 800b968:	0800c620 	.word	0x0800c620
 800b96c:	0800c600 	.word	0x0800c600

0800b970 <fabs>:
 800b970:	ec51 0b10 	vmov	r0, r1, d0
 800b974:	ee10 2a10 	vmov	r2, s0
 800b978:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800b97c:	ec43 2b10 	vmov	d0, r2, r3
 800b980:	4770      	bx	lr
 800b982:	0000      	movs	r0, r0
 800b984:	0000      	movs	r0, r0
	...

0800b988 <floor>:
 800b988:	ec51 0b10 	vmov	r0, r1, d0
 800b98c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b990:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800b994:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800b998:	2e13      	cmp	r6, #19
 800b99a:	ee10 5a10 	vmov	r5, s0
 800b99e:	ee10 8a10 	vmov	r8, s0
 800b9a2:	460c      	mov	r4, r1
 800b9a4:	dc32      	bgt.n	800ba0c <floor+0x84>
 800b9a6:	2e00      	cmp	r6, #0
 800b9a8:	da14      	bge.n	800b9d4 <floor+0x4c>
 800b9aa:	a333      	add	r3, pc, #204	; (adr r3, 800ba78 <floor+0xf0>)
 800b9ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9b0:	f7f4 fc84 	bl	80002bc <__adddf3>
 800b9b4:	2200      	movs	r2, #0
 800b9b6:	2300      	movs	r3, #0
 800b9b8:	f7f5 f8c6 	bl	8000b48 <__aeabi_dcmpgt>
 800b9bc:	b138      	cbz	r0, 800b9ce <floor+0x46>
 800b9be:	2c00      	cmp	r4, #0
 800b9c0:	da57      	bge.n	800ba72 <floor+0xea>
 800b9c2:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800b9c6:	431d      	orrs	r5, r3
 800b9c8:	d001      	beq.n	800b9ce <floor+0x46>
 800b9ca:	4c2d      	ldr	r4, [pc, #180]	; (800ba80 <floor+0xf8>)
 800b9cc:	2500      	movs	r5, #0
 800b9ce:	4621      	mov	r1, r4
 800b9d0:	4628      	mov	r0, r5
 800b9d2:	e025      	b.n	800ba20 <floor+0x98>
 800b9d4:	4f2b      	ldr	r7, [pc, #172]	; (800ba84 <floor+0xfc>)
 800b9d6:	4137      	asrs	r7, r6
 800b9d8:	ea01 0307 	and.w	r3, r1, r7
 800b9dc:	4303      	orrs	r3, r0
 800b9de:	d01f      	beq.n	800ba20 <floor+0x98>
 800b9e0:	a325      	add	r3, pc, #148	; (adr r3, 800ba78 <floor+0xf0>)
 800b9e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9e6:	f7f4 fc69 	bl	80002bc <__adddf3>
 800b9ea:	2200      	movs	r2, #0
 800b9ec:	2300      	movs	r3, #0
 800b9ee:	f7f5 f8ab 	bl	8000b48 <__aeabi_dcmpgt>
 800b9f2:	2800      	cmp	r0, #0
 800b9f4:	d0eb      	beq.n	800b9ce <floor+0x46>
 800b9f6:	2c00      	cmp	r4, #0
 800b9f8:	bfbe      	ittt	lt
 800b9fa:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800b9fe:	fa43 f606 	asrlt.w	r6, r3, r6
 800ba02:	19a4      	addlt	r4, r4, r6
 800ba04:	ea24 0407 	bic.w	r4, r4, r7
 800ba08:	2500      	movs	r5, #0
 800ba0a:	e7e0      	b.n	800b9ce <floor+0x46>
 800ba0c:	2e33      	cmp	r6, #51	; 0x33
 800ba0e:	dd0b      	ble.n	800ba28 <floor+0xa0>
 800ba10:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800ba14:	d104      	bne.n	800ba20 <floor+0x98>
 800ba16:	ee10 2a10 	vmov	r2, s0
 800ba1a:	460b      	mov	r3, r1
 800ba1c:	f7f4 fc4e 	bl	80002bc <__adddf3>
 800ba20:	ec41 0b10 	vmov	d0, r0, r1
 800ba24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ba28:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800ba2c:	f04f 33ff 	mov.w	r3, #4294967295
 800ba30:	fa23 f707 	lsr.w	r7, r3, r7
 800ba34:	4207      	tst	r7, r0
 800ba36:	d0f3      	beq.n	800ba20 <floor+0x98>
 800ba38:	a30f      	add	r3, pc, #60	; (adr r3, 800ba78 <floor+0xf0>)
 800ba3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba3e:	f7f4 fc3d 	bl	80002bc <__adddf3>
 800ba42:	2200      	movs	r2, #0
 800ba44:	2300      	movs	r3, #0
 800ba46:	f7f5 f87f 	bl	8000b48 <__aeabi_dcmpgt>
 800ba4a:	2800      	cmp	r0, #0
 800ba4c:	d0bf      	beq.n	800b9ce <floor+0x46>
 800ba4e:	2c00      	cmp	r4, #0
 800ba50:	da02      	bge.n	800ba58 <floor+0xd0>
 800ba52:	2e14      	cmp	r6, #20
 800ba54:	d103      	bne.n	800ba5e <floor+0xd6>
 800ba56:	3401      	adds	r4, #1
 800ba58:	ea25 0507 	bic.w	r5, r5, r7
 800ba5c:	e7b7      	b.n	800b9ce <floor+0x46>
 800ba5e:	2301      	movs	r3, #1
 800ba60:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800ba64:	fa03 f606 	lsl.w	r6, r3, r6
 800ba68:	4435      	add	r5, r6
 800ba6a:	4545      	cmp	r5, r8
 800ba6c:	bf38      	it	cc
 800ba6e:	18e4      	addcc	r4, r4, r3
 800ba70:	e7f2      	b.n	800ba58 <floor+0xd0>
 800ba72:	2500      	movs	r5, #0
 800ba74:	462c      	mov	r4, r5
 800ba76:	e7aa      	b.n	800b9ce <floor+0x46>
 800ba78:	8800759c 	.word	0x8800759c
 800ba7c:	7e37e43c 	.word	0x7e37e43c
 800ba80:	bff00000 	.word	0xbff00000
 800ba84:	000fffff 	.word	0x000fffff

0800ba88 <scalbn>:
 800ba88:	b570      	push	{r4, r5, r6, lr}
 800ba8a:	ec55 4b10 	vmov	r4, r5, d0
 800ba8e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800ba92:	4606      	mov	r6, r0
 800ba94:	462b      	mov	r3, r5
 800ba96:	b99a      	cbnz	r2, 800bac0 <scalbn+0x38>
 800ba98:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800ba9c:	4323      	orrs	r3, r4
 800ba9e:	d036      	beq.n	800bb0e <scalbn+0x86>
 800baa0:	4b39      	ldr	r3, [pc, #228]	; (800bb88 <scalbn+0x100>)
 800baa2:	4629      	mov	r1, r5
 800baa4:	ee10 0a10 	vmov	r0, s0
 800baa8:	2200      	movs	r2, #0
 800baaa:	f7f4 fdbd 	bl	8000628 <__aeabi_dmul>
 800baae:	4b37      	ldr	r3, [pc, #220]	; (800bb8c <scalbn+0x104>)
 800bab0:	429e      	cmp	r6, r3
 800bab2:	4604      	mov	r4, r0
 800bab4:	460d      	mov	r5, r1
 800bab6:	da10      	bge.n	800bada <scalbn+0x52>
 800bab8:	a32b      	add	r3, pc, #172	; (adr r3, 800bb68 <scalbn+0xe0>)
 800baba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800babe:	e03a      	b.n	800bb36 <scalbn+0xae>
 800bac0:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800bac4:	428a      	cmp	r2, r1
 800bac6:	d10c      	bne.n	800bae2 <scalbn+0x5a>
 800bac8:	ee10 2a10 	vmov	r2, s0
 800bacc:	4620      	mov	r0, r4
 800bace:	4629      	mov	r1, r5
 800bad0:	f7f4 fbf4 	bl	80002bc <__adddf3>
 800bad4:	4604      	mov	r4, r0
 800bad6:	460d      	mov	r5, r1
 800bad8:	e019      	b.n	800bb0e <scalbn+0x86>
 800bada:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800bade:	460b      	mov	r3, r1
 800bae0:	3a36      	subs	r2, #54	; 0x36
 800bae2:	4432      	add	r2, r6
 800bae4:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800bae8:	428a      	cmp	r2, r1
 800baea:	dd08      	ble.n	800bafe <scalbn+0x76>
 800baec:	2d00      	cmp	r5, #0
 800baee:	a120      	add	r1, pc, #128	; (adr r1, 800bb70 <scalbn+0xe8>)
 800baf0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800baf4:	da1c      	bge.n	800bb30 <scalbn+0xa8>
 800baf6:	a120      	add	r1, pc, #128	; (adr r1, 800bb78 <scalbn+0xf0>)
 800baf8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bafc:	e018      	b.n	800bb30 <scalbn+0xa8>
 800bafe:	2a00      	cmp	r2, #0
 800bb00:	dd08      	ble.n	800bb14 <scalbn+0x8c>
 800bb02:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800bb06:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800bb0a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800bb0e:	ec45 4b10 	vmov	d0, r4, r5
 800bb12:	bd70      	pop	{r4, r5, r6, pc}
 800bb14:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800bb18:	da19      	bge.n	800bb4e <scalbn+0xc6>
 800bb1a:	f24c 3350 	movw	r3, #50000	; 0xc350
 800bb1e:	429e      	cmp	r6, r3
 800bb20:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800bb24:	dd0a      	ble.n	800bb3c <scalbn+0xb4>
 800bb26:	a112      	add	r1, pc, #72	; (adr r1, 800bb70 <scalbn+0xe8>)
 800bb28:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bb2c:	2b00      	cmp	r3, #0
 800bb2e:	d1e2      	bne.n	800baf6 <scalbn+0x6e>
 800bb30:	a30f      	add	r3, pc, #60	; (adr r3, 800bb70 <scalbn+0xe8>)
 800bb32:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb36:	f7f4 fd77 	bl	8000628 <__aeabi_dmul>
 800bb3a:	e7cb      	b.n	800bad4 <scalbn+0x4c>
 800bb3c:	a10a      	add	r1, pc, #40	; (adr r1, 800bb68 <scalbn+0xe0>)
 800bb3e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bb42:	2b00      	cmp	r3, #0
 800bb44:	d0b8      	beq.n	800bab8 <scalbn+0x30>
 800bb46:	a10e      	add	r1, pc, #56	; (adr r1, 800bb80 <scalbn+0xf8>)
 800bb48:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bb4c:	e7b4      	b.n	800bab8 <scalbn+0x30>
 800bb4e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800bb52:	3236      	adds	r2, #54	; 0x36
 800bb54:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800bb58:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800bb5c:	4620      	mov	r0, r4
 800bb5e:	4b0c      	ldr	r3, [pc, #48]	; (800bb90 <scalbn+0x108>)
 800bb60:	2200      	movs	r2, #0
 800bb62:	e7e8      	b.n	800bb36 <scalbn+0xae>
 800bb64:	f3af 8000 	nop.w
 800bb68:	c2f8f359 	.word	0xc2f8f359
 800bb6c:	01a56e1f 	.word	0x01a56e1f
 800bb70:	8800759c 	.word	0x8800759c
 800bb74:	7e37e43c 	.word	0x7e37e43c
 800bb78:	8800759c 	.word	0x8800759c
 800bb7c:	fe37e43c 	.word	0xfe37e43c
 800bb80:	c2f8f359 	.word	0xc2f8f359
 800bb84:	81a56e1f 	.word	0x81a56e1f
 800bb88:	43500000 	.word	0x43500000
 800bb8c:	ffff3cb0 	.word	0xffff3cb0
 800bb90:	3c900000 	.word	0x3c900000

0800bb94 <_init>:
 800bb94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb96:	bf00      	nop
 800bb98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bb9a:	bc08      	pop	{r3}
 800bb9c:	469e      	mov	lr, r3
 800bb9e:	4770      	bx	lr

0800bba0 <_fini>:
 800bba0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bba2:	bf00      	nop
 800bba4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bba6:	bc08      	pop	{r3}
 800bba8:	469e      	mov	lr, r3
 800bbaa:	4770      	bx	lr
